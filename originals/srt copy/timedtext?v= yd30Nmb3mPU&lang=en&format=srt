1
00:00:00,000 --> 00:00:07,000
>> LEPAGE: All right. Good morning everybody.
Thanks for joining us. You know, I think back

2
00:00:08,490 --> 00:00:15,490
to the first website that I started building
back probably 15 years ago or so, and it was

3
00:00:16,590 --> 00:00:22,449
really about content, giving, putting content
on the Web. It wasn't about interactive video

4
00:00:22,449 --> 00:00:27,410
at all. All of the graphics that I had, the
most interactive graphic I had and the richest

5
00:00:27,410 --> 00:00:32,890
graphic I had was the little shovel guy, the
animated gif that was doing that kind of thing.

6
00:00:32,890 --> 00:00:38,450
And as the Web has matured, we've seen a lot
more interactivity come. We've seen a lot

7
00:00:38,450 --> 00:00:44,000
more richer graphics, right? But a lot of
those things sometimes required a little bit

8
00:00:44,000 --> 00:00:50,870
of black magic to happen or we've had to do
server side processing of all of our code

9
00:00:50,870 --> 00:00:57,649
in order to get those really rich graphics,
really rich experiences, and really rich websites

10
00:00:57,649 --> 00:01:04,649
and web applications. But HTML5 really gives
us the platform that we need to be able to

11
00:01:05,519 --> 00:01:11,160
build web apps that feel like they're native,
that feel like they've got the power, the

12
00:01:11,160 --> 00:01:18,160
same experiences and really have those awesome
webs--web apps that we expect. So we're talking

13
00:01:21,080 --> 00:01:25,810
today about getting started with HTML5. My
name is Pete LePage. I'm a developer advocate

14
00:01:25,810 --> 00:01:32,550
at Google. And I'll let Ernest introduce himself.
>> DELGADO: Yes. Thanks Pete. My name is Ernest

15
00:01:32,550 --> 00:01:39,329
Delgado and I'm also in the Chrome Developer
Relations Team focused mainly on HTML5. Pete?

16
00:01:39,329 --> 00:01:43,649
>> LEPAGE: Awesome. Thanks. You can follow
us on Twitter and we'll be having--spending

17
00:01:43,649 --> 00:01:49,819
a bit of time on Twitter today. As we're going
through, please if you haven't already, have

18
00:01:49,819 --> 00:01:55,170
a look at the SpeakerMeter website and provide
feedback as we're going. And don't forget

19
00:01:55,170 --> 00:02:02,170
the BootCamp I/O and the Chrome Twitter hashtags
as we're going through these things. The plan

20
00:02:02,590 --> 00:02:07,810
for today is we're going to talk about what
is HTML5. We're going to dive into what we

21
00:02:07,810 --> 00:02:13,600
can do with it and how we can start using
it today. This is really sort of a 100-level

22
00:02:13,600 --> 00:02:19,890
talk, but for those of you who have played
with HTML5 before, don't worry. There will

23
00:02:19,890 --> 00:02:24,570
be a few good nuggets in here. There's going
to be some really neat stuff. The other thing

24
00:02:24,570 --> 00:02:29,730
that I want to mention is that we really can't
go through all of the new features of HTML5

25
00:02:29,730 --> 00:02:34,750
in a single one hour session. We'd probably
be here for the next four hours and we'd get

26
00:02:34,750 --> 00:02:40,470
maybe half the stuff, so we just sort of picked
a bunch of our favorites that we thought were

27
00:02:40,470 --> 00:02:45,860
the most interesting. All right. If you want
to see more, we'll have some resources at

28
00:02:45,860 --> 00:02:52,580
the end that you can go and check out. As
well, these slides and the code that we're

29
00:02:52,580 --> 00:02:56,400
showing today is going to be available to
you after. So don't worry about scribbling

30
00:02:56,400 --> 00:03:02,470
down any notes or like any--anything, code,
snippets or anything like that. So the first

31
00:03:02,470 --> 00:03:08,950
thing I want to start with is what is HTML5
and what does it mean? At Google, we think

32
00:03:08,950 --> 00:03:15,950
about HTML5 as the collection of web technologies
that have really come to maturity in the last

33
00:03:17,290 --> 00:03:24,290
two to four years. So that includes things
that give us a really rich development platform

34
00:03:24,400 --> 00:03:30,750
as developers that we can go and use really
rich APIs to provide offline access or offline

35
00:03:30,750 --> 00:03:35,430
storage, so that I can store data on the user's
computer without having to send it back and

36
00:03:35,430 --> 00:03:42,430
forth with cookies. Or that I can get access
to things like device hardware. Getting access

37
00:03:42,970 --> 00:03:48,220
to maybe GEO location for the user or how
their laptop is sitting, whether it's tilted,

38
00:03:48,220 --> 00:03:53,300
whether it's straight up and down, all of
that kind of information. But it also gives

39
00:03:53,300 --> 00:03:59,140
us access to things that we can make our applications
run faster as well. And so, we're going to

40
00:03:59,140 --> 00:04:05,990
dive into those. And it gives us access to
things that make--allows to build more beautiful

41
00:04:05,990 --> 00:04:10,530
web apps. No longer are we limited to the
sort of, "Oh look, it's a white page with

42
00:04:10,530 --> 00:04:16,530
like a couple of words on it and it's not
all that pretty." We can do some really rich

43
00:04:16,530 --> 00:04:22,930
graphically intense stuff that we could never
do before with video and audio and canvass

44
00:04:22,930 --> 00:04:29,930
and CSS styling. So the way we sort of decided,
we wanted to show you this is by building

45
00:04:31,470 --> 00:04:38,470
a web app that takes tweets from the Chrome
Dev Rel Team and visualizes them in this kind

46
00:04:40,290 --> 00:04:46,950
of neat way. It drops them down. So it's pulling
all these tweets from Twitter and it's using

47
00:04:46,950 --> 00:04:53,919
CSS3 Animations to drop them, so all these
guys here getting drawn and using CSS3 Animations,

48
00:04:53,919 --> 00:04:58,560
the older the tweet is the more transparent
it becomes, so you notice on some of these

49
00:04:58,560 --> 00:05:02,860
tweets you can kind of see, on those ones
you can see through it, this one you can't

50
00:05:02,860 --> 00:05:09,860
see through it at all. So we are using opacity
to set the age of the tweets. We're using

51
00:05:10,530 --> 00:05:17,530
Geolocation to be able to provide information
about where people are. If I have a look here,

52
00:05:17,820 --> 00:05:23,100
this tweet here that's a little bit lighter
on screen as I make it--mouse over it gets

53
00:05:23,100 --> 00:05:29,639
bigger, it's saying there's geolocation there,
and in fact, we provided additional rendering

54
00:05:29,639 --> 00:05:36,639
of geolocation on these tweets. We also have
notifications. I'm not going to turn these

55
00:05:37,370 --> 00:05:43,630
on right now because I want--we'll show--have
a look at these a little later. But we also

56
00:05:43,630 --> 00:05:50,590
have an ability to be able to search. This
is I think one of the coolest things. So speech

57
00:05:50,590 --> 00:05:57,590
input. So I can click this little guy here,
free cake. Sure enough, there's all the tweets

58
00:06:00,020 --> 00:06:04,669
that include the words free cake. All right,
the amount of code that I had to write to

59
00:06:04,669 --> 00:06:11,669
do that, not much. All right. Under the covers,
we're using IndexDB to store all the tweets,

60
00:06:13,650 --> 00:06:18,199
so that even if you weren't online you'd still
be able to see all of these tweets. And we're

61
00:06:18,199 --> 00:06:25,199
using Web Workers to go and get the tweets
and put them into the database. So with that,

62
00:06:25,710 --> 00:06:29,740
I'm going to pass it over to Ernest who's
going to talk about the stuff that we did

63
00:06:29,740 --> 00:06:34,990
for the Rich User Experience.
>> DELGADO: Thank you Pete. So I'm going to

64
00:06:34,990 --> 00:06:39,960
show you some of these APIs that we've used
for this app. And starting for speech input,

65
00:06:39,960 --> 00:06:43,510
which is the last one he demoed, and this
is the shortest snippet that you're going

66
00:06:43,510 --> 00:06:48,810
to see today because actually, to enable this
feature, we only added this attribute to the

67
00:06:48,810 --> 00:06:53,830
input field that we already know. So the good
thing is the browser is giving us a lot of

68
00:06:53,830 --> 00:06:58,880
UI for free that we don't need to do with
JavaScript. For instance here we have this

69
00:06:58,880 --> 00:07:04,960
input field inside this bubble, and when we
click on the microphone does this part that

70
00:07:04,960 --> 00:07:10,070
you seen that is going to tell us, "Okay,
it's time to talk." I'm going to try to say

71
00:07:10,070 --> 00:07:17,070
free cake with a much worst pronunciation
of course. Free cake. Okay. At least it recognized

72
00:07:19,070 --> 00:07:24,669
it. So we have these words here, but now we
want to do something else. We also have an

73
00:07:24,669 --> 00:07:30,430
API that we can access from JavaScript and
do more stuff. For instance, here if we attached

74
00:07:30,430 --> 00:07:36,090
like an event to the input field and say when
it changes, just trigger this function. The

75
00:07:36,090 --> 00:07:40,560
event object returns these lists of results,
and we can go through the list of results

76
00:07:40,560 --> 00:07:47,560
to do different stuff. I'm going to do the
same test here with the free cake. Free cake.

77
00:07:49,360 --> 00:07:55,400
And I didn't say it very well. So it was the
second guess actually. The system understood

78
00:07:55,400 --> 00:07:59,270
that they said create and the confidence for
that was 0.2, so the confidence wasn't very

79
00:07:59,270 --> 00:08:06,270
high. But I'll try to pronounce it better,
let's see. Free cake. So now it gets free

80
00:08:08,479 --> 00:08:13,400
cake and with a confidence of 0.8, so still,
we have a list of all the other guesses, like

81
00:08:13,400 --> 00:08:18,100
free games, free skate and so on. But the
confidence wasn't very high for that--this

82
00:08:18,100 --> 00:08:21,780
confidence as well as the string which is
called the utterance, these are data that

83
00:08:21,780 --> 00:08:26,289
we are getting from this API. And when we
are saying a word this word is sent to the

84
00:08:26,289 --> 00:08:30,479
cloud, as it happens with our phone, the voice--the
voice recognition. We don't need to do any

85
00:08:30,479 --> 00:08:35,429
local voice training to get accurate results.
It used to happen that with a local, like

86
00:08:35,429 --> 00:08:40,199
desktop software for this matter, but now
that we're using the cloud we don't need that

87
00:08:40,199 --> 00:08:47,199
anymore, and that's really cool. So another
feature we were using the--in the app is Geolocation.

88
00:08:48,619 --> 00:08:52,350
And this is really useful to build your apps
with customized content based on the location

89
00:08:52,350 --> 00:08:56,209
of the user. And just--we are just checking
for navigature--navigator.geolocation to check

90
00:08:56,209 --> 00:09:03,209
if the browser is supporting this. And then
using the watch position method, which is

91
00:09:04,189 --> 00:09:08,869
actually running in the background to check
for the position constantly, and then in the

92
00:09:08,869 --> 00:09:13,850
position parameter we get like the coordinates
latitude, longitude, and one that is not showing

93
00:09:13,850 --> 00:09:18,499
here on the screen but is the accuracy or
something like that, that actually if I'd

94
00:09:18,499 --> 00:09:24,699
run this demo we're going to see. It says
that access denied because we need to enable

95
00:09:24,699 --> 00:09:31,699
geolocation. We can do it here, I think that
we could have done that from this app as well

96
00:09:31,860 --> 00:09:38,860
because it needs to be like user enabled by
side books which show location here, yes.

97
00:09:39,209 --> 00:09:46,209
I see. So help me here a bit. I need to claim
the results for that.

98
00:09:50,079 --> 00:09:54,610
>> LEPAGE: What we did earlier, we did a rehearsal
to make sure everything was working, and we're

99
00:09:54,610 --> 00:09:59,029
like, "Oh let's just deny access for now,
so that way we can have it work properly when

100
00:09:59,029 --> 00:10:02,069
we actually go do the demo."
>> DELGADO: Yes. I'm going to create here

101
00:10:02,069 --> 00:10:03,749
now.
>> LEPAGE: Yes. Helps to clear to that after

102
00:10:03,749 --> 00:10:08,189
you deny it.
>> DELGADO: Perfect. Now it should work. So,

103
00:10:08,189 --> 00:10:15,189
let's refresh. So these you could see the
level of protection that the user has. So,

104
00:10:15,670 --> 00:10:22,670
when we ask here for geolocation it--it's
both asking us in the bother bar. We allow--allowing

105
00:10:24,050 --> 00:10:29,319
now this feature. And it's saying is that
we are at this position. Not very good actually,

106
00:10:29,319 --> 00:10:35,019
because it says actually that the accuracy
parameter that I told you before it's saying

107
00:10:35,019 --> 00:10:40,839
that it's 22,000. So in the background he's
using like IP-Lookup or any information that

108
00:10:40,839 --> 00:10:47,470
the browser has, like a Wi-Fi connection,
like a spot--AP spots, so that's why it asked

109
00:10:47,470 --> 00:10:52,019
the user for permission for these kind of
things. So as in all demos that you try it

110
00:10:52,019 --> 00:10:58,300
live it works, but try it at home and it will
be better. And the way we're using it here

111
00:10:58,300 --> 00:11:03,540
in the TweeterFall application is that he
mentioned before that the tweets that have

112
00:11:03,540 --> 00:11:08,279
geolocation attached in that geo object that
you get when you use the Tweeter API. We are

113
00:11:08,279 --> 00:11:13,369
highlighting them here in this list. So we're
using this position of the tweet compared

114
00:11:13,369 --> 00:11:18,800
with our position in local. And if that person
is very far that we chose in this fall down

115
00:11:18,800 --> 00:11:23,839
here, like smaller or bigger, but only for
those with geolocation, in this case, it would

116
00:11:23,839 --> 00:11:30,839
be like this tweet of Mike West. So, how many
people here haven't heard about Canvas yet?

117
00:11:34,029 --> 00:11:38,139
So--okay, not many. And it's not surprising
because this is one of the features that has

118
00:11:38,139 --> 00:11:43,009
been around for a long time in HTML5 and it's
funny to see how we've evolved over time.

119
00:11:43,009 --> 00:11:50,009
Because it started with all these methods
to make basic shapes and draw lines. And it

120
00:11:50,429 --> 00:11:54,959
has also other methods for transformations.
And as you can see here in this drawing, it's

121
00:11:54,959 --> 00:11:59,980
related but the edges are, like, kind of cut
off. And this is because we're not rotating

122
00:11:59,980 --> 00:12:04,069
that whole canvas element, only the content
inside. And, obviously, the size it was like

123
00:12:04,069 --> 00:12:10,290
wider and not as much as high. And that's
just understand that we're doing the modifications

124
00:12:10,290 --> 00:12:16,170
at pixel level. Also when we rotate this image,
there's no transition we have to do, like,

125
00:12:16,170 --> 00:12:21,920
a four loop and do the animation by hand.
That's why after this thing was kind of popular.

126
00:12:21,920 --> 00:12:27,480
There were many frameworks that where on top
of that to kind of easy of these programming.

127
00:12:27,480 --> 00:12:34,029
Also, there's like a processing syntax wrapper
for that. So there are many libraries on top

128
00:12:34,029 --> 00:12:41,029
of Canvas. But the power of this is really
high. And also we can use images or videos

129
00:12:41,649 --> 00:12:47,399
to import it in the canvas, get the frames
and modify the pixels. And here--just as a

130
00:12:47,399 --> 00:12:50,649
proof of concept, we have these two images
here and just--they have been imported inside

131
00:12:50,649 --> 00:12:56,779
the canvas just to place them, not a big deal.
But then we can export that with the--to data

132
00:12:56,779 --> 00:13:03,779
URL, to Internet, to any PNG or JPEG back
to the image tag if you--if we want. So we

133
00:13:04,649 --> 00:13:10,079
will go back to the TweeterFall app.
Another proof of concept that we put here

134
00:13:10,079 --> 00:13:14,869
was that right now the background is this
CSS pattern and if we enabled like animated

135
00:13:14,869 --> 00:13:21,319
background is doing this fancy stuff that
taking, like, some star's image putting it

136
00:13:21,319 --> 00:13:27,769
on--putting it on top with some opacity. Also
doing this color changing and this animation

137
00:13:27,769 --> 00:13:32,809
and it was really complex to do that only
with JavaScript or images so pre-running that

138
00:13:32,809 --> 00:13:39,809
with Canvas is much easier. So if you could
remind this rotation I did with Canvas, if

139
00:13:42,540 --> 00:13:47,359
we want to rotate the whole element. Now we
are able to do it with 2D transformations.

140
00:13:47,359 --> 00:13:52,509
So, it needs actually--just from CSS, we just
set some properties to transform and rotate

141
00:13:52,509 --> 00:13:57,420
like 90 degrees but the cool thing is that
if we combine that with transition then we

142
00:13:57,420 --> 00:14:01,989
have the whole animation between the two states
and we didn't need to do like in Canvas like

143
00:14:01,989 --> 00:14:07,179
every frame redraw the whole thing. So in
the tradition we're all saying--just saying

144
00:14:07,179 --> 00:14:12,160
800 milliseconds and that's what it's going
to last but now it means that we are able

145
00:14:12,160 --> 00:14:17,449
to do it on any element. So I hovered this
code, it's going to do it as well, just because

146
00:14:17,449 --> 00:14:22,939
I pre-run it like that but I could do it on
the title or on the whole page if I wanted

147
00:14:22,939 --> 00:14:26,910
to. So this transformation is the one--are
the ones that we use in the Tweeter application

148
00:14:26,910 --> 00:14:33,100
to make this thing bigger. And, actually,
the code, I think I have the snippet here.

149
00:14:33,100 --> 00:14:39,239
These are the two stages I was talking about.
I'm saying like, an initial state where there's

150
00:14:39,239 --> 00:14:46,040
no rotation at all and a final state that
happens when I hover that tweet using the

151
00:14:46,040 --> 00:14:51,899
CSS selection. And then we have like the scale
that's why this--the tweet is getting bigger.

152
00:14:51,899 --> 00:14:58,369
And some translations just to make it like
go not outside of the boundaries and what

153
00:14:58,369 --> 00:15:04,230
happens here is that you see many lines because
in CSS, when something new comes, they are

154
00:15:04,230 --> 00:15:09,689
like the browser prefixes that allows us to
use that new feature in the browser. And later

155
00:15:09,689 --> 00:15:14,129
when it becomes standardized, then we don't--we
won't need that anymore. But, at least, when

156
00:15:14,129 --> 00:15:19,170
browsers implement things with different syntax
or little differences, we are able to do--use

157
00:15:19,170 --> 00:15:26,170
that right away in the browser using these
prefixes. There are also 3D transformations.

158
00:15:27,329 --> 00:15:32,759
These are really cool feature and also one
of the latest. And here, when we say rotation,

159
00:15:32,759 --> 00:15:37,639
we can specify on one--what axis we're on
in that rotation. And everyone--like a 90

160
00:15:37,639 --> 00:15:41,329
degrees going to flip whatever we have on
the screen and it's going to give like the

161
00:15:41,329 --> 00:15:48,329
impression of the 3D because we added this
prospective parameter. So we didn't do anything

162
00:15:48,949 --> 00:15:54,559
here with 3D in this app but if you pay attention
to these slides, the way that they are doing

163
00:15:54,559 --> 00:15:59,350
the transition, they are doing this kind of
3D effect that where we're using the 3D Transforms.

164
00:15:59,350 --> 00:16:05,779
So this not meant to be like a whole 3D environment
or a game. You have, like, the Web GL context

165
00:16:05,779 --> 00:16:12,480
in the canvas tag. We're going to not talk
about it because it's really a dense subject.

166
00:16:12,480 --> 00:16:16,259
But you have a specific talk on I_O tomorrow
if you're more interested or if you are a

167
00:16:16,259 --> 00:16:22,769
game developer. And now, let's make our site
prettier because actually, for many, many

168
00:16:22,769 --> 00:16:29,119
years, we had those eight fonts in our browser
and we were limited to those eight fonts.

169
00:16:29,119 --> 00:16:33,929
And since you shouldn't be using Comic Sans
for your site, we are limited to seven--eight

170
00:16:33,929 --> 00:16:40,519
font types. So the cool thing to them or the
Web fonts, that now with this feature, we

171
00:16:40,519 --> 00:16:46,869
have access to thousands of fonts. Is this--to
use this extension made by Pamela Fox, and

172
00:16:46,869 --> 00:16:50,699
this point actually a list from an API that
we have at Google is the Google Fonts API

173
00:16:50,699 --> 00:16:55,929
and we have all these fonts that we can preview
and when we selected anything on the page,

174
00:16:55,929 --> 00:17:00,639
like the code there is changing and we can
say, "Okay. How it looks here on my site?"

175
00:17:00,639 --> 00:17:04,959
And if we like this font for our site, then
we can copy-paste this code and put it in

176
00:17:04,959 --> 00:17:11,400
the header and boom, yes, we have the fonts
available already. The only thing is that

177
00:17:11,400 --> 00:17:16,040
if you want to host the fonts because, with
this API, Google is hosting the font file

178
00:17:16,040 --> 00:17:21,160
for you. So if you want to get the true type
and host it in your own server just put it

179
00:17:21,160 --> 00:17:27,360
in the folder and then use the syntax in CSS.
You say font family with a keyword that you're

180
00:17:27,360 --> 00:17:33,000
going to use in your spreadsheet and then
source with a link to wherever you put your

181
00:17:33,000 --> 00:17:40,000
font type--font file. And, actually, here,
I think, you have seen already that this font

182
00:17:42,230 --> 00:17:46,760
is actually text is not any much replacement
or any crazy [INDISTINCT] that web developers

183
00:17:46,760 --> 00:17:51,330
used to do and is using this font for here.
I think the font for the text is also another

184
00:17:51,330 --> 00:17:57,670
one so it makes--actually, designers are really
happy with this feature now. And the last

185
00:17:57,670 --> 00:18:02,740
feature I'm going to show you in this section
is Web Notifications. An easier way to understand

186
00:18:02,740 --> 00:18:09,740
this feature is if you are using chat or any
chat or email software in your desktop but

187
00:18:10,110 --> 00:18:14,170
I wouldn't be surprised that all of you maybe
are using web-based software for that already.

188
00:18:14,170 --> 00:18:20,160
But, obviously, if you are using still, like
the desktop, you'll be familiar with the notifications

189
00:18:20,160 --> 00:18:27,060
you have on the top right on Macintosh and
on the top bottom windows. And we'll be, like,

190
00:18:27,060 --> 00:18:31,350
kind of the scanned--similar to that but what
we're seeing here actually are screenshots

191
00:18:31,350 --> 00:18:35,660
of the web notifications because, actually,
we want this kind of feature for our web apps.

192
00:18:35,660 --> 00:18:42,660
I'm going to show the demo first here because
as it happens with geolocation, you need the

193
00:18:43,760 --> 00:18:50,760
specific permission from the user and then
we have to say that, okay, we're allowed to

194
00:18:51,420 --> 00:18:54,300
do that. That's because we are the one the
user to get, like, spam or any popup from

195
00:18:54,300 --> 00:19:00,890
any random site, he needs to know where he's
giving permissions for--to receive these notifications.

196
00:19:00,890 --> 00:19:07,890
So if we receive--let me see, for instance
here, kind of--there are these notification

197
00:19:08,510 --> 00:19:14,030
here that it's showing more than the UI and
this notification at desktop level. Now it's

198
00:19:14,030 --> 00:19:17,180
disappearing. So this notification that we
get here and probably we're going to get some

199
00:19:17,180 --> 00:19:22,180
more--if some of my teammates tweet now, we're
going to get those tweets from now until the

200
00:19:22,180 --> 00:19:27,060
end of the talk. And it doesn't matter if
I focus on that app or you have the browser

201
00:19:27,060 --> 00:19:32,970
modified, see, this thing is showing right
here now, from my boss actually. And I hope

202
00:19:32,970 --> 00:19:39,570
she's not watching me. The snippet for that
is that we have this function. And when we

203
00:19:39,570 --> 00:19:46,140
call this function, we check if this site
has permissions from the user to show notifications.

204
00:19:46,140 --> 00:19:51,370
And we're using this single method to pass
through parameters like a picture, a title

205
00:19:51,370 --> 00:19:55,000
and the content. And, actually, since we're
doing it from Tweeter we have all the--that

206
00:19:55,000 --> 00:19:59,350
information from the json object of the--of
the tweets. There's another kind of notification

207
00:19:59,350 --> 00:20:04,050
that we're not showing here that is called,
I think, create HTML5 note--HTML notification.

208
00:20:04,050 --> 00:20:08,830
So instead of three parameters, we parsed
one single parameter with HTML content and

209
00:20:08,830 --> 00:20:14,080
that's going to show up in the notification.
We're using a similar method to show and this

210
00:20:14,080 --> 00:20:19,670
is why the notification was hiding after a
while. Because, by default, that thing--the

211
00:20:19,670 --> 00:20:25,650
thing is going to stay there until the user
goes and closes it. But maybe we think that

212
00:20:25,650 --> 00:20:30,430
that's annoying for him because there are
too many notifications up to the developer.

213
00:20:30,430 --> 00:20:36,930
So we set--we set this set timeout and he's
going to close after a while. And, actually,

214
00:20:36,930 --> 00:20:41,880
if you use Gmail or Google Calendar or even
TweetDeck or some other similar app, you can

215
00:20:41,880 --> 00:20:47,340
enable this feature because they are already
supporting that. With that, I'm going to pass

216
00:20:47,340 --> 00:20:54,340
it over to Pete to talk about some more features.
>> LEPAGE: Awesome. Yes. Thank you, sir. All

217
00:20:55,410 --> 00:21:02,410
right. So Ernest went through some of the
sort front-end and user experience stuff that

218
00:21:03,180 --> 00:21:07,630
really allows us to make our applications
feel like they run on the desktop. I'm going

219
00:21:07,630 --> 00:21:12,290
to take a look at some of the things that
allow us to build applications that are more

220
00:21:12,290 --> 00:21:17,720
powerful, that give us more APIs than we've
ever had access to before. And really allow

221
00:21:17,720 --> 00:21:23,830
us to do stuff that we couldn't do or if we
did, we had to like, as I mentioned earlier,

222
00:21:23,830 --> 00:21:29,120
use some of that black magic, use some JavaScript
that wasn't really meant to do something and

223
00:21:29,120 --> 00:21:35,390
innovate something through this and that and
just not really pretty ways of doing things.

224
00:21:35,390 --> 00:21:39,940
As we started building this app, one of the
things we realized we needed to do was stored

225
00:21:39,940 --> 00:21:45,050
data. And we could've done that using cookies
but we wanted to store the configuration data

226
00:21:45,050 --> 00:21:52,050
for this application on the user's computer.
We use Web Storage to do that. Web Storage

227
00:21:52,560 --> 00:21:57,820
allows you to store name value pairs of data,
so it's--you know, you've got the name and

228
00:21:57,820 --> 00:22:02,940
then value is only a string. So we're using
that to store this configuration information.

229
00:22:02,940 --> 00:22:09,400
There's two type of Web Storage that are available
to us. There's sessionStorage which, like

230
00:22:09,400 --> 00:22:14,850
it sounds like, its lifetime is for the session,
so you close that window and you've lost access

231
00:22:14,850 --> 00:22:21,850
to it. And then there's localStorage. And
that last for until the user blows away their

232
00:22:22,280 --> 00:22:28,870
cache and clears out their browser. The way
we're using this in our app is we've got another

233
00:22:28,870 --> 00:22:33,910
function called getSettings. And getSettings
says var settings equals localStorage and

234
00:22:33,910 --> 00:22:40,910
it goes and tries to get the string from localStorage.
It then tries to parse that string into a

235
00:22:41,480 --> 00:22:45,560
JavaScript object. Because it's in there as
a string, we want to get it into an object,

236
00:22:45,560 --> 00:22:52,560
so we can handle it a little bit more accurate--easily.
And so, settings, JSON.parse. Now I've wrapped

237
00:22:53,260 --> 00:22:57,870
that and try cache block because what I want
to do is say, hey, if you fail or if there's

238
00:22:57,870 --> 00:23:03,930
any kind of problems with this thing, we'll
just go create a new set of settings and then

239
00:23:03,930 --> 00:23:10,320
we're going to pass those back. Then to store
that data into the configuration, we just

240
00:23:10,320 --> 00:23:17,320
do localStorage, square bracket equals and
you give it the key, and then you give it

241
00:23:18,150 --> 00:23:23,100
the string that you want to put in. Again,
because we're taking a JavaScript object,

242
00:23:23,100 --> 00:23:27,280
we need to turn it into a string because we
can't just shove a JavaScript object into

243
00:23:27,280 --> 00:23:34,280
there. We're using JSON.stringify, and that
allows us to get our configuration data into

244
00:23:35,020 --> 00:23:42,020
the app. So all of the information that's
stored around which Tweeter username and which

245
00:23:44,740 --> 00:23:48,900
user list we want to store, as well as, you
know, how many tweets we want to show at any

246
00:23:48,900 --> 00:23:55,900
given time. Whether we want to, you know,
if I turn the notifications off and reload

247
00:23:56,750 --> 00:24:03,750
the app; sure enough the notifications are
off. So every time we start the app, we started

248
00:24:04,010 --> 00:24:11,010
in the same set of configuration that we used
last time. 
We also wanted to store additional stuff on

249
00:24:17,330 --> 00:24:22,580
the user's computer that localStorage didn't
really work for. We wanted to store all the

250
00:24:22,580 --> 00:24:29,580
tweets that the user had seen on their computer.
And so, indexedDB is a new set of, a new database

251
00:24:29,910 --> 00:24:35,930
object that comes as part of HTML5 and it
allows you to store significant quantities

252
00:24:35,930 --> 00:24:41,330
of structured data, all right? Now, there's
a couple of things that we're going to have

253
00:24:41,330 --> 00:24:47,000
a lookup but before we dig into this one at
all, I just want to stop and sort of grab

254
00:24:47,000 --> 00:24:53,080
everybody's attention for one sec. A lot of
the new APIs that you get access to is--with

255
00:24:53,080 --> 00:24:59,310
HTML5 are asynchronous. Put your hand up if
you've done like an AJAX request and you know

256
00:24:59,310 --> 00:25:03,620
how you deal with, sort of the asynchronous,
yes. So you know how with that kind of thing,

257
00:25:03,620 --> 00:25:08,500
you have to give it a callback because the
data might not be there when you go ask for

258
00:25:08,500 --> 00:25:14,880
it and it's going to go and do stuff asynchronously.
Well, many of the APIs that we get as part

259
00:25:14,880 --> 00:25:20,750
of HTML5 are that same way, all right? And
indexedDB is definitely one of those and you'll

260
00:25:20,750 --> 00:25:27,750
see in a sec how we--how we went about dealing
with that. So, to initialize a database with

261
00:25:28,890 --> 00:25:34,130
indexedDB, I've created a function called
initDatabase and I give it a callback for

262
00:25:34,130 --> 00:25:40,840
dbReady and that callback is called when my
database object is ready. So there's a couple

263
00:25:40,840 --> 00:25:46,470
of things we need to do to initialize a database.
First thing we need to do is set our version.

264
00:25:46,470 --> 00:25:51,770
So I've set var dbVersion, the answer is 42,
you can use a number, you can use a string,

265
00:25:51,770 --> 00:25:57,480
you can use whatever you want in there as
long as it's a legal JavaScript something,

266
00:25:57,480 --> 00:26:04,480
you can set it in there, all right. And then
we say, request indexedDB open. And that opens

267
00:26:05,390 --> 00:26:11,260
the database that says, "Hey, indexedDB go
open yourself up for me." And here's where

268
00:26:11,260 --> 00:26:18,260
we have our first line where we need to deal
with an async call, right? Because we don't

269
00:26:19,280 --> 00:26:23,820
know when that database is going to be ready,
we can't just count on it being ready as soon

270
00:26:23,820 --> 00:26:30,820
as we call open. So we say, request onsuccess
and I've created a function here. And I've

271
00:26:30,840 --> 00:26:36,310
said database, now I have to declare this
is a global variable because I want to use

272
00:26:36,310 --> 00:26:40,900
it in a bunch of places, e.target.result,
and that gives me access to the database.

273
00:26:40,900 --> 00:26:46,390
Then I want to check to see if the database
version that I've opened is the same one that

274
00:26:46,390 --> 00:26:51,330
I'm expecting. If it is, great, I'm just going
to call database ready and we're good to go,

275
00:26:51,330 --> 00:26:56,920
and we can start using it. If it's not, then
we've probably made some changes to our database.

276
00:26:56,920 --> 00:27:02,280
Maybe it's a new instance if our application
is running, or maybe we've create a new table

277
00:27:02,280 --> 00:27:06,350
or we've change some of the object types that
are in there. So, if it is a new version,

278
00:27:06,350 --> 00:27:11,550
we need to set the version to the new ones.
We've got database set version and we set

279
00:27:11,550 --> 00:27:18,550
it. And then, again, the same thing, we need
to do an asynchronous call in and say, Ver.onsuccess

280
00:27:19,270 --> 00:27:26,270
and I go in, I create the tables. So where
you see here the object store name contains,

281
00:27:26,480 --> 00:27:31,450
so we check to see if it's already there.
If it's not, we go and we say, create the

282
00:27:31,450 --> 00:27:37,590
store and we set the key path to the index
that we want to use. And you can use whatever

283
00:27:37,590 --> 00:27:42,200
you want in your index here. And then we go
and say, hey, we're ready, you can start using

284
00:27:42,200 --> 00:27:49,200
us. To get data from the database, same general
concepts apply. So, in this particular instance,

285
00:27:52,170 --> 00:27:56,070
all right. And this is the actual code from
the app. If you actually go and look at our

286
00:27:56,070 --> 00:28:02,100
app and go view source, you're going to see
this function with this exact code in there.

287
00:28:02,100 --> 00:28:07,309
So we've set an item callback and we've set
a completed callback. The item callback gets

288
00:28:07,309 --> 00:28:14,309
called on each item. So, like we go, and in
fact use it to stick stuff into an array,

289
00:28:14,470 --> 00:28:19,890
and then we callback completed callback when
we've done all of our looping through. Now,

290
00:28:19,890 --> 00:28:25,130
you're going to notice these three lines,
these three lines are pretty much the basics

291
00:28:25,130 --> 00:28:31,200
of any indexedDB request. First thing we need
to do is do var trans database.transaction,

292
00:28:31,200 --> 00:28:37,170
all right? So we need to go to get a transaction
access into the database and in this case,

293
00:28:37,170 --> 00:28:43,170
because we're reading, we're going to do a
read-only request, all right? So we're just

294
00:28:43,170 --> 00:28:50,170
saying, hey, read-only. Then we need to go
say store, trans.objectStore, we want to get

295
00:28:51,260 --> 00:28:56,890
access to that table, right. We want to say,
"Hey, give me all of the items in that particular

296
00:28:56,890 --> 00:29:03,890
table." And then to get the individual items
from there, store open cursor. Now, indexedDB

297
00:29:06,100 --> 00:29:12,600
works via cursors, all right. So instead of
like a SQL notation were you say, select star

298
00:29:12,600 --> 00:29:19,490
from table tweets, right. This gives you a
cursor and it allows you to iterate through.

299
00:29:19,490 --> 00:29:26,490
It's almost like a four each kind of statement,
so you run through. In our onsuccess, once

300
00:29:27,190 --> 00:29:33,590
we have our first cursor item, we say, we
go get our cursor. We check to see if our

301
00:29:33,590 --> 00:29:40,590
cursor's undefined because we're done when
we've hit the undefined and we did the callback

302
00:29:41,570 --> 00:29:46,770
if we're done, and if we're not, we do the
item callback. So we say, "Hey, I want you

303
00:29:46,770 --> 00:29:51,110
to take--I want to take you and I want to
just shove you into my array or do whatever

304
00:29:51,110 --> 00:29:57,950
you want." In our particular case, we're doing
a couple of things. We go and, as we pull

305
00:29:57,950 --> 00:30:04,950
the stuff back, we go and add it to this list
on the right and we add it to the items in

306
00:30:06,580 --> 00:30:13,580
the--in the database. To add stuff to a database,
similar concept. Those three lines are almost

307
00:30:15,770 --> 00:30:20,710
exactly the same, right? We need to go get
our transaction, access to the database, this

308
00:30:20,710 --> 00:30:24,540
time we're going to change that first line,
instead of doing a read-only we need to do

309
00:30:24,540 --> 00:30:30,090
a read-write because we want to put stuff
into the database. We need to then get the

310
00:30:30,090 --> 00:30:36,210
store, get that table and say, "Hey, we want
access to the table." And then we can actually

311
00:30:36,210 --> 00:30:42,270
start putting stuff into the database with
store.add, all right. Store.add adds a new

312
00:30:42,270 --> 00:30:48,250
row effectively; it's the way to think about
it. There's also store.put which allows you

313
00:30:48,250 --> 00:30:52,890
to replace an element. So if you've got, you
know, two elements and you want to put one

314
00:30:52,890 --> 00:30:59,640
in and replace one with the other, you can
use store.put. Now, I haven't put anything

315
00:30:59,640 --> 00:31:05,690
in my onsuccess or onfailure callback other
than a console.log in this particular case.

316
00:31:05,690 --> 00:31:10,340
But in something like this, more than likely,
you'd probably just want to put some error

317
00:31:10,340 --> 00:31:15,400
handling in your onfailure and in your onsuccess
you might want to deal with something that

318
00:31:15,400 --> 00:31:22,400
is, okay, we've already got the thing in there
or what have you. All right. Helps if I open

319
00:31:28,580 --> 00:31:32,030
the lid. How many of you guys have seen this
dialog popup or a similar dialog when you're

320
00:31:32,030 --> 00:31:38,350
surfing around on the Web, yes. Yes. That
dialog kind of sucks, doesn't it? You know,

321
00:31:38,350 --> 00:31:43,400
one of the things with JavaScript is that,
JavaScript runs in the same thread as our

322
00:31:43,400 --> 00:31:49,210
UI, right? So that means if you try and do
any complex JavaScript calculations and--or

323
00:31:49,210 --> 00:31:54,540
maybe you get yourself into a race condition
or you're just doing something or somebody

324
00:31:54,540 --> 00:31:58,360
else is doing something more than likely,
because we'd never write code that did this,

325
00:31:58,360 --> 00:32:05,360
we're all--right? Yes. All right. Because
you're running in that same thread and you

326
00:32:06,890 --> 00:32:11,370
lock up, well, it feels like the browser locks
up and the browser pops that dialog up and

327
00:32:11,370 --> 00:32:16,720
says, "Hey, I'm sorry, this guy is taking
too long. Do you want to kill it or do you

328
00:32:16,720 --> 00:32:23,720
want to wait for it?" So, there's a new set
of functionality in HTML5 called Web Workers.

329
00:32:24,640 --> 00:32:29,150
And Web Workers allows you to say, hey, I
want to take this chunk of JavaScript and

330
00:32:29,150 --> 00:32:36,150
I want to run it in a separate thread from
my browser UI code. I want it to be completely

331
00:32:36,220 --> 00:32:40,890
separate, I don't want it to interfere, just
go off and do your own thing. Just come back

332
00:32:40,890 --> 00:32:45,780
and tell me when you're done. So that's what
Web Workers is, and if this really cool way

333
00:32:45,780 --> 00:32:52,480
to be able to go and run stuff off in another
place. Now, I've got some sample code here

334
00:32:52,480 --> 00:32:55,670
and I'll show you how we're using this in
the app, but I wanted to sort of walk through

335
00:32:55,670 --> 00:33:01,179
the sample code to give a specific example
of where were the--where you'd do some real

336
00:33:01,179 --> 00:33:06,040
complex calculations. So, the calculated Fibonacci
Sequence if you remember those, that you add

337
00:33:06,040 --> 00:33:11,920
the two previous numbers. Well, those get
really computationally expensive as your numbers

338
00:33:11,920 --> 00:33:17,530
start to get larger and larger, right? So
you trying and run that with a number of a

339
00:33:17,530 --> 00:33:22,380
hundred and your browser is just going to
go plunk and stop working and it's not going

340
00:33:22,380 --> 00:33:28,700
to be pretty, right? So, I created a Fibonacci
calculator using a Web Worker. So the first

341
00:33:28,700 --> 00:33:32,830
thing we do if we say var worker equals new
worker and we give it a link to the JavaScript

342
00:33:32,830 --> 00:33:38,510
that we want it to go run, right? So it's
a separate JavaScript file, lives off in its

343
00:33:38,510 --> 00:33:44,720
own little world. And then because it's running
off in its own little world, the only way

344
00:33:44,720 --> 00:33:49,870
we can talk to it or it can talk to us is
through post messages. All right? So we need

345
00:33:49,870 --> 00:33:55,340
to listen for any messages that it's going
to send us. So we had add an event listener,

346
00:33:55,340 --> 00:34:01,330
that listens for messages and we're just going
to popup a dialogue. And then finally we need

347
00:34:01,330 --> 00:34:07,320
to send it a message, we need to tell it to
go do something. All right? So worker post

348
00:34:07,320 --> 00:34:14,320
message and we send it 12. Then in our actual
Fibonacci JS, so this is the actual code that's

349
00:34:14,759 --> 00:34:21,759
running in our worker, right? We need to listen
for messages, right? Because, well, we're

350
00:34:21,819 --> 00:34:28,819
sending it stuff so it needs something to
listen. So, self.onmessage and we go and we

351
00:34:28,889 --> 00:34:34,730
start using our Fibonacci sequence. So, we
go and do that calculation. When we finish,

352
00:34:34,730 --> 00:34:40,079
we do a post message to send back to our parent
to say, "Hey, I'm done. Here's my value."

353
00:34:40,079 --> 00:34:47,079
All right? Now, the reason we need to do it
this way is because it's running off in its

354
00:34:49,769 --> 00:34:56,200
own little world, all right? It doesn't have
any other access to most of the things we're

355
00:34:56,200 --> 00:34:59,920
used to. It doesn't have access to the window
object. It doesn't have access to the DOM.

356
00:34:59,920 --> 00:35:03,559
It doesn't have access to a lot of stuff,
so the only way we can get messages back and

357
00:35:03,559 --> 00:35:10,559
forth is with the post message. So sure enough
this guy runs and we get a result back with

358
00:35:11,049 --> 00:35:18,049
our Fibonacci sequence. Now, how are we using
this in our application? In our index.html,

359
00:35:19,960 --> 00:35:24,720
we have a function called startWorker, all
right? And that goes and it says, same thing

360
00:35:24,720 --> 00:35:29,450
we saw before, var worker equals new worker
and it points to the script that we want to

361
00:35:29,450 --> 00:35:34,369
start running in its own little thread. We
had add our event listener that says, "Hey,

362
00:35:34,369 --> 00:35:38,989
any time you get a message I want you to send
that message and handle it with newTweetHandler,

363
00:35:38,989 --> 00:35:44,309
so that newTweetHandler is going to go and
handle any of the content that we send it

364
00:35:44,309 --> 00:35:48,890
from our worker." And then we tell our worker,
"All right, time to get started. You're good

365
00:35:48,890 --> 00:35:55,890
to go." Within the worker, again, same concept,
self.addEventListener. We listen for new messages

366
00:35:57,930 --> 00:36:01,839
and we start the function that's going to
go on read the tweets. So this is the--in

367
00:36:01,839 --> 00:36:05,869
our worker thread, this is what's actually
going up to Twitter and say, "Hey, Twitter,

368
00:36:05,869 --> 00:36:12,130
got any new messages for me? All right. Nope.
Okay, fine, thanks. Got any new messages?

369
00:36:12,130 --> 00:36:18,759
Oh, you do. Great, thanks." So it then takes
that message and it sends it over to our application.

370
00:36:18,759 --> 00:36:25,759
Now, you'll notice I used the line here, importScripts;
importScripts. Remember I said earlier we

371
00:36:28,390 --> 00:36:33,269
don't have access to the window object? We
don't have access to the DOM? Means we can't

372
00:36:33,269 --> 00:36:39,749
go into adjacent P request. We can't create
script elements in our DOM so we can't have

373
00:36:39,749 --> 00:36:45,989
any of that stuff going. So we need a way
that we can be able to insert script into

374
00:36:45,989 --> 00:36:52,989
our application. And so there's a method called
importScripts and it works synchronously,

375
00:36:53,109 --> 00:36:57,489
right? So this one is not a sync. This is
synchronously. So it goes up to Twitter and

376
00:36:57,489 --> 00:37:01,690
I've just shortened the URL here just so that
it would fit on the slide. But it goes up

377
00:37:01,690 --> 00:37:08,690
to Twitter. It requests the tweets. That then
inserts the JavaScript that Twitter sends

378
00:37:10,829 --> 00:37:17,829
back into our worker and then that code gets
executed. All right? So, that's how web workers

379
00:37:22,289 --> 00:37:28,329
work. They go through. They grab our information,
off in their own little world and they send

380
00:37:28,329 --> 00:37:35,329
messages back and forth. All right. I want
to go to sort of some basic stuff for a sec

381
00:37:36,380 --> 00:37:42,220
because I think this is one of my--it's the
easiest part of HTML5 I think but it's also

382
00:37:42,220 --> 00:37:49,220
one of my favorite parts of HTML5. HTML5 makes
our markup and our seman--our markup much

383
00:37:49,579 --> 00:37:56,579
more semantic and much easier. How many of
you guys have the HTML 4.01 DOCTYPE memorized?

384
00:37:58,069 --> 00:38:02,230
Right. You know, usually when I asked that
there's like two people who put up their hand

385
00:38:02,230 --> 00:38:07,809
and there's probably two people who have a
memory that good. I could tell you I don't,

386
00:38:07,809 --> 00:38:13,619
right? Like, I know it's DOCTYPE and that's
about as far as I stop. All right? I'm used

387
00:38:13,619 --> 00:38:20,619
to the tools inserting it for me. HTML5 gives
us a new DOCTYPE that's a heck a lot easier.

388
00:38:22,220 --> 00:38:29,220
DOCTYPE HTML, much easier than that big, long,
crazy thing. And this will stick all of the

389
00:38:30,079 --> 00:38:36,230
browsers into their most compliant rendering
mode giving us all of the HTML5 features.

390
00:38:36,230 --> 00:38:42,680
One of the other things that becomes easier
is we've got this meta charset equals utf-8.

391
00:38:42,680 --> 00:38:48,049
We don't have to go and put in all those big,
long complex name and value and content and

392
00:38:48,049 --> 00:38:55,049
all that kind of stuff. We've simplified and
made our markup a lot easier. There's also

393
00:38:57,029 --> 00:39:02,920
a bunch of new semantic elements and they
went through when they were going and deciding

394
00:39:02,920 --> 00:39:08,759
which semantic elements to add by looking
at all of the markup that you guys have all

395
00:39:08,759 --> 00:39:15,759
written over time. And they looked at what
classes and what ID's appeared most often.

396
00:39:16,019 --> 00:39:23,019
Sure enough, things like header, footer, article,
nav were the most common classes and ID's.

397
00:39:24,549 --> 00:39:31,549
So why not actually give those their own elements.
They also changed the meaning of a couple

398
00:39:32,039 --> 00:39:38,269
elements. So elements that had a stylistic
meaning in the past, they changed those to

399
00:39:38,269 --> 00:39:43,829
have a semantic meaning now. I think my favorite
one of those is small. It's still going to

400
00:39:43,829 --> 00:39:48,359
render in the same way, it's still going to
be small text, okay? But what's going to happen

401
00:39:48,359 --> 00:39:54,779
is instead of it rendering--instead of it
just having the visual meaning, it now has

402
00:39:54,779 --> 00:39:59,789
a semantic meaning and that semantic meaning
is the small print or the fine print that's

403
00:39:59,789 --> 00:40:04,839
on the bottom of a legal document or maybe
the fine print that's on the bottom of your

404
00:40:04,839 --> 00:40:10,569
webpage. So, it gives it a semantic meaning.
There's also a bunch of elements that, well,

405
00:40:10,569 --> 00:40:17,420
they haven't been deprecated, they've been
obsoleted if that's a real word, okay? And

406
00:40:17,420 --> 00:40:21,089
they're still going to work. They're still
going to render exactly like they did before

407
00:40:21,089 --> 00:40:26,160
if you're using them in your markup today,
they're still going to work. But the only

408
00:40:26,160 --> 00:40:28,960
thing that's really going to happen is your
friends are going to look at your code and

409
00:40:28,960 --> 00:40:34,119
your friends will laugh at you. That's about
it, right? And honestly, do we need a reason

410
00:40:34,119 --> 00:40:41,119
to get rid of the marky tag? Like, come on.
Really? The bling tag? Things like center.

411
00:40:41,329 --> 00:40:48,329
You can do that with CSS style. So that's
why those elements are gone now. In our application,

412
00:40:50,369 --> 00:40:55,970
the way we actually use this is we created
the application really only using three main

413
00:40:55,970 --> 00:41:02,470
sections. Across the top we've got our header
element, all right? And that's just an element

414
00:41:02,470 --> 00:41:07,789
that runs across top marks our header. On
the left, we've got a section that contains

415
00:41:07,789 --> 00:41:13,920
all of our falling tweets and on the right
we've got an aside and that aside is the tweets

416
00:41:13,920 --> 00:41:20,920
on the right. All right. Form elements. Bunch
of new stuff to make form work easier, right,

417
00:41:24,960 --> 00:41:31,960
so that if you've got input types, there's
a bunch of new ones like--excuse me, email,

418
00:41:32,460 --> 00:41:39,460
phone number, dates, times, and things to
make validations significantly easier. One

419
00:41:39,970 --> 00:41:45,829
of the cool things about these new elements,
think about like on a phone if you are going

420
00:41:45,829 --> 00:41:51,819
to enter in a phone number, isn't it nice
when the device actually shows just the keypad?

421
00:41:51,819 --> 00:41:58,529
So by doing that, you can not only provide
functionality for the device but you can also

422
00:41:58,529 --> 00:42:05,529
add placeholders and patterns. So let's take
a look at at our application for a sec. I'm

423
00:42:05,729 --> 00:42:10,789
going to pop this open. There's a couple of
things that are going on. I'm going to take

424
00:42:10,789 --> 00:42:16,079
this text code here. Notice that there are
a couple of things happen. This guy turned

425
00:42:16,079 --> 00:42:21,470
to some light gray text. I'm not sure if you
can read it in the back but it says username.

426
00:42:21,470 --> 00:42:25,880
That's a placeholder, right? If we wanted
to do a placeholder in the past, we had to

427
00:42:25,880 --> 00:42:30,569
do that with JavaScript and it was kind of
a pain in the butt because sometimes the JavaScript

428
00:42:30,569 --> 00:42:34,589
wouldn't fire at the right time and--or the
user would start typing before the placeholder

429
00:42:34,589 --> 00:42:39,920
got popped in and then all of a sudden, oh,
not only does the user have what they type

430
00:42:39,920 --> 00:42:44,640
but they also have a place--well it just got
to be this big mess, right? And unless you

431
00:42:44,640 --> 00:42:51,640
had like awesomeness coding skills, not exactly
the most fun. So I'm going to put this back

432
00:42:52,509 --> 00:42:59,509
in here. There's also this range element that
allows us to specify a range. There's all

433
00:42:59,640 --> 00:43:05,880
sorts of new ones, the code that we've got,
all right? So, there's what we've got for

434
00:43:05,880 --> 00:43:10,759
the placeholder. I say placeholder equals
username and so that placeholder just automatically

435
00:43:10,759 --> 00:43:17,759
appears. We've also got a required attribute.
I want to point this one out specifically

436
00:43:18,559 --> 00:43:22,390
because this is something called the binary
attribute. And the first time I ever used

437
00:43:22,390 --> 00:43:29,039
it, it goofed to me up pretty significantly
because binary attribute is true if it's there.

438
00:43:29,039 --> 00:43:35,150
It doesn't matter what you set the value to.
If it's there, the value is true. All right?

439
00:43:35,150 --> 00:43:39,170
If you want to go and set a value on it, you
can. You can say required equals required.

440
00:43:39,170 --> 00:43:45,079
You could say required equals true. You could
say required equals, hi mom. All right? All

441
00:43:45,079 --> 00:43:52,079
of those are going to evaluate to true. What
happens if you say required equals false?

442
00:43:53,769 --> 00:44:00,369
It's true. So, keep that one in mind because
I kid you not, I probably spent half an hour

443
00:44:00,369 --> 00:44:06,569
one day when I first came across binary attributes
and I was just like, "It set to false, I know

444
00:44:06,569 --> 00:44:11,720
it set to false." I'm looking at my markup;
I'm using the developer tools, until I realized

445
00:44:11,720 --> 00:44:18,720
what a binary attribute actually meant. For
the required attribute on form elements, what

446
00:44:19,079 --> 00:44:23,109
that's going to do is that's going to stop
the form from being submitted unless the user

447
00:44:23,109 --> 00:44:29,950
has actually entered text in there. We've
also got some new CSS selectors that allow

448
00:44:29,950 --> 00:44:36,130
us to provide much more visually intense stuff.
So, I can say, "Hey, input, when you've got

449
00:44:36,130 --> 00:44:43,130
a focus," right? Or I could say, where, "input:required:invalid."
I want you to have a different set of styles

450
00:44:44,880 --> 00:44:51,319
then when you have input, required and valid,
right? So, that's why you saw the checkmark

451
00:44:51,319 --> 00:44:58,319
or the little red box. We've got an ability
to just with styling, right? In the past,

452
00:44:58,910 --> 00:45:02,979
if we did this, we have to right some pretty
crazy JavaScript to do this. We had to use

453
00:45:02,979 --> 00:45:06,759
somebody's library or it's just one of those
things where we didn't get the richness that

454
00:45:06,759 --> 00:45:13,759
we can do with CSS 3. One of the other things
that we wanted to do was provide a really

455
00:45:16,690 --> 00:45:22,210
fast experience, right? It's really important
that as people are using web applications

456
00:45:22,210 --> 00:45:26,769
that they just are fast, right? They don't
want to be, "Oh, I clicked on this link and

457
00:45:26,769 --> 00:45:31,450
then, you know, it's the Web of the 1990s
and I'm on the dial-up modem and, you know,

458
00:45:31,450 --> 00:45:38,190
I'm waiting for my page." We want things to
be fast. Application cache allows us to cache

459
00:45:38,190 --> 00:45:42,119
our entire application on the user's computer.
Now, you're probably sitting there going,

460
00:45:42,119 --> 00:45:47,630
"Well, doesn't caching just do that in general?"
And yet, it mostly does. But, you've all--probably

461
00:45:47,630 --> 00:45:53,249
only got a cache of maybe 50 or 100 megs or
maybe you've cranked it up and you've got

462
00:45:53,249 --> 00:45:58,630
a fairly big cache. But think about all the
pages that you visit everyday and how quickly

463
00:45:58,630 --> 00:46:03,890
that cache gets blown away, right? You've
just--you've looked at so much stuff that

464
00:46:03,890 --> 00:46:07,059
you've clear that cache out, now, you go to
that application and it's got to re-download

465
00:46:07,059 --> 00:46:12,589
everything. Well, that kind of sucks. With
App Cache, you can actually say, "Hey, I want

466
00:46:12,589 --> 00:46:19,059
you to store all of the data about my application
on the--on the computer. The way you do that

467
00:46:19,059 --> 00:46:25,619
isn't the HTML element; we need to add a manifest
file. That manifest file is a file that serve

468
00:46:25,619 --> 00:46:32,619
from our server that says, "Hey, this is the
stuff that you should cache locally on the

469
00:46:33,390 --> 00:46:40,390
user's computer." In the actually cache file,
its got a particular format, you got to say

470
00:46:40,440 --> 00:46:44,950
cache manifest, you don't have to put a version
in there, I'd recommend it because the way

471
00:46:44,950 --> 00:46:50,019
that the browser knows whether you're application
has been updated is by looking for changes

472
00:46:50,019 --> 00:46:57,019
in that file, all right? So, you may change
one of your index.htm, all right? The browser

473
00:46:57,739 --> 00:47:03,289
is not going to bother to go check to see
if index.htm has been updated because it's

474
00:47:03,289 --> 00:47:07,660
cache locally. So, that's why you need to
change the version. It'll go up every time,

475
00:47:07,660 --> 00:47:14,660
it'll try and get this app cache file and
do that one thing to do sort of call-out because

476
00:47:15,930 --> 00:47:22,710
it's, again, one of those little things that
I thought with for about 20 minutes one day.

477
00:47:22,710 --> 00:47:28,249
When your server serves the app cache file,
it need to be served with the mind type of

478
00:47:28,249 --> 00:47:33,219
text cache-manifest, all right? So, you don't
need to set that into htaccess or however

479
00:47:33,219 --> 00:47:39,880
you're doing that, you need to go do that.
There's also a bunch of JavaScript APIs that

480
00:47:39,880 --> 00:47:46,529
allow you to go and really get program adit
with your App Cache. So that you can update

481
00:47:46,529 --> 00:47:51,049
the application at specific times, maybe you
only want to update it when the user first

482
00:47:51,049 --> 00:47:55,950
starts the application. Maybe you want to
ask the user before you update it because

483
00:47:55,950 --> 00:48:00,119
you're making some major changes or a breaking
change or something like that. So, you've

484
00:48:00,119 --> 00:48:06,359
got to set a JavaScript APIs that really allow
you to go through and be much more powerful

485
00:48:06,359 --> 00:48:12,910
with App Cache. So, with that, I'm going to
pass it over to Ernest to talk about some

486
00:48:12,910 --> 00:48:15,670
of the tools and resources.
>> DELGADO: Thanks, Pete. I'm going to go

487
00:48:15,670 --> 00:48:22,229
really quick through this. And now that we've
seen APIs that we can use in our web app,

488
00:48:22,229 --> 00:48:28,529
we may want to start coding and--but not doing
it from scratch. So, it's more mentioning

489
00:48:28,529 --> 00:48:35,529
some tools here that will help us to do that.
The first one is Boilerplate. With Boilerplate,

490
00:48:35,599 --> 00:48:42,079
you can go there and get the files that actually
would use--you would use as a template for

491
00:48:42,079 --> 00:48:47,849
your app and it's at a different level. So,
there's like an index.html with the all the

492
00:48:47,849 --> 00:48:54,549
header and the basic step that you need. So,
you needn't to worry about it. It also have--at

493
00:48:54,549 --> 00:49:00,460
JavaScript level has like the includes that
if you want jQuery or the analytics snippet

494
00:49:00,460 --> 00:49:04,299
in your--in your page, you have that there
as well. And it sees as level there are many

495
00:49:04,299 --> 00:49:09,539
tweaks as well that you have--as like the
recent CSS, you have the template there or

496
00:49:09,539 --> 00:49:16,380
for instance, Media Queries. Who in the audience
knows Media Queries? Not many. It's just like

497
00:49:16,380 --> 00:49:21,749
a syntax to make your layout of the page change
depending on the device that is looking at

498
00:49:21,749 --> 00:49:26,460
your page, so if it's a mobile browser, you
can say, "Okay, from this width to this other

499
00:49:26,460 --> 00:49:33,059
width, change the layout to adapt to that
screen." Also, there's a list of what we call

500
00:49:33,059 --> 00:49:39,979
Polyfills, because when you started calling
these APIs, you may not have the support in

501
00:49:39,979 --> 00:49:45,119
all browsers that you want to support. And
I think it would be supported twice. But then,

502
00:49:45,119 --> 00:49:50,049
this Polyfills are kind of a JavaScript scene
that it's looking for a work around. It's

503
00:49:50,049 --> 00:49:56,539
actually taking care of that work around 100%.
So, the perfect Polyfill lets you write that

504
00:49:56,539 --> 00:50:02,710
feature in modern syntax and it's going to--the
Polyfill's going to manage that to make that

505
00:50:02,710 --> 00:50:08,940
feature work in the browser. So, it's possible
that not all the features have fallbacks for

506
00:50:08,940 --> 00:50:15,789
all browsers, so that's one in your code;
you should maybe do the--like some fallback

507
00:50:15,789 --> 00:50:21,369
case or a graceful degradation. But instead
of looking for the browser version, which

508
00:50:21,369 --> 00:50:26,249
is not a very reliable technique, it's better
to do like feature detection. And for that,

509
00:50:26,249 --> 00:50:30,779
you should use, or you can use Modernizr,
which has this necessary syntax that you can

510
00:50:30,779 --> 00:50:37,529
put in your if statements and if that feature
is supported, do something, otherwise do the

511
00:50:37,529 --> 00:50:41,579
fallback. If you want to take a look at the
growing support that all browsers are having

512
00:50:41,579 --> 00:50:45,719
now with HTML5 features, go to this site,
it's really cool, it has all the tables and

513
00:50:45,719 --> 00:50:52,249
version numbers and green if that feature
supported, caniuse.com. And another interesting

514
00:50:52,249 --> 00:50:56,670
tool that we've been using for a long time,
maybe another browser is this kind of debugging

515
00:50:56,670 --> 00:51:00,289
tool in the case of Chrome is called like
The Chrome Developer Tools. And tomorrow,

516
00:51:00,289 --> 00:51:01,349
I think...
>> LEPAGE: Today--this...

517
00:51:01,349 --> 00:51:02,670
>> DELGADO: Oh, today?
>> LEPAGE: Yes.

518
00:51:02,670 --> 00:51:06,489
>> DELGADO: Okay. So, today, there's a talk
from [INDISTINCT] going through all the details

519
00:51:06,489 --> 00:51:10,269
that the things you can do actually in this
debugger that there are things that I even

520
00:51:10,269 --> 00:51:15,700
didn't know. And the cool stuff here is that,
it's also--it has the capabilities to debug

521
00:51:15,700 --> 00:51:20,839
features like Web Workers or App Cache that
it was very difficult to debug if that wasn't

522
00:51:20,839 --> 00:51:25,549
supported because Web Workers has a separate
JavaScript file. So, these debuggers actually

523
00:51:25,549 --> 00:51:32,549
prepared for that. Some resources that we
are maintaining for with sample code, tutorials,

524
00:51:35,390 --> 00:51:39,979
demos on html5rocks.com. A couple of books
that are quite interesting, Bruce Lawson and

525
00:51:39,979 --> 00:51:45,950
Mark Pilgrim, and I think that's it with app
resources. So, I'm going to pass it over,

526
00:51:45,950 --> 00:51:50,809
Pete to wrap up the presentation. So, all
can go wait.

527
00:51:50,809 --> 00:51:55,519
>> LEPAGE: Awesome. So I'll just talk quickly
about Chrome Frame. If you've not played with

528
00:51:55,519 --> 00:52:01,739
Chrome Frame before, super useful utility,
if you're stuck on older versions of IE for

529
00:52:01,739 --> 00:52:08,739
any specific reason, Chrome Frame will allow
you to run HTML5 applications within Chrome

530
00:52:09,519 --> 00:52:16,519
Frame. So, we've talked about some of the
great APIs and application level support that

531
00:52:16,920 --> 00:52:23,150
HTML5 gives you. And we've also talked a lot
about some of the really cool rich user experience

532
00:52:23,150 --> 00:52:28,859
stuff that we can really start building with
HTML5. I'm really excited to see what you

533
00:52:28,859 --> 00:52:33,999
guys start building in terms of web applications.
This is really our opportunity to change the

534
00:52:33,999 --> 00:52:40,299
Web from being a bunch of web pages and websites
to really being web applications that really

535
00:52:40,299 --> 00:52:45,529
just change the way we think about the Web
and what we do on it. So, I encourage you

536
00:52:45,529 --> 00:52:50,229
guys to go start playing with this stuff and
go using that. There's a couple of sessions

537
00:52:50,229 --> 00:52:56,279
today. There's the Free Cake Session that
also goes into HTML5 development with the

538
00:52:56,279 --> 00:53:02,109
Chrome Developer Tools, the two hour hands-on
lab. Really cool, as well as the Building

539
00:53:02,109 --> 00:53:08,640
and Publishing Apps with the Chrome Web Store
at four. The rest of the week, whole bunch

540
00:53:08,640 --> 00:53:14,259
of really awesome stuff. If you make it to
one session that is my favorite, the Showcase

541
00:53:14,259 --> 00:53:19,229
for Web Devs, wow and a how really, really
cool session. I've seen some of the demos

542
00:53:19,229 --> 00:53:25,229
these guys are doing, blow your pants off.
With that, I want to say thank you guys very

543
00:53:25,229 --> 00:53:30,749
much. Please go fill out an evaluation form.
And thank you. We'll open it up to questions

544
00:53:30,749 --> 00:53:35,299
now, but I know that some of you seemed to
be really hungry. So, feel free. But we'll

545
00:53:35,299 --> 00:53:38,799
stick around and answer any questions you
want. Thank you.

