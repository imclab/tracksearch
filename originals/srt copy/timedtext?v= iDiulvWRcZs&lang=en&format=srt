1
00:00:00,000 --> 00:00:14,680

2
00:00:14,680 --> 00:00:16,930
BILL LUAN: Shanghai
GDG is a very

3
00:00:16,930 --> 00:00:18,710
interesting developer community.

4
00:00:18,710 --> 00:00:19,840
SUSANNAH RAUB: I'm
glad somebody

5
00:00:19,840 --> 00:00:20,695
has asked this question.

6
00:00:20,695 --> 00:00:22,265
RETO MEIER: This is where
the magic happens.

7
00:00:22,265 --> 00:00:23,707
JENNY MURPHY: This is primarily
a question and

8
00:00:23,707 --> 00:00:25,400
answer show, so if any
of you out there

9
00:00:25,400 --> 00:00:26,650
would like to ask questions.

10
00:00:26,650 --> 00:00:32,562

11
00:00:32,562 --> 00:00:33,860
ADDY OSMANI: Hi, there.

12
00:00:33,860 --> 00:00:36,740
And welcome to this special
episode of "Chrome Developer's

13
00:00:36,740 --> 00:00:38,860
Live." I'm Addy Osmani.

14
00:00:38,860 --> 00:00:42,670
And with me is special guest
Seth Ladd, developer

15
00:00:42,670 --> 00:00:43,190
[? outfit ?]

16
00:00:43,190 --> 00:00:45,840
for Chrome focusing on
areas like Dart.

17
00:00:45,840 --> 00:00:46,870
Hi, Seth.

18
00:00:46,870 --> 00:00:47,970
SETH LADD: Hey, Addy.

19
00:00:47,970 --> 00:00:49,130
Thanks for having me.

20
00:00:49,130 --> 00:00:50,300
ADDY OSMANI: Not at all.

21
00:00:50,300 --> 00:00:53,470
So, Seth, today I'm going to be
grilling you about Dart and

22
00:00:53,470 --> 00:00:55,190
trying to find out some more
information about it.

23
00:00:55,190 --> 00:00:56,690
Are you ready?

24
00:00:56,690 --> 00:00:57,200
SETH LADD: I am ready.

25
00:00:57,200 --> 00:00:59,150
I've been preparing
all weekend.

26
00:00:59,150 --> 00:00:59,900
Let's do this.

27
00:00:59,900 --> 00:01:01,060
ADDY OSMANI: Excellent.

28
00:01:01,060 --> 00:01:03,640
All right, so let's
set the stage.

29
00:01:03,640 --> 00:01:06,660
Over the past few years there's
been quite an increase

30
00:01:06,660 --> 00:01:08,770
in the number of
compile-to-JavaScript

31
00:01:08,770 --> 00:01:12,520
languages, like CoffeeScript,
and alternatives to JavaScript

32
00:01:12,520 --> 00:01:14,840
that have been coming
up on the scene.

33
00:01:14,840 --> 00:01:16,460
Now, some of them
including some

34
00:01:16,460 --> 00:01:18,410
rather interesting features.

35
00:01:18,410 --> 00:01:21,690
And it's been interesting to see
sort of how they compare

36
00:01:21,690 --> 00:01:23,160
and how they differ to
JavaScript and what's

37
00:01:23,160 --> 00:01:24,350
available right now.

38
00:01:24,350 --> 00:01:29,780
So Dart's been around for,
I guess, about a year?

39
00:01:29,780 --> 00:01:32,150
SETH LADD: Yeah, we publicly
launched last October.

40
00:01:32,150 --> 00:01:33,260
So it's been just
about a year.

41
00:01:33,260 --> 00:01:34,280
ADDY OSMANI: Just about
a year, excellent.

42
00:01:34,280 --> 00:01:37,540
I think the first time I
remember hearing about it was

43
00:01:37,540 --> 00:01:38,870
on Hacker News.

44
00:01:38,870 --> 00:01:42,300
And as a JavaScript developer at
the time there was quite a

45
00:01:42,300 --> 00:01:47,970
lot of confusion about what it
was trying to target, what it

46
00:01:47,970 --> 00:01:50,650
was going to try doing
differently than JavaScript,

47
00:01:50,650 --> 00:01:53,090
whether it included additional
tools that would help

48
00:01:53,090 --> 00:01:56,760
developers with creating
applications.

49
00:01:56,760 --> 00:02:01,480
And some of the messaging around
it suggested that it

50
00:02:01,480 --> 00:02:05,190
was trying to solve problems
that not only could JavaScript

51
00:02:05,190 --> 00:02:07,800
at the time not do, but that
the language couldn't be

52
00:02:07,800 --> 00:02:09,500
evolved to do those
things either.

53
00:02:09,500 --> 00:02:12,320
So let's set the record
straight.

54
00:02:12,320 --> 00:02:13,350
What is Dart?

55
00:02:13,350 --> 00:02:16,860
And is it trying to replace
JavaScript?

56
00:02:16,860 --> 00:02:17,570
SETH LADD: Great question.

57
00:02:17,570 --> 00:02:19,690
It is not trying to replace
JavaScript.

58
00:02:19,690 --> 00:02:24,560
Dart is a fresh approach, an
innovation if you will, to

59
00:02:24,560 --> 00:02:27,080
appeal to the broad set of
developers that have a

60
00:02:27,080 --> 00:02:28,940
different set of expectations.

61
00:02:28,940 --> 00:02:31,870
And one of our beliefs on the
Dart project is you shouldn't

62
00:02:31,870 --> 00:02:36,240
have to have 15 years of
hardcore endemic web

63
00:02:36,240 --> 00:02:39,650
development experience to build
the kind of fantastic,

64
00:02:39,650 --> 00:02:45,270
amazing apps that users expect,
want, and need today.

65
00:02:45,270 --> 00:02:47,730
And so we want to make it easier
for developers with

66
00:02:47,730 --> 00:02:51,990
other experiences like Java,
and C#, and C++, and

67
00:02:51,990 --> 00:02:54,890
ActionScript to be able to
approach web development and

68
00:02:54,890 --> 00:02:58,620
have the same great experience
that the hard core web

69
00:02:58,620 --> 00:03:00,770
developers with those tremendous
amount of years of

70
00:03:00,770 --> 00:03:01,990
experience have.

71
00:03:01,990 --> 00:03:05,540
So that we can help everyone
build for what's probably the

72
00:03:05,540 --> 00:03:08,410
most ubiquitous and powerful
platform out there, the web.

73
00:03:08,410 --> 00:03:10,110
ADDY OSMANI: So it almost sounds
like you're trying to

74
00:03:10,110 --> 00:03:12,680
lower the barrier of entry for
people coming from other

75
00:03:12,680 --> 00:03:13,910
programming languages.

76
00:03:13,910 --> 00:03:17,100
And not necessarily just
targeting people who already

77
00:03:17,100 --> 00:03:20,302
have a good level of experience
with JavaScript.

78
00:03:20,302 --> 00:03:21,970
SETH LADD: Yeah, I think
that's fair to say.

79
00:03:21,970 --> 00:03:24,430
I mean, there's a lot of people,
a lot of JavaScript

80
00:03:24,430 --> 00:03:26,950
developers and many of them
are very experienced.

81
00:03:26,950 --> 00:03:29,775
And part of that's the power
of the language, part of

82
00:03:29,775 --> 00:03:31,150
that's the platform.

83
00:03:31,150 --> 00:03:32,345
And they're doing great.

84
00:03:32,345 --> 00:03:33,620
They're obviously already
launching

85
00:03:33,620 --> 00:03:34,860
really fantastic apps.

86
00:03:34,860 --> 00:03:37,460
I mean, there's some great
apps out there.

87
00:03:37,460 --> 00:03:39,700
Google+, Google Apps,
Facebook.

88
00:03:39,700 --> 00:03:42,710
These are large apps built
with the current web

89
00:03:42,710 --> 00:03:44,240
technologies.

90
00:03:44,240 --> 00:03:46,910
But then there's a whole other
set of developers out there

91
00:03:46,910 --> 00:03:50,280
that we also want to help to
bring over onto the web.

92
00:03:50,280 --> 00:03:52,770
And they've got a certain set
of expectations around the

93
00:03:52,770 --> 00:03:55,610
language, there's an expectation
on the tooling and

94
00:03:55,610 --> 00:04:00,100
development cycles and the use
of things like patterns and

95
00:04:00,100 --> 00:04:01,920
practices that they've
grown up with.

96
00:04:01,920 --> 00:04:04,320
And so if we can give them that
experience and hopefully

97
00:04:04,320 --> 00:04:06,900
even do better than what they
expect then that just means

98
00:04:06,900 --> 00:04:08,840
more developers are now building
for the web and

99
00:04:08,840 --> 00:04:11,030
that's a good thing.

100
00:04:11,030 --> 00:04:11,520
ADDY OSMANI: Yeah.

101
00:04:11,520 --> 00:04:13,040
That seems fair enough.

102
00:04:13,040 --> 00:04:16,640
So I'm sure you know there are
a lot of developers that love

103
00:04:16,640 --> 00:04:17,399
JavaScript.

104
00:04:17,399 --> 00:04:20,860
It's in many places considered
the most popular programming

105
00:04:20,860 --> 00:04:24,520
language at the moment at least
for the web, definitely.

106
00:04:24,520 --> 00:04:27,300
With so many active contributors
sort of working

107
00:04:27,300 --> 00:04:31,120
on JavaScript engines V8,
Chakra, SpiderMonkey,

108
00:04:31,120 --> 00:04:32,980
JavaScript seems to have
a really great

109
00:04:32,980 --> 00:04:34,990
future ahead of it.

110
00:04:34,990 --> 00:04:39,150
Some developers would wonder
why not try improving

111
00:04:39,150 --> 00:04:43,080
JavaScript the language and the
ecosystem around it with

112
00:04:43,080 --> 00:04:46,890
respect to tooling rather than
say creating a brand new

113
00:04:46,890 --> 00:04:51,200
language and a whole other
type of workflow.

114
00:04:51,200 --> 00:04:53,390
What's your response to that?

115
00:04:53,390 --> 00:04:54,340
SETH LADD: Yeah, that's
a good question.

116
00:04:54,340 --> 00:04:56,950
It's important to understand
that this is not

117
00:04:56,950 --> 00:04:59,040
an either, or world.

118
00:04:59,040 --> 00:05:00,610
This is an and world.

119
00:05:00,610 --> 00:05:05,270
And if we can give more options
and help more people

120
00:05:05,270 --> 00:05:07,010
come to the web, that's good.

121
00:05:07,010 --> 00:05:11,420
And let's remember that Google
itself specifically continues

122
00:05:11,420 --> 00:05:16,650
to invest in TC39, which is the
spec group working on the

123
00:05:16,650 --> 00:05:18,220
future of JavaScript.

124
00:05:18,220 --> 00:05:21,140
We still have very awesome
engineers in

125
00:05:21,140 --> 00:05:23,470
Munich working on V8.

126
00:05:23,470 --> 00:05:27,500
We've got just such an awesome
investment in Chrome and the

127
00:05:27,500 --> 00:05:32,110
open web and specifically
JavaScript today.

128
00:05:32,110 --> 00:05:34,340
Another good example there
would be our work in Web

129
00:05:34,340 --> 00:05:36,290
Components.

130
00:05:36,290 --> 00:05:40,610
So you know, we're able to, I
think, look at this problem of

131
00:05:40,610 --> 00:05:44,370
how do you get bigger, better,
more complex, higher

132
00:05:44,370 --> 00:05:48,060
performance apps on the web
from two different angles?

133
00:05:48,060 --> 00:05:50,860
And we believe in a world where
both of these things

134
00:05:50,860 --> 00:05:51,980
actually exist.

135
00:05:51,980 --> 00:05:55,820
And I feel personally that as
long as we continue to invest

136
00:05:55,820 --> 00:06:00,620
in the JavaScript, V8, TC39
route and we continue to

137
00:06:00,620 --> 00:06:04,300
invest in the Dart, Dart VM,
Dart Editor route as well

138
00:06:04,300 --> 00:06:07,040
we're just reaching an even
broader audience.

139
00:06:07,040 --> 00:06:08,270
And that's good.

140
00:06:08,270 --> 00:06:11,610
I think frankly we're lucky to
be able to work from both

141
00:06:11,610 --> 00:06:13,590
angles to the same problem.

142
00:06:13,590 --> 00:06:14,240
ADDY OSMANI: Definitely.

143
00:06:14,240 --> 00:06:19,480
Yeah So you mentioned complex
apps and large scale apps in

144
00:06:19,480 --> 00:06:21,090
your last response.

145
00:06:21,090 --> 00:06:24,880
Is Dart sort of optimized to
be used in those scenarios

146
00:06:24,880 --> 00:06:27,060
where you're building something
that's just very,

147
00:06:27,060 --> 00:06:29,020
very nontrivial?

148
00:06:29,020 --> 00:06:29,310
SETH LADD: Yeah.

149
00:06:29,310 --> 00:06:30,550
That's a really good point.

150
00:06:30,550 --> 00:06:34,540
I think if you need to do some
simple form validation

151
00:06:34,540 --> 00:06:36,170
JavaScript's fantastic
for that.

152
00:06:36,170 --> 00:06:39,990
I mean it's got functions,
top level functions.

153
00:06:39,990 --> 00:06:41,870
You don't need to wrap
things in classes.

154
00:06:41,870 --> 00:06:44,490
So for the super simple
stuff, not a problem.

155
00:06:44,490 --> 00:06:47,070
And for some developers
they can scale up.

156
00:06:47,070 --> 00:06:50,950
But when we talk about things
like 10,000 lines, 100,000

157
00:06:50,950 --> 00:06:54,990
lines of code, which is not
unusual for these bigger, more

158
00:06:54,990 --> 00:06:59,860
complex apps, for instance they
take advantage of all of

159
00:06:59,860 --> 00:07:02,640
the amazing HTML5 features,
like WebGL for hardware

160
00:07:02,640 --> 00:07:07,020
accelerated 3D and File System
API and WebRTC for microphones

161
00:07:07,020 --> 00:07:08,510
and cameras.

162
00:07:08,510 --> 00:07:10,530
And then when you start thinking
about things like

163
00:07:10,530 --> 00:07:12,340
transient networking
connectivity and how do you

164
00:07:12,340 --> 00:07:14,630
write an offline app, I mean,
the list goes on and on.

165
00:07:14,630 --> 00:07:17,020
When you add all of these things
together into the same

166
00:07:17,020 --> 00:07:19,180
app the lines of code grow.

167
00:07:19,180 --> 00:07:22,970
And we've seen that you often
need a little bit more

168
00:07:22,970 --> 00:07:25,980
structure in your language and
a little bit more power in

169
00:07:25,980 --> 00:07:29,220
your tools and that's really
where Dart's sweet spot is.

170
00:07:29,220 --> 00:07:32,800
We're really targeting those
multi-multi-thousand line

171
00:07:32,800 --> 00:07:36,880
programs, when you have more
than 10 developers working

172
00:07:36,880 --> 00:07:39,980
together that need to
collaborate more

173
00:07:39,980 --> 00:07:41,980
friction-free, if you will.

174
00:07:41,980 --> 00:07:45,220
And that's the kind of
experience that we think Dart

175
00:07:45,220 --> 00:07:47,140
is really good at.

176
00:07:47,140 --> 00:07:50,000
ADDY OSMANI: So you're talking
about applications with very

177
00:07:50,000 --> 00:07:50,880
large teams.

178
00:07:50,880 --> 00:07:53,960
They're complex, perhaps there
are hundreds of thousands of

179
00:07:53,960 --> 00:07:57,800
lines of code, a huge number
of modules to them.

180
00:07:57,800 --> 00:08:02,420
What specifically in Dart helps
me with those type of

181
00:08:02,420 --> 00:08:07,480
applications versus just using
JavaScript in a modern stack

182
00:08:07,480 --> 00:08:11,380
composed of RequireJS
and what have you?

183
00:08:11,380 --> 00:08:11,600
SETH LADD: Yeah.

184
00:08:11,600 --> 00:08:12,610
No, that's a great question.

185
00:08:12,610 --> 00:08:15,360
So there's a lot in Dart
that is going to help

186
00:08:15,360 --> 00:08:16,500
people scale up.

187
00:08:16,500 --> 00:08:21,840
And so part of what we usually
talk about is scaling from the

188
00:08:21,840 --> 00:08:25,710
small set of functions and maybe
just one class all the

189
00:08:25,710 --> 00:08:29,550
way up to the 10,000, 100,000
line programs out there.

190
00:08:29,550 --> 00:08:31,790
And Dart really allows you to
do that through its use of

191
00:08:31,790 --> 00:08:34,909
optional types and top
level functions.

192
00:08:34,909 --> 00:08:39,260
So one myth we probably want to
debunk is that in Dart it's

193
00:08:39,260 --> 00:08:41,200
not all about just
classes, right?

194
00:08:41,200 --> 00:08:43,720
You don't have to kind of
swallow that whole pill of all

195
00:08:43,720 --> 00:08:46,030
these language features
just to use Dart.

196
00:08:46,030 --> 00:08:48,540
You can start with just a
simple set of functions.

197
00:08:48,540 --> 00:08:52,540
You don't have to use any
of those optional types.

198
00:08:52,540 --> 00:08:54,230
And this is what makes
the web development

199
00:08:54,230 --> 00:08:55,050
so fantastic, right?

200
00:08:55,050 --> 00:08:55,890
It's very iterative.

201
00:08:55,890 --> 00:08:59,420
You can start with the seed of
an idea, hit reload that acts

202
00:08:59,420 --> 00:09:01,880
as your compiler, and
test out your ideas.

203
00:09:01,880 --> 00:09:02,910
Grow over time.

204
00:09:02,910 --> 00:09:04,920
Re-factor to add in more
features, et cetera.

205
00:09:04,920 --> 00:09:08,150
That's that scaling story that
we often talk about.

206
00:09:08,150 --> 00:09:11,790
And that's one of the main use
cases we want to make really

207
00:09:11,790 --> 00:09:13,350
fantastic with Dart.

208
00:09:13,350 --> 00:09:15,990
Specifically I think I can show
you some of these things

209
00:09:15,990 --> 00:09:18,560
in action by going over
to our Dart Editor.

210
00:09:18,560 --> 00:09:19,690
ADDY OSMANI: Yeah,
that'd be great.

211
00:09:19,690 --> 00:09:21,820
SETH LADD: So I'm going to
share my screen here.

212
00:09:21,820 --> 00:09:24,330

213
00:09:24,330 --> 00:09:25,850
So do you see this all right?

214
00:09:25,850 --> 00:09:26,490
ADDY OSMANI: Yeah.

215
00:09:26,490 --> 00:09:27,690
Yeah, I can see that fine.

216
00:09:27,690 --> 00:09:28,290
SETH LADD: Fantastic.

217
00:09:28,290 --> 00:09:29,850
So this is our Dart Editor.

218
00:09:29,850 --> 00:09:32,180
And I'm just going to show just
a few set of features

219
00:09:32,180 --> 00:09:33,720
here to answer your question.

220
00:09:33,720 --> 00:09:36,740
What does Dart do in its tools
specifically to help people

221
00:09:36,740 --> 00:09:37,800
write larger apps?

222
00:09:37,800 --> 00:09:40,970
Well, a lot of it's about the
feedback of the Editor and the

223
00:09:40,970 --> 00:09:42,610
structure of the language.

224
00:09:42,610 --> 00:09:45,090
So what you're looking at here
is a very, very simple

225
00:09:45,090 --> 00:09:45,890
application.

226
00:09:45,890 --> 00:09:47,400
But I'm going to show
a few things.

227
00:09:47,400 --> 00:09:50,810
One you can probably see a bunch
of red underlines, which

228
00:09:50,810 --> 00:09:53,120
the Editor is telling us--

229
00:09:53,120 --> 00:09:54,840
analysis, hey, there's
an error.

230
00:09:54,840 --> 00:09:58,950
So feature number one that I
love to show is the immediate

231
00:09:58,950 --> 00:10:00,500
feedback you get
from the tools.

232
00:10:00,500 --> 00:10:03,360
You don't have to run the app
to know where there are

233
00:10:03,360 --> 00:10:05,390
problems or where there
might be problems.

234
00:10:05,390 --> 00:10:08,890
And so you can fix more in the
development cycle, less

235
00:10:08,890 --> 00:10:13,430
during, say, the unit
test or the user

236
00:10:13,430 --> 00:10:15,620
acceptance testing level.

237
00:10:15,620 --> 00:10:17,570
So let's go ahead and resolve
some of these errors.

238
00:10:17,570 --> 00:10:22,300
Well, feature number two of the
Dart platform that helps

239
00:10:22,300 --> 00:10:25,890
developers scale up to larger
apps is our package manager.

240
00:10:25,890 --> 00:10:27,870
Here it is.

241
00:10:27,870 --> 00:10:29,790
We're pulling in three
different packages.

242
00:10:29,790 --> 00:10:32,770
You can tell due to the package
colon syntax here.

243
00:10:32,770 --> 00:10:38,130
And packages are similar to
the npm node packages or

244
00:10:38,130 --> 00:10:39,560
RubyGems packages.

245
00:10:39,560 --> 00:10:42,480
They're a way for you to package
up and distribute

246
00:10:42,480 --> 00:10:45,260
bundles of functionalities so
that other developers out

247
00:10:45,260 --> 00:10:45,930
there can use it.

248
00:10:45,930 --> 00:10:47,430
And every time you
reuse code that's

249
00:10:47,430 --> 00:10:48,440
code you're not writing.

250
00:10:48,440 --> 00:10:50,460
And that helps people
scale up.

251
00:10:50,460 --> 00:10:53,680
So let's go ahead and run a
Pub, which is our package

252
00:10:53,680 --> 00:10:56,070
manager which you can do
straight from the Editor.

253
00:10:56,070 --> 00:10:57,890
Now, it's important to remember
you can do almost all

254
00:10:57,890 --> 00:10:59,860
of this stuff in the command
line as well.

255
00:10:59,860 --> 00:11:01,120
Let's go ahead and
run Pub install.

256
00:11:01,120 --> 00:11:04,960
Whoops, wrong directory.

257
00:11:04,960 --> 00:11:06,920
And that's going to read
our Dependencies file.

258
00:11:06,920 --> 00:11:10,530
Go out onto the net, pull down
these packages for us.

259
00:11:10,530 --> 00:11:11,350
And, boom.

260
00:11:11,350 --> 00:11:13,270
The Editor then re-analyzes
everything.

261
00:11:13,270 --> 00:11:14,590
You can see the red
lines go away.

262
00:11:14,590 --> 00:11:18,630
So again, that instant feedback
is really fantastic.

263
00:11:18,630 --> 00:11:21,980
The other thing you can do is
just run these apps straight

264
00:11:21,980 --> 00:11:22,660
from the editor.

265
00:11:22,660 --> 00:11:27,480
So a really fantastic edit,
run, slash debug cycle is

266
00:11:27,480 --> 00:11:29,910
really, really important when
you scale up your apps.

267
00:11:29,910 --> 00:11:31,630
So let's go ahead
and run here.

268
00:11:31,630 --> 00:11:34,570

269
00:11:34,570 --> 00:11:37,450
And sure enough my app is
running and I get cat pics.

270
00:11:37,450 --> 00:11:39,820
So this is probably the
best thing ever you're

271
00:11:39,820 --> 00:11:40,730
going to see all day.

272
00:11:40,730 --> 00:11:42,570
So I'm going to let this sink
in for a second, which you

273
00:11:42,570 --> 00:11:45,020
probably can't see.

274
00:11:45,020 --> 00:11:47,290
Let me go ahead and share
the whole desktop here.

275
00:11:47,290 --> 00:11:51,430

276
00:11:51,430 --> 00:11:54,280
Desktop.

277
00:11:54,280 --> 00:11:54,840
Sorry about that.

278
00:11:54,840 --> 00:11:55,950
There we go.

279
00:11:55,950 --> 00:11:56,610
Awesome.

280
00:11:56,610 --> 00:11:56,930
ADDY OSMANI: Awesome.

281
00:11:56,930 --> 00:11:57,280
SETH LADD: OK.

282
00:11:57,280 --> 00:11:57,960
So cat pic.

283
00:11:57,960 --> 00:12:00,780
So what we're seeing here,
though, is three separate

284
00:12:00,780 --> 00:12:03,100
packages all working together.

285
00:12:03,100 --> 00:12:06,420
So that's another feature
of Dart that helps

286
00:12:06,420 --> 00:12:07,640
people scale up.

287
00:12:07,640 --> 00:12:10,740
Because we've baked into the
language the structure.

288
00:12:10,740 --> 00:12:15,010
Things like classes, and
libraries, and interfaces, and

289
00:12:15,010 --> 00:12:16,320
optional static types.

290
00:12:16,320 --> 00:12:19,500
At the language level you're
now able to build upon

291
00:12:19,500 --> 00:12:23,220
frameworks and widgets that
other third party

292
00:12:23,220 --> 00:12:24,810
developers can build.

293
00:12:24,810 --> 00:12:26,730
And you don't have
to do this at the

294
00:12:26,730 --> 00:12:27,710
high-level framework level.

295
00:12:27,710 --> 00:12:28,960
We're doing it at the
language level.

296
00:12:28,960 --> 00:12:32,180
So the frame itself
is from a package.

297
00:12:32,180 --> 00:12:33,750
The widget itself is
from a package.

298
00:12:33,750 --> 00:12:36,530
And the cat pic itself
is from a package.

299
00:12:36,530 --> 00:12:39,930
One other thing I want
to show from our

300
00:12:39,930 --> 00:12:41,455
Editor experience here--

301
00:12:41,455 --> 00:12:47,660
let me just shut off my,
there we go, email--

302
00:12:47,660 --> 00:12:49,830
is the integrated debugging
experience.

303
00:12:49,830 --> 00:12:51,590
And so this is another really
important thing.

304
00:12:51,590 --> 00:12:54,340
As you scale up your apps you
of course are going to run

305
00:12:54,340 --> 00:12:55,990
into some issues or problems.

306
00:12:55,990 --> 00:12:57,870
And how do you debug?

307
00:12:57,870 --> 00:12:59,030
How do you set breakpoints?

308
00:12:59,030 --> 00:13:00,260
How do you step through
the code?

309
00:13:00,260 --> 00:13:02,370
Now, of course Chrome and
Firefox and others have really

310
00:13:02,370 --> 00:13:05,740
fantastic developer tools.

311
00:13:05,740 --> 00:13:08,370
And many developers have an
expectation around doing that

312
00:13:08,370 --> 00:13:09,000
in their editors.

313
00:13:09,000 --> 00:13:12,400
So for instance, we are going
to set a breakpoint directly

314
00:13:12,400 --> 00:13:13,600
in our Editor.

315
00:13:13,600 --> 00:13:15,095
We're going to run
this app again.

316
00:13:15,095 --> 00:13:18,450

317
00:13:18,450 --> 00:13:22,210
And what has happened is it
fires this app in Dartium, our

318
00:13:22,210 --> 00:13:25,350
build of Chromium with the Dart
VM, but it fires off the

319
00:13:25,350 --> 00:13:26,810
breakpoint inside the Editor.

320
00:13:26,810 --> 00:13:30,330
And you can see here I'm able,
hopefully you guys can see, is

321
00:13:30,330 --> 00:13:34,470
I'm able to step through my
application actually using the

322
00:13:34,470 --> 00:13:35,600
embedded debugger.

323
00:13:35,600 --> 00:13:38,695
Now, of course, we can do that
in the DevTools as well.

324
00:13:38,695 --> 00:13:41,420
[? Being ?] able to sit in the
Editor with all the fantastic

325
00:13:41,420 --> 00:13:45,000
static analysis and warnings and
errors and other features

326
00:13:45,000 --> 00:13:48,620
of the Editor, like code
completion, and be able to

327
00:13:48,620 --> 00:13:51,120
debug at the same time is a
really great experience,

328
00:13:51,120 --> 00:13:52,630
especially when you
try to scale up to

329
00:13:52,630 --> 00:13:54,480
10,000 lines of code.

330
00:13:54,480 --> 00:13:57,250
So one other thing I'm going to
show you here, a last thing

331
00:13:57,250 --> 00:13:59,410
I'm going to show you about
some of the features that

332
00:13:59,410 --> 00:14:02,180
allows us to scale up is
that code completion

333
00:14:02,180 --> 00:14:02,970
I was talking about.

334
00:14:02,970 --> 00:14:05,990
So let's go ahead and create
an Awesome class here.

335
00:14:05,990 --> 00:14:10,580
And "do cool stuff" is the
method I'm going to create.

336
00:14:10,580 --> 00:14:14,320
And we're just going to simply
say print, let's

337
00:14:14,320 --> 00:14:15,950
see, Dart is fun.

338
00:14:15,950 --> 00:14:17,200
OK.

339
00:14:17,200 --> 00:14:18,800

340
00:14:18,800 --> 00:14:21,750
Well, when you're able to have a
more structured language and

341
00:14:21,750 --> 00:14:24,130
when you add things like
optional static types and in

342
00:14:24,130 --> 00:14:26,030
Editor, that can do type
influencing and type

343
00:14:26,030 --> 00:14:30,170
propagation, you can do some
really cool things, like code

344
00:14:30,170 --> 00:14:30,840
completion.

345
00:14:30,840 --> 00:14:34,960
And this is really important
when you try to walk yourself

346
00:14:34,960 --> 00:14:37,480
through APIs that you're
unfamiliar with.

347
00:14:37,480 --> 00:14:39,180
And this happens all the time
when you're talking about

348
00:14:39,180 --> 00:14:41,300
10,000, 100,000 lines of code.

349
00:14:41,300 --> 00:14:44,140
You're going to run into
libraries, and classes, and

350
00:14:44,140 --> 00:14:46,500
packages that you yourself
didn't write.

351
00:14:46,500 --> 00:14:48,920
And the guy that wrote that
might literally be in another

352
00:14:48,920 --> 00:14:50,130
time zone, et cetera.

353
00:14:50,130 --> 00:14:52,400
So how do you explore your
program when you don't know

354
00:14:52,400 --> 00:14:53,010
much about it?

355
00:14:53,010 --> 00:14:55,540
Well, code completion here
helps you do that.

356
00:14:55,540 --> 00:14:57,270
You can see here
that the editor

357
00:14:57,270 --> 00:14:59,800
pops up his best guesses.

358
00:14:59,800 --> 00:15:02,380
And in this case he actually,
I think, got it perfectly

359
00:15:02,380 --> 00:15:05,430
right about what I can call on
this Awesome class here.

360
00:15:05,430 --> 00:15:08,040
I can "do cool stuff." And then
go ahead and get that

361
00:15:08,040 --> 00:15:08,990
code completion.

362
00:15:08,990 --> 00:15:12,584
And, of course, if I type
in something incorrect--

363
00:15:12,584 --> 00:15:13,480
ADDY OSMANI: Yup.

364
00:15:13,480 --> 00:15:16,560
SETH LADD: I get my Editor
telling me, hmm, Awesome has

365
00:15:16,560 --> 00:15:18,310
no method called "slada slad."

366
00:15:18,310 --> 00:15:18,550
ADDY OSMANI: I see.

367
00:15:18,550 --> 00:15:20,820
SETH LADD: So that's exactly the
kind of instant feedback

368
00:15:20,820 --> 00:15:22,400
that I should be getting.

369
00:15:22,400 --> 00:15:25,350
And it's critically important
when I for instance am working

370
00:15:25,350 --> 00:15:27,090
with such a large code
base, I can't keep it

371
00:15:27,090 --> 00:15:28,570
all inside my head.

372
00:15:28,570 --> 00:15:30,760
There's a lot of other features
I can probably show

373
00:15:30,760 --> 00:15:32,983
but hopefully that
gives you an idea

374
00:15:32,983 --> 00:15:33,396
ADDY OSMANI: Yeah, yeah.

375
00:15:33,396 --> 00:15:33,810
It definitely [INAUDIBLE].

376
00:15:33,810 --> 00:15:35,850
SETH LADD: --of some of the
power of the language and it's

377
00:15:35,850 --> 00:15:38,070
play with the Editor to
help you scale up.

378
00:15:38,070 --> 00:15:39,080
ADDY OSMANI: Excellent.

379
00:15:39,080 --> 00:15:43,330
So from a developer's
perspective how much of Dart

380
00:15:43,330 --> 00:15:46,180
is the language itself and
how much is the actual

381
00:15:46,180 --> 00:15:47,330
tools behind it?

382
00:15:47,330 --> 00:15:50,090
Because there you're using
Dart Editor, right?

383
00:15:50,090 --> 00:15:50,660
SETH LADD: Yeah, yeah.

384
00:15:50,660 --> 00:15:51,260
That's a good question.

385
00:15:51,260 --> 00:15:52,520
Dart's much more than
a language.

386
00:15:52,520 --> 00:15:55,190
I think that's important
to understand.

387
00:15:55,190 --> 00:15:56,590
I almost want to use
the word platform.

388
00:15:56,590 --> 00:15:57,680
I'm not exactly sure.

389
00:15:57,680 --> 00:15:59,840
But it's definitely
a large project.

390
00:15:59,840 --> 00:16:03,050
And the project encompasses
certainly the language, but a

391
00:16:03,050 --> 00:16:04,600
set of core libraries.

392
00:16:04,600 --> 00:16:07,550
So we're also providing things
like collection support for

393
00:16:07,550 --> 00:16:09,390
lists, arrays, and sets.

394
00:16:09,390 --> 00:16:13,920
Timer support for when you want
to fire off a callback.

395
00:16:13,920 --> 00:16:19,930
Isolates, which is how we
do concurrency in VMs.

396
00:16:19,930 --> 00:16:22,610
And even compile the JavaScript
as web workers.

397
00:16:22,610 --> 00:16:25,710
We also have the ancillary
libraries everyone expects

398
00:16:25,710 --> 00:16:30,800
like unit tests and mocks,
working with JSON, working

399
00:16:30,800 --> 00:16:31,440
with dates.

400
00:16:31,440 --> 00:16:32,500
And the list goes on and on.

401
00:16:32,500 --> 00:16:34,130
So that's our libraries.

402
00:16:34,130 --> 00:16:36,750
Certainly the Dart Editor,
which you just saw.

403
00:16:36,750 --> 00:16:41,020
We also have plug-ins for
Eclipse and the JetBrains guys

404
00:16:41,020 --> 00:16:44,420
who make IntelliJ and WebStorm,
a fantastic web IDE,

405
00:16:44,420 --> 00:16:46,890
also have a plug-in
for Dart as well.

406
00:16:46,890 --> 00:16:49,650
There's the package manager that
we just saw that allows

407
00:16:49,650 --> 00:16:51,160
you to not only pull down

408
00:16:51,160 --> 00:16:55,080
packages, but publish packages.

409
00:16:55,080 --> 00:16:57,880
I'm also forgetting some-- oh,
and then of course the virtual

410
00:16:57,880 --> 00:17:00,720
machine, which runs Dart
code natively.

411
00:17:00,720 --> 00:17:04,200
And we were just doing
that Dartium.

412
00:17:04,200 --> 00:17:07,579
But probably most importantly,
other than the language of

413
00:17:07,579 --> 00:17:09,859
course, is our
compiler-to-JavaScript.

414
00:17:09,859 --> 00:17:12,589
And this is a really
key point.

415
00:17:12,589 --> 00:17:15,490
Another myth to debunk
is that Dart is not

416
00:17:15,490 --> 00:17:17,670
just a Chrome thing.

417
00:17:17,670 --> 00:17:20,150
We are on our third generation
compiler-to-JavaScript.

418
00:17:20,150 --> 00:17:24,599
And the output is incredibly
smaller than I think what

419
00:17:24,599 --> 00:17:25,579
people first saw.

420
00:17:25,579 --> 00:17:27,270
And they were, rightly
so, shocked when

421
00:17:27,270 --> 00:17:28,040
they first saw it.

422
00:17:28,040 --> 00:17:29,360
But our third generation--

423
00:17:29,360 --> 00:17:30,520
ADDY OSMANI: Yeah, I mean
anytime you see sort of code

424
00:17:30,520 --> 00:17:34,360
that's being compiled or
generated by some other tool

425
00:17:34,360 --> 00:17:36,670
often it's not very pretty.

426
00:17:36,670 --> 00:17:37,260
SETH LADD: Right.

427
00:17:37,260 --> 00:17:39,300
ADDY OSMANI: What's
the code like that

428
00:17:39,300 --> 00:17:41,350
Dart-to-JS actually generates?

429
00:17:41,350 --> 00:17:42,880
SETH LADD: Well,
let's do that.

430
00:17:42,880 --> 00:17:44,080
And I'll just pull
up the Editor.

431
00:17:44,080 --> 00:17:45,840
Because you can do that
in the Editor.

432
00:17:45,840 --> 00:17:48,820
And so yes.

433
00:17:48,820 --> 00:17:52,020
To complete the last major
component of the Dart project

434
00:17:52,020 --> 00:17:55,030
is the compiler to JavaScript.

435
00:17:55,030 --> 00:17:57,370
So let's go ahead
and do that now.

436
00:17:57,370 --> 00:18:01,870
Because Dart, at its core, must
run across the modern web

437
00:18:01,870 --> 00:18:05,010
and run in browsers like
IE9 and above,

438
00:18:05,010 --> 00:18:06,620
Firefox, Safari, Chrome.

439
00:18:06,620 --> 00:18:10,580
So if you build Dart apps they
should work in the modern web.

440
00:18:10,580 --> 00:18:12,350
So your question was about
compiling JavaScript.

441
00:18:12,350 --> 00:18:12,950
So let's do that now.

442
00:18:12,950 --> 00:18:15,730
So we're going to take the same
app, the cat pics app,

443
00:18:15,730 --> 00:18:17,420
and let's run it in
another browser.

444
00:18:17,420 --> 00:18:20,090
So if I right click here and
I say run as JavaScript the

445
00:18:20,090 --> 00:18:23,330
first thing it's going to do
is run Dart-to-JS, compile

446
00:18:23,330 --> 00:18:25,070
this whole thing
to JavaScript.

447
00:18:25,070 --> 00:18:28,150
Now it also performs this
technique called tree shaking,

448
00:18:28,150 --> 00:18:29,240
which is really, really cool.

449
00:18:29,240 --> 00:18:31,132
What tree shaking does--

450
00:18:31,132 --> 00:18:32,190
a-ha, here's our--

451
00:18:32,190 --> 00:18:33,780
now this is Chrome.

452
00:18:33,780 --> 00:18:40,110
And I can prove this, how
can I prove this?

453
00:18:40,110 --> 00:18:41,360
I can prove it by this.

454
00:18:41,360 --> 00:18:43,608

455
00:18:43,608 --> 00:18:44,858
About version.

456
00:18:44,858 --> 00:18:47,500

457
00:18:47,500 --> 00:18:49,890
Right, so straight up
Chrome, Chrome 22.

458
00:18:49,890 --> 00:18:52,880
This does not have the Dart
Virtual Machine in it.

459
00:18:52,880 --> 00:18:54,320
So what's happening here?

460
00:18:54,320 --> 00:18:55,950
Well, we've compiled
the JavaScript.

461
00:18:55,950 --> 00:18:57,690
So this is running in the
JavaScript version.

462
00:18:57,690 --> 00:19:01,710
But we've got this fantastic
feature called Source Maps.

463
00:19:01,710 --> 00:19:04,640
And Source Maps allow us to--

464
00:19:04,640 --> 00:19:06,480
let me just reload this.

465
00:19:06,480 --> 00:19:10,448

466
00:19:10,448 --> 00:19:12,416
Whoop, this isn't what
I want here.

467
00:19:12,416 --> 00:19:15,380

468
00:19:15,380 --> 00:19:18,870
So here is our compiled
JavaScript.

469
00:19:18,870 --> 00:19:19,960
This is your first question.

470
00:19:19,960 --> 00:19:22,540
I'm going answer this.

471
00:19:22,540 --> 00:19:25,260
There's no minification
happening right now.

472
00:19:25,260 --> 00:19:26,930
That's a separate step
you can run.

473
00:19:26,930 --> 00:19:29,220
You can also run this through
Closure Compiler as well to

474
00:19:29,220 --> 00:19:32,110
get a smaller output if
that's what you like.

475
00:19:32,110 --> 00:19:33,980
But the code is fairly
readable.

476
00:19:33,980 --> 00:19:36,890
And so we think that there's
secondary or tertiary steps

477
00:19:36,890 --> 00:19:41,800
that we can process this
JavaScript code to get even

478
00:19:41,800 --> 00:19:44,670
smaller concatenate and
minified output.

479
00:19:44,670 --> 00:19:47,160
But this is the raw output.

480
00:19:47,160 --> 00:19:49,680
I can go into some of
the things here.

481
00:19:49,680 --> 00:19:51,430
All Dart code runs
in an isolate.

482
00:19:51,430 --> 00:19:51,690
ADDY OSMANI: OK.

483
00:19:51,690 --> 00:19:54,630
SETH LADD: And all that simply
means is that we have this

484
00:19:54,630 --> 00:19:57,730
safer concurrency model than
shared state thread.

485
00:19:57,730 --> 00:20:01,700
So that's why you might see
this isolate word here.

486
00:20:01,700 --> 00:20:02,520
So yeah.

487
00:20:02,520 --> 00:20:03,360
So that works.

488
00:20:03,360 --> 00:20:06,780
But I was hoping to show the
Source Maps, which doesn't

489
00:20:06,780 --> 00:20:08,330
seem to be running right now.

490
00:20:08,330 --> 00:20:09,980
So we're going to have
to come back to that.

491
00:20:09,980 --> 00:20:12,990
But Source Maps is
a fantastic--

492
00:20:12,990 --> 00:20:13,480
oh, you know what?

493
00:20:13,480 --> 00:20:14,390
Let me just--

494
00:20:14,390 --> 00:20:15,400
help me out here.

495
00:20:15,400 --> 00:20:18,500
There's a way to get--

496
00:20:18,500 --> 00:20:21,910
turn on Source Maps
here, right?

497
00:20:21,910 --> 00:20:24,260
ADDY OSMANI: There should be if
you click on Enable Source

498
00:20:24,260 --> 00:20:25,165
Maps, yeah.

499
00:20:25,165 --> 00:20:26,115
SETH LADD: Perfect.

500
00:20:26,115 --> 00:20:27,540
Let me reload this.

501
00:20:27,540 --> 00:20:29,900
Thank you.

502
00:20:29,900 --> 00:20:31,330
OK.

503
00:20:31,330 --> 00:20:32,050
Open this up.

504
00:20:32,050 --> 00:20:32,480
A-ha!

505
00:20:32,480 --> 00:20:32,940
Great.

506
00:20:32,940 --> 00:20:34,360
Good I wanted to show this.

507
00:20:34,360 --> 00:20:35,600
So this was actually good.

508
00:20:35,600 --> 00:20:37,460
Because I showed you the
compiled JavaScript.

509
00:20:37,460 --> 00:20:39,180
So it's fairly readable.

510
00:20:39,180 --> 00:20:41,740
But what most people want to
do is actually work in the

511
00:20:41,740 --> 00:20:42,790
source language.

512
00:20:42,790 --> 00:20:44,690
So if you write CoffeeScript,
you want to debug in

513
00:20:44,690 --> 00:20:45,310
CoffeeScript.

514
00:20:45,310 --> 00:20:48,150
If you want to write Dart, you
want to debug in Dart.

515
00:20:48,150 --> 00:20:51,620
And so thanks to our Source
Maps, which maps the original

516
00:20:51,620 --> 00:20:54,790
code over to the compiled
JavaScript.

517
00:20:54,790 --> 00:20:58,170
Now, the Developer Tools know
about this mapping file.

518
00:20:58,170 --> 00:21:03,170
So you can see now in our
DevTools I'm able to click on

519
00:21:03,170 --> 00:21:06,170
the scripts and it loads up
the actual Dart code.

520
00:21:06,170 --> 00:21:09,520
Now, remember this is regular
Chrome without the Dart VM.

521
00:21:09,520 --> 00:21:13,145
But it's able to, through the
mapping file, actually say, oh

522
00:21:13,145 --> 00:21:15,670
hey, I'm going to hide that
compiled JavaScript code.

523
00:21:15,670 --> 00:21:18,180
I'm going to show you the
original code that you wrote.

524
00:21:18,180 --> 00:21:21,900
And I can even set breakpoints
inside the original code.

525
00:21:21,900 --> 00:21:22,310
ADDY OSMANI: Excellent.

526
00:21:22,310 --> 00:21:24,350
SETH LADD: So now if I
reload here, boom.

527
00:21:24,350 --> 00:21:27,720
It actually stops right at the
breakpoint from the original

528
00:21:27,720 --> 00:21:30,500
Dart code even though this is
all being mapped back to the

529
00:21:30,500 --> 00:21:31,530
compiled JavaScript.

530
00:21:31,530 --> 00:21:34,810
So yes, the compiled JavaScript
is important.

531
00:21:34,810 --> 00:21:36,620
It should be fairly readable.

532
00:21:36,620 --> 00:21:38,910
But thanks to Source Maps you're
probably not going to

533
00:21:38,910 --> 00:21:42,310
be looking at the compiled
JavaScript that often.

534
00:21:42,310 --> 00:21:45,270
And certainly most modern web
developers minify, and

535
00:21:45,270 --> 00:21:49,860
obfuscate, and concatenate
further making the compiled

536
00:21:49,860 --> 00:21:53,900
output just kind of like the
output of an EXE that you're

537
00:21:53,900 --> 00:21:55,600
C++ compiler would generate.

538
00:21:55,600 --> 00:21:57,090
You don't really look at that.

539
00:21:57,090 --> 00:21:59,660
And you want to debug it at a
much more user friendly level.

540
00:21:59,660 --> 00:22:00,870
And we can do that now.

541
00:22:00,870 --> 00:22:01,300
ADDY OSMANI: Very cool.

542
00:22:01,300 --> 00:22:02,330
SETH LADD: That's pretty cool.

543
00:22:02,330 --> 00:22:04,890
ADDY OSMANI: Yeah, I
love Source Maps.

544
00:22:04,890 --> 00:22:08,260
If you could go back to that
window for a moment, I'm not

545
00:22:08,260 --> 00:22:09,832
sure if that's been closed up.

546
00:22:09,832 --> 00:22:10,180
SETH LADD: Oh, the
browswer one?

547
00:22:10,180 --> 00:22:12,610
ADDY OSMANI: I had a question
about the source.

548
00:22:12,610 --> 00:22:15,630
So I was just wondering in that
source view of sort of

549
00:22:15,630 --> 00:22:19,710
what was generated how much of
that code was sort of the

550
00:22:19,710 --> 00:22:23,170
application itself and how much
of it was sort of Dart

551
00:22:23,170 --> 00:22:28,500
specific, Runtime, or Utilities,
and other stuff?

552
00:22:28,500 --> 00:22:29,270
SETH LADD: That's a
great question.

553
00:22:29,270 --> 00:22:34,570
I'll share this here and
I'll just pull it up

554
00:22:34,570 --> 00:22:35,620
in the Editor itself.

555
00:22:35,620 --> 00:22:38,980
That might be a little bit
easier for us to look at.

556
00:22:38,980 --> 00:22:40,640
So you're probably [INAUDIBLE]

557
00:22:40,640 --> 00:22:45,360
lines of things like jQuery,
which you download a 30K kind

558
00:22:45,360 --> 00:22:46,930
of boilerplate code, right?

559
00:22:46,930 --> 00:22:48,010
ADDY OSMANI: Oh, Seth?

560
00:22:48,010 --> 00:22:49,440
We can't see your window
at the moment.

561
00:22:49,440 --> 00:22:50,690
Just a second.

562
00:22:50,690 --> 00:22:52,975

563
00:22:52,975 --> 00:22:54,225
SETH LADD: You might
have to click the--

564
00:22:54,225 --> 00:22:57,000

565
00:22:57,000 --> 00:22:58,250
can you see that?

566
00:22:58,250 --> 00:23:00,940

567
00:23:00,940 --> 00:23:01,810
ADDY OSMANI: Uh, no.

568
00:23:01,810 --> 00:23:04,360
It still seems to be gone.

569
00:23:04,360 --> 00:23:05,710
We're going to have a technician
look at that.

570
00:23:05,710 --> 00:23:09,930
Could you talk us through
roughly how much of what we

571
00:23:09,930 --> 00:23:13,810
saw was sort of Runtime versus
actual app [INAUDIBLE]?

572
00:23:13,810 --> 00:23:14,300
SETH LADD: Yeah, certainly.

573
00:23:14,300 --> 00:23:17,740
So thanks to our Dart-to-JS
compiler's technique called

574
00:23:17,740 --> 00:23:21,860
tree shaking it worked really
hard to eliminate the unused

575
00:23:21,860 --> 00:23:24,070
bits of code, which is
really important.

576
00:23:24,070 --> 00:23:27,640
It's interesting when you go to
any JavaScript library the

577
00:23:27,640 --> 00:23:31,910
main marketing bullet point
is how small they are.

578
00:23:31,910 --> 00:23:34,000
Which is important, obviously,
for many reasons.

579
00:23:34,000 --> 00:23:36,210
Network, bandwidth, latency,
et cetera.

580
00:23:36,210 --> 00:23:39,170
But as a developer I want to
know, does the library do

581
00:23:39,170 --> 00:23:40,940
something useful, right?

582
00:23:40,940 --> 00:23:41,860
Does it actually help me?

583
00:23:41,860 --> 00:23:43,110
Not how small it is.

584
00:23:43,110 --> 00:23:46,570
Because I want the linker step
or the compiler step to prune

585
00:23:46,570 --> 00:23:47,720
everything out for me.

586
00:23:47,720 --> 00:23:51,780
So the code that you see
compiled to JavaScript is

587
00:23:51,780 --> 00:23:54,790
pretty close to the minimal set
of code required just for

588
00:23:54,790 --> 00:23:55,960
that application.

589
00:23:55,960 --> 00:23:57,190
ADDY OSMANI: OK.

590
00:23:57,190 --> 00:23:59,720
SETH LADD: There's not a lot of
boilerplate, if you will.

591
00:23:59,720 --> 00:24:01,570
Very, very little bits of it.

592
00:24:01,570 --> 00:24:03,380
ADDY OSMANI: Excellent.

593
00:24:03,380 --> 00:24:06,420
A question that we got through
was developers were,

594
00:24:06,420 --> 00:24:07,070
obviously, [INAUDIBLE].

595
00:24:07,070 --> 00:24:10,490
So TypeScript was announced
in the past week.

596
00:24:10,490 --> 00:24:12,500
There's a lot of interest
around it.

597
00:24:12,500 --> 00:24:14,740
A natural thing for developers
to want to do is

598
00:24:14,740 --> 00:24:16,970
compare Type with Dart.

599
00:24:16,970 --> 00:24:17,410
SETH LADD: Yeah.

600
00:24:17,410 --> 00:24:19,370
ADDY OSMANI: Could you talk
a little bit about the

601
00:24:19,370 --> 00:24:20,990
differences?

602
00:24:20,990 --> 00:24:21,630
SETH LADD: Absolutely.

603
00:24:21,630 --> 00:24:26,160
So we were very happy to
see TypeScript get

604
00:24:26,160 --> 00:24:27,770
launched and announced.

605
00:24:27,770 --> 00:24:28,990
This is great.

606
00:24:28,990 --> 00:24:33,460
It's another company saying,
hey, there's another way to

607
00:24:33,460 --> 00:24:37,800
write larger scaled applications
out there and add

608
00:24:37,800 --> 00:24:40,990
it with a great tooling story,
like Visual Studio has for

609
00:24:40,990 --> 00:24:44,840
TypeScript, is a validation
of what we're trying to

610
00:24:44,840 --> 00:24:47,240
do over with Dart.

611
00:24:47,240 --> 00:24:49,080
So there are some
similarities.

612
00:24:49,080 --> 00:24:51,370
For instance, the optional
static typing.

613
00:24:51,370 --> 00:24:53,640
Both languages allow you
to add static type

614
00:24:53,640 --> 00:24:55,240
annotations, or not.

615
00:24:55,240 --> 00:24:56,990
Up to you.

616
00:24:56,990 --> 00:25:01,960
Both are building up a great
Editor story as well.

617
00:25:01,960 --> 00:25:03,920
TypeScript had Visual Studio.

618
00:25:03,920 --> 00:25:07,220
Dart runs in the Editor or
Eclipse, or IntelliJ.

619
00:25:07,220 --> 00:25:08,830
ADDY OSMANI: OK.

620
00:25:08,830 --> 00:25:10,010
SETH LADD: But then there's
also some--

621
00:25:10,010 --> 00:25:11,440
ADDY OSMANI: I'm think we're
going to just stop for a very

622
00:25:11,440 --> 00:25:11,970
quick minute.

623
00:25:11,970 --> 00:25:13,815
We're going to reload
up just to see if we

624
00:25:13,815 --> 00:25:15,065
can get your feedback.

625
00:25:15,065 --> 00:25:18,140

626
00:25:18,140 --> 00:25:19,130
Say again?

627
00:25:19,130 --> 00:25:21,540
We're going to stop
for just a second.

628
00:25:21,540 --> 00:25:24,150
We're going to reload just to
see it we can get your video

629
00:25:24,150 --> 00:25:25,400
input back.

630
00:25:25,400 --> 00:25:34,130

631
00:25:34,130 --> 00:25:34,800
We're good to go.

632
00:25:34,800 --> 00:25:36,030
Excellent.

633
00:25:36,030 --> 00:25:37,280
SETH LADD: OK, cool.

634
00:25:37,280 --> 00:25:41,250

635
00:25:41,250 --> 00:25:43,576
ADDY OSMANI: So feel free
to continue, Seth.

636
00:25:43,576 --> 00:25:44,160
SETH LADD: OK, awesome.

637
00:25:44,160 --> 00:25:45,040
Can you hear me now?

638
00:25:45,040 --> 00:25:46,410
ADDY OSMANI: Yes, yes we can.

639
00:25:46,410 --> 00:25:47,920
SETH LADD: Perfect.

640
00:25:47,920 --> 00:25:51,210
But there are some differences
in the language design.

641
00:25:51,210 --> 00:25:54,590
TypeScript, as far as I can
tell, keeps the semantics of

642
00:25:54,590 --> 00:25:55,320
JavaScript.

643
00:25:55,320 --> 00:25:58,020
And Dart goes much,
much further.

644
00:25:58,020 --> 00:26:01,060
So for instance, Dart's integers
are arbitrarily

645
00:26:01,060 --> 00:26:03,430
scaled out integers.

646
00:26:03,430 --> 00:26:07,020
JavaScript, obviously, has
only one number type.

647
00:26:07,020 --> 00:26:12,805
Dart has doubles and numbers
and integers.

648
00:26:12,805 --> 00:26:16,570
Another difference might include
Dart has generics.

649
00:26:16,570 --> 00:26:19,960
And those generics are reified,
which means the

650
00:26:19,960 --> 00:26:24,030
generic information, the
parametrized types are

651
00:26:24,030 --> 00:26:27,250
codified at Runtime
and Compile-time.

652
00:26:27,250 --> 00:26:29,520
TypeScript does not right
now have generics.

653
00:26:29,520 --> 00:26:32,280
And I believe what they said is
when they do add generics

654
00:26:32,280 --> 00:26:35,560
they will erased at Compiled
or Runtime.

655
00:26:35,560 --> 00:26:38,560
So there is a difference
there.

656
00:26:38,560 --> 00:26:42,210
The type annotation syntax
itself is different.

657
00:26:42,210 --> 00:26:47,000
Dart uses the more familiar Java
and C versions of type

658
00:26:47,000 --> 00:26:49,610
annotations where it's on
the left-hand side.

659
00:26:49,610 --> 00:26:52,410
And TypeScript uses on
the right-hand side.

660
00:26:52,410 --> 00:26:54,150
I think familiar to, I
believe, ActionScript

661
00:26:54,150 --> 00:26:55,400
developers.

662
00:26:55,400 --> 00:26:57,160

663
00:26:57,160 --> 00:26:59,550
And there's something other
differences, too.

664
00:26:59,550 --> 00:27:02,180
I think the Dart project
goes a lot further.

665
00:27:02,180 --> 00:27:05,480
For instance, we have this
concept of isolates for shared

666
00:27:05,480 --> 00:27:08,250
nothing concurrency.

667
00:27:08,250 --> 00:27:10,590
I assume that TypeScript, again,
keeping with JavaScript

668
00:27:10,590 --> 00:27:14,060
semantics, runs at a single
thread and uses things like

669
00:27:14,060 --> 00:27:17,660
web workers to get concurrency
there.

670
00:27:17,660 --> 00:27:22,140
Another kind of more subtle but
interesting point is Dart,

671
00:27:22,140 --> 00:27:26,050
you're able to downcast due
to its type system.

672
00:27:26,050 --> 00:27:30,070
And in TypeScript there's
no implicit downcasting.

673
00:27:30,070 --> 00:27:35,070
But in a similarity both
languages have a lexical this,

674
00:27:35,070 --> 00:27:36,730
which is a fantastic addition.

675
00:27:36,730 --> 00:27:41,470
And all new modern languages
have lexical this.

676
00:27:41,470 --> 00:27:43,790
But in general they're both
trying to attack the same

677
00:27:43,790 --> 00:27:47,480
problem, how do we enable
developers to build more

678
00:27:47,480 --> 00:27:49,880
larger complex apps for
the modern web.

679
00:27:49,880 --> 00:27:51,640
And so I think that's good.

680
00:27:51,640 --> 00:27:53,040
ADDY OSMANI: Yeah, I think
we're going to see a lot

681
00:27:53,040 --> 00:27:55,920
coming out of TypeScript, Dart,
and other solutions as

682
00:27:55,920 --> 00:27:57,880
people start to play
with it more.

683
00:27:57,880 --> 00:28:01,960
Going back to the idea of Dart
being sort of slightly more

684
00:28:01,960 --> 00:28:06,650
full stack, if you will, one
question we got in over

685
00:28:06,650 --> 00:28:09,640
moderator was how well
does it work with

686
00:28:09,640 --> 00:28:12,090
say, JavaScript libraries?

687
00:28:12,090 --> 00:28:16,590
People are using a ton of
MVC frameworks, utility

688
00:28:16,590 --> 00:28:18,280
libraries, and so on.

689
00:28:18,280 --> 00:28:22,630
If you're using Dart do you
have to be using modules

690
00:28:22,630 --> 00:28:24,140
written in Dart lang?

691
00:28:24,140 --> 00:28:27,870
Or can you actually use other
JavaScript libraries with it?

692
00:28:27,870 --> 00:28:29,650
How does that work?

693
00:28:29,650 --> 00:28:32,480
SETH LADD: That's a great
question we recently launched

694
00:28:32,480 --> 00:28:36,010
our synchronous JavaScript
interop capability that allows

695
00:28:36,010 --> 00:28:39,400
you to use existing JavaScript
libraries in your Dart

696
00:28:39,400 --> 00:28:40,650
application.

697
00:28:40,650 --> 00:28:45,340
Now, transparent as something
like TypeScript which is just

698
00:28:45,340 --> 00:28:47,830
a new syntax on the
same semantics.

699
00:28:47,830 --> 00:28:51,820
But it does give you very, very
close to transparently

700
00:28:51,820 --> 00:28:53,800
using these libraries.

701
00:28:53,800 --> 00:28:57,640
So for instance, you can use the
more synchronous stateful

702
00:28:57,640 --> 00:29:01,790
APIs, like the Twitter API, or
Google Maps API, or the Google

703
00:29:01,790 --> 00:29:06,570
Visualization API, the sorts of
APIs in your Dart program.

704
00:29:06,570 --> 00:29:08,830
And that's really,
really nice.

705
00:29:08,830 --> 00:29:12,590
I don't believe that the use
case of jQuery is something we

706
00:29:12,590 --> 00:29:13,730
are targeting with this.

707
00:29:13,730 --> 00:29:17,960
JQuery is really fantastic
because it makes the DOM feel

708
00:29:17,960 --> 00:29:19,410
like JavaScript.

709
00:29:19,410 --> 00:29:23,645
And so a one to one translation
or a, I'm going to

710
00:29:23,645 --> 00:29:26,000
use jQuery in Dart, may not be
the most effective thing.

711
00:29:26,000 --> 00:29:28,050
Because Dart is not
JavaScript.

712
00:29:28,050 --> 00:29:31,310
And so some of the usage
paradigms or just simply

713
00:29:31,310 --> 00:29:34,640
features of the API may not
work perfectly correctly.

714
00:29:34,640 --> 00:29:38,140
The good news is we have our own
version a jQuery, if you

715
00:29:38,140 --> 00:29:41,880
will, a better DOM that gets
bundled with Dart called Dart

716
00:29:41,880 --> 00:29:44,230
colon HTML, that's
the library.

717
00:29:44,230 --> 00:29:47,020
And it has a lot of jQuery-isms
in there.

718
00:29:47,020 --> 00:29:48,450
And it will get better there.

719
00:29:48,450 --> 00:29:51,730
So I think for this synchronous
stateful type APIs

720
00:29:51,730 --> 00:29:55,360
that many JavaScript libraries
have you'll be able to use

721
00:29:55,360 --> 00:29:56,410
those in your Dart code.

722
00:29:56,410 --> 00:29:57,780
And we have a lot of demos
of that already

723
00:29:57,780 --> 00:29:59,600
on our GitHub account.

724
00:29:59,600 --> 00:30:02,375
ADDY OSMANI: So if I wanted to
use something like AngularJS

725
00:30:02,375 --> 00:30:05,620
or Backbone I could actually
use that with Dart.

726
00:30:05,620 --> 00:30:07,430
SETH LADD: I don't think
Angular JS, actually.

727
00:30:07,430 --> 00:30:10,420
Because I think that, again, is
very ingrained in some of

728
00:30:10,420 --> 00:30:14,940
the features of JavaScript, like
its eval functionality.

729
00:30:14,940 --> 00:30:17,880
So it remains to be seen how
good of a programming

730
00:30:17,880 --> 00:30:20,410
experience it might
be to integrate

731
00:30:20,410 --> 00:30:23,430
Angular in with Dart.

732
00:30:23,430 --> 00:30:27,070
But I do believe that other
frameworks, or other stateful

733
00:30:27,070 --> 00:30:29,830
synchronous libraries out there,
like Google Maps API or

734
00:30:29,830 --> 00:30:32,420
the Facebook API, those
things are going to be

735
00:30:32,420 --> 00:30:33,420
very easy to use.

736
00:30:33,420 --> 00:30:35,090
And we have demos of
some of those.

737
00:30:35,090 --> 00:30:37,870
So I'd be interested to see
what happens if you try to

738
00:30:37,870 --> 00:30:41,800
actually use Backbone with
Dart via our JS interop.

739
00:30:41,800 --> 00:30:44,760
But what I suspect is that
that's a little bit too low

740
00:30:44,760 --> 00:30:47,250
level to be a really fantastic
experience.

741
00:30:47,250 --> 00:30:49,530
But we've already seen a
bunch of MVC frameworks

742
00:30:49,530 --> 00:30:51,720
launched for Dart.

743
00:30:51,720 --> 00:30:55,650
And we have open source work
ongoing right now for our web

744
00:30:55,650 --> 00:31:00,620
components plus Dart work, which
we are putting a lot of

745
00:31:00,620 --> 00:31:04,460
resources behind to be the bet
we're placing on how to build

746
00:31:04,460 --> 00:31:06,110
a modern web app.

747
00:31:06,110 --> 00:31:09,870
So look for more on that soon.

748
00:31:09,870 --> 00:31:10,320
ADDY OSMANI: Excellent.

749
00:31:10,320 --> 00:31:12,820
Yeah, I was about to say my
perception based on what you

750
00:31:12,820 --> 00:31:15,760
described was that rather than
just taking the existing

751
00:31:15,760 --> 00:31:19,050
libraries it's probably more the
case that perhaps you take

752
00:31:19,050 --> 00:31:22,420
existing patterns that you're
used to and try to apply it to

753
00:31:22,420 --> 00:31:24,780
Dart, given that it's a
different language.

754
00:31:24,780 --> 00:31:28,340
But it's really great to hear
that you guys have got a great

755
00:31:28,340 --> 00:31:31,670
flow for people that can use
JavaScript APIs for things

756
00:31:31,670 --> 00:31:35,280
like the Facebook integration
and so on.

757
00:31:35,280 --> 00:31:39,260
One question that I was quite
curious about was so whenever

758
00:31:39,260 --> 00:31:42,700
you're picking a full stack
solution or a solution that

759
00:31:42,700 --> 00:31:46,440
you're going to be using for a
serious application one of the

760
00:31:46,440 --> 00:31:50,660
first things you think about
is maturity and has that

761
00:31:50,660 --> 00:31:54,810
solution been already used to
build a platform or an app of

762
00:31:54,810 --> 00:31:57,100
some sort before?

763
00:31:57,100 --> 00:32:01,730
Has Dart been used to build
any large or real world

764
00:32:01,730 --> 00:32:07,040
applications either at Google
or outside of it?

765
00:32:07,040 --> 00:32:09,140
SETH LADD: Well, we've seen a
tremendous amount of third

766
00:32:09,140 --> 00:32:11,780
party libraries already launched
for Dart which is

767
00:32:11,780 --> 00:32:13,260
really fantastic for
a language that's

768
00:32:13,260 --> 00:32:15,040
not even yet at 0.1.

769
00:32:15,040 --> 00:32:17,200
So we're still technically
technology previewed.

770
00:32:17,200 --> 00:32:21,840
And so we've seen everything
from box to deports to logging

771
00:32:21,840 --> 00:32:24,190
frameworks to multiple
options for MVC.

772
00:32:24,190 --> 00:32:28,800
We've even seen things like
modDart to embed the Dart VM

773
00:32:28,800 --> 00:32:29,830
into Apache.

774
00:32:29,830 --> 00:32:31,630
You can run Dart in Heroku.

775
00:32:31,630 --> 00:32:34,430
And so we're now seeing that
infrastructure of the

776
00:32:34,430 --> 00:32:37,970
community getting built up at
the library and package and

777
00:32:37,970 --> 00:32:39,640
framework levels.

778
00:32:39,640 --> 00:32:41,890
As far as what's happening
inside Google I don't have a

779
00:32:41,890 --> 00:32:44,690
lot to comment on this
publicly now.

780
00:32:44,690 --> 00:32:48,110
But I can say that there
are teams working

781
00:32:48,110 --> 00:32:51,040
on it inside Google.

782
00:32:51,040 --> 00:32:54,140
And as far as public apps as
well we've seen this smaller

783
00:32:54,140 --> 00:32:57,720
kind of demo and feasibility
study stuff right now.

784
00:32:57,720 --> 00:33:03,250
And I expect a lot more when we
have our M1 release which

785
00:33:03,250 --> 00:33:04,070
is coming up soon.

786
00:33:04,070 --> 00:33:06,615
And that's our first public
milestone since

787
00:33:06,615 --> 00:33:07,820
the technology previewed.

788
00:33:07,820 --> 00:33:11,270
And that's essentially our
statement to the world saying,

789
00:33:11,270 --> 00:33:16,550
hey, the Dart language is in a
fairly stable state right now.

790
00:33:16,550 --> 00:33:19,000
We've got our libraries now
in a good position to be

791
00:33:19,000 --> 00:33:20,290
refactored and improved.

792
00:33:20,290 --> 00:33:22,420
Now is a good time for
you to start building

793
00:33:22,420 --> 00:33:23,510
your apps with it.

794
00:33:23,510 --> 00:33:26,660
And so I think that tipping
point, if you will, is going

795
00:33:26,660 --> 00:33:28,410
to happen very, very soon.

796
00:33:28,410 --> 00:33:29,540
ADDY OSMANI: Excellent.

797
00:33:29,540 --> 00:33:31,730
So my last question.

798
00:33:31,730 --> 00:33:35,520
So let's move forward in the
future, a year or two.

799
00:33:35,520 --> 00:33:38,840
Web Components are hopefully in
a much more stable state.

800
00:33:38,840 --> 00:33:42,460
They've been implemented across
a number of browsers.

801
00:33:42,460 --> 00:33:44,400
What's the Dart story there?

802
00:33:44,400 --> 00:33:46,680
Do you think that it's going
to greatly help people

803
00:33:46,680 --> 00:33:50,720
building modern futuristic
apps at that point?

804
00:33:50,720 --> 00:33:51,310
SETH LADD: Absolutely.

805
00:33:51,310 --> 00:33:52,590
I'm glad you mentioned
Web Components.

806
00:33:52,590 --> 00:33:55,660
It's something that we're
working really hard on.

807
00:33:55,660 --> 00:33:58,100
And it's probably important
to talk about what are Web

808
00:33:58,100 --> 00:33:58,730
Components?

809
00:33:58,730 --> 00:34:02,030
Web Components adds the concept
of encapsulation to

810
00:34:02,030 --> 00:34:05,030
the web platform at the lowest
web platform level.

811
00:34:05,030 --> 00:34:07,170
If you think about it right now
you've got styles, you've

812
00:34:07,170 --> 00:34:09,380
got behavior through JavaScript,
and you've got

813
00:34:09,380 --> 00:34:12,270
structure in HTML5 all
kind of coexisting

814
00:34:12,270 --> 00:34:13,960
and mashed up together.

815
00:34:13,960 --> 00:34:16,750
And it's very hard
to introduce--

816
00:34:16,750 --> 00:34:17,880
excuse me--

817
00:34:17,880 --> 00:34:20,670
other libraries and frameworks
together without them easily

818
00:34:20,670 --> 00:34:23,040
kind of get their fingers
into your code.

819
00:34:23,040 --> 00:34:25,889
With Web Components you can
easily encapsulate the

820
00:34:25,889 --> 00:34:30,840
structure, behavior, and styles
of these components and

821
00:34:30,840 --> 00:34:33,560
then reuse them with a much
better encapsulation.

822
00:34:33,560 --> 00:34:36,810
Then you could build much
better, bigger applications.

823
00:34:36,810 --> 00:34:40,980
Dart allows us to bring this
technology to you today thanks

824
00:34:40,980 --> 00:34:42,389
to our compiler step.

825
00:34:42,389 --> 00:34:44,889
So the Web Component stuff--

826
00:34:44,889 --> 00:34:47,760
excuse me, I need some water--

827
00:34:47,760 --> 00:34:50,190
--that we're talking about is,
you're right, many years out

828
00:34:50,190 --> 00:34:51,139
in the future.

829
00:34:51,139 --> 00:34:54,179
But we can give this to you
today by writing a Web

830
00:34:54,179 --> 00:34:57,350
Component with Dart then we
compile everything down to the

831
00:34:57,350 --> 00:35:00,410
code that actually works in
modern browsers today.

832
00:35:00,410 --> 00:35:02,880
And so, yeah, it's kind of like
working in the future

833
00:35:02,880 --> 00:35:05,780
today with Dart, thanks to our
compiler-to-JavaScript.

834
00:35:05,780 --> 00:35:06,780
So it's really cool.

835
00:35:06,780 --> 00:35:09,110
So if you want to try Web
Components you can actually

836
00:35:09,110 --> 00:35:10,860
try them today.

837
00:35:10,860 --> 00:35:11,270
ADDY OSMANI: Excellent.

838
00:35:11,270 --> 00:35:11,770
OK.

839
00:35:11,770 --> 00:35:14,170
I think that's our
last question.

840
00:35:14,170 --> 00:35:17,600
For anybody and any JavaScript
developer, web app developer

841
00:35:17,600 --> 00:35:20,770
that's watching that wants to
get started with Dart and try

842
00:35:20,770 --> 00:35:24,460
it out what's the best place for
them check out and what's

843
00:35:24,460 --> 00:35:27,860
the best demo application
for them to look at?

844
00:35:27,860 --> 00:35:28,400
SETH LADD: Great question.

845
00:35:28,400 --> 00:35:29,920
Go to dartlang.org.

846
00:35:29,920 --> 00:35:32,590
Everything's on there, our docs,
our language tours, our

847
00:35:32,590 --> 00:35:33,780
library tours.

848
00:35:33,780 --> 00:35:37,990
But then the download of the
Editor, that's the best way to

849
00:35:37,990 --> 00:35:38,660
get started.

850
00:35:38,660 --> 00:35:40,050
It has the SDK.

851
00:35:40,050 --> 00:35:43,670
It has the Dartium.

852
00:35:43,670 --> 00:35:45,500
Thank you so much, sir.

853
00:35:45,500 --> 00:35:48,190
Sorry.

854
00:35:48,190 --> 00:35:49,300
Ah, here we go.

855
00:35:49,300 --> 00:35:52,220
Now I can go for another hour.

856
00:35:52,220 --> 00:35:53,910
But the Editor's the best
way to get started.

857
00:35:53,910 --> 00:35:56,460
And when you fire up the Editor
you get a really nice

858
00:35:56,460 --> 00:36:00,130
welcome screen that has all of
our demos and sample code

859
00:36:00,130 --> 00:36:00,570
right there.

860
00:36:00,570 --> 00:36:03,300
And so you could fire off
any of those, it makes

861
00:36:03,300 --> 00:36:04,560
a copy of the code.

862
00:36:04,560 --> 00:36:07,000
And you can change
the code and play

863
00:36:07,000 --> 00:36:09,030
with it and play around.

864
00:36:09,030 --> 00:36:10,295
So it's really, really easy.

865
00:36:10,295 --> 00:36:10,620
ADDY OSMANI: Excellent.

866
00:36:10,620 --> 00:36:14,470
I believe I've also seen some
todoMVC Dart samples floating

867
00:36:14,470 --> 00:36:15,200
around the web.

868
00:36:15,200 --> 00:36:16,290
So people might be able
to find that.

869
00:36:16,290 --> 00:36:17,260
SETH LADD: Yes, that's
a good point.

870
00:36:17,260 --> 00:36:20,680
So our GitHub repository
has other samples.

871
00:36:20,680 --> 00:36:22,700
It has our JavaScript
interop code.

872
00:36:22,700 --> 00:36:25,220
It has our Web Components work,
which is fantastic.

873
00:36:25,220 --> 00:36:28,770
And then there's a version of
todoMVC built with, I believe,

874
00:36:28,770 --> 00:36:32,610
Web Components all hosted
open source at GitHub.

875
00:36:32,610 --> 00:36:34,960
And so I want to remind
everybody that Dart is an open

876
00:36:34,960 --> 00:36:35,590
source project.

877
00:36:35,590 --> 00:36:37,050
We have external committers.

878
00:36:37,050 --> 00:36:39,120
We take a lot of third
party patches.

879
00:36:39,120 --> 00:36:41,240
And you could track all this
stuff, the issue tracker, the

880
00:36:41,240 --> 00:36:42,240
mailing list, et cetera.

881
00:36:42,240 --> 00:36:46,330
So it's really, really cool to
watch this stuff being built

882
00:36:46,330 --> 00:36:48,300
up right in front of our eyes.

883
00:36:48,300 --> 00:36:49,090
ADDY OSMANI: Excellent.

884
00:36:49,090 --> 00:36:51,770
I remember checking out that Web
Components demo built with

885
00:36:51,770 --> 00:36:53,470
Dart and I thought it was
really, really hot.

886
00:36:53,470 --> 00:36:54,240
So, yeah.

887
00:36:54,240 --> 00:36:56,380
Everyone please do feel
free to check it out.

888
00:36:56,380 --> 00:36:58,030
Check out the Dart website.

889
00:36:58,030 --> 00:36:59,710
Let us know what you think.

890
00:36:59,710 --> 00:37:02,090
And that's it for
this session.

891
00:37:02,090 --> 00:37:05,250
Thank you very much to Seth Ladd
for coming and talking to

892
00:37:05,250 --> 00:37:06,420
us about Dart.

893
00:37:06,420 --> 00:37:09,030
It was a real eye opener getting
to find out some more

894
00:37:09,030 --> 00:37:11,310
information about who it's
targeting and what it can

895
00:37:11,310 --> 00:37:13,550
actually give you
out of the box.

896
00:37:13,550 --> 00:37:14,440
SETH LADD: Thank you
so much, Addy.

897
00:37:14,440 --> 00:37:15,430
I really appreciate it.

898
00:37:15,430 --> 00:37:17,500
ADDY OSMANI: Not at all.

899
00:37:17,500 --> 00:37:19,890
And that's it for
this session.

900
00:37:19,890 --> 00:37:23,610
Feel free to check in with us
on Thursday where Paul Irish

901
00:37:23,610 --> 00:37:27,100
and I will be introducing a
brand new show called "The

902
00:37:27,100 --> 00:37:30,370
Breakpoint" which we'll be
talking about tooling in.

903
00:37:30,370 --> 00:37:31,430
So that's it.

904
00:37:31,430 --> 00:37:32,680
Thank you very much.

905
00:37:32,680 --> 00:37:43,967

