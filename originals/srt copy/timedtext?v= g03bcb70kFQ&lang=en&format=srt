1
00:00:00,934 --> 00:00:02,834
Aaron Goodman:
This talk is about

2
00:00:02,834 --> 00:00:09,033
the upcoming extension
system for Google Chrome.

3
00:00:09,033 --> 00:00:10,634
My name's Aaron Goodman.

4
00:00:10,634 --> 00:00:13,234
To give you a little bit
of background about myself,

5
00:00:13,234 --> 00:00:17,834
so you kind of know
who you're talking to...

6
00:00:17,834 --> 00:00:20,534
before I started working
at Google,

7
00:00:20,534 --> 00:00:24,334
I created the Greasemonkey
Firefox extension,

8
00:00:24,334 --> 00:00:26,667
which was about five years
ago now.

9
00:00:26,667 --> 00:00:30,467
And it was originally
intended to be a quick hack

10
00:00:30,467 --> 00:00:33,400
that only a few
of my friends would appreciate,

11
00:00:33,400 --> 00:00:35,667
the JavaScript hackers
that I knew.

12
00:00:35,667 --> 00:00:37,934
And I didn't really expect it
to be popular,

13
00:00:37,934 --> 00:00:39,934
but it became
extremely popular,

14
00:00:39,934 --> 00:00:42,567
much to my surprise.

15
00:00:42,567 --> 00:00:45,534
And that's kind of what
eventually to led me

16
00:00:45,534 --> 00:00:49,067
being interested in working on
extensions for Chrome.

17
00:00:49,067 --> 00:00:53,601
In between then and now,
I've been working on Gears

18
00:00:53,601 --> 00:00:58,501
which is another project
at Google, and Chrome.

19
00:00:58,501 --> 00:01:00,868
[clears throat]

20
00:01:00,868 --> 00:01:03,067
So before I dive in
and get started,

21
00:01:03,067 --> 00:01:06,200
I wanna make
a few quick caveats.

22
00:01:06,200 --> 00:01:09,200
What you're about to see here
is alpha code,

23
00:01:09,200 --> 00:01:10,901
pre-alpha code, even.

24
00:01:10,901 --> 00:01:14,400
This is a early
developer preview.

25
00:01:14,400 --> 00:01:16,601
We're not making any extensions
available

26
00:01:16,601 --> 00:01:18,601
to the general public today.

27
00:01:18,601 --> 00:01:22,334
Ever since...
since Chrome is open source,

28
00:01:22,334 --> 00:01:23,801
we do everything
in the open.

29
00:01:23,801 --> 00:01:25,501
We've done all our designing
in the open,

30
00:01:25,501 --> 00:01:27,467
and it's the same
with extensions.

31
00:01:27,467 --> 00:01:28,968
Since we started the project,

32
00:01:28,968 --> 00:01:32,133
we did all of our design
documents completely in the open

33
00:01:32,133 --> 00:01:33,801
and so it hasn't been
a secret

34
00:01:33,801 --> 00:01:36,200
that we're working on
extensions for Chrome.

35
00:01:36,200 --> 00:01:38,000
And since it's not a secret,

36
00:01:38,000 --> 00:01:40,601
we figured that since
this is a developer conference,

37
00:01:40,601 --> 00:01:43,400
it would be cool to come here
and give an update

38
00:01:43,400 --> 00:01:46,200
about where we're at with
the statuses of the project

39
00:01:46,200 --> 00:01:48,801
and sort of what
the focus of it is,

40
00:01:48,801 --> 00:01:52,200
how it works,
and what's cool about it.

41
00:01:52,200 --> 00:01:54,200
So the specific agenda today

42
00:01:54,200 --> 00:01:56,834
is that we're gonna build
an extension together.

43
00:01:56,834 --> 00:02:00,000
We're gonna start from scratch
from an empty page,

44
00:02:00,000 --> 00:02:01,567
build a simple extension

45
00:02:01,567 --> 00:02:03,501
up to something
that's moderately functional,

46
00:02:03,501 --> 00:02:05,701
and along the way,
I'm gonna show you

47
00:02:05,701 --> 00:02:07,901
three of what I think
are the coolest things

48
00:02:07,901 --> 00:02:10,634
about the design
of the Chrome Extension system.

49
00:02:13,834 --> 00:02:17,701
But first I want to step back
and give some context

50
00:02:17,701 --> 00:02:20,067
about why we're even doing
an extension system for Chrome.

51
00:02:20,067 --> 00:02:22,300
'Cause I think that kind of
will set the stage

52
00:02:22,300 --> 00:02:23,767
for some of the decisions
that we made

53
00:02:23,767 --> 00:02:27,000
about how it's implemented.

54
00:02:27,000 --> 00:02:28,634
There's some pretty good
reasons why

55
00:02:28,634 --> 00:02:30,100
you would not want to do

56
00:02:30,100 --> 00:02:32,267
an extension system
for a browser.

57
00:02:32,267 --> 00:02:35,601
And...if there's
any security people around,

58
00:02:35,601 --> 00:02:37,467
I'm sure you can think
of some of them.

59
00:02:37,467 --> 00:02:40,434
But there's quite a few.

60
00:02:40,434 --> 00:02:43,300
First of all,
it can be a security problem.

61
00:02:43,300 --> 00:02:45,467
The browser has become

62
00:02:45,467 --> 00:02:47,834
the most important
piece of software on computers,

63
00:02:47,834 --> 00:02:50,667
and it's the interface
through which you access

64
00:02:50,667 --> 00:02:53,067
all of your private
and sensitive data on the web.

65
00:02:53,067 --> 00:02:54,734
And so naturally
adding third-party code

66
00:02:54,734 --> 00:02:56,234
into that software

67
00:02:56,234 --> 00:02:59,667
is something that should be
thought about carefully.

68
00:02:59,667 --> 00:03:02,734
There's also...there can be
robustness issues.

69
00:03:02,734 --> 00:03:06,133
Application developers
are typically nervous

70
00:03:06,133 --> 00:03:07,934
about adding plugins,
extensions, whatever,

71
00:03:07,934 --> 00:03:09,701
to their system

72
00:03:09,701 --> 00:03:12,501
because if there's a problem
with a plugin or an extension,

73
00:03:12,501 --> 00:03:14,734
users don't typically
understand

74
00:03:14,734 --> 00:03:16,534
that the problem
is with the extension.

75
00:03:16,534 --> 00:03:18,734
They just think that
the application is busted,

76
00:03:18,734 --> 00:03:21,734
and they're just mad at
the application in general.

77
00:03:21,734 --> 00:03:24,334
So that can cause--
application vendors

78
00:03:24,334 --> 00:03:27,334
are typically reluctant
to add plugins because

79
00:03:27,334 --> 00:03:32,901
they end up getting blamed
for problems with the plugins.

80
00:03:32,901 --> 00:03:36,501
Another reason why not
to do an extension system

81
00:03:36,501 --> 00:03:38,701
is maintenance.

82
00:03:38,701 --> 00:03:42,133
Every time you add
an extension API to a product,

83
00:03:42,133 --> 00:03:45,100
you create a maintenance problem
for yourself.

84
00:03:45,100 --> 00:03:47,534
Because you can never take back
and extension API.

85
00:03:47,534 --> 00:03:49,601
Once you create one
and people start using it,

86
00:03:49,601 --> 00:03:51,868
you're married to it
and it exists forever,

87
00:03:51,868 --> 00:03:53,734
and you have to support it
forever.

88
00:03:53,734 --> 00:03:55,534
And this can become
a big problem.

89
00:03:55,534 --> 00:03:57,367
It can make it
so it's very difficult

90
00:03:57,367 --> 00:04:00,400
to upgrade your product
and add new features to it

91
00:04:00,400 --> 00:04:02,200
or change features

92
00:04:02,200 --> 00:04:04,501
because there's features that
are attached to extension APIs,

93
00:04:04,501 --> 00:04:06,300
and you can't modify
the extension APIs

94
00:04:06,300 --> 00:04:07,801
because it would break
all the extensions,

95
00:04:07,801 --> 00:04:09,601
and you don't wanna do that.

96
00:04:09,601 --> 00:04:11,100
So these are all reasons

97
00:04:11,100 --> 00:04:13,367
why you would not want to do
an extension system.

98
00:04:13,367 --> 00:04:16,934
But we are doing one.
So why is that?

99
00:04:16,934 --> 00:04:22,100
Well, the obvious reason
is that you made us.

100
00:04:22,100 --> 00:04:24,033
The very first day
we launched Chrome,

101
00:04:24,033 --> 00:04:25,701
it was September 2.

102
00:04:25,701 --> 00:04:27,701
The 18th bug that was reported

103
00:04:27,701 --> 00:04:30,167
was that Chrome does not
have an extension system.

104
00:04:30,167 --> 00:04:31,534
[chuckling]

105
00:04:31,534 --> 00:04:33,634
And...[laughs]

106
00:04:33,634 --> 00:04:35,667
There were a lot of bugs
created that day.

107
00:04:35,667 --> 00:04:37,033
So this was created,
you know,

108
00:04:37,033 --> 00:04:38,968
minutes
after we launched Chrome.

109
00:04:38,968 --> 00:04:41,067
[laughs]

110
00:04:41,067 --> 00:04:43,567
And within days,
800 people starred it

111
00:04:43,567 --> 00:04:45,567
and added such helpful
comments as,

112
00:04:45,567 --> 00:04:47,200
"Repose for me...

113
00:04:47,200 --> 00:04:48,534
There's no extension
system on my computer."

114
00:04:48,534 --> 00:04:50,534
[laughter]

115
00:04:50,534 --> 00:04:52,834
So thanks for helping us
track that down.

116
00:04:52,834 --> 00:04:55,000
[laughs]

117
00:04:55,000 --> 00:04:56,834
And we eventually
had to close the bug

118
00:04:56,834 --> 00:04:58,534
because it became
totally useless

119
00:04:58,534 --> 00:05:01,567
because there were
800 comments on it.

120
00:05:01,567 --> 00:05:05,400
So that's the obvious reason
is that...

121
00:05:05,400 --> 00:05:07,400
especially because
of the great work

122
00:05:07,400 --> 00:05:09,434
that Mozilla has done
with Firefox,

123
00:05:09,434 --> 00:05:13,701
they've really shown
how important and crucial

124
00:05:13,701 --> 00:05:16,868
a vibrant add-on
eco system is for a browser

125
00:05:16,868 --> 00:05:21,267
and since Firefox,
users just have come to expect

126
00:05:21,267 --> 00:05:24,067
that browsers have powerful
extension systems.

127
00:05:24,067 --> 00:05:27,434
So that's the obvious reason
why we're doing one.

128
00:05:27,434 --> 00:05:29,634
But there are
some other good reasons.

129
00:05:29,634 --> 00:05:32,701
And there are reasons
that sort of counterweight

130
00:05:32,701 --> 00:05:35,901
all the reasons
not to do one.

131
00:05:35,901 --> 00:05:37,801
And there are reasons
that the Chrome team,

132
00:05:37,801 --> 00:05:40,801
the Google Chrome team
is especially interested in.

133
00:05:40,801 --> 00:05:42,467
First of all,
an extension system

134
00:05:42,467 --> 00:05:44,300
helps keep Google Chrome
minimal.

135
00:05:44,300 --> 00:05:46,334
One of the cool features
of Chrome

136
00:05:46,334 --> 00:05:48,000
that we really like
and that we're proud of

137
00:05:48,000 --> 00:05:51,434
is that Chrome has this really
minimal slick interface,

138
00:05:51,434 --> 00:05:53,200
and we think that
this is a reason

139
00:05:53,200 --> 00:05:54,734
that people like
using Chrome,

140
00:05:54,734 --> 00:05:56,667
and we want
to keep it that way.

141
00:05:56,667 --> 00:05:59,501
But the problem is that
in order to keep it that way,

142
00:05:59,501 --> 00:06:01,033
we have to have a very high
bar for features

143
00:06:01,033 --> 00:06:02,734
that we'll add to Chrome.

144
00:06:02,734 --> 00:06:04,501
And we have a rule of thumb
on the project

145
00:06:04,501 --> 00:06:06,501
that we won't add a feature
to the main interface of Chrome

146
00:06:06,501 --> 00:06:07,901
unless we think that
it will be used

147
00:06:07,901 --> 00:06:10,501
by a vast majority
of users of Chrome.

148
00:06:10,501 --> 00:06:13,567
Not a simple majority.
Not a significant majority.

149
00:06:13,567 --> 00:06:15,467
Almost all users.

150
00:06:15,467 --> 00:06:17,167
And that creates
a huge problem,

151
00:06:17,167 --> 00:06:18,534
because there's
tons of features

152
00:06:18,534 --> 00:06:20,167
that a lot of users
would want--

153
00:06:20,167 --> 00:06:21,767
a majority of users would want--

154
00:06:21,767 --> 00:06:23,334
but we won't add them
to Chrome

155
00:06:23,334 --> 00:06:24,901
because we're trying
to keep it minimal.

156
00:06:24,901 --> 00:06:26,501
Extensions
help with this problem

157
00:06:26,501 --> 00:06:29,200
because ideally,
with a good extension system,

158
00:06:29,200 --> 00:06:32,234
we can create a customized
browser for every user.

159
00:06:32,234 --> 00:06:34,434
Every user can have
the features that they need

160
00:06:34,434 --> 00:06:36,267
and none of the features
they don't want.

161
00:06:36,267 --> 00:06:38,601
As an example of this,
a simple example,

162
00:06:38,601 --> 00:06:41,934
imagine a feature
that integrates with Skype.

163
00:06:41,934 --> 00:06:44,701
People who use Skype
would probably really like

164
00:06:44,701 --> 00:06:47,501
the ability to have phone
numbers on web pages highlighted

165
00:06:47,501 --> 00:06:49,734
so they could click on them
and it would dial in Skype.

166
00:06:49,734 --> 00:06:51,100
It's a great feature.

167
00:06:51,100 --> 00:06:52,734
People who use Skype
would love this.

168
00:06:52,734 --> 00:06:54,067
But people who don't use Skype

169
00:06:54,067 --> 00:06:55,901
would think this feature's
totally useless,

170
00:06:55,901 --> 00:06:57,934
and it would just be
noise to them.

171
00:06:57,934 --> 00:07:00,300
So this is just one example

172
00:07:00,300 --> 00:07:02,601
of all kinds of features
that come up like this

173
00:07:02,601 --> 00:07:04,968
that some users want,
some users don't,

174
00:07:04,968 --> 00:07:09,434
and extension systems
really help solve this problem.

175
00:07:09,434 --> 00:07:12,000
Another reason
that the Google Chrome team

176
00:07:12,000 --> 00:07:13,567
wants to do extensions

177
00:07:13,567 --> 00:07:15,534
is because it helps us prototype
new feature ideas.

178
00:07:15,534 --> 00:07:18,367
I mentioned that
we won't add something to Chrome

179
00:07:18,367 --> 00:07:20,801
unless it's gonna be used
by most users.

180
00:07:20,801 --> 00:07:22,701
But how do we know
that a feature will be used

181
00:07:22,701 --> 00:07:24,167
by most users?

182
00:07:24,167 --> 00:07:25,467
Sometimes it's not clear.

183
00:07:25,467 --> 00:07:26,968
There can be arguments
within the team

184
00:07:26,968 --> 00:07:28,567
about whether a feature's
important or not.

185
00:07:28,567 --> 00:07:32,601
And if we just add it
to the product and ship it,

186
00:07:32,601 --> 00:07:34,367
it will be hard for us
to take it away,

187
00:07:34,367 --> 00:07:35,968
because people get used to it

188
00:07:35,968 --> 00:07:37,400
and they don't want us
to remove it.

189
00:07:37,400 --> 00:07:39,000
So even if it's not
successful,

190
00:07:39,000 --> 00:07:40,634
it would be hard for us
to remove it later.

191
00:07:40,634 --> 00:07:42,400
Extension system
helps with this because

192
00:07:42,400 --> 00:07:44,567
we can implement a feature
as an extension,

193
00:07:44,567 --> 00:07:46,601
put it out there,
let people install it,

194
00:07:46,601 --> 00:07:48,601
and if it becomes
wildly successful,

195
00:07:48,601 --> 00:07:50,000
then we know
that it was a good idea

196
00:07:50,000 --> 00:07:51,601
and we add it
to the main Chrome UI.

197
00:07:51,601 --> 00:07:56,200
Otherwise,
it just stays an extension.

198
00:07:58,534 --> 00:08:01,968
So with that context...

199
00:08:01,968 --> 00:08:04,834
I'm gonna dive in and start
building up a sample extension.

200
00:08:04,834 --> 00:08:06,434
What you're gonna see here

201
00:08:06,434 --> 00:08:09,501
requires what's called the
Dev Channel release of Chrome.

202
00:08:09,501 --> 00:08:12,667
If you're not familiar,
Chrome has three releases.

203
00:08:12,667 --> 00:08:15,133
Three channels
is what we call them.

204
00:08:15,133 --> 00:08:19,767
And these channels
are available all the time,

205
00:08:19,767 --> 00:08:21,968
so there's always three
different releases of Chrome

206
00:08:21,968 --> 00:08:24,133
available at any given
point in time.

207
00:08:24,133 --> 00:08:25,634
There's the stable channel,

208
00:08:25,634 --> 00:08:26,968
which is what almost
everyone has.

209
00:08:26,968 --> 00:08:30,000
If you go to Google.com/Chrome
and you install Chrome,

210
00:08:30,000 --> 00:08:31,934
this is what you get,
the stable channel.

211
00:08:31,934 --> 00:08:33,801
There's also a beta channel

212
00:08:33,801 --> 00:08:36,534
which is released
much more frequently.

213
00:08:36,534 --> 00:08:40,033
It's released
about once a month, and...

214
00:08:40,033 --> 00:08:42,167
the beta channel
has all the features

215
00:08:42,167 --> 00:08:43,767
that are expected to become

216
00:08:43,767 --> 00:08:46,701
the next stable release
of Chrome.

217
00:08:46,701 --> 00:08:49,868
And since it's not yet stable,
it has a few more bugs,

218
00:08:49,868 --> 00:08:51,567
it may crash
more frequently,

219
00:08:51,567 --> 00:08:54,167
it may be a little bit slower--
things like that.

220
00:08:54,167 --> 00:08:56,334
And then finally,
there's the Dev Channel,

221
00:08:56,334 --> 00:08:58,367
and the Dev Channel
is like the Wild West.

222
00:08:58,367 --> 00:09:00,267
The Dev Channel
is released every week, and...

223
00:09:00,267 --> 00:09:02,601
unless there's some
major problem,

224
00:09:02,601 --> 00:09:04,834
and it has minimal testing,

225
00:09:04,834 --> 00:09:08,234
and it has all the features
that we're experimenting with.

226
00:09:08,234 --> 00:09:09,667
So some of these features

227
00:09:09,667 --> 00:09:11,434
may not ever make it
to the stable release.

228
00:09:11,434 --> 00:09:13,133
We may decide
that we don't like them

229
00:09:13,133 --> 00:09:15,467
or we may change them,
and it's a lot less stable.

230
00:09:15,467 --> 00:09:17,501
But the upside
is that the Dev Channel

231
00:09:17,501 --> 00:09:19,467
has all the newest work,

232
00:09:19,467 --> 00:09:22,334
and since extensions is on-going
and we're giving this talk

233
00:09:22,334 --> 00:09:25,334
in the middle of the development
of the extensions project,

234
00:09:25,334 --> 00:09:29,067
the Dev Channel's
what you need to use this stuff.

235
00:09:29,067 --> 00:09:32,067
You also need to add
a custom flag

236
00:09:32,067 --> 00:09:35,767
to your chrome.xe shortcut,

237
00:09:35,767 --> 00:09:39,601
and all of this is described
on a how-to document

238
00:09:39,601 --> 00:09:41,934
that we've put up
that you can read

239
00:09:41,934 --> 00:09:43,868
that will help you get started
writing an extension.

240
00:09:43,868 --> 00:09:46,267
So if you do a Google search
for Chrome Extensions HOWTO,

241
00:09:46,267 --> 00:09:48,767
click on the first result,
it'll take you to a page

242
00:09:48,767 --> 00:09:51,400
that details how to get started
writing your first extension.

243
00:09:51,400 --> 00:09:54,868
And it covers
these prerequisites.

244
00:10:03,100 --> 00:10:06,534
So we can finally get started
writing our extension.

245
00:10:06,534 --> 00:10:08,901
I said that we're gonna cover
three of the coolest things

246
00:10:08,901 --> 00:10:10,968
about the extension system,
and the first one,

247
00:10:10,968 --> 00:10:12,300
the most important one,

248
00:10:12,300 --> 00:10:14,167
and the one that we're most
excited about

249
00:10:14,167 --> 00:10:15,767
and is sort of the linchpin

250
00:10:15,767 --> 00:10:17,467
that the whole system
revolves around,

251
00:10:17,467 --> 00:10:19,634
is that in Chrome
extensions are web pages.

252
00:10:19,634 --> 00:10:22,167
What I mean by that
extensions in Chrome

253
00:10:22,167 --> 00:10:24,267
are written using
the exact same technologies

254
00:10:24,267 --> 00:10:26,234
that you use to write
web pages--

255
00:10:26,234 --> 00:10:27,901
HTML, CSS, and JavaScript.

256
00:10:27,901 --> 00:10:30,334
It's not inspired
by these technologies,

257
00:10:30,334 --> 00:10:32,901
but extensions actually are
web pages.

258
00:10:32,901 --> 00:10:34,334
So all the skills,

259
00:10:34,334 --> 00:10:36,133
all the tools that you use
to write web pages

260
00:10:36,133 --> 00:10:37,801
and that you're familiar with

261
00:10:37,801 --> 00:10:40,100
are immediately applicable
to writing extensions in Chrome,

262
00:10:40,100 --> 00:10:42,267
and you don't need
to relearn anything.

263
00:10:43,901 --> 00:10:48,100
What does that mean, to have
an extension be a web page?

264
00:10:48,100 --> 00:10:51,634
Well, let's take a look.

265
00:10:51,634 --> 00:10:54,467
In Chrome,
extensions are basically

266
00:10:54,467 --> 00:10:59,334
a package, a zip file,
of HTMLs, CSS, and JavaScript.

267
00:10:59,334 --> 00:11:01,934
And there can be as many
of these files as you want.

268
00:11:01,934 --> 00:11:03,767
And then there's one file
called a manifest

269
00:11:03,767 --> 00:11:05,300
that ties the whole thing
together

270
00:11:05,300 --> 00:11:07,467
and declares information
about the extension

271
00:11:07,467 --> 00:11:09,400
such as its name,
its description, its version,

272
00:11:09,400 --> 00:11:11,534
and the features
that it's using.

273
00:11:11,534 --> 00:11:14,868
So in this right window here,

274
00:11:14,868 --> 00:11:16,801
I have started
a basic extension.

275
00:11:16,801 --> 00:11:18,767
And right now the extension
is totally empty.

276
00:11:18,767 --> 00:11:21,267
It has nothing in it
except for my manifest file.

277
00:11:21,267 --> 00:11:23,400
I open this up in my editor,

278
00:11:23,400 --> 00:11:27,067
and...I'll make the screen font
a little bigger.

279
00:11:33,434 --> 00:11:36,234
And you can see that
this manifest is JSON.

280
00:11:36,234 --> 00:11:37,868
It's a format
that most web developers

281
00:11:37,868 --> 00:11:39,534
should be familiar with.

282
00:11:39,534 --> 00:11:40,868
And right now,
it has two keys,

283
00:11:40,868 --> 00:11:42,734
which is the bare minimum
required for an extension

284
00:11:42,734 --> 00:11:44,968
that just declares
this name and this version.

285
00:11:44,968 --> 00:11:46,300
And what I'm gonna do now

286
00:11:46,300 --> 00:11:48,701
is I'm gonna add my first
feature to my extension.

287
00:11:48,701 --> 00:11:50,300
And one of the features
that we support

288
00:11:50,300 --> 00:11:54,133
is called toolstrips,
so I'm gonna add one toolstrip.

289
00:11:54,133 --> 00:11:56,467
And...it's an HTML file.

290
00:11:56,467 --> 00:11:59,367
And I'll call it
my_toolstrip.html.

291
00:11:59,367 --> 00:12:02,934
So I save my manifest.

292
00:12:02,934 --> 00:12:06,300
I'll create a new HTML file...

293
00:12:09,067 --> 00:12:13,701
And I'll save that
as my_toolstrip.html.

294
00:12:17,100 --> 00:12:19,400
And now to do these demos,

295
00:12:19,400 --> 00:12:21,501
I'm gonna use a separate
instance of Chrome

296
00:12:21,501 --> 00:12:24,167
just so that I don't lose
my place in the presentation.

297
00:12:24,167 --> 00:12:26,434
Again, this works with the
development version of Chrome,

298
00:12:26,434 --> 00:12:28,534
so you don't need
a special build of it.

299
00:12:28,534 --> 00:12:35,033
So I start my Chrome.

300
00:12:35,033 --> 00:12:37,801
And you can see
that there's now a toolbar

301
00:12:37,801 --> 00:12:39,834
along the bottom part
of Chrome,

302
00:12:39,834 --> 00:12:42,100
and my extension,
my toolstrip

303
00:12:42,100 --> 00:12:43,634
shows up there.

304
00:12:43,634 --> 00:12:44,834
And it's not
too exciting yet,

305
00:12:44,834 --> 00:12:46,300
doesn't do anything.

306
00:12:46,300 --> 00:12:48,033
It just has some text.

307
00:12:48,033 --> 00:12:50,334
But I can prove that this
really is an extension

308
00:12:50,334 --> 00:12:51,868
by right-clicking on it.

309
00:12:51,868 --> 00:12:53,467
It brings up
Chrome's Inspector,

310
00:12:53,467 --> 00:12:56,267
which is exactly the same
inspector that you use

311
00:12:56,267 --> 00:12:58,400
to de-bug web pages.

312
00:12:58,400 --> 00:13:00,701
It works exactly the same way.
You can expand the elements.

313
00:13:00,701 --> 00:13:02,934
Oops. Aah.

314
00:13:02,934 --> 00:13:06,534
Let me try that again.
[laughs]

315
00:13:06,534 --> 00:13:08,300
And when you hover
over the elements,

316
00:13:08,300 --> 00:13:09,701
it highlights them

317
00:13:09,701 --> 00:13:11,901
just like the regular
web inspector does.

318
00:13:11,901 --> 00:13:14,701
And this highlights
a great reason why

319
00:13:14,701 --> 00:13:16,834
we want to use web pages
for extensions,

320
00:13:16,834 --> 00:13:19,067
because we didn't have to
write any new tools,

321
00:13:19,067 --> 00:13:21,167
and you don't have to learn
any new tools.

322
00:13:21,167 --> 00:13:22,901
Everything works exactly
the same way

323
00:13:22,901 --> 00:13:24,534
as it does when you're
writing web pages.

324
00:13:24,534 --> 00:13:26,567
So if you already know
how to use Chrome's Inspector,

325
00:13:26,567 --> 00:13:29,234
you know how to use it
for extensions too.

326
00:13:30,734 --> 00:13:34,467
Now, since this is HTML,
I can use any HTML features.

327
00:13:34,467 --> 00:13:36,100
It can actually do more

328
00:13:36,100 --> 00:13:38,133
than just print out
snarky comments.

329
00:13:38,133 --> 00:13:41,300
So I can add an icon,

330
00:13:41,300 --> 00:13:46,634
and it works exactly
the same way as HTML.

331
00:13:46,634 --> 00:13:51,100
I have an icon here
I'm gonna copy out of my...

332
00:13:51,100 --> 00:13:56,734
folder of samples
and into my extension.

333
00:13:56,734 --> 00:13:58,901
And also,
because it is a web page,

334
00:13:58,901 --> 00:14:01,934
the development cycle
is just like a web page.

335
00:14:01,934 --> 00:14:04,234
You can just reload it,
and you see the new content.

336
00:14:04,234 --> 00:14:05,968
Of course, the reload button
doesn't work

337
00:14:05,968 --> 00:14:07,634
because the reload button
is for the tab.

338
00:14:07,634 --> 00:14:09,868
But you can reload an extension
in multiple ways.

339
00:14:09,868 --> 00:14:11,734
One way is to just create
a new window,

340
00:14:11,734 --> 00:14:13,167
so I create a new window,

341
00:14:13,167 --> 00:14:15,400
and you can see
my icon showed up.

342
00:14:15,400 --> 00:14:19,200
Another way that I like to do
is I just use the console

343
00:14:19,200 --> 00:14:22,300
and use the JavaScript API
to do a reload.

344
00:14:22,300 --> 00:14:24,133
So I type location of reload

345
00:14:24,133 --> 00:14:27,934
and you can see
my toolstrip reloaded.

346
00:14:34,434 --> 00:14:38,367
So Chrome Extensions
are HTML, CSS, and JavaScript.

347
00:14:38,367 --> 00:14:41,968
To recap,
extensions are packages,

348
00:14:41,968 --> 00:14:44,767
zip files basically,
that contain these files.

349
00:14:44,767 --> 00:14:47,200
Each piece of UI
in your extension,

350
00:14:47,200 --> 00:14:49,968
such as toolstrips
that I just showed,

351
00:14:49,968 --> 00:14:51,968
sidebars, when we have those
in the future,

352
00:14:51,968 --> 00:14:54,968
all of these things are fully
functioning web pages,

353
00:14:54,968 --> 00:14:57,367
and so they work
exactly the same as web pages.

354
00:14:57,367 --> 00:14:59,567
You can use
the same debugging tools,

355
00:14:59,567 --> 00:15:01,634
the same JavaScript libraries,
the same techniques,

356
00:15:01,634 --> 00:15:03,634
all the CSS hacks that
you've learned over the years

357
00:15:03,634 --> 00:15:05,234
work exactly the same way.

358
00:15:05,234 --> 00:15:09,667
And if you prefer to use jQuery,
you can use jQuery.

359
00:15:09,667 --> 00:15:11,434
It will work the same way.

360
00:15:11,434 --> 00:15:13,234
If you like Prototype
or MochiKit,

361
00:15:13,234 --> 00:15:14,634
you can use those.

362
00:15:14,634 --> 00:15:16,634
They all work the same way
as they do on web pages

363
00:15:16,634 --> 00:15:19,634
because extensions
really are web pages.

364
00:15:19,634 --> 00:15:21,234
From the point of view
of the library,

365
00:15:21,234 --> 00:15:23,667
the library does not even know
that it's in an extension.

366
00:15:23,667 --> 00:15:26,033
So it's guaranteed to work.

367
00:15:26,033 --> 00:15:27,634
And just like web pages,

368
00:15:27,634 --> 00:15:29,634
there's an easy iterative
development cycle

369
00:15:29,634 --> 00:15:31,033
for extensions.

370
00:15:31,033 --> 00:15:34,033
All you do is reload
and you see your new content.

371
00:15:34,033 --> 00:15:38,968
There's no need to restart
or recompile anything.

372
00:15:38,968 --> 00:15:41,400
Now, you may have noticed
that when I

373
00:15:41,400 --> 00:15:44,567
put that simple HTML
in my HTML file,

374
00:15:44,567 --> 00:15:46,701
it did not look
like what you would expect

375
00:15:46,701 --> 00:15:48,601
if you loaded that into
a normal web page.

376
00:15:48,601 --> 00:15:50,033
It had a different style.

377
00:15:50,033 --> 00:15:51,667
It had blue text
instead of black.

378
00:15:51,667 --> 00:15:55,434
It was arial or sans-serif font
instead of serif.

379
00:15:55,434 --> 00:15:57,701
It had a blue background,
etcetera.

380
00:15:57,701 --> 00:15:59,901
The reason that
that happened

381
00:15:59,901 --> 00:16:02,234
is because we add default CSS
to the extensions

382
00:16:02,234 --> 00:16:04,834
to make them look good
with the Chrome UI.

383
00:16:04,834 --> 00:16:06,801
And we do that because,
again,

384
00:16:06,801 --> 00:16:09,300
one of the things that
we're most proud of in Chrome

385
00:16:09,300 --> 00:16:10,767
and that we really like

386
00:16:10,767 --> 00:16:12,767
is that it has this sleek,
modern interface

387
00:16:12,767 --> 00:16:14,400
and we didn't want extensions
to ruin that.

388
00:16:14,400 --> 00:16:17,100
We wanted extensions in Chrome

389
00:16:17,100 --> 00:16:19,634
to still have
that same aesthetic.

390
00:16:19,634 --> 00:16:20,834
And at the same time,

391
00:16:20,834 --> 00:16:22,868
we want extensions to be
really easy to write.

392
00:16:22,868 --> 00:16:25,067
And having every developer
have to worry about

393
00:16:25,067 --> 00:16:28,234
writing the right CSS
to fit in with Chrome's UI

394
00:16:28,234 --> 00:16:29,701
seemed really difficult

395
00:16:29,701 --> 00:16:31,534
and also seems like
it would result in

396
00:16:31,534 --> 00:16:33,100
everyone doing it
slightly differently...

397
00:16:33,100 --> 00:16:34,801
which wouldn't look good.

398
00:16:34,801 --> 00:16:39,033
So we inject this default CSS
into your extension

399
00:16:39,033 --> 00:16:41,667
so that by default
you don't have to do anything.

400
00:16:41,667 --> 00:16:43,334
Your extension
will just look good

401
00:16:43,334 --> 00:16:46,834
and fit in with
the Chrome UI.

402
00:16:46,834 --> 00:16:49,868
I can show you another
example of how that works.

403
00:16:49,868 --> 00:16:54,901
We have this...
we have some special CSS classes

404
00:16:54,901 --> 00:16:57,701
that you can use...

405
00:16:57,701 --> 00:16:59,300
to get effects

406
00:16:59,300 --> 00:17:02,968
to make it fit in better
with Chrome's UI.

407
00:17:06,033 --> 00:17:09,434
And one of them
is this toolstrip button class.

408
00:17:09,434 --> 00:17:12,901
So I can create a div
with that class name...

409
00:17:12,901 --> 00:17:15,901
and I'll restart my extension.

410
00:17:15,901 --> 00:17:17,968
And you can see now
that when I hover over this,

411
00:17:17,968 --> 00:17:21,267
is has this nice blue
rounded outline.

412
00:17:21,267 --> 00:17:23,901
The spacing is also
a little bit better.

413
00:17:23,901 --> 00:17:25,501
And actually,
you might notice

414
00:17:25,501 --> 00:17:27,701
that it's exactly
the same look and feel

415
00:17:27,701 --> 00:17:29,400
as the native bookmark buttons.

416
00:17:29,400 --> 00:17:31,067
So it looks exactly the same.

417
00:17:31,067 --> 00:17:33,100
You can't even tell
that it's HTML.

418
00:17:33,100 --> 00:17:35,767
And there's actually
a lot of little details

419
00:17:35,767 --> 00:17:37,367
that go into doing that.

420
00:17:37,367 --> 00:17:39,968
The corners of these are rounded
and anti-aliased.

421
00:17:39,968 --> 00:17:42,767
and there's a faint white
shadow on the blue text.

422
00:17:42,767 --> 00:17:44,367
And it would be hard
to do this.

423
00:17:44,367 --> 00:17:45,767
As an extension developer,

424
00:17:45,767 --> 00:17:47,834
it would take a lot of time
to get it right.

425
00:17:47,834 --> 00:17:49,634
And if we ever changed
the look of Chrome,

426
00:17:49,634 --> 00:17:51,567
your extension wouldn't
look right with the new look,

427
00:17:51,567 --> 00:17:54,400
and so this makes things
really easy.

428
00:17:54,400 --> 00:17:57,501
You just add this class.
You don't have to write any CSS.

429
00:17:57,501 --> 00:18:00,367
And your toolstrip
will fit in naturally.

430
00:18:03,200 --> 00:18:05,033
Another thing
you can do, of course,

431
00:18:05,033 --> 00:18:07,267
is if you...
what we're trying to do here

432
00:18:07,267 --> 00:18:08,734
is to make it easy

433
00:18:08,734 --> 00:18:10,667
to write extensions
that fit in with Chrome's UI

434
00:18:10,667 --> 00:18:12,300
without doing anything extra.

435
00:18:12,300 --> 00:18:13,801
But if you want to go
above and beyond

436
00:18:13,801 --> 00:18:15,367
and you want to do
something crazy,

437
00:18:15,367 --> 00:18:16,868
you can use the full power
of CSS,

438
00:18:16,868 --> 00:18:18,634
so you can do
whatever you want.

439
00:18:18,634 --> 00:18:20,000
If for some reason

440
00:18:20,000 --> 00:18:21,501
you want to have
an ugly, red background

441
00:18:21,501 --> 00:18:23,434
for your extension,
you're free to do that.

442
00:18:23,434 --> 00:18:25,501
We're not gonna
try and stop you.

443
00:18:25,501 --> 00:18:31,234
You can just add
any CSS you want...

444
00:18:31,234 --> 00:18:33,000
and you get a red background.

445
00:18:33,000 --> 00:18:35,234
Very exciting.

446
00:18:35,234 --> 00:18:37,133
I'm gonna remove that,
'cause it's ugly.

447
00:18:37,133 --> 00:18:42,467
But you can also do
more interesting things.

448
00:18:42,467 --> 00:18:45,701
WebKit is the rendering engine
that Chrome uses, of course,

449
00:18:45,701 --> 00:18:49,133
and WebKit has all these
really cool

450
00:18:49,133 --> 00:18:51,801
experimental CSS features.

451
00:18:51,801 --> 00:18:55,567
And some of them are animations,
filters, transformations.

452
00:18:55,567 --> 00:18:57,734
And you can use all of these
in extensions,

453
00:18:57,734 --> 00:18:59,400
and they work
exactly the same way

454
00:18:59,400 --> 00:19:01,567
because, again,
extensions are web pages.

455
00:19:01,567 --> 00:19:04,234
So I can...this is
a little bit of CSS

456
00:19:04,234 --> 00:19:06,167
that does a little animation.

457
00:19:06,167 --> 00:19:08,834
And I can add this
to my extension.

458
00:19:12,334 --> 00:19:15,100
And now when I start it,
if I hover over it,

459
00:19:15,100 --> 00:19:17,934
It does a little dance,
very fun.

460
00:19:17,934 --> 00:19:20,133
Didn't have to write
any JavaScript to do that.

461
00:19:20,133 --> 00:19:22,434
Just comes for free...

462
00:19:22,434 --> 00:19:25,100
by way of WebKit's
CSS features.

463
00:19:25,100 --> 00:19:26,501
So that's fun.

464
00:19:26,501 --> 00:19:28,501
And this is an example of how,
again,

465
00:19:28,501 --> 00:19:31,300
using webpage technology
to write extensions

466
00:19:31,300 --> 00:19:32,701
gives a lot of things
for free.

467
00:19:32,701 --> 00:19:37,934
Anything that works in web pages
will work in extensions.

468
00:19:41,267 --> 00:19:44,334
Oops.
[clears throat]

469
00:19:44,334 --> 00:19:45,968
So another important--

470
00:19:45,968 --> 00:19:47,601
You're gonna get tired
of hearing me saying,

471
00:19:47,601 --> 00:19:49,100
"It's just like a web page,"

472
00:19:49,100 --> 00:19:51,467
but this is something
that we're really excited about.

473
00:19:51,467 --> 00:19:52,968
So sorry about that.

474
00:19:52,968 --> 00:19:55,634
Another thing that web page
developers frequently use

475
00:19:55,634 --> 00:19:57,868
is called XMLHttpRequest.

476
00:19:57,868 --> 00:19:59,834
If you're a web developer
in the room,

477
00:19:59,834 --> 00:20:01,667
you probably know
what this does

478
00:20:01,667 --> 00:20:04,567
but for those who don't,
quick refresher is that

479
00:20:04,567 --> 00:20:08,133
XMLHttpRequest,
commonly called XHR,

480
00:20:08,133 --> 00:20:12,400
is basically the most important
API in web browsers today.

481
00:20:12,400 --> 00:20:15,868
This is the API
that makes it possible

482
00:20:15,868 --> 00:20:18,467
to do applications
like Gmail, Reader, and Maps.

483
00:20:18,467 --> 00:20:21,067
And what it allows you to do
as a web developer

484
00:20:21,067 --> 00:20:23,234
is request more data
from the server

485
00:20:23,234 --> 00:20:25,133
without reloading the page.

486
00:20:25,133 --> 00:20:27,434
So all of your applications
that you use,

487
00:20:27,434 --> 00:20:29,601
like Maps,
when you scroll the map

488
00:20:29,601 --> 00:20:31,868
and you see more tiles come in
dynamically

489
00:20:31,868 --> 00:20:33,067
without updating the page,

490
00:20:33,067 --> 00:20:35,501
this is the API
that makes that possible.

491
00:20:35,501 --> 00:20:36,901
And so it's very important.

492
00:20:36,901 --> 00:20:39,801
And since it's part of
a web page

493
00:20:39,801 --> 00:20:42,067
it of course works
automatically with extensions,

494
00:20:42,067 --> 00:20:43,501
and it works
exactly the same way.

495
00:20:43,501 --> 00:20:46,200
And if you use any wrapper
scripts to use XHR, usually,

496
00:20:46,200 --> 00:20:48,601
those will all work
exactly the same way.

497
00:20:48,601 --> 00:20:51,067
But we did make
one minor addition

498
00:20:51,067 --> 00:20:53,300
to XHR for extensions.

499
00:20:53,300 --> 00:20:55,801
We made it work cross-domain.

500
00:20:55,801 --> 00:20:59,434
So one of the main limitations
of XHR in regular web pages

501
00:20:59,434 --> 00:21:01,734
is that it's limited
to the same domain.

502
00:21:01,734 --> 00:21:03,701
If you serve a page
from google.com,

503
00:21:03,701 --> 00:21:05,901
you can only request resources
with XHR

504
00:21:05,901 --> 00:21:07,701
that are also on google.com.

505
00:21:07,701 --> 00:21:09,734
And this is an important
security limitation.

506
00:21:09,734 --> 00:21:11,167
It's there on purpose.

507
00:21:11,167 --> 00:21:13,734
For web pages, you don't want
any random web page

508
00:21:13,734 --> 00:21:15,834
that you happen
to browse across

509
00:21:15,834 --> 00:21:18,300
to be able to request
resources

510
00:21:18,300 --> 00:21:20,133
from gmail.com on your behalf.

511
00:21:20,133 --> 00:21:21,601
That doesn't make sense.

512
00:21:21,601 --> 00:21:23,701
But for extensions,
since you install extensions--

513
00:21:23,701 --> 00:21:25,901
it's a conscious decision
to install an extension--

514
00:21:25,901 --> 00:21:27,534
it does make sense

515
00:21:27,534 --> 00:21:29,601
for an extensions to be able
to do things like this.

516
00:21:29,601 --> 00:21:32,601
And so we enable this so that
extensions can do cool things,

517
00:21:32,601 --> 00:21:35,200
cool mashups like request data
from different web services

518
00:21:35,200 --> 00:21:39,767
and combine them and show you
interesting results.

519
00:21:39,767 --> 00:21:43,367
The way this works is that...

520
00:21:43,367 --> 00:21:45,000
in an extension,
you have to--

521
00:21:45,000 --> 00:21:47,167
In a Chrome Extension,
you declare in the manifest

522
00:21:47,167 --> 00:21:49,334
the domains
that you want to talk to.

523
00:21:49,334 --> 00:21:51,567
And then cross-origin XHR

524
00:21:51,567 --> 00:21:53,634
works exactly the same way
as regular XHR,

525
00:21:53,634 --> 00:21:57,467
and it makes it possible
to request them.

526
00:21:59,400 --> 00:22:03,968
So I can add this to my
extension that I'm building up.

527
00:22:07,901 --> 00:22:09,834
And I have some...
the rest of the demos

528
00:22:09,834 --> 00:22:13,834
in this...presentation...

529
00:22:13,834 --> 00:22:16,834
some of them I'm gonna use
pre-written code.

530
00:22:16,834 --> 00:22:18,434
The main reason
I'm doing this

531
00:22:18,434 --> 00:22:20,834
is just because the code
is pretty straightforward

532
00:22:20,834 --> 00:22:22,834
and it would be boring
for both of us,

533
00:22:22,834 --> 00:22:24,834
for me to sit here
and write it in front of you.

534
00:22:24,834 --> 00:22:27,434
So when the code is small
and I can write it live,

535
00:22:27,434 --> 00:22:28,634
I'll do that.

536
00:22:28,634 --> 00:22:30,567
But in this case,
there's about 20 lines,

537
00:22:30,567 --> 00:22:32,667
and I didn't want to do that
while you were sitting here.

538
00:22:32,667 --> 00:22:34,033
But there's no fooling here.

539
00:22:34,033 --> 00:22:36,000
I hope you can see that
this is pretty straightforward

540
00:22:36,000 --> 00:22:37,634
AJAX JavaScript code,

541
00:22:37,634 --> 00:22:41,234
and it works exactly
the same way as web pages.

542
00:22:41,234 --> 00:22:44,834
So what this code
is gonna do is...

543
00:22:44,834 --> 00:22:49,834
it's gonna hook my extension
up to the Google Reader API.

544
00:22:49,834 --> 00:22:51,234
And what I'm gonna do is

545
00:22:51,234 --> 00:22:53,834
right now my extension
just has this static text

546
00:22:53,834 --> 00:22:55,367
that says "oh, hai."

547
00:22:55,367 --> 00:22:57,100
But I'm gonna change it

548
00:22:57,100 --> 00:22:59,000
so that it connects
to the Google Reader API

549
00:22:59,000 --> 00:23:00,434
and figures out
how many items

550
00:23:00,434 --> 00:23:02,100
I have unread
in my reading list.

551
00:23:02,100 --> 00:23:04,501
And once it gets the number
of unread items,

552
00:23:04,501 --> 00:23:07,100
it's gonna update
my toolstrip,

553
00:23:07,100 --> 00:23:08,501
the display on my toolstrip,

554
00:23:08,501 --> 00:23:10,100
and show the number
of unread items.

555
00:23:10,100 --> 00:23:11,834
And so I will always know
at all times

556
00:23:11,834 --> 00:23:13,534
how many things
I'm waiting to read

557
00:23:13,534 --> 00:23:15,000
that need to be read
in Google Reader,

558
00:23:15,000 --> 00:23:16,501
which seems very useful.

559
00:23:16,501 --> 00:23:20,501
Um...

560
00:23:20,501 --> 00:23:22,901
one thing I want to call out
about this code, actually,

561
00:23:22,901 --> 00:23:24,300
before I paste it in.

562
00:23:24,300 --> 00:23:26,300
You may notice
that I'm using JSON here,

563
00:23:26,300 --> 00:23:29,100
but there's no JSON library
in this code.

564
00:23:29,100 --> 00:23:31,501
And the reason why
is because the V.18

565
00:23:31,501 --> 00:23:35,701
has recently added
native JSON to V8,

566
00:23:35,701 --> 00:23:39,133
so you no longer need to include
a JSON library in Chrome,

567
00:23:39,133 --> 00:23:40,501
which is very cool.

568
00:23:40,501 --> 00:23:42,901
And it's using a safe parser,

569
00:23:42,901 --> 00:23:47,100
so there's
no eval happening here.

570
00:23:47,100 --> 00:23:48,901
So the first thing
I'm gonna do

571
00:23:48,901 --> 00:23:50,334
is update my manifest

572
00:23:50,334 --> 00:23:54,367
to include the domain
that I want to talk to.

573
00:23:57,601 --> 00:23:59,801
So I tell it that I want
to talk to google.com

574
00:23:59,801 --> 00:24:03,934
because the Reader API
lives on google.com.

575
00:24:03,934 --> 00:24:07,167
And the next thing
I'm gonna do is...

576
00:24:07,167 --> 00:24:12,067
update my code
to call the Reader API.

577
00:24:12,067 --> 00:24:15,100
Oh, also I'll take out
this animation.

578
00:24:15,100 --> 00:24:17,501
Very fun but...

579
00:24:21,767 --> 00:24:24,167
Okay...oh, one last thing.

580
00:24:24,167 --> 00:24:25,934
I need to take out
my static text

581
00:24:25,934 --> 00:24:29,167
and put in a place holder.

582
00:24:31,367 --> 00:24:33,501
So you can see that
when the API call comes back,

583
00:24:33,501 --> 00:24:35,334
it's gonna call setCount,

584
00:24:35,334 --> 00:24:37,567
and setCount
will update the spam

585
00:24:37,567 --> 00:24:39,567
that has the unread-count ID

586
00:24:39,567 --> 00:24:42,334
with the number of items
in my...

587
00:24:42,334 --> 00:24:43,834
in my reading list.

588
00:24:43,834 --> 00:24:45,534
Make sure
that I spelled it right.

589
00:24:45,534 --> 00:24:48,567
Good. So now...

590
00:24:48,567 --> 00:24:50,567
I again restart my extension.

591
00:24:50,567 --> 00:24:53,701
Aha! I have 607 items to read.

592
00:24:53,701 --> 00:24:55,334
So...that's useful.

593
00:24:55,334 --> 00:24:57,767
It would be more useful if
I could actually click on this

594
00:24:57,767 --> 00:24:59,567
and have it do something.

595
00:24:59,567 --> 00:25:01,100
Right now I just have to know
to go to reader.google.

596
00:25:01,100 --> 00:25:02,567
That's not very good.

597
00:25:02,567 --> 00:25:04,834
So I can just fix that
really quick

598
00:25:04,834 --> 00:25:08,367
by just using regular
JavaScript.

599
00:25:17,667 --> 00:25:19,901
So start it up again.
I click on it.

600
00:25:19,901 --> 00:25:22,634
Hooray! Now I can go to Reader
and read the stuff.

601
00:25:22,634 --> 00:25:27,834
[applause]

602
00:25:27,834 --> 00:25:30,033
Now we're getting somewhere.

603
00:25:30,033 --> 00:25:33,234
We have a quicker way
to access time wasting.

604
00:25:33,234 --> 00:25:35,834
So, good.
[laughter]

605
00:25:35,834 --> 00:25:39,234
Um...

606
00:25:39,234 --> 00:25:42,400
So what else can you do?

607
00:25:42,400 --> 00:25:44,601
Well, a frequent thing

608
00:25:44,601 --> 00:25:48,267
that extension developers
want to do is store things.

609
00:25:48,267 --> 00:25:50,000
Imagine that your extension
has settings,

610
00:25:50,000 --> 00:25:51,968
and there's all these
different settings

611
00:25:51,968 --> 00:25:53,300
that you can choose

612
00:25:53,300 --> 00:25:55,334
about what things show up
in the extension.

613
00:25:55,334 --> 00:25:57,334
You would need to store these
in the extension

614
00:25:57,334 --> 00:25:58,667
when a user changes them

615
00:25:58,667 --> 00:26:00,267
so that the next time
your extension starts up,

616
00:26:00,267 --> 00:26:04,267
you can change the UI
in the right way.

617
00:26:04,267 --> 00:26:06,901
Now...one thing
that we could do

618
00:26:06,901 --> 00:26:09,868
in the design
of the extension system

619
00:26:09,868 --> 00:26:11,934
is to add a settings API

620
00:26:11,934 --> 00:26:14,801
that you could use
to store these things.

621
00:26:14,801 --> 00:26:16,200
And that would work.

622
00:26:16,200 --> 00:26:18,267
But what we realized
is that HTML5,

623
00:26:18,267 --> 00:26:21,033
the new version of HTML already
has a local storage API.

624
00:26:21,033 --> 00:26:24,300
It actually has two.
So...

625
00:26:24,300 --> 00:26:26,067
so there's no need
to add a settings API

626
00:26:26,067 --> 00:26:27,667
for Chrome Extensions,

627
00:26:27,667 --> 00:26:30,200
and we can just reuse the one
that's an HTML5.

628
00:26:30,200 --> 00:26:32,300
So this local storage
is not yet

629
00:26:32,300 --> 00:26:34,200
completely implemented
in Chrome.

630
00:26:34,200 --> 00:26:35,567
There's a team working on it.

631
00:26:35,567 --> 00:26:36,901
But when it shows up,

632
00:26:36,901 --> 00:26:39,100
you'll be able to use it
in extensions

633
00:26:39,100 --> 00:26:41,100
exactly the same way
as you use it in web pages.

634
00:26:41,100 --> 00:26:43,300
And so if you already know
how to use this API

635
00:26:43,300 --> 00:26:46,300
from experience with
other browsers that have it,

636
00:26:46,300 --> 00:26:48,100
you won't have to learn
anything new

637
00:26:48,100 --> 00:26:49,400
to use it in extensions.

638
00:26:49,400 --> 00:26:50,701
And if you've never
used it before

639
00:26:50,701 --> 00:26:52,300
and you learn it
for extensions,

640
00:26:52,300 --> 00:26:54,100
then it will just work
automatically with web pages.

641
00:26:54,100 --> 00:26:56,701
You'll be able to reuse
that knowledge in web pages

642
00:26:56,701 --> 00:26:58,701
all the time.

643
00:26:58,701 --> 00:26:59,901
And this is another example

644
00:26:59,901 --> 00:27:02,167
of why it's a cool idea,
I think,

645
00:27:02,167 --> 00:27:05,968
to use web page technology
for the extension system,

646
00:27:05,968 --> 00:27:08,734
because the web
is currently in a period

647
00:27:08,734 --> 00:27:10,300
where it's evolving
very rapidly.

648
00:27:10,300 --> 00:27:12,167
All the browser vendors
are doing great work

649
00:27:12,167 --> 00:27:13,834
and pushing things forward.

650
00:27:13,834 --> 00:27:15,167
And every time one of these
new features

651
00:27:15,167 --> 00:27:16,868
shows up in Chrome
for web pages,

652
00:27:16,868 --> 00:27:18,701
it will just automatically
show up for extensions,

653
00:27:18,701 --> 00:27:21,167
and it makes my job
a lot easier

654
00:27:21,167 --> 00:27:26,467
because there's
less work to do.

655
00:27:26,467 --> 00:27:29,367
Now, there are some APIs,
some features

656
00:27:29,367 --> 00:27:31,767
that we want to enable
extension developers to do

657
00:27:31,767 --> 00:27:35,434
that are not
part of HTML or CSS.

658
00:27:35,434 --> 00:27:37,000
Mostly, these revolve around

659
00:27:37,000 --> 00:27:39,033
things that we want extensions
to be able to control

660
00:27:39,033 --> 00:27:40,467
in the browser.

661
00:27:40,467 --> 00:27:42,467
So we want extensions to be able
to control the history system,

662
00:27:42,467 --> 00:27:45,434
the bookmark system,
the tabs and window system,

663
00:27:45,434 --> 00:27:47,267
to interact
with the omnibox.

664
00:27:47,267 --> 00:27:50,634
And all these features
don't really make sense

665
00:27:50,634 --> 00:27:52,200
to thumb through HTML,

666
00:27:52,200 --> 00:27:54,367
because they have
nothing to do with HTML,

667
00:27:54,367 --> 00:27:56,968
and they would be unlikely
to ever be standardized,

668
00:27:56,968 --> 00:27:58,801
so it doesn't make sense
to do that.

669
00:27:58,801 --> 00:28:01,634
And so we've added
extension browser APIs

670
00:28:01,634 --> 00:28:05,734
that you can access
when you're in an extension.

671
00:28:05,734 --> 00:28:07,734
And our philosophy
with these APIs

672
00:28:07,734 --> 00:28:09,934
is around two main points--

673
00:28:09,934 --> 00:28:11,400
that they should be
narrow and webby.

674
00:28:11,400 --> 00:28:13,467
What I mean by narrow is

675
00:28:13,467 --> 00:28:17,400
when you design an extension
system for a product,

676
00:28:17,400 --> 00:28:19,801
you have to make one
decision early on,

677
00:28:19,801 --> 00:28:21,434
one really important decision
which is

678
00:28:21,434 --> 00:28:23,934
how wide your
API surface area will be.

679
00:28:23,934 --> 00:28:26,133
How much functionality
will you expose?

680
00:28:26,133 --> 00:28:29,367
One approach
is that you just expose

681
00:28:29,367 --> 00:28:32,300
all of the internal functions
that make your product work

682
00:28:32,300 --> 00:28:33,868
directly to extensions.

683
00:28:33,868 --> 00:28:35,701
And that works really great.

684
00:28:35,701 --> 00:28:38,200
It has a lot of upsides
because it means

685
00:28:38,200 --> 00:28:40,501
that your extension system
will be very powerful.

686
00:28:40,501 --> 00:28:42,467
And it will have a lot of APIs.

687
00:28:42,467 --> 00:28:44,834
Because everything that you use
to build the product

688
00:28:44,834 --> 00:28:46,968
is automatically available
to extension developers,

689
00:28:46,968 --> 00:28:48,501
and so extension developers

690
00:28:48,501 --> 00:28:50,400
will be able to do
all those things too.

691
00:28:50,400 --> 00:28:52,534
And...that's good,

692
00:28:52,534 --> 00:28:55,200
But it also has a downside,
and the downside is that

693
00:28:55,200 --> 00:28:57,934
if you ever change the way
your product is implemented,

694
00:28:57,934 --> 00:29:00,067
you change
those internal functions.

695
00:29:00,067 --> 00:29:02,567
You automatically break the
extensions that were using it,

696
00:29:02,567 --> 00:29:04,601
and that's bad.

697
00:29:04,601 --> 00:29:07,667
And so in Chrome,
what we decided to do

698
00:29:07,667 --> 00:29:10,000
is instead do narrow APIs.

699
00:29:10,000 --> 00:29:12,934
So we go through each of
the major subsystems of Chrome

700
00:29:12,934 --> 00:29:14,334
that we want to allow

701
00:29:14,334 --> 00:29:16,300
extension developers
to interact with,

702
00:29:16,300 --> 00:29:18,367
and we look at them
and we try and decide

703
00:29:18,367 --> 00:29:20,234
what would be
an interesting API for this?

704
00:29:20,234 --> 00:29:22,067
And we design them
specifically,

705
00:29:22,067 --> 00:29:25,634
and the advantage of that
is that...

706
00:29:25,634 --> 00:29:27,400
we can commit
to supporting these.

707
00:29:27,400 --> 00:29:29,234
So we will never
have to, hopefully,

708
00:29:29,234 --> 00:29:31,234
turn off extensions,
disable them,

709
00:29:31,234 --> 00:29:32,901
because a future version
of Chrome

710
00:29:32,901 --> 00:29:34,801
doesn't support the APIs
that they use.

711
00:29:34,801 --> 00:29:36,400
We can commit to supporting
these APIs forever

712
00:29:36,400 --> 00:29:37,834
because they're not just things

713
00:29:37,834 --> 00:29:39,934
that are part of our
implementation internally.

714
00:29:39,934 --> 00:29:45,000
They're things that we
explicitly decided to expose.

715
00:29:45,000 --> 00:29:47,100
Another advantage
of the narrow APIs

716
00:29:47,100 --> 00:29:48,968
is that
we get to design them.

717
00:29:48,968 --> 00:29:50,834
If you just expose
all of your internal functions

718
00:29:50,834 --> 00:29:52,467
directly
to extension developers,

719
00:29:52,467 --> 00:29:53,834
they just get the interfaces,

720
00:29:53,834 --> 00:29:55,334
whatever internal functions
you use,

721
00:29:55,334 --> 00:29:57,501
and a lot of times, internal
code isn't really designed

722
00:29:57,501 --> 00:29:59,000
to be really nice
and really easy to use

723
00:29:59,000 --> 00:30:00,334
because it doesn't
really matter

724
00:30:00,334 --> 00:30:02,334
because it's only used
by the product team.

725
00:30:02,334 --> 00:30:04,501
But we wanted
our extension system

726
00:30:04,501 --> 00:30:07,400
to be really easy to use,
really accessible to developers,

727
00:30:07,400 --> 00:30:10,367
especially web developers,
and we wanted it to be webby.

728
00:30:10,367 --> 00:30:13,133
We wanted it to feel like
it fit in with the web platform.

729
00:30:13,133 --> 00:30:14,801
And so doing narrow APIs

730
00:30:14,801 --> 00:30:16,400
gives us an opportunity
to do this.

731
00:30:16,400 --> 00:30:17,901
We can design these things

732
00:30:17,901 --> 00:30:21,634
in a way that we think
makes sense to web developers.

733
00:30:26,067 --> 00:30:29,734
So...I got a few demos
about browser APIs.

734
00:30:29,734 --> 00:30:32,501
First, I'm just gonna do
a really quick one

735
00:30:32,501 --> 00:30:34,701
that isn't terribly useful

736
00:30:34,701 --> 00:30:39,100
but will give you a feel
for how it works.

737
00:30:39,100 --> 00:30:45,901
We'll create a bookmark
in the toolbar.

738
00:30:45,901 --> 00:30:52,367
So I'll call it
chrome.bookmarks.create.

739
00:30:52,367 --> 00:30:56,701
And its URL would be...
I don't know.

740
00:30:56,701 --> 00:30:58,901
What's a good site?

741
00:30:58,901 --> 00:31:03,868
Um...

742
00:31:03,868 --> 00:31:08,968
And parentID is the level
in the bookmark's hierarchy

743
00:31:08,968 --> 00:31:10,567
that we want the bookmark
to show up in,

744
00:31:10,567 --> 00:31:11,934
and I just happen to know

745
00:31:11,934 --> 00:31:13,767
that the parentID
of the toolstrip is 1.

746
00:31:13,767 --> 00:31:15,667
Or the bookmarks bar is 1.

747
00:31:15,667 --> 00:31:18,100
But you can also discover this
through the API

748
00:31:18,100 --> 00:31:21,367
with a few more lines of code.

749
00:31:21,367 --> 00:31:23,968
And so with just that one
line of code,

750
00:31:23,968 --> 00:31:27,767
I'm gonna add a bookmark
to the bookmark bar.

751
00:31:27,767 --> 00:31:31,067
So I restart my extension,
and there we go.

752
00:31:31,067 --> 00:31:33,400
Hooray.

753
00:31:35,701 --> 00:31:38,467
Now, that's not
terribly interesting.

754
00:31:38,467 --> 00:31:42,167
What if, instead,
we add one bookmark

755
00:31:42,167 --> 00:31:44,367
for every item that
I'm subscribed to in Reader?

756
00:31:44,367 --> 00:31:46,367
So we contact the Reader API,

757
00:31:46,367 --> 00:31:48,367
find all the feeds
that I'm subscribed to,

758
00:31:48,367 --> 00:31:50,167
and add a bookmark
for each one of those.

759
00:31:50,167 --> 00:31:52,167
That seems at least
somewhat useful,

760
00:31:52,167 --> 00:31:54,133
and that way,
if I really feel like reading

761
00:31:54,133 --> 00:31:55,767
one particular feed,

762
00:31:55,767 --> 00:31:59,968
I'll have a quick way
to access it.

763
00:31:59,968 --> 00:32:02,234
So I have some code
for that.

764
00:32:02,234 --> 00:32:04,434
And again, you can see
this is pretty short,

765
00:32:04,434 --> 00:32:07,033
about 65 lines of
pretty typical JavaScript.

766
00:32:07,033 --> 00:32:10,434
What it's gonna do is,
first step,

767
00:32:10,434 --> 00:32:12,634
it's gonna get the entire
hierarchy of bookmarks

768
00:32:12,634 --> 00:32:14,634
from the bookmark system.

769
00:32:14,634 --> 00:32:16,434
We're gonna put
all of the feed--

770
00:32:16,434 --> 00:32:19,033
all of the bookmarks
in one folder.

771
00:32:19,033 --> 00:32:20,434
So first we look for
that folder

772
00:32:20,434 --> 00:32:22,234
and see if it already
exists.

773
00:32:22,234 --> 00:32:24,234
And if it does,
we remove it.

774
00:32:24,234 --> 00:32:27,267
And then we create
a new folder.

775
00:32:27,267 --> 00:32:29,567
And then we fetch the feeds
that I'm subscribed to

776
00:32:29,567 --> 00:32:32,067
from Reader,
and then once we get the feeds,

777
00:32:32,067 --> 00:32:33,834
we parse the JSON.

778
00:32:33,834 --> 00:32:35,901
And then for each feed
that I'm subscribed to,

779
00:32:35,901 --> 00:32:38,467
create a bookmark
in the folder.

780
00:32:41,033 --> 00:32:44,767
So I'll paste this code
into my toolstrip.

781
00:32:54,634 --> 00:32:58,767
Once again,
I will start up Chrome.

782
00:33:01,300 --> 00:33:03,100
And there it is.

783
00:33:03,100 --> 00:33:07,067
So now I have this feeds folder,
and inside each one I have--

784
00:33:07,067 --> 00:33:09,734
In this account, I'm only
subscribed to two feeds.

785
00:33:09,734 --> 00:33:15,234
But if it was real life,
it would have a lot more.

786
00:33:15,234 --> 00:33:17,367
So that's cool.

787
00:33:21,334 --> 00:33:22,934
Now, the browser APIs,

788
00:33:22,934 --> 00:33:25,367
there's an obvious tradeoff
here with going with narrow.

789
00:33:25,367 --> 00:33:28,167
Obviously, it means
that we'll have less APIs

790
00:33:28,167 --> 00:33:32,033
than a system
that uses a wide approach.

791
00:33:32,033 --> 00:33:34,567
So that means that we're gonna
have to be really responsive

792
00:33:34,567 --> 00:33:37,634
to the development community
and listen very carefully

793
00:33:37,634 --> 00:33:42,033
and build things
that people need.

794
00:33:42,033 --> 00:33:44,501
As to the exact list,
we don't know yet.

795
00:33:44,501 --> 00:33:46,100
The list is to be determined.

796
00:33:46,100 --> 00:33:48,567
This is an area
that we're actively working on.

797
00:33:48,567 --> 00:33:52,067
And so it's still up in the air.

798
00:33:52,067 --> 00:33:54,901
But obviously, we want the
extension system to be powerful.

799
00:33:54,901 --> 00:33:56,234
We want people
to be able to do

800
00:33:56,234 --> 00:33:58,067
everything
that they want to do with it,

801
00:33:58,067 --> 00:33:59,968
and so there will be probably

802
00:33:59,968 --> 00:34:03,300
a pretty big list of these APIs
that we'll build out.

803
00:34:03,300 --> 00:34:05,934
And...so if you don't--

804
00:34:05,934 --> 00:34:08,234
obviously, the items on here
is very short,

805
00:34:08,234 --> 00:34:10,634
but if you don't see us
working on an API that you want,

806
00:34:10,634 --> 00:34:11,801
definitely let us know.

807
00:34:11,801 --> 00:34:13,267
Contact us
on Chromium-discuss,

808
00:34:13,267 --> 00:34:15,234
because we know that this is
one of the parts of the system

809
00:34:15,234 --> 00:34:17,567
that we need to listen
very carefully about

810
00:34:17,567 --> 00:34:19,367
and so we want to hear
your feedback

811
00:34:19,367 --> 00:34:21,567
about what APIs
you want to see.

812
00:34:21,567 --> 00:34:24,267
And further, if you're
interested in working on Chrome,

813
00:34:24,267 --> 00:34:27,501
if you're a C++ guy and you
wanna work on Google Chrome,

814
00:34:27,501 --> 00:34:28,968
it is an open source project,

815
00:34:28,968 --> 00:34:30,567
and this is an area in which

816
00:34:30,567 --> 00:34:32,968
it's very easy for people
to come and join and help

817
00:34:32,968 --> 00:34:35,567
because it's easy
to split these things up

818
00:34:35,567 --> 00:34:37,567
and have people
working on different ones

819
00:34:37,567 --> 00:34:40,934
without stepping on each other.

820
00:34:49,968 --> 00:34:52,033
So the second cool thing,
I think,

821
00:34:52,033 --> 00:34:53,567
about the extension system,

822
00:34:53,567 --> 00:34:54,968
the design
of the extension system,

823
00:34:54,968 --> 00:34:57,100
is its process model.

824
00:34:57,100 --> 00:35:00,067
As you might recall,
Chrome is multiprocess.

825
00:35:00,067 --> 00:35:04,100
It's one of the really cool
things about Chrome,

826
00:35:04,100 --> 00:35:05,901
the really innovative things,

827
00:35:05,901 --> 00:35:08,400
and one of
the key features of it.

828
00:35:08,400 --> 00:35:10,067
And just as a refresher,

829
00:35:10,067 --> 00:35:11,968
there's a lot of reasons
to do this,

830
00:35:11,968 --> 00:35:14,234
but mostly the reason
why Chrome is multiprocess

831
00:35:14,234 --> 00:35:16,834
is because web pages are
becoming more and more advanced,

832
00:35:16,834 --> 00:35:18,334
more and more complicated,

833
00:35:18,334 --> 00:35:20,234
and they become
a lot like applications.

834
00:35:20,234 --> 00:35:21,734
And so just like applications,

835
00:35:21,734 --> 00:35:23,601
it makes sense to run them
in separate processes

836
00:35:23,601 --> 00:35:25,334
to protect them
from each other.

837
00:35:25,334 --> 00:35:26,601
So if one web page crashes,

838
00:35:26,601 --> 00:35:27,934
it doesn't crash
the other web pages.

839
00:35:27,934 --> 00:35:29,334
It doesn't crash the browser.

840
00:35:29,334 --> 00:35:30,534
If a plugin crashes,

841
00:35:30,534 --> 00:35:32,000
it doesn't crash the browser,
etcetera.

842
00:35:32,000 --> 00:35:33,634
It just makes sense.

843
00:35:33,634 --> 00:35:35,634
There's also
security benefits for it.

844
00:35:35,634 --> 00:35:37,033
It turns out
it doesn't require

845
00:35:37,033 --> 00:35:39,033
a lot of operating
system permissions

846
00:35:39,033 --> 00:35:40,567
to render a web page.

847
00:35:40,567 --> 00:35:41,968
You don't really require
disc access,

848
00:35:41,968 --> 00:35:43,567
you don't really
require network access,

849
00:35:43,567 --> 00:35:44,934
all those things can be
abstracted away.

850
00:35:44,934 --> 00:35:46,968
And so you can lock down
the processes

851
00:35:46,968 --> 00:35:48,200
that render web pages

852
00:35:48,200 --> 00:35:50,601
so that they don't have
any capabilities.

853
00:35:50,601 --> 00:35:52,000
And what that means
is that

854
00:35:52,000 --> 00:35:54,167
if a web page process
is compromised,

855
00:35:54,167 --> 00:35:57,367
it can only get the permissions
that the original process had.

856
00:35:57,367 --> 00:36:01,400
So you kind of contain
exploits that way.

857
00:36:01,400 --> 00:36:03,133
It also sort of
counter-intuitively

858
00:36:03,133 --> 00:36:05,067
leads to better
resource allocation.

859
00:36:05,067 --> 00:36:06,534
Even though
a multiprocess browser

860
00:36:06,534 --> 00:36:08,701
obviously requires
a little bit more resources,

861
00:36:08,701 --> 00:36:11,901
it turns out that you get
better utilization,

862
00:36:11,901 --> 00:36:13,901
because the operating system
is very good

863
00:36:13,901 --> 00:36:16,701
at sharing resources fairly
amongst processes.

864
00:36:16,701 --> 00:36:19,300
So if you have one web page
that's using a lot of CPU

865
00:36:19,300 --> 00:36:20,901
or using a lot of memory,

866
00:36:20,901 --> 00:36:23,100
it's okay because
most modern browser--

867
00:36:23,100 --> 00:36:26,067
most modern operating systems
are very good at making sure

868
00:36:26,067 --> 00:36:30,501
that all processes get
a fair access to the resources.

869
00:36:30,501 --> 00:36:33,367
So extensions are multiprocess
for the exact same reason

870
00:36:33,367 --> 00:36:35,300
or the exact same reasons.

871
00:36:35,300 --> 00:36:37,767
Every extension in Chrome
has its own process,

872
00:36:37,767 --> 00:36:40,067
and you get
the same benefits.

873
00:36:40,067 --> 00:36:42,167
Extensions
can't crash each other,

874
00:36:42,167 --> 00:36:44,834
they can't crash the browser,
they can't crash web pages.

875
00:36:44,834 --> 00:36:48,634
If an extension is exploited,
the exploits are contained

876
00:36:48,634 --> 00:36:51,701
and the malicious code only
gets access to the permissions

877
00:36:51,701 --> 00:36:53,701
that the extension had itself,

878
00:36:53,701 --> 00:36:55,501
and you get
better resource sharing.

879
00:36:55,501 --> 00:36:58,033
So if an extension
is being badly behaved

880
00:36:58,033 --> 00:37:00,567
and using a lot of CPU,
using a lot of memory,

881
00:37:00,567 --> 00:37:02,534
it doesn't really affect
the rest of the browser

882
00:37:02,534 --> 00:37:03,968
or the web pages

883
00:37:03,968 --> 00:37:09,634
because the operating system
can share resources fairly.

884
00:37:09,634 --> 00:37:12,601
Now, inside one of these
extension processes,

885
00:37:12,601 --> 00:37:15,200
again, you have
multiple web pages.

886
00:37:15,200 --> 00:37:16,934
Because every part
of an extension

887
00:37:16,934 --> 00:37:18,767
is basically a web page.

888
00:37:18,767 --> 00:37:21,834
So you can imagine that...
I showed you toolstrips.

889
00:37:21,834 --> 00:37:23,901
An extension can have
multiple toolstrips.

890
00:37:23,901 --> 00:37:26,367
It could have a sidebar.
The sidebar would be a web page.

891
00:37:26,367 --> 00:37:28,868
You can open pop-up windows
in an extension,

892
00:37:28,868 --> 00:37:30,868
and those could be
web pages.

893
00:37:30,868 --> 00:37:33,200
You could have HTML
in the main tab area,

894
00:37:33,200 --> 00:37:35,467
which would, of course,
be a web page, and so on.

895
00:37:35,467 --> 00:37:37,834
So you can imagine,
a typical extension's

896
00:37:37,834 --> 00:37:40,734
gonna end up with many
web pages running in it.

897
00:37:40,734 --> 00:37:43,667
And additionally, if you have
multiple browser windows,

898
00:37:43,667 --> 00:37:45,767
every browser window's
gonna get its full complement

899
00:37:45,767 --> 00:37:48,601
of web pages
from each extension.

900
00:37:48,601 --> 00:37:53,167
And this might seem like it
would lead to slow performance,

901
00:37:53,167 --> 00:37:56,767
but remember that Chrome is,
like most modern browsers,

902
00:37:56,767 --> 00:37:59,634
is optimized to run many
web pages at once.

903
00:37:59,634 --> 00:38:02,634
Users of Chrome typically have
20, 30 tabs open at a time,

904
00:38:02,634 --> 00:38:05,934
and so having a few extra
pages open

905
00:38:05,934 --> 00:38:08,434
for an extension running
is not really that big a deal

906
00:38:08,434 --> 00:38:13,701
and it's something that
Chrome's already optimized for.

907
00:38:15,734 --> 00:38:18,901
Now...having
all these web pages

908
00:38:18,901 --> 00:38:21,467
as part of your extension
running at the same time

909
00:38:21,467 --> 00:38:24,567
leads naturally to the question
of how they can communicate.

910
00:38:24,567 --> 00:38:26,634
For example, going back
to the settings example,

911
00:38:26,634 --> 00:38:31,067
say you have the settings UI
where you...

912
00:38:31,067 --> 00:38:32,968
users get to choose
all the various settings

913
00:38:32,968 --> 00:38:34,033
for your extension,

914
00:38:34,033 --> 00:38:35,667
when a setting has changed,

915
00:38:35,667 --> 00:38:37,934
you probably want to tell
all the parts of your extension

916
00:38:37,934 --> 00:38:39,267
that the setting changed

917
00:38:39,267 --> 00:38:41,567
so they can update
their display.

918
00:38:41,567 --> 00:38:44,200
Now, if you've ever
used IFrames in a web page,

919
00:38:44,200 --> 00:38:46,234
you're familiar with the kind
of communication

920
00:38:46,234 --> 00:38:48,267
that we allow in extensions.

921
00:38:48,267 --> 00:38:50,734
When you use an IFrame,

922
00:38:50,734 --> 00:38:53,434
you can just call functions
directly inside that frame,

923
00:38:53,434 --> 00:38:55,334
assuming the frame
is in the same origin.

924
00:38:55,334 --> 00:38:57,634
And that's exactly the same way
it works in extensions.

925
00:38:57,634 --> 00:38:59,234
You can get a reference

926
00:38:59,234 --> 00:39:01,434
to all the different web pages
in your extension at any time,

927
00:39:01,434 --> 00:39:03,367
and you can just call
functions on them.

928
00:39:03,367 --> 00:39:06,501
So it works exactly
the same way as frames.

929
00:39:06,501 --> 00:39:09,634
I can--I have a sample of this.

930
00:39:12,567 --> 00:39:14,100
I have this configuration page

931
00:39:14,100 --> 00:39:17,501
that I'm gonna add
to my extension.

932
00:39:24,701 --> 00:39:26,901
And you can see that
it's a very simple web page.

933
00:39:26,901 --> 00:39:28,534
It just has one checkbox,

934
00:39:28,534 --> 00:39:30,567
and what this checkbox
is gonna do

935
00:39:30,567 --> 00:39:33,100
is when it's checked,
it's gonna show

936
00:39:33,100 --> 00:39:37,334
the number of unread items
in my reading list,

937
00:39:37,334 --> 00:39:39,300
and when it's unchecked,
it won't show them.

938
00:39:39,300 --> 00:39:41,300
So maybe this is useful
if people want to save space

939
00:39:41,300 --> 00:39:44,100
in their toolstrip or something.

940
00:39:44,100 --> 00:39:46,534
And you can see it works
just like a regular web page.

941
00:39:46,534 --> 00:39:48,100
There's an onchange
event handler.

942
00:39:48,100 --> 00:39:51,901
It calls this function,
and here's the interesting part.

943
00:39:51,901 --> 00:39:55,100
It calls chrome.self.getViews,
which gets a reference

944
00:39:55,100 --> 00:39:57,567
to all the pages
that are part of your extension.

945
00:39:57,567 --> 00:39:59,701
And it iterates through them.

946
00:39:59,701 --> 00:40:03,701
And...for each one,
it looks to see if it has

947
00:40:03,701 --> 00:40:05,901
that unread count span
that we added

948
00:40:05,901 --> 00:40:07,901
which would mean
it's a toolstrip.

949
00:40:07,901 --> 00:40:09,901
And if it is a toolstrip,

950
00:40:09,901 --> 00:40:11,901
then it sets the visibility
of that span,

951
00:40:11,901 --> 00:40:14,701
depending on whether
the checkmark is checked or not.

952
00:40:14,701 --> 00:40:16,701
So this is useful.

953
00:40:16,701 --> 00:40:21,701
So again,
I'll restart my extension.

954
00:40:21,701 --> 00:40:25,501
And you could, of course,
add UI to your extension

955
00:40:25,501 --> 00:40:27,467
to access
the configuration page.

956
00:40:27,467 --> 00:40:29,133
But I'm just,
for expediency,

957
00:40:29,133 --> 00:40:31,534
gonna type in the URL
directly.

958
00:40:31,534 --> 00:40:34,901
Every--

959
00:40:34,901 --> 00:40:36,567
Since extensions
are web pages,

960
00:40:36,567 --> 00:40:38,567
they have a URL,

961
00:40:38,567 --> 00:40:41,200
and it works exactly
the same way as regular URLs.

962
00:40:41,200 --> 00:40:44,067
And this long number here
is the extension's unique ID.

963
00:40:44,067 --> 00:40:46,501
And since I'm in development
mode right now,

964
00:40:46,501 --> 00:40:47,801
these IDs are just--

965
00:40:47,801 --> 00:40:49,400
they're just incrementing
numbers,

966
00:40:49,400 --> 00:40:51,701
so the first one is zero,
the second one's one, etcetera,

967
00:40:51,701 --> 00:40:53,901
just to explain what that is.

968
00:40:53,901 --> 00:40:56,501
And...so I have
my settings here,

969
00:40:56,501 --> 00:40:58,701
all my complex settings.

970
00:40:58,701 --> 00:41:00,000
And if I check this thing,

971
00:41:00,000 --> 00:41:02,501
you can see
that number goes away...

972
00:41:02,501 --> 00:41:05,000
comes back, and...

973
00:41:05,000 --> 00:41:08,567
if I had multiple
of these pages open...

974
00:41:08,567 --> 00:41:12,100
I don't know if I can fit...
let's see.

975
00:41:15,801 --> 00:41:17,601
Yeah. So now I have
three of these open,

976
00:41:17,601 --> 00:41:20,667
and you can see
they all come and go.

977
00:41:20,667 --> 00:41:28,000
So this is how communication
works inside of an extension.

978
00:41:28,000 --> 00:41:31,200
Now, some of you
may be thinking, that's cool,

979
00:41:31,200 --> 00:41:33,167
you can communicate
between pages.

980
00:41:33,167 --> 00:41:37,200
But if you've worked on
other systems like this before,

981
00:41:37,200 --> 00:41:39,801
you may be wondering--like
it would be really confusing

982
00:41:39,801 --> 00:41:41,968
to have all of these web pages
coming and going all the time

983
00:41:41,968 --> 00:41:44,133
whenever browser windows
open and close

984
00:41:44,133 --> 00:41:45,968
and whatever sidebars
open and close,

985
00:41:45,968 --> 00:41:47,701
and you have all this code
running all over the place,

986
00:41:47,701 --> 00:41:49,067
but there's no one in charge.

987
00:41:49,067 --> 00:41:50,167
There's no chunk of code

988
00:41:50,167 --> 00:41:51,567
that's in charge
of the entire extension.

989
00:41:51,567 --> 00:41:53,934
So it becomes a little bit
like distributed programming,

990
00:41:53,934 --> 00:41:56,701
because you have to manage
all these peers

991
00:41:56,701 --> 00:42:01,434
and get them to...
cooperate.

992
00:42:01,434 --> 00:42:02,834
And that can be really hard,

993
00:42:02,834 --> 00:42:04,467
and it's a frustrating way
to program.

994
00:42:04,467 --> 00:42:06,501
And it would be
much more easy

995
00:42:06,501 --> 00:42:09,200
if there was a single place
that you could run code

996
00:42:09,200 --> 00:42:10,634
in your extension

997
00:42:10,634 --> 00:42:12,901
that would exist for the entire
lifetime of the extension

998
00:42:12,901 --> 00:42:15,834
and wouldn't be attached
to any particular window.

999
00:42:15,834 --> 00:42:18,033
Oops.
And...yeah?

1000
00:42:18,033 --> 00:42:21,234
[man speaking indistinctly]

1001
00:42:21,234 --> 00:42:23,767
Goodman: Yeah.
It...yeah.

1002
00:42:23,767 --> 00:42:26,200
Except for the--
the question is

1003
00:42:26,200 --> 00:42:27,767
is there a same origin
restriction

1004
00:42:27,767 --> 00:42:31,133
on the web pages
inside Chrome Extensions?

1005
00:42:31,133 --> 00:42:34,000
And the answer is, yes,
the same origin policy applies

1006
00:42:34,000 --> 00:42:38,667
except for
the cross-origin XHR.

1007
00:42:38,667 --> 00:42:41,467
So...for this exact reason,

1008
00:42:41,467 --> 00:42:43,434
we introduce the concept
of the background page.

1009
00:42:43,434 --> 00:42:46,100
And the background page
is another web page.

1010
00:42:46,100 --> 00:42:47,634
Again,
exactly the same thing

1011
00:42:47,634 --> 00:42:49,133
as the other parts
of the system.

1012
00:42:49,133 --> 00:42:50,734
It's just a web page.

1013
00:42:50,734 --> 00:42:55,367
And the background page
is basically just a web page

1014
00:42:55,367 --> 00:42:57,834
that is not attached
to any browser window

1015
00:42:57,834 --> 00:42:59,334
and is not visible.

1016
00:42:59,334 --> 00:43:01,000
So it's totally invisible,
you can't see it,

1017
00:43:01,000 --> 00:43:02,133
but it's running.

1018
00:43:02,133 --> 00:43:03,634
And the idea is

1019
00:43:03,634 --> 00:43:05,968
that you put all the main part
of your extension code in here

1020
00:43:05,968 --> 00:43:07,434
so that you don't have
to worry about it

1021
00:43:07,434 --> 00:43:09,868
coming and going
as browser windows come and go.

1022
00:43:09,868 --> 00:43:11,968
And then the UI
of your extension

1023
00:43:11,968 --> 00:43:14,834
just becomes like a view,
a dumb view,

1024
00:43:14,834 --> 00:43:16,667
and when it needs information
from your extension,

1025
00:43:16,667 --> 00:43:18,167
it requests it
from the background page.

1026
00:43:18,167 --> 00:43:20,934
And when your background page
notices some state change,

1027
00:43:20,934 --> 00:43:22,701
it updates all the views.

1028
00:43:22,701 --> 00:43:25,734
So this works out pretty well.

1029
00:43:25,734 --> 00:43:28,701
And I can demonstrate, again,
with my extension,

1030
00:43:28,701 --> 00:43:31,000
building up the complexity
of my extension here

1031
00:43:31,000 --> 00:43:33,100
little bit by little bit.

1032
00:43:33,100 --> 00:43:34,801
What we can do
with this extension

1033
00:43:34,801 --> 00:43:36,300
is right now we have--

1034
00:43:36,300 --> 00:43:40,534
every toolstrip is contacting
the Reader API itself,

1035
00:43:40,534 --> 00:43:42,501
so whenever I create
a new window,

1036
00:43:42,501 --> 00:43:44,901
I end up contacting
the Reader API twice.

1037
00:43:44,901 --> 00:43:47,300
Which, besides just being
inconsiderate,

1038
00:43:47,300 --> 00:43:49,901
is just not that good.

1039
00:43:49,901 --> 00:43:53,234
So it would be better
if we moved all that code

1040
00:43:53,234 --> 00:43:54,901
into the background page

1041
00:43:54,901 --> 00:43:58,501
so that it only happens once
for the entire extension.

1042
00:43:58,501 --> 00:44:00,567
So we can go ahead and do that.

1043
00:44:00,567 --> 00:44:04,167
I'll just...very simply copy
all of my code from my toolstrip

1044
00:44:04,167 --> 00:44:08,167
into the new background page.

1045
00:44:08,167 --> 00:44:12,367
I'll save this
as background.html.

1046
00:44:12,367 --> 00:44:15,167
Now, I'm not gonna need the UI
because, again,

1047
00:44:15,167 --> 00:44:16,968
the background page
is invisible.

1048
00:44:16,968 --> 00:44:18,567
So I'll delete that.

1049
00:44:18,567 --> 00:44:22,901
And this setCount function,
right now what it's doing

1050
00:44:22,901 --> 00:44:24,400
is it's for the toolstrip,

1051
00:44:24,400 --> 00:44:26,167
so it's just updating the UI
directly.

1052
00:44:26,167 --> 00:44:27,968
That's not gonna work because
it's a background page

1053
00:44:27,968 --> 00:44:29,367
and it's invisible.

1054
00:44:29,367 --> 00:44:31,200
So instead,
what we need to do

1055
00:44:31,200 --> 00:44:36,968
is tell all the toolstrips
to update themselves.

1056
00:44:36,968 --> 00:44:42,567
So I have a function here...

1057
00:44:42,567 --> 00:44:45,167
so I'll replace the
implementation of this function

1058
00:44:45,167 --> 00:44:47,634
to do something else.

1059
00:44:47,634 --> 00:44:49,767
And again, it's gonna call it
chrome.self.getViews.

1060
00:44:49,767 --> 00:44:51,167
It's gonna iterate
through all the views

1061
00:44:51,167 --> 00:44:53,767
and look and see if they
have a particular function,

1062
00:44:53,767 --> 00:44:55,167
and if they do,
it will call that function,

1063
00:44:55,167 --> 00:44:56,367
basically telling the view,

1064
00:44:56,367 --> 00:44:58,167
hey, the unread count
has changed.

1065
00:44:58,167 --> 00:45:01,133
You need to update yourself.

1066
00:45:01,133 --> 00:45:02,634
The other thing
I'm gonna do

1067
00:45:02,634 --> 00:45:06,367
is add this global variable.

1068
00:45:09,400 --> 00:45:13,033
And you'll see
what that's for in a second.

1069
00:45:13,033 --> 00:45:17,033
Now I need to change
the actual toolstrip itself...

1070
00:45:17,033 --> 00:45:19,167
because I no longer need
all this code

1071
00:45:19,167 --> 00:45:21,234
that's in the toolstrip...

1072
00:45:21,234 --> 00:45:23,834
because I moved it
to the background page.

1073
00:45:23,834 --> 00:45:27,434
So my new toolstrip code
is very simple.

1074
00:45:27,434 --> 00:45:29,300
It's just a few lines again.

1075
00:45:29,300 --> 00:45:32,033
On load, it's gonna call
the function to update itself,

1076
00:45:32,033 --> 00:45:34,033
and what that's gonna do
is go through all the views

1077
00:45:34,033 --> 00:45:35,534
and look for
the background page.

1078
00:45:35,534 --> 00:45:37,033
When it finds
the background page,

1079
00:45:37,033 --> 00:45:39,634
it will use that global
variable that I created

1080
00:45:39,634 --> 00:45:42,067
to update its count.

1081
00:45:42,067 --> 00:45:43,968
And the same function
is the same one

1082
00:45:43,968 --> 00:45:45,534
that's gonna get called

1083
00:45:45,534 --> 00:45:49,834
when the background page notices
that things have changed.

1084
00:45:53,467 --> 00:45:55,133
So the final thing
I need to do

1085
00:45:55,133 --> 00:45:56,467
is register my background page,

1086
00:45:56,467 --> 00:46:03,133
tell the extension system
that it exists...

1087
00:46:03,133 --> 00:46:07,167
and then it should be
ready to go.

1088
00:46:07,167 --> 00:46:09,100
So again, I'll start Chrome.

1089
00:46:09,100 --> 00:46:12,434
You can see that it still works,
which is a good sign.

1090
00:46:12,434 --> 00:46:14,901
If I create multiple windows,
it's still going.

1091
00:46:14,901 --> 00:46:16,300
That's good.

1092
00:46:16,300 --> 00:46:18,100
But other than that,
it's pretty much the same.

1093
00:46:18,100 --> 00:46:20,100
You can tell
that something has happened

1094
00:46:20,100 --> 00:46:21,901
by going to this
management page that we have.

1095
00:46:21,901 --> 00:46:24,300
This will eventually--
this is obviously early UI.

1096
00:46:24,300 --> 00:46:26,100
But this will become
the management UI

1097
00:46:26,100 --> 00:46:27,934
for the extension system.

1098
00:46:27,934 --> 00:46:31,300
And it shows you all the
extensions you have installed,

1099
00:46:31,300 --> 00:46:33,934
and right now
I just have one.

1100
00:46:33,934 --> 00:46:36,534
And it also shows you
all the views in your extension.

1101
00:46:36,534 --> 00:46:38,000
And you can see there's two--

1102
00:46:38,000 --> 00:46:40,100
the toolstrip
and the background page.

1103
00:46:40,100 --> 00:46:43,934
And if I create another one,
another browser window,

1104
00:46:43,934 --> 00:46:46,100
and refresh,
now I have two toolstrips.

1105
00:46:46,100 --> 00:46:47,701
So that makes sense.

1106
00:46:47,701 --> 00:46:50,167
And there's also a button here
to inspect them,

1107
00:46:50,167 --> 00:46:51,901
so I can actually inspect
the background page.

1108
00:46:51,901 --> 00:46:54,868
So you use the inspector
on the background page.

1109
00:46:54,868 --> 00:46:56,868
And it might not seem
that useful

1110
00:46:56,868 --> 00:46:58,734
to inspect an invisible page,

1111
00:46:58,734 --> 00:47:00,934
but one thing you can do
is use

1112
00:47:00,934 --> 00:47:03,901
Chrome's new fancy
visual de-bugger.

1113
00:47:03,901 --> 00:47:06,734
So we now have a visual
JavaScript de-bugger for Chrome,

1114
00:47:06,734 --> 00:47:08,367
which is fun.

1115
00:47:08,367 --> 00:47:10,000
And it was written
for web pages,

1116
00:47:10,000 --> 00:47:12,033
but again, since extensions
are web pages,

1117
00:47:12,033 --> 00:47:13,567
it works for extensions too,

1118
00:47:13,567 --> 00:47:15,567
so you can set break points
and stuff like that.

1119
00:47:15,567 --> 00:47:19,901
Which is good.

1120
00:47:23,200 --> 00:47:25,501
Another thing I can do
with this background page

1121
00:47:25,501 --> 00:47:27,734
is maybe it would be useful

1122
00:47:27,734 --> 00:47:31,767
to have a manual
refresh button...

1123
00:47:31,767 --> 00:47:33,667
in my extension
so that I could--

1124
00:47:33,667 --> 00:47:35,501
if I wanted to know
how many--

1125
00:47:35,501 --> 00:47:38,200
like right now, my extension,
all it does at startup is

1126
00:47:38,200 --> 00:47:40,367
it checks how many items
are in my reading list.

1127
00:47:40,367 --> 00:47:43,634
It would be better if I could
refresh it whenever I wanted.

1128
00:47:43,634 --> 00:47:50,100
So I can...update my toolstrip
really easily to support that.

1129
00:47:54,167 --> 00:47:58,033
I'll add this function
that does the refresh...

1130
00:47:58,033 --> 00:48:01,167
to my toolstrip.

1131
00:48:04,000 --> 00:48:05,634
And again,
all this does is

1132
00:48:05,634 --> 00:48:08,167
it goes through all the views,
finds the background page

1133
00:48:08,167 --> 00:48:11,467
and calls the function
to refresh.

1134
00:48:11,467 --> 00:48:16,434
And I will add a new button
to call the function,

1135
00:48:16,434 --> 00:48:19,767
the refresh function.

1136
00:48:27,634 --> 00:48:31,634
And...if I restart,

1137
00:48:31,634 --> 00:48:33,234
I now have a refresh button.

1138
00:48:33,234 --> 00:48:38,534
I can go to Google Reader.
Maybe I want to read some stuff.

1139
00:48:38,534 --> 00:48:40,667
As I make the count
go down a little bit,

1140
00:48:40,667 --> 00:48:43,834
you can see that
it still says 610.

1141
00:48:43,834 --> 00:48:46,634
But I have actually only 600.

1142
00:48:46,634 --> 00:48:50,834
If I press refresh...
it changes to 600.

1143
00:48:50,834 --> 00:48:54,567
And if I have multiple pages...

1144
00:48:57,734 --> 00:49:00,033
And I take it down to 590

1145
00:49:00,033 --> 00:49:01,701
and I press refresh
in one of them,

1146
00:49:01,701 --> 00:49:05,501
both of them update...
using the background page.

1147
00:49:05,501 --> 00:49:08,400
So that's good.

1148
00:49:14,567 --> 00:49:18,033
The last thing I want to point
out about the process model

1149
00:49:18,033 --> 00:49:20,934
is the effect that it has
on the browser APIs.

1150
00:49:20,934 --> 00:49:22,801
These are those narrow
browser APIs

1151
00:49:22,801 --> 00:49:24,400
I talked about earlier.

1152
00:49:24,400 --> 00:49:27,100
An interesting thing happens
when you try to do browser APIs

1153
00:49:27,100 --> 00:49:29,634
in a multiprocess browser.

1154
00:49:29,634 --> 00:49:34,200
The problem is that all the APIs
that you want to write

1155
00:49:34,200 --> 00:49:36,701
are manipulating data
that exist in another process.

1156
00:49:36,701 --> 00:49:38,934
So your extension
is running in one process,

1157
00:49:38,934 --> 00:49:41,033
but the tab system
for the browser

1158
00:49:41,033 --> 00:49:43,667
is running in a different
process from the extension.

1159
00:49:43,667 --> 00:49:45,701
So at a low level,
fundamentally, what's happening

1160
00:49:45,701 --> 00:49:47,300
is that the extension process

1161
00:49:47,300 --> 00:49:49,267
has to send a message
to the browser process,

1162
00:49:49,267 --> 00:49:51,534
asking it to create a tab.

1163
00:49:51,534 --> 00:49:53,334
And then the browser process
has to send a message

1164
00:49:53,334 --> 00:49:54,834
back to the extension process
saying,

1165
00:49:54,834 --> 00:49:57,234
hey, I created the tab
you asked for--here it is.

1166
00:49:57,234 --> 00:49:59,467
And so this is an asynchronous
environment,

1167
00:49:59,467 --> 00:50:02,334
and fundamentally,
this is just the situation.

1168
00:50:02,334 --> 00:50:05,100
And...
so we thought about

1169
00:50:05,100 --> 00:50:06,701
how to deal with this,

1170
00:50:06,701 --> 00:50:08,501
because async programming
can be difficult,

1171
00:50:08,501 --> 00:50:11,701
and one thing that we
could potentially do

1172
00:50:11,701 --> 00:50:13,701
is try to paper it over

1173
00:50:13,701 --> 00:50:15,767
and make it look like
it's synchronous.

1174
00:50:15,767 --> 00:50:19,701
But the problem with that
is that if you try to pretend

1175
00:50:19,701 --> 00:50:22,701
that an asynchronous system
is really synchronous,

1176
00:50:22,701 --> 00:50:25,300
you can end up
with conflicts and situations

1177
00:50:25,300 --> 00:50:27,100
where the API tells you
the state is one thing,

1178
00:50:27,100 --> 00:50:29,300
but in reality,
it's something else.

1179
00:50:29,300 --> 00:50:31,834
And that ends up being
even more confusing.

1180
00:50:31,834 --> 00:50:33,100
And so what we decided was

1181
00:50:33,100 --> 00:50:34,901
instead of trying
to paper this over,

1182
00:50:34,901 --> 00:50:36,868
we would use some of the idioms
and techniques

1183
00:50:36,868 --> 00:50:38,934
that web developers
are already familiar with

1184
00:50:38,934 --> 00:50:40,501
for working with
asynchronous systems

1185
00:50:40,501 --> 00:50:44,033
and just use them
so that at least,

1186
00:50:44,033 --> 00:50:46,667
although you have to use
asynchronous APIs,

1187
00:50:46,667 --> 00:50:49,000
it's using a technique
that you're familiar with

1188
00:50:49,000 --> 00:50:51,701
and using patterns that
you're familiar with.

1189
00:50:51,701 --> 00:50:54,934
So if you just think
of the browser as the server

1190
00:50:54,934 --> 00:50:58,000
for your extension web page,
it works pretty much the same.

1191
00:50:58,000 --> 00:50:59,467
We've designed the APIs

1192
00:50:59,467 --> 00:51:02,033
so that they look very similar
to AJAX APIs.

1193
00:51:02,033 --> 00:51:05,667
You pass in an object
that is a JSON-style object,

1194
00:51:05,667 --> 00:51:08,200
and you get back results
that are JSON-style objects.

1195
00:51:08,200 --> 00:51:10,701
So if you're familiar with
doing AJAX programming,

1196
00:51:10,701 --> 00:51:15,868
this should look
pretty similar to you.

1197
00:51:15,868 --> 00:51:18,334
So the last cool thing
about the extension system

1198
00:51:18,334 --> 00:51:21,100
that I want to talk about
is packaging and distribution.

1199
00:51:21,100 --> 00:51:24,300
So I've convinced you
that this is really cool,

1200
00:51:24,300 --> 00:51:25,968
and you go and you write
your extension

1201
00:51:25,968 --> 00:51:28,367
and now you want to let
your friends use it

1202
00:51:28,367 --> 00:51:31,767
or let your users
or customers use it.

1203
00:51:31,767 --> 00:51:34,534
I mentioned earlier
that extensions are zip files,

1204
00:51:34,534 --> 00:51:35,934
and that's true.

1205
00:51:35,934 --> 00:51:38,767
But they also have two
special pieces of information

1206
00:51:38,767 --> 00:51:40,834
stuck onto the front of them.

1207
00:51:40,834 --> 00:51:43,367
And because they have these
extra pieces of information,

1208
00:51:43,367 --> 00:51:45,567
we package them
as special files

1209
00:51:45,567 --> 00:51:47,467
with a special extension
called CRX,

1210
00:51:47,467 --> 00:51:49,167
which stands for
Chrome Extension.

1211
00:51:49,167 --> 00:51:51,834
The first piece of information
that's tacked onto the front

1212
00:51:51,834 --> 00:51:53,534
is the signature.

1213
00:51:53,534 --> 00:51:56,801
And all extensions in Chrome
are digitally signed.

1214
00:51:56,801 --> 00:51:58,534
And the reason for that

1215
00:51:58,534 --> 00:52:00,501
is it prevents against
a really common attack

1216
00:52:00,501 --> 00:52:01,901
called a Man-in-the-Middle
attack

1217
00:52:01,901 --> 00:52:06,067
where basically
the signature tells you,

1218
00:52:06,067 --> 00:52:09,400
tells Chrome that when you
update an extension

1219
00:52:09,400 --> 00:52:11,033
that the person
who wrote the update

1220
00:52:11,033 --> 00:52:13,501
is the same person who wrote
the original extension.

1221
00:52:13,501 --> 00:52:15,901
So it can't be substituted
with malicious code.

1222
00:52:15,901 --> 00:52:19,267
And we also tack a manifest
onto the front,

1223
00:52:19,267 --> 00:52:21,767
and the manifest
is the exact same manifest

1224
00:52:21,767 --> 00:52:23,767
that is inside the zip file,

1225
00:52:23,767 --> 00:52:25,901
which might seem kind of funny
to have the same data twice,

1226
00:52:25,901 --> 00:52:27,801
but we do it for a good reason.

1227
00:52:27,801 --> 00:52:30,534
And the reason is
we want to show UI right away

1228
00:52:30,534 --> 00:52:32,200
when you install an extension.

1229
00:52:32,200 --> 00:52:34,167
Again, we want the experience
of using extensions

1230
00:52:34,167 --> 00:52:37,033
to be really polished
and fit with Chrome.

1231
00:52:37,033 --> 00:52:39,634
And so when you click
on an extension on the web,

1232
00:52:39,634 --> 00:52:41,434
we don't want to have to wait
for the entire extension

1233
00:52:41,434 --> 00:52:43,234
to download to show UI.

1234
00:52:43,234 --> 00:52:45,868
We want to show UI right away,
and we want to show UI that says

1235
00:52:45,868 --> 00:52:48,467
this is extension blah,
it has this description,

1236
00:52:48,467 --> 00:52:50,434
here's its icon,
here's what it wants to do, etc.

1237
00:52:50,434 --> 00:52:52,434
And so we put the manifest
on the front

1238
00:52:52,434 --> 00:52:55,634
so that as soon as we get this
first few packets of data,

1239
00:52:55,634 --> 00:52:58,400
we can start displaying UI.

1240
00:52:58,400 --> 00:53:00,234
Now, I'm just bringing this up

1241
00:53:00,234 --> 00:53:01,868
because I think
it's an interesting detail,

1242
00:53:01,868 --> 00:53:03,501
but you don't have to worry
about this.

1243
00:53:03,501 --> 00:53:05,300
As an extension developer,

1244
00:53:05,300 --> 00:53:08,067
typically, you won't deal
with CRX files directly.

1245
00:53:08,067 --> 00:53:09,901
Goggle is going to provide
a service

1246
00:53:09,901 --> 00:53:12,501
that does the packaging,
a web service.

1247
00:53:12,501 --> 00:53:14,501
And you'll just upload
a zip file,

1248
00:53:14,501 --> 00:53:16,901
and it will be packaged
into a CRX file for you,

1249
00:53:16,901 --> 00:53:21,567
and that's the end of the story.

1250
00:53:21,567 --> 00:53:24,701
So once you have your CRX file,
you want to deploy it.

1251
00:53:24,701 --> 00:53:27,567
You want to put it someplace
so people can install it.

1252
00:53:27,567 --> 00:53:30,567
Deployment of Chrome Extensions
is trivial.

1253
00:53:30,567 --> 00:53:32,501
You copy the CRX file
to your web server,

1254
00:53:32,501 --> 00:53:34,167
and that's pretty much it.

1255
00:53:34,167 --> 00:53:36,334
Or you mail it
or whatever you need to do.

1256
00:53:36,334 --> 00:53:38,934
Installation
of Chrome Extensions is instant.

1257
00:53:38,934 --> 00:53:41,000
There's no restart.
They show up immediately.

1258
00:53:41,000 --> 00:53:42,501
And we're so proud of this,

1259
00:53:42,501 --> 00:53:45,000
'cause it just got finished
recently.

1260
00:53:45,000 --> 00:53:46,701
Then I'm gonna show it off.

1261
00:53:46,701 --> 00:53:52,300
So you can do a Google search
for Chrome Extensions samples

1262
00:53:52,300 --> 00:53:55,534
and...there's a bunch
of sample extensions

1263
00:53:55,534 --> 00:53:57,601
that we've posted
on our developer's site

1264
00:53:57,601 --> 00:53:59,367
that you can install.

1265
00:53:59,367 --> 00:54:04,434
Let's see...I'll do...

1266
00:54:04,434 --> 00:54:08,567
the buildbot one.

1267
00:54:08,567 --> 00:54:12,167
So the little dialog comes up,
and it shows up immediately.

1268
00:54:12,167 --> 00:54:14,200
And this one has
this cool feature

1269
00:54:14,200 --> 00:54:15,767
where, if you hover over it,

1270
00:54:15,767 --> 00:54:18,167
it like expands
and shows you more information.

1271
00:54:18,167 --> 00:54:21,167
Ha. If you're not familiar
with what a buildbot is,

1272
00:54:21,167 --> 00:54:24,567
it's basically a system that
lets the developers of Chrome

1273
00:54:24,567 --> 00:54:26,567
know what the status
of the Chrome source code is

1274
00:54:26,567 --> 00:54:27,767
at any given time.

1275
00:54:27,767 --> 00:54:29,567
So this is telling me that

1276
00:54:29,567 --> 00:54:31,400
Chrome source code
is in a good state right now,

1277
00:54:31,400 --> 00:54:33,767
but there is
one red breakage.

1278
00:54:33,767 --> 00:54:35,367
So this one broke something.

1279
00:54:35,367 --> 00:54:40,367
Anyway, um...
so installation is instant.

1280
00:54:40,367 --> 00:54:44,200
And similarly,
un-installation is also instant.

1281
00:54:44,200 --> 00:54:50,133
If I go to that same
management page...

1282
00:54:50,133 --> 00:54:51,968
now I have two extensions.

1283
00:54:51,968 --> 00:54:56,801
I uninstall the buildbot one.
It goes away immediately.

1284
00:54:58,934 --> 00:55:01,434
And again, you don't have
to worry about hosting.

1285
00:55:01,434 --> 00:55:03,434
If you don't want to host
your own CRX files,

1286
00:55:03,434 --> 00:55:06,033
Google will provide
a web service that you can use

1287
00:55:06,033 --> 00:55:07,834
to host your CRX files.

1288
00:55:07,834 --> 00:55:12,534
You just upload them,
and nothing to it.

1289
00:55:12,534 --> 00:55:14,434
Once you get your extension
deployed

1290
00:55:14,434 --> 00:55:16,567
and people are using it
and it's pop--yes?

1291
00:55:16,567 --> 00:55:17,868
[man speaking indistinctly]

1292
00:55:17,868 --> 00:55:20,567
Goodman: Oh. Okay.

1293
00:55:20,567 --> 00:55:27,067
[man continues indistinctly]

1294
00:55:27,067 --> 00:55:29,234
Goodman: Right.

1295
00:55:29,234 --> 00:55:31,033
The question is,
will there be a warning

1296
00:55:31,033 --> 00:55:32,834
if you host it
from your own site

1297
00:55:32,834 --> 00:55:35,834
versus hosting it from
the official site?

1298
00:55:35,834 --> 00:55:39,434
We haven't figured out
the details of the UI there.

1299
00:55:39,434 --> 00:55:41,434
It's something that we're
still trying to design,

1300
00:55:41,434 --> 00:55:43,434
so I can't answer that question
specifically.

1301
00:55:43,434 --> 00:55:45,033
It's definitely something
that we've considered

1302
00:55:45,033 --> 00:55:48,033
because...there's definite
security risks

1303
00:55:48,033 --> 00:55:51,834
from installing extensions
from arbitrary websites.

1304
00:55:51,834 --> 00:55:54,067
man: Can you use
the CRX generating service

1305
00:55:54,067 --> 00:55:59,167
in an automated tool
like...you know,

1306
00:55:59,167 --> 00:56:04,267
just upload and automatically
then download onto your site?

1307
00:56:04,267 --> 00:56:07,267
I mean, if you wanted
to deploy something

1308
00:56:07,267 --> 00:56:08,901
in a script?

1309
00:56:08,901 --> 00:56:10,100
Goodman: The question is,

1310
00:56:10,100 --> 00:56:12,300
will you be able to use
the packaging tool

1311
00:56:12,300 --> 00:56:14,033
in a automated script?

1312
00:56:14,033 --> 00:56:15,367
man: Yeah.
Goodman: Okay.

1313
00:56:15,367 --> 00:56:16,801
That's not something
we've thought about--

1314
00:56:16,801 --> 00:56:18,400
like making it a web service.

1315
00:56:18,400 --> 00:56:20,334
But one thing
I forgot to mention

1316
00:56:20,334 --> 00:56:22,901
is that the format of CRX
is completely open,

1317
00:56:22,901 --> 00:56:24,701
and we'll have Python scripts
that you can use.

1318
00:56:24,701 --> 00:56:27,534
We already have a Python script
that you can use to create them.

1319
00:56:27,534 --> 00:56:29,801
And the format is trivial--
it's like a zip file

1320
00:56:29,801 --> 00:56:32,901
with some extra bytes
appendaged to the front, so...

1321
00:56:32,901 --> 00:56:34,701
And, of course,
Chrome is open source,

1322
00:56:34,701 --> 00:56:36,901
so you could look at
the source code too.

1323
00:56:36,901 --> 00:56:38,367
So basically
what I'm getting at

1324
00:56:38,367 --> 00:56:40,501
is you may not be able to use
our web service to do that,

1325
00:56:40,501 --> 00:56:42,300
but if you're willing
to write code,

1326
00:56:42,300 --> 00:56:47,100
you could easily write code
to create CRX files.

1327
00:56:47,100 --> 00:56:50,634
So you have your extension.
People are using it.

1328
00:56:50,634 --> 00:56:52,734
And then you discover
there's a bug in it,

1329
00:56:52,734 --> 00:56:54,400
so you want to update it.

1330
00:56:54,400 --> 00:56:57,367
You could do a blog post,
telling people, hey,

1331
00:56:57,367 --> 00:56:59,634
you should get the new
version of my extension.

1332
00:56:59,634 --> 00:57:00,801
But it would be better
if you could update

1333
00:57:00,801 --> 00:57:02,968
all the existing users
of your extension.

1334
00:57:02,968 --> 00:57:05,601
And the extension system
in Chrome

1335
00:57:05,601 --> 00:57:07,100
works exactly the same way

1336
00:57:07,100 --> 00:57:10,634
as the update system
for Chrome itself.

1337
00:57:10,634 --> 00:57:13,000
Updates of Chrome Extensions
are automatic.

1338
00:57:13,000 --> 00:57:14,968
There's no work required
by users.

1339
00:57:14,968 --> 00:57:16,634
There's no manual update step.

1340
00:57:16,634 --> 00:57:19,100
There's never a prompt that
tells users they need to update

1341
00:57:19,100 --> 00:57:21,133
or restart
when they get the update.

1342
00:57:21,133 --> 00:57:23,234
And users always have
the latest version.

1343
00:57:23,234 --> 00:57:25,200
And we think this is
a great feature for users

1344
00:57:25,200 --> 00:57:28,367
and it helps
with security too.

1345
00:57:28,367 --> 00:57:32,133
Additionally, updates in Chrome,
as I mentioned before,

1346
00:57:32,133 --> 00:57:33,968
because of those narrow APIs,

1347
00:57:33,968 --> 00:57:35,801
Chrome Extensions
are forward-compatible.

1348
00:57:35,801 --> 00:57:38,367
So you never have to declare
in your extension

1349
00:57:38,367 --> 00:57:39,567
what versions of Chrome

1350
00:57:39,567 --> 00:57:41,367
that your extension
is compatible with.

1351
00:57:41,367 --> 00:57:42,567
Because once you use an API

1352
00:57:42,567 --> 00:57:44,567
that we have released
to the stable channel,

1353
00:57:44,567 --> 00:57:46,167
we guarantee
that we won't break you.

1354
00:57:46,167 --> 00:57:49,167
So you don't have to worry
about updating your extension

1355
00:57:49,167 --> 00:57:51,801
when new versions
of Chrome come out.

1356
00:57:51,801 --> 00:57:53,167
And again,
like the other things,

1357
00:57:53,167 --> 00:57:55,167
Google is going to provide
an update service

1358
00:57:55,167 --> 00:57:58,167
that takes care of the
auto-update protocol for you

1359
00:57:58,167 --> 00:58:00,200
so you won't have to do it
yourself,

1360
00:58:00,200 --> 00:58:03,200
but again, the update protocol
is going to be open

1361
00:58:03,200 --> 00:58:04,434
and all the formats are open,

1362
00:58:04,434 --> 00:58:06,367
so if you want to do it
yourself,

1363
00:58:06,367 --> 00:58:10,200
you'll be able to.

1364
00:58:10,200 --> 00:58:12,968
Finally, we're gonna...
I mentioned

1365
00:58:12,968 --> 00:58:15,968
that we're gonna have services
for packaging

1366
00:58:15,968 --> 00:58:17,467
for hosting and for update,

1367
00:58:17,467 --> 00:58:19,367
and similarly,
we'll have a gallery service

1368
00:58:19,367 --> 00:58:21,400
where users can go
to find extensions

1369
00:58:21,400 --> 00:58:23,100
that they might want
to install

1370
00:58:23,100 --> 00:58:24,701
and where developers
can post their extensions

1371
00:58:24,701 --> 00:58:26,667
if they want people
to install them.

1372
00:58:26,667 --> 00:58:28,267
We don't have any--

1373
00:58:28,267 --> 00:58:30,634
we're still working on
the design for this right now.

1374
00:58:30,634 --> 00:58:32,133
It's a work in progress,

1375
00:58:32,133 --> 00:58:33,868
so we don't have
anything to show you.

1376
00:58:33,868 --> 00:58:37,033
But we hope to be able
to show this really soon.

1377
00:58:37,033 --> 00:58:39,067
And, uh, that's it.

1378
00:58:39,067 --> 00:58:41,067
So I hope this has been
informative

1379
00:58:41,067 --> 00:58:42,567
and piqued your interest

1380
00:58:42,567 --> 00:58:44,634
and that you'll get started
building Chrome Extensions.

1381
00:58:44,634 --> 00:58:46,033
If you want to learn
how to do it again,

1382
00:58:46,033 --> 00:58:49,067
do a Google search for
Chrome Extensions HOWTO.

1383
00:58:49,067 --> 00:58:51,000
It'll take you to
a really simple tutorial

1384
00:58:51,000 --> 00:58:53,834
that walks you through it.

1385
00:58:53,834 --> 00:58:55,234
You can talk to--

1386
00:58:55,234 --> 00:58:57,133
there's a bunch of extension
developers here today--

1387
00:58:57,133 --> 00:58:58,400
not extension developers,

1388
00:58:58,400 --> 00:59:00,634
but people who work
on the extension system.

1389
00:59:00,634 --> 00:59:02,701
And we're gonna be having
something called a Sandbox

1390
00:59:02,701 --> 00:59:05,000
at 1:00 today

1391
00:59:05,000 --> 00:59:07,000
and office hours tomorrow
from 1:00 to 3:00,

1392
00:59:07,000 --> 00:59:08,701
so you can talk to us then.

1393
00:59:08,701 --> 00:59:10,701
You can obviously
talk to me after this.

1394
00:59:10,701 --> 00:59:13,300
Or you can email us
at chromium-discuss

1395
00:59:13,300 --> 00:59:15,300
at googlegroups.com.

1396
00:59:15,300 --> 00:59:17,901
And with that,
I will open it up to questions.

1397
00:59:17,901 --> 00:59:24,100
[applause]

1398
00:59:24,100 --> 00:59:26,501
For the questions,
please go to the microphones,

1399
00:59:26,501 --> 00:59:28,100
because we're recording this,

1400
00:59:28,100 --> 00:59:31,701
and that way people
who watch it later on YouTube

1401
00:59:31,701 --> 00:59:34,634
will be able
to hear the questions.

1402
00:59:34,634 --> 00:59:39,067
man: For the cross...
cross-origin XHR...

1403
00:59:39,067 --> 00:59:40,334
Goodman: Yeah.

1404
00:59:40,334 --> 00:59:43,667
man: Will the Chrome
Extension honor

1405
00:59:43,667 --> 00:59:47,601
the W3C HTTP header
properties?

1406
00:59:47,601 --> 00:59:49,467
Goodman: Yes.
The question is will Chrome--

1407
00:59:49,467 --> 00:59:51,000
man: From the server.
Goodman: Right.

1408
00:59:51,000 --> 00:59:55,634
Will Chrome Extensions
support the opt-in W3C header

1409
00:59:55,634 --> 00:59:57,000
for cross-origin XHR?

1410
00:59:57,000 --> 00:59:58,467
And the answer is yes,

1411
00:59:58,467 --> 01:00:00,200
because Chrome Extensions
are web pages.

1412
01:00:00,200 --> 01:00:02,868
They just inherit
all the features of Chrome.

1413
01:00:02,868 --> 01:00:06,067
And Chrome itself
already supports that,

1414
01:00:06,067 --> 01:00:08,234
and so Chrome Extensions
do too.

1415
01:00:08,234 --> 01:00:11,801
The cross-origin XHR
that extensions have

1416
01:00:11,801 --> 01:00:14,467
is more powerful
than the W3C one,

1417
01:00:14,467 --> 01:00:16,567
because it allows you
to talk to servers

1418
01:00:16,567 --> 01:00:19,634
that have not opted in
to receiving cross-origin--

1419
01:00:19,634 --> 01:00:21,801
man: So it's a way
for the web page author

1420
01:00:21,801 --> 01:00:24,334
to bypass the...

1421
01:00:24,334 --> 01:00:26,200
Goodman: It's a way
for extensions to--

1422
01:00:26,200 --> 01:00:30,901
man: External servers...
HTTP headers is...

1423
01:00:30,901 --> 01:00:33,534
Goodman: Right.
It allows Chrome Extensions

1424
01:00:33,534 --> 01:00:36,534
to access web servers
on other origins

1425
01:00:36,534 --> 01:00:38,200
regardless of the header.

1426
01:00:38,200 --> 01:00:39,767
Exactly.
man: Oh, okay. Thank you.

1427
01:00:39,767 --> 01:00:42,067
Goodman: Yep.
man: Is there, uh...

1428
01:00:42,067 --> 01:00:44,200
is there any thought
or concern

1429
01:00:44,200 --> 01:00:47,634
about the security risks
involved in extensions

1430
01:00:47,634 --> 01:00:50,434
that, uh...

1431
01:00:50,434 --> 01:00:52,667
is there any concern about

1432
01:00:52,667 --> 01:00:54,434
the transparent update
of extensions

1433
01:00:54,434 --> 01:00:55,801
in terms of the security,

1434
01:00:55,801 --> 01:00:58,400
like somebody making
a simple little extension

1435
01:00:58,400 --> 01:01:01,734
and then transparently
updating it with malicious code?

1436
01:01:01,734 --> 01:01:03,200
It would be difficult
maybe for users

1437
01:01:03,200 --> 01:01:06,234
to even figure out
which extensions caused--

1438
01:01:06,234 --> 01:01:07,901
Goodman: Right.
Great question.

1439
01:01:07,901 --> 01:01:09,801
The question is
is there any concern about,

1440
01:01:09,801 --> 01:01:11,534
with the transparent update,

1441
01:01:11,534 --> 01:01:13,200
that an extension
starts out BIN again,

1442
01:01:13,200 --> 01:01:14,834
but then it becomes malicious?

1443
01:01:14,834 --> 01:01:16,534
And, yes, there is
concern about that.

1444
01:01:16,534 --> 01:01:18,834
In the talk,
there's a lot of cool things

1445
01:01:18,834 --> 01:01:20,701
about the system that
we just didn't have time

1446
01:01:20,701 --> 01:01:22,267
to put in the talk.

1447
01:01:22,267 --> 01:01:24,434
But one of them is that

1448
01:01:24,434 --> 01:01:26,133
we have this opt-in
permission system

1449
01:01:26,133 --> 01:01:27,534
where extensions
have to declare

1450
01:01:27,534 --> 01:01:28,968
which permissions they want.

1451
01:01:28,968 --> 01:01:32,033
And if an update of
an extension changes the list,

1452
01:01:32,033 --> 01:01:33,400
then you have to go through

1453
01:01:33,400 --> 01:01:34,968
a proper installation phase
again.

1454
01:01:34,968 --> 01:01:36,567
So it brings up UI
that asks the user,

1455
01:01:36,567 --> 01:01:38,200
"Hey, do you want to install
this thing?"

1456
01:01:38,200 --> 01:01:40,267
and shows the permissions
and things like that.

1457
01:01:40,267 --> 01:01:41,968
man: Excellent. Thank you.
Goodman: Yep.

1458
01:01:41,968 --> 01:01:44,767
man: I love Greasemonkey,
by the way.

1459
01:01:44,767 --> 01:01:47,434
So I'm just curious...

1460
01:01:47,434 --> 01:01:49,267
would you say that

1461
01:01:49,267 --> 01:01:53,133
we'll be able to do
a Greasemonkey-like extension

1462
01:01:53,133 --> 01:01:55,501
on Chrome soon?

1463
01:01:55,501 --> 01:01:57,467
Goodman: The question is,
will you be able to do

1464
01:01:57,467 --> 01:01:58,934
Greasemonkey-like things
on Chrome?

1465
01:01:58,934 --> 01:02:01,267
Yes, the extension system
currently includes

1466
01:02:01,267 --> 01:02:03,033
Greasemonkey-like functionality.

1467
01:02:03,033 --> 01:02:06,367
That's another thing that I
wasn't able to fit in the talk.

1468
01:02:06,367 --> 01:02:08,734
We're still trying to figure out
the details

1469
01:02:08,734 --> 01:02:10,501
of exactly
how it's gonna work.

1470
01:02:10,501 --> 01:02:12,801
There's a lot of different ideas
that we're throwing around.

1471
01:02:12,801 --> 01:02:15,334
But the current
developer builds of Chrome

1472
01:02:15,334 --> 01:02:16,968
already include
this functionality.

1473
01:02:16,968 --> 01:02:19,667
And if you go to
the Chrome Extensions HOWTO,

1474
01:02:19,667 --> 01:02:21,567
it shows you how to do that.

1475
01:02:21,567 --> 01:02:26,000
man: Cool. I know you guys
can't talk about specific dates,

1476
01:02:26,000 --> 01:02:28,400
but--and I'll leave
after this--

1477
01:02:28,400 --> 01:02:32,801
but as a developer that's
actually shipping product,

1478
01:02:32,801 --> 01:02:35,234
it really helps to have
some kind of time window

1479
01:02:35,234 --> 01:02:37,434
even without a specific date.
Goodman: Yeah.

1480
01:02:37,434 --> 01:02:39,100
man: You know, 'cause I mean,

1481
01:02:39,100 --> 01:02:41,133
I don't want to develop
something that's a year out.

1482
01:02:41,133 --> 01:02:42,334
Goodman: Yep.

1483
01:02:42,334 --> 01:02:44,601
man: But can you give me
even like a window of...

1484
01:02:44,601 --> 01:02:46,167
If you were developing today

1485
01:02:46,167 --> 01:02:48,667
and you had to ship something
in six months,

1486
01:02:48,667 --> 01:02:50,601
would it make sense
to be using this now?

1487
01:02:50,601 --> 01:02:54,400
Goodman: Unfortunately,
I, of course, haven't--

1488
01:02:54,400 --> 01:02:56,200
The question is,
when are we gonna ship it?

1489
01:02:56,200 --> 01:02:58,400
The answer is
yes, I have an idea

1490
01:02:58,400 --> 01:03:00,701
of when we're gonna ship it,
but no, I can't tell you.

1491
01:03:00,701 --> 01:03:02,267
Sorry.
man: I'll talk to you later.

1492
01:03:02,267 --> 01:03:04,133
I'll talk to you later
when it's not being recorded.

1493
01:03:04,133 --> 01:03:06,234
[laughing]

1494
01:03:06,234 --> 01:03:07,234
Goodman: Sorry--

1495
01:03:07,234 --> 01:03:08,734
[woman speaking indistinctly]

1496
01:03:08,734 --> 01:03:10,200
Goodman: Okay, so I can't
answer any more questions.

1497
01:03:10,200 --> 01:03:11,767
[continues indistinctly]
Goodman: Okay, all right.

1498
01:03:11,767 --> 01:03:13,701
So I'm told that
we can talk outside.

1499
01:03:13,701 --> 01:03:15,400
Thank you, everyone,
for coming.

1500
01:03:15,400 --> 01:03:18,434
[applause]

