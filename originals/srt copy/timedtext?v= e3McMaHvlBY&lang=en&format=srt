1
00:00:03,149 --> 00:00:07,009
Hi, my name is Brian Kennish.
I'm a developer advocate on the Google Chrome

2
00:00:07,009 --> 00:00:08,719
team.
And I'm going to show you how to build Google

3
00:00:08,719 --> 00:00:11,700
Chrome Extensions.
We'll start out with an overview of extension

4
00:00:11,700 --> 00:00:13,759
building.
Then, we'll walk through some code and put

5
00:00:13,759 --> 00:00:17,400
together an example step by step.
But before we get to the technical stuff,

6
00:00:17,400 --> 00:00:20,869
let's talk about what extensions are.
Google Chrome Extensions are mostly small

7
00:00:20,869 --> 00:00:23,570
programs that add bits of functionality to
Google Chrome.

8
00:00:23,570 --> 00:00:28,779
They install instantly without a browser restart.
And, like Google Chrome, they update silently

9
00:00:28,779 --> 00:00:32,329
when new versions are available.
We designed the extension system with web

10
00:00:32,329 --> 00:00:35,810
developers in mind.
If you can create webpages, you know pretty

11
00:00:35,810 --> 00:00:38,160
much all you need to know to create Google
Chrome extensions.

12
00:00:38,160 --> 00:00:45,100
In fact, extensions are implemented with nothing
but standard web technologies -- HTML, CSS,

13
00:00:45,100 --> 00:00:48,530
JavaScript, and so on.
An extension is a compressed directory -- a

14
00:00:48,530 --> 00:00:51,830
signed zip, to be exact -- with a bunch of
web files in it.

15
00:00:51,830 --> 00:00:55,620
The one file every extension has to have is
a manifest file.

16
00:00:55,620 --> 00:01:00,110
It's also the one file that has to have a
particular name, which is "manifest.json".

17
00:01:00,110 --> 00:01:04,350
As the name implies, the manifest file is
JSON-formatted data -- specifically, metadata

18
00:01:04,350 --> 00:01:09,140
that describes the extension, lists permissions,
and points to the extension's other components.

19
00:01:09,140 --> 00:01:12,550
Those components are what give the extension
its functionality.

20
00:01:12,550 --> 00:01:16,060
An extension includes one or more of the following
components.

21
00:01:16,060 --> 00:01:19,990
Browser actions and page actions are the two
UI surfaces the extension system ships with

22
00:01:19,990 --> 00:01:23,280
initially.
A browser action appears in the toolbar of

23
00:01:23,280 --> 00:01:26,820
every tab.
A page action selectively appears in the omnibox

24
00:01:26,820 --> 00:01:31,500
and can be toggled on or off for each tab.
An extension can only have one UI surface

25
00:01:31,500 --> 00:01:34,590
or the other.
We'd like to encourage extension developers

26
00:01:34,590 --> 00:01:38,310
to be as minimal in their design decisions
as the Google Chrome team is.

27
00:01:38,310 --> 00:01:43,560
Content scripts are arbitrary CSS and JavaScript
that are injected into selected pages.

28
00:01:43,560 --> 00:01:48,049
They're similar to user scripts and can be
used as a UI alternative to browser and page

29
00:01:48,049 --> 00:01:50,610
actions.
Background pages are long-running scripts

30
00:01:50,610 --> 00:01:55,040
that help you manage state and coordinate
tasks across extension components.

31
00:01:55,040 --> 00:01:58,970
As an extension gets more complex, it tends
to need a background page.

32
00:01:58,970 --> 00:02:03,280
In addition to these components that are specific
to Google Chrome Extensions, you can bundle

33
00:02:03,280 --> 00:02:09,549
any other web files with your extension -- images,
JavaScript libraries, Flash movies, whatever

34
00:02:09,549 --> 00:02:14,370
it is your extension needs.
The extension API is small and easy to learn.

35
00:02:14,370 --> 00:02:19,209
It currently defines about 40 objects and
40 methods.

36
00:02:19,209 --> 00:02:23,269
"chrome" is the name of the top-level object
automatically exposed to all extensions.

37
00:02:23,269 --> 00:02:28,779
The API is split into six modules, which are
represented by objects contained in the "chrome"

38
00:02:28,779 --> 00:02:32,659
object.
"chrome.extension" has properties and methods

39
00:02:32,659 --> 00:02:37,329
that let you send messages to communicate
between extension components and resolve the

40
00:02:37,329 --> 00:02:41,969
URLs of extension files.
"chrome.browserAction" lets you set the appearance

41
00:02:41,969 --> 00:02:46,769
of browser actions and their badges, which
are mini text areas overlaid on browser actions.

42
00:02:46,769 --> 00:02:51,269
"chrome.pageAction" lets you enable and disable
page actions.

43
00:02:51,269 --> 00:02:55,359
"chrome.windows" lets you open, close, look
up, and update browser windows.

44
00:02:55,359 --> 00:02:59,189
It requires "tabs" permission in your manifest
file.

45
00:02:59,189 --> 00:03:03,450
That's not a typo -- windows and tabs are
so closely related they share a common permission.

46
00:03:03,450 --> 00:03:07,389
"chrome.tabs" lets you perform the same actions
on tabs.

47
00:03:07,389 --> 00:03:11,569
It also requires "tabs" permission.
And "chrome.bookmarks" lets you read from

48
00:03:11,569 --> 00:03:15,870
and write to the user's bookmark tree and
requires "bookmarks" permission.

49
00:03:15,870 --> 00:03:18,859
Now, let's try this stuff out by iteratively
developing an extension.

50
00:03:18,859 --> 00:03:22,919
Our extension will be a Google Chrome Twitter
client, which we'll call Chritter.

51
00:03:22,919 --> 00:03:26,340
First, we'll give the extension a basic, “hello
world”-type UI.

52
00:03:26,340 --> 00:03:30,659
Of course, we need a manifest file.
In it, we specify the extension's name, version

53
00:03:30,659 --> 00:03:35,760
number, description, and icon.
For the UI part, we're going to pick a browser

54
00:03:35,760 --> 00:03:38,849
action because, well, we want our tweets handy
at all times!

55
00:03:38,849 --> 00:03:42,980
We populate the browser-action fields with
an icon that will appear in the toolbar, a

56
00:03:42,980 --> 00:03:46,989
tooltip that will appear when the user mouses
over the icon, and a popup bubble that will

57
00:03:46,989 --> 00:03:52,299
appear when the user clicks on the icon.
For now, the popup is a trivial HTML file.

58
00:03:52,299 --> 00:03:59,299
After installing our extension, we get -- as
advertised -- an icon, a tooltip, and a popup.

59
00:03:59,299 --> 00:04:02,299
The popup asks: "Wouldn't it be nice to see
some tweets here?"

60
00:04:02,299 --> 00:04:04,760
And I think it would be nice, so let's add
some!

61
00:04:04,760 --> 00:04:09,329
We'll do so by fetching Twitter's public timeline
with XMLHttpRequest.

62
00:04:09,329 --> 00:04:14,139
Back in our manifest file, we ask for permission
to make cross-origin requests to twitter.com

63
00:04:14,139 --> 00:04:18,400
so we can access Twitter's API.
We ask for "tabs" permission, as well, so

64
00:04:18,400 --> 00:04:22,949
we can open UI links in new tabs.
And in our popup file, we beef up the HTML

65
00:04:22,949 --> 00:04:28,330
by inserting a title and a template to present
the attributes of each tweet -- a link to

66
00:04:28,330 --> 00:04:33,650
the user's profile, their image and name,
and the tweet itself.

67
00:04:33,650 --> 00:04:36,699
We also have new JavaScript for retrieving
and displaying the timeline.

68
00:04:36,699 --> 00:04:40,530
When the load event fires, we run an "init"
function to grab references to the different

69
00:04:40,530 --> 00:04:44,930
template elements via XPath.
That function hands control over to another

70
00:04:44,930 --> 00:04:50,090
function to do the XHR work.
"getTweets" issues a simple request for a

71
00:04:50,090 --> 00:04:55,770
JSON feed, and in turn, hands control over
to the callback function "processTweets".

72
00:04:55,770 --> 00:05:02,180
The processing function deserializes the incoming
JSON using V8's builtin JSON support and stores

73
00:05:02,180 --> 00:05:06,159
the result in an array.
Iterating through the array of tweets, the

74
00:05:06,159 --> 00:05:11,729
"update" function assigns each template attribute
and appends the marked-up tweet to the popup.

75
00:05:11,729 --> 00:05:16,430
Our extension has a lot more going on now,
with a polished UI and the most recent public

76
00:05:16,430 --> 00:05:20,220
tweets to show off.
Our implementation isn't ideal, though.

77
00:05:20,220 --> 00:05:23,840
As a last step, let's improve the extension's
performance and functionality by refactoring

78
00:05:23,840 --> 00:05:26,599
our code.
Namely, we should turn our popup into a dumb

79
00:05:26,599 --> 00:05:31,169
view so it only knows how to update its display
and offload the rest of the work to a background

80
00:05:31,169 --> 00:05:33,220
page.
We'll go ahead and add a background page to

81
00:05:33,220 --> 00:05:36,900
our manifest.
Then, we can strip the XHR code out of our

82
00:05:36,900 --> 00:05:39,150
popup.
In place of that code, we throw in a reference

83
00:05:39,150 --> 00:05:43,180
to the background page, which is returned
by the "getBackgroundPage" method.

84
00:05:43,180 --> 00:05:47,180
The popup doesn't collect tweets anymore,
so we use the background reference to iterate

85
00:05:47,180 --> 00:05:52,139
through the available tweets instead.
We move the XHR code to its new digs in the

86
00:05:52,139 --> 00:05:55,120
background page, but not without a couple
upgrades.

87
00:05:55,120 --> 00:05:58,650
I mentioned we could improve performance and
functionality and here's where we will.

88
00:05:58,650 --> 00:06:02,650
Since the background page isn't tied to any
DOM event, the page can fetch tweets on a

89
00:06:02,650 --> 00:06:05,460
continuous loop.
That way, we can batch tweets up and have

90
00:06:05,460 --> 00:06:07,539
them ready before the user even invokes the
popup.

91
00:06:07,539 --> 00:06:13,599
We specify a frequency for fetching -- 10
seconds for demo purposes -- and manage the

92
00:06:13,599 --> 00:06:18,139
process with the "setInterval" method.
While we're at it, we can also spiff up the

93
00:06:18,139 --> 00:06:21,370
UI.
We now have a variable number of batched tweets,

94
00:06:21,370 --> 00:06:24,960
which is a perfect candidate for display with
a browser-action badge.

95
00:06:24,960 --> 00:06:30,389
We style the badge with "setBadgeBackgroundColor"
and pass in the number of unread tweets with

96
00:06:30,389 --> 00:06:34,020
"setBadgeText".
Our extension doesn't look a whole lot different

97
00:06:34,020 --> 00:06:36,590
right away.
But if we let it think for a bit, we see a

98
00:06:36,590 --> 00:06:41,659
badge that dynamically updates the tweet count.
The popup should work identically, although

99
00:06:41,659 --> 00:06:45,210
we potentially have a lot more tweets to scroll
through now.

100
00:06:45,210 --> 00:06:48,550
While this version of Chritter makes for a
nice toy, there are some features we'd want

101
00:06:48,550 --> 00:06:52,270
to add for it to be truly useful.
On the top of that list would be incorporating

102
00:06:52,270 --> 00:06:55,990
the user's friend timeline -- rather than
the public timeline -- which would require

103
00:06:55,990 --> 00:06:59,949
baking OAuth into the extension.
Things can get a little hairy there.

104
00:06:59,949 --> 00:07:03,240
Luckily, we've already done the heavy lifting
for you and have an example of Chritter with

105
00:07:03,240 --> 00:07:06,659
OAuth support.
We also have a further example that handles

106
00:07:06,659 --> 00:07:10,849
custom autoupdating.
To download that code, the code you just saw,

107
00:07:10,849 --> 00:07:17,139
and more, go to code.google.com/chrome/extensions.
Thanks for watching and have fun building

108
00:07:17,139 --> 00:07:18,330
Google Chrome Extensions!

