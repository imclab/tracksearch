1
00:00:00,000 --> 00:00:01,290

2
00:00:01,290 --> 00:00:01,580
PAUL IRISH: All right.

3
00:00:01,580 --> 00:00:04,560
Good morning, good evening,
good afternoon.

4
00:00:04,560 --> 00:00:06,670
BORIS SMUS: What's up?

5
00:00:06,670 --> 00:00:09,030
PAUL IRISH: We're bringing to
you the first installment of

6
00:00:09,030 --> 00:00:13,100
what we're going to be calling
HTML5 Rocks Live, a video

7
00:00:13,100 --> 00:00:14,915
series talking about--

8
00:00:14,915 --> 00:00:16,590
ERIC BIDELMAN: What are we
going to talk about?

9
00:00:16,590 --> 00:00:17,430
PAUL IRISH: I don't know.

10
00:00:17,430 --> 00:00:18,070
BORIS SMUS: Everything.

11
00:00:18,070 --> 00:00:18,520
PAUL IRISH: Building web apps.

12
00:00:18,520 --> 00:00:19,760
BORIS SMUS: Building web apps.

13
00:00:19,760 --> 00:00:24,910
PAUL IRISH: What's new in the
browser, and how to do amazing

14
00:00:24,910 --> 00:00:26,554
things inside the browser,
I guess.

15
00:00:26,554 --> 00:00:28,740
BORIS SMUS: How to do that.

16
00:00:28,740 --> 00:00:29,570
PAUL IRISH: Today, we
have a few things

17
00:00:29,570 --> 00:00:30,670
we're going to show.

18
00:00:30,670 --> 00:00:34,570
We're going to talk about the
new Vertical Timeline in

19
00:00:34,570 --> 00:00:37,700
Chrome Developer tools, we're
going to talk about Device

20
00:00:37,700 --> 00:00:41,810
Detection, and then we're also
going to talk about the File

21
00:00:41,810 --> 00:00:44,550
System API, and some
new stuff for that.

22
00:00:44,550 --> 00:00:44,860
ERIC BIDELMAN: Before
we do that, we

23
00:00:44,860 --> 00:00:46,095
should introduce ourselves.

24
00:00:46,095 --> 00:00:46,400
PAUL IRISH: Sounds good.

25
00:00:46,400 --> 00:00:47,900
BORIS SMUS: Good point.

26
00:00:47,900 --> 00:00:49,580
ERIC BIDELMAN: So who
are you, fine sir?

27
00:00:49,580 --> 00:00:50,720
PAUL IRISH: My name
is Paul Irish.

28
00:00:50,720 --> 00:00:53,710
We're all on the Chrome
Developer Relations team.

29
00:00:53,710 --> 00:00:57,990
I like to focus on the Chrome
Developer Tools and

30
00:00:57,990 --> 00:01:02,070
Cross-browser, and all
sorts of good stuff.

31
00:01:02,070 --> 00:01:02,385
BORIS SMUS: My name is.

32
00:01:02,385 --> 00:01:03,170
Boris.

33
00:01:03,170 --> 00:01:07,350
I mostly the focus on mobile
stuff and used to be on

34
00:01:07,350 --> 00:01:08,525
Extensions.

35
00:01:08,525 --> 00:01:09,505
ERIC BIDELMAN: What's
up, everybody?

36
00:01:09,505 --> 00:01:11,280
My name's Eric Bidelman, also
[? on Chrome Developer ?]

37
00:01:11,280 --> 00:01:16,350
Relations, focusing mainly
on HTML5 awesomeness for

38
00:01:16,350 --> 00:01:17,790
building web apps.

39
00:01:17,790 --> 00:01:19,540
PAUL IRISH: Right.

40
00:01:19,540 --> 00:01:23,420
So first, I think we'll
just go right into it.

41
00:01:23,420 --> 00:01:26,290
I want to show off some new
features inside the Chrome Dev

42
00:01:26,290 --> 00:01:28,404
Tools, and so what I'm going
to do is I'm just going to

43
00:01:28,404 --> 00:01:29,654
share my screen.

44
00:01:29,654 --> 00:01:33,010

45
00:01:33,010 --> 00:01:33,700
It should be good.

46
00:01:33,700 --> 00:01:34,550
Cool.

47
00:01:34,550 --> 00:01:38,510
So I wanted to show some new
stuff, and so what I'm going

48
00:01:38,510 --> 00:01:42,040
to do is actually going to use a
demo that was written by the

49
00:01:42,040 --> 00:01:46,530
government called Hakim,
who goes by hakimel

50
00:01:46,530 --> 00:01:48,300
on Twitter and GetHub.

51
00:01:48,300 --> 00:01:50,560
Really good stuff, and so this
is a little tricky because

52
00:01:50,560 --> 00:01:53,590
you're going to be watching it
and the frame rate won't be so

53
00:01:53,590 --> 00:01:57,106
hot, and it's all about smooth
graphics, but you're just

54
00:01:57,106 --> 00:02:00,390
going to have to bear
with me here.

55
00:02:00,390 --> 00:02:03,860
So what this is, is a little
demo where we can scroll

56
00:02:03,860 --> 00:02:08,500
through a list of items and
there is a visual effect as

57
00:02:08,500 --> 00:02:13,050
the items kind of scroll
into view.

58
00:02:13,050 --> 00:02:13,980
Pretty cool.

59
00:02:13,980 --> 00:02:18,762
And so Hakim released this
sometime last week, and

60
00:02:18,762 --> 00:02:20,350
everyone was really into it.

61
00:02:20,350 --> 00:02:22,490
As so I was looking at the code
behind it and I was like,

62
00:02:22,490 --> 00:02:23,440
hm, this is cool.

63
00:02:23,440 --> 00:02:25,220
And I was wondering if we could
actually make it any

64
00:02:25,220 --> 00:02:26,800
smoother at all.

65
00:02:26,800 --> 00:02:31,275
I learned a few things about how
Chrome deals with hardware

66
00:02:31,275 --> 00:02:33,240
accelerated graphics
and was like--

67
00:02:33,240 --> 00:02:35,395
ERIC BIDELMAN: Did you see like
visual jank, and were you

68
00:02:35,395 --> 00:02:36,520
actively investigating?

69
00:02:36,520 --> 00:02:36,890
PAUL IRISH: Yeah.

70
00:02:36,890 --> 00:02:38,390
ERIC BIDELMAN: It's a
great demo, but--

71
00:02:38,390 --> 00:02:40,560
PAUL IRISH: Yeah,
I mean, I did.

72
00:02:40,560 --> 00:02:43,990
So we call it jank oftentimes
inside the team.

73
00:02:43,990 --> 00:02:48,320
Jank is just like stuttering
and the absence of buttery

74
00:02:48,320 --> 00:02:49,570
smoothness.

75
00:02:49,570 --> 00:02:52,180

76
00:02:52,180 --> 00:02:53,000
BORIS SMUS: Devoid of.

77
00:02:53,000 --> 00:02:55,560
PAUL IRISH: Yeah, exactly.

78
00:02:55,560 --> 00:02:58,150
So it was good, but I was like,
I think we can get it a

79
00:02:58,150 --> 00:02:59,080
little bit better.

80
00:02:59,080 --> 00:03:01,775
So I'm going to show you a new
tool inside the Chrome Dev

81
00:03:01,775 --> 00:03:04,450
Tools that we're going to use
to kind of explore this.

82
00:03:04,450 --> 00:03:08,090

83
00:03:08,090 --> 00:03:10,530
So you'll see it here.

84
00:03:10,530 --> 00:03:12,940
Right inside the Timelines
Panel on the Timelines,

85
00:03:12,940 --> 00:03:16,790
there's these two buttons right
underneath Resources.

86
00:03:16,790 --> 00:03:19,780
And it doesn't look like it's
very much now, but we'll see

87
00:03:19,780 --> 00:03:20,350
it in a little bit.

88
00:03:20,350 --> 00:03:24,410
Now right now to enable this,
you're going to have to do a

89
00:03:24,410 --> 00:03:25,900
little bit funky stuff.

90
00:03:25,900 --> 00:03:28,480
You're going to go to About
Flags, where you can turn on

91
00:03:28,480 --> 00:03:31,930
all sorts of good stuff, and
you're going to search for

92
00:03:31,930 --> 00:03:34,930
Developer Tool Experiments.

93
00:03:34,930 --> 00:03:36,550
You enable that.

94
00:03:36,550 --> 00:03:40,710
And then back inside your Dev
Tools, you click on Settings

95
00:03:40,710 --> 00:03:43,900
and down at the bottom is all
this cool experiments.

96
00:03:43,900 --> 00:03:46,890
Now of course, all this stuff is
kind of super experimental.

97
00:03:46,890 --> 00:03:49,580
If it breaks, too bad.

98
00:03:49,580 --> 00:03:51,880
But this is the new Vertical
Overview Mode in

99
00:03:51,880 --> 00:03:52,800
the Timeline Panel.

100
00:03:52,800 --> 00:03:55,860
And you'll be seeing it
soon anyways, but

101
00:03:55,860 --> 00:03:58,480
here's what it does.

102
00:03:58,480 --> 00:04:01,280
First, I'm going to keep it
off, and I'm just going to

103
00:04:01,280 --> 00:04:07,150
record, and I'll go down and
scroll a little bit.

104
00:04:07,150 --> 00:04:09,100
OK, cool.

105
00:04:09,100 --> 00:04:13,350
Stop recording, and now I can
click and I can drag, and I

106
00:04:13,350 --> 00:04:14,840
can see some things.

107
00:04:14,840 --> 00:04:17,329
Mostly, it just paints all along
the side, and we can see

108
00:04:17,329 --> 00:04:21,810
how big the paints are,
here's a scroll event.

109
00:04:21,810 --> 00:04:24,570
It looks like this scroll event
is actually taking up

110
00:04:24,570 --> 00:04:26,390
quite a bit of time.

111
00:04:26,390 --> 00:04:29,280
How long is this?

112
00:04:29,280 --> 00:04:32,940
211 milliseconds for the
entire duration.

113
00:04:32,940 --> 00:04:35,410
ERIC BIDELMAN: So Paul, is that
the call-back for the

114
00:04:35,410 --> 00:04:37,230
scroll, or what is that?

115
00:04:37,230 --> 00:04:37,950
PAUL IRISH: Yeah.

116
00:04:37,950 --> 00:04:41,550
The self time of the actual
event itself is very, very

117
00:04:41,550 --> 00:04:44,880
small, but what it does
is considerable.

118
00:04:44,880 --> 00:04:47,810
So that one scroll event
kicks off a lot of

119
00:04:47,810 --> 00:04:49,460
Recalculate Style Layout.

120
00:04:49,460 --> 00:04:52,740
So Recalculate Style Layout is
basically, we're matching all

121
00:04:52,740 --> 00:04:57,710
the CSS against the DOM, and
then recalculating all the

122
00:04:57,710 --> 00:04:59,200
geometry of the page.

123
00:04:59,200 --> 00:05:03,080
And when you see Recalc Style
followed by Layout, and that

124
00:05:03,080 --> 00:05:06,670
pair going back and forth,
there's usually an ability to

125
00:05:06,670 --> 00:05:07,860
optimize that.

126
00:05:07,860 --> 00:05:10,350
So we're going to look into
what we can do there.

127
00:05:10,350 --> 00:05:11,855
ERIC BIDELMAN: So that's
sort of an instant red

128
00:05:11,855 --> 00:05:12,860
flag on your web app?

129
00:05:12,860 --> 00:05:14,346
PAUL IRISH: Yeah, exactly.

130
00:05:14,346 --> 00:05:16,740
BORIS SMUS: So could you talk a
little bit about the yellow

131
00:05:16,740 --> 00:05:20,450
bar has the bright yellow and
then the less bright yellow?

132
00:05:20,450 --> 00:05:21,010
PAUL IRISH: Oh yeah.

133
00:05:21,010 --> 00:05:23,070
The beginning is the
self time, right?

134
00:05:23,070 --> 00:05:25,110
So if I'm highlighting over
here and we have the self

135
00:05:25,110 --> 00:05:30,220
time, it's basically that
sometimes you'll see this.

136
00:05:30,220 --> 00:05:31,330
You'll see this with
event handlers.

137
00:05:31,330 --> 00:05:35,670
You'll also see this
with Ajax.

138
00:05:35,670 --> 00:05:38,760
What the actual event was is the
very beginning, and then

139
00:05:38,760 --> 00:05:44,180
it's effect is captured by the
whole thing, so the scroll

140
00:05:44,180 --> 00:05:46,560
handler and all its effects.

141
00:05:46,560 --> 00:05:48,050
PAUL IRISH: So what I'm actually
going to do is I'm

142
00:05:48,050 --> 00:05:49,890
going to clear this out,
we'll switch over to

143
00:05:49,890 --> 00:05:53,960
Vertical, and record.

144
00:05:53,960 --> 00:05:57,530
Now, it's a little
bit different.

145
00:05:57,530 --> 00:05:58,870
ERIC BIDELMAN: Oh that's nice.

146
00:05:58,870 --> 00:06:02,450
PAUL IRISH: So I'm going to do
that once more, because I'm--

147
00:06:02,450 --> 00:06:03,700
here we go.

148
00:06:03,700 --> 00:06:08,070

149
00:06:08,070 --> 00:06:11,350
So this is a much different
view, right?

150
00:06:11,350 --> 00:06:12,890
These are all frames.

151
00:06:12,890 --> 00:06:17,320
So one thing you'll notice is
along the top is a time from

152
00:06:17,320 --> 00:06:23,040
zero to four seconds, but if
we zoom in to the frames,

153
00:06:23,040 --> 00:06:26,270
you'll see that the time
scale is actually the

154
00:06:26,270 --> 00:06:28,430
length of each frame.

155
00:06:28,430 --> 00:06:33,580
And what's the optimized, best
frame rate that we could have?

156
00:06:33,580 --> 00:06:34,010
ERIC BIDELMAN: 60.

157
00:06:34,010 --> 00:06:34,640
BORIS SMUS: 60.

158
00:06:34,640 --> 00:06:35,760
PAUL IRISH: 60 frames
per second.

159
00:06:35,760 --> 00:06:37,260
And how many milliseconds
per frame is that?

160
00:06:37,260 --> 00:06:39,370
BORIS SMUS: 16.66 repeated.

161
00:06:39,370 --> 00:06:40,568
PAUL IRISH: Correct.

162
00:06:40,568 --> 00:06:42,062
ERIC BIDELMAN: Were you
a math major, Paul?

163
00:06:42,062 --> 00:06:43,058
This is good, man.

164
00:06:43,058 --> 00:06:44,560
PAUL IRISH: Blue ribbon.

165
00:06:44,560 --> 00:06:51,580
So in an ideal world, you have
16.6 milliseconds per frame,

166
00:06:51,580 --> 00:06:52,710
nothing more.

167
00:06:52,710 --> 00:06:55,910
And your entire everything
just happens inside 16

168
00:06:55,910 --> 00:06:58,340
milliseconds.

169
00:06:58,340 --> 00:07:01,070
Now, it happens that you
take more than this.

170
00:07:01,070 --> 00:07:04,150
And so we've just dived in,
and we can see that these

171
00:07:04,150 --> 00:07:09,290
frames are actually taking
40, 60, 100, 80--

172
00:07:09,290 --> 00:07:12,220
they're are a lot more
than just that 16.

173
00:07:12,220 --> 00:07:13,820
But we're able to see
exactly what is

174
00:07:13,820 --> 00:07:16,280
happening inside that time.

175
00:07:16,280 --> 00:07:19,180
So we have a scroll event and
it's doing a bunch of stuff,

176
00:07:19,180 --> 00:07:22,430
and so I can click in and see
what's going on inside that

177
00:07:22,430 --> 00:07:23,130
scroll event.

178
00:07:23,130 --> 00:07:29,230
So there's a lot of things
happening, but it looks like--

179
00:07:29,230 --> 00:07:31,415
ERIC BIDELMAN: Sorry, were
you projecting that?

180
00:07:31,415 --> 00:07:33,310
Are we projecting the
screen right now?

181
00:07:33,310 --> 00:07:38,070
PAUL IRISH: No, but we'll
switch over to that.

182
00:07:38,070 --> 00:07:43,590
So this is Scripts Panel, but
I'm just going to bring this

183
00:07:43,590 --> 00:07:48,740
up inside my Code Editor
so everyone can see it.

184
00:07:48,740 --> 00:07:53,010
We have a Scroll Handler that
is bound to Update, and in

185
00:07:53,010 --> 00:07:57,370
Update, we do all this magic.

186
00:07:57,370 --> 00:08:00,680
And that's good, but one thing
that I learned a few months

187
00:08:00,680 --> 00:08:03,410
ago is it's actually quite
bad to bind to

188
00:08:03,410 --> 00:08:05,210
either Scroll or Resize.

189
00:08:05,210 --> 00:08:09,620
Those events fire quite a bit,
and typically, you'll be

190
00:08:09,620 --> 00:08:13,990
binding those so that you can
update the UI of the page.

191
00:08:13,990 --> 00:08:19,230
But we have a first class API
designed for redrawing the UI

192
00:08:19,230 --> 00:08:22,880
of the page when the browser's
ready, which is called--

193
00:08:22,880 --> 00:08:24,250
ERIC BIDELMAN: RAF,
RequestAnimationFrame,

194
00:08:24,250 --> 00:08:24,890
everybody's best friend.

195
00:08:24,890 --> 00:08:26,765
PAUL IRISH: Yeah,
RequestAnimationFrame or RAF,

196
00:08:26,765 --> 00:08:27,920
as we abbreviate it.

197
00:08:27,920 --> 00:08:28,440
ERIC BIDELMAN: So let me
ask you a question.

198
00:08:28,440 --> 00:08:33,020
The Scroll and Resize, those
always fire quite more often

199
00:08:33,020 --> 00:08:36,730
than 16 FPS, right?

200
00:08:36,730 --> 00:08:37,320
No, or?

201
00:08:37,320 --> 00:08:38,289
PAUL IRISH: They fire a lot.

202
00:08:38,289 --> 00:08:40,120
ERIC BIDELMAN: They fire away
more than you should be

203
00:08:40,120 --> 00:08:42,150
updating UI, right?

204
00:08:42,150 --> 00:08:43,504
PAUL IRISH: Browser engineers
really just don't like it when

205
00:08:43,504 --> 00:08:45,430
you bind them.

206
00:08:45,430 --> 00:08:47,540
ERIC BIDELMAN: Users just don't
either, because that

207
00:08:47,540 --> 00:08:51,820
means there's jank, word of the
day, inside of your app.

208
00:08:51,820 --> 00:08:53,760
PAUL IRISH: So what we're going
to do is we're going to

209
00:08:53,760 --> 00:08:55,070
change the implementation.

210
00:08:55,070 --> 00:08:56,850
Instead of binding to
Scroll, we're just

211
00:08:56,850 --> 00:08:58,060
going to bind to RAF.

212
00:08:58,060 --> 00:09:01,090
So the browser's going to
optimize that to 60

213
00:09:01,090 --> 00:09:02,420
frames if it can.

214
00:09:02,420 --> 00:09:06,250
So I'm going to take this scroll
event, and I'm going to

215
00:09:06,250 --> 00:09:10,000
copy in a little
RequestAnimationFrame shim,

216
00:09:10,000 --> 00:09:20,080
and then I'm going to replace
the scroll with some RAF loop.

217
00:09:20,080 --> 00:09:23,950
So this is just a recursive
loop to call

218
00:09:23,950 --> 00:09:25,200
RequestAnimationFrame.

219
00:09:25,200 --> 00:09:27,020

220
00:09:27,020 --> 00:09:29,180
ERIC BIDELMAN: So for those
not familiar with

221
00:09:29,180 --> 00:09:31,500
RequestAnimationFrame,
I'm not seeing a--

222
00:09:31,500 --> 00:09:32,740
so set time out, right?

223
00:09:32,740 --> 00:09:35,980
People use set time out, there's
a time that you recall

224
00:09:35,980 --> 00:09:37,240
your callback.

225
00:09:37,240 --> 00:09:38,760
That's not the case with
RequestAnimationFrame?

226
00:09:38,760 --> 00:09:41,310
Can you explain that
a little bit?

227
00:09:41,310 --> 00:09:43,795
PAUL IRISH: Well, it
is a callback.

228
00:09:43,795 --> 00:09:45,440
ERIC BIDELMAN: Yeah, but you're
not [? parsing ?] an

229
00:09:45,440 --> 00:09:47,240
explicit time that you're
calling the callback?

230
00:09:47,240 --> 00:09:47,630
PAUL IRISH: Yeah.

231
00:09:47,630 --> 00:09:50,120
You're just saying,
hey, browser, you

232
00:09:50,120 --> 00:09:51,490
take care of this.

233
00:09:51,490 --> 00:09:53,740
This is the function that I
want to be called, and you

234
00:09:53,740 --> 00:09:56,280
call it as much as you can.

235
00:09:56,280 --> 00:09:59,240
And one of the things that's
happening is the browser's

236
00:09:59,240 --> 00:10:00,030
starting to get smart.

237
00:10:00,030 --> 00:10:02,590
So if your callback starts to
take so much time, it's

238
00:10:02,590 --> 00:10:04,460
actually going to optimize
your animation

239
00:10:04,460 --> 00:10:06,040
for 30 frames a second.

240
00:10:06,040 --> 00:10:08,860
So you're always blowing past
the 16.6 milliseconds, but

241
00:10:08,860 --> 00:10:11,250
it's going to say, hey,
we're just going to be

242
00:10:11,250 --> 00:10:12,530
30 frames per second.

243
00:10:12,530 --> 00:10:16,110
Now, the big thing about these
30 and 60 numbers is that your

244
00:10:16,110 --> 00:10:18,980
monitor refreshes at 60 hertz.

245
00:10:18,980 --> 00:10:26,480
So Chrome is actually able to
make sure that your canvas, or

246
00:10:26,480 --> 00:10:30,180
your CSS, changes are being
painted to the screen and

247
00:10:30,180 --> 00:10:35,010
synchronized to the refresh
rate of the monitor, which

248
00:10:35,010 --> 00:10:39,250
means it's as smooth as it can
be, which is really powerful.

249
00:10:39,250 --> 00:10:43,960
So this is the best way to
get the best graphics.

250
00:10:43,960 --> 00:10:45,610
ERIC BIDELMAN: The other benefit
too is that if your

251
00:10:45,610 --> 00:10:49,070
app isn't visible to the user,
RequestAnimationFrame will

252
00:10:49,070 --> 00:10:51,710
stop calling that callback
altogether.

253
00:10:51,710 --> 00:10:54,910
So if the users can't see
something visually being

254
00:10:54,910 --> 00:10:57,310
updated on the page, then
there's no reason to waste

255
00:10:57,310 --> 00:10:58,440
that CPU [INAUDIBLE]

256
00:10:58,440 --> 00:11:00,290
extra calculation.

257
00:11:00,290 --> 00:11:00,600
That's another benefit.

258
00:11:00,600 --> 00:11:03,010
PAUL IRISH: So this is one of
the cool things on Chrome for

259
00:11:03,010 --> 00:11:05,740
Android is that Chrome for
Android is the first mobile

260
00:11:05,740 --> 00:11:08,290
browser that has
RequestAnimationFrame, so you

261
00:11:08,290 --> 00:11:10,420
have some [? cool ?]
canvas loop using

262
00:11:10,420 --> 00:11:13,720
RequestAnimationFrame and you
switch to another tab, that is

263
00:11:13,720 --> 00:11:14,760
not still running.

264
00:11:14,760 --> 00:11:16,010
[INAUDIBLE].

265
00:11:16,010 --> 00:11:17,720

266
00:11:17,720 --> 00:11:21,310
BORIS SMUS: So here, you're
not bound to any event

267
00:11:21,310 --> 00:11:24,190
handler, so this will rerender
all the time, regardless of if

268
00:11:24,190 --> 00:11:25,330
you're [INAUDIBLE]
or not, right?

269
00:11:25,330 --> 00:11:27,370
PAUL IRISH: Correct.

270
00:11:27,370 --> 00:11:28,910
ERIC BIDELMAN: Do
we like that?

271
00:11:28,910 --> 00:11:31,410
PAUL IRISH: No.

272
00:11:31,410 --> 00:11:31,770
Good question.

273
00:11:31,770 --> 00:11:33,870
This is a very naive
implementation.

274
00:11:33,870 --> 00:11:39,670
In an ideal world, we would have
scroll kicks off this RAF

275
00:11:39,670 --> 00:11:43,420
loop, and then at some point,
we like to bounce the scroll

276
00:11:43,420 --> 00:11:46,320
event, kick off RAF, and then
cancel out RAF when the

277
00:11:46,320 --> 00:11:47,190
scrolling is done.

278
00:11:47,190 --> 00:11:48,270
BORIS SMUS: Yeah, so we want
a time out or something.

279
00:11:48,270 --> 00:11:48,860
PAUL IRISH: Yeah.

280
00:11:48,860 --> 00:11:51,080
So there's a way to kind of like
have Scroll and Resize

281
00:11:51,080 --> 00:11:54,520
kick off RAF but
work together.

282
00:11:54,520 --> 00:11:55,750
ERIC BIDELMAN: So the
call [INAUDIBLE]

283
00:11:55,750 --> 00:11:58,660
is similar to Set Timeout, you
can cancel, you can request,

284
00:11:58,660 --> 00:12:00,845
it's just that time difference
that you're not [? parsing ?]

285
00:12:00,845 --> 00:12:01,100
in.

286
00:12:01,100 --> 00:12:02,300
PAUL IRISH: Yeah.

287
00:12:02,300 --> 00:12:04,430
So we'll go back to
the timeline.

288
00:12:04,430 --> 00:12:10,000
And now that I have RAF in,
before, you kind of see all

289
00:12:10,000 --> 00:12:13,900
these uneven bars, but there's
not a lot of context.

290
00:12:13,900 --> 00:12:17,990
Now with RAF in, I've saved,
I'm going to refresh.

291
00:12:17,990 --> 00:12:24,240

292
00:12:24,240 --> 00:12:28,710
And once it's in, I'm going to
record our new thing, and

293
00:12:28,710 --> 00:12:29,750
you'll see quite a bit of

294
00:12:29,750 --> 00:12:33,130
difference down in the timeline.

295
00:12:33,130 --> 00:12:34,790
So--

296
00:12:34,790 --> 00:12:35,090
ERIC BIDELMAN: Nice.

297
00:12:35,090 --> 00:12:36,890
PAUL IRISH: It's already
moving, and

298
00:12:36,890 --> 00:12:38,160
there's a lot of bars.

299
00:12:38,160 --> 00:12:42,590
So I'm not touching anything and
the bars are just going.

300
00:12:42,590 --> 00:12:45,570
And so you can see down here,
there's a lot of animation

301
00:12:45,570 --> 00:12:46,680
frames firing.

302
00:12:46,680 --> 00:12:53,350
So this is pretty cool, but what
we're able to see is that

303
00:12:53,350 --> 00:12:57,860
the browser is giving us an
indication of how long all

304
00:12:57,860 --> 00:13:00,030
these animation frames
are taking.

305
00:13:00,030 --> 00:13:02,830
And so we're able to see when
there's big spikes, that means

306
00:13:02,830 --> 00:13:05,760
that it's taking much longer
than it should and we're not

307
00:13:05,760 --> 00:13:07,310
able to hit our 60 frames
per second.

308
00:13:07,310 --> 00:13:10,090
So in an ideal world, 60 frames
per second means that

309
00:13:10,090 --> 00:13:14,191
all these bars are just
completely flat.

310
00:13:14,191 --> 00:13:15,800
But here, we have spikes.

311
00:13:15,800 --> 00:13:16,360
ERIC BIDELMAN: This is cool.

312
00:13:16,360 --> 00:13:17,570
So this is like a visual
representation of

313
00:13:17,570 --> 00:13:18,740
your code right now.

314
00:13:18,740 --> 00:13:18,930
PAUL IRISH: Yeah.

315
00:13:18,930 --> 00:13:21,370
And so these spikes
are jank, right?

316
00:13:21,370 --> 00:13:22,650
ERIC BIDELMAN: Yeah Let's
get rid of that.

317
00:13:22,650 --> 00:13:23,770
PAUL IRISH: So we're going
to kill that jank.

318
00:13:23,770 --> 00:13:28,500
So I'm just going to zoom in,
and you've really got to zoom

319
00:13:28,500 --> 00:13:30,980
in pretty close.

320
00:13:30,980 --> 00:13:33,350
So that looks pretty good.

321
00:13:33,350 --> 00:13:34,615
And I'm going to switch--

322
00:13:34,615 --> 00:13:46,280

323
00:13:46,280 --> 00:13:49,520
OK, this looks pretty good.

324
00:13:49,520 --> 00:13:52,850
We have this animation
frame, it fires, it

325
00:13:52,850 --> 00:13:56,010
takes quite a while.

326
00:13:56,010 --> 00:13:57,190
And we're going to look
into what's going on.

327
00:13:57,190 --> 00:14:00,565
We got Recalculate Style
going on inside

328
00:14:00,565 --> 00:14:02,045
of that, a few layouts.

329
00:14:02,045 --> 00:14:05,890
We click into the Recalculate
Style, and it points to this

330
00:14:05,890 --> 00:14:09,530
line in particular, which is
Offset Top, Offset Height.

331
00:14:09,530 --> 00:14:11,030
ERIC BIDELMAN: Uh-oh.

332
00:14:11,030 --> 00:14:12,220
PAUL IRISH: Yeah.

333
00:14:12,220 --> 00:14:15,720
There's a few DOM properties
that cause a reflow, and

334
00:14:15,720 --> 00:14:19,420
that's essentially what's
happening, is that the browser

335
00:14:19,420 --> 00:14:22,440
has to say, hey, I don't know
what the Offset Top and Offset

336
00:14:22,440 --> 00:14:24,330
Height is, but I need to
recalculate the entire

337
00:14:24,330 --> 00:14:28,810
geometry of the page in order
to give you, the JavaScript,

338
00:14:28,810 --> 00:14:31,600
an accurate number for
these two things.

339
00:14:31,600 --> 00:14:33,120
And it has to do this--

340
00:14:33,120 --> 00:14:36,660
actually the loop that it's in
is for every single item in

341
00:14:36,660 --> 00:14:41,852
this list on every
single frame.

342
00:14:41,852 --> 00:14:42,326
BORIS SMUS: Wow.

343
00:14:42,326 --> 00:14:43,748
ERIC BIDELMAN: It seems
really wasteful.

344
00:14:43,748 --> 00:14:44,700
PAUL IRISH: Totally wasteful.

345
00:14:44,700 --> 00:14:47,150
It turns out that Offset Top and
Offset Height do not even

346
00:14:47,150 --> 00:14:49,950
change for any of these
for the entire thing.

347
00:14:49,950 --> 00:14:51,315
ERIC BIDELMAN: This is why
it's hard to be a web

348
00:14:51,315 --> 00:14:53,350
developer right here,
this sort of thing.

349
00:14:53,350 --> 00:14:54,600
PAUL IRISH: That's true.

350
00:14:54,600 --> 00:14:56,660

351
00:14:56,660 --> 00:14:57,390
So let's see.

352
00:14:57,390 --> 00:15:01,020
I'll go to the next iteration.

353
00:15:01,020 --> 00:15:02,130
This is where this ended up.

354
00:15:02,130 --> 00:15:06,250
So I spent some time with this,
and we ended up here

355
00:15:06,250 --> 00:15:09,750
where we actually cache
some of these numbers.

356
00:15:09,750 --> 00:15:18,160
So the Scroll Top we cache,
and make sure that if the

357
00:15:18,160 --> 00:15:21,530
Scroll Top is not changed since
last time we went into

358
00:15:21,530 --> 00:15:25,800
this RAF loop, we just
quit immediately.

359
00:15:25,800 --> 00:15:28,800
And then we actually
do two loops.

360
00:15:28,800 --> 00:15:33,420
One loop we do to go and get the
Offset Tops, and then we

361
00:15:33,420 --> 00:15:36,860
do a second loop to go
make the changes.

362
00:15:36,860 --> 00:15:39,850
Now, the reason that we actually
do two loops is back

363
00:15:39,850 --> 00:15:42,490
on HTML5 Rocks a while ago, we
talked about reflows and

364
00:15:42,490 --> 00:15:45,430
optimizing for those, and we
talked about that pattern of

365
00:15:45,430 --> 00:15:48,130
Recalculate Style Layout,
Recalculate Style Layout.

366
00:15:48,130 --> 00:15:52,490
And here, we were asking for
what is the Offset Top, and

367
00:15:52,490 --> 00:15:56,850
immediately using Class List
to change the class of some

368
00:15:56,850 --> 00:15:58,360
DOM elements.

369
00:15:58,360 --> 00:16:00,680
And then we would just do that,
and then we'd do about

370
00:16:00,680 --> 00:16:02,550
100 per loop.

371
00:16:02,550 --> 00:16:04,990
And so that is totally
wasteful.

372
00:16:04,990 --> 00:16:07,420
So here, we're able to get all
of our information out of the

373
00:16:07,420 --> 00:16:10,740
DOM in one move, one pass, and
then make all of our changes

374
00:16:10,740 --> 00:16:14,540
in another pass, and that's
really the most optimized way

375
00:16:14,540 --> 00:16:15,550
to handle this.

376
00:16:15,550 --> 00:16:16,630
ERIC BIDELMAN: It's interesting
that something

377
00:16:16,630 --> 00:16:18,210
like two loops, you wouldn't--

378
00:16:18,210 --> 00:16:21,490
[INAUDIBLE] two loops would be
more efficient, oftentimes,

379
00:16:21,490 --> 00:16:24,340
than touching the DOM like you
would in single loop, but

380
00:16:24,340 --> 00:16:25,880
maybe that's something you
have to do, you have to

381
00:16:25,880 --> 00:16:26,905
consider that, right?

382
00:16:26,905 --> 00:16:28,250
DOM is the bottleneck here.

383
00:16:28,250 --> 00:16:30,180
PAUL IRISH: DOM is the
bottleneck, not two loops.

384
00:16:30,180 --> 00:16:33,970
I mean, I could make it do 10
loops, and that'd probably

385
00:16:33,970 --> 00:16:37,000
still be more effective than
the back and forth

386
00:16:37,000 --> 00:16:37,380
inside of the loop.

387
00:16:37,380 --> 00:16:39,060
ERIC BIDELMAN: [INAUDIBLE]
calculate a Fibonacci sequence

388
00:16:39,060 --> 00:16:40,065
in there someplace
or something?

389
00:16:40,065 --> 00:16:42,410
BORIS SMUS: Basically what
you're doing is you're getting

390
00:16:42,410 --> 00:16:44,907
the updates and then doing
the renders separately.

391
00:16:44,907 --> 00:16:46,340
PAUL IRISH: Yeah, exactly.

392
00:16:46,340 --> 00:16:49,260
BORIS SMUS: But how does a web
developer know which of these

393
00:16:49,260 --> 00:16:50,600
things cause a reflow?

394
00:16:50,600 --> 00:16:51,960
ERIC BIDELMAN: I was just
thinking of that.

395
00:16:51,960 --> 00:16:53,860
Like is there a best
practices?

396
00:16:53,860 --> 00:16:54,680
BORIS SMUS: [INAUDIBLE].

397
00:16:54,680 --> 00:16:56,420
PAUL IRISH: OK, so
that's fair.

398
00:16:56,420 --> 00:17:02,580
So one, you could be like, DOM
Properties That Cause Reflow.

399
00:17:02,580 --> 00:17:04,500
Just use your favorite search
engine and ask.

400
00:17:04,500 --> 00:17:07,930

401
00:17:07,930 --> 00:17:12,040
The best resource on this
is on this site.

402
00:17:12,040 --> 00:17:15,050
This is actually a Chrome
engineer, Tony.

403
00:17:15,050 --> 00:17:18,680
And he just looked into the Web
Kit source and found out

404
00:17:18,680 --> 00:17:21,310
that these are all the
properties, these are all the

405
00:17:21,310 --> 00:17:25,180
methods, and all these things
force the browser to go ask

406
00:17:25,180 --> 00:17:28,924
and they all force a
reflow, if you ask

407
00:17:28,924 --> 00:17:30,230
for all these things.

408
00:17:30,230 --> 00:17:35,650
So if you know that,
because you do.

409
00:17:35,650 --> 00:17:36,615
ERIC BIDELMAN: Step one.

410
00:17:36,615 --> 00:17:38,540
PAUL IRISH: And then you're over
here, you see Recalculate

411
00:17:38,540 --> 00:17:40,620
Style Layout, Recalculate
Style, and this actually

412
00:17:40,620 --> 00:17:42,980
pointing to a line number,
a file and line number.

413
00:17:42,980 --> 00:17:45,580
And I click 44, and
it highlights this

414
00:17:45,580 --> 00:17:47,800
line 44 right here.

415
00:17:47,800 --> 00:17:50,810
It's a pretty good indication.

416
00:17:50,810 --> 00:17:54,350
And so if I move over, this is
the new and updated one.

417
00:17:54,350 --> 00:17:57,280

418
00:17:57,280 --> 00:18:00,070
And I'll do a timeline
recording of this.

419
00:18:00,070 --> 00:18:08,100

420
00:18:08,100 --> 00:18:09,680
Good.

421
00:18:09,680 --> 00:18:14,140
Now, it's hard just to show on
the screen cast, but we're a

422
00:18:14,140 --> 00:18:17,340
little bit smoother,
and inside--

423
00:18:17,340 --> 00:18:19,250
yes, that's what I wanted.

424
00:18:19,250 --> 00:18:21,620
So we only have a single
Recalc Style and then a

425
00:18:21,620 --> 00:18:24,290
layout, as opposed to back and
forth and back and forth.

426
00:18:24,290 --> 00:18:27,420
So that's exactly what we want
to be able to see, is that

427
00:18:27,420 --> 00:18:31,910
we're only getting a single
one of each per frame.

428
00:18:31,910 --> 00:18:33,135
That is optimal.

429
00:18:33,135 --> 00:18:33,910
It's hard to get.

430
00:18:33,910 --> 00:18:35,000
ERIC BIDELMAN: So remind us what
we were seeing before.

431
00:18:35,000 --> 00:18:40,150
We were seeing orange mixed in
with purple, or were we seeing

432
00:18:40,150 --> 00:18:41,000
higher bars?

433
00:18:41,000 --> 00:18:48,290
PAUL IRISH: Yeah so yellow and
orange is script, and then

434
00:18:48,290 --> 00:18:49,550
purple is rendering.

435
00:18:49,550 --> 00:18:51,700
ERIC BIDELMAN: That's the
browser doing its thing,

436
00:18:51,700 --> 00:18:52,250
whatever [INAUDIBLE]?

437
00:18:52,250 --> 00:18:53,340
PAUL IRISH: Yeah.

438
00:18:53,340 --> 00:18:55,870
And so it's hard to sometimes
say what the rendering is,

439
00:18:55,870 --> 00:18:58,620
whereas the script is basically
always your code.

440
00:18:58,620 --> 00:19:01,460
But when we see this purple back
and forth back and forth

441
00:19:01,460 --> 00:19:05,170
Recalc Style Layout, that's
just a bad idea.

442
00:19:05,170 --> 00:19:08,260
So you're able to kind of do
these hovers here and see that

443
00:19:08,260 --> 00:19:12,720
we have a call stack, we're in
Update Anim Loop, and get an

444
00:19:12,720 --> 00:19:14,870
idea of where this
is happening.

445
00:19:14,870 --> 00:19:17,310
So the cool thing here is that
we're able to get some

446
00:19:17,310 --> 00:19:21,420
information from the Dev Tools
on what exactly and where

447
00:19:21,420 --> 00:19:24,080
exactly we can optimize
better.

448
00:19:24,080 --> 00:19:25,140
ERIC BIDELMAN: That's great that
I don't have to memorize

449
00:19:25,140 --> 00:19:28,136
all those properties, the Dev
Tools can help me there.

450
00:19:28,136 --> 00:19:31,570
Can you go back to the
timeline again?

451
00:19:31,570 --> 00:19:34,740
I just want to show people
that-- we talked a little

452
00:19:34,740 --> 00:19:36,910
about this before, but
RequestAnimationFrame is

453
00:19:36,910 --> 00:19:39,900
continuing to fire, regardless
if you're scrolling these

454
00:19:39,900 --> 00:19:40,640
lists or not.

455
00:19:40,640 --> 00:19:43,030
So it probably is one
of these best

456
00:19:43,030 --> 00:19:44,460
practices that you consider.

457
00:19:44,460 --> 00:19:46,740
If the user's not engaging
with your page, then you

458
00:19:46,740 --> 00:19:50,580
should probably cancel that and
not waste those callbacks.

459
00:19:50,580 --> 00:19:51,830
PAUL IRISH: Yeah.

460
00:19:51,830 --> 00:19:55,320

461
00:19:55,320 --> 00:19:57,750
The quicker that you're able
to say, I don't need what's

462
00:19:57,750 --> 00:20:01,140
going to happen inside this RAF
callback to happen, and

463
00:20:01,140 --> 00:20:04,260
just cancel out of that
loop, the better.

464
00:20:04,260 --> 00:20:06,150
And so that's [INAUDIBLE] we
ended up in this loop.

465
00:20:06,150 --> 00:20:06,500
BORIS SMUS: Right.

466
00:20:06,500 --> 00:20:08,367
But of course, if you
background it, it's

467
00:20:08,367 --> 00:20:09,480
not going to fire.

468
00:20:09,480 --> 00:20:09,640
PAUL IRISH: Yeah.

469
00:20:09,640 --> 00:20:11,980
And if you're in another tab,
you're totally good.

470
00:20:11,980 --> 00:20:15,110

471
00:20:15,110 --> 00:20:20,760
So you should Google for this
demo and check it out, because

472
00:20:20,760 --> 00:20:27,640
it's got a lot of other
community additions since the

473
00:20:27,640 --> 00:20:28,670
last week or so.

474
00:20:28,670 --> 00:20:30,760
ERIC BIDELMAN: It's called Silly
List Scroll Effects?

475
00:20:30,760 --> 00:20:31,070
PAUL IRISH: Yeah.

476
00:20:31,070 --> 00:20:35,130
I think it's actually since
been named to stroll.js.

477
00:20:35,130 --> 00:20:37,240
ERIC BIDELMAN: Of course
there's a .js for it.

478
00:20:37,240 --> 00:20:39,075
PAUL IRISH: Of course.

479
00:20:39,075 --> 00:20:40,960
ERIC BIDELMAN: That
was pretty rad.

480
00:20:40,960 --> 00:20:44,070
Unfortunately, the screen, the
hangout doesn't do it justice.

481
00:20:44,070 --> 00:20:45,580
PAUL IRISH: So go
check it out.

482
00:20:45,580 --> 00:20:49,000
And if you want, go find
his GetHub [? repo ?]

483
00:20:49,000 --> 00:20:52,080
and revert back to the very
original first commit, and

484
00:20:52,080 --> 00:20:53,960
then you'll be able to see the
difference between the

485
00:20:53,960 --> 00:20:56,520
original one with a considerable
amount of jank,

486
00:20:56,520 --> 00:20:59,040
and the new ones, which
are smooth.

487
00:20:59,040 --> 00:21:00,765
ERIC BIDELMAN: We
don't like jank.

488
00:21:00,765 --> 00:21:02,170
That's cool, man.

489
00:21:02,170 --> 00:21:05,540
Vertical Timeline, awesome.

490
00:21:05,540 --> 00:21:07,950
Again, in the Dev Tools
Experiments, right?

491
00:21:07,950 --> 00:21:09,830
So in by default yet, but--

492
00:21:09,830 --> 00:21:11,300
PAUL IRISH: Yep.

493
00:21:11,300 --> 00:21:11,970
BORIS SMUS: And this
is Canary, right?

494
00:21:11,970 --> 00:21:12,240
PAUL IRISH: Yeah.

495
00:21:12,240 --> 00:21:13,900
I'm trying this in Canary.

496
00:21:13,900 --> 00:21:16,900
And you have to turn on two
separate experimental

497
00:21:16,900 --> 00:21:17,730
flags to get it.

498
00:21:17,730 --> 00:21:20,000
But it'll probably be coming
out into the main release

499
00:21:20,000 --> 00:21:21,250
pretty soon.

500
00:21:21,250 --> 00:21:25,550

501
00:21:25,550 --> 00:21:30,000
Boris, do you want to show off
your cool device, device.js?

502
00:21:30,000 --> 00:21:30,780
BORIS SMUS: Sure, sure.

503
00:21:30,780 --> 00:21:31,940
ERIC BIDELMAN: What did
you make, Boris?

504
00:21:31,940 --> 00:21:33,170
BORIS SMUS: I made a library.

505
00:21:33,170 --> 00:21:35,880
PAUL IRISH: Yeah?

506
00:21:35,880 --> 00:21:36,660
BORIS SMUS: It's called--

507
00:21:36,660 --> 00:21:39,440
well, let me talk about maybe
briefly what sort of

508
00:21:39,440 --> 00:21:40,690
spurred this on.

509
00:21:40,690 --> 00:21:43,910

510
00:21:43,910 --> 00:21:47,640
So basically, you've probably
heard of Responsive Design.

511
00:21:47,640 --> 00:21:48,375
Yeah?

512
00:21:48,375 --> 00:21:50,220
You guys heard of Responsive
Design?

513
00:21:50,220 --> 00:21:52,520
ERIC BIDELMAN: I have. But
you could remind me.

514
00:21:52,520 --> 00:22:00,650
BORIS SMUS: So it's actually
pretty broad, but the basic

515
00:22:00,650 --> 00:22:04,370
idea of it is you use JSS Media
Queries to check the

516
00:22:04,370 --> 00:22:08,920
width of your device, and style
the page appropriately.

517
00:22:08,920 --> 00:22:10,950
So if you have a really
large screen, you

518
00:22:10,950 --> 00:22:11,880
make it all fit well.

519
00:22:11,880 --> 00:22:14,886
If you have a small screen, you
make it compress down and

520
00:22:14,886 --> 00:22:15,720
do the right thing.

521
00:22:15,720 --> 00:22:20,840
So there's a nice gallery
of pages that do this.

522
00:22:20,840 --> 00:22:22,470
If you go to Mediaquery.--

523
00:22:22,470 --> 00:22:26,180

524
00:22:26,180 --> 00:22:29,410
could you do that, Eric?

525
00:22:29,410 --> 00:22:32,030
Please type.

526
00:22:32,030 --> 00:22:35,170
I'll just turn the screen
share back on.

527
00:22:35,170 --> 00:22:40,580
Yes, so mediaquery.es is a nice
gallery of responsive--

528
00:22:40,580 --> 00:22:43,655
oh, it's actually one of those
funky Delicious URLs.

529
00:22:43,655 --> 00:22:46,160

530
00:22:46,160 --> 00:22:48,310
Probably not this one.

531
00:22:48,310 --> 00:22:50,480
Here.

532
00:22:50,480 --> 00:22:52,310
ERIC BIDELMAN: Boris, you have
to show and tell your

533
00:22:52,310 --> 00:22:55,170
own show and tell.

534
00:22:55,170 --> 00:22:57,920
BORIS SMUS: So this page is
a gallery of a bunch of

535
00:22:57,920 --> 00:22:59,765
Responsively Designed sites.

536
00:22:59,765 --> 00:23:02,960
And you can see if I resize
that this site itself is

537
00:23:02,960 --> 00:23:04,630
responsively designed.

538
00:23:04,630 --> 00:23:10,770
But if I go to a particular
example, it also has this

539
00:23:10,770 --> 00:23:16,600
feature where once it loads,
you'll see that as I resize

540
00:23:16,600 --> 00:23:20,670
the browser, the page starts
flowing in different ways.

541
00:23:20,670 --> 00:23:26,290
And what's happening basically
is there's a way to turn on

542
00:23:26,290 --> 00:23:31,240
device width-specific CSS.

543
00:23:31,240 --> 00:23:33,150
So that's great, right, if you
want to customize the way

544
00:23:33,150 --> 00:23:34,290
things look.

545
00:23:34,290 --> 00:23:37,600
But if you have like an m.
site or a specific tablet

546
00:23:37,600 --> 00:23:39,765
site, this doesn't really
address anything.

547
00:23:39,765 --> 00:23:42,060
And there's good reasons for
doing that, like you might

548
00:23:42,060 --> 00:23:44,700
want to have better
performance, like

549
00:23:44,700 --> 00:23:48,030
mobile-specific performance
optimizations, for example, or

550
00:23:48,030 --> 00:23:49,820
you might want to load
custom JavaScript.

551
00:23:49,820 --> 00:23:51,340
PAUL IRISH: You're going to
have different features,

552
00:23:51,340 --> 00:23:52,920
depending on--

553
00:23:52,920 --> 00:23:55,600
you're not going to have a drag
and drop file upload on

554
00:23:55,600 --> 00:23:57,120
your phone site.

555
00:23:57,120 --> 00:23:58,000
BORIS SMUS: Right.

556
00:23:58,000 --> 00:24:01,290
So there's good reasons to use
responsive design, but there's

557
00:24:01,290 --> 00:24:02,640
also good reasons
not to use it,

558
00:24:02,640 --> 00:24:04,540
depending on your situation.

559
00:24:04,540 --> 00:24:08,830
So there's a bunch of approaches
you can take.

560
00:24:08,830 --> 00:24:12,200
The common one is server side
user agent detection.

561
00:24:12,200 --> 00:24:14,554
So things like [? Wirfel ?]

562
00:24:14,554 --> 00:24:17,060
you can just load it up here.

563
00:24:17,060 --> 00:24:18,310
[? Wirfel. ?]

564
00:24:18,310 --> 00:24:20,010

565
00:24:20,010 --> 00:24:22,060
It's a really old school
project, but still being

566
00:24:22,060 --> 00:24:23,740
maintained quite actively.

567
00:24:23,740 --> 00:24:26,280
It goes back to the
days of WAP.

568
00:24:26,280 --> 00:24:33,150
So if you guys remember, WAP was
the precursor to HTML on

569
00:24:33,150 --> 00:24:34,780
mobile devices.

570
00:24:34,780 --> 00:24:38,560
Anyway, these guys have a huge
database of devices and what

571
00:24:38,560 --> 00:24:40,150
their capabilities
are, essentially.

572
00:24:40,150 --> 00:24:45,140
There's similar other projects,
like Device Atlas,

573
00:24:45,140 --> 00:24:50,170
and this is all kind of dark
secrets, like black magic-type

574
00:24:50,170 --> 00:24:54,020
stuff, because there's just so
much complexity with User

575
00:24:54,020 --> 00:24:55,320
Agent Parsing to do it right.

576
00:24:55,320 --> 00:24:57,910

577
00:24:57,910 --> 00:25:00,170
ERIC BIDELMAN: Can I ask you a
really important question?

578
00:25:00,170 --> 00:25:00,590
BORIS SMUS: Sure.

579
00:25:00,590 --> 00:25:00,950
ERIC BIDELMAN: So User
Agent Detection.

580
00:25:00,950 --> 00:25:03,710
There's a lot of people that
say it's the devil,

581
00:25:03,710 --> 00:25:05,202
people say it's good.

582
00:25:05,202 --> 00:25:09,030
What's your opinion on it, and
should we be doing it in 2012?

583
00:25:09,030 --> 00:25:09,890
BORIS SMUS: So that's
a good question.

584
00:25:09,890 --> 00:25:13,890
I think the debate is still
pretty much open for now.

585
00:25:13,890 --> 00:25:19,030
The main reason is it's still
so common is on the server

586
00:25:19,030 --> 00:25:21,440
side, there's basically nothing
except for the user

587
00:25:21,440 --> 00:25:24,140
agent that you can know about
the browser that's hitting

588
00:25:24,140 --> 00:25:25,420
you, right?

589
00:25:25,420 --> 00:25:27,400
So that's all you got
on the server.

590
00:25:27,400 --> 00:25:30,770
And for performance reasons, you
want to do things on the

591
00:25:30,770 --> 00:25:34,950
server in the initial loading
stage, right?

592
00:25:34,950 --> 00:25:37,180
Like on a client, if you're
doing things like

593
00:25:37,180 --> 00:25:41,750
feature-based detection to load
a specific layout, you're

594
00:25:41,750 --> 00:25:44,560
inevitably doing a redirect,
right, or some sort of dynamic

595
00:25:44,560 --> 00:25:45,810
script loading.

596
00:25:45,810 --> 00:25:48,510
So that's going to have some
sort of performance hit.

597
00:25:48,510 --> 00:25:49,680
PAUL IRISH: Some latency
cost, yes.

598
00:25:49,680 --> 00:25:53,360
BORIS SMUS: Some latency cost.
So Device JS actually takes

599
00:25:53,360 --> 00:25:55,290
that exact approach.

600
00:25:55,290 --> 00:25:57,500
So it does client side detection
based on media

601
00:25:57,500 --> 00:26:01,170
queries, which is, for browsers
that support media

602
00:26:01,170 --> 00:26:05,660
queries, much nicer than just
relying on the server.

603
00:26:05,660 --> 00:26:09,010
So you could say things like,
if I have this particular

604
00:26:09,010 --> 00:26:14,410
width, load this version
of my web app.

605
00:26:14,410 --> 00:26:21,890
So of course, the trade-off is
performance, but you end up

606
00:26:21,890 --> 00:26:25,880
having much more future-proof
solution that's based on

607
00:26:25,880 --> 00:26:28,150
feature detection, similar
to Modernizer.

608
00:26:28,150 --> 00:26:30,680
So this is Device
JS on GetHub.

609
00:26:30,680 --> 00:26:31,360
ERIC BIDELMAN: [INAUDIBLE]?

610
00:26:31,360 --> 00:26:35,090
BORIS SMUS: It's right here.

611
00:26:35,090 --> 00:26:43,200
And basically, the idea is
upfront, you can use Follow

612
00:26:43,200 --> 00:26:44,480
Semantic approach.

613
00:26:44,480 --> 00:26:49,130
Here, you could say use the Link
Rel Alternate tag, which

614
00:26:49,130 --> 00:26:51,880
sort of specifies the list of
all the versions that your web

615
00:26:51,880 --> 00:26:54,360
app should specify.

616
00:26:54,360 --> 00:26:56,780
And this is great
for crawlers.

617
00:26:56,780 --> 00:26:59,200
It's also just a generally
a best practice that

618
00:26:59,200 --> 00:27:02,870
semantically says, this page
has multiple versions.

619
00:27:02,870 --> 00:27:05,590
PAUL IRISH: That's really--

620
00:27:05,590 --> 00:27:09,400
if you have multiple versions
of your site or app, this is

621
00:27:09,400 --> 00:27:12,280
the best way to semantically
represent that.

622
00:27:12,280 --> 00:27:13,660
ERIC BIDELMAN: So I haven't
really seen this before.

623
00:27:13,660 --> 00:27:14,150
Is this a new thing?

624
00:27:14,150 --> 00:27:15,910
Are people doing this?

625
00:27:15,910 --> 00:27:17,340
BORIS SMUS: It's really
old, actually.

626
00:27:17,340 --> 00:27:17,800
PAUL IRISH: So yeah.

627
00:27:17,800 --> 00:27:21,150
If you look in the spec,
for like HTML4 spec--

628
00:27:21,150 --> 00:27:22,265
ERIC BIDELMAN: Oh, it's
back to four.

629
00:27:22,265 --> 00:27:23,905
PAUL IRISH: Yeah, we'll
go back to four.

630
00:27:23,905 --> 00:27:25,100
It's in Five, too.

631
00:27:25,100 --> 00:27:27,580
I don't want to be too retro.

632
00:27:27,580 --> 00:27:35,020
But Link Rel Alternate means,
this document is available for

633
00:27:35,020 --> 00:27:36,920
a different media type.

634
00:27:36,920 --> 00:27:40,110
And the media type is defined in
that attribute, and it's a

635
00:27:40,110 --> 00:27:40,520
media query.

636
00:27:40,520 --> 00:27:40,880
ERIC BIDELMAN: Right.

637
00:27:40,880 --> 00:27:42,230
PAUL IRISH: So that's
what we're doing.

638
00:27:42,230 --> 00:27:44,330
ERIC BIDELMAN: It's great that
we're using these old

639
00:27:44,330 --> 00:27:48,715
paradigms and semantics that
have been out for a while but

640
00:27:48,715 --> 00:27:49,680
are basically new.

641
00:27:49,680 --> 00:27:51,960
BORIS SMUS: There's some
new stuff here too.

642
00:27:51,960 --> 00:27:54,220
So in the old school
days, you would say

643
00:27:54,220 --> 00:27:56,120
something like handheld.

644
00:27:56,120 --> 00:27:57,490
There used to be this
media query

645
00:27:57,490 --> 00:28:00,650
type and it was handheld.

646
00:28:00,650 --> 00:28:03,870
That kind of is not really well
supported, didn't really

647
00:28:03,870 --> 00:28:05,150
work so well.

648
00:28:05,150 --> 00:28:08,730
So one thing you'll notice here
that you probably haven't

649
00:28:08,730 --> 00:28:10,260
seen is this.

650
00:28:10,260 --> 00:28:15,150
And what I'm doing here is
creating a media query that

651
00:28:15,150 --> 00:28:18,770
should exist. It doesn't
currently exist, except for in

652
00:28:18,770 --> 00:28:21,430
Mozilla with a Moz Touch-Enabled
flag.

653
00:28:21,430 --> 00:28:24,940
And basically, the Device.js
library just makes

654
00:28:24,940 --> 00:28:26,120
that happen for you.

655
00:28:26,120 --> 00:28:31,040
PAUL IRISH: So as far as what
Device.js does, it reads these

656
00:28:31,040 --> 00:28:33,430
Link tags, and does something?

657
00:28:33,430 --> 00:28:33,740
BORIS SMUS: Yeah.

658
00:28:33,740 --> 00:28:37,370
So the idea is, you include
Device.js here, and it'll

659
00:28:37,370 --> 00:28:39,720
parse the Link tags
in your page.

660
00:28:39,720 --> 00:28:44,040
And given these media
attributes, do sort of the

661
00:28:44,040 --> 00:28:47,840
right thing, the right thing
being it redirects to--

662
00:28:47,840 --> 00:28:51,730
so first it checks which version
you should have. And

663
00:28:51,730 --> 00:28:54,380
you would have these links in
all the versions of your page.

664
00:28:54,380 --> 00:28:58,190
So it checks which version you
should have, and it compares

665
00:28:58,190 --> 00:29:00,620
to your current version based
on the URL that you're

666
00:29:00,620 --> 00:29:01,440
currently on.

667
00:29:01,440 --> 00:29:05,070
And if you need to redirect,
then Device.js

668
00:29:05,070 --> 00:29:05,770
will redirect you.

669
00:29:05,770 --> 00:29:06,970
And that's it.

670
00:29:06,970 --> 00:29:09,990
ERIC BIDELMAN: So to clarify,
if I hit the Desktop landing

671
00:29:09,990 --> 00:29:12,080
page on my mobile device or
something, it's going to

672
00:29:12,080 --> 00:29:15,210
redirect me to the mobile
version that I'd specified

673
00:29:15,210 --> 00:29:16,195
with Device.js?

674
00:29:16,195 --> 00:29:17,280
BORIS SMUS: Yes.

675
00:29:17,280 --> 00:29:19,880
So I can show you
a quick demo.

676
00:29:19,880 --> 00:29:23,380
So here, I've got
a sample app.

677
00:29:23,380 --> 00:29:27,640
It's linked to from the GetHub
page, but the default landing

678
00:29:27,640 --> 00:29:30,960
page is just a redirector.

679
00:29:30,960 --> 00:29:33,710
So if I go to Sample,
I get redirected

680
00:29:33,710 --> 00:29:34,630
to the desktop page.

681
00:29:34,630 --> 00:29:41,500
If I try going to the Phone
page, I'm getting redirected

682
00:29:41,500 --> 00:29:42,890
to the Desktop page.

683
00:29:42,890 --> 00:29:46,750
And the same thing will
happen on mobile.

684
00:29:46,750 --> 00:29:51,820
So here's my little
setup here.

685
00:29:51,820 --> 00:29:54,860
And you can see, it's
the same exact URL.

686
00:29:54,860 --> 00:30:01,830
And if I go to the Root
page, I get redirected

687
00:30:01,830 --> 00:30:03,730
to the phone version.

688
00:30:03,730 --> 00:30:06,160
And this is all based on the
media queries that are

689
00:30:06,160 --> 00:30:09,230
specified in the Link
alternates.

690
00:30:09,230 --> 00:30:18,020
So I can also go to
the Desktop page.

691
00:30:18,020 --> 00:30:20,800
Whoa, whoops.

692
00:30:20,800 --> 00:30:22,050
This is interesting.

693
00:30:22,050 --> 00:30:24,940

694
00:30:24,940 --> 00:30:27,090
So anyway, that should
definitely work.

695
00:30:27,090 --> 00:30:29,480
I'm not sure what
happened there.

696
00:30:29,480 --> 00:30:30,540
So that's the idea.

697
00:30:30,540 --> 00:30:34,980
And of course in some cases, you
might want to override the

698
00:30:34,980 --> 00:30:36,730
version that you want
to load, right?

699
00:30:36,730 --> 00:30:41,250
Like for development, or
generally, you probably want

700
00:30:41,250 --> 00:30:43,820
to provide a way to specify
the version

701
00:30:43,820 --> 00:30:45,240
that you want to use.

702
00:30:45,240 --> 00:30:46,870
PAUL IRISH: So if you want to
override it and be like, you

703
00:30:46,870 --> 00:30:49,270
know what, I thank you very much
for bringing me to the

704
00:30:49,270 --> 00:30:51,800
phone view, but I want
the desktop view.

705
00:30:51,800 --> 00:30:52,030
BORIS SMUS: Right.

706
00:30:52,030 --> 00:30:54,290
So that's not to say that you
shouldn't provide the

707
00:30:54,290 --> 00:30:58,380
functionality that your users
need on all of your versions,

708
00:30:58,380 --> 00:31:00,670
but it's nice to have
an override.

709
00:31:00,670 --> 00:31:07,660
So I've basically in this little
demo I provided, links.

710
00:31:07,660 --> 00:31:11,680
And if you could show the
screen share of this.

711
00:31:11,680 --> 00:31:13,680
So there's a phone version
and a tablet version.

712
00:31:13,680 --> 00:31:19,170
And you can see if I go here,
what's basically happening is

713
00:31:19,170 --> 00:31:24,220
there's a Device Equals thing
in the URL you can see.

714
00:31:24,220 --> 00:31:24,660
ERIC BIDELMAN: Force equals.

715
00:31:24,660 --> 00:31:26,780
BORIS SMUS: You can see Device
Equals Desktop here.

716
00:31:26,780 --> 00:31:27,780
ERIC BIDELMAN: Oh, I see.

717
00:31:27,780 --> 00:31:31,680
BORIS SMUS: And then when you
click that particular version,

718
00:31:31,680 --> 00:31:34,460
then it'll redirect you with
Force Equals One, so that it

719
00:31:34,460 --> 00:31:37,380
doesn't attempt to redirect
you again.

720
00:31:37,380 --> 00:31:39,290
ERIC BIDELMAN: Could you kill
that with a Push [? state, ?]

721
00:31:39,290 --> 00:31:41,212
replace that?

722
00:31:41,212 --> 00:31:44,110
BORIS SMUS: Um, you could.

723
00:31:44,110 --> 00:31:45,240
Definitely could.

724
00:31:45,240 --> 00:31:47,480
PAUL IRISH: So using
just your API?

725
00:31:47,480 --> 00:31:48,140
BORIS SMUS: [INAUDIBLE].

726
00:31:48,140 --> 00:31:49,390
Could totally do this.

727
00:31:49,390 --> 00:31:51,580

728
00:31:51,580 --> 00:31:54,440
That's a good idea.

729
00:31:54,440 --> 00:31:55,690
ERIC BIDELMAN: So can
you just quickly

730
00:31:55,690 --> 00:31:57,690
explain again the touch?

731
00:31:57,690 --> 00:31:58,940
So the Nonstandard
Touch-Enabled.

732
00:31:58,940 --> 00:32:01,470

733
00:32:01,470 --> 00:32:04,050
So basically, that's saying if
I'm on the screen and I don't

734
00:32:04,050 --> 00:32:07,150
have touch capability, then
show me the desktop?

735
00:32:07,150 --> 00:32:07,460
BORIS SMUS: Yeah.

736
00:32:07,460 --> 00:32:08,571
ERIC BIDELMAN: Is there ever the
case where you're going to

737
00:32:08,571 --> 00:32:11,150
be using Touch-Enabled One for
something like the tablet or

738
00:32:11,150 --> 00:32:13,840
phone, or would Media
Query suffice?

739
00:32:13,840 --> 00:32:14,250
BORIS SMUS: Right.

740
00:32:14,250 --> 00:32:18,630
So the beauty of this approach
is it basically scales to any

741
00:32:18,630 --> 00:32:22,970
sort of device or form factor
that you might have. So if you

742
00:32:22,970 --> 00:32:31,740
imagine some sort of ocular
implant thing, like something

743
00:32:31,740 --> 00:32:34,640
completely crazy, all you need
is you implement the media

744
00:32:34,640 --> 00:32:37,465
query for it, and then you
add your Link Alternate.

745
00:32:37,465 --> 00:32:40,815
PAUL IRISH: I wonder if Google
Glass will have a media query

746
00:32:40,815 --> 00:32:43,755
that's appropriate for it.

747
00:32:43,755 --> 00:32:45,005
[INTERPOSING VOICES]

748
00:32:45,005 --> 00:32:50,330

749
00:32:50,330 --> 00:32:52,090
ERIC BIDELMAN: This
is cool, man.

750
00:32:52,090 --> 00:32:54,880
PAUL IRISH: So right now, you've
created support for

751
00:32:54,880 --> 00:32:56,050
Touch-Enabled.

752
00:32:56,050 --> 00:32:59,280
I wonder if there's room for
more of that in the future.

753
00:32:59,280 --> 00:33:02,630
BORIS SMUS: Yeah, that's kind of
my hope here, that we don't

754
00:33:02,630 --> 00:33:05,290
need to create these things
but they just exist.

755
00:33:05,290 --> 00:33:06,000
ERIC BIDELMAN: Boris,
are you trying to

756
00:33:06,000 --> 00:33:07,340
push the web forward?

757
00:33:07,340 --> 00:33:09,990
BORIS SMUS: Actually
yes, Eric, I am.

758
00:33:09,990 --> 00:33:10,440
ERIC BIDELMAN: That's
fantastic.

759
00:33:10,440 --> 00:33:11,440
BORIS SMUS: It's what
we do here.

760
00:33:11,440 --> 00:33:14,070
ERIC BIDELMAN: One library
at a time.

761
00:33:14,070 --> 00:33:17,200
BORIS SMUS: So there's a CR bug
that's linked to from the

762
00:33:17,200 --> 00:33:18,240
GetHub page.

763
00:33:18,240 --> 00:33:20,870
You should probably go
to this and star it.

764
00:33:20,870 --> 00:33:22,580
Only nine people have
starred it.

765
00:33:22,580 --> 00:33:24,375
That's sad.

766
00:33:24,375 --> 00:33:29,240
Can we have like 10 or 12 people
star it right now?

767
00:33:29,240 --> 00:33:29,660
BORIS SMUS: Awesome.

768
00:33:29,660 --> 00:33:30,280
Thanks, guys.

769
00:33:30,280 --> 00:33:30,810
ERIC BIDELMAN: This is
a great feature.

770
00:33:30,810 --> 00:33:34,270
This should be enabled by
default in browsers for sure.

771
00:33:34,270 --> 00:33:36,357
You said Firefox has this
if you enable it

772
00:33:36,357 --> 00:33:37,280
on a flag or something?

773
00:33:37,280 --> 00:33:37,560
BORIS SMUS: Yeah.

774
00:33:37,560 --> 00:33:41,720
So Firefox, I think it
should be in the

775
00:33:41,720 --> 00:33:43,590
stable version, I believe.

776
00:33:43,590 --> 00:33:44,840
I haven't tested.

777
00:33:44,840 --> 00:33:47,440

778
00:33:47,440 --> 00:33:49,770
So even in Firefox, I'm not
falling back to the Moz

779
00:33:49,770 --> 00:33:53,840
[INAUDIBLE], I'm just using
modernizer, actually, to check

780
00:33:53,840 --> 00:33:55,500
for touch support.

781
00:33:55,500 --> 00:33:58,070
So that's basically
how it works.

782
00:33:58,070 --> 00:34:00,786
I know there's some caveats,
some strange configurations

783
00:34:00,786 --> 00:34:04,430
under which it won't.

784
00:34:04,430 --> 00:34:05,140
ERIC BIDELMAN: By the
way, speaking of

785
00:34:05,140 --> 00:34:05,870
Modernizer and touch.

786
00:34:05,870 --> 00:34:08,090
I know I asked you this question
the other day, but

787
00:34:08,090 --> 00:34:12,239
this will be valuable
for viewers.

788
00:34:12,239 --> 00:34:14,380
Dev Tools has the ability
to simulate

789
00:34:14,380 --> 00:34:15,290
touch events, correct?

790
00:34:15,290 --> 00:34:15,830
BORIS SMUS: True.

791
00:34:15,830 --> 00:34:18,896
ERIC BIDELMAN: Does Modernizer
detect those as well?

792
00:34:18,896 --> 00:34:20,800
PAUL IRISH: Why you
gotta do that?

793
00:34:20,800 --> 00:34:22,409
ERIC BIDELMAN: I was
pointing that out.

794
00:34:22,409 --> 00:34:24,350
I ran into the issue, and maybe
somebody else is having

795
00:34:24,350 --> 00:34:26,874
the same problem.

796
00:34:26,874 --> 00:34:28,880
BORIS SMUS: Actually,
can we show that?

797
00:34:28,880 --> 00:34:31,199
PAUL IRISH: This is really handy
if you're doing mobile

798
00:34:31,199 --> 00:34:33,520
development.

799
00:34:33,520 --> 00:34:35,770
BORIS SMUS: This isn't
on Canary, though.

800
00:34:35,770 --> 00:34:36,920
PAUL IRISH: You mean
you don't have it?

801
00:34:36,920 --> 00:34:38,690
BORIS SMUS: I have it, but
I'm not running it.

802
00:34:38,690 --> 00:34:41,719

803
00:34:41,719 --> 00:34:42,600
PAUL IRISH: Well.

804
00:34:42,600 --> 00:34:43,105
One second.

805
00:34:43,105 --> 00:34:44,355
We'll try--

806
00:34:44,355 --> 00:34:46,760

807
00:34:46,760 --> 00:34:49,699
BORIS SMUS: I don't think Touch
Simulation [INAUDIBLE].

808
00:34:49,699 --> 00:34:51,800
PAUL IRISH: That's possible.

809
00:34:51,800 --> 00:34:54,425
ERIC BIDELMAN: Well, you could
show your laptop again.

810
00:34:54,425 --> 00:34:55,860
PAUL IRISH: Yeah,
probably could.

811
00:34:55,860 --> 00:34:57,150
BORIS SMUS: I could
just open Canary.

812
00:34:57,150 --> 00:34:58,840
I mean, this happens
to be stable.

813
00:34:58,840 --> 00:35:01,740

814
00:35:01,740 --> 00:35:04,680
Yeah, let's do that.

815
00:35:04,680 --> 00:35:08,090
So there's been a few things
landing inside Chrome Dev

816
00:35:08,090 --> 00:35:13,370
Tools that makes it awesome for
mobile, and one of them is

817
00:35:13,370 --> 00:35:17,230
you're now able to emulate
touch events.

818
00:35:17,230 --> 00:35:19,270
Well, there's really been
no good way to do it.

819
00:35:19,270 --> 00:35:21,190
There's been some JavaScript
libraries, which have tried to

820
00:35:21,190 --> 00:35:24,360
map it over, but now we just
have first class support for

821
00:35:24,360 --> 00:35:28,990
it in the browser, so it's
pretty powerful.

822
00:35:28,990 --> 00:35:32,990
And so I'll show you now how
that works, and some of the

823
00:35:32,990 --> 00:35:35,560
other mobile features that
we have available.

824
00:35:35,560 --> 00:35:38,070
Could you dock that baby?

825
00:35:38,070 --> 00:35:39,290
BORIS SMUS: Docked.

826
00:35:39,290 --> 00:35:40,210
PAUL IRISH: Sweet.

827
00:35:40,210 --> 00:35:42,510
BORIS SMUS: It's like some
features are already on.

828
00:35:42,510 --> 00:35:43,550
PAUL IRISH: Oh, check
this out.

829
00:35:43,550 --> 00:35:45,470
So we also have another
feature to show you.

830
00:35:45,470 --> 00:35:46,540
ERIC BIDELMAN: Oh wow,
look at this.

831
00:35:46,540 --> 00:35:47,790
So many features.

832
00:35:47,790 --> 00:35:50,540

833
00:35:50,540 --> 00:35:53,460
So you open up Settings, and
then now you have this.

834
00:35:53,460 --> 00:35:56,590
You can override the user agent
and say that you want

835
00:35:56,590 --> 00:36:00,720
the Network User Agent to be
sent out as IOS5, or any of

836
00:36:00,720 --> 00:36:01,735
the other possibilities.

837
00:36:01,735 --> 00:36:03,415
ERIC BIDELMAN: Wait, I know
the best feature.

838
00:36:03,415 --> 00:36:06,200
Can't you Control Zoom in
on the Dev Tools now?

839
00:36:06,200 --> 00:36:06,710
PAUL IRISH: It's true.

840
00:36:06,710 --> 00:36:07,450
BORIS SMUS: Whoa,
look at that.

841
00:36:07,450 --> 00:36:08,860
ERIC BIDELMAN: This is the best
feature, especially if

842
00:36:08,860 --> 00:36:10,290
you're presenting
the Dev Tools.

843
00:36:10,290 --> 00:36:12,080
PAUL IRISH: That's right.

844
00:36:12,080 --> 00:36:14,570
ERIC BIDELMAN: And we can do
that because it's a web app,

845
00:36:14,570 --> 00:36:15,430
it's a web app.

846
00:36:15,430 --> 00:36:17,470
PAUL IRISH: So Chrome
Dev Tools is just

847
00:36:17,470 --> 00:36:18,680
JavaScript and CSS.

848
00:36:18,680 --> 00:36:23,220
So Control plus Nav zooms.
It's pretty newish.

849
00:36:23,220 --> 00:36:25,810
BORIS SMUS: Did you know that
changing the User Agent also

850
00:36:25,810 --> 00:36:27,340
sets the dimensions?

851
00:36:27,340 --> 00:36:27,940
PAUL IRISH: What?

852
00:36:27,940 --> 00:36:29,960
ERIC BIDELMAN: That actually
is really hot.

853
00:36:29,960 --> 00:36:30,320
BORIS SMUS: Wow.

854
00:36:30,320 --> 00:36:31,410
That's really nice.

855
00:36:31,410 --> 00:36:33,480
I didn't know that.

856
00:36:33,480 --> 00:36:34,080
PAUL IRISH: Wow.

857
00:36:34,080 --> 00:36:37,820
ERIC BIDELMAN: So I know when
I've done mobile development,

858
00:36:37,820 --> 00:36:39,520
I have a little JavaScript
[? bookmarklet ?]

859
00:36:39,520 --> 00:36:42,110
that opens my screen to a
certain width and height and

860
00:36:42,110 --> 00:36:44,670
everything, maybe I'm
doing some UA

861
00:36:44,670 --> 00:36:45,630
detection on the server.

862
00:36:45,630 --> 00:36:47,965
This kind of replaces that?

863
00:36:47,965 --> 00:36:49,947
I mean, this is really nice.

864
00:36:49,947 --> 00:36:51,140
PAUL IRISH: Yeah.

865
00:36:51,140 --> 00:36:54,180
So we have the device
metrics so you can

866
00:36:54,180 --> 00:36:56,260
customize your own view.

867
00:36:56,260 --> 00:36:59,470
If I turn it off, it kind of
just expands it back to the

868
00:36:59,470 --> 00:37:05,070
full view, but I'm compressing
down the page to match my

869
00:37:05,070 --> 00:37:06,490
device metrics which
I can customize.

870
00:37:06,490 --> 00:37:10,520
Also, the Font Scale factor and
Fit Window, which I'm not

871
00:37:10,520 --> 00:37:12,770
yet sure exactly what it does.

872
00:37:12,770 --> 00:37:13,596
BORIS SMUS: Can you try it?

873
00:37:13,596 --> 00:37:14,010
ERIC BIDELMAN: Try it.

874
00:37:14,010 --> 00:37:17,010
PAUL IRISH: Yeah,
it does that.

875
00:37:17,010 --> 00:37:18,390
So does that help, guys?

876
00:37:18,390 --> 00:37:21,430

877
00:37:21,430 --> 00:37:22,036
ERIC BIDELMAN: Actually,
we should bring up

878
00:37:22,036 --> 00:37:23,420
a responsive page.

879
00:37:23,420 --> 00:37:26,310
Is this a responsive page?

880
00:37:26,310 --> 00:37:27,670
PAUL IRISH: This is not.

881
00:37:27,670 --> 00:37:30,110
BORIS SMUS: Just pull
up mediaquery.es.

882
00:37:30,110 --> 00:37:33,270
ERIC BIDELMAN: And just
show what happens?

883
00:37:33,270 --> 00:37:36,700
That's another way to do
really quick responsive

884
00:37:36,700 --> 00:37:39,650
testing is to now use
the Dev Tools to--

885
00:37:39,650 --> 00:37:40,060
PAUL IRISH: Right.

886
00:37:40,060 --> 00:37:41,600
So this is pretty cool.

887
00:37:41,600 --> 00:37:49,500
Because in the Dev Tools I can
now set up, just change the--

888
00:37:49,500 --> 00:37:52,330
let's try to go down to Five.

889
00:37:52,330 --> 00:37:58,130

890
00:37:58,130 --> 00:37:59,380
What's a [INAUDIBLE]?

891
00:37:59,380 --> 00:38:01,900

892
00:38:01,900 --> 00:38:03,205
BORIS SMUS: I guess you
can't [? zip the-- ?]

893
00:38:03,205 --> 00:38:05,930

894
00:38:05,930 --> 00:38:07,090
PAUL IRISH: Wow.

895
00:38:07,090 --> 00:38:07,800
That works.

896
00:38:07,800 --> 00:38:08,870
So we can do that.

897
00:38:08,870 --> 00:38:13,490
And also another way to handle
your responsive design

898
00:38:13,490 --> 00:38:17,850
development is I can just Dock
to Right this entire thing.

899
00:38:17,850 --> 00:38:21,640
And if I Dock to Right my Dev
Tools, I can just bring this

900
00:38:21,640 --> 00:38:25,830
over and squeeze down that
content as much as I want.

901
00:38:25,830 --> 00:38:27,106
ERIC BIDELMAN: That's cool.

902
00:38:27,106 --> 00:38:28,830
BORIS SMUS: How did
it do that?

903
00:38:28,830 --> 00:38:29,340
PAUL IRISH: Magic.

904
00:38:29,340 --> 00:38:32,916
ERIC BIDELMAN: If you refresh
this page, right?

905
00:38:32,916 --> 00:38:35,260
Does it refresh the
Dev Tools as well?

906
00:38:35,260 --> 00:38:36,533
[INAUDIBLE]?

907
00:38:36,533 --> 00:38:38,850
PAUL IRISH: Yeah.

908
00:38:38,850 --> 00:38:40,180
It brings it all back.

909
00:38:40,180 --> 00:38:42,611
So I think what we're trying
to show, before we got a

910
00:38:42,611 --> 00:38:44,256
little sidetracked, guys--

911
00:38:44,256 --> 00:38:47,330
ERIC BIDELMAN: There's just so
much really cool features.

912
00:38:47,330 --> 00:38:48,410
PAUL IRISH: There's a
lot of good stuff.

913
00:38:48,410 --> 00:38:49,470
Emulate touch events.

914
00:38:49,470 --> 00:38:50,530
ERIC BIDELMAN: Emulate
touch events.

915
00:38:50,530 --> 00:38:52,750
PAUL IRISH: So I'll turn it off,
because that's how it is

916
00:38:52,750 --> 00:38:53,340
by default.

917
00:38:53,340 --> 00:38:55,130
I have this little demo page.

918
00:38:55,130 --> 00:38:59,060
It's a multi-touch demo, so you
can load it on Android or

919
00:38:59,060 --> 00:39:00,970
IOS, and just use multi-touch.

920
00:39:00,970 --> 00:39:03,390
It draws it on a canvas
element, and it works.

921
00:39:03,390 --> 00:39:07,430
So the fact that you can do
multi-touch in JavaScript and

922
00:39:07,430 --> 00:39:09,100
Canvas is kind of, not many
people know that.

923
00:39:09,100 --> 00:39:10,560
But you can tell it
doesn't work.

924
00:39:10,560 --> 00:39:11,850
I'm clicking on it
now and dragging,

925
00:39:11,850 --> 00:39:14,210
and there's no touch.

926
00:39:14,210 --> 00:39:21,090
But I turn this on, and it's
totally working, right, guys?

927
00:39:21,090 --> 00:39:22,640
BORIS SMUS: That's
amazing, Paul.

928
00:39:22,640 --> 00:39:23,260
ERIC BIDELMAN: It's
because you're

929
00:39:23,260 --> 00:39:24,050
painting in white, right?

930
00:39:24,050 --> 00:39:26,370
You're painting white
lines instead of--

931
00:39:26,370 --> 00:39:27,780
PAUL IRISH: Wow.

932
00:39:27,780 --> 00:39:30,000
ERIC BIDELMAN: Demo fail.

933
00:39:30,000 --> 00:39:31,900
BORIS SMUS: Hold on, maybe it's
some sort of-- maybe the

934
00:39:31,900 --> 00:39:32,820
internet is down.

935
00:39:32,820 --> 00:39:34,070
ERIC BIDELMAN: This is a
feature, that Dev Tools is

936
00:39:34,070 --> 00:39:37,305
killing the internet,
Brand new feature.

937
00:39:37,305 --> 00:39:40,530
This is simulating offline,
which is a great segue.

938
00:39:40,530 --> 00:39:42,580
PAUL IRISH: Perfect.

939
00:39:42,580 --> 00:39:44,980
So I encourage you to check it
out, emulate such events.

940
00:39:44,980 --> 00:39:48,460
It works, and it works well
when you're [INAUDIBLE].

941
00:39:48,460 --> 00:39:51,620

942
00:39:51,620 --> 00:39:52,890
BORIS SMUS: It's Canary
[INAUDIBLE].

943
00:39:52,890 --> 00:39:53,360
It happens.

944
00:39:53,360 --> 00:39:54,670
Maybe your site's down.

945
00:39:54,670 --> 00:39:56,370
PAUL IRISH: My site
must be down.

946
00:39:56,370 --> 00:39:56,746
ERIC BIDELMAN: Uh-oh.

947
00:39:56,746 --> 00:39:57,760
PAUL IRISH: That's
embarrassing.

948
00:39:57,760 --> 00:39:59,010
ERIC BIDELMAN: That's
really embarrassing.

949
00:39:59,010 --> 00:40:01,360

950
00:40:01,360 --> 00:40:07,340
PAUL IRISH: So speaking of
offline, one of the big tricks

951
00:40:07,340 --> 00:40:08,640
dealing with offline
is that you need a

952
00:40:08,640 --> 00:40:12,410
mechanism to store data.

953
00:40:12,410 --> 00:40:16,030
And we started off with local
storage, session storage, and

954
00:40:16,030 --> 00:40:17,960
then there's Web SQL database,
but now that's

955
00:40:17,960 --> 00:40:18,860
[? deprecated, ?]

956
00:40:18,860 --> 00:40:20,420
although there's varying
support.

957
00:40:20,420 --> 00:40:23,500
IndexedDB is the new hotness,
and there's increasingly

958
00:40:23,500 --> 00:40:27,230
better support, but
it is a mess.

959
00:40:27,230 --> 00:40:28,520
But there's a new APIs--

960
00:40:28,520 --> 00:40:30,170
ERIC BIDELMAN: Well, there's
one API that I'm

961
00:40:30,170 --> 00:40:31,670
particularly fond of.

962
00:40:31,670 --> 00:40:32,570
BORIS SMUS: Which one's
that, Eric?

963
00:40:32,570 --> 00:40:34,420
ERIC BIDELMAN: So that's
the File System API.

964
00:40:34,420 --> 00:40:37,230
So there's an API that's been
specced out in W3C,

965
00:40:37,230 --> 00:40:40,630
[INAUDIBLE] in Chrome, been
available for a while now,

966
00:40:40,630 --> 00:40:42,430
called the File System API.

967
00:40:42,430 --> 00:40:44,480
It's my baby, I wrote
a book about it--

968
00:40:44,480 --> 00:40:46,630
I'll push that--

969
00:40:46,630 --> 00:40:49,280
and I wrote a library called
Filer JS to sort of wrap the

970
00:40:49,280 --> 00:40:53,390
library, and you can pretty
much call Unix commands.

971
00:40:53,390 --> 00:40:55,380
So there's a Copy function,
there's a Move function.

972
00:40:55,380 --> 00:40:55,710
PAUL IRISH: So [INAUDIBLE]

973
00:40:55,710 --> 00:40:58,170
API, just to be clear, is like
you can create files, you can

974
00:40:58,170 --> 00:41:00,880
create folders, you
can move files.

975
00:41:00,880 --> 00:41:03,150
Think about moving files
and folders on a

976
00:41:03,150 --> 00:41:04,505
regular file system.

977
00:41:04,505 --> 00:41:05,750
ERIC BIDELMAN: It's exactly
what you'd expect in

978
00:41:05,750 --> 00:41:06,290
JavaScript, yeah.

979
00:41:06,290 --> 00:41:07,680
PAUL IRISH: It's the same
thing, except you have a

980
00:41:07,680 --> 00:41:08,390
JavaScript API for it.

981
00:41:08,390 --> 00:41:10,305
ERIC BIDELMAN: This is great.

982
00:41:10,305 --> 00:41:13,340
BORIS SMUS: But you can't go
to your file system, right?

983
00:41:13,340 --> 00:41:14,040
PAUL IRISH: It's sandboxed.

984
00:41:14,040 --> 00:41:15,346
ERIC BIDELMAN: It's an important
distinction, and

985
00:41:15,346 --> 00:41:17,820
this is something that always
comes up, is you can't just

986
00:41:17,820 --> 00:41:21,000
open a file system and read from
My Pictures folder, My

987
00:41:21,000 --> 00:41:22,150
Music folder.

988
00:41:22,150 --> 00:41:26,960
It's very much a sandbox view
of just your applications.

989
00:41:26,960 --> 00:41:30,010
Your applications can read and
write folders and files to

990
00:41:30,010 --> 00:41:33,120
this view, but another web app
can't access that because of

991
00:41:33,120 --> 00:41:36,080
the origin policy, and you
can't break out of that.

992
00:41:36,080 --> 00:41:37,620
So that's a great distinction
to make.

993
00:41:37,620 --> 00:41:39,770
But it's exactly what
you'd expect, right?

994
00:41:39,770 --> 00:41:42,800
In JavaScript, you can write
files and store them, you can

995
00:41:42,800 --> 00:41:44,140
cache them.

996
00:41:44,140 --> 00:41:44,960
PAUL IRISH: Big files too.

997
00:41:44,960 --> 00:41:45,620
ERIC BIDELMAN: Big files.

998
00:41:45,620 --> 00:41:49,900
So using the Quota API, you can
store whatever you want,

999
00:41:49,900 --> 00:41:52,780
unlimited storage as far
as quota is concerned.

1000
00:41:52,780 --> 00:41:55,440
So this has a real advantage of
being able to cache things

1001
00:41:55,440 --> 00:41:57,740
offline as one big use case.

1002
00:41:57,740 --> 00:42:00,580
Say you have a music app and
you want to cache MP3s or

1003
00:42:00,580 --> 00:42:02,310
something, or files.

1004
00:42:02,310 --> 00:42:06,120
You can do that and make a
folder for all your rock, or

1005
00:42:06,120 --> 00:42:08,990
all your pop music or something,
and then delete

1006
00:42:08,990 --> 00:42:09,830
that at will.

1007
00:42:09,830 --> 00:42:13,660
So it has some advantages
over other offline APIs.

1008
00:42:13,660 --> 00:42:16,260
App Cache is a good example
people really hate.

1009
00:42:16,260 --> 00:42:19,685
It's hard to work with, it's not
very dynamic, you have to

1010
00:42:19,685 --> 00:42:21,610
[? create ?] manifests
and keep all those

1011
00:42:21,610 --> 00:42:22,780
assets up to date.

1012
00:42:22,780 --> 00:42:24,780
If one thing in the manifest
changes, everything's

1013
00:42:24,780 --> 00:42:27,010
downloaded, it's not great
for mobile, that's

1014
00:42:27,010 --> 00:42:28,335
not great in general.

1015
00:42:28,335 --> 00:42:29,440
BORIS SMUS: You can't
add anything to your

1016
00:42:29,440 --> 00:42:30,480
[INAUDIBLE], right?

1017
00:42:30,480 --> 00:42:31,680
ERIC BIDELMAN: You can, but
you have to change the

1018
00:42:31,680 --> 00:42:33,680
manifest, but then everything,
right?

1019
00:42:33,680 --> 00:42:34,760
If you're saving a--

1020
00:42:34,760 --> 00:42:36,180
BORIS SMUS: But for JavaScript,
you can't?

1021
00:42:36,180 --> 00:42:36,380
BORIS SMUS: You can't, right.

1022
00:42:36,380 --> 00:42:38,940
Programmatically you can sort
of say, I want to add this

1023
00:42:38,940 --> 00:42:40,980
file, I want to subtract this
file, you have to work with

1024
00:42:40,980 --> 00:42:43,180
the manifest. And in
my opinion, it's

1025
00:42:43,180 --> 00:42:44,600
a pain in the butt.

1026
00:42:44,600 --> 00:42:48,780
So my love for the API is
apparent maybe, but I want to

1027
00:42:48,780 --> 00:42:51,820
help bring this File System
API to more browsers.

1028
00:42:51,820 --> 00:42:54,530
So like we said, it's only
in Chrome right now.

1029
00:42:54,530 --> 00:42:56,930
But today actually,
I will be seeing--

1030
00:42:56,930 --> 00:42:59,920
I had a blog post
about it today,

1031
00:42:59,920 --> 00:43:01,460
hours before this hangout.

1032
00:43:01,460 --> 00:43:05,100

1033
00:43:05,100 --> 00:43:06,950
I'm releasing a library
[INAUDIBLE]

1034
00:43:06,950 --> 00:43:11,820
to blog post. It's called
IDB File System.js.

1035
00:43:11,820 --> 00:43:14,630
And essentially what it is, it's
a polyfill library for

1036
00:43:14,630 --> 00:43:16,130
the File System API.

1037
00:43:16,130 --> 00:43:18,210
So the way it works is
pretty interesting.

1038
00:43:18,210 --> 00:43:22,280
I had to wrestle with not only
the File System API, so I had

1039
00:43:22,280 --> 00:43:25,270
to implement that entire thing
in JavaScript, but the

1040
00:43:25,270 --> 00:43:27,960
underlying storage, the reason
this works in other browsers,

1041
00:43:27,960 --> 00:43:30,340
is that it can take advantage
of IndexedDB.

1042
00:43:30,340 --> 00:43:33,340
So IndexedDB is sort of
this up and comer.

1043
00:43:33,340 --> 00:43:37,150
Firefox has it, IE10 will have
it, Chrome certainly has it,

1044
00:43:37,150 --> 00:43:37,900
who knows if--

1045
00:43:37,900 --> 00:43:39,610
PAUL IRISH: It'll be coming
in [INAUDIBLE].

1046
00:43:39,610 --> 00:43:42,680
ERIC BIDELMAN: So everyone will
likely have the IndexedDB

1047
00:43:42,680 --> 00:43:44,620
API pretty soon.

1048
00:43:44,620 --> 00:43:47,270
This is sort of my attempt to
help that in the immediate

1049
00:43:47,270 --> 00:43:50,540
future, and File System.js
essentially a polyfill.

1050
00:43:50,540 --> 00:43:53,590

1051
00:43:53,590 --> 00:43:55,820
How would you explain
a polyfill, Paul?

1052
00:43:55,820 --> 00:43:56,290
Library.

1053
00:43:56,290 --> 00:43:59,230
PAUL IRISH: Yeah, it has the
exact same APIs as the

1054
00:43:59,230 --> 00:44:02,570
standard implementation, just
delivered via JavaScript

1055
00:44:02,570 --> 00:44:04,640
instead of the browser
delivering it.

1056
00:44:04,640 --> 00:44:06,620
So it works the same way.

1057
00:44:06,620 --> 00:44:09,430
ERIC BIDELMAN: So I have a good
demo of this working, if

1058
00:44:09,430 --> 00:44:11,930
you can switch back to
the demo machine.

1059
00:44:11,930 --> 00:44:15,650
Do you have Firefox,
by the way?

1060
00:44:15,650 --> 00:44:16,900
BORIS SMUS: Probably
an old version.

1061
00:44:16,900 --> 00:44:19,410

1062
00:44:19,410 --> 00:44:23,120
ERIC BIDELMAN: So this is a demo
that I put together, and

1063
00:44:23,120 --> 00:44:25,950
this demo runs both in
Chrome and Firefox.

1064
00:44:25,950 --> 00:44:28,270
Unfortunately, I don't think
Boris has Firefox that we can

1065
00:44:28,270 --> 00:44:31,640
bring up right now, but this
demo would work perfectly in

1066
00:44:31,640 --> 00:44:33,720
that using IndexedDB
as a storage layer.

1067
00:44:33,720 --> 00:44:36,820

1068
00:44:36,820 --> 00:44:37,480
But this is great.

1069
00:44:37,480 --> 00:44:41,160
So I can write a web app now
that uses the File System API,

1070
00:44:41,160 --> 00:44:42,950
and it's going to work
cross-browser.

1071
00:44:42,950 --> 00:44:45,950
So what this is doing is
essentially I can just have my

1072
00:44:45,950 --> 00:44:48,980
root folder here, we open the
file system using our File

1073
00:44:48,980 --> 00:44:51,392
System API calls.

1074
00:44:51,392 --> 00:44:57,300
We'll create a couple,
folders test.

1075
00:44:57,300 --> 00:45:00,490
So this is just using the
methods that the File System

1076
00:45:00,490 --> 00:45:02,140
API implements.

1077
00:45:02,140 --> 00:45:04,670
So we can create a blank
folder, a blank file.

1078
00:45:04,670 --> 00:45:07,656
I can drill down into
these folders.

1079
00:45:07,656 --> 00:45:09,570
I can zoom.

1080
00:45:09,570 --> 00:45:12,100
Zooming's good.

1081
00:45:12,100 --> 00:45:14,595
So you can see, I created a
folder, Test, I'm in that

1082
00:45:14,595 --> 00:45:15,440
folder, Test, right now.

1083
00:45:15,440 --> 00:45:18,090
So I refresh, my data
is preserved.

1084
00:45:18,090 --> 00:45:21,940
So I still have my folder that
I created, my empty file.

1085
00:45:21,940 --> 00:45:25,280
Do you have any files we can
drag into this web app that

1086
00:45:25,280 --> 00:45:26,846
aren't risque?

1087
00:45:26,846 --> 00:45:28,830
PAUL IRISH: That
aren't risque.

1088
00:45:28,830 --> 00:45:30,100
Well.

1089
00:45:30,100 --> 00:45:33,490
BORIS SMUS: I don't usually
have such files.

1090
00:45:33,490 --> 00:45:34,590
ERIC BIDELMAN: Do you
have like a basic

1091
00:45:34,590 --> 00:45:35,390
text file or something?

1092
00:45:35,390 --> 00:45:38,180
An image would work great,
some kind of image.

1093
00:45:38,180 --> 00:45:39,920
BORIS SMUS: Let's do
a big spooky fire.

1094
00:45:39,920 --> 00:45:41,906
ERIC BIDELMAN: Big
spooky fire.

1095
00:45:41,906 --> 00:45:43,156
Fires are spooky.

1096
00:45:43,156 --> 00:45:49,150

1097
00:45:49,150 --> 00:45:51,046
BORIS SMUS: Big spooky fire.

1098
00:45:51,046 --> 00:45:54,500
My computer is busy upgrading
Firefox, I think.

1099
00:45:54,500 --> 00:45:57,380
ERIC BIDELMAN: No problem.

1100
00:45:57,380 --> 00:45:59,280
BORIS SMUS: Should we
just drag it in?

1101
00:45:59,280 --> 00:46:00,110
ERIC BIDELMAN: Drag it in.

1102
00:46:00,110 --> 00:46:00,580
PAUL IRISH: Whoa.

1103
00:46:00,580 --> 00:46:02,710
ERIC BIDELMAN: So using the
power of drag and drop, we can

1104
00:46:02,710 --> 00:46:07,120
add that file right to
the File System API.

1105
00:46:07,120 --> 00:46:08,380
Imagine this was in Firefox,
it would be

1106
00:46:08,380 --> 00:46:10,350
the exact same process.

1107
00:46:10,350 --> 00:46:12,890
Just to show you [INAUDIBLE]
that was added, we hopefully

1108
00:46:12,890 --> 00:46:15,722
clicked that, and displayed
big spooky fires.

1109
00:46:15,722 --> 00:46:19,590
We're just completely
crashing right now.

1110
00:46:19,590 --> 00:46:20,270
But this is cool.

1111
00:46:20,270 --> 00:46:23,630
So now, I can use File System
API and all of its benefits in

1112
00:46:23,630 --> 00:46:25,300
other browsers.

1113
00:46:25,300 --> 00:46:28,260
PAUL IRISH: So it's File System
API built on top of

1114
00:46:28,260 --> 00:46:32,380
IndexedDB, so that means we
now have the same API

1115
00:46:32,380 --> 00:46:34,805
available, first of all in
Chrome, but with the polyfill,

1116
00:46:34,805 --> 00:46:38,310
in Firefox and IE10, and any
future browser that supports

1117
00:46:38,310 --> 00:46:40,930
the IndexedDB, so mobile
browsers in particular.

1118
00:46:40,930 --> 00:46:43,875
ERIC BIDELMAN: Mobile browsers
in particular.

1119
00:46:43,875 --> 00:46:47,290
Caveat, I haven't tested
it in IE10.

1120
00:46:47,290 --> 00:46:47,720
PAUL IRISH: I took a look.

1121
00:46:47,720 --> 00:46:48,170
ERIC BIDELMAN: You
took a look.

1122
00:46:48,170 --> 00:46:49,110
What happened?

1123
00:46:49,110 --> 00:46:51,020
PAUL IRISH: I took a look, I
[INAUDIBLE] in Browser Stack,

1124
00:46:51,020 --> 00:46:53,910
and I think I saw
an exception.

1125
00:46:53,910 --> 00:46:55,450
Probably not your fault.

1126
00:46:55,450 --> 00:46:58,415
It's not your fault.

1127
00:46:58,415 --> 00:46:59,120
ERIC BIDELMAN: Don't
worry about it.

1128
00:46:59,120 --> 00:47:00,130
PAUL IRISH: It might
be your fault.

1129
00:47:00,130 --> 00:47:01,030
ERIC BIDELMAN: I
want to show--

1130
00:47:01,030 --> 00:47:08,280
so there's also another
demo that I wrote.

1131
00:47:08,280 --> 00:47:09,530
Oops.

1132
00:47:09,530 --> 00:47:11,460

1133
00:47:11,460 --> 00:47:14,410
So if you want to play around
with library, go ahead.

1134
00:47:14,410 --> 00:47:15,400
I'd love your feedback.

1135
00:47:15,400 --> 00:47:17,290
And absolutely, like if you
have Pull Requests or

1136
00:47:17,290 --> 00:47:20,170
something for IE10 bugs or
something, I just haven't had

1137
00:47:20,170 --> 00:47:22,410
the time to test. But Firefox
works flawlessly.

1138
00:47:22,410 --> 00:47:24,400
They have probably the
most up to date

1139
00:47:24,400 --> 00:47:25,650
implementation of IndexedDB.

1140
00:47:25,650 --> 00:47:28,010

1141
00:47:28,010 --> 00:47:30,720
So this is another demo I wrote
when I wrote Filer JS,

1142
00:47:30,720 --> 00:47:33,790
the wrapper library that
implements Unix commands.

1143
00:47:33,790 --> 00:47:37,000
And you could see, sorry for the
small screen, but it's the

1144
00:47:37,000 --> 00:47:40,400
same demo, and it's also now
working just out of the box

1145
00:47:40,400 --> 00:47:42,610
with this library dropped in.

1146
00:47:42,610 --> 00:47:46,730
It works out of the box with
Firefox, with other browsers

1147
00:47:46,730 --> 00:47:48,260
that implement IndexedDB.

1148
00:47:48,260 --> 00:47:50,940
So I can traverse in these
folders, as you'd expect, I

1149
00:47:50,940 --> 00:47:54,190
can add files, I can
import files, I can

1150
00:47:54,190 --> 00:47:55,930
preview those files.

1151
00:47:55,930 --> 00:47:57,080
So this is cool.

1152
00:47:57,080 --> 00:47:59,460
I'm really excited about this.

1153
00:47:59,460 --> 00:48:02,370
Obviously, my passion for the
API comes into play, and I

1154
00:48:02,370 --> 00:48:04,650
think it's got a lot of
advantages over some of the

1155
00:48:04,650 --> 00:48:05,565
other offline APIs.

1156
00:48:05,565 --> 00:48:07,070
PAUL IRISH: Did you say
that that demo is

1157
00:48:07,070 --> 00:48:09,060
using Filer JS as well?

1158
00:48:09,060 --> 00:48:09,740
ERIC BIDELMAN: Yeah.

1159
00:48:09,740 --> 00:48:10,610
So great point, Paul.

1160
00:48:10,610 --> 00:48:11,750
I Didn't say that.

1161
00:48:11,750 --> 00:48:13,560
Maybe I did, I don't know.

1162
00:48:13,560 --> 00:48:15,530
But this demo is using
the library that I

1163
00:48:15,530 --> 00:48:16,860
wrote, Filer JS.

1164
00:48:16,860 --> 00:48:18,700
PAUL IRISH: So this is like
a sweet sugar API.

1165
00:48:18,700 --> 00:48:21,710
ERIC BIDELMAN: It's a Sugar API
on top of the [INAUDIBLE]

1166
00:48:21,710 --> 00:48:22,964
File System API.

1167
00:48:22,964 --> 00:48:24,220
PAUL IRISH: Because that
API [INAUDIBLE].

1168
00:48:24,220 --> 00:48:25,600
ERIC BIDELMAN: It's good,
it's powerful.

1169
00:48:25,600 --> 00:48:26,670
We all know it's powerful.

1170
00:48:26,670 --> 00:48:30,264
PAUL IRISH: But I would love
to just [INAUDIBLE] and

1171
00:48:30,264 --> 00:48:31,040
[INAUDIBLE] and all that.

1172
00:48:31,040 --> 00:48:35,770
ERIC BIDELMAN: [INAUDIBLE],
copy, LS, current working

1173
00:48:35,770 --> 00:48:38,930
directory, all this cool stuff
that you're familiar with.

1174
00:48:38,930 --> 00:48:42,140
Basically, this library now,
the IDB File System, is

1175
00:48:42,140 --> 00:48:43,150
sitting on top of Filer.

1176
00:48:43,150 --> 00:48:45,670
So they're working together, and
this demo just works out

1177
00:48:45,670 --> 00:48:47,810
of the box thanks to that.

1178
00:48:47,810 --> 00:48:50,910
BORIS SMUS: So I think Mozilla
had some sort of large file

1179
00:48:50,910 --> 00:48:52,260
supporting IndexedDB?

1180
00:48:52,260 --> 00:48:53,124
ERIC BIDELMAN: Yeah.

1181
00:48:53,124 --> 00:48:57,200
BORIS SMUS: Do you know
anything about that?

1182
00:48:57,200 --> 00:48:59,720
ERIC BIDELMAN: I think you're
asking about supporting binary

1183
00:48:59,720 --> 00:49:01,530
data inside of--

1184
00:49:01,530 --> 00:49:04,740
BORIS SMUS: So they had some
specific extension for large--

1185
00:49:04,740 --> 00:49:05,990
ERIC BIDELMAN: Interesting.

1186
00:49:05,990 --> 00:49:10,240

1187
00:49:10,240 --> 00:49:13,510
BORIS SMUS: So Mozilla had an
extension for large file

1188
00:49:13,510 --> 00:49:16,315
support, I think in IndexedDB,
but I don't

1189
00:49:16,315 --> 00:49:17,800
really know the details.

1190
00:49:17,800 --> 00:49:19,910
ERIC BIDELMAN: So actually, this
project started off for

1191
00:49:19,910 --> 00:49:24,370
me as a sort of investigation
if you could store files--

1192
00:49:24,370 --> 00:49:27,510
it's been said before that you
can store files and really

1193
00:49:27,510 --> 00:49:30,650
replicate the File System
API inside of IndexedDB.

1194
00:49:30,650 --> 00:49:34,290
So I went down that path
expecting to fail, but it

1195
00:49:34,290 --> 00:49:36,640
actually turned out
to be possible.

1196
00:49:36,640 --> 00:49:39,470
Firefox's implementation, in
particular, has the ability to

1197
00:49:39,470 --> 00:49:42,140
store binary data
in IndexedDB.

1198
00:49:42,140 --> 00:49:45,530
So as soon as I saw that, my
eyes opened up and said, hey,

1199
00:49:45,530 --> 00:49:49,470
you can polyfill an entire API,
which it's not a small

1200
00:49:49,470 --> 00:49:51,940
API, if you look at
the code base.

1201
00:49:51,940 --> 00:49:56,045
We can pretty much polyfill the
entire API and replicate

1202
00:49:56,045 --> 00:49:59,900
it using IndexedDB as sort of
the underlying storage layer.

1203
00:49:59,900 --> 00:50:01,050
BORIS SMUS: Awesome.

1204
00:50:01,050 --> 00:50:02,600
Very cool stuff.

1205
00:50:02,600 --> 00:50:04,280
ERIC BIDELMAN: So great for
mobile, great for other

1206
00:50:04,280 --> 00:50:06,935
browsers, great for building
an app that works offline.

1207
00:50:06,935 --> 00:50:09,840

1208
00:50:09,840 --> 00:50:11,400
That's all I had for me.

1209
00:50:11,400 --> 00:50:13,760
Do we have time for questions?

1210
00:50:13,760 --> 00:50:14,870
PAUL IRISH: We have time
for one question.

1211
00:50:14,870 --> 00:50:15,700
ERIC BIDELMAN: One question?

1212
00:50:15,700 --> 00:50:19,890
PAUL IRISH: So this came in over
the moderator during our

1213
00:50:19,890 --> 00:50:21,640
conversation.

1214
00:50:21,640 --> 00:50:26,830
And the question is coming in
from Stephan in Berlin.

1215
00:50:26,830 --> 00:50:32,940
And he asks, I wanted to start
a Chrome app based on

1216
00:50:32,940 --> 00:50:35,360
Backbone, Underscore,
and Require.

1217
00:50:35,360 --> 00:50:39,530
However, the Chrome App Manifest
Version Two won't

1218
00:50:39,530 --> 00:50:42,170
allow CSP libraries using
a [? Val New, ?]

1219
00:50:42,170 --> 00:50:44,670
which excludes all known
JS type of frameworks.

1220
00:50:44,670 --> 00:50:45,920
Is there a solution for that?

1221
00:50:45,920 --> 00:50:48,660

1222
00:50:48,660 --> 00:50:51,290
This is an interesting question,
and I think we're

1223
00:50:51,290 --> 00:50:51,970
looking into it.

1224
00:50:51,970 --> 00:50:57,620
Basically, one of the things
that we're excited about is

1225
00:50:57,620 --> 00:51:01,120
getting better CSV
support inside

1226
00:51:01,120 --> 00:51:02,430
external JavaScript libraries.

1227
00:51:02,430 --> 00:51:06,520
So basically, if you rely on the
function [? constructor ?]

1228
00:51:06,520 --> 00:51:10,510
or eval, that means that that
JavaScript library won't work

1229
00:51:10,510 --> 00:51:12,212
in a CSP environment.

1230
00:51:12,212 --> 00:51:15,160
CSP is Content Security
Policy.

1231
00:51:15,160 --> 00:51:18,000
It's a new security model.

1232
00:51:18,000 --> 00:51:19,510
It's pretty exciting,
and it's coming.

1233
00:51:19,510 --> 00:51:22,970
There's good support for it in
Firefox and Chrome right now,

1234
00:51:22,970 --> 00:51:24,850
and Chrome apps will
be using it.

1235
00:51:24,850 --> 00:51:29,866
So basically I would ask, if
you have incompatibilities,

1236
00:51:29,866 --> 00:51:32,630
they have to be looked
at the library level.

1237
00:51:32,630 --> 00:51:37,630
So try and see if there's a
way to work around that.

1238
00:51:37,630 --> 00:51:40,620
One of the ways in particular,
with templating libraries, is

1239
00:51:40,620 --> 00:51:43,930
any precompiled templates
are not using eval.

1240
00:51:43,930 --> 00:51:48,910
So precompiled templates are
the way to get CSP support.

1241
00:51:48,910 --> 00:51:49,970
ERIC BIDELMAN: That's generally
a good thing.

1242
00:51:49,970 --> 00:51:51,580
You should be compiling
your templates anyway.

1243
00:51:51,580 --> 00:51:52,200
PAUL IRISH: Way faster.

1244
00:51:52,200 --> 00:51:53,800
ERIC BIDELMAN: So it's
good for performance.

1245
00:51:53,800 --> 00:51:54,760
You should be doing
that already.

1246
00:51:54,760 --> 00:51:57,300
This is just nudging, hopefully,
developers in the

1247
00:51:57,300 --> 00:51:58,880
right direction.

1248
00:51:58,880 --> 00:52:01,010
PAUL IRISH: So that's
your solution there.

1249
00:52:01,010 --> 00:52:02,414
But is that it?

1250
00:52:02,414 --> 00:52:05,310
BORIS SMUS: I think basically
that's a good thing.

1251
00:52:05,310 --> 00:52:09,340
One thing is I think Mustache
doesn't precompile, but

1252
00:52:09,340 --> 00:52:13,380
Handlebars does, and probably
other templating

1253
00:52:13,380 --> 00:52:15,060
agents do as well.

1254
00:52:15,060 --> 00:52:15,900
PAUL IRISH: Precompile them.

1255
00:52:15,900 --> 00:52:16,545
ERIC BIDELMAN: Good thing.

1256
00:52:16,545 --> 00:52:16,830
PAUL IRISH: All right.

1257
00:52:16,830 --> 00:52:20,700
Well, I appreciate you
guys watching, and--

1258
00:52:20,700 --> 00:52:21,480
ERIC BIDELMAN: Thanks,
everybody.

1259
00:52:21,480 --> 00:52:24,160
PAUL IRISH: We'll be back
soon again [INAUDIBLE].

1260
00:52:24,160 --> 00:52:24,996
ERIC BIDELMAN: See you again.

1261
00:52:24,996 --> 00:52:26,246
PAUL IRISH: Cool.

1262
00:52:26,246 --> 00:52:28,433

