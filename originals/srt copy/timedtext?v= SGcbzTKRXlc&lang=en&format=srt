1
00:00:00,000 --> 00:00:01,020
SAM DUTTON: We're live.

2
00:00:01,020 --> 00:00:01,480
Great.

3
00:00:01,480 --> 00:00:05,720
Well, welcome everyone to
the WebRTC hangout.

4
00:00:05,720 --> 00:00:07,390
So we're looking forward
to some really

5
00:00:07,390 --> 00:00:08,220
good questions today.

6
00:00:08,220 --> 00:00:11,260
We've already had some good
stuff on Moderator.

7
00:00:11,260 --> 00:00:14,430
We're going to talk a bit about
the basics of WebRTC.

8
00:00:14,430 --> 00:00:18,830
You know, what it is, what it
can do for you, and how you

9
00:00:18,830 --> 00:00:21,740
can use it now-- how you
can get started.

10
00:00:21,740 --> 00:00:25,650
And so first I'd like
to introduce you

11
00:00:25,650 --> 00:00:26,650
to the people here.

12
00:00:26,650 --> 00:00:26,780
Yeah.

13
00:00:26,780 --> 00:00:28,040
My name is Sam Dutton.

14
00:00:28,040 --> 00:00:30,830
I'm a developer advocate
for Chrome--

15
00:00:30,830 --> 00:00:33,310
for Google, based in London--

16
00:00:33,310 --> 00:00:36,440
and yeah-- just learning
about WebRTC.

17
00:00:36,440 --> 00:00:38,180
It's a fantastic technology.

18
00:00:38,180 --> 00:00:40,970
So I've been talking to these
guys from the team.

19
00:00:40,970 --> 00:00:43,890
So over to Mountain View.

20
00:00:43,890 --> 00:00:48,472
If you could introduce
yourselves, starting with Ray.

21
00:00:48,472 --> 00:00:50,970
PUNYABRATA RAY: Hi my name's
Punyabrata Ray , and I'm a

22
00:00:50,970 --> 00:00:54,480
technical solutions engineer
on the WebRTC Chrome team.

23
00:00:54,480 --> 00:00:55,830
And--

24
00:00:55,830 --> 00:00:57,625
pass it over to Ronghua.

25
00:00:57,625 --> 00:00:59,800
RONGHUA WU: Hey, this
is Ronghua Wu.

26
00:00:59,800 --> 00:01:05,532
I'm also a software engineer
in WebRTC Chrome team.

27
00:01:05,532 --> 00:01:07,425
ERIC BIDELMAN: And hi,
I'm Eric Bidelman.

28
00:01:07,425 --> 00:01:09,970
I work on our Chrome developer
relations team.

29
00:01:09,970 --> 00:01:12,180
I specialize in HTML5--

30
00:01:12,180 --> 00:01:14,205
kind of help developers
learn all the cool

31
00:01:14,205 --> 00:01:16,340
new stuff in HTML5--

32
00:01:16,340 --> 00:01:17,630
of course, there's
plenty of that--

33
00:01:17,630 --> 00:01:22,065
and also contribute a lot to
html5rocks.com, which is our--

34
00:01:22,065 --> 00:01:25,046
one of our developer's sites
geared toward HTML5

35
00:01:25,046 --> 00:01:26,444
development.

36
00:01:26,444 --> 00:01:28,990
SAM DUTTON: A great site.

37
00:01:28,990 --> 00:01:32,130
And I'll just put
a URL for that.

38
00:01:32,130 --> 00:01:35,480
Eric, while you're there, I was
just wondering if we could

39
00:01:35,480 --> 00:01:40,290
look at the demo that you
produced earlier with Pete, to

40
00:01:40,290 --> 00:01:43,040
show off some of the features
of WebRTC, and just maybe

41
00:01:43,040 --> 00:01:44,630
could talk us through
that a little bit.

42
00:01:44,630 --> 00:01:46,530
ERIC BIDELMAN: So for those
that aren't familiar with,

43
00:01:46,530 --> 00:01:48,750
sort of, what WebRTC is, we--

44
00:01:48,750 --> 00:01:50,430
Pete and I shot an
entertaining--

45
00:01:50,430 --> 00:01:51,430
to say the least--

46
00:01:51,430 --> 00:01:54,910
screen shot yesterday for you
guys just to sort of show off

47
00:01:54,910 --> 00:01:58,340
what WebRTC is in a fun kind
of interesting way.

48
00:01:58,340 --> 00:02:01,770
So I think he's working on
dialing it up right now.

49
00:02:01,770 --> 00:02:03,290
SAM DUTTON: Yeah,
I can see it.

50
00:02:03,290 --> 00:02:06,395
ERIC BIDELMAN: Cool.

51
00:02:06,395 --> 00:02:07,070
PUNYABRATA RAY: Right.

52
00:02:07,070 --> 00:02:09,100
And just in case people
are not aware--

53
00:02:09,100 --> 00:02:23,636

54
00:02:23,636 --> 00:02:25,070
MALE SPEAKER: Hey, Eric.

55
00:02:25,070 --> 00:02:25,982
What's up?

56
00:02:25,982 --> 00:02:26,966
ERIC BIDELMAN: [INAUDIBLE]

57
00:02:26,966 --> 00:02:28,030
MALE SPEAKER: Hey.

58
00:02:28,030 --> 00:02:29,674
This WebRTC stuff?

59
00:02:29,674 --> 00:02:31,108
It seems pretty cool, right?

60
00:02:31,108 --> 00:02:32,852
ERIC BIDELMAN: Yeah, it is.

61
00:02:32,852 --> 00:02:33,730
I'm kind of thirsty down here.

62
00:02:33,730 --> 00:02:34,215
Can you help me out?

63
00:02:34,215 --> 00:02:37,125
MALE SPEAKER: You know,
I think I can.

64
00:02:37,125 --> 00:02:38,375
I'll be right there.

65
00:02:38,375 --> 00:02:45,380

66
00:02:45,380 --> 00:02:47,555
[LAUGHTER]

67
00:02:47,555 --> 00:02:49,260
SAM DUTTON: Magic--

68
00:02:49,260 --> 00:02:50,380
the magic of WebRTC.

69
00:02:50,380 --> 00:02:51,000
That's great.

70
00:02:51,000 --> 00:02:54,970
Thank you very much,
Pete and Eric.

71
00:02:54,970 --> 00:02:57,200
ERIC BIDELMAN: So in the
directions out there-- there's

72
00:02:57,200 --> 00:03:00,340
a demo that we'll talk a little
bit about maybe in a

73
00:03:00,340 --> 00:03:07,840
bit, but apprtc.appspot.com is a
sample app that you can test

74
00:03:07,840 --> 00:03:10,930
out that is exactly what we
just showed you, which is

75
00:03:10,930 --> 00:03:12,920
establishing a connection
with someone else.

76
00:03:12,920 --> 00:03:17,690
You saw Pete and I do a
real-time video chat in the

77
00:03:17,690 --> 00:03:17,990
Googleplex.

78
00:03:17,990 --> 00:03:20,210
So obviously, you know,
Googleplex has some

79
00:03:20,210 --> 00:03:22,850
interesting things like slides,
so we decided to ham

80
00:03:22,850 --> 00:03:25,490
it up a bit, if you will.

81
00:03:25,490 --> 00:03:27,190
Pete got me a water in
an interesting way.

82
00:03:27,190 --> 00:03:28,950
But that just goes to show
you, it's all in

83
00:03:28,950 --> 00:03:29,690
the browser, right?

84
00:03:29,690 --> 00:03:32,660
We were just hitting a URL
without any plug-ins or

85
00:03:32,660 --> 00:03:36,720
anything-- doing real-time live
video chat and audio.

86
00:03:36,720 --> 00:03:38,292
Very cool stuff.

87
00:03:38,292 --> 00:03:40,090
SAM DUTTON: Yeah, that's
really great.

88
00:03:40,090 --> 00:03:42,990
And it looks good and
the quality of

89
00:03:42,990 --> 00:03:45,290
the video is fantastic.

90
00:03:45,290 --> 00:03:50,480
So I guess I wanted to
start, if I could, by

91
00:03:50,480 --> 00:03:52,260
asking Ray and Ronghua.

92
00:03:52,260 --> 00:03:55,580
That's kind of a big question
about-- you know, what are we

93
00:03:55,580 --> 00:03:56,910
doing with WebRTC?

94
00:03:56,910 --> 00:04:00,755
What are the big aims
for WebRTC here?

95
00:04:00,755 --> 00:04:02,970
PUNYABRATA RAY: So I'll
start that out.

96
00:04:02,970 --> 00:04:08,160
Essentially, one of the main
components to push Chrome as a

97
00:04:08,160 --> 00:04:10,880
platform is real-time
communications.

98
00:04:10,880 --> 00:04:14,460
And to be able to do that
natively in the browser and

99
00:04:14,460 --> 00:04:16,910
not just Chrome-- any
browsers out there--

100
00:04:16,910 --> 00:04:19,019
so bringing this functionality,
transcending

101
00:04:19,019 --> 00:04:21,839
operating systems, and being
able to set up a call between

102
00:04:21,839 --> 00:04:24,600
two browsers natively.

103
00:04:24,600 --> 00:04:27,880
And developers essentially don't
have to worry about the

104
00:04:27,880 --> 00:04:30,570
nitty-gritty and the underlying
signaling

105
00:04:30,570 --> 00:04:34,720
processing blocks or how to
traverse firewalls and such.

106
00:04:34,720 --> 00:04:39,066
You can just write your own
web page and make a call.

107
00:04:39,066 --> 00:04:42,060
SAM DUTTON: That's brilliant.

108
00:04:42,060 --> 00:04:42,310
OK.

109
00:04:42,310 --> 00:04:46,340
So at the moment, we're doing
stuff with real-time

110
00:04:46,340 --> 00:04:49,500
conferencing with the kind of
video applications that we

111
00:04:49,500 --> 00:04:50,540
just saw a moment ago.

112
00:04:50,540 --> 00:04:51,950
Have you got any--

113
00:04:51,950 --> 00:04:55,370
Ronghua, have you got any other
ideas for the kind of

114
00:04:55,370 --> 00:04:58,260
apps that we might be seeing in
the future that use WebRTC.

115
00:04:58,260 --> 00:05:03,145

116
00:05:03,145 --> 00:05:06,920
RONGHUA WU: There's
a lot of potential

117
00:05:06,920 --> 00:05:08,170
apps to help you there.

118
00:05:08,170 --> 00:05:10,980

119
00:05:10,980 --> 00:05:14,750
One of them may be, like
for customer service.

120
00:05:14,750 --> 00:05:18,270
For example, if you go to a
website, you just click on

121
00:05:18,270 --> 00:05:23,150
that, you can read your customer
[? percentage. ?]

122
00:05:23,150 --> 00:05:29,130
Another basic one's like,
peer-to-peer calls.

123
00:05:29,130 --> 00:05:34,770
You can set up a website that
with a button, you can talk to

124
00:05:34,770 --> 00:05:37,345
someone else without any
plug-in involved.

125
00:05:37,345 --> 00:05:40,420

126
00:05:40,420 --> 00:05:41,075
SAM DUTTON: Yeah, fantastic.

127
00:05:41,075 --> 00:05:45,250
RONGHUA WU: You can also do
some, like, screen sharing or

128
00:05:45,250 --> 00:05:51,820
streaming your local files
using these technologies.

129
00:05:51,820 --> 00:05:53,800
ERIC BIDELMAN: What we're
starting to see, too, is like

130
00:05:53,800 --> 00:05:57,450
the ability for HTML5 APIs
like web sockets, for

131
00:05:57,450 --> 00:06:02,040
instance, support sending binary
data in these different

132
00:06:02,040 --> 00:06:02,605
file formats.

133
00:06:02,605 --> 00:06:05,510
And so you can combine that in
really interesting ways now

134
00:06:05,510 --> 00:06:07,860
with other stuff in
the platform.

135
00:06:07,860 --> 00:06:10,820
So what I did with that is kind
of compelling to me is to

136
00:06:10,820 --> 00:06:15,030
build a robot that sort
of drives itself.

137
00:06:15,030 --> 00:06:17,010
You know, I don't know-- put a
laptop on some kind of car or

138
00:06:17,010 --> 00:06:18,175
something and it does--

139
00:06:18,175 --> 00:06:18,500
SAM DUTTON: Cool, yeah.

140
00:06:18,500 --> 00:06:20,960
ERIC BIDELMAN: --some action as
it drives around using the

141
00:06:20,960 --> 00:06:23,380
input it gets from the video
and sort of does--

142
00:06:23,380 --> 00:06:25,870
in real-time using a web
worker or something--

143
00:06:25,870 --> 00:06:27,970
the video processing on it.

144
00:06:27,970 --> 00:06:31,540
So maybe still futuristic,
but definitely doable,

145
00:06:31,540 --> 00:06:32,625
prototypable.

146
00:06:32,625 --> 00:06:35,850
SAM DUTTON: Yeah, I can imagine
a lot of really good

147
00:06:35,850 --> 00:06:38,090
education applications
with this, as well.

148
00:06:38,090 --> 00:06:40,860
You know, being able
to communicate--

149
00:06:40,860 --> 00:06:44,950
teachers and students
communicating remotely and

150
00:06:44,950 --> 00:06:46,170
taking advantage of that.

151
00:06:46,170 --> 00:06:46,870
And even--

152
00:06:46,870 --> 00:06:48,230
like Rana's suggesting--

153
00:06:48,230 --> 00:06:50,110
you know, just working
with customers--

154
00:06:50,110 --> 00:06:54,220
talking customers through
technical support and really

155
00:06:54,220 --> 00:06:55,095
any kind of stuff.

156
00:06:55,095 --> 00:06:57,540
Yeah, it's really exciting.

157
00:06:57,540 --> 00:07:00,220
The possibilities are there.

158
00:07:00,220 --> 00:07:04,280
I just wanted to quickly go--
just to show another little

159
00:07:04,280 --> 00:07:06,620
demo just to kick off.

160
00:07:06,620 --> 00:07:09,770
One of the really important
components of what people are

161
00:07:09,770 --> 00:07:16,460
doing with WebRTC is the
get-user media API.

162
00:07:16,460 --> 00:07:20,510
This is a way of getting
streaming media from your

163
00:07:20,510 --> 00:07:22,862
computer and then working
with the data.

164
00:07:22,862 --> 00:07:24,330
Here's a really simple
example.

165
00:07:24,330 --> 00:07:27,280
I'll just try and pop this
up on-screen and

166
00:07:27,280 --> 00:07:30,090
share it with you.

167
00:07:30,090 --> 00:07:33,850
If we can do a little screen
share here, I'll see if I can

168
00:07:33,850 --> 00:07:38,470
get this on the hangout.

169
00:07:38,470 --> 00:07:42,780
So I'm sharing a window now
which we can move to.

170
00:07:42,780 --> 00:07:48,330

171
00:07:48,330 --> 00:07:51,560
So can you see me?

172
00:07:51,560 --> 00:07:52,880
Does it look a bit weird?

173
00:07:52,880 --> 00:07:53,310
[INTERPOSING VOICES]

174
00:07:53,310 --> 00:07:54,480
ERIC BIDELMAN: You look great.

175
00:07:54,480 --> 00:07:58,330
SAM DUTTON: As you can see,
we're getting in real-time, a

176
00:07:58,330 --> 00:08:00,620
creepy, hairy ball.

177
00:08:00,620 --> 00:08:05,560
So we're getting video data
directly from the camera on my

178
00:08:05,560 --> 00:08:09,310
machine here and doing
processing

179
00:08:09,310 --> 00:08:11,240
of the data in real-time.

180
00:08:11,240 --> 00:08:19,480
And then displaying that
rendering content immediately.

181
00:08:19,480 --> 00:08:21,740
And as you can see, it's a
kind of fun application.

182
00:08:21,740 --> 00:08:29,270
But you can imagine, there's
a lot of potential useful

183
00:08:29,270 --> 00:08:31,630
implementations that you can get
with this kind of stuff.

184
00:08:31,630 --> 00:08:36,010
So real-time processing of
video using the data from

185
00:08:36,010 --> 00:08:36,980
get-user media.

186
00:08:36,980 --> 00:08:38,909
ERIC BIDELMAN: That's using
WebGEO, right Sam?

187
00:08:38,909 --> 00:08:39,530
Is that right?

188
00:08:39,530 --> 00:08:42,080
Like, WebGEO filter
effects for that?

189
00:08:42,080 --> 00:08:43,559
SAM DUTTON: Yeah,
that's right.

190
00:08:43,559 --> 00:08:48,050
And I don't know if
you can see this.

191
00:08:48,050 --> 00:08:49,470
Does this work for you?

192
00:08:49,470 --> 00:08:50,860
ERIC BIDELMAN: Yeah,
we can see it.

193
00:08:50,860 --> 00:08:51,660
SAM DUTTON: Cool.

194
00:08:51,660 --> 00:08:54,616
And there, you can see, what
we're outputing to is a canvas

195
00:08:54,616 --> 00:08:55,410
element there.

196
00:08:55,410 --> 00:08:58,800
So right there we're seeing
the output rendered on a

197
00:08:58,800 --> 00:09:00,630
canvas element.

198
00:09:00,630 --> 00:09:07,190
I'll put up a link to that so
anyone can go to that right

199
00:09:07,190 --> 00:09:08,225
now from the hangout.

200
00:09:08,225 --> 00:09:09,590
There we go.

201
00:09:09,590 --> 00:09:10,370
OK.

202
00:09:10,370 --> 00:09:13,240
And there we go.

203
00:09:13,240 --> 00:09:15,510
I'll turn off screen sharing now
so you don't have to see

204
00:09:15,510 --> 00:09:17,710
this psychedelic image of me.

205
00:09:17,710 --> 00:09:24,850
Why don't we take a question
from the Moderator stuff that

206
00:09:24,850 --> 00:09:26,990
we've had today.

207
00:09:26,990 --> 00:09:32,730
So, yes, starting up right from
the most popular question

208
00:09:32,730 --> 00:09:35,680
we've had so far on Moderator.

209
00:09:35,680 --> 00:09:36,955
The question is--

210
00:09:36,955 --> 00:09:40,510
I'll just put the link so that
people can go to this page if

211
00:09:40,510 --> 00:09:43,934
they want to have a look and
want to add questions.

212
00:09:43,934 --> 00:09:45,890
There we go.

213
00:09:45,890 --> 00:09:50,470
So the first question here is,
can you share a timeline for

214
00:09:50,470 --> 00:09:53,440
recording APIs to become
available.

215
00:09:53,440 --> 00:09:55,920
And they have a link for
the Google group's

216
00:09:55,920 --> 00:09:57,880
question about that.

217
00:09:57,880 --> 00:10:02,860
So yeah, I was wondering, Ray
and Ronghua , could you

218
00:10:02,860 --> 00:10:04,250
enlighten us about this?

219
00:10:04,250 --> 00:10:06,830
What's the estimate for
this at this stage?

220
00:10:06,830 --> 00:10:10,716
Is this something that we
can see on the road map?

221
00:10:10,716 --> 00:10:12,210
PUNYABRATA RAY: Yeah,
definitely.

222
00:10:12,210 --> 00:10:15,800
I think this is definitely
on our road map.

223
00:10:15,800 --> 00:10:19,340
From what I heard, we were
shooting for most probably

224
00:10:19,340 --> 00:10:20,480
second quarter.

225
00:10:20,480 --> 00:10:23,860
Perhaps it might sneak into
the third quarter.

226
00:10:23,860 --> 00:10:27,010
We're just totally focused right
now on just making sure

227
00:10:27,010 --> 00:10:29,535
that everything works in a
peer-to-peer call, and then

228
00:10:29,535 --> 00:10:33,460
move to the next feature sets of
being able to record and do

229
00:10:33,460 --> 00:10:34,660
other things.

230
00:10:34,660 --> 00:10:39,330
So hopefully Q2, if not Q3 of
this year, we should have

231
00:10:39,330 --> 00:10:42,766
these recording APIs
up and running.

232
00:10:42,766 --> 00:10:44,350
SAM DUTTON: That's
great to hear.

233
00:10:44,350 --> 00:10:48,910
It seems like it's well-defined
and ready to go.

234
00:10:48,910 --> 00:10:51,120
That's great news.

235
00:10:51,120 --> 00:10:54,250
Just taking another question
from Moderator.

236
00:10:54,250 --> 00:10:58,740
They're asking about
experimental servers.

237
00:10:58,740 --> 00:11:01,045
Could you run an experimental
server?

238
00:11:01,045 --> 00:11:04,510
Thus it would be easier for
people to try the technology?

239
00:11:04,510 --> 00:11:10,110
It would be temporary and
unguaranteed, obviously.

240
00:11:10,110 --> 00:11:13,050
And yeah, I believe we have
that in place, yeah?

241
00:11:13,050 --> 00:11:15,940
Is that correct?

242
00:11:15,940 --> 00:11:17,260
RONGHUA WU: Yeah.

243
00:11:17,260 --> 00:11:20,390
In order to run the experiment,
essentially, you

244
00:11:20,390 --> 00:11:22,880
need two servers.

245
00:11:22,880 --> 00:11:27,980
One is the server for the
net [UNINTELLIGIBLE].

246
00:11:27,980 --> 00:11:30,380
We have scanned at google.com.

247
00:11:30,380 --> 00:11:31,420
That is already there.

248
00:11:31,420 --> 00:11:35,450
You can configure up your
connection to use that.

249
00:11:35,450 --> 00:11:35,850
[UNINTELLIGIBLE]

250
00:11:35,850 --> 00:11:38,470
you will need a signaling
server.

251
00:11:38,470 --> 00:11:40,970
So we do have an open source--

252
00:11:40,970 --> 00:11:47,890
very simple one- signaling
server sample in our website.

253
00:11:47,890 --> 00:11:49,800
You can see that and
view it yourself.

254
00:11:49,800 --> 00:11:51,575
PUNYABRATA RAY: It's a peer
connection server.

255
00:11:51,575 --> 00:11:54,520
RONGHUA WU: That's a
very simple one.

256
00:11:54,520 --> 00:11:58,200
You can use that to test
the [UNINTELLIGIBLE]

257
00:11:58,200 --> 00:11:59,060
[? net-- ?]

258
00:11:59,060 --> 00:12:02,512
the server behind
the app RTC--

259
00:12:02,512 --> 00:12:04,870
the demo we just saw.

260
00:12:04,870 --> 00:12:10,676
That one, we plan to open
source it very soon.

261
00:12:10,676 --> 00:12:13,140
SAM DUTTON: That's
great to hear.

262
00:12:13,140 --> 00:12:15,660
One thing I failed to
mention so far--

263
00:12:15,660 --> 00:12:21,320
a really great source of
information about WebRTC is

264
00:12:21,320 --> 00:12:24,010
the WebRTC site itself.

265
00:12:24,010 --> 00:12:25,400
I'll just add a link to that.

266
00:12:25,400 --> 00:12:28,836
That's WebRTC.org.

267
00:12:28,836 --> 00:12:30,470
I'm just putting that up now.

268
00:12:30,470 --> 00:12:32,280
So there's a lot of great
information there--

269
00:12:32,280 --> 00:12:36,840
documentation, and some demos,
and links to further

270
00:12:36,840 --> 00:12:41,800
information, and blog posts,
and a lot of stuff that you

271
00:12:41,800 --> 00:12:44,740
can listen out to that gives
updates pretty regular.

272
00:12:44,740 --> 00:12:47,640
There's a really active
community around WebRTC.

273
00:12:47,640 --> 00:12:50,940
And we're seeing a lot of new
information coming through

274
00:12:50,940 --> 00:12:53,040
daily, so have a look at that.

275
00:12:53,040 --> 00:12:57,220
And it's a great place
to get started.

276
00:12:57,220 --> 00:13:02,000
Just looking through the other
questions on Moderator here--

277
00:13:02,000 --> 00:13:05,620

278
00:13:05,620 --> 00:13:07,670
So I guess this harks back
to the last question.

279
00:13:07,670 --> 00:13:13,310
What server implementations are
now available to build a

280
00:13:13,310 --> 00:13:16,850
video chat service
using WebRTC?

281
00:13:16,850 --> 00:13:21,770
So I believe that one thing
that's on the way is some kind

282
00:13:21,770 --> 00:13:24,990
of open source server.

283
00:13:24,990 --> 00:13:26,390
Is that correct?

284
00:13:26,390 --> 00:13:27,490
Is that something we're
going to see?

285
00:13:27,490 --> 00:13:28,890
RONGHUA WU: Yeah,
that's correct.

286
00:13:28,890 --> 00:13:32,050
That's the server I mentioned
at behind the

287
00:13:32,050 --> 00:13:37,050
apprtc.appspot.com, that
demo app we just saw.

288
00:13:37,050 --> 00:13:40,070
The signaling server behind
that, we plan to

289
00:13:40,070 --> 00:13:42,376
open source it soon.

290
00:13:42,376 --> 00:13:45,132
SAM DUTTON: That's really
good to hear.

291
00:13:45,132 --> 00:13:46,320
I couldn't resist-- sorry--

292
00:13:46,320 --> 00:13:48,205
I'm going to show another
one of these--

293
00:13:48,205 --> 00:13:49,360
PUNYABRATA RAY: Do you know
if there's any other ones

294
00:13:49,360 --> 00:13:51,080
available that people
have built?

295
00:13:51,080 --> 00:13:53,180
Or is it just too
soon, maybe, to

296
00:13:53,180 --> 00:13:55,480
RONGHUA WU: Yeah,
it's too soon.

297
00:13:55,480 --> 00:13:58,870
But we do have a very simple
one-- that's what I

298
00:13:58,870 --> 00:13:59,920
mentioned--

299
00:13:59,920 --> 00:14:04,430
this peer connection server
in the [? code name. ?]

300
00:14:04,430 --> 00:14:06,775
So we have it on our website--

301
00:14:06,775 --> 00:14:07,800
open source.

302
00:14:07,800 --> 00:14:10,360
ERIC BIDELMAN: That's in the
project page for WebRTC?

303
00:14:10,360 --> 00:14:12,520
Google the project page, yeah.

304
00:14:12,520 --> 00:14:15,580
So Sam, you want to throw that
one up, too, which is I think

305
00:14:15,580 --> 00:14:17,155
is probably going to be
off the WebRTC.org.

306
00:14:17,155 --> 00:14:19,130
PUNYABRATA RAY: Right.

307
00:14:19,130 --> 00:14:22,880
That's one thing that I think
people as, at least, newcomers

308
00:14:22,880 --> 00:14:25,460
to this project definitely
need to understand-- that

309
00:14:25,460 --> 00:14:28,380
there's obviously the client
side things that we're

310
00:14:28,380 --> 00:14:32,300
providing that will take care
of capturing your microphone

311
00:14:32,300 --> 00:14:35,810
samples and video frames from
your camera, encoding that,

312
00:14:35,810 --> 00:14:36,910
sending it out.

313
00:14:36,910 --> 00:14:39,660
And then there is a server
component that--

314
00:14:39,660 --> 00:14:42,450
you might have two clients who
can't see each other because

315
00:14:42,450 --> 00:14:45,120
they're sitting behind
firewalls and such.

316
00:14:45,120 --> 00:14:48,850
So there's this server component
also that we are

317
00:14:48,850 --> 00:14:53,180
providing, but people also need
to understand that as, if

318
00:14:53,180 --> 00:14:57,090
they want to scale this out,
they do need to perhaps spend

319
00:14:57,090 --> 00:14:59,850
a little bit more time thinking
about how they would

320
00:14:59,850 --> 00:15:03,360
want to handle 1,000 calls
and things like that.

321
00:15:03,360 --> 00:15:06,090
But this is a good
start, I think.

322
00:15:06,090 --> 00:15:07,630
We have sample applications--

323
00:15:07,630 --> 00:15:10,940
both, obviously on the client
side and the server side.

324
00:15:10,940 --> 00:15:14,210
And we're going to open up a
real server that we're using.

325
00:15:14,210 --> 00:15:17,710
So hopefully, these will be good
building steps for people

326
00:15:17,710 --> 00:15:20,115
to start building their
applications soon.

327
00:15:20,115 --> 00:15:21,370
SAM DUTTON: Yeah, sure.

328
00:15:21,370 --> 00:15:23,820
ERIC BIDELMAN: Sam, I wonder if
it makes sense at this time

329
00:15:23,820 --> 00:15:26,530
to bring up that slide deck and
show that diagram of sort

330
00:15:26,530 --> 00:15:28,216
of the architecture?

331
00:15:28,216 --> 00:15:29,140
SAM DUTTON: Yeah.

332
00:15:29,140 --> 00:15:31,250
Let me just get that.

333
00:15:31,250 --> 00:15:34,470
Hold on a moment.

334
00:15:34,470 --> 00:15:35,720
And get that stuff.

335
00:15:35,720 --> 00:15:37,760
ERIC BIDELMAN: How much stuff
is actually going into the

336
00:15:37,760 --> 00:15:38,420
project, right?

337
00:15:38,420 --> 00:15:42,210
There's sort of the browser
implementation, right, which

338
00:15:42,210 --> 00:15:45,100
is all open source as I
understand it, right?

339
00:15:45,100 --> 00:15:45,540
PUNYABRATA RAY: Right.

340
00:15:45,540 --> 00:15:48,200
ERIC BIDELMAN: The browser's
implementation that the

341
00:15:48,200 --> 00:15:49,490
browser's implementing--

342
00:15:49,490 --> 00:15:51,780
but there's also all the
JavaScript APIs, which is the

343
00:15:51,780 --> 00:15:55,190
part where the web developers
come in and play with the

344
00:15:55,190 --> 00:15:59,680
portion of the WebRTC that you
can actually use from an app.

345
00:15:59,680 --> 00:16:01,560
And so, Sam I think, is trying
to bring up this really nice,

346
00:16:01,560 --> 00:16:03,170
sort of diagram showing
all this.

347
00:16:03,170 --> 00:16:06,145
And what I usually
show people is--

348
00:16:06,145 --> 00:16:09,300
as soon as he gets it up--
there's a lot under the hood.

349
00:16:09,300 --> 00:16:11,893
There's a ton of stuff going
on-- and this is what you

350
00:16:11,893 --> 00:16:12,540
spoke to earlier--

351
00:16:12,540 --> 00:16:14,720
is that there's a lot of
fine-tuning going on.

352
00:16:14,720 --> 00:16:16,990
There's a lot of implementation
details.

353
00:16:16,990 --> 00:16:19,950
And so over time, we're going
to start to work on other

354
00:16:19,950 --> 00:16:24,120
stuff, as well, like recording,
for instance.

355
00:16:24,120 --> 00:16:27,520
SAM DUTTON: While I'm getting
this up on-screen, I was

356
00:16:27,520 --> 00:16:27,960
wondering--

357
00:16:27,960 --> 00:16:32,940
one thing that I would love
to hear is you WebRTC guys

358
00:16:32,940 --> 00:16:36,380
talking through the process of
that really basic demo we saw

359
00:16:36,380 --> 00:16:37,555
right at the start there.

360
00:16:37,555 --> 00:16:39,460
You know, what's going on?

361
00:16:39,460 --> 00:16:44,820
Could you talk us through the
process of actually making the

362
00:16:44,820 --> 00:16:47,760
connection and getting
the video from A to

363
00:16:47,760 --> 00:16:50,361
B and B to A again.

364
00:16:50,361 --> 00:16:51,611
PUNYABRATA RAY: Sure.

365
00:16:51,611 --> 00:16:53,650

366
00:16:53,650 --> 00:16:54,490
I don't know--

367
00:16:54,490 --> 00:16:56,620
should we start at the lowest
level first, or should we

368
00:16:56,620 --> 00:16:58,380
start at the highest level,
working down?

369
00:16:58,380 --> 00:17:01,545
RONGHUA WU: Maybe you can start
with, open up a camera

370
00:17:01,545 --> 00:17:02,780
and [UNINTELLIGIBLE].

371
00:17:02,780 --> 00:17:03,690
PUNYABRATA RAY: Right.

372
00:17:03,690 --> 00:17:03,990
OK.

373
00:17:03,990 --> 00:17:07,380
So there's two parts.

374
00:17:07,380 --> 00:17:10,140
From the web developer's
perspective, which is not what

375
00:17:10,140 --> 00:17:11,020
I'm going to start with.

376
00:17:11,020 --> 00:17:13,550
You know, they're working with
JavaScript APIs and they're

377
00:17:13,550 --> 00:17:14,710
going to set up a call.

378
00:17:14,710 --> 00:17:20,240
But going down to the very low
level, we have what we call

379
00:17:20,240 --> 00:17:24,460
the voice and video engines
aspect of the WebRTC.

380
00:17:24,460 --> 00:17:27,690
And these are the engines--
starting from one end, where

381
00:17:27,690 --> 00:17:31,210
we start grabbing microphone
samples and the video frames

382
00:17:31,210 --> 00:17:35,460
from the camera, encode them,
and packetize them and send

383
00:17:35,460 --> 00:17:37,080
them out into the network.

384
00:17:37,080 --> 00:17:38,880
And on the reverse end,
when we receive

385
00:17:38,880 --> 00:17:40,470
packets from the network--

386
00:17:40,470 --> 00:17:45,300
decode them, and then display
and render the decoded video

387
00:17:45,300 --> 00:17:50,640
frames, and play out the sound
samples to your speakers.

388
00:17:50,640 --> 00:17:54,820
That's in a nutshell what
the media engines do.

389
00:17:54,820 --> 00:17:56,340
There's different components.

390
00:17:56,340 --> 00:17:58,860
For example, there's an acoustic
echo cancellation

391
00:17:58,860 --> 00:18:02,480
block and a noise suppression
block on the voice engine side

392
00:18:02,480 --> 00:18:04,620
to provide you really
good quality.

393
00:18:04,620 --> 00:18:06,960
This is not just about
making video calls.

394
00:18:06,960 --> 00:18:09,920
This is about providing really,
really good voice and

395
00:18:09,920 --> 00:18:11,850
video quality.

396
00:18:11,850 --> 00:18:14,780
And then, in addition to that,
there's the codecs-- the audio

397
00:18:14,780 --> 00:18:15,690
and video codecs--

398
00:18:15,690 --> 00:18:18,910
that encode your raw microphone
samples and raw

399
00:18:18,910 --> 00:18:24,110
video frames so that they're
sent out in a reasonable bit

400
00:18:24,110 --> 00:18:25,940
rate out to the network.

401
00:18:25,940 --> 00:18:29,430
And then setting a bit in
conjunction with the video and

402
00:18:29,430 --> 00:18:32,950
audio codecs are bandwidth
estimation, and traffic

403
00:18:32,950 --> 00:18:36,450
shaping, and how to adjust
your bit rates based on

404
00:18:36,450 --> 00:18:37,690
network conditions.

405
00:18:37,690 --> 00:18:40,880
So that's all on the
media layer side.

406
00:18:40,880 --> 00:18:44,400
And then on top of that, we want
to encapsulate this so

407
00:18:44,400 --> 00:18:47,850
that web developers don't need
to worry about this.

408
00:18:47,850 --> 00:18:51,360
And it will work on any
platforms. Then on top of

409
00:18:51,360 --> 00:18:56,030
that, sits some of how this
talks to the browsers and on

410
00:18:56,030 --> 00:18:58,360
top of that, the JavaScript
layers.

411
00:18:58,360 --> 00:19:01,220
And maybe, Ronghua you can speak
a little about that--

412
00:19:01,220 --> 00:19:02,870
about the peer connection
APIs.

413
00:19:02,870 --> 00:19:04,495
RONGHUA WU: Yeah, I guess
you covered it well.

414
00:19:04,495 --> 00:19:07,040

415
00:19:07,040 --> 00:19:12,460
Another thing is, if you have
two browsers behind the

416
00:19:12,460 --> 00:19:15,930
firewall, we need to find
out a way for them to

417
00:19:15,930 --> 00:19:16,910
talk to each other.

418
00:19:16,910 --> 00:19:20,110
That is when your net
[UNINTELLIGIBLE]

419
00:19:20,110 --> 00:19:20,510
.

420
00:19:20,510 --> 00:19:26,560
Kick in So there is some
technique inside libjingle.

421
00:19:26,560 --> 00:19:35,290
So basically, you need to talk
to a server with a public IP.

422
00:19:35,290 --> 00:19:36,370
We call it a [? scan ?]

423
00:19:36,370 --> 00:19:37,490
server.

424
00:19:37,490 --> 00:19:41,160
You talk to that server, then
that server will figure out

425
00:19:41,160 --> 00:19:44,120
which part is reachable
to you.

426
00:19:44,120 --> 00:19:46,870
And then in that phase
we call it candidates

427
00:19:46,870 --> 00:19:50,640
So when you collect all the
candidates , you exchange the

428
00:19:50,640 --> 00:19:53,070
candidates with the
remote peer.

429
00:19:53,070 --> 00:19:56,220
That remote peer knows
how to reach you.

430
00:19:56,220 --> 00:20:00,130

431
00:20:00,130 --> 00:20:05,070
After that we can send the media
stream we produced by

432
00:20:05,070 --> 00:20:06,320
the media engine.

433
00:20:06,320 --> 00:20:08,900

434
00:20:08,900 --> 00:20:11,870
So that's how a call--

435
00:20:11,870 --> 00:20:13,865
we set up.

436
00:20:13,865 --> 00:20:17,760
PUNYABRATA RAY: And so from the
web developer perspective,

437
00:20:17,760 --> 00:20:21,670
you would just call these peer
connection APIs, which you

438
00:20:21,670 --> 00:20:24,630
might see the layer that Ronghua
just spoke about.

439
00:20:24,630 --> 00:20:28,050
And then once the media's
established, that media is

440
00:20:28,050 --> 00:20:31,343
passed to the media engine
layer underneath WebRTC.

441
00:20:31,343 --> 00:20:32,230
SAM DUTTON: That's it.

442
00:20:32,230 --> 00:20:32,670
Right.

443
00:20:32,670 --> 00:20:34,033
I've just posted--

444
00:20:34,033 --> 00:20:35,740
ERIC BIDELMAN: It is complex.

445
00:20:35,740 --> 00:20:37,300
SAM DUTTON: Yeah, it's
pretty complex.

446
00:20:37,300 --> 00:20:39,970
But I've just posted a link
if you can see that the

447
00:20:39,970 --> 00:20:43,760
apprtc.appspot.com link there.

448
00:20:43,760 --> 00:20:46,440
That's to the really
simple demo.

449
00:20:46,440 --> 00:20:49,480
So if you want to take a look
at the code there, that's a

450
00:20:49,480 --> 00:20:52,020
really good place
to get started.

451
00:20:52,020 --> 00:20:54,580
I've also put up a link you
can see above that to

452
00:20:54,580 --> 00:21:00,130
demo.appspot.com To the
architecture diagram that Eric

453
00:21:00,130 --> 00:21:02,150
was talking about.

454
00:21:02,150 --> 00:21:04,400
I think if I can get that
up on-screen now--

455
00:21:04,400 --> 00:21:07,100

456
00:21:07,100 --> 00:21:11,150
I'll try and do a screen
share of that one.

457
00:21:11,150 --> 00:21:11,810
OK.

458
00:21:11,810 --> 00:21:14,525
So I'm showing that stuff now.

459
00:21:14,525 --> 00:21:16,875
ERIC BIDELMAN: Can you zoom
in on the slides?

460
00:21:16,875 --> 00:21:17,640
SAM DUTTON: Yeah.

461
00:21:17,640 --> 00:21:21,050
Let's try and improve
that a bit.

462
00:21:21,050 --> 00:21:21,560
How's that?

463
00:21:21,560 --> 00:21:23,196
That's pretty good, yeah?

464
00:21:23,196 --> 00:21:24,380
ERIC BIDELMAN: A little
bit more, maybe.

465
00:21:24,380 --> 00:21:25,630
Yeah.

466
00:21:25,630 --> 00:21:28,060

467
00:21:28,060 --> 00:21:29,190
Yeah, that's great.

468
00:21:29,190 --> 00:21:30,225
SAM DUTTON: How we doing?

469
00:21:30,225 --> 00:21:32,650
I could even go a little
bit further, maybe.

470
00:21:32,650 --> 00:21:35,400
Maybe that was one step
over the line.

471
00:21:35,400 --> 00:21:38,630

472
00:21:38,630 --> 00:21:41,260
Ray and Ronghua , could you--

473
00:21:41,260 --> 00:21:43,600
just to repeat everything
you've just told me--

474
00:21:43,600 --> 00:21:46,740

475
00:21:46,740 --> 00:21:48,580
can you talk us through this--

476
00:21:48,580 --> 00:21:53,880
what looks in some ways a
rather complex diagram?

477
00:21:53,880 --> 00:21:57,280
It would be great to hear from
you, from kind of top to

478
00:21:57,280 --> 00:21:59,470
bottom, what's going
on in this diagram.

479
00:21:59,470 --> 00:22:01,860
PUNYABRATA RAY: Sure,
absolutely.

480
00:22:01,860 --> 00:22:03,680
I'll start, Ronghua.

481
00:22:03,680 --> 00:22:08,860
So the one thing when someone
looks at this diagram is--

482
00:22:08,860 --> 00:22:13,000
definitely look at the different
colors and what as a

483
00:22:13,000 --> 00:22:16,940
web developer, as opposed to a
browser implementer, what they

484
00:22:16,940 --> 00:22:19,830
really need to worry about.

485
00:22:19,830 --> 00:22:25,260
So essentially, I'm assuming
most of the people who look at

486
00:22:25,260 --> 00:22:27,190
this hangout will be
web developers.

487
00:22:27,190 --> 00:22:32,140
And what they first need to
think about is, essentially,

488
00:22:32,140 --> 00:22:36,580
the top level-- where you have
yellow arrows in this diagram.

489
00:22:36,580 --> 00:22:39,560
Your web application and what
they're going to essentially

490
00:22:39,560 --> 00:22:41,680
design-- a website
or a web app.

491
00:22:41,680 --> 00:22:46,110
And that will essentially then
talk to these web APIs, which

492
00:22:46,110 --> 00:22:49,690
are the peer connection APIs
that are currently being

493
00:22:49,690 --> 00:22:54,020
discussed and ratified
in the W3W.

494
00:22:54,020 --> 00:22:54,660
RONGHUA WU: W3C.

495
00:22:54,660 --> 00:22:56,060
PUNYABRATA RAY: W3C, sorry--

496
00:22:56,060 --> 00:22:58,570
World Wide Consortium.

497
00:22:58,570 --> 00:23:00,870
And those are the peer
connection APIs.

498
00:23:00,870 --> 00:23:05,420
The layer that Ronghua earlier
talked about, where these will

499
00:23:05,420 --> 00:23:08,690
essentially set up the call and
once the call is set up,

500
00:23:08,690 --> 00:23:11,890
pass the media blocks into
the media engines.

501
00:23:11,890 --> 00:23:14,850
So then as you move down--

502
00:23:14,850 --> 00:23:18,580
that purple arrow going into
the WebRTC C API peer

503
00:23:18,580 --> 00:23:19,770
connection--

504
00:23:19,770 --> 00:23:24,810
this section is how the
different browser vendors have

505
00:23:24,810 --> 00:23:30,770
to worry about, from Chrome
to Mozilla, to Opera.

506
00:23:30,770 --> 00:23:35,300
This will somewhat be different
between the

507
00:23:35,300 --> 00:23:36,690
different--

508
00:23:36,690 --> 00:23:39,140
how they choose to implement
the peer connection APIs

509
00:23:39,140 --> 00:23:40,195
within their browser.

510
00:23:40,195 --> 00:23:42,890
And correct me if I'm
wrong, Ronghua. .

511
00:23:42,890 --> 00:23:44,730
So the web developers
don't really have

512
00:23:44,730 --> 00:23:45,500
to worry about that.

513
00:23:45,500 --> 00:23:47,940
Again, we're now getting to the
layer which-- this will be

514
00:23:47,940 --> 00:23:50,460
encapsulated within the
browsers itself.

515
00:23:50,460 --> 00:23:54,460
And then the layers
beneath that are--

516
00:23:54,460 --> 00:23:58,260
what I mentioned about the
physical media engines, where

517
00:23:58,260 --> 00:24:00,920
we handle the actual media
processing of the voice and

518
00:24:00,920 --> 00:24:03,100
video packets--

519
00:24:03,100 --> 00:24:06,410
the different codecs used to
encode and decode, the traffic

520
00:24:06,410 --> 00:24:09,460
shaping, the acoustic echo
cancellation blocks.

521
00:24:09,460 --> 00:24:13,210
So those are the lower
level purple blocks.

522
00:24:13,210 --> 00:24:15,820
And Ronghua , I'm not sure--
the session management

523
00:24:15,820 --> 00:24:17,980
abstract signaling layer.

524
00:24:17,980 --> 00:24:21,630
I don't know how that quite fits
in, or if we need to go

525
00:24:21,630 --> 00:24:24,710
into that in this part, or
that's encapsulated by the

526
00:24:24,710 --> 00:24:26,454
peer connection.

527
00:24:26,454 --> 00:24:30,945
RONGHUA WU: Yeah, in this
diagram, this is the

528
00:24:30,945 --> 00:24:38,070
signaling, and session is part
of this WebRTC C API.

529
00:24:38,070 --> 00:24:41,840
So the discussion going on
that might be moved up a

530
00:24:41,840 --> 00:24:45,340
little bit so that the
application developers have

531
00:24:45,340 --> 00:24:50,010
the flexability to choose
whatever signaling protocol

532
00:24:50,010 --> 00:24:54,270
they want to use in
their application.

533
00:24:54,270 --> 00:24:57,454

534
00:24:57,454 --> 00:25:00,370
Yeah.

535
00:25:00,370 --> 00:25:02,650
ERIC BIDELMAN: So I'm glad
Sam is showing this.

536
00:25:02,650 --> 00:25:06,360
Because it's illustrative of
what the platform is doing

537
00:25:06,360 --> 00:25:06,950
these days, right?

538
00:25:06,950 --> 00:25:09,300
There's a lot of guts to it.

539
00:25:09,300 --> 00:25:11,460
There's a lot of core
implementations that the

540
00:25:11,460 --> 00:25:14,070
browser is taking care for you
as you look at this diagram.

541
00:25:14,070 --> 00:25:15,940
Everything below that--

542
00:25:15,940 --> 00:25:18,360
in that lighter gray box--
everything below those arrows

543
00:25:18,360 --> 00:25:20,400
is totally a black box.

544
00:25:20,400 --> 00:25:21,730
You don't have to
worry about it.

545
00:25:21,730 --> 00:25:22,700
PUNYABRATA RAY: That's
a good point.

546
00:25:22,700 --> 00:25:24,890
ERIC BIDELMAN: Another thing
is the JavaScript APIs that

547
00:25:24,890 --> 00:25:26,300
you built on top of.

548
00:25:26,300 --> 00:25:26,910
But they're--

549
00:25:26,910 --> 00:25:28,850
just keep in mind-- it's
important to know that there's

550
00:25:28,850 --> 00:25:30,690
a lot of stuff built into these

551
00:25:30,690 --> 00:25:32,900
different HTML5 APIs now.

552
00:25:32,900 --> 00:25:34,430
Another example is
WebGL, right?

553
00:25:34,430 --> 00:25:37,740
You can access the GPU and the
graphics card with a couple

554
00:25:37,740 --> 00:25:39,670
lines of JavaScript.

555
00:25:39,670 --> 00:25:40,740
It's ridiculous.

556
00:25:40,740 --> 00:25:42,860
It's ridiculously cool
is what it is.

557
00:25:42,860 --> 00:25:47,510
So kudos to Google and the
engineers at Google for

558
00:25:47,510 --> 00:25:51,186
implementing all this crazy,
awesome stuff for us.

559
00:25:51,186 --> 00:25:52,790
SAM DUTTON: That's
good to hear.

560
00:25:52,790 --> 00:25:54,260
Look, I can't resist--

561
00:25:54,260 --> 00:25:54,960
sorry--

562
00:25:54,960 --> 00:25:58,280
just to break from the
technicalities for a moment.

563
00:25:58,280 --> 00:26:04,005
I just wanted to go to another
demo of get user media that I

564
00:26:04,005 --> 00:26:05,740
really like.

565
00:26:05,740 --> 00:26:10,350
If I can just share that.

566
00:26:10,350 --> 00:26:14,738
In a few seconds, I'll
just move the video.

567
00:26:14,738 --> 00:26:18,300
And I just wanted to show this
because, again, we're doing

568
00:26:18,300 --> 00:26:23,435
stuff with live video data.

569
00:26:23,435 --> 00:26:27,230
I don't know if anyone remembers
the exploding video

570
00:26:27,230 --> 00:26:30,310
experiment that Sean
Christman did.

571
00:26:30,310 --> 00:26:32,760
So here you can see, me
on the video there.

572
00:26:32,760 --> 00:26:36,130
I'll try and increase
the size a bit.

573
00:26:36,130 --> 00:26:39,940
And you can see that
if I click on

574
00:26:39,940 --> 00:26:42,800
the picture, it explodes.

575
00:26:42,800 --> 00:26:44,850
And what's cool is that you
could see that all those

576
00:26:44,850 --> 00:26:47,990
individual pieces are still
rendering the video.

577
00:26:47,990 --> 00:26:50,530

578
00:26:50,530 --> 00:26:53,300
If you can see, the little
squares are still showing

579
00:26:53,300 --> 00:26:56,530
live, the stuff as
I move around.

580
00:26:56,530 --> 00:26:58,330
That makes it a little
clearer.

581
00:26:58,330 --> 00:26:59,940
So I just love that
there is so much

582
00:26:59,940 --> 00:27:02,280
potential for this stuff--

583
00:27:02,280 --> 00:27:06,100
some useful stuff, and obviously
some fun stuff like

584
00:27:06,100 --> 00:27:07,580
that, as well.

585
00:27:07,580 --> 00:27:11,750
Just going back to the Moderator
questions, another

586
00:27:11,750 --> 00:27:16,400
one we've heard a lot of is
asking if the API is going to

587
00:27:16,400 --> 00:27:19,510
become available on
mobile devices.

588
00:27:19,510 --> 00:27:23,800
And particularly, what obstacles
do we need to

589
00:27:23,800 --> 00:27:26,300
overcome before we can
get to that point?

590
00:27:26,300 --> 00:27:29,736
So could I turn over to
Ray and Ronghua again?

591
00:27:29,736 --> 00:27:30,570
PUNYABRATA RAY: Yeah.

592
00:27:30,570 --> 00:27:34,340
No, definitely, I think that's
also one of our high

593
00:27:34,340 --> 00:27:36,710
priorities in the future.

594
00:27:36,710 --> 00:27:40,590
Once we know that this is
stabilized on the desktop

595
00:27:40,590 --> 00:27:45,230
platforms, we would love to
move this to the mobile

596
00:27:45,230 --> 00:27:48,800
devices, both Android and iOS.

597
00:27:48,800 --> 00:27:52,700
Unfortunately, I don't know what
our exact timelines are.

598
00:27:52,700 --> 00:27:55,530
But I know that this is
something we would be very,

599
00:27:55,530 --> 00:27:57,930
very focused on in moving.

600
00:27:57,930 --> 00:28:01,420
So the obstacles essentially
right now is time.

601
00:28:01,420 --> 00:28:04,170
There are so many engineers and
we just need to focus on

602
00:28:04,170 --> 00:28:08,110
getting this working perfectly
on a certain platform--

603
00:28:08,110 --> 00:28:09,350
the desktop platforms--

604
00:28:09,350 --> 00:28:14,906
and then move ahead to
the mobile platforms.

605
00:28:14,906 --> 00:28:16,400
SAM DUTTON: That's
great to hear.

606
00:28:16,400 --> 00:28:20,646

607
00:28:20,646 --> 00:28:21,900
PUNYABRATA RAY: Oh, Sam?

608
00:28:21,900 --> 00:28:24,708
I think we lost your audio.

609
00:28:24,708 --> 00:28:26,070
SAM DUTTON: Oh, sorry.

610
00:28:26,070 --> 00:28:26,700
Is that better?

611
00:28:26,700 --> 00:28:27,540
Yes.

612
00:28:27,540 --> 00:28:29,020
I think I'm back.

613
00:28:29,020 --> 00:28:29,360
OK, good.

614
00:28:29,360 --> 00:28:30,840
I have a mic.

615
00:28:30,840 --> 00:28:34,630
Just moving down the
questions, I

616
00:28:34,630 --> 00:28:36,390
have another one here.

617
00:28:36,390 --> 00:28:41,190
Someone is asking if we could
give more details about

618
00:28:41,190 --> 00:28:42,350
multi-peer issues.

619
00:28:42,350 --> 00:28:45,980
Could you explain a little about
that, and tell us what

620
00:28:45,980 --> 00:28:48,642
the situation is?

621
00:28:48,642 --> 00:28:50,260
PUNYABRATA RAY: Sure.

622
00:28:50,260 --> 00:28:53,040
Let me actually just understand
the question a bit.

623
00:28:53,040 --> 00:28:56,900
Could you give more details
about multi-peer issues.

624
00:28:56,900 --> 00:29:01,540
So I'm going to interpret this
question as the user wants to

625
00:29:01,540 --> 00:29:06,810
know essentially how to set up
like, a video conference

626
00:29:06,810 --> 00:29:08,350
apparently using--

627
00:29:08,350 --> 00:29:15,800
So what we allow today is the
ability to make peer-to-peer

628
00:29:15,800 --> 00:29:21,090
calls and the media is
essentially relayed through

629
00:29:21,090 --> 00:29:22,340
different servers.

630
00:29:22,340 --> 00:29:24,750

631
00:29:24,750 --> 00:29:27,360
I don't know if it is possible
today, but it should be

632
00:29:27,360 --> 00:29:30,150
possible in the future to
be able to render--

633
00:29:30,150 --> 00:29:33,270
if you have multiple video
streams coming in--

634
00:29:33,270 --> 00:29:35,630
to render the multiple images.

635
00:29:35,630 --> 00:29:36,670
That's true.

636
00:29:36,670 --> 00:29:38,130
Right, Ronghua?

637
00:29:38,130 --> 00:29:42,970
RONGHUA WU: Yeah, that
sounds right.

638
00:29:42,970 --> 00:29:45,430
I'm reading this question.

639
00:29:45,430 --> 00:29:51,440
I'm thinking maybe he was
asking how to maybe have

640
00:29:51,440 --> 00:29:54,350
multiple peer connections
in one place.

641
00:29:54,350 --> 00:29:54,900
PUNYABRATA RAY: Browser?

642
00:29:54,900 --> 00:29:58,910
RONGHUA WU: Because this is
one issue I know of--

643
00:29:58,910 --> 00:30:01,560
not issue-- but, not
implemented yet.

644
00:30:01,560 --> 00:30:05,580
We only support one peer
connection in one

645
00:30:05,580 --> 00:30:08,453
page at this moment.

646
00:30:08,453 --> 00:30:10,890
PUNYABRATA RAY: But that's
definitely something that's

647
00:30:10,890 --> 00:30:12,300
going to be changed
and we're going to

648
00:30:12,300 --> 00:30:15,490
support that in the future.

649
00:30:15,490 --> 00:30:17,020
ERIC BIDELMAN: Is this something
that the current

650
00:30:17,020 --> 00:30:20,470
specification talks about at
all, or is it just talking

651
00:30:20,470 --> 00:30:23,625
about one-to-one and
peer-to-peer?

652
00:30:23,625 --> 00:30:24,570
PUNYABRATA RAY: That's
a good question.

653
00:30:24,570 --> 00:30:25,860
I don't know.

654
00:30:25,860 --> 00:30:29,374

655
00:30:29,374 --> 00:30:32,682
[LAUGHTER]

656
00:30:32,682 --> 00:30:33,190
SAM DUTTON: OK.

657
00:30:33,190 --> 00:30:37,450
So another question we had
earlier on on Moderator from

658
00:30:37,450 --> 00:30:42,160
Clive Bolton, asking if the
standard behind the API is

659
00:30:42,160 --> 00:30:46,660
designed more for asynchronous
or synchronous communication.

660
00:30:46,660 --> 00:30:47,160
[UNINTELLIGIBLE]

661
00:30:47,160 --> 00:30:52,140
in either case is a concept of
time bounding, making latency

662
00:30:52,140 --> 00:30:53,390
predictable.

663
00:30:53,390 --> 00:30:56,276

664
00:30:56,276 --> 00:30:58,710
PUNYABRATA RAY: This question,
given that there are so many

665
00:30:58,710 --> 00:31:00,330
layers in WebRTC--

666
00:31:00,330 --> 00:31:03,200
there's the media layer,
and the voice and

667
00:31:03,200 --> 00:31:06,120
video engine packets.

668
00:31:06,120 --> 00:31:08,230
The way it's been designed, the
voice and video streams

669
00:31:08,230 --> 00:31:10,990
take different routes through
the networks, and are

670
00:31:10,990 --> 00:31:14,140
subjected to different
latencies and paths.

671
00:31:14,140 --> 00:31:18,240
And our engines have been
designed to overcome that.

672
00:31:18,240 --> 00:31:20,430
They will work irrespective
of that.

673
00:31:20,430 --> 00:31:25,540
However, I'm not sure exactly
which aspect of WebRTC this

674
00:31:25,540 --> 00:31:26,640
question is designed to.

675
00:31:26,640 --> 00:31:29,500
If he's actually talking about
the media layer or if he's

676
00:31:29,500 --> 00:31:32,960
talking about the
JavaScript APIs.

677
00:31:32,960 --> 00:31:34,910
So I'm not sure exactly
how to answer that.

678
00:31:34,910 --> 00:31:36,970
I don't know what your take
on that is, Ronghua.

679
00:31:36,970 --> 00:31:41,820
RONGHUA WU: I don't have a good
answer for that, either.

680
00:31:41,820 --> 00:31:43,200
PUNYABRATA RAY: Right.

681
00:31:43,200 --> 00:31:45,340
SAM DUTTON: One thing I was
going to say that--

682
00:31:45,340 --> 00:31:47,400
I'll put up the link
in a moment.

683
00:31:47,400 --> 00:31:52,790
But if people have comments on
the answers that we've had to

684
00:31:52,790 --> 00:31:58,200
questions, if they can add
comments to the Google page,

685
00:31:58,200 --> 00:32:00,530
that would be great.

686
00:32:00,530 --> 00:32:03,456
And I'll put up a link
to that in a moment.

687
00:32:03,456 --> 00:32:06,110
ERIC BIDELMAN: Just to speak
to that question-- if he is

688
00:32:06,110 --> 00:32:12,290
talking about the JavaScript
application APIs--

689
00:32:12,290 --> 00:32:14,210
it is an asynchronous API.

690
00:32:14,210 --> 00:32:15,420
You're sort of adding
messages, you're

691
00:32:15,420 --> 00:32:16,610
doing message passing.

692
00:32:16,610 --> 00:32:21,460
And that's good because like a
lot of offline APIs, Indexed

693
00:32:21,460 --> 00:32:25,330
DB, the file system APIs, some
of these other APIs that are

694
00:32:25,330 --> 00:32:27,880
coming online, they're always
synchronous because there's a

695
00:32:27,880 --> 00:32:29,970
lot of stuff going on when
you're making these calls.

696
00:32:29,970 --> 00:32:33,350
And the last thing you want to
do is sort of freeze up your

697
00:32:33,350 --> 00:32:35,490
JavaScript main UI thread.

698
00:32:35,490 --> 00:32:38,200
So I think in the future, you're
going to see a ton of

699
00:32:38,200 --> 00:32:39,590
asynchronous JavaScript APIs.

700
00:32:39,590 --> 00:32:41,670
It's sort of the way
things are going.

701
00:32:41,670 --> 00:32:44,350
Unfortunately, JavaScript's a
single threaded environment,

702
00:32:44,350 --> 00:32:47,280
so you have to do that in order
to make applications

703
00:32:47,280 --> 00:32:50,770
that people don't tear their
hair out for because it's so

704
00:32:50,770 --> 00:32:53,260
slow and obnoxious.

705
00:32:53,260 --> 00:32:54,900
SAM DUTTON: Sure.

706
00:32:54,900 --> 00:32:55,490
Yeah.

707
00:32:55,490 --> 00:32:58,080
A question from a
guy called Pete.

708
00:32:58,080 --> 00:32:59,210
He's in Mountain View.

709
00:32:59,210 --> 00:33:01,630
I think that that's
in California.

710
00:33:01,630 --> 00:33:05,610
He's asking what codec is
Google's implementation of

711
00:33:05,610 --> 00:33:08,990
WebRTC encoding the
video stream with.

712
00:33:08,990 --> 00:33:12,450
And what do the other browser
vendors think?

713
00:33:12,450 --> 00:33:14,910
He says that he reckons Opera's

714
00:33:14,910 --> 00:33:16,920
working on this, as well.

715
00:33:16,920 --> 00:33:18,165
What's the story?

716
00:33:18,165 --> 00:33:24,191
Are we working with VP8, and
what's the future there?

717
00:33:24,191 --> 00:33:29,280
PUNYABRATA RAY: Yes, we are
using VP8, which was part of a

718
00:33:29,280 --> 00:33:32,820
company called On2 that Google
acquired a few years back.

719
00:33:32,820 --> 00:33:35,850
And Google has open sourced
this video codec.

720
00:33:35,850 --> 00:33:37,130
It's completely out there.

721
00:33:37,130 --> 00:33:39,130
It's part of the WebM Project.

722
00:33:39,130 --> 00:33:43,770
And given that the whole
objective of WebRTC is to be

723
00:33:43,770 --> 00:33:48,490
open, we decided to go with VP8
and not have any loyalty

724
00:33:48,490 --> 00:33:51,960
encumbered codecs to use with
an open source project.

725
00:33:51,960 --> 00:33:56,285
So we are using VP8 today
as a video codec.

726
00:33:56,285 --> 00:33:58,860

727
00:33:58,860 --> 00:34:05,690
As far as what the other
browsers vendors think, I

728
00:34:05,690 --> 00:34:07,000
can't really comment on that.

729
00:34:07,000 --> 00:34:12,139
But again, given the fact that
VP8 is open source, I think

730
00:34:12,139 --> 00:34:13,560
they're pretty much on board.

731
00:34:13,560 --> 00:34:16,989
But again, that's just
my personal--

732
00:34:16,989 --> 00:34:20,670
I'm sure the big question is
interoperability and what's

733
00:34:20,670 --> 00:34:23,159
going to happen with H264.

734
00:34:23,159 --> 00:34:27,760
That's something that comes up a
lot in our discussion lists.

735
00:34:27,760 --> 00:34:31,699
And it's just that that's
big on our minds, too.

736
00:34:31,699 --> 00:34:35,380
But again, we want to stay
with an open source

737
00:34:35,380 --> 00:34:38,150
royalty-free codec so that
anyone can use this and not

738
00:34:38,150 --> 00:34:41,699
have to worry about royalties.

739
00:34:41,699 --> 00:34:43,739
ERIC BIDELMAN: This kind of
segues nicely into a question

740
00:34:43,739 --> 00:34:46,909
I'm seeing later on from Neo
in New York City-- is about

741
00:34:46,909 --> 00:34:48,340
sort of other browser
vendors--

742
00:34:48,340 --> 00:34:49,020
Firefox--

743
00:34:49,020 --> 00:34:52,440
i.e., Safari-- working on WebRTC
and implementing it in

744
00:34:52,440 --> 00:34:53,300
their browsers.

745
00:34:53,300 --> 00:34:57,180
Could we talk a little bit about
sort of what's going on

746
00:34:57,180 --> 00:34:58,215
with the community?

747
00:34:58,215 --> 00:34:59,150
PUNYABRATA RAY: Sure.

748
00:34:59,150 --> 00:35:02,620
And Ronghua, cut me in or
because you might know more.

749
00:35:02,620 --> 00:35:05,132
RONGHUA WU: No, you have
more information.

750
00:35:05,132 --> 00:35:07,780
PUNYABRATA RAY: So I
know that we are--

751
00:35:07,780 --> 00:35:10,090
so the peer connection
APIs, for example.

752
00:35:10,090 --> 00:35:13,000
This is being ratified in
the standard at Mozilla.

753
00:35:13,000 --> 00:35:14,460
It's part of that.

754
00:35:14,460 --> 00:35:19,330
So this is just not solely
a Google initiative.

755
00:35:19,330 --> 00:35:23,380
We start this, but we would like
other browser vendors to

756
00:35:23,380 --> 00:35:26,670
obviously, use WebRTC.

757
00:35:26,670 --> 00:35:29,280
So we're working with Mozilla,
and we're also

758
00:35:29,280 --> 00:35:32,070
working with Opera.

759
00:35:32,070 --> 00:35:34,410
IE and Safari right now--

760
00:35:34,410 --> 00:35:36,380
I don't know what the
engagement level is,

761
00:35:36,380 --> 00:35:39,560
especially with IE
at this point.

762
00:35:39,560 --> 00:35:42,310
So essentially I don't know,
and I can't make

763
00:35:42,310 --> 00:35:44,050
much comments on it.

764
00:35:44,050 --> 00:35:46,010
Same thing with Apple, Safari.

765
00:35:46,010 --> 00:35:49,450
I believe they're
also actually--

766
00:35:49,450 --> 00:35:52,320
people from Apple-- are
part of the standards.

767
00:35:52,320 --> 00:35:56,330
I don't know if they're going to
go with WebRTC and Safari.

768
00:35:56,330 --> 00:35:57,030
But--

769
00:35:57,030 --> 00:35:57,480
think--

770
00:35:57,480 --> 00:36:00,380
I believe they're working
on the standards, also.

771
00:36:00,380 --> 00:36:04,430
So essentially, to wrap that
up, Mozilla and Opera are

772
00:36:04,430 --> 00:36:06,280
definitely currently on board.

773
00:36:06,280 --> 00:36:09,450
Apple, I believe is working
on the standards and I'm

774
00:36:09,450 --> 00:36:11,096
not sure about IE.

775
00:36:11,096 --> 00:36:12,230
SAM DUTTON: Cool.

776
00:36:12,230 --> 00:36:15,000
While we're on the subject of
browsers, a question a lot of

777
00:36:15,000 --> 00:36:19,370
people ask me pretty regularly
is, when might we see this in

778
00:36:19,370 --> 00:36:21,830
Chrome's stable?

779
00:36:21,830 --> 00:36:24,110
Do we have any sense of when
that might happen?

780
00:36:24,110 --> 00:36:24,670
PUNYABRATA RAY: Yeah.

781
00:36:24,670 --> 00:36:26,390
No, that's a really
good question.

782
00:36:26,390 --> 00:36:29,070
So right now it sits
behind a flag.

783
00:36:29,070 --> 00:36:33,390
There's essentially two main
things before we can

784
00:36:33,390 --> 00:36:36,840
completely open this up, and
it's not behind a flag.

785
00:36:36,840 --> 00:36:40,330
One is the fact that the peer
connection APIs are still

786
00:36:40,330 --> 00:36:41,820
somewhat in a state of flux.

787
00:36:41,820 --> 00:36:44,310
It's still being ratified.

788
00:36:44,310 --> 00:36:49,370
So once that is in a state,
maybe in the next few months--

789
00:36:49,370 --> 00:36:51,760
my guess-- but I might
be completely wrong.

790
00:36:51,760 --> 00:36:54,510
So the next few-- so I think
we're currently on any team

791
00:36:54,510 --> 00:36:55,280
that's been open.

792
00:36:55,280 --> 00:37:00,670
Maybe by M20, M21, they should
be not sitting behind a flag.

793
00:37:00,670 --> 00:37:02,630
That's just my guess.

794
00:37:02,630 --> 00:37:06,020
And the second aspect of
this is, also we need

795
00:37:06,020 --> 00:37:06,990
people to try it out.

796
00:37:06,990 --> 00:37:09,420
If there's any major issues out
there, we would like to

797
00:37:09,420 --> 00:37:12,680
fix those before opening
this up by default .

798
00:37:12,680 --> 00:37:14,250
ERIC BIDELMAN: And this
is my plea to you

799
00:37:14,250 --> 00:37:15,270
developers out there.

800
00:37:15,270 --> 00:37:18,940
The reason a lot of these APIs
exist behind about [? dot ?]

801
00:37:18,940 --> 00:37:21,330
flags or behind a flag
in general is for

802
00:37:21,330 --> 00:37:22,190
you to try them out.

803
00:37:22,190 --> 00:37:25,000
They're still being actively
worked on.

804
00:37:25,000 --> 00:37:29,650
And so this is my pitch to
install Chrome Canary, right?

805
00:37:29,650 --> 00:37:31,910
This is our nightly
build of Chrome.

806
00:37:31,910 --> 00:37:34,340
You saw the Dev channel
build of Chrome.

807
00:37:34,340 --> 00:37:37,670
We actually rely on you guys
very heavily to submit bugs,

808
00:37:37,670 --> 00:37:40,920
to tell us what's wrong with
these APIs, to test them in

809
00:37:40,920 --> 00:37:44,460
the field, so to speak, even
if it's just a prototype.

810
00:37:44,460 --> 00:37:45,910
It's really useful
information.

811
00:37:45,910 --> 00:37:47,850
And of course, you can
always file bugs.

812
00:37:47,850 --> 00:37:50,260
Chrome is an open source
project and we very

813
00:37:50,260 --> 00:37:51,900
much look at those.

814
00:37:51,900 --> 00:37:54,310
I look at Issue-Tracker
every day of my life.

815
00:37:54,310 --> 00:37:58,310

816
00:37:58,310 --> 00:37:59,740
SAM DUTTON: That's
good to hear.

817
00:37:59,740 --> 00:38:02,880

818
00:38:02,880 --> 00:38:05,520
I know the feeling.

819
00:38:05,520 --> 00:38:07,310
We had another question here.

820
00:38:07,310 --> 00:38:11,460
Let's just look down at the
list of stuff here.

821
00:38:11,460 --> 00:38:15,030
Someone asking about
web socket API to

822
00:38:15,030 --> 00:38:17,510
transfer audio and video.

823
00:38:17,510 --> 00:38:22,850
From what I believe, this has
been possible in Chrome.

824
00:38:22,850 --> 00:38:25,430
I think since Chrome 16.

825
00:38:25,430 --> 00:38:29,920
And on the service side, there
are some libraries that

826
00:38:29,920 --> 00:38:32,160
support that.

827
00:38:32,160 --> 00:38:37,620
So there are going to be, I
believe, some demos at some

828
00:38:37,620 --> 00:38:38,420
stage about this.

829
00:38:38,420 --> 00:38:41,455
So maybe, Eric, can you
enlighten us on this?

830
00:38:41,455 --> 00:38:43,130
ERIC BIDELMAN: I can.

831
00:38:43,130 --> 00:38:44,950
So this is something I've
actually been interested in

832
00:38:44,950 --> 00:38:47,385
for a long time, is
to be able to--

833
00:38:47,385 --> 00:38:50,590
there's not really a good
solution for streaming audio.

834
00:38:50,590 --> 00:38:55,240
So I wanted to see if it was
possible, just as a prototype,

835
00:38:55,240 --> 00:38:58,890
to build something that used
the web socket API.

836
00:38:58,890 --> 00:39:01,190
So web sockets now support
sending binary data.

837
00:39:01,190 --> 00:39:05,040
You can send a file or a blog,
which is exactly what you need

838
00:39:05,040 --> 00:39:10,420
for low latency transfer of sort
of an audio-type file.

839
00:39:10,420 --> 00:39:14,030
So using a web socket-- a binary
web socket-- with the

840
00:39:14,030 --> 00:39:17,790
web audio API that's
in Chrome--

841
00:39:17,790 --> 00:39:21,120
what that allows you to do is
basically send small chunks of

842
00:39:21,120 --> 00:39:23,670
an audio file across
a web socket.

843
00:39:23,670 --> 00:39:26,040
It's sort of a poor man's
streaming, as I

844
00:39:26,040 --> 00:39:27,080
like to call it.

845
00:39:27,080 --> 00:39:28,590
And then on the other side--

846
00:39:28,590 --> 00:39:31,750
on the receiver side-- you can
use the web audio API to

847
00:39:31,750 --> 00:39:35,520
schedule precisely when each
chunk should play.

848
00:39:35,520 --> 00:39:39,240
So as the receiver starts to get
these chunks, you start to

849
00:39:39,240 --> 00:39:42,670
append them on, and schedule
them at precise times when

850
00:39:42,670 --> 00:39:44,350
they were supposed to play
in the initial song.

851
00:39:44,350 --> 00:39:47,945
And so it pretty much just
sounds like the song is

852
00:39:47,945 --> 00:39:49,410
playing straight through.

853
00:39:49,410 --> 00:39:50,980
So it's very much
[? a perfect ?] concept, and I

854
00:39:50,980 --> 00:39:53,880
plan to write an article
on it for html5rocks.

855
00:39:53,880 --> 00:39:55,580
So stay tuned for that.

856
00:39:55,580 --> 00:39:59,550
But combining web socket API
with the web audio API, you

857
00:39:59,550 --> 00:40:03,150
can definitely do audio
and video streaming.

858
00:40:03,150 --> 00:40:06,520
There's also another API that's
in Chrome and being

859
00:40:06,520 --> 00:40:07,140
speced out.

860
00:40:07,140 --> 00:40:09,440
It's called the MediaSource
API.

861
00:40:09,440 --> 00:40:13,686
And essentially, what that
allows you to do is sort of

862
00:40:13,686 --> 00:40:16,330
something similar-- use a video
tag or an audio tag and

863
00:40:16,330 --> 00:40:23,180
sort of use XMLHttpRequest to
pull down chunks of audio or

864
00:40:23,180 --> 00:40:26,000
video, and then append
those to a video tag.

865
00:40:26,000 --> 00:40:28,610
So that's also kind of a poor
man's streaming, if you will.

866
00:40:28,610 --> 00:40:31,640
But it does do the job,
and it allows you to--

867
00:40:31,640 --> 00:40:33,940
I think what the question is
sort of getting at is to do

868
00:40:33,940 --> 00:40:35,380
some [UNINTELLIGIBLE]
streaming--

869
00:40:35,380 --> 00:40:36,475
audio and video.

870
00:40:36,475 --> 00:40:39,640
SAM DUTTON: Yeah, I've seen some
great demos of that stuff

871
00:40:39,640 --> 00:40:41,260
and lots of possibilities.

872
00:40:41,260 --> 00:40:42,290
It kind of--

873
00:40:42,290 --> 00:40:44,160
I don't know if that's the
word-- but it kind of

874
00:40:44,160 --> 00:40:46,680
[? fake ?] almost
[? seductive ?] streaming

875
00:40:46,680 --> 00:40:51,070
model for that giving different
media depending on

876
00:40:51,070 --> 00:40:51,515
the situation.

877
00:40:51,515 --> 00:40:53,020
ERIC BIDELMAN: There's a couple
APIs that play now that

878
00:40:53,020 --> 00:40:55,270
allow you to do similar things,
but different use

879
00:40:55,270 --> 00:40:55,970
cases, right?

880
00:40:55,970 --> 00:40:59,450
There's WebRTC for certain use
cases and direct peer-to-peer

881
00:40:59,450 --> 00:41:00,400
connections.

882
00:41:00,400 --> 00:41:02,730
Web sockets do similar
things to that, but

883
00:41:02,730 --> 00:41:03,620
different use cases.

884
00:41:03,620 --> 00:41:05,107
And then there's these
other APIs that are

885
00:41:05,107 --> 00:41:06,020
sort of at play, too.

886
00:41:06,020 --> 00:41:09,950
So it's kind of choose your own
battle, and use the right

887
00:41:09,950 --> 00:41:12,995
technology or API for the job
that you're trying to do.

888
00:41:12,995 --> 00:41:13,720
SAM DUTTON: Yeah.

889
00:41:13,720 --> 00:41:16,420
We've got another question
coming from California, which

890
00:41:16,420 --> 00:41:18,440
is interesting to
me, actually.

891
00:41:18,440 --> 00:41:23,210
So we have a stack of new APIs,
and what this guy's

892
00:41:23,210 --> 00:41:27,400
wondering is, are these going to
be useful for other stuff?

893
00:41:27,400 --> 00:41:30,220
Is there some other stuff that
we can do with all this, other

894
00:41:30,220 --> 00:41:31,050
than video?

895
00:41:31,050 --> 00:41:32,970
So I suspect there is.

896
00:41:32,970 --> 00:41:38,550
So if we could get some ideas
about that, that'd be great.

897
00:41:38,550 --> 00:41:39,780
I'm going to disappear
because--

898
00:41:39,780 --> 00:41:41,455
I'm going to be five seconds--

899
00:41:41,455 --> 00:41:45,986
I need to get my power cable.

900
00:41:45,986 --> 00:41:46,720
PUNYABRATA RAY: Yeah.

901
00:41:46,720 --> 00:41:51,790
So this started out as a
project of real-time

902
00:41:51,790 --> 00:41:52,630
communication--

903
00:41:52,630 --> 00:41:56,920
voice and video chatting
between two browsers.

904
00:41:56,920 --> 00:42:02,150
But I'm sure there's other
applications, like streaming.

905
00:42:02,150 --> 00:42:04,440
And I'm not sure exactly
if anyone--

906
00:42:04,440 --> 00:42:04,660
I don't know.

907
00:42:04,660 --> 00:42:06,910
You might know if anyone
in our engineering is

908
00:42:06,910 --> 00:42:10,970
specifically working on
streaming audio and video,

909
00:42:10,970 --> 00:42:12,020
also in addition.

910
00:42:12,020 --> 00:42:17,610
But the tricky part about
two-way communication is there

911
00:42:17,610 --> 00:42:18,710
can be no delay.

912
00:42:18,710 --> 00:42:21,300
With streaming, you can perhaps
wait a bit, let it

913
00:42:21,300 --> 00:42:23,470
buffer up, and then let it go.

914
00:42:23,470 --> 00:42:26,370
But it's a little trickier
when you want to have a

915
00:42:26,370 --> 00:42:28,630
two-way call, but you can't
have any delay.

916
00:42:28,630 --> 00:42:32,350
Because if not, people will be
stepping over each other.

917
00:42:32,350 --> 00:42:37,910

918
00:42:37,910 --> 00:42:42,280
RONGHUA WU: If you look at the
specs of the stream API, they

919
00:42:42,280 --> 00:42:45,580
also mention that you can use
the camera as the source.

920
00:42:45,580 --> 00:42:48,100
You can also use a local
file as a source.

921
00:42:48,100 --> 00:42:52,860
So with that, you might be
able to do like a screen

922
00:42:52,860 --> 00:42:56,140
sharing presentation--

923
00:42:56,140 --> 00:42:59,145
those kind of stuff,
besides the video.

924
00:42:59,145 --> 00:43:01,880
PUNYABRATA RAY: And even
to localized it.

925
00:43:01,880 --> 00:43:05,190
For example, allowing the fact
we can capture video frames

926
00:43:05,190 --> 00:43:07,580
from a person's laptop.

927
00:43:07,580 --> 00:43:10,540
There could be so many other
applications as, perhaps,

928
00:43:10,540 --> 00:43:13,810
camera resolution's increase,
you could do some face

929
00:43:13,810 --> 00:43:18,540
recognition, you could do
some eyeball tracking.

930
00:43:18,540 --> 00:43:22,960
All these other cool, neat
effects that you could add to

931
00:43:22,960 --> 00:43:24,545
your applications.

932
00:43:24,545 --> 00:43:26,620
SAM DUTTON: That would be
great-- that stuff.

933
00:43:26,620 --> 00:43:30,010
Stuff that in the past has
been really expensive and

934
00:43:30,010 --> 00:43:31,385
really not widely accessible.

935
00:43:31,385 --> 00:43:35,740

936
00:43:35,740 --> 00:43:39,180
So here's a question that I knew
we would get, again from

937
00:43:39,180 --> 00:43:40,690
California.

938
00:43:40,690 --> 00:43:43,360
Someone asking if Google
hangouts--

939
00:43:43,360 --> 00:43:45,735
what we're doing now-- is
going to use WebRTC.

940
00:43:45,735 --> 00:43:48,450
Is that happen going to happen
in the next six months?

941
00:43:48,450 --> 00:43:50,720
They're saying, I don't want
to use a plug-in anymore.

942
00:43:50,720 --> 00:43:52,790
WebRTC will be awesome!

943
00:43:52,790 --> 00:43:53,670
PUNYABRATA RAY: Yeah.

944
00:43:53,670 --> 00:43:58,150
That's the whole purpose
of this project.

945
00:43:58,150 --> 00:44:01,230
People open up their browsers
and make a voice and video

946
00:44:01,230 --> 00:44:04,600
call without having to download
an extra plug-in.

947
00:44:04,600 --> 00:44:08,370
With respect to internally
what hangouts is doing, I

948
00:44:08,370 --> 00:44:09,560
actually don't know.

949
00:44:09,560 --> 00:44:12,620
We're completely separate
projects.

950
00:44:12,620 --> 00:44:17,980
I'm sure at some point,
there will be overlap.

951
00:44:17,980 --> 00:44:21,820
But at this point, I don't know
what the plan of hangouts

952
00:44:21,820 --> 00:44:24,740
is and what I don't
know if you--

953
00:44:24,740 --> 00:44:27,380

954
00:44:27,380 --> 00:44:29,190
I'm sure there's people
already talking

955
00:44:29,190 --> 00:44:30,070
about that at Google.

956
00:44:30,070 --> 00:44:31,880
You know, one day,
hopefully, we can

957
00:44:31,880 --> 00:44:35,230
move to a native client.

958
00:44:35,230 --> 00:44:36,790
SAM DUTTON: So these
are separate

959
00:44:36,790 --> 00:44:38,240
projects at the moment.

960
00:44:38,240 --> 00:44:38,805
Is that right?

961
00:44:38,805 --> 00:44:39,640
PUNYABRATA RAY: Correct.

962
00:44:39,640 --> 00:44:42,060
SAM DUTTON: OK.

963
00:44:42,060 --> 00:44:44,280
So more questions
from Moderator.

964
00:44:44,280 --> 00:44:46,290
First, I would really
like to show us

965
00:44:46,290 --> 00:44:49,630
another slightly foolish--

966
00:44:49,630 --> 00:44:50,700
well, I shouldn't
say foolish--

967
00:44:50,700 --> 00:44:51,877
entertaining.

968
00:44:51,877 --> 00:44:52,344
Hang on.

969
00:44:52,344 --> 00:44:55,355
If I can get another
get user media.

970
00:44:55,355 --> 00:44:58,730

971
00:44:58,730 --> 00:44:59,480
Hold on a minute.

972
00:44:59,480 --> 00:45:01,160
Let's have a look.

973
00:45:01,160 --> 00:45:02,370
There's something nice here.

974
00:45:02,370 --> 00:45:02,760
OK.

975
00:45:02,760 --> 00:45:06,470
So I'll just screen
share this again.

976
00:45:06,470 --> 00:45:14,690
And so here we have a kind of
Photo Booth-like application.

977
00:45:14,690 --> 00:45:17,552
Can you guys see that over
in Mountain View?

978
00:45:17,552 --> 00:45:18,686
PUNYABRATA RAY: Yes.

979
00:45:18,686 --> 00:45:21,535
SAM DUTTON: So if I click
this to begin--

980
00:45:21,535 --> 00:45:41,820

981
00:45:41,820 --> 00:45:43,060
PUNYABRATA RAY: Oh, cool.

982
00:45:43,060 --> 00:45:44,870
SAM DUTTON: Yeah, I
just love that.

983
00:45:44,870 --> 00:45:46,480
It's a really fun little app.

984
00:45:46,480 --> 00:45:49,780
And just beautifully
implemented.

985
00:45:49,780 --> 00:45:55,930
Again, doing lovely stuff
to get content

986
00:45:55,930 --> 00:45:59,120
from your own camera.

987
00:45:59,120 --> 00:46:01,940
So there's some really
imaginative

988
00:46:01,940 --> 00:46:04,310
material coming out.

989
00:46:04,310 --> 00:46:07,290
Just to go down the questions.

990
00:46:07,290 --> 00:46:12,380
One of the things I have heard
a lot is people asking about

991
00:46:12,380 --> 00:46:16,420
security with Luke
[UNINTELLIGIBLE]

992
00:46:16,420 --> 00:46:18,520
I think you pronounce--

993
00:46:18,520 --> 00:46:21,310
and he's saying, what about
the security and the flux

994
00:46:21,310 --> 00:46:22,370
encryption.

995
00:46:22,370 --> 00:46:24,160
Could we have a comment
on that.

996
00:46:24,160 --> 00:46:27,052

997
00:46:27,052 --> 00:46:28,180
PUNYABRATA RAY: I heard
the first part--

998
00:46:28,180 --> 00:46:28,880
what about security.

999
00:46:28,880 --> 00:46:31,030
What was the second part?

1000
00:46:31,030 --> 00:46:32,300
ERIC BIDELMAN: Flux
encryption?

1001
00:46:32,300 --> 00:46:34,490
PUNYABRATA RAY: I actually
don't know what flux

1002
00:46:34,490 --> 00:46:36,700
encryption is.

1003
00:46:36,700 --> 00:46:39,372
But the one thing that--

1004
00:46:39,372 --> 00:46:41,430
SAM DUTTON: I just like
to spring impossible

1005
00:46:41,430 --> 00:46:42,765
questions on you.

1006
00:46:42,765 --> 00:46:43,655
[LAUGHTER]

1007
00:46:43,655 --> 00:46:45,710
PUNYABRATA RAY: I would
Google it right now.

1008
00:46:45,710 --> 00:46:47,325
[LAUGHTER]

1009
00:46:47,325 --> 00:46:51,220
PUNYABRATA RAY: But one thing
about the voice and video

1010
00:46:51,220 --> 00:46:56,250
streams by default today, I
believe we're using secure RTP

1011
00:46:56,250 --> 00:47:00,050
protocols, which has been
enabled by default.

1012
00:47:00,050 --> 00:47:03,780
So that's in terms of security
of the RTP stream.

1013
00:47:03,780 --> 00:47:06,542
So that is encrypted today.

1014
00:47:06,542 --> 00:47:08,400
ERIC BIDELMAN: One thing that's
not there today-- and

1015
00:47:08,400 --> 00:47:12,560
I'm actually not sure if even a
specification says anything

1016
00:47:12,560 --> 00:47:13,150
about this.

1017
00:47:13,150 --> 00:47:16,200
But being able to access the
camera, sort of just by making

1018
00:47:16,200 --> 00:47:18,630
a JavaScript call, right.

1019
00:47:18,630 --> 00:47:21,130
Currently there's no sort of
permission dialog that comes

1020
00:47:21,130 --> 00:47:24,190
down that says to the user, do
you want to give this app

1021
00:47:24,190 --> 00:47:27,950
access to your camera
or deny that access.

1022
00:47:27,950 --> 00:47:29,730
And of course, that happens
with a lot of

1023
00:47:29,730 --> 00:47:30,910
the APIs now, right?

1024
00:47:30,910 --> 00:47:32,960
There's some kind of
permission level.

1025
00:47:32,960 --> 00:47:35,140
There's sort of on the drive-by
web-- that the user

1026
00:47:35,140 --> 00:47:38,630
has to buy into to allow an
application to use one of

1027
00:47:38,630 --> 00:47:39,720
these APIs.

1028
00:47:39,720 --> 00:47:40,680
So that's not there today.

1029
00:47:40,680 --> 00:47:44,410
I don't know if that's being
worked out, but I'm almost

1030
00:47:44,410 --> 00:47:47,380
certain the spec doesn't
really mention that.

1031
00:47:47,380 --> 00:47:49,450
Possibly in the future
that could come--

1032
00:47:49,450 --> 00:47:51,715
where the user has to
manually sort of--

1033
00:47:51,715 --> 00:47:54,030
RONGHUA WU: Actually, I believe
there's a team working

1034
00:47:54,030 --> 00:47:57,030
on that for Chrome.

1035
00:47:57,030 --> 00:47:58,990
It's called Camera UI.

1036
00:47:58,990 --> 00:48:05,840
Basically, allow you to grant
the access to the camera.

1037
00:48:05,840 --> 00:48:08,280
ERIC BIDELMAN: Oh that's cool.

1038
00:48:08,280 --> 00:48:11,120
Right now, it's worth mentioning
that if you have, I

1039
00:48:11,120 --> 00:48:14,640
guess, multiple cameras attached
to a laptop or you're

1040
00:48:14,640 --> 00:48:17,410
set up, then it picks
the first--

1041
00:48:17,410 --> 00:48:18,840
RONGHUA WU: It picks
a default one.

1042
00:48:18,840 --> 00:48:19,700
ERIC BIDELMAN: OK.

1043
00:48:19,700 --> 00:48:21,630
RONGHUA WU: But I know there's
a team work on that, but I

1044
00:48:21,630 --> 00:48:23,250
don't know the detail--

1045
00:48:23,250 --> 00:48:24,225
when, or--

1046
00:48:24,225 --> 00:48:25,200
ERIC BIDELMAN: Yeah.

1047
00:48:25,200 --> 00:48:26,660
We'll look forward
to that sometime.

1048
00:48:26,660 --> 00:48:27,400
SAM DUTTON: Yeah.

1049
00:48:27,400 --> 00:48:30,770
I think-- am I right in saying
that-- using the input

1050
00:48:30,770 --> 00:48:34,050
element, we have an
implementation on Chrome for

1051
00:48:34,050 --> 00:48:35,000
Android now.

1052
00:48:35,000 --> 00:48:38,300
So that's really cool to be
able to use a camera.

1053
00:48:38,300 --> 00:48:39,590
Is that correct, Eric?

1054
00:48:39,590 --> 00:48:41,720
ERIC BIDELMAN: That's true.

1055
00:48:41,720 --> 00:48:45,640
I believe Android Honeycomb,
and then now Chrome for

1056
00:48:45,640 --> 00:48:49,940
Android, has the ability to use
a file input, essentially.

1057
00:48:49,940 --> 00:48:53,030
And you can specify a certain
accept-type attribute on that

1058
00:48:53,030 --> 00:48:57,320
to say you want access the
camera or record a video.

1059
00:48:57,320 --> 00:49:00,260
It's essentially just uploading
or taking a snapshot

1060
00:49:00,260 --> 00:49:03,890
in time and being able to upload
that to the server.

1061
00:49:03,890 --> 00:49:05,540
Whatever you want
to do with it.

1062
00:49:05,540 --> 00:49:07,690
Where this is different-- where
WebRTC is different,

1063
00:49:07,690 --> 00:49:09,450
where get-user media is
different-- is that you can

1064
00:49:09,450 --> 00:49:11,780
capture in real-time
and then do

1065
00:49:11,780 --> 00:49:13,110
real-time effects on something.

1066
00:49:13,110 --> 00:49:15,560
So that's cool.

1067
00:49:15,560 --> 00:49:19,090
Hopefully, one day, Chrome for
Android could have this

1068
00:49:19,090 --> 00:49:21,080
ability as well-- to do
the get-user media.

1069
00:49:21,080 --> 00:49:24,402
But we talked a little bit
about that earlier.

1070
00:49:24,402 --> 00:49:25,330
SAM DUTTON: OK, cool.

1071
00:49:25,330 --> 00:49:31,590
We mentioned earlier some
progress with web sockets,

1072
00:49:31,590 --> 00:49:34,450
Another question from
Jeff in Toronto.

1073
00:49:34,450 --> 00:49:37,470
Video conferencing is cool and
all, but what's the status of

1074
00:49:37,470 --> 00:49:38,720
the data stream API?

1075
00:49:38,720 --> 00:49:41,240

1076
00:49:41,240 --> 00:49:43,760
Web sockets would be awesome.

1077
00:49:43,760 --> 00:49:46,660
Do we have a comment
about that?

1078
00:49:46,660 --> 00:49:48,360
Or do you think we've
covered that in the

1079
00:49:48,360 --> 00:49:51,720
earlier web socket stuff?

1080
00:49:51,720 --> 00:49:57,020
RONGHUA WU: As I know, the data
stream maybe hasn't been

1081
00:49:57,020 --> 00:50:01,140
well-defined by the spec yet.

1082
00:50:01,140 --> 00:50:04,210
So before that probably.

1083
00:50:04,210 --> 00:50:07,070

1084
00:50:07,070 --> 00:50:10,296
That's what I know
from the spec.

1085
00:50:10,296 --> 00:50:11,160
SAM DUTTON: OK.

1086
00:50:11,160 --> 00:50:13,690
So we'll see.

1087
00:50:13,690 --> 00:50:13,990
OK.

1088
00:50:13,990 --> 00:50:15,100
Moving down the list here.

1089
00:50:15,100 --> 00:50:15,950
Yeah.

1090
00:50:15,950 --> 00:50:20,010
There's another question from
Luke [UNINTELLIGIBLE]

1091
00:50:20,010 --> 00:50:23,970
asking when the server code
from apprtc.appspot.com is

1092
00:50:23,970 --> 00:50:24,760
going to be released.

1093
00:50:24,760 --> 00:50:28,590
We did mention that the code's
going to be open source.

1094
00:50:28,590 --> 00:50:31,516
And that's kind of
imminent, yeah.

1095
00:50:31,516 --> 00:50:32,945
PUNYABRATA RAY: Yes.

1096
00:50:32,945 --> 00:50:34,690
SAM DUTTON: Cool.

1097
00:50:34,690 --> 00:50:35,400
Quickly, moving on.

1098
00:50:35,400 --> 00:50:38,000
We've got about five
minutes left.

1099
00:50:38,000 --> 00:50:43,990
So we had another question from
Clive Bolton in Seattle.

1100
00:50:43,990 --> 00:50:48,410
He's asking, if WebRTC nudging
the browser to incubate

1101
00:50:48,410 --> 00:50:50,796
server-ready JavaScript
engines.

1102
00:50:50,796 --> 00:50:53,380

1103
00:50:53,380 --> 00:50:58,460
Is this something that's part of
the WebRTC work at Google,

1104
00:50:58,460 --> 00:51:01,690
or is this kind of really
something different?

1105
00:51:01,690 --> 00:51:04,552

1106
00:51:04,552 --> 00:51:09,620
PUNYABRATA RAY: You know,
WebRTC is firewall

1107
00:51:09,620 --> 00:51:11,110
traversable for media.

1108
00:51:11,110 --> 00:51:13,790
And that normally requires
some sort of known

1109
00:51:13,790 --> 00:51:15,040
server on a public IP.

1110
00:51:15,040 --> 00:51:17,640

1111
00:51:17,640 --> 00:51:21,890
So not knowing much about
node.js, I think that would be

1112
00:51:21,890 --> 00:51:22,660
very challenging.

1113
00:51:22,660 --> 00:51:25,620
But again, I'm not an expert.

1114
00:51:25,620 --> 00:51:28,460

1115
00:51:28,460 --> 00:51:34,470
Yeah, so I don't think we
would be nudging anyone.

1116
00:51:34,470 --> 00:51:37,740
Again, the server
implementation, it's--

1117
00:51:37,740 --> 00:51:41,340
if you look at our peer
connection server example,

1118
00:51:41,340 --> 00:51:43,630
it's at a high level.

1119
00:51:43,630 --> 00:51:46,530
It should be totally
up to the user.

1120
00:51:46,530 --> 00:51:48,690
It's not like there has to
be one way to do this.

1121
00:51:48,690 --> 00:51:49,620
SAM DUTTON: Yeah.

1122
00:51:49,620 --> 00:51:50,420
Yeah, sure.

1123
00:51:50,420 --> 00:51:51,780
Sure.

1124
00:51:51,780 --> 00:51:55,220
OK, quickly moving down the
questions here, something that

1125
00:51:55,220 --> 00:51:56,700
occurred to me, actually.

1126
00:51:56,700 --> 00:52:00,350
How do you stop the stream
without killing the tab?

1127
00:52:00,350 --> 00:52:03,890
I can imagine moving from a page
where you're getting a

1128
00:52:03,890 --> 00:52:06,140
video input and then doing some
browsing, and of course,

1129
00:52:06,140 --> 00:52:08,240
the video's still on.

1130
00:52:08,240 --> 00:52:11,530
What's the story with that?

1131
00:52:11,530 --> 00:52:11,950
PUNYABRATA RAY: I'm
not exactly--

1132
00:52:11,950 --> 00:52:13,690
I think you should still be
able to remember the video

1133
00:52:13,690 --> 00:52:15,131
tab, but I haven't--

1134
00:52:15,131 --> 00:52:17,840

1135
00:52:17,840 --> 00:52:19,220
SAM DUTTON: I mean, I guess this
is something we could do

1136
00:52:19,220 --> 00:52:19,940
with get-user media.

1137
00:52:19,940 --> 00:52:24,630
It's in a sense, it's
the way you use it.

1138
00:52:24,630 --> 00:52:28,200
It's not essentially
part of WebRTC.

1139
00:52:28,200 --> 00:52:32,250
It's how you implement the use
of get-user media and working

1140
00:52:32,250 --> 00:52:33,360
with the page visibility--

1141
00:52:33,360 --> 00:52:36,000
[INTERPOSING VOICES]

1142
00:52:36,000 --> 00:52:37,210
SAM DUTTON: As we speak.

1143
00:52:37,210 --> 00:52:38,810
ERIC BIDELMAN: Did
you do your part?

1144
00:52:38,810 --> 00:52:39,970
I've experienced
the same thing.

1145
00:52:39,970 --> 00:52:44,600
I think you can call
stop on the stream.

1146
00:52:44,600 --> 00:52:46,630
I don't know if it actually does
anything in Chrome today,

1147
00:52:46,630 --> 00:52:52,710
but it's probably just a bug to
be honest. I kill my tabs.

1148
00:52:52,710 --> 00:52:55,265
You should file it
[UNINTELLIGIBLE].

1149
00:52:55,265 --> 00:52:56,030
SAM DUTTON: Cool.

1150
00:52:56,030 --> 00:52:57,460
I will.

1151
00:52:57,460 --> 00:52:58,350
Yeah, we that's my problem.

1152
00:52:58,350 --> 00:52:59,640
It was my fault.

1153
00:52:59,640 --> 00:53:01,350
I should have shut up.

1154
00:53:01,350 --> 00:53:04,850
Which syncs nicely into the next
question, again from this

1155
00:53:04,850 --> 00:53:06,920
guy Pete in Mountain View.

1156
00:53:06,920 --> 00:53:07,940
He's wondering--

1157
00:53:07,940 --> 00:53:09,970
a really good question--

1158
00:53:09,970 --> 00:53:11,690
if people find bugs,
what do they do?

1159
00:53:11,690 --> 00:53:14,380
Where do they file bugs
in relation to the

1160
00:53:14,380 --> 00:53:17,090
components of WebRTC?

1161
00:53:17,090 --> 00:53:19,260
PUNYABRATA RAY: So we
do have a website.

1162
00:53:19,260 --> 00:53:21,950
The first one being
WebRTC.org.

1163
00:53:21,950 --> 00:53:24,700
There's a link to there where
you can actually go and it

1164
00:53:24,700 --> 00:53:26,190
will help you.

1165
00:53:26,190 --> 00:53:27,580
It's a ways forward.

1166
00:53:27,580 --> 00:53:29,930
But if you directly want to
go to the code base, its

1167
00:53:29,930 --> 00:53:32,560
WebRTC.googlecode.com.

1168
00:53:32,560 --> 00:53:35,330
And you will see an issues
list, and you can

1169
00:53:35,330 --> 00:53:38,025
file the bug there.

1170
00:53:38,025 --> 00:53:40,440
We should probably put
that up somewhere.

1171
00:53:40,440 --> 00:53:43,100
If it's not already up there,
but the best way is

1172
00:53:43,100 --> 00:53:44,210
WebRTC.org.

1173
00:53:44,210 --> 00:53:47,945
RONGHUA WU: But if this is a
Chrome bug, probably just file

1174
00:53:47,945 --> 00:53:48,670
bug in Chrome.

1175
00:53:48,670 --> 00:53:49,952
PUNYABRATA RAY: Right.

1176
00:53:49,952 --> 00:53:52,205
SAM DUTTON: Yeah.

1177
00:53:52,205 --> 00:53:56,366
For those who haven't seen
it, crbug.com is great.

1178
00:53:56,366 --> 00:53:59,540
ERIC BIDELMAN: Really nice short
URL, easy to remember.

1179
00:53:59,540 --> 00:54:02,940
And if you do file that in the
Chrome issue tracker, and it

1180
00:54:02,940 --> 00:54:05,810
needs to go someplace else,
people do triage those

1181
00:54:05,810 --> 00:54:10,805
regularly, so we can put that
where it needs to go.

1182
00:54:10,805 --> 00:54:11,900
SAM DUTTON: Cool.

1183
00:54:11,900 --> 00:54:12,420
OK.

1184
00:54:12,420 --> 00:54:14,020
I think that we're going
to wrap up soon.

1185
00:54:14,020 --> 00:54:16,070
A couple of things--

1186
00:54:16,070 --> 00:54:20,790
if people are watching this
stream, could they 1 the post

1187
00:54:20,790 --> 00:54:23,490
so we get an idea of how many
people are out there?

1188
00:54:23,490 --> 00:54:26,290
That would be really helpful for
us so that we can work on

1189
00:54:26,290 --> 00:54:30,340
these hangouts, and find out
who's watching, and get an

1190
00:54:30,340 --> 00:54:31,320
idea of that.

1191
00:54:31,320 --> 00:54:34,690
And also another thing-- if
you could do for us--

1192
00:54:34,690 --> 00:54:39,820
is to add Chrome developers
to your circles.

1193
00:54:39,820 --> 00:54:42,150
That would be a great
way for us to

1194
00:54:42,150 --> 00:54:44,160
communicate events like this.

1195
00:54:44,160 --> 00:54:50,170
So we're planning on more
hangouts on various APIs and

1196
00:54:50,170 --> 00:54:52,940
web-related subjects.

1197
00:54:52,940 --> 00:54:59,710
So yeah, just moving back to the
last stuff we've got here.

1198
00:54:59,710 --> 00:55:03,350
I think I'll just check
what else we've got.

1199
00:55:03,350 --> 00:55:06,650
Eric, and Ray and Ronghua ,
have you got anything else

1200
00:55:06,650 --> 00:55:10,832
you'd particularly like to add
before we wrap up today?

1201
00:55:10,832 --> 00:55:13,270
PUNYABRATA RAY: No.

1202
00:55:13,270 --> 00:55:16,930
Again, if you have any issues or
bugs that you want to file,

1203
00:55:16,930 --> 00:55:21,410
please definitely go to either
Chrome bugs or WebRTC.org We'd

1204
00:55:21,410 --> 00:55:23,890
love to love to hear from you.

1205
00:55:23,890 --> 00:55:26,360
And let us know how--

1206
00:55:26,360 --> 00:55:28,460
from a developer perspective--

1207
00:55:28,460 --> 00:55:30,402
what you guys think about it.

1208
00:55:30,402 --> 00:55:32,160
ERIC BIDELMAN: And what Sam just
mentioned, the great way

1209
00:55:32,160 --> 00:55:34,960
to get in contact with us, too,
is through our page, if

1210
00:55:34,960 --> 00:55:37,541
you want to sort of open a
channel and communicate back

1211
00:55:37,541 --> 00:55:40,510
and forth about some
of this stuff.

1212
00:55:40,510 --> 00:55:42,120
Sam, I wonder if it's--

1213
00:55:42,120 --> 00:55:44,290
for people that missed the demo
at the beginning of the

1214
00:55:44,290 --> 00:55:45,590
WebRTC video--

1215
00:55:45,590 --> 00:55:49,352
if it's worth playing again
as we start to wrap up.

1216
00:55:49,352 --> 00:55:50,500
SAM DUTTON: That
would be great.

1217
00:55:50,500 --> 00:55:51,530
That's a really good idea.

1218
00:55:51,530 --> 00:55:54,640
ERIC BIDELMAN: We talked a lot
about WebRTC, and it's

1219
00:55:54,640 --> 00:55:56,972
actually good to see
it in practice.

1220
00:55:56,972 --> 00:55:59,600
SAM DUTTON: That would be really
nice to see that, just

1221
00:55:59,600 --> 00:56:04,760
to finish up on what looks
to me like Willy Wonka's

1222
00:56:04,760 --> 00:56:06,500
Chocolate Factory.

1223
00:56:06,500 --> 00:56:08,090
ERIC BIDELMAN: That was a
hard day at work, man.

1224
00:56:08,090 --> 00:56:10,176
I don't know what you're
talking about.

1225
00:56:10,176 --> 00:56:12,295
SAM DUTTON: Jeez, that looks
scary coming down the tube.

1226
00:56:12,295 --> 00:56:15,552

1227
00:56:15,552 --> 00:56:16,802
[INAUDIBLE]

1228
00:56:16,802 --> 00:56:29,965

1229
00:56:29,965 --> 00:56:30,959
MALE SPEAKER: Hey, Eric.

1230
00:56:30,959 --> 00:56:31,750
What's up?

1231
00:56:31,750 --> 00:56:33,060
ERIC BIDELMAN: [INAUDIBLE]

1232
00:56:33,060 --> 00:56:34,060
MALE SPEAKER: Hey.

1233
00:56:34,060 --> 00:56:35,560
This WebRTC stuff?

1234
00:56:35,560 --> 00:56:37,060
It seems pretty cool, right?

1235
00:56:37,060 --> 00:56:38,050
Yeah, it is.

1236
00:56:38,050 --> 00:56:39,427
ERIC BIDELMAN: I'm kinda
thirsty though, man.

1237
00:56:39,427 --> 00:56:39,886
Can you help me out?

1238
00:56:39,886 --> 00:56:41,263
MALE SPEAKER: You know?

1239
00:56:41,263 --> 00:56:42,181
I think I can.

1240
00:56:42,181 --> 00:56:43,500
I'll be right there.

1241
00:56:43,500 --> 00:56:51,164

1242
00:56:51,164 --> 00:56:52,500
SAM DUTTON: Oh my God.

1243
00:56:52,500 --> 00:56:54,460
[LAUGHTER]

1244
00:56:54,460 --> 00:56:56,416
[CLAPPING]

1245
00:56:56,416 --> 00:56:57,770
SAM DUTTON: Beautiful.

1246
00:56:57,770 --> 00:57:00,650
That's really nice.

1247
00:57:00,650 --> 00:57:01,860
OK.

1248
00:57:01,860 --> 00:57:07,120
Well, thank you so much to Ray
and Ronghua for coming today

1249
00:57:07,120 --> 00:57:10,080
and talking about
WebRTC with us.

1250
00:57:10,080 --> 00:57:13,730
And please add your comments
to the post or get in touch

1251
00:57:13,730 --> 00:57:16,090
with us and file bugs
as you hit them.

1252
00:57:16,090 --> 00:57:18,620
And we're really looking
forward to--

1253
00:57:18,620 --> 00:57:21,410
it's going to be some great
imaginative stuff, as we've

1254
00:57:21,410 --> 00:57:22,850
already seen--

1255
00:57:22,850 --> 00:57:26,420
people doing really good
things with WebRTC.

1256
00:57:26,420 --> 00:57:26,890
So thanks a lot.

1257
00:57:26,890 --> 00:57:28,335
PUNYABRATA RAY: Thank
you, guys.

1258
00:57:28,335 --> 00:57:28,800
ERIC BIDELMAN: Thanks,
everyone.

1259
00:57:28,800 --> 00:57:30,450
SAM DUTTON: And thanks, Eric.

1260
00:57:30,450 --> 00:57:33,570
And thanks to the invisible
man in the page.

1261
00:57:33,570 --> 00:57:36,760
He's hard to see.

1262
00:57:36,760 --> 00:57:37,700
ERIC BIDELMAN: See you
guys next time.

1263
00:57:37,700 --> 00:57:38,950
[INTERPOSING VOICES]

1264
00:57:38,950 --> 00:57:42,967

