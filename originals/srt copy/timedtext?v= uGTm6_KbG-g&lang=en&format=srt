1
00:00:03,830 --> 00:00:09,070
Hi, my name is Carl and I am a Software Engineer
on the Google Chrome team. In this video,

2
00:00:09,070 --> 00:00:14,139
I will describe how to integrate with the
Chrome Web Store Licensing API.

3
00:00:14,139 --> 00:00:18,930
Suppose you are creating a web app. The Chrome
Web Store makes it easy to charge people to

4
00:00:18,930 --> 00:00:23,920
use that app wherever it is running. Users
will purchase access to your app right from

5
00:00:23,920 --> 00:00:29,010
the Chrome Web Store. To check whether a user
has paid for your app, use the Chrome Web

6
00:00:29,010 --> 00:00:34,260
Store’s licensing API.
The licensing API takes two inputs: the app

7
00:00:34,260 --> 00:00:38,089
ID and the user ID.
The app ID is the id the Chrome Web Store

8
00:00:38,089 --> 00:00:43,370
assigns to your app when you first create
it in the store.

9
00:00:43,370 --> 00:00:49,210
The user ID is the Google-provided OpenID
URL. Typically, with OpenID the user ID is

10
00:00:49,210 --> 00:00:54,470
not shared unless the user explicitly grants
permission to the application; however, Google

11
00:00:54,470 --> 00:00:59,869
Chrome grants this permission automatically
when the user installs the application. Users

12
00:00:59,869 --> 00:01:02,790
in other browsers will still see an approval
step.

13
00:01:02,790 --> 00:01:07,619
A number of OpenID libraries may be used to
determine the OpenID URL.

14
00:01:07,619 --> 00:01:14,619
To see a comprehensive list of libraries just
visit http://wiki.openid.net/Libraries.

15
00:01:14,970 --> 00:01:18,740
Some specific OpenID libraries you can explore
are the following:

16
00:01:18,740 --> 00:01:25,150
For Java you can try OpenID4Java.
For Python try using Google App Engine’s

17
00:01:25,150 --> 00:01:29,400
Django OpenID.
You can find more information on how to use

18
00:01:29,400 --> 00:01:34,080
OpenID in our documentation.
The Chrome Web Store doesn’t allow just

19
00:01:34,080 --> 00:01:38,990
anyone to call the licensing API. The store
will check that the caller is authorized to

20
00:01:38,990 --> 00:01:44,720
make a licensing API check for a given app.
In this way we provide separation among the

21
00:01:44,720 --> 00:01:49,250
licensing data for various apps.
The developer that creates a web app in the

22
00:01:49,250 --> 00:01:55,020
Chrome Web Store is the only user with permission
to call the licencing API for that app.

23
00:01:55,020 --> 00:02:01,130
In order to securely authenticate the owner
of an application, we use OAuth access tokens.

24
00:02:01,130 --> 00:02:04,549
These tokens prove that you have the right
to call the API.

25
00:02:04,549 --> 00:02:10,080
We automatically provide you with an OAuth
access token in the developer dashboard for

26
00:02:10,080 --> 00:02:15,750
each app you own. An OAuth access token is
really a token and a token secret, but I just

27
00:02:15,750 --> 00:02:21,040
refer to them as an access token.
To create a token, go to the developer dashboard

28
00:02:21,040 --> 00:02:26,450
and follow the link labeled “AuthToken”.
The next page explains what you need the token

29
00:02:26,450 --> 00:02:31,380
for and at the bottom of the page, you will
see a button to generate the OAuth access

30
00:02:31,380 --> 00:02:34,560
token.
When you click that button you will see the

31
00:02:34,560 --> 00:02:38,690
values for oauth_token and oauth_token_secret
fill in.

32
00:02:38,690 --> 00:02:43,090
Those tokens are scoped so they will only
work to access the Chrome Web Store licensing

33
00:02:43,090 --> 00:02:46,830
API and cannot be used to access other information
from Google.

34
00:02:46,830 --> 00:02:51,730
Please note that the Chrome Web Store will
not display these values more than one time

35
00:02:51,730 --> 00:02:55,980
for security reasons, so, don’t forget to
copy them to a secure location before you

36
00:02:55,980 --> 00:03:01,800
leave the page. If necessary, you can return
later to generate a new access token.

37
00:03:01,800 --> 00:03:06,190
Now you should have all the data you need
to call the licensing API:

38
00:03:06,190 --> 00:03:09,450
An OAuth access token
A User ID

39
00:03:09,450 --> 00:03:12,739
and an App ID.
Let’s look at the details of calling the

40
00:03:12,739 --> 00:03:18,069
API using HTTP.
The licensing API endpoint is simply a URL

41
00:03:18,069 --> 00:03:25,069
containing the app ID and the user ID. The
app and user IDs must be URL-encoded.

42
00:03:25,180 --> 00:03:30,530
To call the licensing API, you need to add
OAuth signature parameters. You can use an

43
00:03:30,530 --> 00:03:37,530
OAuth library to sign the HTTP requests.
Visit http://code.google.com/apis/gdata/docs/client-libraries.html

44
00:03:43,690 --> 00:03:48,670
for a list of libraries that may be used to
perform these API calls in various web development

45
00:03:48,670 --> 00:03:51,849
languages.
The signing step needs the following pieces

46
00:03:51,849 --> 00:03:55,840
of data:
The consumer key: This is always “anonymous”.

47
00:03:55,840 --> 00:04:01,500
The consumer secret: This is also always “anonymous”.
The token and the token secret.

48
00:04:01,500 --> 00:04:06,629
The consumer key and consumer secret are anonymous
because you, the developer, are granting access

49
00:04:06,629 --> 00:04:11,580
to the application you own.
JSON is the default response format for API

50
00:04:11,580 --> 00:04:17,000
requests. This response will indicate whether
the user should be granted permission to use

51
00:04:17,000 --> 00:04:19,969
your app.
If you prefer the ATOM format, you can specify

52
00:04:19,969 --> 00:04:24,949
alt=atom in the URL.
To learn more about the Chrome Web Store and

53
00:04:24,949 --> 00:04:30,310
how to integrate with our licensing API, just
visit code.google.com/chrome/webstore.

