1
00:00:00,310 --> 00:00:02,300
>>Alex Danilo: Hello, everybody. And welcome
here tonight. You have waited for the keynote

2
00:00:02,300 --> 00:00:02,719
act, I see. We're the last act of the day,
best of the day, of course.

3
00:00:02,719 --> 00:00:02,969
So I guess you're all wondering why Adobe
is here.

4
00:00:02,719 --> 00:00:06,540
The answer to that is they're a very valued
contributor to the WebKit project, and WebKit

5
00:00:06,540 --> 00:00:11,140
project is of course the core of Google Chrome
and a lot of other nice browsers out there.

6
00:00:11,140 --> 00:00:15,290
And of course, we like to share because of
course the Web is about sharing. And what

7
00:00:15,290 --> 00:00:20,619
I mean is I don't mean social media. I mean
they're a bunch of mad scientists -- actually,

8
00:00:20,619 --> 00:00:25,810
visionary physicists back in the early '90's
-- and they decided they wanted to share physics

9
00:00:25,810 --> 00:00:30,769
stuff, like scientific papers, so they built
the first Web browser and Web server. And

10
00:00:30,769 --> 00:00:34,000
then a few years later Marc Andreesen came
along and said, Well, images would be cool

11
00:00:34,000 --> 00:00:38,270
and he added images to the browser. And then
over the years, as you've seen, the evolution

12
00:00:38,270 --> 00:00:43,870
of the Web has just gotten better and better
and we have all these amazing features today.

13
00:00:43,870 --> 00:00:48,160
So basically the Web is open and so Adobe
and Google we all work on Web technology,

14
00:00:48,160 --> 00:00:55,160
we work with a lot of other companies as well.
So enough about that. Who are we? My name

15
00:00:55,700 --> 00:01:00,320
is Alex Danilo, and I'm a developer advocate
on Chrome.

16
00:01:00,320 --> 00:01:03,760
And with me I have Christian Cantrell, who
is a product manager, a developer himself,

17
00:01:03,760 --> 00:01:07,119
so he knows a lot of the stuff that you guys
do.

18
00:01:07,119 --> 00:01:11,549
And we also have Vincent Hardy, who is a principal
scientist. And Vincent and I have worked on

19
00:01:11,549 --> 00:01:17,100
CSS and SVG for a number of years now.
So the Web is evolving and that's a really

20
00:01:17,100 --> 00:01:21,319
good thing because we don't really want the
browser from the early '90's, do we?

21
00:01:21,319 --> 00:01:26,469
And the thing is what we're seeing now is
along the timeline of Web browser evolution

22
00:01:26,469 --> 00:01:31,789
all these new features have been coming in
and coming in and the feature set is accelerating.

23
00:01:31,789 --> 00:01:36,020
New features are not just accelerating, but
there an accelerating acceleration.

24
00:01:36,020 --> 00:01:41,299
So the thing is what do you do as a developer?
It's like we want to help you. And that's

25
00:01:41,299 --> 00:01:47,049
why we built Chrome. Chrome is built for simplicity,
security and speed. And what's going to give

26
00:01:47,049 --> 00:01:50,799
you simplicity is tools. It better tools to
make your job easier and that will give you

27
00:01:50,799 --> 00:01:56,389
more time because it will make your development
job faster, so we give you simplicity and

28
00:01:56,389 --> 00:01:58,389
speed, and that's what we're going to show
you today.

29
00:01:58,389 --> 00:02:03,920
Now, what are you supposed to do as a Web
developer? Come to Google I/O. And the second

30
00:02:03,920 --> 00:02:08,450
thing is go watch all the YouTube stuff, go
watch it afterwards, enjoy it, get all the

31
00:02:08,450 --> 00:02:12,810
demo material, experiment with it.
And one thing I would really like everyone

32
00:02:12,810 --> 00:02:16,480
in this room and everyone watching to do is
to talk to us.

33
00:02:16,480 --> 00:02:22,260
The Web is about people, it's open, we share,
and we listen to you. So if you as a Web developer

34
00:02:22,260 --> 00:02:27,120
sit around and you go like, "Oh, I wish CSS
did that," come and tell us, we'll try and

35
00:02:27,120 --> 00:02:30,739
push it through the standards bodies, we'll
get the other browser makers to do it and

36
00:02:30,739 --> 00:02:34,030
we'll do it together.
So anyway, this is the kind of thing we're

37
00:02:34,030 --> 00:02:39,010
trying to promote today, more creative options.
The old days used to muck up a wire frame,

38
00:02:39,010 --> 00:02:43,829
give it to the Web developer who writes JavaScript
and something pops out the other side.

39
00:02:43,829 --> 00:02:49,629
And we want to change that workflow. We want
to, like, bring on the declarative Renaissance.

40
00:02:49,629 --> 00:02:53,540
So we're putting features in the browser that
are declarative. They're not JavaScript. And

41
00:02:53,540 --> 00:02:57,709
we're providing tools so the designers can
come along and go, Well, I can build that

42
00:02:57,709 --> 00:03:01,590
page myself. I don't need to give it to a
JavaScript programmer.

43
00:03:01,590 --> 00:03:07,120
And so Adobe, of course, had a rich history
in topography and fonts and graphics, so the

44
00:03:07,120 --> 00:03:12,530
stuff we'll see today is a whole lot of new
CSS features, from magazine style layouts,

45
00:03:12,530 --> 00:03:17,969
some cinematic effects and amazing graphic
type stuff, and of course we bring this all

46
00:03:17,969 --> 00:03:21,030
to you in Chrome.
And if you're sitting there going, "Oh my

47
00:03:21,030 --> 00:03:25,640
God, my users use IE, a really old version,
what do we do about that," well, we give you

48
00:03:25,640 --> 00:03:30,159
Chrome Frame as well so you can have Chrome
and Chrome Frame and they provide the platform

49
00:03:30,159 --> 00:03:33,299
on which you can make these incredible new
apps.

50
00:03:33,299 --> 00:03:37,269
The other thing is we bring tools, we have
Chrome Developer Tools, and of course Adobe

51
00:03:37,269 --> 00:03:40,290
we're about to show you some new tools they
have been working on.

52
00:03:40,290 --> 00:03:44,549
And of course with their tools and our tools
it creates a synergy that makes your workflow

53
00:03:44,549 --> 00:03:49,250
so much easier and smoother.
And of course, the one thing that I'll emphasize

54
00:03:49,250 --> 00:03:54,359
yet one more time is that the Web is open,
the Web is everybody's, and we both participate

55
00:03:54,359 --> 00:03:59,659
in the W3C and a number of other standards
organizations. In fact, there are over 370

56
00:03:59,659 --> 00:04:04,459
companies who are participating in the W3C
and they steer the direction of the Web. So

57
00:04:04,459 --> 00:04:08,159
if you want a new feature, come to us, we'll
do it for you, okay?

58
00:04:08,159 --> 00:04:12,510
So on that note I'll pass it over to Christian
and he shall tell you all about these features.

59
00:04:12,510 --> 00:04:16,940
>>Christian Cantrell: Thank you, Alex.
So I think probably the best way to understand

60
00:04:16,940 --> 00:04:22,830
the perspective of Adobe when it comes to
helping to move the Web forward is to look

61
00:04:22,830 --> 00:04:29,830
at the Web platform team's official "Le Motto,"
which is a better Web and awesome tools.

62
00:04:30,919 --> 00:04:37,310
So I'm going to be talking about three things
that are going to help us achieve that goal,

63
00:04:37,310 --> 00:04:42,490
the first of which is text.
So the Web is already a very powerful platform

64
00:04:42,490 --> 00:04:47,680
for text, so Adobe wanted to build on that
because we really wanted to bring magazine-like

65
00:04:47,680 --> 00:04:53,169
layout to the Web. And we want to do that
-- we're doing that in primarily two ways

66
00:04:53,169 --> 00:05:00,020
with two specifications and two implementations
as well, CSS Regions and CSS Exclusions.

67
00:05:00,020 --> 00:05:07,020
The example you see here is using CSS Exclusions
to have some text flow along the edge of this

68
00:05:07,430 --> 00:05:11,470
mountain.
Here's another example where you see text

69
00:05:11,470 --> 00:05:16,470
flowing between different regions, in this
case to make columns, also flowing along these

70
00:05:16,470 --> 00:05:20,650
images here. So this is combining CSS Regions
and CSS Exclusions.

71
00:05:20,650 --> 00:05:24,770
Now, this is the kind of thing that you're
probably accustomed to seeing, we're all accustomed

72
00:05:24,770 --> 00:05:29,319
to seeing really in print and magazines or
something like that. Usually not something

73
00:05:29,319 --> 00:05:31,759
that you would see on Web. Something like
this the Web would typically have been laid

74
00:05:31,759 --> 00:05:35,270
out in another application, a screen shot
would have been taken or something strange

75
00:05:35,270 --> 00:05:40,690
like that, which obviously we don't want.
We really want true magazine-like layout with

76
00:05:40,690 --> 00:05:44,509
the Web.
So I'm going to start with the CSS Regions,

77
00:05:44,509 --> 00:05:50,099
and this is just sort of a brief overview.
The concept of CSS Regions is actually quite

78
00:05:50,099 --> 00:05:56,080
simple. You have a block of text here, a flow,
you have some elements here which are your

79
00:05:56,080 --> 00:06:01,800
regions, and with a couple of lines of very
simple declarative CSS, that text can start

80
00:06:01,800 --> 00:06:06,840
flowing through those regions. It's that simple.
I'm going to actually start with a couple

81
00:06:06,840 --> 00:06:12,440
of demos to help illustrate the point. In
addition to being a developer at Adobe I'm

82
00:06:12,440 --> 00:06:18,080
also a science fiction writer. And I frequently
write things and release them under a creative

83
00:06:18,080 --> 00:06:22,379
comments license online. And when I release
them they tend to look something like this,

84
00:06:22,379 --> 00:06:28,699
which is to say ugly, right?
So I put a lot of work into the story and

85
00:06:28,699 --> 00:06:32,229
then I release it in a way that I'm not really
that proud of. And the reason is because I

86
00:06:32,229 --> 00:06:35,289
want it to work on as many devices as possible.
I know people like to read on phones, they

87
00:06:35,289 --> 00:06:41,240
like to read on tablets, they like to use
all kinds of different types of browsers and

88
00:06:41,240 --> 00:06:47,150
machines, so I try and make it sort of the
lowest common denominator.

89
00:06:47,150 --> 00:06:50,810
But it honestly doesn't look that good, so
when I started working with CSS Regions I

90
00:06:50,810 --> 00:06:56,940
was really excited about what I could do with
my own work and how I could present it in

91
00:06:56,940 --> 00:07:01,539
a much more interesting fashion. So this is
the same story which I've applied some regions

92
00:07:01,539 --> 00:07:06,770
to. And you can see that I have a page count
up here, which is nice, and you can see that

93
00:07:06,770 --> 00:07:12,259
my text is flowing from region to region here
all automatically. I have some page numbers

94
00:07:12,259 --> 00:07:17,069
down here.
If I were to resize my browser here you can

95
00:07:17,069 --> 00:07:21,840
see the page count in the upper right-hand
corner is changing. As the page count changes,

96
00:07:21,840 --> 00:07:28,030
if I drag it up and decrease the height of
the available space you can see the pages

97
00:07:28,030 --> 00:07:32,780
have automatically adjusted themselves.
So this is a much nicer experience and something

98
00:07:32,780 --> 00:07:37,440
that I can be a little bit more proud of.
I have a couple more prototypes, but I want

99
00:07:37,440 --> 00:07:41,699
to go ahead and skip to the last one, which
is my favorite. I call this the sort of adaptive

100
00:07:41,699 --> 00:07:48,699
or responsive prototype. And this is unique
because it's designed not just to work on

101
00:07:48,990 --> 00:07:53,780
any size screen, it's designed to actually
be optimized for any size screen.

102
00:07:53,780 --> 00:07:58,229
So this is the same story once again, but
it uses -- it has some gestures where you

103
00:07:58,229 --> 00:08:05,229
can turn pages. It uses some heuristics to
determine the optimal width for a column and

104
00:08:05,629 --> 00:08:11,319
the optimal -- the maximum number of columns
it can fit. And you can see if you have much

105
00:08:11,319 --> 00:08:17,289
higher resolution, it will automatically determine
your column width for you and add more columns.

106
00:08:17,289 --> 00:08:23,550
Even the graphic here on the left-hand side
is scales as I change the column width because

107
00:08:23,550 --> 00:08:28,720
it's done with SVG.
So this thing -- this layout is going to work

108
00:08:28,720 --> 00:08:33,810
on a screen as big as a wall or something
as small as just a phone.

109
00:08:33,810 --> 00:08:39,079
So I had a lot of fun working with my own
content with this. And I started thinking

110
00:08:39,079 --> 00:08:43,130
that I really wanted to be able to consume
other content on the Web in a really nice

111
00:08:43,130 --> 00:08:49,410
way as well. And you know, I really wanted
to be able to just sort of reflow content

112
00:08:49,410 --> 00:08:53,120
into sort of a magazine or book-like format
really easily, so I started experimenting

113
00:08:53,120 --> 00:09:00,120
with this Chrome extension that I call Qualify.
And when I click on this extension up here

114
00:09:00,490 --> 00:09:06,540
all the content on the page is just automatically
reflowed using CSS Regions in a way that I

115
00:09:06,540 --> 00:09:12,230
think is much nicer to consume, and it's all
adjustable based on font size and all that.

116
00:09:12,230 --> 00:09:17,870
As an aside, if you guys went to any of these
shadow DOM sessions or Web component sessions,

117
00:09:17,870 --> 00:09:21,700
this is actually using the shadow DOM, so
it's not polluting the DOM at all. So as far

118
00:09:21,700 --> 00:09:25,589
as the DOM is concerned, you know, if there
are scripts running on the DOM or something,

119
00:09:25,589 --> 00:09:29,720
actually nothing has changed here at all.
It's all done behind the scenes on the shadow

120
00:09:29,720 --> 00:09:35,790
DOM. If you have no idea what I'm talking
about, shadow DOM is awesome. Check it out.

121
00:09:35,790 --> 00:09:40,680
Okay. So since we're making contributions
directly to WebKit, any browser that leverages

122
00:09:40,680 --> 00:09:47,250
WebKit is going to receive the benefits of
those contributions. And in this case the

123
00:09:47,250 --> 00:09:50,709
Chrome beta -- actually, I shouldn't say beta
anymore, it's not in beta anymore since like

124
00:09:50,709 --> 00:09:55,899
yesterday, I guess. So Chrome on Android also
has some CSS Regions support, so this is the

125
00:09:55,899 --> 00:10:02,899
screen shot I took from my Galaxy Nexus.
So let's look at some code. The first thing

126
00:10:03,029 --> 00:10:08,940
I want to point out here is just a simple
selector called content. And it has a property

127
00:10:08,940 --> 00:10:15,570
called flow-into here. And this flow-into
property is creating a named flow called article.

128
00:10:15,570 --> 00:10:22,290
And what's notable about this is that my content
is just going to be a big block of semantic

129
00:10:22,290 --> 00:10:28,810
text. So I'm not worried about, you know,
creating divs or some form of element that

130
00:10:28,810 --> 00:10:32,600
are regions and copying and pasting text into
each one. Obviously that would defeat the

131
00:10:32,600 --> 00:10:36,570
whole purpose. That's not really flowing.
You could have done that forever.

132
00:10:36,570 --> 00:10:40,990
So you have this semantic block of text which
is content and it knows nothing about the

133
00:10:40,990 --> 00:10:45,700
way it's going to be laid out.
And then I have this class called region.

134
00:10:45,700 --> 00:10:52,630
And it has a flow-from property here, and
it's referring to this named flow article,

135
00:10:52,630 --> 00:10:57,320
which is defined up here.
So with just that I'm able to get text flowing

136
00:10:57,320 --> 00:11:02,600
between regions.
Now, what about getting paging capabilities

137
00:11:02,600 --> 00:11:06,440
and, you know, the swiping effects and the
columns and the layout and all that?

138
00:11:06,440 --> 00:11:11,050
In order to do that you will have to write
some code. You're going to have to tap into

139
00:11:11,050 --> 00:11:15,610
the CSS object model.
And it's not a lot of code. It actually pretty

140
00:11:15,610 --> 00:11:19,630
straight forward, and I'll just go through
it. We started our layout with a function

141
00:11:19,630 --> 00:11:25,230
called add region here, and I created a new
region. And I'm going to set this attribute,

142
00:11:25,230 --> 00:11:29,470
the class attribute, to region, which we saw
in the previous slide is the named flow.

143
00:11:29,470 --> 00:11:32,970
And this is a really important line of code
right here, this region.addeventlistener.

144
00:11:32,970 --> 00:11:38,120
So we're gonna add this region.addeventlistener
to our region, and we're going to call this

145
00:11:38,120 --> 00:11:41,870
function called on layout update.
Basically what this is saying is if the text

146
00:11:41,870 --> 00:11:46,380
inside that region changes in any way, if
text is added, if text is removed, if the

147
00:11:46,380 --> 00:11:51,600
font size changes, if the element is resized
for any reason, then call this on layout update

148
00:11:51,600 --> 00:11:56,740
function so that I can run some -- you know,
take a look at the page, figure out what happened

149
00:11:56,740 --> 00:12:01,079
and update my layout. And then just add that
region to the -- pin that region to the body

150
00:12:01,079 --> 00:12:05,149
of the document.
So let's look at this on layout update function.

151
00:12:05,149 --> 00:12:10,649
Again, this is called whenever my flow changes
within my regions, so I get a reference to

152
00:12:10,649 --> 00:12:13,829
the region from the event target, nice and
straightforward, and then I start looking

153
00:12:13,829 --> 00:12:19,430
at this region overflow property.
And if the value of that property is overflow,

154
00:12:19,430 --> 00:12:23,889
which is to say if there's more text than
actually fits in that region, then I'm going

155
00:12:23,889 --> 00:12:28,180
to need to add another region. So I sort of
recursively call this add region function,

156
00:12:28,180 --> 00:12:31,690
right?
Otherwise if it fits, then call region layout

157
00:12:31,690 --> 00:12:35,260
complete and you're done, you can do your
layout and stuff.

158
00:12:35,260 --> 00:12:39,500
So what's missing from this is the code that
determines the width of your regions, the

159
00:12:39,500 --> 00:12:44,570
placement of your regions, the left, right,
top, bottom, and all of those kinds of things.

160
00:12:44,570 --> 00:12:48,760
It puts page numbers and the scrolling effects
and all that, but that stuff's actually not

161
00:12:48,760 --> 00:12:50,449
all that bad.
And the very first prototype that I wrote,

162
00:12:50,449 --> 00:12:55,930
I wrote that in, you know, a day. The last
one, you know, I sort of built a few prototypes,

163
00:12:55,930 --> 00:12:58,959
takes a couple of days.
And these are the kinds of things that people

164
00:12:58,959 --> 00:13:02,380
will write, they'll open source. I'll open
source everything I've done here along with

165
00:13:02,380 --> 00:13:07,430
a qualified plug-in so people can see how
it's done. So it's not bad to do all this

166
00:13:07,430 --> 00:13:11,769
stuff yourself, but we know that it has to
be easier. We know that people want to do

167
00:13:11,769 --> 00:13:17,050
it in a declarative way.
And so we've proposed something called CSS

168
00:13:17,050 --> 00:13:20,779
page templates.
And CSS page templates really come from our

169
00:13:20,779 --> 00:13:24,389
experience with tools like InDesign, which
is what you're looking at here. This is a

170
00:13:24,389 --> 00:13:28,910
screen shot of InDesign where I've created
some master pages. One master page has an

171
00:13:28,910 --> 00:13:32,930
image in the upper left-hand corner, another
master page has an image in the center here

172
00:13:32,930 --> 00:13:38,199
with two columns of text on either side.
And what I can do is I can just add pages

173
00:13:38,199 --> 00:13:42,079
to my document and just apply these master
pages to those pages and they're automatically

174
00:13:42,079 --> 00:13:45,899
formatted the way I want them. So it's really
nice and easy. We've learned from building

175
00:13:45,899 --> 00:13:49,949
these kinds of tools that, you know, people
want easy ways of doing these kinds of things.

176
00:13:49,949 --> 00:13:53,790
So let's take a look at CSS page templates.
We're going to look at it in two parts. The

177
00:13:53,790 --> 00:13:58,370
first one is the flow. And this is probably
pretty familiar because this is more or less

178
00:13:58,370 --> 00:14:04,410
what we just looked at, except for instead
of creating one named flow, I'm creating two.

179
00:14:04,410 --> 00:14:08,639
So I have a selector called article and a
selector called timeline and I'm creating

180
00:14:08,639 --> 00:14:13,459
two named flows here, the article flow and
the timeline flow.

181
00:14:13,459 --> 00:14:17,779
And then I have this selector here, combine
articles. And it has this interesting property

182
00:14:17,779 --> 00:14:23,190
called overflow style. And I'm saying page
X. So this line of code is basically saying

183
00:14:23,190 --> 00:14:28,110
"Don't call my -- don't call my event handler
and make me have to add regions and lay them

184
00:14:28,110 --> 00:14:34,769
out and all that, just page X, page along
the X axis," in other words, page horizontally.

185
00:14:34,769 --> 00:14:41,459
So the templates themselves, you use this
@ syntax to define them. So we have an outer

186
00:14:41,459 --> 00:14:44,459
definition of a template here and then we
have slots inside of the template.

187
00:14:44,459 --> 00:14:47,709
In this case we have a left template and a
right template. Both of these are getting

188
00:14:47,709 --> 00:14:53,420
their content from this article flow. Then
we have a center slot which is getting its

189
00:14:53,420 --> 00:14:57,540
content from the timeline flow.
So pretty straightforward, simple, declarative

190
00:14:57,540 --> 00:15:01,230
stuff, CSS that everyone is comfortable with,
and the result is something like this.

191
00:15:01,230 --> 00:15:05,839
We have some English text here which is flowing
from left column to the right column, and

192
00:15:05,839 --> 00:15:09,940
then we have this German text which constitutes
a timeline which is flowing along the center

193
00:15:09,940 --> 00:15:15,550
column.
And it's paging along the X axis as we specified,

194
00:15:15,550 --> 00:15:20,139
or in other words paging horizontally. There
are seven pages total.

195
00:15:20,139 --> 00:15:23,660
And all of that was just with a few lines
of declarative CSS.

196
00:15:23,660 --> 00:15:30,220
Now, this is still a proposal; however, we
do have shims or polyfills, JavaScript polyfills

197
00:15:30,220 --> 00:15:34,550
or shims, that you can use to actually see
this stuff in action and actually see it work.

198
00:15:34,550 --> 00:15:39,399
And we'll have a URL on that at the end of
the presentation. It's not enough, though,

199
00:15:39,399 --> 00:15:43,339
just to be able to flow text from region to
region. If you really want true magazine-like

200
00:15:43,339 --> 00:15:48,329
layout you need more powerful tools than that,
or I should say additional tools. And this

201
00:15:48,329 --> 00:15:54,529
is a screen shot of InDesign. This is where
somebody has flowed some text around a clipping

202
00:15:54,529 --> 00:15:59,940
path here. Right? Again, that's something
we're used to seeing in print. We want this

203
00:15:59,940 --> 00:16:04,690
on the Web. This is an example of it happening
on the Web. Again, this is both CSS Regions,

204
00:16:04,690 --> 00:16:08,709
where text is flowing between regions, and
also the exclusions where text is flowing

205
00:16:08,709 --> 00:16:15,709
along the contours of this image.
So where are we with CSS Exclusions right

206
00:16:16,790 --> 00:16:23,360
now? We're really focused on some of the low
level implementations which really involve

207
00:16:23,360 --> 00:16:29,060
the optimization of algorithms that flow text
around polygons and inside of polygons.

208
00:16:29,060 --> 00:16:34,660
I'll actually show you a quick demo here.
This is something that one of our engineers

209
00:16:34,660 --> 00:16:41,290
put together. And you can see that this is
just sort of an example of an algorithm that

210
00:16:41,290 --> 00:16:47,560
determines on the left side how a text should
flow inside of some arbitrary polygon. In

211
00:16:47,560 --> 00:16:53,350
this case it's a star shape. And on the left
it's content flowing around the polygon.

212
00:16:53,350 --> 00:16:59,350
And so this is stuff that has to be really
bulletproof and has to be really performing.

213
00:16:59,350 --> 00:17:03,310
So right now we're really focusing on optimizing
those algorithms. They're going to be contributing

214
00:17:03,310 --> 00:17:06,760
directly to the WebKit, and that's going to
be the foundation on top of which we build

215
00:17:06,760 --> 00:17:10,590
Exclusions.
Okay. So this is a really busy slide. I'm

216
00:17:10,590 --> 00:17:14,050
not going to go over this. This would bore
you guys all to death. It's too late in the

217
00:17:14,050 --> 00:17:20,650
day for that, but I wanted to just point out
one really important element of this timeline.

218
00:17:20,650 --> 00:17:24,330
This is basically the full timeline of everything
from when we first started thinking about

219
00:17:24,330 --> 00:17:27,550
Regions and Exclusions all the way up through
the present.

220
00:17:27,550 --> 00:17:30,530
I really want to focus on this bottom row
here, the blue row.

221
00:17:30,530 --> 00:17:37,530
I was at Google I/O last year and I was working
at the booth and I was demoing CSS Exclusions

222
00:17:38,880 --> 00:17:43,160
and Regions, and people would come up and
take a look at it -- and we had a prototype

223
00:17:43,160 --> 00:17:46,030
back then. It was just a prototype build.
And they'd look at it and they immediately

224
00:17:46,030 --> 00:17:49,940
got it, right? When you see text flowing around
shapes and everything it's awesome.

225
00:17:49,940 --> 00:17:52,770
And so they would say, Wait, what browser
is that? Are you using Firefox? Is that WebKit?

226
00:17:52,770 --> 00:17:55,750
Is that Chrome? Is that Safari? Like what
is that?

227
00:17:55,750 --> 00:18:00,100
And I would say, Well, this is actually our
own prototype browser. This actually doesn't

228
00:18:00,100 --> 00:18:03,760
work anywhere.
And they'd like walk away kind of crest fallen

229
00:18:03,760 --> 00:18:07,800
and be like "Damn, I kind of wanted to do
that."

230
00:18:07,800 --> 00:18:13,920
So a year later, almost exactly a year later,
all of the live demos that I showed you work

231
00:18:13,920 --> 00:18:17,620
in the version of Chrome that all of you have
on your computers right now, which is really

232
00:18:17,620 --> 00:18:22,180
remarkable to me. That's one year's time.
80 percent of CSS Regions has implemented

233
00:18:22,180 --> 00:18:25,410
and is in Chrome and is on your computer right
now.

234
00:18:25,410 --> 00:18:30,840
So we're making really good progress. As far
as other browsers, Mozilla has committed to

235
00:18:30,840 --> 00:18:34,030
Exclusions and Regions in their 2012 road
map.

236
00:18:34,030 --> 00:18:39,440
The preview version of IE 10 supports Regions
and Exclusions. And since the implementation

237
00:18:39,440 --> 00:18:43,710
is being done directly in WebKit, we expect
the next major version of Safari to pick it

238
00:18:43,710 --> 00:18:47,700
up as well.
I'm going to change gears a little bit here

239
00:18:47,700 --> 00:18:51,370
and I'm going to talk about the Web development
workflow, something a little different.

240
00:18:51,370 --> 00:18:53,700
Actually, instead of talking about it, I think
I'll do a little demonstration.

241
00:18:53,700 --> 00:19:00,700
So I'm going to open up my text editor here
and I'm going to open up a little prototype

242
00:19:01,600 --> 00:19:07,460
website that I am going to pretend like I'm
working on. And I'm going to talk about the

243
00:19:07,460 --> 00:19:11,720
Web development workflow, which typically
looks something like this. You start off in

244
00:19:11,720 --> 00:19:16,610
your editor. You make some kind of a change.
Maybe you wonder if this menu belongs at the

245
00:19:16,610 --> 00:19:21,220
top or not. So you remove it, you save it,
you alt tab over to your browser and you hit

246
00:19:21,220 --> 00:19:27,620
command R to reload. You say nah, I really
wanted that. You go back, you undo, you save,

247
00:19:27,620 --> 00:19:31,050
you go back, you reload. And if you're a Web
developer, which I'm assuming that all of

248
00:19:31,050 --> 00:19:35,530
you have at least some Web development experience,
if not many years of experience, you do this

249
00:19:35,530 --> 00:19:40,320
thousands of times a day, right?
It's completely ingrained in muscle memory,

250
00:19:40,320 --> 00:19:43,680
and it's a pretty good workflow, right? There's
no compilation process or anything like that.

251
00:19:43,680 --> 00:19:46,390
It's pretty fast, pretty smooth.
Maybe you use something like live reload,

252
00:19:46,390 --> 00:19:51,650
which makes it even slicker.
Now what happens when you add mobile into

253
00:19:51,650 --> 00:19:55,770
that workflow, as we increasingly are. If
you are building a website now, you are probably

254
00:19:55,770 --> 00:20:00,760
thinking about mobile to some degree. Well,
you still have this workflow that I just described,

255
00:20:00,760 --> 00:20:07,760
but you have this entire additional workflow
that's like -- pulls it down and -- and really

256
00:20:08,260 --> 00:20:12,560
makes it much less efficient, right? So it
looks a little something like this, right?

257
00:20:12,560 --> 00:20:15,810
You go through that process I just described,
you go okay let me check on my device. So

258
00:20:15,810 --> 00:20:19,700
up pick up your device, and it's been a while
so it's locked. So you unlock it. And you

259
00:20:19,700 --> 00:20:23,010
are security conscious, because you are a
at Google conference so you have to enter

260
00:20:23,010 --> 00:20:28,290
your PIN, of course, then you have to navigate
to your browser, then you have to type in

261
00:20:28,290 --> 00:20:32,910
this URL, this long complex URL of your development
machine or whatever it is and you make at

262
00:20:32,910 --> 00:20:37,440
least one or two mistakes, of course. Then
you fix 'em and you check it out. Then when

263
00:20:37,440 --> 00:20:39,700
you are done with that, then you can just
pick it up and hit reload, but you're still

264
00:20:39,700 --> 00:20:43,100
picking it up, unlocking it hitting reload.
Picking up the next device,unlocking, hitting

265
00:20:43,100 --> 00:20:47,290
reload. And on the very last one, you're going
to find a bug, right?

266
00:20:47,290 --> 00:20:49,760
And then you're going to go back to your desktop
and fix it and you're going to start all over

267
00:20:49,760 --> 00:20:53,910
again. So the really cool process that we're
all pretty very much accustomed to becomes

268
00:20:53,910 --> 00:20:59,120
really pretty terrible on mobile devices when
you incorporate mobile devices into this Web

269
00:20:59,120 --> 00:21:03,440
development workflow, but I guess I shouldn't
say terrible. But it's not as efficient, let's

270
00:21:03,440 --> 00:21:07,920
put it that way.
So Adobe looked at that problem and thought

271
00:21:07,920 --> 00:21:13,100
that maybe we could do something about it.
So I'm going to switch over to -- to my browser

272
00:21:13,100 --> 00:21:17,530
here. And assuming that I have an internet
connection, if I'm lucky, I'm going to go

273
00:21:17,530 --> 00:21:22,600
to the Boston Globe. I'm lucky.
And the reason that I'm picking the Boston

274
00:21:22,600 --> 00:21:29,600
Globe here is because this is sort of a famously
responsive website which probably required

275
00:21:29,660 --> 00:21:33,360
thousands and thousands of combined hours
of testing on mobile devices so that people

276
00:21:33,360 --> 00:21:36,410
who built this, very smart people, and they
know the pain.

277
00:21:36,410 --> 00:21:43,410
Now, what I'm going to do is I'm going to
come over here and switch over to the ELMO.

278
00:21:44,020 --> 00:21:48,410
And I'm going to put my devices over here
on the left and I'm going to put my -- my

279
00:21:48,410 --> 00:21:53,600
left anyways -- and I'm going to put my desktop
over here on this screen. And what you are

280
00:21:53,600 --> 00:21:57,170
going to see is that they're all synchronized,
right?

281
00:21:57,170 --> 00:22:03,810
And I'm going to click on an article here,
and they all follow along, right? So that

282
00:22:03,810 --> 00:22:08,790
same Web development workflow that I showed
you earlier, now I can -- I can still do with

283
00:22:08,790 --> 00:22:12,610
all of my devices connected, right?
I can just glance over and see. I don't have

284
00:22:12,610 --> 00:22:16,190
to pick them up, I don't have to change URLs,
I don't have to tap on links and all that

285
00:22:16,190 --> 00:22:19,800
kind of thing. There's no limit to the number
of devices that you can connect to here, by

286
00:22:19,800 --> 00:22:24,660
the way.
Something else I want to point out here is

287
00:22:24,660 --> 00:22:30,350
Adobe shadow, it's not like bundling up this
content and pushing it out to the devices,

288
00:22:30,350 --> 00:22:34,650
right? Rather it's telling the devices to
go make its own request for the content. And

289
00:22:34,650 --> 00:22:37,760
that's an important distinction because that
means that the user agent and the http headers

290
00:22:37,760 --> 00:22:41,260
and all of the information that the server
needs in order to determine the correct content

291
00:22:41,260 --> 00:22:46,720
to send to that particular device is all present.
So you can get, you know, smaller images if

292
00:22:46,720 --> 00:22:50,350
you are on smaller screen or higher resolution
images if you are on one of these nice new

293
00:22:50,350 --> 00:22:57,350
modern screens or whatever it is, right?
So you are seeing the real deal on these devices.

294
00:22:57,680 --> 00:23:03,880
So let's see here ... it's nice to be able
to, you know, just this much is sort of a

295
00:23:03,880 --> 00:23:07,950
big win, but there's even more we can do.
If I click on the little shadow extension

296
00:23:07,950 --> 00:23:14,430
up here in my browser, I can do some remote
inspection of my device here. And so I've

297
00:23:14,430 --> 00:23:21,430
now connected to my iPad and you can see that
as I start to mouse over the content, in my

298
00:23:23,350 --> 00:23:29,930
Web Inspector on my desktop, you can see this
being highlighted on my iPad over there.

299
00:23:29,930 --> 00:23:34,240
So this is, you know, the kind of thing that
we're accustomed to doing, you know, on our

300
00:23:34,240 --> 00:23:40,700
-- when we're doing Web development on our
desktop and now it extends nicely to our devices.

301
00:23:40,700 --> 00:23:44,710
And we can do more than just highlight, we
can also change things so I can, you know,

302
00:23:44,710 --> 00:23:51,710
say something like -- I can change this headline
to be a little more relevant to me, right?

303
00:23:51,780 --> 00:23:56,220
So I just changed the headline over here.
I prefer something like this.

304
00:23:56,220 --> 00:24:03,220
I can execute some JavaScript remotely on
any one of these devices. See I just popped

305
00:24:03,800 --> 00:24:09,280
up an alert here. So I will come over here
and dismiss it. So after I've sufficiently

306
00:24:09,280 --> 00:24:14,030
messed up this page by vandalizing it or whatever,
I can just come over here, pull it down and

307
00:24:14,030 --> 00:24:17,560
refresh it. If you guys have done development
on a lot of different mobile devices, you

308
00:24:17,560 --> 00:24:21,870
will know that clearing the cache is actually
kind of a pain, like getting a fresh copy

309
00:24:21,870 --> 00:24:27,040
of everything on all of these different devices,
and so shadow takes care of that for you by

310
00:24:27,040 --> 00:24:30,260
dumping the cache and making a fresh request.
Or if I want to do it to all of my devices,

311
00:24:30,260 --> 00:24:35,650
I will just come over here and I will tell
them all to refresh, so I will click on that.

312
00:24:35,650 --> 00:24:39,810
I don't know if you saw, but they all just
refreshed, it's very quick.

313
00:24:39,810 --> 00:24:43,300
Also I can take screen shots of all of my
devices here. I'll just click on this icon,

314
00:24:43,300 --> 00:24:50,300
takes a little bit of time, open up the directory
here and you can see that I have -- this is

315
00:24:50,760 --> 00:24:57,030
the screen shot from my iPad, so I can compare
them all, sort of check out pixels next to

316
00:24:57,030 --> 00:24:59,170
each other.
[ Applause ]

317
00:24:59,170 --> 00:25:04,650
>>Christian Cantrell: Oh, thank you.
Awesome.

318
00:25:04,650 --> 00:25:07,040
That is worthy of applause, I agree, thank
you.

319
00:25:07,040 --> 00:25:12,510
This is the Galaxy Nexus here, and also some
text files were created with some meta data

320
00:25:12,510 --> 00:25:17,930
so I can, you know, sort of get a good feel
for how something looked for the specific,

321
00:25:17,930 --> 00:25:23,180
you know, URL and LS version and stuff like
that.

322
00:25:23,180 --> 00:25:28,140
So -- so there's shadow. It's available right
now. You can go to labs.adobe.com, download

323
00:25:28,140 --> 00:25:33,270
it, see if it helps for your workflow. I'm
a big fan myself.

324
00:25:33,270 --> 00:25:38,600
Okay. I'm going to change gears again and
talk a little bit about tooling. So tooling

325
00:25:38,600 --> 00:25:42,270
is something that Adobe is well known for.
We do a lot of tooling, so when we were looking

326
00:25:42,270 --> 00:25:47,960
at ways we can contribute to the Web, tooling
was something that seemed kind of obvious.

327
00:25:47,960 --> 00:25:52,750
But we didn't just want to go create sort
of the same old kinds of tools. We really

328
00:25:52,750 --> 00:25:59,750
wanted to take a fresh approach and see what
kind of innovation we could bring to tooling.

329
00:25:59,790 --> 00:26:05,320
So we decided to experiment with an open source
code editor for the Web written entirely with

330
00:26:05,320 --> 00:26:10,100
Web technologies.
Just to see what would happen.

331
00:26:10,100 --> 00:26:13,850
And what happened was something called brackets.
I'm going to go through a few bullet points

332
00:26:13,850 --> 00:26:18,160
here and then I'll get to the demo, but I
want to provide context here. First of all,

333
00:26:18,160 --> 00:26:21,030
it's open source. When I say it's open source,
I mean it's open source, right?

334
00:26:21,030 --> 00:26:23,910
Like a lot of companies, they used to say
something was open source and we'd all go

335
00:26:23,910 --> 00:26:27,420
oh cool it's open source, and you would look
at the license and be like wait a minute.

336
00:26:27,420 --> 00:26:32,570
Open source is actually kind of a useless
term. So really what license? And we are releasing

337
00:26:32,570 --> 00:26:36,460
under MIT license, and that's a very, very
liberal license.

338
00:26:36,460 --> 00:26:41,480
All of the codes on GitHub, even the backlog
is public. It's on a site called Trello, so

339
00:26:41,480 --> 00:26:46,030
you can actually go see what the team is working
on. So everything is being done in the public.

340
00:26:46,030 --> 00:26:50,340
There's also IRC channels and there's lists
and stuff like that that you can follow.

341
00:26:50,340 --> 00:26:55,150
This is something that we realized kind of
early on, which is kind of cool, this concept

342
00:26:55,150 --> 00:26:59,630
if you can use brackets, you can hack on brackets.
If you need brackets, if you use brackets,

343
00:26:59,630 --> 00:27:03,680
you can change brackets.
This point was really driven home to me when

344
00:27:03,680 --> 00:27:08,280
I was working on my Google I/O slides and
I realized I wanted brackets to be able to

345
00:27:08,280 --> 00:27:13,970
bump up the font size so that the audience
could see the code while I was demoing it,

346
00:27:13,970 --> 00:27:18,000
but it didn't have that feature. It's still
very, very early. I should point out this

347
00:27:18,000 --> 00:27:23,910
is still very early stages of development.
So I emailed the product manager, Adam Leeman.

348
00:27:23,910 --> 00:27:27,870
I said, "Can you guys add this by Google I/O?"
Or I said, "Are you planning on adding this

349
00:27:27,870 --> 00:27:32,170
by Google I/O?"
And he responds, he says, "Here's the link,"

350
00:27:32,170 --> 00:27:37,270
you know, "here's a link to the public -- public
backlog, you can check for yourself, it's

351
00:27:37,270 --> 00:27:41,280
all public, you don't have to ask me."
And actually he didn't say it like that because

352
00:27:41,280 --> 00:27:45,480
he's a nice guy. But I went and I looked and
it wasn't scheduled. I said, "Well, can you

353
00:27:45,480 --> 00:27:47,110
guys get it in?"
He said, "No, but it's open source you can

354
00:27:47,110 --> 00:27:50,220
get in."
I thought, you know, that's true. Like that

355
00:27:50,220 --> 00:27:54,450
-- like, I'm really critical of editors, right?
We all are. Everyone in this room is really

356
00:27:54,450 --> 00:27:56,830
critical about editors.
And for the first time I just had the power

357
00:27:56,830 --> 00:28:01,790
to make it how I wanted it. So I just forked
it, I mean, I'm a good JavaScript programmer,

358
00:28:01,790 --> 00:28:08,370
I forked it, you know, I cloned it, I branched
it, and I built the feature all in JavaScript

359
00:28:08,370 --> 00:28:13,140
and submitted a report request and it got
merged and I added the feature. It was really

360
00:28:13,140 --> 00:28:17,160
empowering to be able to just change things
I didn't like about the editor that I use

361
00:28:17,160 --> 00:28:24,160
every day.
I'm sorry, I forgot to change that back.

362
00:28:24,850 --> 00:28:28,180
Thank you.
So brackets is intended to run outside of

363
00:28:28,180 --> 00:28:30,970
the browser for now. Right?
So we built it with Web technologies, we were

364
00:28:30,970 --> 00:28:35,760
first thinking like wouldn't it be awesome
to take this editor and actually run it inside

365
00:28:35,760 --> 00:28:41,590
of a browser? We thought that might be really
innovative and cool and different. Then we

366
00:28:41,590 --> 00:28:46,300
thought, no, probably not.
We want to focus on a more traditional development

367
00:28:46,300 --> 00:28:48,780
experience right now and keep it outside of
the browser, but we are definitely looking

368
00:28:48,780 --> 00:28:52,570
at embedding it in the browser in the future
and accessing various cloud serves with it.

369
00:28:52,570 --> 00:28:56,040
We are not trying to build an IDE. We are
trying to build a streamlined editor. We are

370
00:28:56,040 --> 00:28:58,730
not trying to compete with Visual Studio,
Eclipse or something like that. We are trying

371
00:28:58,730 --> 00:29:03,270
to build something fast and streamlined. We
want it to be an editor. And so we have a

372
00:29:03,270 --> 00:29:08,830
good extension model. It's an evolving extension
model, which is really designed to help us

373
00:29:08,830 --> 00:29:12,690
keep a lot of the things that maybe everybody
doesn't want out of the core product and so

374
00:29:12,690 --> 00:29:16,070
that people can just bring in what they want.
And the last thing that I want to say is that

375
00:29:16,070 --> 00:29:19,330
the core editor is codemirror, which is a
separate project which is something that we

376
00:29:19,330 --> 00:29:24,670
are also actively contributing to. Okay. So
enough talk. Let's take a look at it.

377
00:29:24,670 --> 00:29:29,750
In fact, you actually have already seen it,
so this is brackets. I was using it earlier.

378
00:29:29,750 --> 00:29:32,810
It's a very simple editor. I mean, I have
my files over here on the left, I have my

379
00:29:32,810 --> 00:29:36,700
code here on the right, and I can hide my
files. You know, I have some menus up here.

380
00:29:36,700 --> 00:29:40,300
These are actually temporary. These menus
are going to become native menus. They are

381
00:29:40,300 --> 00:29:45,880
just in here temporarily. But this is it.
I mean it's a relatively straightforward and

382
00:29:45,880 --> 00:29:52,880
simple experience, simple UI. And the point
of brackets is to really sort of get out of

383
00:29:54,410 --> 00:29:59,100
your way. And it's to sort of break down the
barriers between what it is that you intend

384
00:29:59,100 --> 00:30:05,170
to do and actually doing it.
So if I'm looking at this piece of text right

385
00:30:05,170 --> 00:30:09,120
here and I decide that I want to make some
kind of a change to it, let's say I want to

386
00:30:09,120 --> 00:30:13,760
tweak the line height of this text, then the
first thing that I have to start doing is

387
00:30:13,760 --> 00:30:18,400
dig through a bunch of CSS files, right? And,
you know, I have to look at, you know, I have

388
00:30:18,400 --> 00:30:21,520
to look for selector vision, I have to look
for this ID, I have to look for main content

389
00:30:21,520 --> 00:30:25,080
or maybe article, I have to look for, you
know, maybe a container and I have to try

390
00:30:25,080 --> 00:30:32,080
and find where, you know, which styles are
actually applying to this piece of text. And

391
00:30:32,640 --> 00:30:35,500
if this is a big project, I could have a dozen
CSS files, right?

392
00:30:35,500 --> 00:30:39,640
They could be hundreds of lines long and it
could be a real pain, right?

393
00:30:39,640 --> 00:30:45,320
So as I'm foraging sort of around looking
for these rules, I'm not programming, I'm

394
00:30:45,320 --> 00:30:49,630
not doing what I'm intending to do. It's affecting
my productivity. So instead what I want to

395
00:30:49,630 --> 00:30:54,230
do is I just want my editor to do that for
me. I want to hit command E, I just want to

396
00:30:54,230 --> 00:30:57,330
hit a keystroke and I want to have my editor
do that for me, right? I want to have it bring

397
00:30:57,330 --> 00:31:00,790
up this editor right here. This is an inline
editor, and it's telling me exactly which

398
00:31:00,790 --> 00:31:07,400
rules apply to where my cursor was. If it's
multiple documents, it will show me the different

399
00:31:07,400 --> 00:31:10,600
documents right here on the right and I can
just pick the right one.

400
00:31:10,600 --> 00:31:15,400
And I can go down here and I can make a change,
so maybe I change this to 33 -- now, this

401
00:31:15,400 --> 00:31:20,610
isn't just a few or perspective of my CSS.
This is an actual editor. You can see I just

402
00:31:20,610 --> 00:31:25,350
made a change and now it's this file is marked
as dirty here and here and I can hit save.

403
00:31:25,350 --> 00:31:30,960
So I have saved it. I have actually edited
the document, the CSS, inline, directly in

404
00:31:30,960 --> 00:31:35,400
context, which is really nice.
But it's not enough just to be able to edit

405
00:31:35,400 --> 00:31:39,330
the CSS. We actually need to be able to see
what we're doing and see how it's affecting

406
00:31:39,330 --> 00:31:44,040
our document. So I'm going to go up here and
click on this lightning bolt, move this over

407
00:31:44,040 --> 00:31:49,890
to the side, and look at this, I'm going to
bump up the font size. It's awesome.

408
00:31:49,890 --> 00:31:51,600
[ Laughter ]
[ Applause ]

409
00:31:51,600 --> 00:31:56,730
>>Christian Cantrell: Well, thanks!
Thank you.

410
00:31:56,730 --> 00:31:59,580
And then I'm going to put my browser over
here on the left and I'm going to go back

411
00:31:59,580 --> 00:32:02,410
down to this paragraph that I was talking
about before and I'm going to open up this

412
00:32:02,410 --> 00:32:06,960
editor, and go down to the line height, which
is what I intended to do and I'm going to

413
00:32:06,960 --> 00:32:10,790
start tweaking the line height.
You can see that it's changing there on the

414
00:32:10,790 --> 00:32:15,130
left, right? Let me do something a little
more dramatic, let me really change it. So

415
00:32:15,130 --> 00:32:22,130
while I'm actually changing it, I'm seeing
what I'm doing, right? Which is going to make

416
00:32:22,630 --> 00:32:27,750
my workflow much more efficient. Maybe I want
to change this margin down here a little bit.

417
00:32:27,750 --> 00:32:33,280
So while I'm coding I'm actually seeing in
real-time what's going on here and I can just

418
00:32:33,280 --> 00:32:36,630
save it.
Now, you -- you might be accustomed to doing

419
00:32:36,630 --> 00:32:43,340
this kind of thing in -- in something like
the -- like the WebKit devtools, right? Where

420
00:32:43,340 --> 00:32:46,840
you are able to tweak your CSS, but the problem
with that is that you are not doing that inside

421
00:32:46,840 --> 00:32:49,510
of your editor, so you make all of these changes
and there's no way to capture them back to

422
00:32:49,510 --> 00:32:55,290
your source files.
Let me make this full screen, bring my files

423
00:32:55,290 --> 00:33:00,650
out here and bring up my index page.
Now, this also works with JavaScript, too.

424
00:33:00,650 --> 00:33:07,650
So I can scroll down to, you know, some function,
function call here, and drop my -- drop my

425
00:33:10,380 --> 00:33:13,790
cursor next to a function here. If I don't
remember the method signature, the function

426
00:33:13,790 --> 00:33:18,580
signature, I can just hit command D, it brings
up another editor, I can read the whole function

427
00:33:18,580 --> 00:33:23,130
so I know what's going on. Hopefully it's
documented. In this case it's not. But you

428
00:33:23,130 --> 00:33:28,480
can see how, you know, how brackets is really
designed to get out of your way, to break

429
00:33:28,480 --> 00:33:33,920
down barriers, to let you do what you intend
to do and, you know, get your features implemented

430
00:33:33,920 --> 00:33:39,660
as quickly and smoothly as possible. Brackets
is available now. You can start playing with

431
00:33:39,660 --> 00:33:44,090
it. You guys can start adding features, fixing
bugs, et cetera and we'll have the URL at

432
00:33:44,090 --> 00:33:47,950
the end of the presentation if you want to
learn more. So those are the things that Adobe

433
00:33:47,950 --> 00:33:53,650
has going on around text, around Web development
workflow and some things we have going on

434
00:33:53,650 --> 00:33:59,070
around tooling. We also have a lot more going
on that focuses more on graphics and for that

435
00:33:59,070 --> 00:34:03,060
I'm going to turn it over to Vincent.
[ Applause ]

436
00:34:03,060 --> 00:34:10,060
>>Vincent Hardy: Thanks, Christian. Yes, I'm
going to talk about graphics and cinematic

437
00:34:15,230 --> 00:34:19,780
effects for the Web. One thing that I want
to point out is the tool that we're using

438
00:34:19,780 --> 00:34:22,580
for the presentation is actually, you know,
it's not a keynote or not a PowerPoint or

439
00:34:22,580 --> 00:34:28,659
it's not one of the presentation tools. It's
actually Chromium. Slightly tweaked version

440
00:34:28,659 --> 00:34:32,909
of Chromium, but it's a Web browser running
full screen and the whole presentation is

441
00:34:32,909 --> 00:34:37,210
written with HTML with actually a library
called (indiscernible) but all of the slides

442
00:34:37,210 --> 00:34:44,210
are put together using HTML, so we're doing
this in part because it's possible, of course,

443
00:34:44,480 --> 00:34:49,490
and also in part to test out all of the things
that we're working on and the type of new

444
00:34:49,490 --> 00:34:53,850
effects that we're trying to bring to the
platform or that are already available on

445
00:34:53,850 --> 00:34:57,540
the platform.
So I'm going to start with an example. So

446
00:34:57,540 --> 00:35:02,820
what you're looking at here is actually an
SVG image embedded into an inline HTML document,

447
00:35:02,820 --> 00:35:08,490
that's something that you can do today. It
has a drop shadow, which is an SVG filter

448
00:35:08,490 --> 00:35:15,110
applied to it, it's very subtle, so you might
kind of see it around the edges of the logo.

449
00:35:15,110 --> 00:35:21,740
And it has a gray scale filter applied to
it as well. And when I hover on it, the gray

450
00:35:21,740 --> 00:35:28,740
scale filter gets animated and the -- to restore
the colors and you saw this kind of flag animation

451
00:35:29,000 --> 00:35:36,000
happening on the content. So this is using
all kinds of filter effects, I will talk about

452
00:35:36,260 --> 00:35:41,820
the different kinds of filter effects that
are applied here and how you write this. Another

453
00:35:41,820 --> 00:35:48,820
thing that's more subtle on this is the -- is
the -- is happening in the interaction of

454
00:35:52,650 --> 00:35:58,710
the SVG MH with the background, you can see
there's a slightly textured background and

455
00:35:58,710 --> 00:36:02,140
the image actually blends in the background
in a way that you have not seen before. This

456
00:36:02,140 --> 00:36:07,240
is not opacity. This is actually a blind mode.
And we're combining and having interaction

457
00:36:07,240 --> 00:36:14,240
between the logo and the backdrop. How do
we do this traditionally?

458
00:36:16,700 --> 00:36:23,700
So -- oops.
Okay. All right. So traditionally, this is

459
00:36:26,640 --> 00:36:32,910
done with -- with authoring tools, so we do
this with tools like Photoshop, we do with

460
00:36:32,910 --> 00:36:39,910
tools like Illustrator, or GIMP, we do this
with tools like After Effects. Those tools

461
00:36:40,260 --> 00:36:46,120
combined let you create better graphics, that
let you define complex vector effects or filter

462
00:36:46,120 --> 00:36:52,460
effects or let you play with, you know -- you
know, measures of coordinates in a space to

463
00:36:52,460 --> 00:36:57,290
do effects like flags.
How do you do this on the Web platform, though?

464
00:36:57,290 --> 00:37:03,780
So this is coming to the Web. The way it's
coming is through a number of filter effects.

465
00:37:03,780 --> 00:37:08,030
We have -- we have -- at the bottom in gray
we have the text shadow and box shadow, and

466
00:37:08,030 --> 00:37:13,680
I have a glitch in my rendering here. I apologize
for that, but so text shadow and box shadow

467
00:37:13,680 --> 00:37:19,210
are kind of the ancestors of the modern filter
effects that are coming. They can do simple

468
00:37:19,210 --> 00:37:22,970
things, but they are available, and they can
be powerful.

469
00:37:22,970 --> 00:37:27,800
And we have the new filter property, and that
starts to be implemented in -- in the browser

470
00:37:27,800 --> 00:37:32,270
and starts to being -- using the browser.
If you've seen the keynote this morning, the

471
00:37:32,270 --> 00:37:37,710
Cirque du Soleil demo was using filter effects
and they are now in Chromium and WebKit as

472
00:37:37,710 --> 00:37:44,320
well, they are also in IE for -- for scale
or vector graphics. The way you use filter

473
00:37:44,320 --> 00:37:50,590
effects is in one of three ways. The -- this
is one to start with is probably filter graphs,

474
00:37:50,590 --> 00:37:55,460
those are filter defines as a set of nodes
that you can combine to create the effect

475
00:37:55,460 --> 00:38:00,990
that you would want, very much like you would
do in a tool. The second way is through shorthands,

476
00:38:00,990 --> 00:38:05,980
so filter shorthands are shorthands for filter
graphs. So there are some filter types that

477
00:38:05,980 --> 00:38:10,070
are, you know, very common that you might
want to use. And instead of repeating the

478
00:38:10,070 --> 00:38:14,270
same filter graph over and over again, the
specification provides the shorthands for

479
00:38:14,270 --> 00:38:17,640
those.
And then the third way is custom filters or

480
00:38:17,640 --> 00:38:22,610
shaders, which gives you the full power and
full access to the power of the GPU. It's

481
00:38:22,610 --> 00:38:28,570
a new proposal. It's being standardized right
now and this is what does the GPX like the

482
00:38:28,570 --> 00:38:34,150
waving effect that we saw.
So the first -- the few effects about what's

483
00:38:34,150 --> 00:38:38,620
possible today. This is just playing with
text shadow and combining multiple text shadows

484
00:38:38,620 --> 00:38:45,180
of different colors. You can do a neon-like
effect and when I hover on it, I get a nicer

485
00:38:45,180 --> 00:38:52,180
glow. It's very simple, and it's just combining
CSS animation and the filter property. The

486
00:38:52,520 --> 00:38:59,520
tech shadow property, sorry. Similarly you
can use a box shadow, so the box shadow will

487
00:38:59,620 --> 00:39:06,250
apply, (inaudible) of tech shadow, but to
the box, the CSS box, and we can use it for

488
00:39:06,250 --> 00:39:10,770
example, to track the user's attention on,
you know, where the text entry currently is,

489
00:39:10,770 --> 00:39:17,770
so here I have, you know, laser saber effect
on the text entry, and that helps the user,

490
00:39:19,030 --> 00:39:23,860
that helps the usability, and so it's pretty
pleasant visually. So these are available

491
00:39:23,860 --> 00:39:30,860
today and people start using those on Web
pages. Now, let's turn to the new filter effects

492
00:39:30,880 --> 00:39:36,110
and the ones that are starting to be available
now. The -- the easiest way to use them is

493
00:39:36,110 --> 00:39:40,760
with shorthands, so if you'll look at the
way you would write this in your CSS, you

494
00:39:40,760 --> 00:39:45,210
would just add the filter property, you would
say colon, and then you'll invoke one of the

495
00:39:45,210 --> 00:39:52,210
filter functions, so if we do this on this
original image, and apply, for example, a

496
00:39:52,500 --> 00:39:56,560
gray scale filter, I just have to say, you
know, filter, Colin, gray scale one, and that

497
00:39:56,560 --> 00:40:01,820
applies a full gray scale filter, and one
of the beauties of this is that I can vary

498
00:40:01,820 --> 00:40:06,920
the parameter in the gray scale function and
that can be subjected to CSS animations and

499
00:40:06,920 --> 00:40:13,000
CSS transitions making it extremely trivial
to write, say, hover effect where, you know,

500
00:40:13,000 --> 00:40:18,870
the image will go from gray scale to full
color on hover. There's a bunch of those effects,

501
00:40:18,870 --> 00:40:22,670
not going to go through all of them, but you
can see that visually they provide, you know,

502
00:40:22,670 --> 00:40:29,670
already a pretty nice variety of things you
can do. Now, the -- oops. Having problems

503
00:40:31,600 --> 00:40:38,600
with my navigation. Sorry about this. As I
said earlier, the shorthand filters are actually

504
00:40:43,470 --> 00:40:48,380
shorthands for filter graphs, and filter graphs
come from SVG. They are now being applied

505
00:40:48,380 --> 00:40:54,740
to not just SVG element, but all of HTML,
and I'm going to show you something that traditionally

506
00:40:54,740 --> 00:41:00,000
you would do in Photoshop, remember, you know,
many years ago I used to read those books

507
00:41:00,000 --> 00:41:05,400
called Photoshop Wow! books, and there was
one edition for each version of Photoshop,

508
00:41:05,400 --> 00:41:09,250
and they would explain how to do those, you
know, the combination of filter effects to

509
00:41:09,250 --> 00:41:13,630
do something like a chiseled gold effect,
and the way you would put this on your Web

510
00:41:13,630 --> 00:41:18,640
page is you would do it in Photoshop, you'd
do export this as a PNG or a JPEG and then

511
00:41:18,640 --> 00:41:23,970
insert that into your Web page. Well, now,
you can design your filter, but you don't

512
00:41:23,970 --> 00:41:27,700
have to, you know, export as a PNG, it can
still be text, so here I'm going to filter

513
00:41:27,700 --> 00:41:34,190
a piece of text, which means that my content
remains searchable, et cetera, and accessible,

514
00:41:34,190 --> 00:41:39,050
and I can toggle that, you know, nice gold
chiseled effect. And also since this is all

515
00:41:39,050 --> 00:41:45,240
declarative and it's done in markup, I can
manipulate it -- I can manipulate it dynamically

516
00:41:45,240 --> 00:41:51,880
in JavaScript, so here I've done something,
you know, fairly simple. I hooked up one of

517
00:41:51,880 --> 00:41:56,570
the lighting filters in this filter graph
to the position of the mouse, and as a result,

518
00:41:56,570 --> 00:42:00,460
when I move the mouse, the light seems to
come from a different direction, so that's,

519
00:42:00,460 --> 00:42:05,470
you know, pretty nice flexibility. So, you
know, maybe you're not putting, you know,

520
00:42:05,470 --> 00:42:11,080
chiseled gold on your page that often, but
something that's more common is something

521
00:42:11,080 --> 00:42:16,440
like this, curve shadows. So curve shadow
is something you see on a lot of Web pages

522
00:42:16,440 --> 00:42:23,070
today, and the way it's implemented, right
now in the best case, because there are sometimes

523
00:42:23,070 --> 00:42:28,860
horrible hacks, but the case use before and
after elements boxes that are moved to the

524
00:42:28,860 --> 00:42:35,860
side of the box and they're rotated, and they
have a background box shadow on them, but

525
00:42:37,220 --> 00:42:42,080
this is, you know, a little convoluted, this
is really visual effect and belongs to filters.

526
00:42:42,080 --> 00:42:48,130
That turns out to be fairly simple to write
in -- as a filter graph, and also the nice

527
00:42:48,130 --> 00:42:54,650
thing about it, it's very easy to remain place
for script or CSS, so here I can just manipulate

528
00:42:54,650 --> 00:43:01,050
one of the parameters of one of the nodes
in that filter graph and have varying effects.

529
00:43:01,050 --> 00:43:08,050
So to give you a feel of what this looks like,
here is a little code sample, and the thing

530
00:43:09,740 --> 00:43:12,690
that is important to note here is that I'm
not going to go through all the details of

531
00:43:12,690 --> 00:43:18,100
that filter graph, but things to remember
are you have a filter element, that's the

532
00:43:18,100 --> 00:43:22,680
top element here in the light blue color,
and that's what you would reference from your

533
00:43:22,680 --> 00:43:27,210
filter property, so the filter property will
point to it, and then you have a number of

534
00:43:27,210 --> 00:43:32,180
filter nodes that you can arrange and combine.
They each produce a different effect. And

535
00:43:32,180 --> 00:43:36,350
at the end of the filter you can combine and
arrange those effects and stack them up in

536
00:43:36,350 --> 00:43:40,290
the way you want. So that's very similar again
to what you would do in an authoring tool,

537
00:43:40,290 --> 00:43:46,510
and all those operation and combinations can
be captured in the markup, and the nice thing

538
00:43:46,510 --> 00:43:50,540
again is that since this is markup, this is
part of the DOM, and the DOM is accessible

539
00:43:50,540 --> 00:43:57,540
for scripts, and you can make it all dynamic.
So now let's move to the last type of shaders.

540
00:43:59,780 --> 00:44:06,530
So since the shaders are used for the filter
function again, except that you're using a

541
00:44:06,530 --> 00:44:10,550
new syntax for the value, instead of having
a shorthand or pointing to your filter graph,

542
00:44:10,550 --> 00:44:17,220
we use a custom function. Before we dive into
this, this is what the kind of things it does,

543
00:44:17,220 --> 00:44:21,720
so here you see when I hover, I start applying
a filter -- custom filter effect and the two

544
00:44:21,720 --> 00:44:28,300
things happening are first the rendering is
distorted, it has this nice curvy effect applied

545
00:44:28,300 --> 00:44:33,280
to it, and that's what vertex shaders do,
so this is about distorting geometry and moving

546
00:44:33,280 --> 00:44:38,960
vertices around, and the second thing you
can notice is there's a fairly subtle effect

547
00:44:38,960 --> 00:44:45,960
-- shading effect on the rendering, so the
original element that we're filtering is all

548
00:44:46,910 --> 00:44:50,810
white, and here you can see there're shades
of gray, and that's what (inaudible) shaders

549
00:44:50,810 --> 00:44:56,120
or pixel shaders do for you. The other thing
that you mentioned is, you know, shaders run

550
00:44:56,120 --> 00:45:03,120
on the GPU, so this is, you know, usually
very fast. So the model says the shaders is

551
00:45:03,360 --> 00:45:09,370
that -- the conceptual model, when you use
it, you want to author it or just use it as

552
00:45:09,370 --> 00:45:16,370
a shader, is that think of it as your content
being rendered into an image, and then a mesh

553
00:45:18,220 --> 00:45:24,110
of points or vertices is mapped on to this
offscreen rendering, and what the vertex shader

554
00:45:24,110 --> 00:45:30,460
lets you do is manipulate those -- those mesh
points, or mesh vertices in a 3D space, and

555
00:45:30,460 --> 00:45:34,860
that gives you the ability to do all kinds
of, you know, extremely beautiful distortions

556
00:45:34,860 --> 00:45:40,230
in a 3D space. And that is the end of step
2. That is what the vertex shader produces.

557
00:45:40,230 --> 00:45:45,640
And then the last step is that you can manipulate
pixel values, so once you've distorted the

558
00:45:45,640 --> 00:45:52,480
geometry all you want, you can then apply
the values on the pixel colors, and more precisely

559
00:45:52,480 --> 00:45:59,480
can produce pixel colors that will be combined
with the rendered content. So let's look at

560
00:45:59,540 --> 00:46:05,480
how to use shaders step by step, so again,
very simple, use a custom function, and you

561
00:46:05,480 --> 00:46:11,600
pass parameters to it. If we zoom in to what
the parameters are, the only required parameter

562
00:46:11,600 --> 00:46:17,530
is the vertex shader. This is the only thing
that's required, so if you want to just pass

563
00:46:17,530 --> 00:46:22,820
the vertex shader, that's fine. There's an
optional parameter which is a fragment shader

564
00:46:22,820 --> 00:46:28,200
that will manipulate the pixel values, then
you specify the vertex mesh. The vertex mesh

565
00:46:28,200 --> 00:46:33,370
is the granularity you want for, you know,
how many points you want to be able to manipulate

566
00:46:33,370 --> 00:46:36,980
that will be mapped on top of your rendering.
Depending on the effect, you may want more

567
00:46:36,980 --> 00:46:41,590
or less of them. And then finally, and this
is very powerful, you can pass parameters

568
00:46:41,590 --> 00:46:48,590
to vertex shaders, and those parameters can
then be animated through CSS transitions and

569
00:46:50,110 --> 00:46:57,110
CSS animations, sorry.
All right. So let's look at step by step,

570
00:47:02,920 --> 00:47:09,040
if I use only a vertex shader and the size
of the vertex mesh, here is how it looks,

571
00:47:09,040 --> 00:47:13,990
on the left-hand side is the thing I want
to filter. On top of it I've drawn the vortex

572
00:47:13,990 --> 00:47:19,710
mesh or something that symbolizes the vertex
mesh. This little gray square represents the

573
00:47:19,710 --> 00:47:24,840
vertex mesh, so I've asked for a vertex mesh
that is two rows and two chums, so I have,

574
00:47:24,840 --> 00:47:30,890
you know, nine vertices to manipulate, and
now on the right-hand side you can see that

575
00:47:30,890 --> 00:47:35,490
all of those vertices have been moved -- have
been moved by my vertex shader, and as a result,

576
00:47:35,490 --> 00:47:42,490
I get this distortion that gives the impression
that my element has been folded in two. Now,

577
00:47:43,200 --> 00:47:47,700
what if I wanted to do something a little
more sophisticated and give it a little more

578
00:47:47,700 --> 00:47:52,940
realistic look, like if I wanted the thing
to be darker at the -- you know, where the

579
00:47:52,940 --> 00:47:59,940
fold happens in the center, and just regular
coloring on the edges. Well, that's when I

580
00:48:00,170 --> 00:48:06,310
would use -- start using a fragment shader,
so here I've added this fragment shader, and

581
00:48:06,310 --> 00:48:11,090
what the fragment shader does is that it looks
at the current core unit of the rendering

582
00:48:11,090 --> 00:48:16,840
and will produce a darker value in the center
and a lighter value on the edges, and this

583
00:48:16,840 --> 00:48:23,840
gets combined with the rendering and provides
this very nice shading effect. And I mentioned

584
00:48:25,400 --> 00:48:31,060
earlier that passing parameter was -- was
a useful feature and a powerful feature in

585
00:48:31,060 --> 00:48:37,490
shaders, so here we have the same -- the same
shaders we had in the previous example, the

586
00:48:37,490 --> 00:48:43,200
one fold, and the vertex shader and the fragment
shader, but I'm now passing a parameter that

587
00:48:43,200 --> 00:48:48,750
controls the amount of folding I do, and the
more I fold, the more -- I mean, the bigger

588
00:48:48,750 --> 00:48:55,680
the amount, the bigger the effect, and the
bigger the shading in the center. So since

589
00:48:55,680 --> 00:48:59,490
this can be, you know, manipulated through
scripts, I have hooked up a little slider

590
00:48:59,490 --> 00:49:03,860
here, and if I go to the left, I'll have less
of the effect, and you see what -- how the

591
00:49:03,860 --> 00:49:09,619
code changes, and if I move to the right,
I'll go to the full extent of the -- of the

592
00:49:09,619 --> 00:49:15,410
effect. And there's no limit on which parameters
you pass and the type of parameters, the sophistication

593
00:49:15,410 --> 00:49:22,410
offers a wide variety of parameters, you can
pass, you know, matrices, colors, transforms,

594
00:49:22,410 --> 00:49:27,860
all kinds of things which can then be manipulated
through CSS and scripts as well, so it's pretty

595
00:49:27,860 --> 00:49:32,430
powerful things, and this is a simple example
but I'm hoping people will do real crazy things

596
00:49:32,430 --> 00:49:39,430
with the feature. I want to give a little
taste of what the code looks like. The syntax

597
00:49:42,210 --> 00:49:46,570
and the language that's used for writing those
little programs that will act on vertices

598
00:49:46,570 --> 00:49:52,660
or on pixel values, the language is GLSL,
so it's the same language that is used in

599
00:49:52,660 --> 00:49:57,170
Web GL for when you write shaders for Web
GL. The vertex shader, at the end of the day,

600
00:49:57,170 --> 00:50:03,660
if you look at line 13, that is what a vertex
shader does. The main function of the shader,

601
00:50:03,660 --> 00:50:10,660
which starts on line 7, its whole role is
to compute a GL position, and that's basically

602
00:50:11,690 --> 00:50:16,430
how you want to displace the vertex that's
being processed, and it's called once for

603
00:50:16,430 --> 00:50:23,430
every vertex. So if you want to learn more
about GLSL, you know, there are a lot of poll

604
00:50:24,230 --> 00:50:29,270
documentation on the Web for Web GL, but also
for open GLES, because that is the same exact

605
00:50:29,270 --> 00:50:34,180
language. It's -- you know, it's seal like.
It's a little different. But it's not that

606
00:50:34,180 --> 00:50:41,180
hard, and there's lots of examples to start
from. Fragment shaders or pixel shaders, similarly

607
00:50:41,290 --> 00:50:48,290
it's the same language as for GLSL. There's
a slight difference -- actually not that slight.

608
00:50:48,910 --> 00:50:55,910
There's a difference with regular fragment
shaders using Web GL or open GLES is the output

609
00:50:56,010 --> 00:51:01,970
of the filter is not a GL frag color. If you're
a graphic expert, you're familiar with that

610
00:51:01,970 --> 00:51:07,690
value, which is the typical role of a fragment
shader. In our case, and for security reasons,

611
00:51:07,690 --> 00:51:14,690
what we produce is a pixel value that is then
combined with the rendered output. There has

612
00:51:14,770 --> 00:51:21,770
been a lot of work done on making shaders
secure, and the result of this was that with

613
00:51:22,440 --> 00:51:27,680
this modification we don't give access to
the rendered content to shaders, and as a

614
00:51:27,680 --> 00:51:33,410
result they are safe, and they can still do
all the, you know, the use cases that we've

615
00:51:33,410 --> 00:51:40,410
talked about so far. Now, we don't expect
people to, you know, write as many shaders

616
00:51:40,930 --> 00:51:46,250
as they will use shaders. We expect that,
you know, we'll have, for example, we plan

617
00:51:46,250 --> 00:51:53,250
to provide shaders that people can start experimenting
with. We expect that experts will write nice

618
00:51:53,610 --> 00:51:59,630
shaders with a set of well documented parameters
that a lot of people can use, and one of the

619
00:51:59,630 --> 00:52:03,850
things we've started to think about is, well,
how can we make it easy for people to configure

620
00:52:03,850 --> 00:52:08,160
a shader the way they want and make it look
exactly right?

621
00:52:08,160 --> 00:52:13,260
So this is what the CSS shader studio does,
and I'll show you a few example of that--

622
00:52:13,260 --> 00:52:20,260
of that tool. So here we're in this prototype
tool. It's not a -- it's not an application

623
00:52:21,060 --> 00:52:28,060
or a tool that, you know, we would sell or
anything. It's a demo tool. And on the left

624
00:52:28,150 --> 00:52:34,000
hand side you have a set of shaders. When
you select one, you -- the user interface

625
00:52:34,000 --> 00:52:38,340
provides you the parameters that you can configure
for the shader, so those are -- if you remember

626
00:52:38,340 --> 00:52:42,440
the syntax, the parameters you pass at the
end of the custom function. In the center

627
00:52:42,440 --> 00:52:47,690
you see a prototype like rendering that's
affected by the shader, and at the bottom,

628
00:52:47,690 --> 00:52:51,290
there's a time line that lets you animate
the different values for the shader. So, you

629
00:52:51,290 --> 00:52:58,290
know, before the presentation I prepared one
on the -- this warp shelter we have, and I

630
00:52:58,550 --> 00:53:05,290
set it up so that, you know, at time zero
I've set up the, you know, the warp the way

631
00:53:05,290 --> 00:53:12,290
I wanted with this little UI that lets me
move the vertices visually, and the end of

632
00:53:12,900 --> 00:53:17,740
the animation is restored to its state. Now,
if I run it, you know, I will have kind of

633
00:53:17,740 --> 00:53:21,990
a transition effect that -- I may want to
put on my Web page when I'm shoring up UP's

634
00:53:21,990 --> 00:53:28,990
of information, for example. There's all kinds
of different effects you could do. Scroll

635
00:53:29,540 --> 00:53:36,540
is one of my favorites. If I go back here,
I pre-define it, if I move the roll ratio,

636
00:53:38,190 --> 00:53:45,119
for example, I can do the effect I want, and
again if I run it, it's going to, you know,

637
00:53:45,119 --> 00:53:51,650
show me a preview of this type of effect I
might want. I can also do things like shuffling

638
00:53:51,650 --> 00:53:58,650
tiles for example. Here, where -- when I move,
I can -- I can kind of explode the content

639
00:54:02,740 --> 00:54:08,369
and that's because when I move the vertices
of the -- you know, on the vertex mash, I

640
00:54:08,369 --> 00:54:12,740
have the option of keeping them attached in
which case it's like moving a -- distorting

641
00:54:12,740 --> 00:54:19,740
a piece of rubber, but I have also the option
of having detached tiles or detached, you

642
00:54:20,480 --> 00:54:27,480
know, tiles on the rendering. And if I have
many of them, I can have a nice protocol effect

643
00:54:27,530 --> 00:54:33,260
like we're seeing here. So the idea here is
to make it, you know, a visual experience

644
00:54:33,260 --> 00:54:37,030
for, like you do when you're trying to create
a grayed-in, except it's a little more complicated

645
00:54:37,030 --> 00:54:41,580
in this case, and the tool will provide, you
know, the nice syntax that you can just cut

646
00:54:41,580 --> 00:54:48,580
and paste into your CSS page, your CSS file,
and if you want to do the animation effect

647
00:54:48,750 --> 00:54:55,430
itself, you can just grab it here, we export
the exact syntax that we need to go into the

648
00:54:55,430 --> 00:55:02,430
CSS file again. So hopefully that type of,
you know, visual tool will help. You know,

649
00:55:02,840 --> 00:55:08,170
people start using the feature, and make it
painless, and visually interesting to create

650
00:55:08,170 --> 00:55:13,890
them. So this tool is not yet available, but
we're planning to make it available later

651
00:55:13,890 --> 00:55:20,890
this year so that people can -- can look at
it, and experiment with shaders easily. All

652
00:55:24,010 --> 00:55:31,010
right. So another effect or visual effect
that we're working on is around texturing

653
00:55:32,850 --> 00:55:38,070
and blending. So blending is something that's
very common in graphic packages, like Photoshop

654
00:55:38,070 --> 00:55:45,070
or GIMP. The idea of texturing is to control
how what you draw blends or mixes with where

655
00:55:47,160 --> 00:55:53,080
you draw, so you draw something, and you want
it to interact with the backdrop. So currently

656
00:55:53,080 --> 00:55:58,990
we have opacity, so if I use opacity on the
menu like this, like at my "home, about, products"

657
00:55:58,990 --> 00:56:04,000
menu, I use opacity and I kind of see the
background behind, and that's nice, but it

658
00:56:04,000 --> 00:56:09,850
makes it a little washed out, and it's not
quite what you want. It's not quite what graphic

659
00:56:09,850 --> 00:56:13,940
designers want, because they're used to those
nice blend modes that they have in tools like

660
00:56:13,940 --> 00:56:20,760
Photoshop again. We're working on a new proposal
-- it's actually not that new proposal, it's

661
00:56:20,760 --> 00:56:25,910
a feature that has been in SVG for awhile,
but it's now being brought to the larger CSS

662
00:56:25,910 --> 00:56:32,560
and HTML, and it's CSS compositing and blending,
and it can do things like this, so now what

663
00:56:32,560 --> 00:56:38,980
I've done is I've turned on blend mode, it's
a (inaudible) mode, and the blue that I have

664
00:56:38,980 --> 00:56:43,130
now interacts in a different way with the
background, and just to show that this is

665
00:56:43,130 --> 00:56:47,119
not just images, you know, the way people
do this kind of effect today on the Web is

666
00:56:47,119 --> 00:56:52,820
that design it in Photoshop, they export a
bunch of images and then they put it on the

667
00:56:52,820 --> 00:56:58,930
-- on the page. Here I have the CSS animation
on the color, and you can see that the color

668
00:56:58,930 --> 00:57:05,190
animation happens and produces a new rendering
for the menu item, and that gets blended in

669
00:57:05,190 --> 00:57:12,190
with the background. I didn't have to scrub
a thousand bit maps to do so. Using, you know,

670
00:57:13,730 --> 00:57:18,020
blending and compositing is made with two
properties. It's extremely simple. I have

671
00:57:18,020 --> 00:57:24,550
two small demos. So what you see here in the
backdrop is what we're drawing on top of,

672
00:57:24,550 --> 00:57:29,920
and we're drawing this yellow bar on top of
those three elements. The way you specify

673
00:57:29,920 --> 00:57:33,580
it is very straightforward. You have an alpha
compositing property, and by default it's

674
00:57:33,580 --> 00:57:38,230
source over, so a bit of a technical term;
that just means draw what I draw on top of

675
00:57:38,230 --> 00:57:43,400
the background. And that's -- you know, so
far that's no surprise. But I have a bunch

676
00:57:43,400 --> 00:57:49,130
of options and, you know, I can say I just
want, you know -- sorry. Destination over,

677
00:57:49,130 --> 00:57:56,130
for example, will draw what I'm drawing behind
the backdrop. I can do source in, dust in.

678
00:57:57,660 --> 00:58:01,609
There's a bunch of different effects that
you can use that will combine in different

679
00:58:01,609 --> 00:58:08,609
ways with the background, so that's the first
of two properties. The second one is blend

680
00:58:09,020 --> 00:58:15,609
mode, so again, if I'm trying to combine foreground
and a background in various ways, I just use

681
00:58:15,609 --> 00:58:22,520
a blend mode property, and by default it's
normal, meaning that the colors don't interact.

682
00:58:22,520 --> 00:58:28,510
But I can change it to something like plus,
multiply, you know, color dodge or difference

683
00:58:28,510 --> 00:58:32,630
and have various effects, and those are exactly
the ones that you would find in graphic packages

684
00:58:32,630 --> 00:58:34,359
today.
[ APPLAUSE ]

685
00:58:34,359 --> 00:58:41,359
>>Vincent Hardy: Thank you. So, so far we've
proposed all this and worked with the community,

686
00:58:47,400 --> 00:58:54,359
the working groups in (inaudible) to bring
this to CSS. We're working on possibly contributing

687
00:58:54,359 --> 00:59:00,210
this or proposing this for canvas as well,
and we've done a prototype of this I'll show

688
00:59:00,210 --> 00:59:07,210
quickly. It's in -- this is really blending
edge prototype we've done in FireFox, nicely

689
00:59:07,450 --> 00:59:14,180
build in FireFox, and what you see is basically
the same concept in canvas. At the bottom

690
00:59:14,180 --> 00:59:21,180
of the screen here, we have the -- the code.
I'm drawing two images, and the first one

691
00:59:22,480 --> 00:59:27,790
is the background, which is a visual canvas,
then I change the compositing operation to

692
00:59:27,790 --> 00:59:34,790
be an overlay -- sorry, a multiply mode, blend
mode, and I then draw this kind of colorful

693
00:59:35,220 --> 00:59:40,220
graphics on top of it, and I get this better,
nicer integration with my background, so this

694
00:59:40,220 --> 00:59:45,030
is something that's, you know, again (inaudible)
but we're considering offering this property

695
00:59:45,030 --> 00:59:52,030
for different graphics model than canvas is.
All right, so, the things we talked about

696
00:59:52,590 --> 00:59:59,590
today is that the -- you know, the world of
the Web developers and of creators has been

697
01:00:00,320 --> 01:00:04,150
intersecting, you know, there's been features,
but there's not been that many of them in

698
01:00:04,150 --> 01:00:09,619
the past, and we're trying to increase that
intersection between the two so that there's

699
01:00:09,619 --> 01:00:15,430
a lot more happening on the Web and a lot
more features available to developers, so

700
01:00:15,430 --> 01:00:19,660
this is really the area we're focusing on
now is, you know, trying to make this area

701
01:00:19,660 --> 01:00:26,660
larger and try to provide more tools for this
area, because we believe that if we do this,

702
01:00:27,670 --> 01:00:32,740
we'll have a lot more exclusivity on the platform,
meaning that you can express a lot more in

703
01:00:32,740 --> 01:00:39,740
the markup in your CSS, or your HTML, that
will make everybody more creative, and we

704
01:00:40,270 --> 01:00:46,960
think there's an opportunity for a new generation
of tools and new, you know, new ways of interacting

705
01:00:46,960 --> 01:00:51,880
between creators and developers. So thank
you very much for your attention. And if you

706
01:00:51,880 --> 01:00:57,700
have questions, we are probably going to be
able to take one or two, but we can also talk

707
01:00:57,700 --> 01:00:59,710
after the end of the sessions. Thank you very
much.

708
01:00:59,710 --> 01:00:59,960
[ Applause ]

