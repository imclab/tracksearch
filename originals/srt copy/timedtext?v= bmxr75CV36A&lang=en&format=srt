1
00:00:02,260 --> 00:00:05,980
Hi, I'm Raf.
I'm a programmer working on the Google Chrome

2
00:00:05,980 --> 00:00:09,210
extension system.
I'm here to talk about the design of the APIs

3
00:00:09,210 --> 00:00:14,519
that you'll use in creating your extension.
One goal in the design of the extensions system

4
00:00:14,519 --> 00:00:18,260
is that programming extensions should be just
like programming web pages.

5
00:00:18,260 --> 00:00:23,410
So as you'd expect, you'll be programming
in JavaScript which runs inside web pages.

6
00:00:23,410 --> 00:00:28,320
Many things your extension will want to do,
you can accomplish with existing web APIs.

7
00:00:28,320 --> 00:00:32,369
Want it to talk to a server?
Use XmlHttpRequest.

8
00:00:32,369 --> 00:00:37,670
Want it to persist some data?
Use cookies, LocalStorage, or HTML5 Databases.

9
00:00:37,670 --> 00:00:40,079
Want it to display a nicely designed options
page?

10
00:00:40,079 --> 00:00:45,859
Use HTML and Cascading Style Sheets.
However, Google Chrome also exposes APIs that

11
00:00:45,859 --> 00:00:51,149
only extension code can access. We've tried
to make these APIs feel as much like web platform

12
00:00:51,149 --> 00:00:54,569
APIs as possible.
Let's start with an example:

13
00:00:54,569 --> 00:00:58,659
This is code from a simple extension which
displays a browser action icon and when the

14
00:00:58,659 --> 00:01:03,170
user clicks on it, it opens up a web page
which is packaged within the extension.

15
00:01:03,170 --> 00:01:06,760
Already we see a few key aspects of the extension
APIs.

16
00:01:06,760 --> 00:01:11,790
First, you can identify all the extension
calls because they exist in the "chrome" namespace.

17
00:01:11,790 --> 00:01:15,800
"chrome" is a global object to which all extension
APIs are bound.

18
00:01:15,800 --> 00:01:20,360
The Google Chrome extensions APIs are only
visible to extension code and are broken down

19
00:01:20,360 --> 00:01:25,010
into modules.
Here we are using the "browserAction", "tabs",

20
00:01:25,010 --> 00:01:30,350
and "extension" modules.
chrome.browserAction.onClicked is an event

21
00:01:30,350 --> 00:01:35,250
which can register listeners who act on something
interesting that happens -- in this case,

22
00:01:35,250 --> 00:01:39,910
the user clicking the browserAction icon.
Most modules expose events and they all have

23
00:01:39,910 --> 00:01:44,250
the same form - which allows for the addition
and removal of listeners.

24
00:01:44,250 --> 00:01:49,810
Now, let's look at the call to chrome.extension.getUrl().
This is an example of a synchronous function

25
00:01:49,810 --> 00:01:55,000
call -- meaning that it does it's thing immediately
and returns a value to the calling code.

26
00:01:55,000 --> 00:02:00,409
In this case, it's constructing a URL which
the browser can use to navigate to a resource

27
00:02:00,409 --> 00:02:05,250
which is within your extension.
Some API calls are synchronous, but many are

28
00:02:05,250 --> 00:02:07,180
asynchronous.
Let's take a look at another example:

29
00:02:07,180 --> 00:02:12,109
Here, we are asking Google Chrome to modify
one of the userâ€™s bookmarks by modifying

30
00:02:12,109 --> 00:02:15,310
its title.
This call is asynchronous -- meaning that

31
00:02:15,310 --> 00:02:19,019
the code that makes the call will continue
executing and the function you provide as

32
00:02:19,019 --> 00:02:23,519
a callback will be run sometime later -- and
which point your code will know that the bookmark

33
00:02:23,519 --> 00:02:26,889
has been updated.
The reason why this call is asynchronous has

34
00:02:26,889 --> 00:02:32,769
to do with Google Chrome's multi-process architecture.
Web pages and JavaScript run in processes

35
00:02:32,769 --> 00:02:36,620
which are not only separate from each other,
but also from the main browser process which

36
00:02:36,620 --> 00:02:40,739
alone has the ability to do things like read
 & write to the local file system.

37
00:02:40,739 --> 00:02:44,609
This is an important security and stability
feature for Google Chrome.

38
00:02:44,609 --> 00:02:48,499
If calls like this were synchronous, your
extension would have to stop everything and

39
00:02:48,499 --> 00:02:52,969
wait for the browser process to respond to
the request, all the while the user may be

40
00:02:52,969 --> 00:02:57,510
trying to interact with the UI of your extension
which has become unresponsive.

41
00:02:57,510 --> 00:03:02,329
Using asynchronous APIs is more challenging,
but it's in the service of the best user experience

42
00:03:02,329 --> 00:03:05,349
possible, and it won't take long to get the
hang of it.

43
00:03:05,349 --> 00:03:09,319
Just remember that it won't be uncommon to
write code like this

44
00:03:09,319 --> 00:03:14,409
rather than this
There's one more interesting thing about this

45
00:03:14,409 --> 00:03:17,469
example:
There's a bug in it that the extensions system

46
00:03:17,469 --> 00:03:20,870
is going to help us find.
If you look at the documentation for this

47
00:03:20,870 --> 00:03:27,379
call you can see that the id that chrome.bookmarks.update()
takes as it's first argument is a string,

48
00:03:27,379 --> 00:03:32,739
not an integer. When this call executes, the
extension system will throw an exception pointing

49
00:03:32,739 --> 00:03:38,180
out the error.
The extensions API uses an implementation

50
00:03:38,180 --> 00:03:43,959
of JSON schema which declares the name, type,
number and position of its function arguments.

51
00:03:43,959 --> 00:03:48,239
If you call it with the wrong types or wrong
number of arguments, it'll complain.

52
00:03:48,239 --> 00:03:53,400
Additionally, the extension documentation
is generated from exactly the same JSON schema

53
00:03:53,400 --> 00:03:57,150
that Google Chrome uses to create it's internal
API.

54
00:03:57,150 --> 00:04:01,559
So, for instance, if you are developing using
the beta channel of Google Chrome, you can

55
00:04:01,559 --> 00:04:08,559
be assured that the docs at http://code.google.com/chrome/extensions/beta
are accurate.

56
00:04:09,239 --> 00:04:14,629
In creating the initial release of the extensions
we focused on creating a robust, secure and

57
00:04:14,629 --> 00:04:19,330
easy to use system that included a small set
of APIs that we felt would allow many useful

58
00:04:19,330 --> 00:04:23,420
extensions to be made.
It initially includes interacting with browser

59
00:04:23,420 --> 00:04:28,010
windows, tabs & bookmarks, but we expect to
be adding more soon.

60
00:04:28,010 --> 00:04:32,140
Have fun working with the Google Chrome extensions
and please let us know what we can do to make

61
00:04:32,140 --> 00:04:35,350
your extensions better by giving us feedback
at our discussion group.

