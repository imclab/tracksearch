1
00:00:00,000 --> 00:00:03,090
[MUSIC PLAYING]

2
00:00:03,090 --> 00:00:06,150
MALE SPEAKER 1: Shanghai GDG
is a very interesting

3
00:00:06,150 --> 00:00:07,110
developer community.

4
00:00:07,110 --> 00:00:07,950
FEMALE SPEAKER 1: I'm
glad somebody

5
00:00:07,950 --> 00:00:09,230
has asked this question.

6
00:00:09,230 --> 00:00:10,370
MALE SPEAKER 2: This is where
the magic happens.

7
00:00:10,370 --> 00:00:11,680
FEMALE SPEAKER 2:This is
primarily a question and

8
00:00:11,680 --> 00:00:13,510
answer show, so if any
of you out there

9
00:00:13,510 --> 00:00:14,760
would like to ask questions.

10
00:00:14,760 --> 00:00:20,910

11
00:00:20,910 --> 00:00:24,020
ILYA GRIGORIK: Hello everyone,
and welcome to our Make The

12
00:00:24,020 --> 00:00:27,720
Web Fast series here at Google
Developers Live.

13
00:00:27,720 --> 00:00:31,980
Today, we'll be talking about
the HTTP Archive data formats.

14
00:00:31,980 --> 00:00:36,540
And boy, do we have a loaded
episode of tools, tips, and

15
00:00:36,540 --> 00:00:37,800
tricks for you.

16
00:00:37,800 --> 00:00:40,720
But before we get to that,
my name is Ilya Grigorik.

17
00:00:40,720 --> 00:00:43,280
I'm a developer advocate for
the Make The Web Fast team

18
00:00:43,280 --> 00:00:44,520
here at Google.

19
00:00:44,520 --> 00:00:45,160
PETER LUBBERS: I'm
Peter Lubbers.

20
00:00:45,160 --> 00:00:47,760
I'm a programs manager in the
Chrome Developer relations

21
00:00:47,760 --> 00:00:53,022
team, and really excited about
a lot of the tools that--

22
00:00:53,022 --> 00:00:56,460
or the ability that Chrome has
to track a lot of these things

23
00:00:56,460 --> 00:00:58,290
to make the web faster.

24
00:00:58,290 --> 00:00:59,690
Today we're going to
talk about this

25
00:00:59,690 --> 00:01:01,270
HTTP Archive format.

26
00:01:01,270 --> 00:01:04,480
There's a lot of cool features
in here, probably a lot of

27
00:01:04,480 --> 00:01:07,260
things that you may not
even have thought of.

28
00:01:07,260 --> 00:01:07,920
ILYA GRIGORIK: Yeah, exactly.

29
00:01:07,920 --> 00:01:11,590
So actually, Peter, yesterday we
got together to do a quick

30
00:01:11,590 --> 00:01:14,020
run-through through all the
different demos that we want

31
00:01:14,020 --> 00:01:14,440
to go through.

32
00:01:14,440 --> 00:01:15,090
And it took us what?

33
00:01:15,090 --> 00:01:17,350
An hour and a half or an
hour and 40 minutes?

34
00:01:17,350 --> 00:01:18,290
PETER LUBBERS: And
we discovered

35
00:01:18,290 --> 00:01:19,970
even some new stuff.

36
00:01:19,970 --> 00:01:22,220
ILYA GRIGORIK: So tons
and tons of stuff.

37
00:01:22,220 --> 00:01:24,470
Just a little bit of logistics
up front, we're going to do a

38
00:01:24,470 --> 00:01:25,190
lot of demos.

39
00:01:25,190 --> 00:01:30,420
So don't worry about trying to
capture links or figure out

40
00:01:30,420 --> 00:01:32,250
which specific tool we're
talking about.

41
00:01:32,250 --> 00:01:35,510
We'll actually share a URL at
the end where you can find all

42
00:01:35,510 --> 00:01:36,530
of the resources.

43
00:01:36,530 --> 00:01:39,900
So just kind of sit back and
watch and hopefully learn a

44
00:01:39,900 --> 00:01:40,520
few new things.

45
00:01:40,520 --> 00:01:43,650
Because we certainly learned a
lot of new tools just through

46
00:01:43,650 --> 00:01:45,240
researching.

47
00:01:45,240 --> 00:01:48,290
And I think the reason for
this is one of the most

48
00:01:48,290 --> 00:01:50,980
important things, in my
opinion at least, for

49
00:01:50,980 --> 00:01:54,150
performance optimization,
working on performance in

50
00:01:54,150 --> 00:01:57,150
general, is having good
instrumentation.

51
00:01:57,150 --> 00:01:59,360
So a few weeks back, we were
actually talking with Justin

52
00:01:59,360 --> 00:02:02,460
Cutroni from the Google
Analytics team about how you

53
00:02:02,460 --> 00:02:05,790
can use navigation timing to
capture performance data out

54
00:02:05,790 --> 00:02:10,240
of the browser for things like
network timing, JavaScript,

55
00:02:10,240 --> 00:02:12,430
web browser performance,
and all the rest.

56
00:02:12,430 --> 00:02:14,960
And today I think we're going
to go a little bit deeper.

57
00:02:14,960 --> 00:02:19,250
We are going to look at a tool
that a lot of us use, and we

58
00:02:19,250 --> 00:02:22,450
don't necessarily think about
how the data underneath is

59
00:02:22,450 --> 00:02:24,680
structured and how we can reuse
it in different ways.

60
00:02:24,680 --> 00:02:26,940
And the tool I'm talking
about is packet

61
00:02:26,940 --> 00:02:28,720
sniffers or HTTP monitors.

62
00:02:28,720 --> 00:02:30,720
Now, you guys probably don't
think about it that way

63
00:02:30,720 --> 00:02:34,270
because most of us are used to
actually thinking about it as

64
00:02:34,270 --> 00:02:36,400
Chrome Developer Tools has a
built-in tool which is a

65
00:02:36,400 --> 00:02:38,905
network panel, which is actually
a packet sniffer, or

66
00:02:38,905 --> 00:02:41,150
an HTTP monitor.

67
00:02:41,150 --> 00:02:44,450
So I'm going to share my screen
here for you guys.

68
00:02:44,450 --> 00:02:46,290
So I'm looking at the
Google Developers

69
00:02:46,290 --> 00:02:48,010
Live page right here.

70
00:02:48,010 --> 00:02:51,300
And I'm going to open the Chrome
Developer tools and

71
00:02:51,300 --> 00:02:52,640
just reload this page.

72
00:02:52,640 --> 00:02:54,270
So I have the network
tab open.

73
00:02:54,270 --> 00:02:57,750
And if the demo gods are with
us, the page will reload.

74
00:02:57,750 --> 00:03:00,715
There it goes.

75
00:03:00,715 --> 00:03:01,940
PETER LUBBERS: We're going
to need their help today.

76
00:03:01,940 --> 00:03:02,760
ILYA GRIGORIK: Yes, exactly.

77
00:03:02,760 --> 00:03:05,350
So speaking of making the web
fast, this page is taking a

78
00:03:05,350 --> 00:03:07,190
long, long time to load.

79
00:03:07,190 --> 00:03:08,110
Here we go.

80
00:03:08,110 --> 00:03:10,690
So now we have this network
graph in here.

81
00:03:10,690 --> 00:03:14,650
And this is an invaluable tool
for debugging what's happening

82
00:03:14,650 --> 00:03:15,120
with the site.

83
00:03:15,120 --> 00:03:17,270
So we can actually see that
it took a half a second to

84
00:03:17,270 --> 00:03:19,930
connect to this page and
all kinds of other

85
00:03:19,930 --> 00:03:21,430
data within this tool.

86
00:03:21,430 --> 00:03:23,230
So we can click on
each resource.

87
00:03:23,230 --> 00:03:26,220
Now, this is very,
very useful.

88
00:03:26,220 --> 00:03:29,160
But what if you could actually
export this data?

89
00:03:29,160 --> 00:03:34,840
Or maybe to put it another way,
what if we could actually

90
00:03:34,840 --> 00:03:37,130
take this data out of this tool
and maybe import it into

91
00:03:37,130 --> 00:03:38,090
another tool?

92
00:03:38,090 --> 00:03:39,670
You can do a lot of interesting
things with that

93
00:03:39,670 --> 00:03:40,970
type of data.

94
00:03:40,970 --> 00:03:43,390
PETER LUBBERS: Up until now, the
only way to really do that

95
00:03:43,390 --> 00:03:45,200
was to take a screenshot.

96
00:03:45,200 --> 00:03:46,440
ILYA GRIGORIK: Right, yeah.

97
00:03:46,440 --> 00:03:48,790
PETER LUBBERS: Maybe annotate
the screenshot, put a few

98
00:03:48,790 --> 00:03:51,500
arrows, like look at this one or
look at the timing on this.

99
00:03:51,500 --> 00:03:53,120
That's obviously not
a great way.

100
00:03:53,120 --> 00:03:53,950
ILYA GRIGORIK: So I've
done exactly

101
00:03:53,950 --> 00:03:55,790
this, and this is terrible.

102
00:03:55,790 --> 00:03:56,610
I would find a problem.

103
00:03:56,610 --> 00:04:00,410
I'm like, oh, I need to email
Peter about this.

104
00:04:00,410 --> 00:04:02,410
So I take a screenshot, annotate
it with like, OK,

105
00:04:02,410 --> 00:04:03,460
here's our problem.

106
00:04:03,460 --> 00:04:05,320
And then I send it over, and
then I get a question back

107
00:04:05,320 --> 00:04:08,070
like, OK, that's cool, but
what was the status code?

108
00:04:08,070 --> 00:04:08,940
Or what were the headers?

109
00:04:08,940 --> 00:04:09,590
And I'm like, well--

110
00:04:09,590 --> 00:04:10,140
PETER LUBBERS: Lost it.

111
00:04:10,140 --> 00:04:11,820
ILYA GRIGORIK: Grrrr.

112
00:04:11,820 --> 00:04:13,710
We lost all the data because we
froze it in the screenshot.

113
00:04:13,710 --> 00:04:16,110
So it would be really nice if we
could actually export this

114
00:04:16,110 --> 00:04:20,279
data with all of its fidelity,
all of the data that's

115
00:04:20,279 --> 00:04:22,754
actually hidden within here,
and then reuse it in a

116
00:04:22,754 --> 00:04:23,640
different way.

117
00:04:23,640 --> 00:04:26,800
So that's precisely what
the HTTP Archive

118
00:04:26,800 --> 00:04:28,320
data format is for.

119
00:04:28,320 --> 00:04:29,850
So I'm going to show
you guys this.

120
00:04:29,850 --> 00:04:31,790
We're not going to go into
details of the spec, but there

121
00:04:31,790 --> 00:04:32,640
is a spec for it.

122
00:04:32,640 --> 00:04:36,130
So the HTTP Archive, the
extension is HAR, so hence,

123
00:04:36,130 --> 00:04:37,460
the HAR show.

124
00:04:37,460 --> 00:04:38,860
Ha, ha.

125
00:04:38,860 --> 00:04:43,440
And the HAR data format itself
is just a simple JSON schema,

126
00:04:43,440 --> 00:04:46,510
which contains all the metadata
that you would need

127
00:04:46,510 --> 00:04:49,810
to reconstruct the network
waterfall.

128
00:04:49,810 --> 00:04:51,870
So you can think of it as just
an underlying data of the

129
00:04:51,870 --> 00:04:54,000
network pane in your Chrome
Developer Tools or another

130
00:04:54,000 --> 00:04:55,570
HTTP monitoring tool.

131
00:04:55,570 --> 00:04:57,200
So you can see that it contains
a lot of different

132
00:04:57,200 --> 00:05:00,140
data, like which browser, which
pages you accessed.

133
00:05:00,140 --> 00:05:02,920
And entries are the individual
requests that the browser

134
00:05:02,920 --> 00:05:05,810
makes for all of the resources
on a page.

135
00:05:05,810 --> 00:05:09,260
So I actually have
a live file here.

136
00:05:09,260 --> 00:05:11,010
So this is a long file.

137
00:05:11,010 --> 00:05:12,160
I'm not going to go
through in detail.

138
00:05:12,160 --> 00:05:15,560
But I just want to show you guys
how does this thing look.

139
00:05:15,560 --> 00:05:16,620
So what I was doing--

140
00:05:16,620 --> 00:05:17,840
PETER LUBBERS: You're doing
JSON format, right?

141
00:05:17,840 --> 00:05:18,240
ILYA GRIGORIK: Exactly.

142
00:05:18,240 --> 00:05:20,470
So it's very simple
to create and

143
00:05:20,470 --> 00:05:21,510
consume, which is actually--

144
00:05:21,510 --> 00:05:24,215
we'll see later-- is very,
very important.

145
00:05:24,215 --> 00:05:26,240
So I'll just show you
guys what this data

146
00:05:26,240 --> 00:05:27,440
actually looks like.

147
00:05:27,440 --> 00:05:31,650
So here I'm trying to access an
archives page, so I typed

148
00:05:31,650 --> 00:05:34,650
in igvita.com/archives.

149
00:05:34,650 --> 00:05:36,390
So let me close that.

150
00:05:36,390 --> 00:05:37,740
Now we're looking
at the entries.

151
00:05:37,740 --> 00:05:39,980
So we see the first entry, which
is the actual request.

152
00:05:39,980 --> 00:05:42,300
We see that the browser is
sending a get request for this

153
00:05:42,300 --> 00:05:43,680
actual page.

154
00:05:43,680 --> 00:05:45,330
And now, all of a sudden,
look at this.

155
00:05:45,330 --> 00:05:47,260
You have all the header
information.

156
00:05:47,260 --> 00:05:51,160
Every header that the browser
appends is here, even cookies.

157
00:05:51,160 --> 00:05:53,460
I probably don't want
to show you that.

158
00:05:53,460 --> 00:05:56,030
And then it has the response,
which is, OK, so

159
00:05:56,030 --> 00:05:57,540
it's doing a redirect.

160
00:05:57,540 --> 00:05:59,920
And it will actually
kick me out.

161
00:05:59,920 --> 00:06:00,770
So let me close this.

162
00:06:00,770 --> 00:06:03,650
And we can look at
the next request.

163
00:06:03,650 --> 00:06:06,230
Here is the same page asking
for a Google web font.

164
00:06:06,230 --> 00:06:10,470
So all of this performance
timing data, all of the header

165
00:06:10,470 --> 00:06:13,650
data is all captured here,
which is very, very

166
00:06:13,650 --> 00:06:15,780
convenient.

167
00:06:15,780 --> 00:06:17,710
PETER LUBBERS: Tell the audience
a little bit more

168
00:06:17,710 --> 00:06:21,565
about the httparchive.org site,
and then how that came

169
00:06:21,565 --> 00:06:24,030
about to really set
the context here.

170
00:06:24,030 --> 00:06:27,420
ILYA GRIGORIK: A good example of
how you could use this data

171
00:06:27,420 --> 00:06:29,990
is actually httparchive.org.

172
00:06:29,990 --> 00:06:33,250
So the HTTP Archive format and
httparchive.org are actually

173
00:06:33,250 --> 00:06:33,730
two separate things.

174
00:06:33,730 --> 00:06:37,280
They just happen to share the
same name, confusingly enough.

175
00:06:37,280 --> 00:06:40,040
But they actually have
a common history.

176
00:06:40,040 --> 00:06:42,530
The idea behind HTTP Archive,
you guys may be familiar with

177
00:06:42,530 --> 00:06:45,480
the Internet Archive, which
continuously crawls the web

178
00:06:45,480 --> 00:06:48,360
and takes snapshots
of certain pages.

179
00:06:48,360 --> 00:06:50,470
So actually, you can rewind
history, and you can say, I

180
00:06:50,470 --> 00:06:53,290
want to see this page how
it looked back in 2008.

181
00:06:53,290 --> 00:06:56,420
So think of HTTP Archive as a
very similar tool, except that

182
00:06:56,420 --> 00:06:59,130
we don't actually care for what
the pages looked like.

183
00:06:59,130 --> 00:07:01,340
We care about how
do they perform.

184
00:07:01,340 --> 00:07:05,000
So things like let's capture how
many JavaScript files were

185
00:07:05,000 --> 00:07:07,540
on a page, what was the total
size of the page, how many

186
00:07:07,540 --> 00:07:10,320
images did you fetch, all
of that metadata.

187
00:07:10,320 --> 00:07:13,150
And this is actually an
important point for the HTTP

188
00:07:13,150 --> 00:07:15,380
Archive format.

189
00:07:15,380 --> 00:07:19,420
When you export it, by default,
it won't export the

190
00:07:19,420 --> 00:07:20,920
body of the request.

191
00:07:20,920 --> 00:07:23,050
So if you fetch a 1-megabyte
image, we're not going to

192
00:07:23,050 --> 00:07:23,600
include that.

193
00:07:23,600 --> 00:07:27,050
We just include the
actual metadata.

194
00:07:27,050 --> 00:07:29,090
Because that's all we need
for the waterfall.

195
00:07:29,090 --> 00:07:30,700
So what can you do this?

196
00:07:30,700 --> 00:07:35,020
Well, the idea behind HTTP
Archive is that we can crawl a

197
00:07:35,020 --> 00:07:35,700
lot of sites.

198
00:07:35,700 --> 00:07:39,710
So HTTP Archive actually does
about 100,000 sites right now

199
00:07:39,710 --> 00:07:43,300
based on the-- it elects the
top, I guess, 100,000.

200
00:07:43,300 --> 00:07:48,390
And it aggregates all of these
HTTP archives, so all of that

201
00:07:48,390 --> 00:07:52,090
metadata for all the network
waterfalls, and then extracts

202
00:07:52,090 --> 00:07:54,770
meta-trends for things like are
the pages growing in size,

203
00:07:54,770 --> 00:07:55,400
or what's happening.

204
00:07:55,400 --> 00:07:56,980
So let me show you this.

205
00:07:56,980 --> 00:07:58,230
We'll go to trends.

206
00:07:58,230 --> 00:08:00,790

207
00:08:00,790 --> 00:08:03,700
And it'll take us
one second here.

208
00:08:03,700 --> 00:08:07,520
And you can see that we're
analyzing about 200,000 sites

209
00:08:07,520 --> 00:08:08,690
now, so it's growing.

210
00:08:08,690 --> 00:08:11,260
And we can see total transfer
size and total request.

211
00:08:11,260 --> 00:08:12,510
So it's a little bit small.

212
00:08:12,510 --> 00:08:17,140
But an average page within those
200,000 sites today is

213
00:08:17,140 --> 00:08:21,970
over 1 megabyte in size and
takes over 85 requests.

214
00:08:21,970 --> 00:08:23,910
That's shocking.

215
00:08:23,910 --> 00:08:26,120
I see this number all the time,
but it still shocks me

216
00:08:26,120 --> 00:08:27,960
every time I see it.

217
00:08:27,960 --> 00:08:30,650
The HTML part itself takes
48 kilobytes, right?

218
00:08:30,650 --> 00:08:33,820
So all of this metadata is just
aggregated between all

219
00:08:33,820 --> 00:08:34,760
the different runs--

220
00:08:34,760 --> 00:08:35,530
PETER LUBBERS: From HAR files.

221
00:08:35,530 --> 00:08:36,230
ILYA GRIGORIK: From HAR files.

222
00:08:36,230 --> 00:08:36,830
PETER LUBBERS: Yeah, exactly.

223
00:08:36,830 --> 00:08:39,200
ILYA GRIGORIK: So this is a
really good example of we've

224
00:08:39,200 --> 00:08:41,400
accumulated many
of these files.

225
00:08:41,400 --> 00:08:42,620
We have them over time.

226
00:08:42,620 --> 00:08:44,560
And now we're just collapsing
them together to

227
00:08:44,560 --> 00:08:46,760
create these formats--

228
00:08:46,760 --> 00:08:49,990
sorry, not formats, to create
these graphs to show you

229
00:08:49,990 --> 00:08:51,790
general trends on the web.

230
00:08:51,790 --> 00:08:53,890
And you can definitely see that
the pages are growing in

231
00:08:53,890 --> 00:08:57,540
size, more requests,
so on and so forth.

232
00:08:57,540 --> 00:09:00,140
PETER LUBBERS: Let me show you
something in the Chrome

233
00:09:00,140 --> 00:09:02,330
Developer tools that
you can use.

234
00:09:02,330 --> 00:09:05,580
Maybe some people are not
aware of that yet.

235
00:09:05,580 --> 00:09:11,430
Let's open it up again and
then reload the page.

236
00:09:11,430 --> 00:09:14,480
PETER LUBBERS: Now we get a
network waterfall here.

237
00:09:14,480 --> 00:09:16,270
PETER LUBBERS: So once
you get that--

238
00:09:16,270 --> 00:09:19,130

239
00:09:19,130 --> 00:09:22,110
so now you can actually
just right click on

240
00:09:22,110 --> 00:09:23,690
the left side there.

241
00:09:23,690 --> 00:09:24,930
ILYA GRIGORIK: Just
anywhere in here?

242
00:09:24,930 --> 00:09:25,830
PETER LUBBERS: Just
anywhere, yeah.

243
00:09:25,830 --> 00:09:27,650
And notice the option here.

244
00:09:27,650 --> 00:09:29,380
We have actually two options.

245
00:09:29,380 --> 00:09:32,940
And you can also do this
in Firefox, I believe.

246
00:09:32,940 --> 00:09:34,570
Copy entry as HAR.

247
00:09:34,570 --> 00:09:37,790
You can click on an individual
file and save the HAR

248
00:09:37,790 --> 00:09:38,230
information.

249
00:09:38,230 --> 00:09:39,865
ILYA GRIGORIK: So if I clicked
on style.css, it

250
00:09:39,865 --> 00:09:41,500
would just grab that?

251
00:09:41,500 --> 00:09:42,860
PETER LUBBERS: Just
the style.css.

252
00:09:42,860 --> 00:09:45,420
And of course, typically I
think you would be more

253
00:09:45,420 --> 00:09:47,510
interested in the entire page
with all its resources.

254
00:09:47,510 --> 00:09:52,840
So, copy all as HAR would
copy the HAR JSON

255
00:09:52,840 --> 00:09:54,910
directly to the clipboard.

256
00:09:54,910 --> 00:09:56,960
Now, if you want to save it as
a file, there is an option

257
00:09:56,960 --> 00:09:58,520
there to save entry as HAR.

258
00:09:58,520 --> 00:09:59,800
And that just saves
it as a file.

259
00:09:59,800 --> 00:10:02,440
So yeah, let's go ahead and
do that at the moment.

260
00:10:02,440 --> 00:10:04,940
ILYA GRIGORIK: If I just copy
this and if I go into my text

261
00:10:04,940 --> 00:10:09,550
editor and just create a
new file here, so it's

262
00:10:09,550 --> 00:10:12,780
5,000 lines of JSON.

263
00:10:12,780 --> 00:10:16,790
And this is basically all the
metadata that's inside of this

264
00:10:16,790 --> 00:10:17,750
network waterfall.

265
00:10:17,750 --> 00:10:19,810
PETER LUBBERS: So with that
data you could effectively

266
00:10:19,810 --> 00:10:22,330
reconstruct the network panel.

267
00:10:22,330 --> 00:10:24,700
We'll have an example
of that later.

268
00:10:24,700 --> 00:10:28,400
But also you can pull out
specific bits and

269
00:10:28,400 --> 00:10:29,590
pieces that you want.

270
00:10:29,590 --> 00:10:32,520
You want to see a specific--

271
00:10:32,520 --> 00:10:36,470
the size of the request
or the headers.

272
00:10:36,470 --> 00:10:38,710
ILYA GRIGORIK: Actually, this
is worth pausing on.

273
00:10:38,710 --> 00:10:41,900
Because previously, I would
just take a snapshot or a

274
00:10:41,900 --> 00:10:44,720
screenshot, annotate it,
and send it over.

275
00:10:44,720 --> 00:10:48,390
Now, I can right click on this,
copy, and maybe if I'm

276
00:10:48,390 --> 00:10:50,220
making a bug report,
I can actually

277
00:10:50,220 --> 00:10:52,860
attach the entire trace.

278
00:10:52,860 --> 00:10:56,410
And then the developer has full
metadata about everything

279
00:10:56,410 --> 00:10:57,680
that's happened in
the browser.

280
00:10:57,680 --> 00:10:58,840
PETER LUBBERS: You could
still send me the

281
00:10:58,840 --> 00:10:59,550
screenshot as well.

282
00:10:59,550 --> 00:11:01,790
ILYA GRIGORIK: OK, sure.

283
00:11:01,790 --> 00:11:03,070
PETER LUBBERS: But we can
reconstruct the screenshot,

284
00:11:03,070 --> 00:11:06,240
effectively, with that data.

285
00:11:06,240 --> 00:11:07,860
So that's cool.

286
00:11:07,860 --> 00:11:08,480
ILYA GRIGORIK: So that's
interesting.

287
00:11:08,480 --> 00:11:10,060
That actually brings
up a good point.

288
00:11:10,060 --> 00:11:14,330
So OK, great, we took this
very nice visual

289
00:11:14,330 --> 00:11:15,560
representation.

290
00:11:15,560 --> 00:11:19,030
I copied it into a 5,000 line
JSON file which is very

291
00:11:19,030 --> 00:11:19,700
useful, but--

292
00:11:19,700 --> 00:11:20,680
PETER LUBBERS: You've got
to deal with it now.

293
00:11:20,680 --> 00:11:21,140
ILYA GRIGORIK: Right.

294
00:11:21,140 --> 00:11:25,170
If I get this 5,000 line
JSON file, boy.

295
00:11:25,170 --> 00:11:25,910
PETER LUBBERS: You're
going to need some

296
00:11:25,910 --> 00:11:28,280
visualization of that data.

297
00:11:28,280 --> 00:11:30,860
And fortunately, there's
tons of tools that

298
00:11:30,860 --> 00:11:32,790
can help with this.

299
00:11:32,790 --> 00:11:34,940
Let's take a look at one.

300
00:11:34,940 --> 00:11:39,030
Probably the best one for that
at the moment is the HAR

301
00:11:39,030 --> 00:11:40,335
viewer that you've got here.

302
00:11:40,335 --> 00:11:43,930
It's an open source project.

303
00:11:43,930 --> 00:11:46,290
You can just open
it up on the--

304
00:11:46,290 --> 00:11:47,900
ILYA GRIGORIK: So it
looks like actually

305
00:11:47,900 --> 00:11:49,450
I can run it myself.

306
00:11:49,450 --> 00:11:51,010
So we can just embed
it on any page.

307
00:11:51,010 --> 00:11:52,950
So it's PHP and JavaScript,
which is really cool.

308
00:11:52,950 --> 00:11:54,710
But they also have an online
demo, so we're

309
00:11:54,710 --> 00:11:55,420
going to try that.

310
00:11:55,420 --> 00:11:57,360
I actually have it
preopened here.

311
00:11:57,360 --> 00:11:59,600
So this is--

312
00:11:59,600 --> 00:12:01,800
what do I do here?

313
00:12:01,800 --> 00:12:03,500
PETER LUBBERS: Basically,
remember how you copied the

314
00:12:03,500 --> 00:12:04,740
HAR information stuff?

315
00:12:04,740 --> 00:12:05,560
You could obviously--

316
00:12:05,560 --> 00:12:07,710
actually, this supports
drag and drop as well.

317
00:12:07,710 --> 00:12:10,170
You could take the HAR file and
drag it onto this page.

318
00:12:10,170 --> 00:12:11,805
But for now, you have it in
the clipboard already.

319
00:12:11,805 --> 00:12:13,700
So go ahead and paste
it in there.

320
00:12:13,700 --> 00:12:15,850
ILYA GRIGORIK: So I'm going to
paste the entire 5,000 lines

321
00:12:15,850 --> 00:12:18,890
of JSON in here.

322
00:12:18,890 --> 00:12:19,680
PETER LUBBERS: Keep your
fingers crossed.

323
00:12:19,680 --> 00:12:20,370
And there we go.

324
00:12:20,370 --> 00:12:21,780
ILYA GRIGORIK: Wow.

325
00:12:21,780 --> 00:12:22,210
Look at that.

326
00:12:22,210 --> 00:12:23,830
PETER LUBBERS: Pretty
informative as well.

327
00:12:23,830 --> 00:12:25,610
ILYA GRIGORIK: So that
took no time.

328
00:12:25,610 --> 00:12:26,370
And look at this.

329
00:12:26,370 --> 00:12:28,190
Now, I have--

330
00:12:28,190 --> 00:12:30,340
actually no, this is a
little bit different.

331
00:12:30,340 --> 00:12:32,260
I think that's something
else on my clipboard.

332
00:12:32,260 --> 00:12:35,560
PETER LUBBERS: Well,
let's do it again.

333
00:12:35,560 --> 00:12:37,630
ILYA GRIGORIK: Well, it probably
doesn't even matter.

334
00:12:37,630 --> 00:12:38,980
PETER LUBBERS: So now
you get the whole

335
00:12:38,980 --> 00:12:42,370
visualization of all that data.

336
00:12:42,370 --> 00:12:44,690
ILYA GRIGORIK: Now that I have
this JSON file, I can go to

337
00:12:44,690 --> 00:12:48,240
this thing, paste it in, and
basically reconstruct exactly

338
00:12:48,240 --> 00:12:50,320
what happened in your browser.

339
00:12:50,320 --> 00:12:54,630
And the nice thing is, I still
have all the fidelity of all

340
00:12:54,630 --> 00:12:58,090
of the header information,
requests, the

341
00:12:58,090 --> 00:12:59,320
actual timing data.

342
00:12:59,320 --> 00:13:01,240
That actually gives you a little
bit more than Chrome

343
00:13:01,240 --> 00:13:05,960
Developer Tools, things like
these pie charts, where was

344
00:13:05,960 --> 00:13:06,630
the time spent.

345
00:13:06,630 --> 00:13:09,460
You can see that within this
session, we fetched--

346
00:13:09,460 --> 00:13:11,690
out of all the content that was
fetched, more than half

347
00:13:11,690 --> 00:13:14,490
was images, which is actually
pretty typical.

348
00:13:14,490 --> 00:13:16,080
So this is really nice.

349
00:13:16,080 --> 00:13:18,760
PETER LUBBERS: Then you can
compare it with other loads of

350
00:13:18,760 --> 00:13:23,950
your page or other sites and
see the trends over time.

351
00:13:23,950 --> 00:13:27,700
So actually, one thing I wanted
point out, if you can

352
00:13:27,700 --> 00:13:30,520
just jump back a moment to the
Chrome Developer Tools, one

353
00:13:30,520 --> 00:13:35,980
really cool thing that
I particularly like--

354
00:13:35,980 --> 00:13:38,340
if you, for example,
refresh this page.

355
00:13:38,340 --> 00:13:40,420
And let's go ahead and
do that a moment.

356
00:13:40,420 --> 00:13:41,790
So refresh the page.

357
00:13:41,790 --> 00:13:47,600
And you notice how in the
network panel it will reload

358
00:13:47,600 --> 00:13:48,850
everything.

359
00:13:48,850 --> 00:13:50,990

360
00:13:50,990 --> 00:13:53,370
Right now, it sort of wiped
out all of the previous

361
00:13:53,370 --> 00:13:56,200
information, and it's got the
new-- and that's typically

362
00:13:56,200 --> 00:13:57,580
what you want.

363
00:13:57,580 --> 00:14:00,570
But now if you want to
actually track--

364
00:14:00,570 --> 00:14:05,020
navigating from page to page
to page, you can hit the

365
00:14:05,020 --> 00:14:07,760
Record button on the bottom.

366
00:14:07,760 --> 00:14:09,200
ILYA GRIGORIK: I've often
wondered what

367
00:14:09,200 --> 00:14:10,100
that thing was for.

368
00:14:10,100 --> 00:14:11,740
PETER LUBBERS: So click that.

369
00:14:11,740 --> 00:14:15,350
And then why don't you go to
the trends page or stats.

370
00:14:15,350 --> 00:14:16,070
ILYA GRIGORIK: I think I'm
on the trends now,

371
00:14:16,070 --> 00:14:17,180
so I'll go to Stats.

372
00:14:17,180 --> 00:14:18,490
PETER LUBBERS: Click on Stats.

373
00:14:18,490 --> 00:14:20,480
And now let's click
on websites.

374
00:14:20,480 --> 00:14:22,260
ILYA GRIGORIK: Sure.

375
00:14:22,260 --> 00:14:24,610
PETER LUBBERS: And why don't we
just go finish it off with

376
00:14:24,610 --> 00:14:25,540
the About page.

377
00:14:25,540 --> 00:14:30,390
So basically what's happening
is the information is not

378
00:14:30,390 --> 00:14:31,030
thrown away.

379
00:14:31,030 --> 00:14:33,190
It's just added on.

380
00:14:33,190 --> 00:14:35,250
ILYA GRIGORIK: Let me stop the
recording here for a second.

381
00:14:35,250 --> 00:14:36,870
And now look at this timeline.

382
00:14:36,870 --> 00:14:39,050
It actually says 50 seconds.

383
00:14:39,050 --> 00:14:41,180
It's not that any one of those
pages took 50 seconds.

384
00:14:41,180 --> 00:14:45,840
It's just that the timeline
is appended across all the

385
00:14:45,840 --> 00:14:46,510
different sessions.

386
00:14:46,510 --> 00:14:48,350
PETER LUBBERS: It's a complete
trace of what you're renewing.

387
00:14:48,350 --> 00:14:48,940
ILYA GRIGORIK: That's
really cool.

388
00:14:48,940 --> 00:14:52,440
So now I can actually do a thing
like come to the Home

389
00:14:52,440 --> 00:14:56,700
page, press Record, go to Login
page, go to the Checkout

390
00:14:56,700 --> 00:14:59,330
cart, and record that
entire trace.

391
00:14:59,330 --> 00:15:00,770
PETER LUBBERS: So now actually,
you can go ahead and

392
00:15:00,770 --> 00:15:01,370
do it in a moment.

393
00:15:01,370 --> 00:15:03,720
There's an interesting
thing at the viewer.

394
00:15:03,720 --> 00:15:05,430
ILYA GRIGORIK: OK, so
let me copy this.

395
00:15:05,430 --> 00:15:09,580
So this is probably like
50,000 lines of JSON.

396
00:15:09,580 --> 00:15:10,610
And go to the--

397
00:15:10,610 --> 00:15:11,720
so let me hit Back.

398
00:15:11,720 --> 00:15:15,000
PETER LUBBERS: Back
to the Home page.

399
00:15:15,000 --> 00:15:16,540
ILYA GRIGORIK: Here's
our online demo.

400
00:15:16,540 --> 00:15:19,120
HAR Viewer online.

401
00:15:19,120 --> 00:15:20,360
Close some of these tabs.

402
00:15:20,360 --> 00:15:22,670
PETER LUBBERS: So we're going
to put it in there.

403
00:15:22,670 --> 00:15:25,380
And the nice thing is, if we hit
the Preview there, you'll

404
00:15:25,380 --> 00:15:27,940
see actually four pages.

405
00:15:27,940 --> 00:15:32,690
And you can actually in the top
part, even if just hover

406
00:15:32,690 --> 00:15:35,100
over them, you see a lot
of detail already.

407
00:15:35,100 --> 00:15:37,300
ILYA GRIGORIK: So then within
the session, we just recorded

408
00:15:37,300 --> 00:15:39,030
four different pages.

409
00:15:39,030 --> 00:15:42,650
And then for each page, we can
look at these pie charts.

410
00:15:42,650 --> 00:15:48,370
And we also have the full
waterfall chart for each one.

411
00:15:48,370 --> 00:15:52,100
And this is just spread over
the entire session.

412
00:15:52,100 --> 00:15:53,930
PETER LUBBERS: That's
pretty awesome.

413
00:15:53,930 --> 00:15:55,915
Also, what I like about it is,
you can actually have a site

414
00:15:55,915 --> 00:15:58,070
that has multiple pages.

415
00:15:58,070 --> 00:16:01,030
You can really see
the outliers.

416
00:16:01,030 --> 00:16:03,430
You can say, oh, all of them are
about the same, but this

417
00:16:03,430 --> 00:16:04,200
one is way out there.

418
00:16:04,200 --> 00:16:05,440
What's happening to that?

419
00:16:05,440 --> 00:16:08,580
You can zoom in, and you
have some context.

420
00:16:08,580 --> 00:16:09,620
ILYA GRIGORIK: So
you know what?

421
00:16:09,620 --> 00:16:12,240
Now that I see this, what I want
this a record button in

422
00:16:12,240 --> 00:16:16,470
Chrome, where I can actually
tell my users to just say, oh,

423
00:16:16,470 --> 00:16:17,400
you're having a problem?

424
00:16:17,400 --> 00:16:19,050
Hit Record.

425
00:16:19,050 --> 00:16:20,050
Go through a couple pages.

426
00:16:20,050 --> 00:16:21,300
Now stop and sent
me that trace.

427
00:16:21,300 --> 00:16:22,875
That would be really cool.

428
00:16:22,875 --> 00:16:24,780
PETER LUBBERS: That
would be cool.

429
00:16:24,780 --> 00:16:27,460
ILYA GRIGORIK: There's an
extension in the making right

430
00:16:27,460 --> 00:16:28,790
after this show.

431
00:16:28,790 --> 00:16:30,040
OK, that's really cool.

432
00:16:30,040 --> 00:16:32,640

433
00:16:32,640 --> 00:16:35,920
So what's next on our agenda?

434
00:16:35,920 --> 00:16:38,950
PETER LUBBERS: We talked
about the viewer.

435
00:16:38,950 --> 00:16:40,970
Let's talk about some
other tools.

436
00:16:40,970 --> 00:16:43,840
And one of the nice things--
it's not an actual official

437
00:16:43,840 --> 00:16:46,200
standard or specification.

438
00:16:46,200 --> 00:16:47,360
I mean, there is a spec.

439
00:16:47,360 --> 00:16:52,130
But it's sort of the de-facto
standard, if you will, for a

440
00:16:52,130 --> 00:16:54,010
lot of this information.

441
00:16:54,010 --> 00:16:56,780
Not just Chrome, but Firefox
supports it.

442
00:16:56,780 --> 00:16:58,330
But there's a lot
of other tools.

443
00:16:58,330 --> 00:17:01,730
And so maybe you could just go
to the HAR adopter's page.

444
00:17:01,730 --> 00:17:04,450
ILYA GRIGORIK: Right, the "har"
HAR adopter's page.

445
00:17:04,450 --> 00:17:09,490
So it turns out Chrome supports
HAR, as we just saw.

446
00:17:09,490 --> 00:17:12,910
But it turns out that most other
tools that you guys are

447
00:17:12,910 --> 00:17:15,079
familiar with also have
a HAR export.

448
00:17:15,079 --> 00:17:18,540
In fact, the whole point for
creating the standard was

449
00:17:18,540 --> 00:17:22,839
originally when Firebug and
NetExport or HttpWatch were

450
00:17:22,839 --> 00:17:25,310
trying to figure out, how do
we come up with a single

451
00:17:25,310 --> 00:17:27,589
standard so we don't
end up creating

452
00:17:27,589 --> 00:17:28,960
different export files?

453
00:17:28,960 --> 00:17:31,250
So this is probably three
or four years back.

454
00:17:31,250 --> 00:17:34,050
So, obviously, Firebug and
HttpWatch support this.

455
00:17:34,050 --> 00:17:37,320
But if you look through this,
IE, Chrome Developer Tools, we

456
00:17:37,320 --> 00:17:41,180
just saw HAR Viewer, and there's
probably three dozen

457
00:17:41,180 --> 00:17:42,360
different tools in here.

458
00:17:42,360 --> 00:17:45,940
And so Charles Proxy is another
very popular tool.

459
00:17:45,940 --> 00:17:48,100
So this is actually an
important point.

460
00:17:48,100 --> 00:17:49,410
This is not just in a browser.

461
00:17:49,410 --> 00:17:52,720
So if I have a proxy running and
I configure my browser to

462
00:17:52,720 --> 00:17:55,830
go through it, I can still
capture all the same data,

463
00:17:55,830 --> 00:17:56,530
which is really nice.

464
00:17:56,530 --> 00:17:58,540
PETER LUBBERS: This will come
in very handy, for example,

465
00:17:58,540 --> 00:18:01,250
with mobile browsers.

466
00:18:01,250 --> 00:18:02,180
ILYA GRIGORIK: And we'll
actually see

467
00:18:02,180 --> 00:18:04,440
an example of that.

468
00:18:04,440 --> 00:18:07,150
And then I guess the other thing
to mention is the format

469
00:18:07,150 --> 00:18:10,270
itself is very flexible,
JSON, which is nice.

470
00:18:10,270 --> 00:18:13,480
Because most every language
out there today has a very

471
00:18:13,480 --> 00:18:17,430
good JSON library, because it
just maps very easily to your

472
00:18:17,430 --> 00:18:18,750
basic data types.

473
00:18:18,750 --> 00:18:22,070
But if you want, there are
wrappers in each language.

474
00:18:22,070 --> 00:18:25,440
So things like the Java HarLib,
where you just give it

475
00:18:25,440 --> 00:18:28,980
the HAR file, and it gives you
a nice object back which you

476
00:18:28,980 --> 00:18:30,140
can iterate over.

477
00:18:30,140 --> 00:18:30,910
There's Perl.

478
00:18:30,910 --> 00:18:31,540
There's Ruby.

479
00:18:31,540 --> 00:18:34,160
I found a whole bunch
of different tools.

480
00:18:34,160 --> 00:18:35,530
PETER LUBBERS: It's pretty
amazing the amount

481
00:18:35,530 --> 00:18:36,600
of support for this.

482
00:18:36,600 --> 00:18:41,120
Actually, just over the weekend,
we got a mail from

483
00:18:41,120 --> 00:18:44,340
Eric Duran from New York who
built this great little

484
00:18:44,340 --> 00:18:46,960
viewer, which I thought it was
awesome, because this is

485
00:18:46,960 --> 00:18:47,740
actually just a--

486
00:18:47,740 --> 00:18:50,930
ILYA GRIGORIK: This looks
very familiar.

487
00:18:50,930 --> 00:18:52,570
This looks like Chrome
Developer Tools.

488
00:18:52,570 --> 00:18:53,160
PETER LUBBERS: It really does.

489
00:18:53,160 --> 00:18:56,170
He sort of re-implemented
all of that with

490
00:18:56,170 --> 00:18:57,600
drag-and-drop support.

491
00:18:57,600 --> 00:18:58,470
ILYA GRIGORIK: So this
is a page, right?

492
00:18:58,470 --> 00:18:58,710
PETER LUBBERS: Right.

493
00:18:58,710 --> 00:19:00,860
ILYA GRIGORIK: We're looking
at. github.com/chromeHAR.

494
00:19:00,860 --> 00:19:02,960
So drag and drop a HAR file.

495
00:19:02,960 --> 00:19:06,880
OK, so I happen to
have a HAR file.

496
00:19:06,880 --> 00:19:08,130
I've come prepared.

497
00:19:08,130 --> 00:19:10,250

498
00:19:10,250 --> 00:19:10,730
PETER LUBBERS: Isn't
that awesome?

499
00:19:10,730 --> 00:19:12,790
ILYA GRIGORIK: Look at that.

500
00:19:12,790 --> 00:19:15,660
It's the same tools that
we know and love.

501
00:19:15,660 --> 00:19:16,630
I can click on this.

502
00:19:16,630 --> 00:19:19,330
You can see all the headers, the
cookies, the timing, and

503
00:19:19,330 --> 00:19:21,490
this is just a web app.

504
00:19:21,490 --> 00:19:22,180
So it's really cool.

505
00:19:22,180 --> 00:19:25,670
I think this is actually a good
demo of something that

506
00:19:25,670 --> 00:19:28,140
not many people realize, which
is Chrome Developer

507
00:19:28,140 --> 00:19:31,260
Tools is a web app.

508
00:19:31,260 --> 00:19:33,630
So I think what Eric is doing
here is he's actually pulling

509
00:19:33,630 --> 00:19:36,570
out a lot of the styling
and perhaps even

510
00:19:36,570 --> 00:19:37,490
the JavaScript logic.

511
00:19:37,490 --> 00:19:38,480
PETER LUBBERS: I think so.

512
00:19:38,480 --> 00:19:41,090
I haven't completely had enough
time to look at it yet,

513
00:19:41,090 --> 00:19:43,120
but it's pretty.

514
00:19:43,120 --> 00:19:44,880
ILYA GRIGORIK: That's
a pretty cool demo.

515
00:19:44,880 --> 00:19:47,250
So if you guys want, there's
a HAR Viewer.

516
00:19:47,250 --> 00:19:48,030
Now there's this.

517
00:19:48,030 --> 00:19:51,370
And it looks like he's even
thinking about adding some PHP

518
00:19:51,370 --> 00:19:52,040
functionality.

519
00:19:52,040 --> 00:19:54,530
PETER LUBBERS: We'll come back
to that one as well.

520
00:19:54,530 --> 00:19:55,330
ILYA GRIGORIK: Unfortunately,
I can't click on

521
00:19:55,330 --> 00:19:56,630
it right now, but--

522
00:19:56,630 --> 00:19:58,430
PETER LUBBERS: So one of the
things about all of this is,

523
00:19:58,430 --> 00:20:02,430
of course, getting kind of
already a little bit tired of

524
00:20:02,430 --> 00:20:04,010
the manual parts of this.

525
00:20:04,010 --> 00:20:05,100
Let's focus on that a bit.

526
00:20:05,100 --> 00:20:09,590
Because if you have to actually
download this HAR

527
00:20:09,590 --> 00:20:11,910
file that's great.

528
00:20:11,910 --> 00:20:14,090
But if you have to do this more
often, like, for example,

529
00:20:14,090 --> 00:20:17,240
if you want to start seeing
trends over time, then it's

530
00:20:17,240 --> 00:20:18,800
going to be a little
bit problematic.

531
00:20:18,800 --> 00:20:20,120
You're going to see--

532
00:20:20,120 --> 00:20:22,010
you're constantly doing
this manual work.

533
00:20:22,010 --> 00:20:28,380
So what tools are there, Ilya,
for automating this process?

534
00:20:28,380 --> 00:20:32,200
ILYA GRIGORIK: Well, short of
getting an army of monkeys,

535
00:20:32,200 --> 00:20:34,310
the other way to do it is--

536
00:20:34,310 --> 00:20:36,300
so actually, there's a lot
of different ways.

537
00:20:36,300 --> 00:20:40,630
And I'm actually really excited
about this stuff.

538
00:20:40,630 --> 00:20:42,430
Let me show you some examples.

539
00:20:42,430 --> 00:20:43,670
So first of all, I don't
know if you guys are

540
00:20:43,670 --> 00:20:46,660
familiar with PhantomJS.

541
00:20:46,660 --> 00:20:47,880
PETER LUBBERS: That's
the headless router?

542
00:20:47,880 --> 00:20:50,030
ILYA GRIGORIK: Yeah, exactly.

543
00:20:50,030 --> 00:20:51,740
It's a headless WebKit
browser.

544
00:20:51,740 --> 00:20:54,180
And the cool thing about it--
well, there's so many cool

545
00:20:54,180 --> 00:20:54,860
things about it.

546
00:20:54,860 --> 00:20:56,090
We could probably do an
entire show on it.

547
00:20:56,090 --> 00:20:58,240
But one of things I like about
it is it's very easy to

548
00:20:58,240 --> 00:20:59,080
download and install.

549
00:20:59,080 --> 00:21:02,000
It's a statically compiled
binary, so you just download

550
00:21:02,000 --> 00:21:02,900
this zip file.

551
00:21:02,900 --> 00:21:06,450
You unpack it, and it's
basically a browser, a

552
00:21:06,450 --> 00:21:08,700
full-featured WebKit browser,
which means it can execute

553
00:21:08,700 --> 00:21:09,730
JavaScript.

554
00:21:09,730 --> 00:21:11,310
It'll download your CSS images,

555
00:21:11,310 --> 00:21:13,010
everything, which is nice.

556
00:21:13,010 --> 00:21:14,440
And you can run it from
the command line.

557
00:21:14,440 --> 00:21:15,850
So this is what I have here.

558
00:21:15,850 --> 00:21:18,510
I just downloaded
the actual file.

559
00:21:18,510 --> 00:21:19,250
I unpacked it.

560
00:21:19,250 --> 00:21:21,220
I just have it sitting here.

561
00:21:21,220 --> 00:21:27,790
Now I can do "bin phantom,"
and if you look at this--

562
00:21:27,790 --> 00:21:30,480
so it just gives you a little
bit of help information.

563
00:21:30,480 --> 00:21:32,550
You can configure it
any way you like.

564
00:21:32,550 --> 00:21:36,640
But the way it basically works
is you need to give Phantom a

565
00:21:36,640 --> 00:21:38,870
script to tell it what to do.

566
00:21:38,870 --> 00:21:41,130
So think of it as this is a
browser, and we need to tell

567
00:21:41,130 --> 00:21:45,040
it, hey, I want you to open
a file or a URL and

568
00:21:45,040 --> 00:21:45,970
do something there.

569
00:21:45,970 --> 00:21:50,080
So It comes with a couple of
different example scripts, one

570
00:21:50,080 --> 00:21:53,510
of which is NetSniff.

571
00:21:53,510 --> 00:21:55,620
I think you can guess what
it's going to do.

572
00:21:55,620 --> 00:21:57,060
It's going to sniff on
the network traffic

573
00:21:57,060 --> 00:21:58,880
and log that data.

574
00:21:58,880 --> 00:22:00,900
Let me do this.

575
00:22:00,900 --> 00:22:05,630
I'll actually download
a page here.

576
00:22:05,630 --> 00:22:08,720
And if all goes well, this
should run Phantom.

577
00:22:08,720 --> 00:22:11,780
And look, it spit out what
looks like a JSON file.

578
00:22:11,780 --> 00:22:14,940
In fact, it looks
like a HAR file.

579
00:22:14,940 --> 00:22:15,980
Surprise!

580
00:22:15,980 --> 00:22:16,395
PETER LUBBERS: Very surprised.

581
00:22:16,395 --> 00:22:20,680
ILYA GRIGORIK: So let me
actually just to save that to

582
00:22:20,680 --> 00:22:22,740
an out file instead of just
printing it to screen.

583
00:22:22,740 --> 00:22:25,440

584
00:22:25,440 --> 00:22:28,100
So we're looking at this.

585
00:22:28,100 --> 00:22:29,650
Once again, we have
all the JSON data.

586
00:22:29,650 --> 00:22:31,500
So what just happened?

587
00:22:31,500 --> 00:22:33,370
I think this is really
important.

588
00:22:33,370 --> 00:22:36,370
We have a fully-featured browser
that went in and

589
00:22:36,370 --> 00:22:38,500
captured all the network data.

590
00:22:38,500 --> 00:22:39,780
Now imagine if you take--

591
00:22:39,780 --> 00:22:40,830
PETER LUBBERS: But you run
it on the command line.

592
00:22:40,830 --> 00:22:41,610
ILYA GRIGORIK: Right.

593
00:22:41,610 --> 00:22:45,930
So imagine now you take this,
and you have your CI build

594
00:22:45,930 --> 00:22:46,880
running on your--

595
00:22:46,880 --> 00:22:47,930
PETER LUBBERS: Exactly.

596
00:22:47,930 --> 00:22:49,060
ILYA GRIGORIK: --instance.

597
00:22:49,060 --> 00:22:51,790
And after each check-in,
you run this and you

598
00:22:51,790 --> 00:22:54,840
captured a HAR file.

599
00:22:54,840 --> 00:22:56,800
Now you have the
full timeline.

600
00:22:56,800 --> 00:23:00,410
On every check-in, you have
a history of what happens.

601
00:23:00,410 --> 00:23:02,330
Maybe you added more resources
and all the rest.

602
00:23:02,330 --> 00:23:05,678

603
00:23:05,678 --> 00:23:07,740
PETER LUBBERS: That actually is
interesting, because if you

604
00:23:07,740 --> 00:23:13,150
do that and you combine it
with running that through

605
00:23:13,150 --> 00:23:17,649
analysis tools like PageSpeed,
YSlow, is

606
00:23:17,649 --> 00:23:19,030
that already supported?

607
00:23:19,030 --> 00:23:20,010
ILYA GRIGORIK: You guys
can see that we

608
00:23:20,010 --> 00:23:21,240
practiced this yesterday.

609
00:23:21,240 --> 00:23:23,520
So here's another tool
that you'll love.

610
00:23:23,520 --> 00:23:27,190
So if you guys use Node,
there's actually--

611
00:23:27,190 --> 00:23:29,590
YSlow is available
as a Node module.

612
00:23:29,590 --> 00:23:30,560
You can just run it.

613
00:23:30,560 --> 00:23:31,970
I already have it installed
on my machine.

614
00:23:31,970 --> 00:23:35,450
But if you run NPM, install
YSlow, that's what you're

615
00:23:35,450 --> 00:23:37,630
going to get.

616
00:23:37,630 --> 00:23:39,240
Let me just--

617
00:23:39,240 --> 00:23:43,830
so once you install it, you just
get this YSlow binary.

618
00:23:43,830 --> 00:23:45,680
It gives you a couple different
examples here.

619
00:23:45,680 --> 00:23:49,360
I'm just going to copy
the guy right here.

620
00:23:49,360 --> 00:23:51,050
I think there's actually
a typo in the Readme.

621
00:23:51,050 --> 00:23:53,210
So we need two double dashes.

622
00:23:53,210 --> 00:23:54,900
And guess what it takes?

623
00:23:54,900 --> 00:23:55,620
PETER LUBBERS: A HAR file.

624
00:23:55,620 --> 00:23:57,198
ILYA GRIGORIK: It takes
the HAR file.

625
00:23:57,198 --> 00:23:59,070
PETER LUBBERS: It's
getting old.

626
00:23:59,070 --> 00:24:00,530
ILYA GRIGORIK: Right.

627
00:24:00,530 --> 00:24:02,510
So what we're going to
do is we're just

628
00:24:02,510 --> 00:24:04,000
going to print out--

629
00:24:04,000 --> 00:24:06,760
actually, let me change
this for one second.

630
00:24:06,760 --> 00:24:09,800
We're going to print out
a basic summary.

631
00:24:09,800 --> 00:24:12,840
And format plain is
just plain text.

632
00:24:12,840 --> 00:24:14,630
And feed it this HAR file.

633
00:24:14,630 --> 00:24:17,420
And it analyzes the HAR file,
and says OK, there's 80

634
00:24:17,420 --> 00:24:19,220
kilobytes of data that
we downloaded here.

635
00:24:19,220 --> 00:24:23,080
The score according to all of
the YSlow rules is 100.

636
00:24:23,080 --> 00:24:23,940
Hooray.

637
00:24:23,940 --> 00:24:26,770
And there's a total of seven
requests for this.

638
00:24:26,770 --> 00:24:28,080
So that's kind of interesting.

639
00:24:28,080 --> 00:24:29,840
Now let's dig in a little
bit deeper.

640
00:24:29,840 --> 00:24:33,070

641
00:24:33,070 --> 00:24:34,520
Let's run all.

642
00:24:34,520 --> 00:24:35,900
And if you run all, all
of a sudden, you

643
00:24:35,900 --> 00:24:37,680
get a ton more output.

644
00:24:37,680 --> 00:24:42,670
So what happens here is, YSlow
has a set of rules or

645
00:24:42,670 --> 00:24:46,590
categories of rules for things
like, are you using a CDN?

646
00:24:46,590 --> 00:24:48,350
Are you setting expire
setters?

647
00:24:48,350 --> 00:24:50,290
Are you compressing your data
on all these things?

648
00:24:50,290 --> 00:24:54,500
As you can see, it's actually
scored that entire HAR file

649
00:24:54,500 --> 00:24:55,700
with respect to all
those rules.

650
00:24:55,700 --> 00:24:57,810
And it's giving you
a specific score.

651
00:24:57,810 --> 00:24:59,570
So it just so happens
that this page is

652
00:24:59,570 --> 00:25:01,190
actually fairly optimized.

653
00:25:01,190 --> 00:25:03,330
There's no offenders in the
sense that if there was a file

654
00:25:03,330 --> 00:25:06,960
that wasn't compressed, it
would show up in here.

655
00:25:06,960 --> 00:25:09,450
So now we have two things.

656
00:25:09,450 --> 00:25:11,870
We've captured the HAR file
from command line.

657
00:25:11,870 --> 00:25:13,480
We ran it through YSlow.

658
00:25:13,480 --> 00:25:15,900
And, of course, you don't
actually have

659
00:25:15,900 --> 00:25:16,260
to print this out--

660
00:25:16,260 --> 00:25:16,750
PETER LUBBERS: All from
the command line.

661
00:25:16,750 --> 00:25:17,350
ILYA GRIGORIK: Right.

662
00:25:17,350 --> 00:25:20,800
And you don't have to print
this out in plain text.

663
00:25:20,800 --> 00:25:25,230
To feed into your own tool,
you have JSON output.

664
00:25:25,230 --> 00:25:30,390
So now, literally in two lines
of batch script, you can get

665
00:25:30,390 --> 00:25:31,990
access to all the performance
data.

666
00:25:31,990 --> 00:25:36,750
So now in every CI check-in,
I can run this and raise an

667
00:25:36,750 --> 00:25:38,755
alarm if all of a sudden--

668
00:25:38,755 --> 00:25:39,010
PETER LUBBERS: Yeah, exactly.

669
00:25:39,010 --> 00:25:42,960
You can set alarms for when you
drop a certain score, or

670
00:25:42,960 --> 00:25:45,980
like, for example, images that
are not compressed or it

671
00:25:45,980 --> 00:25:50,490
thinks that it picks up the
typical YSlow rules.

672
00:25:50,490 --> 00:25:54,350
And then that can trigger
a whole chain of alarms

673
00:25:54,350 --> 00:25:56,130
and ways to fix it.

674
00:25:56,130 --> 00:25:56,610
That's awesome.

675
00:25:56,610 --> 00:25:58,140
ILYA GRIGORIK: Exactly.

676
00:25:58,140 --> 00:26:01,160
PETER LUBBERS: So is that also
supported in PageSpeed?

677
00:26:01,160 --> 00:26:01,790
ILYA GRIGORIK: It is.

678
00:26:01,790 --> 00:26:03,750
So it will require a little
bit more work.

679
00:26:03,750 --> 00:26:05,940
But if you go to the PageSpeed
site-- so I'm just looking at

680
00:26:05,940 --> 00:26:07,090
the PageSpeed SDK.

681
00:26:07,090 --> 00:26:09,150
You can actually download
the entire SDK.

682
00:26:09,150 --> 00:26:10,810
It's an open source project.

683
00:26:10,810 --> 00:26:13,000
And if you build the SDK,
you'll actually get this

684
00:26:13,000 --> 00:26:14,440
binary called--

685
00:26:14,440 --> 00:26:15,010
guess what?

686
00:26:15,010 --> 00:26:16,910
HAR to PageSpeed.

687
00:26:16,910 --> 00:26:20,490
And you feed it a HAR file, and
you get a similar output,

688
00:26:20,490 --> 00:26:23,440
but perhaps slightly different
rules and slightly different

689
00:26:23,440 --> 00:26:24,860
waitings as YSlow.

690
00:26:24,860 --> 00:26:27,510
If you're a PageSpeed fan,
you can also use this.

691
00:26:27,510 --> 00:26:31,030
And by the way, PageSpeed SDK
also comes with some really

692
00:26:31,030 --> 00:26:34,950
awesome tools like the PageSpeed
Optimize Image.

693
00:26:34,950 --> 00:26:37,240
Nicely named, very
descriptive.

694
00:26:37,240 --> 00:26:41,150
So you just pass it an image
file, and it'll automatically

695
00:26:41,150 --> 00:26:43,350
pick out the right format and
optimize the stuff for you.

696
00:26:43,350 --> 00:26:44,680
That's something you
can also do as part

697
00:26:44,680 --> 00:26:45,930
of your build process.

698
00:26:45,930 --> 00:26:48,030

699
00:26:48,030 --> 00:26:51,110
PETER LUBBERS: So I think when
I first started looking the

700
00:26:51,110 --> 00:26:55,360
HAR format and everything, I
really thought of it primarily

701
00:26:55,360 --> 00:26:56,960
from a browser perspective.

702
00:26:56,960 --> 00:27:01,520
And actually, after looking at
this more, obviously it's the

703
00:27:01,520 --> 00:27:04,560
browser making that HTTP request
to the server and the

704
00:27:04,560 --> 00:27:05,970
server responding.

705
00:27:05,970 --> 00:27:07,650
So when you start thinking about
it that way, it's like,

706
00:27:07,650 --> 00:27:09,470
OK, we can actually do
a lot more with it.

707
00:27:09,470 --> 00:27:13,970
We can actually go beyond the
browser, if you will, and

708
00:27:13,970 --> 00:27:17,530
start implementing HAR
on the server side.

709
00:27:17,530 --> 00:27:19,400
ILYA GRIGORIK: That's
a cool idea.

710
00:27:19,400 --> 00:27:21,950
PETER LUBBERS: I don't think
there's a whole lot of tools

711
00:27:21,950 --> 00:27:22,870
around that yet.

712
00:27:22,870 --> 00:27:25,300
But it's the same format.

713
00:27:25,300 --> 00:27:27,410
ILYA GRIGORIK: So just to
elaborate this a little bit, a

714
00:27:27,410 --> 00:27:30,020
lot of API servers or app
servers that you build kind of

715
00:27:30,020 --> 00:27:30,920
follow the same pattern.

716
00:27:30,920 --> 00:27:34,470
A request comes in then you have
a dispatch to a database

717
00:27:34,470 --> 00:27:37,860
or maybe another HTTP server
that does something.

718
00:27:37,860 --> 00:27:40,650
And it's the same waterfall,
basically.

719
00:27:40,650 --> 00:27:41,480
PETER LUBBERS: But
on the inside.

720
00:27:41,480 --> 00:27:42,790
ILYA GRIGORIK: So it would be
kind of cool if we could

721
00:27:42,790 --> 00:27:44,520
visualize the same data.

722
00:27:44,520 --> 00:27:47,720
And we saw a whole number of
different rules-- or tools,

723
00:27:47,720 --> 00:27:50,080
rather, that we can use for
this kind of stuff.

724
00:27:50,080 --> 00:27:53,710
PETER LUBBERS: So let's take a
look at a sample file that you

725
00:27:53,710 --> 00:27:58,670
put together already for this,
just to get the idea of what's

726
00:27:58,670 --> 00:27:59,860
happening here.

727
00:27:59,860 --> 00:28:05,770
ILYA GRIGORIK: So I've created
this mock file, and how that's

728
00:28:05,770 --> 00:28:07,250
created is a separate story.

729
00:28:07,250 --> 00:28:10,390
You can instrument your
own app server.

730
00:28:10,390 --> 00:28:12,790
Or you can actually use some
other tricks which we'll talk

731
00:28:12,790 --> 00:28:13,410
about in a second.

732
00:28:13,410 --> 00:28:15,280
PETER LUBBERS: Some
sort of logging.

733
00:28:15,280 --> 00:28:16,220
ILYA GRIGORIK: Exactly.

734
00:28:16,220 --> 00:28:19,740
So actually, I'm going to
sneak in another demo.

735
00:28:19,740 --> 00:28:21,920
So if you guys are working with
HAR files, and you have

736
00:28:21,920 --> 00:28:24,380
them on disk, there is this--

737
00:28:24,380 --> 00:28:28,100
and you have Ruby installed,
which you probably do, you can

738
00:28:28,100 --> 00:28:33,640
actually do "gem install har,"
which creates this very, very

739
00:28:33,640 --> 00:28:34,390
handy utility.

740
00:28:34,390 --> 00:28:37,240
What you do is then you say
"har" and it installs this

741
00:28:37,240 --> 00:28:41,280
kind of dense script, and
you pass it a file.

742
00:28:41,280 --> 00:28:42,070
And check this out.

743
00:28:42,070 --> 00:28:44,980
So I'm going to run this.

744
00:28:44,980 --> 00:28:51,400
And it starts a local server,
which embeds the HAR viewer

745
00:28:51,400 --> 00:28:54,050
and fires up a new tab on your
thing and just visualizes it

746
00:28:54,050 --> 00:28:55,610
right here.

747
00:28:55,610 --> 00:28:56,650
How awesome was that?

748
00:28:56,650 --> 00:28:57,490
PETER LUBBERS: Wow.

749
00:28:57,490 --> 00:28:58,610
ILYA GRIGORIK: So we don't
even have to copy

750
00:28:58,610 --> 00:28:59,310
it, go to the site.

751
00:28:59,310 --> 00:29:01,400
You just kind of like feed it
a file and there you go.

752
00:29:01,400 --> 00:29:04,400
So next time somebody emails you
or you have a bug report

753
00:29:04,400 --> 00:29:07,700
with a HAR file, download it,
run it with this, you're up

754
00:29:07,700 --> 00:29:09,180
and running.

755
00:29:09,180 --> 00:29:10,670
So let's look at this.

756
00:29:10,670 --> 00:29:12,790
What's happening here?

757
00:29:12,790 --> 00:29:17,070
This is a simple request where
we're kind of simulating in

758
00:29:17,070 --> 00:29:22,010
let's say an RSS feed
application, where a request

759
00:29:22,010 --> 00:29:24,090
comes in for this feed ABC.

760
00:29:24,090 --> 00:29:26,160
And the next thing that happens
is we dispatch a

761
00:29:26,160 --> 00:29:29,510
search request for ABC, which
is basically like, what are

762
00:29:29,510 --> 00:29:30,820
the articles that
I should show?

763
00:29:30,820 --> 00:29:33,040
What are the article IDs?

764
00:29:33,040 --> 00:29:35,710
Let's say that returns a couple
different IDs, three.

765
00:29:35,710 --> 00:29:40,020
So that request takes some time,
136 milliseconds, and we

766
00:29:40,020 --> 00:29:42,620
have all of the header
information on all the other

767
00:29:42,620 --> 00:29:45,040
metadata from our API server.

768
00:29:45,040 --> 00:29:48,420
And then we, in parallel,
dispatch three requests to

769
00:29:48,420 --> 00:29:51,902
fetch the articles, and then
the response is returned.

770
00:29:51,902 --> 00:29:54,440
PETER LUBBERS: Yeah, you can
really trace right into that

771
00:29:54,440 --> 00:29:58,300
and see where you're taking
most of the time.

772
00:29:58,300 --> 00:30:00,570
ILYA GRIGORIK: So now you can
think about instrumenting your

773
00:30:00,570 --> 00:30:03,090
app server and reusing
the same tools.

774
00:30:03,090 --> 00:30:06,130
This is great visualization.

775
00:30:06,130 --> 00:30:07,740
PETER LUBBERS: Yeah, by sticking
to the format, you

776
00:30:07,740 --> 00:30:10,490
really get a lot of benefits.

777
00:30:10,490 --> 00:30:11,540
ILYA GRIGORIK: Yeah,
there's so many

778
00:30:11,540 --> 00:30:12,670
different tools out there.

779
00:30:12,670 --> 00:30:15,560
And speaking of tools-- so now
let's take this use case.

780
00:30:15,560 --> 00:30:18,160
So we've captured a HAR
file, let's say,

781
00:30:18,160 --> 00:30:19,430
on the command line.

782
00:30:19,430 --> 00:30:21,650
We can run it through YSlow,
which is very good for

783
00:30:21,650 --> 00:30:24,350
capturing, let's say,
regressions or anomalies if

784
00:30:24,350 --> 00:30:28,400
somebody checks in,

785
00:30:28,400 --> 00:30:30,830
So it'll ingest this data.

786
00:30:30,830 --> 00:30:35,520
But now it gets smarter, which
is to say, it looks at the URL

787
00:30:35,520 --> 00:30:38,400
which you were accessing, and it
says, hey, you've actually

788
00:30:38,400 --> 00:30:43,170
uploaded not one, but three
traces of this file, spread

789
00:30:43,170 --> 00:30:44,140
across time.

790
00:30:44,140 --> 00:30:47,600
So what I'm going to do is I'm
going to visualize the

791
00:30:47,600 --> 00:30:51,150
difference in page loading
time or total size.

792
00:30:51,150 --> 00:30:53,190
So we actually have--
as you can see here,

793
00:30:53,190 --> 00:30:54,810
we have three runs.

794
00:30:54,810 --> 00:30:56,570
I was playing with this
on the weekend.

795
00:30:56,570 --> 00:30:59,830
And between these three
different runs-- so the yellow

796
00:30:59,830 --> 00:31:01,470
line here is the
full load time.

797
00:31:01,470 --> 00:31:05,590
So the load time went up from
0.75 seconds to about 1 second

798
00:31:05,590 --> 00:31:07,360
between the three runs.

799
00:31:07,360 --> 00:31:09,620
This graph is also very
interactive, which I didn't

800
00:31:09,620 --> 00:31:10,890
realize for a while.

801
00:31:10,890 --> 00:31:13,870
For example, I can disable this
and load things like the

802
00:31:13,870 --> 00:31:17,310
onLoad time and time
to first byte.

803
00:31:17,310 --> 00:31:20,780
Imagine having this data for
your site across two weeks,

804
00:31:20,780 --> 00:31:24,180
and now you can go in and look
at, well, am I just putting

805
00:31:24,180 --> 00:31:24,850
more images?

806
00:31:24,850 --> 00:31:29,290
Or why did for my load
time get worse?

807
00:31:29,290 --> 00:31:30,590
And then you can also---

808
00:31:30,590 --> 00:31:35,020
if you need a nice artifact for
your next presentation,

809
00:31:35,020 --> 00:31:39,010
you can also just save that
as a PNG image, or an SVG.

810
00:31:39,010 --> 00:31:39,570
So that's cool.

811
00:31:39,570 --> 00:31:43,260
That allows you to trend
it over time.

812
00:31:43,260 --> 00:31:47,260
And within here, for each
specific run, you, of course,

813
00:31:47,260 --> 00:31:51,410
still have access to all of the
metadata within each one.

814
00:31:51,410 --> 00:31:54,590
Domains from which we fetched
all the resources, it even

815
00:31:54,590 --> 00:31:56,870
embeds PageSpeed scoring.

816
00:31:56,870 --> 00:31:58,860
So it says, well,
for this page--

817
00:31:58,860 --> 00:32:00,820
let's see, cache validator.

818
00:32:00,820 --> 00:32:03,950
So some of the resources didn't
have a cache validator.

819
00:32:03,950 --> 00:32:05,990
So it gave me an 83.

820
00:32:05,990 --> 00:32:07,240
OK, interesting.

821
00:32:07,240 --> 00:32:11,190
The HAR Viewer, as you would
expect, embedded in here, and

822
00:32:11,190 --> 00:32:13,870
you can toggle between all
the different runs.

823
00:32:13,870 --> 00:32:17,450
So here's a little tip.

824
00:32:17,450 --> 00:32:19,900
We've talked about those any
number of times now, but

825
00:32:19,900 --> 00:32:21,540
you've captured on CLI.

826
00:32:21,540 --> 00:32:23,330
You run it through YSlow,
and then you can

827
00:32:23,330 --> 00:32:24,620
push it into here.

828
00:32:24,620 --> 00:32:25,740
And all of a sudden, you have a

829
00:32:25,740 --> 00:32:26,970
performance monitoring solution--

830
00:32:26,970 --> 00:32:27,980
PETER LUBBERS: Exactly.

831
00:32:27,980 --> 00:32:30,750
ILYA GRIGORIK: --in like three
lines of batch script.

832
00:32:30,750 --> 00:32:33,010
And if you guys are interested,
I actually found

833
00:32:33,010 --> 00:32:36,980
this example on the
HAR storage Wiki.

834
00:32:36,980 --> 00:32:40,400
I uploaded the file manually,
but you can just--

835
00:32:40,400 --> 00:32:42,710
here's four lines of
Python where you

836
00:32:42,710 --> 00:32:44,580
just encode the data.

837
00:32:44,580 --> 00:32:45,600
You push it in.

838
00:32:45,600 --> 00:32:46,550
And that's it.

839
00:32:46,550 --> 00:32:47,800
You're done.

840
00:32:47,800 --> 00:32:50,080

841
00:32:50,080 --> 00:32:51,300
PETER LUBBERS: We've looked
at it from the browser

842
00:32:51,300 --> 00:32:52,090
perspective now.

843
00:32:52,090 --> 00:32:56,760
We've looked at it from the
server side in the automation.

844
00:32:56,760 --> 00:33:01,880
And one thing we talked about
briefly is the mobile support.

845
00:33:01,880 --> 00:33:05,170
Obviously, you don't always have
Chrome Developer Tools on

846
00:33:05,170 --> 00:33:07,230
your mobile device.

847
00:33:07,230 --> 00:33:10,940
So how would you use some of
these tools to set that up?

848
00:33:10,940 --> 00:33:11,630
ILYA GRIGORIK: So I
actually made--

849
00:33:11,630 --> 00:33:12,940
I cheated.

850
00:33:12,940 --> 00:33:13,740
I made us a little

851
00:33:13,740 --> 00:33:16,380
presentation there, two slides.

852
00:33:16,380 --> 00:33:18,830
You bring up a really good
point, which is if you're

853
00:33:18,830 --> 00:33:22,060
using Chrome on Android, you
actually have remote

854
00:33:22,060 --> 00:33:23,540
debugging, which is absolutely
awesome.

855
00:33:23,540 --> 00:33:27,320
Because you have access to the
same network panel plus all of

856
00:33:27,320 --> 00:33:27,850
the other--

857
00:33:27,850 --> 00:33:29,740
even JavaScript debugging.

858
00:33:29,740 --> 00:33:34,020
But what happens when you're
running an older or another

859
00:33:34,020 --> 00:33:36,120
browser which doesn't have
that capability?

860
00:33:36,120 --> 00:33:39,970
PETER LUBBERS: And just for
those of you attending, we did

861
00:33:39,970 --> 00:33:43,990
do a show on-- the Chrome Mobile
show just last week on

862
00:33:43,990 --> 00:33:47,420
Chrome Mobile debugging.

863
00:33:47,420 --> 00:33:48,750
ILYA GRIGORIK: It's
an awesome tool.

864
00:33:48,750 --> 00:33:50,620
If you guys haven't used it
before, we definitely

865
00:33:50,620 --> 00:33:51,530
recommend it.

866
00:33:51,530 --> 00:33:53,650
But here we're talking about a
slightly different use case,

867
00:33:53,650 --> 00:33:56,520
which is let's say I have an
older phone or a phone with a

868
00:33:56,520 --> 00:33:58,920
browser that doesn't support
this kind of thing.

869
00:33:58,920 --> 00:34:01,740
Could I still get access
to this data?

870
00:34:01,740 --> 00:34:04,880
It's actually a little bit
tricky if you think about it.

871
00:34:04,880 --> 00:34:06,380
How do you do that?

872
00:34:06,380 --> 00:34:09,199
So there's a trick.

873
00:34:09,199 --> 00:34:11,049
I made a diagram just
to explain it.

874
00:34:11,049 --> 00:34:12,560
PETER LUBBERS: It involves
a proxy server.

875
00:34:12,560 --> 00:34:14,719
ILYA GRIGORIK: Yes, it involves
a proxy server.

876
00:34:14,719 --> 00:34:16,489
So here's the trick.

877
00:34:16,489 --> 00:34:17,949
You have your phone.

878
00:34:17,949 --> 00:34:19,719
And I will assume that
your phone can

879
00:34:19,719 --> 00:34:22,150
connect to a Wi-Fi hotspot.

880
00:34:22,150 --> 00:34:23,920
That's a requirement,
unfortunately.

881
00:34:23,920 --> 00:34:26,280
If you can't do that, then
you can't use this trick.

882
00:34:26,280 --> 00:34:27,699
But let's assume it does.

883
00:34:27,699 --> 00:34:30,690
So what we do is we take our
laptop, and we actually start

884
00:34:30,690 --> 00:34:35,500
a Wi-Fi hotspot on it,
so it becomes--

885
00:34:35,500 --> 00:34:37,350
starts to broadcast.

886
00:34:37,350 --> 00:34:41,389
We then connect our phone
to the laptop.

887
00:34:41,389 --> 00:34:43,750
And now if I'm browsing on my
phone, I'm actually going

888
00:34:43,750 --> 00:34:45,639
through my laptop.

889
00:34:45,639 --> 00:34:47,650
So far, so good?

890
00:34:47,650 --> 00:34:49,820
So what's going to happen is
when I make a request in my

891
00:34:49,820 --> 00:34:52,320
mobile browser, it'll
go to my laptop.

892
00:34:52,320 --> 00:34:54,230
My laptop will go to the server
and just kind of funnel

893
00:34:54,230 --> 00:34:55,560
data back and forth.

894
00:34:55,560 --> 00:34:58,410
Now, given that the data is
flowing through the laptop, we

895
00:34:58,410 --> 00:35:02,230
can actually capture the data
with a low-level tool like a

896
00:35:02,230 --> 00:35:03,890
TCP dump, or Wireshark.

897
00:35:03,890 --> 00:35:04,340
PETER LUBBERS: Exactly.

898
00:35:04,340 --> 00:35:07,120
I was going to say with
Wireshark, you can capture

899
00:35:07,120 --> 00:35:07,400
everything.

900
00:35:07,400 --> 00:35:10,520
ILYA GRIGORIK: We can just say
capture on this interface, or

901
00:35:10,520 --> 00:35:13,770
this specific port, or this IP,
all that kind of stuff.

902
00:35:13,770 --> 00:35:17,110
So you run that capture, and
what you get out of it is a

903
00:35:17,110 --> 00:35:20,720
PCAP file, which is just
a very low-level--

904
00:35:20,720 --> 00:35:24,030
here are the IP packets and TCP
packets that are flowing

905
00:35:24,030 --> 00:35:24,910
over the wire.

906
00:35:24,910 --> 00:35:28,420
So this is nothing that you
would consume without an

907
00:35:28,420 --> 00:35:29,330
additional tool.

908
00:35:29,330 --> 00:35:30,680
PETER LUBBERS: It's not
in a HAR format.

909
00:35:30,680 --> 00:35:31,240
ILYA GRIGORIK: No.

910
00:35:31,240 --> 00:35:32,950
Unfortunately not.

911
00:35:32,950 --> 00:35:37,170
I actually have a file that
I'll show you guys.

912
00:35:37,170 --> 00:35:41,720
I have a sample Wikipedia file
where I captured a PCAP file.

913
00:35:41,720 --> 00:35:44,320
If I just open this in
Vim, it's gibberish.

914
00:35:44,320 --> 00:35:48,390
Because it's a binary format,
not anything too interesting.

915
00:35:48,390 --> 00:35:53,530
Now it turns out that there is
actually a tool called PCAP to

916
00:35:53,530 --> 00:35:57,800
HAR, which will take those
IP packets and basically

917
00:35:57,800 --> 00:35:58,780
reconstruct--

918
00:35:58,780 --> 00:36:02,230
or TCP packets, and reconstruct
the entire flow

919
00:36:02,230 --> 00:36:03,770
and create a HAR file.

920
00:36:03,770 --> 00:36:06,270

921
00:36:06,270 --> 00:36:11,230
Actually, let me see if I
can find this tool here.

922
00:36:11,230 --> 00:36:13,470
You can use PCAP to HAR
to manually do this.

923
00:36:13,470 --> 00:36:14,580
So you capture the PCAP file.

924
00:36:14,580 --> 00:36:17,430
And then you get a HAR file out
of it, and then you can

925
00:36:17,430 --> 00:36:19,920
use the HAR Ruby gem
to visualize it.

926
00:36:19,920 --> 00:36:22,520
Or there's this web app which
allows you to just

927
00:36:22,520 --> 00:36:24,230
upload a PCAP file.

928
00:36:24,230 --> 00:36:25,990
And it'll do the encoding,
and it will just

929
00:36:25,990 --> 00:36:27,360
show you the thing.

930
00:36:27,360 --> 00:36:29,090
Let me show you this.

931
00:36:29,090 --> 00:36:31,644
So I have my Wikipedia
HAR file here.

932
00:36:31,644 --> 00:36:33,590
PETER LUBBERS: No,
it's a PCAP file.

933
00:36:33,590 --> 00:36:36,350
ILYA GRIGORIK: Sorry,
PCAP file.

934
00:36:36,350 --> 00:36:38,490
And I'm just going
to hit Upload.

935
00:36:38,490 --> 00:36:41,420
And so we're doing is we're
uploading the raw binary data.

936
00:36:41,420 --> 00:36:44,630
It's going to run the
transform to HAR.

937
00:36:44,630 --> 00:36:45,770
And look at that.

938
00:36:45,770 --> 00:36:49,560
Now we're looking at are the
waterfall chart as captured

939
00:36:49,560 --> 00:36:53,690
from a mobile phone that perhaps
you couldn't configure

940
00:36:53,690 --> 00:36:56,630
a proxy server on it or using
some browser that doesn't

941
00:36:56,630 --> 00:36:58,050
support remote debugging.

942
00:36:58,050 --> 00:36:59,490
PETER LUBBERS: Can you
grab the HAR--

943
00:36:59,490 --> 00:37:02,110
the raw data on the
other tab there?

944
00:37:02,110 --> 00:37:05,720
The HAR JSON, yeah, OK.

945
00:37:05,720 --> 00:37:07,610
ILYA GRIGORIK: You can also
explore it, or you can click

946
00:37:07,610 --> 00:37:10,180
on the Download HAR File,
and there you go.

947
00:37:10,180 --> 00:37:10,980
PETER LUBBERS: Full circle.

948
00:37:10,980 --> 00:37:12,870
ILYA GRIGORIK: So this tool--

949
00:37:12,870 --> 00:37:14,600
and we're only scratching
the surface, here.

950
00:37:14,600 --> 00:37:15,460
We just spent what?

951
00:37:15,460 --> 00:37:17,560
40 minutes talking about
all the different

952
00:37:17,560 --> 00:37:19,120
ways we can use this.

953
00:37:19,120 --> 00:37:22,410
But I think we've only scratched
the surface.

954
00:37:22,410 --> 00:37:23,890
Because we can use
it on the server.

955
00:37:23,890 --> 00:37:27,250
We can use it to automate
performance monitoring.

956
00:37:27,250 --> 00:37:29,240
I think instrumentation
is key.

957
00:37:29,240 --> 00:37:32,690
So having tools like-- combining
tools like HAR

958
00:37:32,690 --> 00:37:35,570
Storage, HAR Viewer and others,
you can literally

959
00:37:35,570 --> 00:37:40,380
build a performance monitoring
dashboard for your site or for

960
00:37:40,380 --> 00:37:43,710
your company in a
couple of hours.

961
00:37:43,710 --> 00:37:44,190
PETER LUBBERS: Yeah, because
there's so many

962
00:37:44,190 --> 00:37:45,440
tools around it.

963
00:37:45,440 --> 00:37:48,960

964
00:37:48,960 --> 00:37:53,490
So let's see if we have
any other questions.

965
00:37:53,490 --> 00:37:57,370
Oh, first of all, the links.

966
00:37:57,370 --> 00:37:59,240
ILYA GRIGORIK: We covered
a lot of stuff in here.

967
00:37:59,240 --> 00:38:02,590
So I actually created a quick
gist of a whole bunch of

968
00:38:02,590 --> 00:38:05,080
different links for some of
the tools that we covered.

969
00:38:05,080 --> 00:38:06,600
I tried to capture
them all here.

970
00:38:06,600 --> 00:38:10,430
So if you guys go to
bit.ly/har-show, you'll find

971
00:38:10,430 --> 00:38:11,300
all the links in there.

972
00:38:11,300 --> 00:38:14,000
And we'll actually also push
out a blog post later today

973
00:38:14,000 --> 00:38:15,920
with a little bit more
information on it.

974
00:38:15,920 --> 00:38:19,085
PETER LUBBERS: Put it on their
Chrome Developers, Google+

975
00:38:19,085 --> 00:38:19,610
page and link to it.

976
00:38:19,610 --> 00:38:20,800
ILYA GRIGORIK: But I would
definitely encourage you guys

977
00:38:20,800 --> 00:38:25,130
to just explore it, play
with the HAR viewer.

978
00:38:25,130 --> 00:38:27,410
Definitely try Phantom and see
what you can do with it.

979
00:38:27,410 --> 00:38:30,100
Actually, one quick
note on Phantom.

980
00:38:30,100 --> 00:38:33,330
When you download the file, it
comes with example files.

981
00:38:33,330 --> 00:38:34,700
I showed you the NetSniff.

982
00:38:34,700 --> 00:38:36,410
There's actually a small
bug in the NetSniff

983
00:38:36,410 --> 00:38:37,910
file, which I fixed.

984
00:38:37,910 --> 00:38:43,780
And you guys should go to the
GitHub page for Phantom and

985
00:38:43,780 --> 00:38:45,480
just copy the latest
NetSniff file.

986
00:38:45,480 --> 00:38:46,660
So it's there, it's fixed.

987
00:38:46,660 --> 00:38:49,500
It's just not on the latest
release, so just FYI.

988
00:38:49,500 --> 00:38:52,090
PETER LUBBERS: We'll make
a note of it on here.

989
00:38:52,090 --> 00:38:54,510
Let's take a look if there's
any questions on the--

990
00:38:54,510 --> 00:38:56,860
OK, there's a couple.

991
00:38:56,860 --> 00:38:59,320
ILYA GRIGORIK: So we got a
question from Steve Sauders.

992
00:38:59,320 --> 00:39:01,950
Wow, I think I know that guy.

993
00:39:01,950 --> 00:39:04,250
"Does a HAR file contain
the response bodies?"

994
00:39:04,250 --> 00:39:07,460
So by default, when you export
out of, let's say, Chrome

995
00:39:07,460 --> 00:39:10,230
Developer Tools, it does not
contain the response body.

996
00:39:10,230 --> 00:39:13,030
But there is no reason
why it can't.

997
00:39:13,030 --> 00:39:14,990
So if you're writing your own
tool, so for example, if

998
00:39:14,990 --> 00:39:19,820
you're scripting Phantom or
something like that, no reason

999
00:39:19,820 --> 00:39:20,840
why you can't include it.

1000
00:39:20,840 --> 00:39:24,380
And I think would be really
cool if, for example, HTTP

1001
00:39:24,380 --> 00:39:26,900
Archive actually stored
the bodies--

1002
00:39:26,900 --> 00:39:30,070
sorry, httparchive.org,
the site.

1003
00:39:30,070 --> 00:39:31,770
And then you could do
more interesting

1004
00:39:31,770 --> 00:39:33,070
analysis over time.

1005
00:39:33,070 --> 00:39:34,500
PETER LUBBERS: Sure.

1006
00:39:34,500 --> 00:39:36,890
They would require a lot
more storage space.

1007
00:39:36,890 --> 00:39:37,980
ILYA GRIGORIK: Yes,
absolutely.

1008
00:39:37,980 --> 00:39:40,270
PETER LUBBERS: I think that's
why it's not there by default.

1009
00:39:40,270 --> 00:39:40,830
ILYA GRIGORIK: Yes.

1010
00:39:40,830 --> 00:39:42,950
Well, exactly.

1011
00:39:42,950 --> 00:39:45,510
PETER LUBBERS: "What about
compressing HAR files?"

1012
00:39:45,510 --> 00:39:46,630
Interesting.

1013
00:39:46,630 --> 00:39:48,800
ILYA GRIGORIK:Well, yeah, as we
saw, we exported one trace,

1014
00:39:48,800 --> 00:39:50,840
5,000 lines of JSON.

1015
00:39:50,840 --> 00:39:53,730
If you're storing these things
over time, you probably want

1016
00:39:53,730 --> 00:39:56,450
to compress them, and they will
compress incredibly well.

1017
00:39:56,450 --> 00:40:01,050

1018
00:40:01,050 --> 00:40:03,610
Coming out of Chrome Dev Tools
or other tools, you're just

1019
00:40:03,610 --> 00:40:05,680
going to get the raw
file, the raw JSON.

1020
00:40:05,680 --> 00:40:08,410
It's up to you if you want to
store it, to archive it-- or,

1021
00:40:08,410 --> 00:40:10,600
sorry, to compress it.

1022
00:40:10,600 --> 00:40:13,030
PETER LUBBERS: So "can the HAR
format be extended to support

1023
00:40:13,030 --> 00:40:15,240
information about requests
that don't make it to the

1024
00:40:15,240 --> 00:40:19,060
server, but instead hit the
cache?" Interesting.

1025
00:40:19,060 --> 00:40:22,270
ILYA GRIGORIK: Actually, if
you capture the-- if you

1026
00:40:22,270 --> 00:40:23,780
export out of Chrome
Dev Tools, it will

1027
00:40:23,780 --> 00:40:25,030
contain that data.

1028
00:40:25,030 --> 00:40:27,180

1029
00:40:27,180 --> 00:40:30,530
If you load your developer
tools, it does show requests

1030
00:40:30,530 --> 00:40:32,030
that are coming from
the cache.

1031
00:40:32,030 --> 00:40:33,050
It actually indicates that.

1032
00:40:33,050 --> 00:40:38,240
And it will be there in
the exported HAR data.

1033
00:40:38,240 --> 00:40:41,390
And the reason they-- usually
the quick way to spot it is

1034
00:40:41,390 --> 00:40:44,160
when you look at those chunks
of JSON, you will see that

1035
00:40:44,160 --> 00:40:46,670
some requests don't have
any HTTP headers.

1036
00:40:46,670 --> 00:40:49,080
That's a giveaway that this
came out of the cache.

1037
00:40:49,080 --> 00:40:52,320

1038
00:40:52,320 --> 00:40:53,570
PETER LUBBERS: A couple more.

1039
00:40:53,570 --> 00:40:58,510

1040
00:40:58,510 --> 00:41:00,670
ILYA GRIGORIK: So "BrowserMob
proxy will capture and produce

1041
00:41:00,670 --> 00:41:01,870
a HAR file.

1042
00:41:01,870 --> 00:41:05,680
And Charles can also be used as
a proxy to generate HAR."

1043
00:41:05,680 --> 00:41:08,740
right, so I think this is more
of a note from Andy, which is

1044
00:41:08,740 --> 00:41:12,290
a really good point, which is we
talked about exporting this

1045
00:41:12,290 --> 00:41:13,740
out of a browser.

1046
00:41:13,740 --> 00:41:18,200
But you can use a tool like
Charles Proxy, or Fiddler, or

1047
00:41:18,200 --> 00:41:20,460
something else where it's
a standalone app.

1048
00:41:20,460 --> 00:41:24,960
So I could actually run a proxy
server on my laptop, and

1049
00:41:24,960 --> 00:41:28,470
then connect from this laptop
here to just proxy everything

1050
00:41:28,470 --> 00:41:31,650
through it, and capture this
data, capture the HAR files on

1051
00:41:31,650 --> 00:41:33,120
this device.

1052
00:41:33,120 --> 00:41:36,420
So that's a really good point.

1053
00:41:36,420 --> 00:41:37,810
PETER LUBBERS: OK, one more.

1054
00:41:37,810 --> 00:41:40,680
"When you were looking at the
HAR viewer, a JPEG appeared as

1055
00:41:40,680 --> 00:41:42,830
the first request rather
than the HTML page.

1056
00:41:42,830 --> 00:41:45,250
Why does this happen?"

1057
00:41:45,250 --> 00:41:46,270
ILYA GRIGORIK: That's
a good question.

1058
00:41:46,270 --> 00:41:48,300
That could be a bug.

1059
00:41:48,300 --> 00:41:55,340
But every request that is made
has a timestamp within the

1060
00:41:55,340 --> 00:41:55,905
actual export.

1061
00:41:55,905 --> 00:41:59,150
So it'll say when the request
started, which is how we

1062
00:41:59,150 --> 00:42:01,490
determine in Dev Tools
where in the

1063
00:42:01,490 --> 00:42:03,350
timeline it should live.

1064
00:42:03,350 --> 00:42:06,280
So I'm not sure if the HAR spec
specifically says that it

1065
00:42:06,280 --> 00:42:07,850
must be sorted in order.

1066
00:42:07,850 --> 00:42:09,170
Maybe it does, maybe
it doesn't.

1067
00:42:09,170 --> 00:42:12,540
But you can easily resort that
data based on the timestamp

1068
00:42:12,540 --> 00:42:15,560
and get the exact timeline.

1069
00:42:15,560 --> 00:42:16,240
Cool.

1070
00:42:16,240 --> 00:42:17,810
So I think that that
covers it.

1071
00:42:17,810 --> 00:42:20,450
PETER LUBBERS: That was great.

1072
00:42:20,450 --> 00:42:23,220
ILYA GRIGORIK: This is
definitely a power tool.

1073
00:42:23,220 --> 00:42:25,800
Lots and lots of stuff that
you can do with it.

1074
00:42:25,800 --> 00:42:29,160
And I think, once again,
instrumentation is key for

1075
00:42:29,160 --> 00:42:32,500
anything to do with
performance.

1076
00:42:32,500 --> 00:42:34,450
PETER LUBBERS: And all these
tools, there's so much support

1077
00:42:34,450 --> 00:42:37,570
for it that this is really the
way to go for all of this--

1078
00:42:37,570 --> 00:42:38,760
ILYA GRIGORIK: Yeah, so I
definitely encourage you guys

1079
00:42:38,760 --> 00:42:40,460
to play with it.

1080
00:42:40,460 --> 00:42:42,300
PETER LUBBERS: So we'll
post the links.

1081
00:42:42,300 --> 00:42:49,320
We'll post it on the Chrome
Developer Google+ page.

1082
00:42:49,320 --> 00:42:51,370
You'll be posting your
blog pretty soon?

1083
00:42:51,370 --> 00:42:53,710
ILYA GRIGORIK: I'll have a blog
post up soon as well,

1084
00:42:53,710 --> 00:42:55,830
just documenting some of
the examples here.

1085
00:42:55,830 --> 00:42:57,370
And then maybe just
one quick note.

1086
00:42:57,370 --> 00:42:58,630
I think we're done with this.

1087
00:42:58,630 --> 00:43:01,240
But in our next episode, we're
actually going to take a look

1088
00:43:01,240 --> 00:43:04,300
at Google web fonts, which
is going to be

1089
00:43:04,300 --> 00:43:05,660
a really fun topic.

1090
00:43:05,660 --> 00:43:06,840
I love web fonts.

1091
00:43:06,840 --> 00:43:09,160
A lot of people have issues with
web fonts when it comes

1092
00:43:09,160 --> 00:43:09,990
to performance.

1093
00:43:09,990 --> 00:43:14,050
So we're going to do a deep dive
on what it takes to make

1094
00:43:14,050 --> 00:43:16,920
web fonts fast and what Google
Web Fonts specifically does to

1095
00:43:16,920 --> 00:43:17,980
make web fonts fast.

1096
00:43:17,980 --> 00:43:19,270
PETER LUBBERS: And that's
in two weeks?

1097
00:43:19,270 --> 00:43:20,130
Same time, right?

1098
00:43:20,130 --> 00:43:21,030
ILYA GRIGORIK: Yep, two weeks.

1099
00:43:21,030 --> 00:43:22,710
So yeah, Tuesday.

1100
00:43:22,710 --> 00:43:24,410
PETER LUBBERS: We'll
announce it.

1101
00:43:24,410 --> 00:43:25,010
Excellent.

1102
00:43:25,010 --> 00:43:25,690
ILYA GRIGORIK: Awesome.

1103
00:43:25,690 --> 00:43:26,470
Thank you guys.

1104
00:43:26,470 --> 00:43:27,592
PETER LUBBERS: Thanks a lot.

1105
00:43:27,592 --> 00:43:35,960
[MUSIC PLAYING]

1106
00:43:35,960 --> 00:43:55,000

