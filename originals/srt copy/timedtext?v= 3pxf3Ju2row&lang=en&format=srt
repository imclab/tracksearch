1
00:00:01,260 --> 00:00:08,260
>>Sam Dutton: Hi, everyone. I think we're
ready to begin if you would like to take a

2
00:00:08,830 --> 00:00:10,040
seat.
Glad to see everyone here. Yeah, we're here

3
00:00:10,040 --> 00:00:13,390
to talk about the Chrome Development Tools
today. If you are here for something else,

4
00:00:13,390 --> 00:00:16,209
I think you should stay because it will be
a really good session.

5
00:00:16,209 --> 00:00:20,449
My name is Sam Dutton, I'm a developer advocate
for Google Chrome. I'm based in London.

6
00:00:20,449 --> 00:00:23,850
>>Pavel Feldman: And I'm Pavel Feldman, software
engineer working at Google Chrome.

7
00:00:23,850 --> 00:00:27,630
>>Sam Dutton: And yeah, we're going to show
you some great new features in Tools and hopefully

8
00:00:27,630 --> 00:00:32,180
some stuff that can make your life easier
as a developer.

9
00:00:32,180 --> 00:00:39,180
You know, 2012 has just been an incredible
year on the Web. I was looking back at the

10
00:00:40,059 --> 00:00:46,710
session that Pavel did with -- Paul Irish
is in the house somewhere -- last year, and

11
00:00:46,710 --> 00:00:52,379
it amazes me how much the Chrome Tools have
evolved in that time, how much the Web has

12
00:00:52,379 --> 00:00:57,620
changed in that time.
It just seems like the normal thing now for

13
00:00:57,620 --> 00:01:02,699
you guys to be building these apps that are
incredibly complex and really pushing the

14
00:01:02,699 --> 00:01:08,690
limits of development on the clients' side.
And I think that one thing I've found is that

15
00:01:08,690 --> 00:01:15,220
in a context, you know, a really great text
editor just isn't always enough. And with

16
00:01:15,220 --> 00:01:22,220
that in mind I think that's where the Chrome
Dev Tools come in. So what are we going to

17
00:01:22,220 --> 00:01:26,780
talk about today? Well, we're going to run
through some tools that we hope will boost

18
00:01:26,780 --> 00:01:33,360
your productivity. And we'll also be looking
in some detail at using the tools to do mobile

19
00:01:33,360 --> 00:01:40,360
Web developments. We'll also be looking at
this idea of responsiveness. You know, what

20
00:01:40,700 --> 00:01:45,920
is it? How do we measure it and how do we
deal with it in a scientific way rather than

21
00:01:45,920 --> 00:01:50,290
with guesswork?
And you know, in a balance to that, also looking

22
00:01:50,290 --> 00:01:55,720
at memory and making sure that we stay on
top of that.

23
00:01:55,720 --> 00:02:00,840
And all through this we'll be looking at a
whole bunch of new features in the Tools.

24
00:02:00,840 --> 00:02:07,840
But first, we just wanted to say, you know,
I really big tip of the hat to all the people

25
00:02:08,340 --> 00:02:14,310
who have contributed to the Tools in the last
year with bug reports, feature requests and,

26
00:02:14,310 --> 00:02:19,870
you know, by committing code.
We've got a list here of some stuff, just

27
00:02:19,870 --> 00:02:25,280
touching the surface of stuff that's been
put into the Tools in the last year just from

28
00:02:25,280 --> 00:02:30,379
user requests and user codes, you know, fantastic
contributions, really good stuff.

29
00:02:30,379 --> 00:02:36,730
Just to pick on one of these things, this
business of caching. Caching is a good thing,

30
00:02:36,730 --> 00:02:41,760
but it can be a real pain for developers.
Particularly when you're dealing with situations

31
00:02:41,760 --> 00:02:47,560
where assets are being loaded dynamically
after the onload event and in those situations

32
00:02:47,560 --> 00:02:52,340
a hard reload or whatever just isn't enough.
So we have two new features in the tools.

33
00:02:52,340 --> 00:02:56,879
From the network panel you can right-click
and clear the browser cache or you can even

34
00:02:56,879 --> 00:03:03,879
just turn off caching from the settings page.
So yeah, great stuff from our users, and we're

35
00:03:03,959 --> 00:03:08,010
really grateful for that.
So with that in mind, we've got this roomful

36
00:03:08,010 --> 00:03:13,499
of great developers, we thought we would take
this opportunity to try and get from you guys

37
00:03:13,499 --> 00:03:18,840
some ideas about what you would like right
here, right now, to see next in the Tools.

38
00:03:18,840 --> 00:03:22,129
You know, what challenges are you facing now?
What would you like to see?

39
00:03:22,129 --> 00:03:24,749
Pavel?
>>Pavel Feldman: Right, guys, that's your

40
00:03:24,749 --> 00:03:29,969
only opportunity, unique opportunity, to request
something, and even without filing a bug I

41
00:03:29,969 --> 00:03:34,389
will be implementing it for you. So please
shout out what you want from the devtools

42
00:03:34,389 --> 00:03:37,590
and we'll type it in and we'll make sure it's
not lost.

43
00:03:37,590 --> 00:03:44,590
>>Sam Dutton: Right here, right now, shout
it out.

44
00:03:44,879 --> 00:03:51,879
>>> [Inaudible - No Mic].
>>Sam Dutton: Okay, next, please.

45
00:03:58,530 --> 00:04:05,530
>>> [Inaudible - No Mic].
>>> [Inaudible - No Mic].

46
00:04:08,760 --> 00:04:14,049
>>Sam Dutton: Thanks very much.
One here.

47
00:04:14,049 --> 00:04:19,590
>>> [Inaudible - No Mic]
>>Sam Dutton: And while on this side?

48
00:04:19,590 --> 00:04:23,580
>>> [Inaudible - No Mic].
>>Sam Dutton: That we already have.

49
00:04:23,580 --> 00:04:28,880
>>Pavel Feldman: Let me put it in. I will
be happy to file the bug and close it.

50
00:04:28,880 --> 00:04:35,880
>>Sam Dutton: Okay. Down the front.
>>> Storing edited CSS.

51
00:04:36,050 --> 00:04:43,050
>>> [Inaudible - No Mic].
>>Sam Dutton: Okay. And who else down in the

52
00:04:50,680 --> 00:04:54,500
front?
>>> [Inaudible - No Mic].

53
00:04:54,500 --> 00:05:00,230
>>Sam Dutton: Here.
>>> [Inaudible - No Mic].

54
00:05:00,230 --> 00:05:05,970
>>Sam Dutton: Yes?
>>> [Inaudible - No Mic].

55
00:05:05,970 --> 00:05:12,970
>>Sam Dutton: Maybe two more.
>>> [Inaudible - No Mic].

56
00:05:13,610 --> 00:05:20,060
>>Sam Dutton: Like by the system in other
words, like for San Serif or whatever. Behind

57
00:05:20,060 --> 00:05:22,670
you there.
>>> Bigger text in the developer tools.

58
00:05:22,670 --> 00:05:25,000
>>Sam Dutton: Ah, we can help you with that.
Bigger text.

59
00:05:25,000 --> 00:05:28,260
>>Pavel Feldman: Bigger text.
>>Sam Dutton: And right out the back.

60
00:05:28,260 --> 00:05:33,800
>>> Support for CSS preprocessors.
>>Sam Dutton: Yes. Good, good. That's fantastic.

61
00:05:33,800 --> 00:05:40,800
>>Pavel Feldman: Okay. That's a good list.
I'm happy to say that at least half of it

62
00:05:42,150 --> 00:05:43,900
is already implemented.
[ Laughter ]

63
00:05:43,900 --> 00:05:50,120
>>Sam Dutton: That's great. We'll take that.
>>Pavel Feldman: So I'm making sure it is

64
00:05:50,120 --> 00:05:54,830
not lost. I'll be filing those by myself and
probably will be implementing some of those

65
00:05:54,830 --> 00:05:58,140
personally.
>>Sam Dutton: And I'll be following him around

66
00:05:58,140 --> 00:06:01,660
with a whip.
[ Applause ]

67
00:06:01,660 --> 00:06:06,000
>>Sam Dutton: So you know, like one of the
things -- another thing we've noticed over

68
00:06:06,000 --> 00:06:12,000
the last 12 months or so is that people are
using the tools now more for actually writing

69
00:06:12,000 --> 00:06:16,300
code, for building interfaces, not just for
debugging.

70
00:06:16,300 --> 00:06:22,710
And with that in mind, when the devtools team
have built in some great features for working

71
00:06:22,710 --> 00:06:29,020
in the tools in that way, and I was thinking
about just how to demonstrate it, how it increases

72
00:06:29,020 --> 00:06:33,800
productivity, and I was thinking about the
devtools team themselves, like the devtools

73
00:06:33,800 --> 00:06:39,980
team build the devtools to build the devtools.
And good developers are really productive,

74
00:06:39,980 --> 00:06:46,770
so who better to ask about productivity than
Pavel Feldman. It would be a good opportunity

75
00:06:46,770 --> 00:06:51,180
to give Pavel Feldman a chance to give us
a master class, show us how he works.

76
00:06:51,180 --> 00:06:55,120
>>Pavel Feldman: Now I feel flattered.
Okay. Before we jump into the demos, let me

77
00:06:55,120 --> 00:07:01,050
say a few words about the productivity. What
do we expect from the Tools for productivity?

78
00:07:01,050 --> 00:07:07,410
And for me it is getting into the source into
where I need to fast. And being a part of

79
00:07:07,410 --> 00:07:12,140
the screen or an action or a process, I like
to jump instantly into the source code that

80
00:07:12,140 --> 00:07:15,790
is responsible for this action.
And vice versa, while looking at the source

81
00:07:15,790 --> 00:07:21,220
I want to know what it is responsible for,
how do I get the part of the screen that it

82
00:07:21,220 --> 00:07:24,200
paints?
While in the source code I am interested in

83
00:07:24,200 --> 00:07:29,640
changing it and more importantly I'm interesting
in seeing an immediate feedback.

84
00:07:29,640 --> 00:07:36,640
And for those of you who have seen the Bret
Victor's "Inventing on Principle" talk, if

85
00:07:37,800 --> 00:07:42,950
you haven't, please make sure you check it
out. That's an image from Bret's slides.

86
00:07:42,950 --> 00:07:48,330
So the main principle Bret is talking about
is the instant feedback. And as he goes through

87
00:07:48,330 --> 00:07:53,940
his demos it is clear that the instant feedback
not only increases your productivity, makes

88
00:07:53,940 --> 00:07:59,500
you do things faster, but it also boosts your
creativity, because when things are reflected

89
00:07:59,500 --> 00:08:05,200
fast, when you have an instant feedback, you
start experimenting. You go through the states

90
00:08:05,200 --> 00:08:09,960
that you have otherwise not visit.
Now that you have changed the source code

91
00:08:09,960 --> 00:08:14,170
and you've seen the feedback, the essential
part of the tool is to persist it.

92
00:08:14,170 --> 00:08:21,170
So let me show you how these map into the
devtools features.

93
00:08:21,710 --> 00:08:28,710
I just started Chrome Canary, and it is a
version of Chrome that is being updated on

94
00:08:32,060 --> 00:08:38,340
your machine daily. It is built from the tip
of the tree sources from WebKit and Chrome

95
00:08:38,340 --> 00:08:43,880
and contains all the features that are implemented
by this date, including the devtools ones.

96
00:08:43,880 --> 00:08:48,960
So if you are a Web developer and you would
like to make sure that everything works perfectly

97
00:08:48,960 --> 00:08:53,760
on the next version of Chrome or if you'd
like to use the tip of the tree devtools,

98
00:08:53,760 --> 00:08:58,360
please use the Canary and please provide us
with your feedback.

99
00:08:58,360 --> 00:09:04,230
But more importantly, Canary can run side
by side with your Chrome browser, so you no

100
00:09:04,230 --> 00:09:09,450
longer need to choose whether you want to
be on the Dev channel or Beta channel or Stable

101
00:09:09,450 --> 00:09:16,450
to test for the changes, just have those two
installed and that will be very convenient.

102
00:09:17,900 --> 00:09:24,900
Oh, I have no connectivity. Sorry. It just
plugged out.

103
00:09:28,040 --> 00:09:33,950
So I'm navigating to the WebKit.org. And WebKit
is the project where most of the Chrome devtools

104
00:09:33,950 --> 00:09:38,040
source code belongs. We develop devtools fronted
upstream.

105
00:09:38,040 --> 00:09:45,040
Let me load it once again.
Okay. Let's go to the backup plan. We have

106
00:09:51,990 --> 00:09:58,150
a backup plan, don't we?
Yeah, we do.

107
00:09:58,150 --> 00:10:04,150
[ Laughter ]
>>Pavel Feldman: So that's the WebKit. And

108
00:10:04,150 --> 00:10:08,339
I'm going to do a lot of demos on the devtools,
and we're going to hack devtools today, and

109
00:10:08,339 --> 00:10:12,390
after this session you will be able to contribute
your source code into the devtools yourself.

110
00:10:12,390 --> 00:10:19,230
Now, I'm going to debug this page, but before
I -- I'm not going to open the devtools using

111
00:10:19,230 --> 00:10:26,230
the command option I, I'll do it different
then.

112
00:10:27,360 --> 00:10:34,360
I'm using remote debugging to start inspecting
my page. And as you can see, remote debugging

113
00:10:38,700 --> 00:10:45,700
works as a regular devtools. You can see the
devtools is opened as a Web page. I can do

114
00:10:47,110 --> 00:10:52,460
that because developer tools uses clients
server architecture where browser acts as

115
00:10:52,460 --> 00:10:57,860
a server and a front end acts as a client.
So the devtools that you have in your browser

116
00:10:57,860 --> 00:11:03,890
is in fact a Web app read in HTML, JavaScript,
CSS, and it's talking to the backup using

117
00:11:03,890 --> 00:11:10,339
Web Sockets. Did you know that?
Okay, good.

118
00:11:10,339 --> 00:11:17,339
Now, it's -- is it okay? Now it's time to
debug. And as you can see, I open the devtools

119
00:11:22,070 --> 00:11:29,070
doc to the right and let me [Indiscernible].
Here we go.

120
00:11:29,520 --> 00:11:35,010
So what we are going to do here today is we
are going to hack on the devtools itself because

121
00:11:35,010 --> 00:11:40,960
I'm a devtools engineer. I want to show you
what I'm doing everyday.

122
00:11:40,960 --> 00:11:47,080
So that's regular old stuff. This is your
Web page to the left. In my case it's devtools.

123
00:11:47,080 --> 00:11:49,300
And that's your devtools to the right.
[ Laughter ]

124
00:11:49,300 --> 00:11:54,980
>>Sam Dutton: Pavel's life is so meta.
>>Pavel Feldman: So we get a bit of inception

125
00:11:54,980 --> 00:12:01,980
here, so don't get confused.
Okay. Now, I've been working lately on the

126
00:12:02,190 --> 00:12:07,210
timeline features. And as I was editing the
timeline features, I noticed the timeline

127
00:12:07,210 --> 00:12:10,670
does not really look like the rest of the
Chrome.

128
00:12:10,670 --> 00:12:13,960
We implemented it in WebKit, we were using
these colorful gradients, 3D loops, we don't

129
00:12:13,960 --> 00:12:18,100
really do that in Chrome, so I needed to fix
it.

130
00:12:18,100 --> 00:12:21,399
And when you were working in a UI like that,
you need to go back and forth between the

131
00:12:21,399 --> 00:12:26,240
page and your source code until what you see
satisfies you.

132
00:12:26,240 --> 00:12:32,790
Let's try to recreate this experience right
now. I'm recording a couple of timelines in

133
00:12:32,790 --> 00:12:39,790
here, and if you can see those gray zebra
bars in the central part of the timeline,

134
00:12:41,240 --> 00:12:43,529
let me make them a bit more conscious for
you.

135
00:12:43,529 --> 00:12:50,060
To do that I'm using the inspect element tool
to locate the actual code responsible for

136
00:12:50,060 --> 00:12:56,300
the zebra bar. And in here I can play around
with its colors using the color meter. Let

137
00:12:56,300 --> 00:13:03,300
me increase it or maybe play with the color.
And I can do it dynamically in here. I have

138
00:13:04,700 --> 00:13:10,390
a range of values I am choosing. And that's
really a simplistic example of what Bret was

139
00:13:10,390 --> 00:13:14,770
talking about, because as I go through these
ranges I was just going to bump the conscious

140
00:13:14,770 --> 00:13:19,720
a bit, but now I like the different color
I can accept it.

141
00:13:19,720 --> 00:13:26,720
Let's check if the sources were updated. And
they were updated, so that's my new color.

142
00:13:26,950 --> 00:13:32,839
Nice. But I think we have a bug because in
the top part of this grid you can see the

143
00:13:32,839 --> 00:13:37,130
overview. It also has the zebra bar, but it
was not updated.

144
00:13:37,130 --> 00:13:41,630
We are probably doing a bad job, we don't
use constants here or the style we're using

145
00:13:41,630 --> 00:13:45,670
is different.
Let me do the same thing with the top area.

146
00:13:45,670 --> 00:13:52,670
So I inspect it. Whoa. That's not CSS, so
it's not going to work like that. We all love

147
00:13:55,180 --> 00:13:59,750
CSS because it's declarative language. You
change a value and you get an instant feedback,

148
00:13:59,750 --> 00:14:04,490
everything updated live.
Canvas is just JavaScript, imperative language.

149
00:14:04,490 --> 00:14:09,029
Painting on a canvas, you can't go into the
source code and change things dynamically,

150
00:14:09,029 --> 00:14:14,220
or can you?
For that let us try and find out what source

151
00:14:14,220 --> 00:14:19,180
code is responsible for this painting.
Remember we want to go from the screen into

152
00:14:19,180 --> 00:14:23,220
the source code.
For that I'm using command alt F, and I'm

153
00:14:23,220 --> 00:14:30,220
just going to search for canvas. And it searches
through all my source project, and through

154
00:14:30,890 --> 00:14:36,700
the entire project. As you can see, we have
a number of components that are using canvas,

155
00:14:36,700 --> 00:14:43,700
but I think the timeline overview pane is
the one that I need, so I'm jumping to it.

156
00:14:45,420 --> 00:14:50,070
And while we are here let me say a few words
about the new sources panel. So the sources

157
00:14:50,070 --> 00:14:54,320
panel is the one where you are dealing with
your source code. You are going to view it

158
00:14:54,320 --> 00:14:58,600
there, you are going to modify it there, you
are going to save it there, you're going to

159
00:14:58,600 --> 00:15:02,980
jump on to the source code from your URL,
so we need more real estate for that.

160
00:15:02,980 --> 00:15:09,980
For that we now have collapsible debugger
sidebars and expandable tree view with all

161
00:15:10,600 --> 00:15:16,050
of your sources. And remember Web scales you
need a lot of space for the list of your files.

162
00:15:16,050 --> 00:15:20,620
But do you know what? You don't really need
it at all times on your screen because you

163
00:15:20,620 --> 00:15:27,620
can hit command O and jump to any file instantly.
As I type, the list narrows down and I can

164
00:15:27,959 --> 00:15:33,630
jump into a particular file or even a particular
line number.

165
00:15:33,630 --> 00:15:40,630
[ Applause ]
>>Pavel Feldman: Now, remember what were we

166
00:15:41,240 --> 00:15:45,339
doing? We were looking for canvas, right?
So let us search for canvas.

167
00:15:45,339 --> 00:15:52,339
There are a lot of occurrences. Does not work.
Or let us go through -- oh, the methods. I'm

168
00:15:52,920 --> 00:15:58,709
pressing command shift O and I get a list
of all the functions in this file. And the

169
00:15:58,709 --> 00:16:04,040
same very thing will work for your selectors
in the style sheet. And as I type, the list

170
00:16:04,040 --> 00:16:08,779
narrows down and I can jump to a particular
function, but unfortunately there is no clue

171
00:16:08,779 --> 00:16:14,430
on the canvas and the zebra stripes, so let's
go on.

172
00:16:14,430 --> 00:16:20,490
But I think I have an idea. I think this code
uses the same color of the CSS. Do you remember

173
00:16:20,490 --> 00:16:25,100
the color? What was the color there?
>>> [Inaudible - No Mic].

174
00:16:25,100 --> 00:16:31,700
>>Pavel Feldman: 50% gray? Any more options?
So let's see if you're right.

175
00:16:31,700 --> 00:16:38,700
I'm pressing control -- I'm using the context
menu, control click in my case, and I'm looking

176
00:16:39,320 --> 00:16:44,610
for local modifications, and I can see all
the files that were edited within this editing

177
00:16:44,610 --> 00:16:46,980
session.
[ Applause ]

178
00:16:46,980 --> 00:16:53,980
>>Pavel Feldman: And let me search for the
old color definition. Here you go. Let me

179
00:16:54,320 --> 00:16:58,950
grab the new one. Okay.
>>> [Inaudible - No Mic].

180
00:16:58,950 --> 00:17:05,429
>>Pavel Feldman: I am using context menu,
local modifications. We'll go there in a bit.

181
00:17:05,429 --> 00:17:11,079
Now, I'm replacing the code with a new value.
And unlike in Bret's demos, unfortunately

182
00:17:11,079 --> 00:17:16,260
the screen is not updated, but the reason
is that we are not using requestAnimationFrame

183
00:17:16,260 --> 00:17:22,510
to paint our canvas painting. We updated upon
resize or any event that is being painted

184
00:17:22,510 --> 00:17:25,709
in this overview.
Let us try and keep those modifications while

185
00:17:25,709 --> 00:17:31,380
resizing.
Here you go.

186
00:17:31,380 --> 00:17:36,160
So what happened under the hood is the V8
driven live edit, step in place, so when I

187
00:17:36,160 --> 00:17:41,590
save the file the actual machine code generated
for that source file, for that JavaScript,

188
00:17:41,590 --> 00:17:48,170
was patched at runtime. And any subsequent
execution of that code was using the new code.

189
00:17:48,170 --> 00:17:54,090
Now, let's see if the local modifications,
it's a context menu in here or in the scripts

190
00:17:54,090 --> 00:18:01,090
navigator to the left, captured our changes.
And of course, they are here.

191
00:18:01,100 --> 00:18:06,870
Now, let's see if we actually like them. I'm
going to go ahead and apply original content

192
00:18:06,870 --> 00:18:12,980
for top and bottom areas.
And, no, I like the new way more, okay. Applying

193
00:18:12,980 --> 00:18:18,730
the revision content. I'm keeping the changes
again. So as you can see, you can experiment

194
00:18:18,730 --> 00:18:25,120
with the revisions of your edited source files,
be it JavaScript or CSS. Now that we have

195
00:18:25,120 --> 00:18:31,990
edited all, we need to save it. And for that
we are going to use context menu and save

196
00:18:31,990 --> 00:18:36,900
as. Here you can bind your source file to
the file system location and all of the subsequent

197
00:18:36,900 --> 00:18:42,809
saves are going to write to that location.
Or you can do something more interesting.

198
00:18:42,809 --> 00:18:48,480
You can actually install an extension, Chrome
extension, from the Web store. I'm using a

199
00:18:48,480 --> 00:18:54,170
(indiscernible) device devtools have to save
for that. And my extension is installed and

200
00:18:54,170 --> 00:19:01,170
configured. So that it mapped the particular
-- the URL into the particular location of

201
00:19:03,650 --> 00:19:08,330
my file system. Once I mapped it, everything
else just happens automatically.

202
00:19:08,330 --> 00:19:15,330
Let's go and -- go ahead and see if the changes
are in place.

203
00:19:16,480 --> 00:19:23,320
And here they are.
So the changes were indeed persistent in the

204
00:19:23,320 --> 00:19:28,260
file system and I was not doing anything for
that.

205
00:19:28,260 --> 00:19:35,260
[ Applause ]
>>Pavel Feldman: Okay. Yeah. Thank you. So

206
00:19:35,590 --> 00:19:40,309
now that's the -- that's the productivity
story. We can jump into the source file, we

207
00:19:40,309 --> 00:19:45,620
can change it to immediate feedback persistent,
but it's really easy to provide such an instant

208
00:19:45,620 --> 00:19:49,890
feedback when you are working on a desktop,
because both your page and the devtools are

209
00:19:49,890 --> 00:19:54,920
on the same screen in the same box. Wouldn't
it be great if the same experience could exist

210
00:19:54,920 --> 00:19:59,710
while you are working for mobile. Sam?
>>Sam Dutton: Well, yeah, the good news is

211
00:19:59,710 --> 00:20:06,710
that the devtools are available now for mobile.
The devtools team have done a huge amount

212
00:20:07,510 --> 00:20:14,230
of work over the last year to implement remote
debugging in WebKit, and we are really pleased

213
00:20:14,230 --> 00:20:21,230
to see this code being used across the industry
now. Because there is no better way to -- to

214
00:20:21,750 --> 00:20:28,640
get a really good impression of what your
Web app is actually like out in the world

215
00:20:28,640 --> 00:20:34,549
than to do remote debugging via USB on a real
device that's getting real 2G, 3G, whatever

216
00:20:34,549 --> 00:20:38,660
real connectivity. And, yeah, we would like
to show you that right now, actually.

217
00:20:38,660 --> 00:20:41,290
>>Pavel Feldman: Let me check it now. Internet
connection?

218
00:20:41,290 --> 00:20:44,970
>>Sam Dutton: We've got internet?
>>Pavel Feldman: Yeah.

219
00:20:44,970 --> 00:20:49,590
>>Sam Dutton: That's good. Okay. So it's really
easy to set up. We go to the device. You need

220
00:20:49,590 --> 00:20:52,040
to log me in here.
>>Pavel Feldman: Okay, sure. I won't be showing

221
00:20:52,040 --> 00:20:59,040
it to you. Sorry.
>>Sam Dutton: So on the device in Chrome,

222
00:20:59,990 --> 00:21:01,710
you need to go to settings.
>>Pavel Feldman: There you go.

223
00:21:01,710 --> 00:21:08,030
>>Sam Dutton: And from there you can go to
--

224
00:21:08,030 --> 00:21:12,520
>>Pavel Feldman: Wait, let me do it for you.
>>Sam Dutton: Yeah. Okay. Get the right one

225
00:21:12,520 --> 00:21:15,419
so I can see what I'm doing. In settings,
you go to developer tools, then make sure

226
00:21:15,419 --> 00:21:22,419
that enable Web USB debugging is enabled.
That's all you need to do on Chrome on the

227
00:21:23,840 --> 00:21:30,840
device. And -- and now we have installed the
Android SDK on the desktop and then run port

228
00:21:31,650 --> 00:21:38,240
forwarding, ADB port forwarding so that now
we can look at Port 9223, which will show

229
00:21:38,240 --> 00:21:42,710
all of the pages that are open on the mobile
device.

230
00:21:42,710 --> 00:21:47,840
We'll just open up YouTube now. And you can
see what's going on there.

231
00:21:47,840 --> 00:21:50,640
>>Pavel Feldman: Yeah.
>>Sam Dutton: There we go.

232
00:21:50,640 --> 00:21:54,380
>>Pavel Feldman: That's opened up.
>>Sam Dutton: Right, so we have got devtools

233
00:21:54,380 --> 00:21:59,049
there for the mobile device there.
>>Pavel Feldman: Right.

234
00:21:59,049 --> 00:22:02,190
[ Applause ]
>>Pavel Feldman: Thank you.

235
00:22:02,190 --> 00:22:08,000
So now let's see how it works. Of course,
you can do simple stuff. So as I hover here,

236
00:22:08,000 --> 00:22:12,080
you get areas in the screen of data.
[ Applause ]

237
00:22:12,080 --> 00:22:17,980
>>Pavel Feldman: All right. Or you can go
vice versa, and Sam could you click on an

238
00:22:17,980 --> 00:22:24,799
image here. Yeah. And here it is. The image
that Sam has been clicking. You can see it

239
00:22:24,799 --> 00:22:29,690
big in here. But that's simple, right, you
can modify DOM here or play with the CSS,

240
00:22:29,690 --> 00:22:32,860
but that's all simple, you can do it with
the other tools as well.

241
00:22:32,860 --> 00:22:39,860
But as Sam was saying, you could do some interesting
things with the mobile handset. For example,

242
00:22:40,320 --> 00:22:44,280
let's go to the network.
While I'm on the network panel, I'm pressing

243
00:22:44,280 --> 00:22:49,299
command R, to reload the target page. It usually
reloads the target page for the devtools,

244
00:22:49,299 --> 00:22:56,299
but in this case it reloaded the YouTube.
What you can see in here is the precise network

245
00:22:57,049 --> 00:23:02,730
information. That with the DNS connecting,
sending, waiting numbers, for your cellular

246
00:23:02,730 --> 00:23:08,500
network, for 2G, 3G, taken from the network
stack, from this various device, so that's

247
00:23:08,500 --> 00:23:14,220
the actual information in milliseconds came
from this native network stack. Of course

248
00:23:14,220 --> 00:23:18,559
you have all of the other information, all
of the previews, responses, cookies, everything

249
00:23:18,559 --> 00:23:23,400
that is available in the devtools, but again
it's the mobile. Let's say you want something

250
00:23:23,400 --> 00:23:30,400
more complex. You want to see how the cell
phone performs on your tasks. So I'm reloading

251
00:23:30,830 --> 00:23:36,290
the YouTube again, and timeline shows me not
only network events but also the style recalculation

252
00:23:36,290 --> 00:23:42,380
or JavaScript execution that happened on this
very CPU architecture, different from my box,

253
00:23:42,380 --> 00:23:49,380
at this very CPU this handset is running.
Or even more fun stuff. Let's do some breakpoints

254
00:23:50,470 --> 00:23:57,470
in here. I'm going to set a breakpoint. Oh,
I have one on the mouse click. Can you click

255
00:23:58,250 --> 00:24:01,770
it again? Here you go. You stopped on the
breakpoint in the cell phone, all of the regular

256
00:24:01,770 --> 00:24:08,130
devtools features are available here, so you
can prettyprint, I can step through my execution

257
00:24:08,130 --> 00:24:15,130
and everything just works.
So that's all of the devtools features, full-fledged

258
00:24:15,940 --> 00:24:20,370
developer tools running against the mobile.
[ Applause ]

259
00:24:20,370 --> 00:24:27,370
>>Pavel Feldman: Take it from there.
>>Sam Dutton: That's fantastic stuff. So the

260
00:24:35,060 --> 00:24:39,750
-- I guess looking at the other side of it,
one thing that we've learned after kinda 12

261
00:24:39,750 --> 00:24:46,750
months of remote debugging is that of course
in lots of situations, it's most the best

262
00:24:47,270 --> 00:24:53,950
thing to do to begin by doing as much as you
can on the desktop tools. But, of course,

263
00:24:53,950 --> 00:24:59,809
for that what you would need is really accurate
emulation tools. And the devtools team has

264
00:24:59,809 --> 00:25:03,600
been working really hard on putting a lot
of those features into those tools, which

265
00:25:03,600 --> 00:25:06,840
we will show some of that now, I think.
>>Pavel Feldman: Sure.

266
00:25:06,840 --> 00:25:13,840
>>Sam Dutton: We'll go over here. So we go
over to YouTube. Let's open it over here.

267
00:25:17,559 --> 00:25:24,559
There we go. So we've got -- yeah, we've got
the desktop version there, and the remote

268
00:25:30,360 --> 00:25:37,289
version over there. Now, I would like to go
to the settings in the developer tools. And

269
00:25:37,289 --> 00:25:44,289
if I go into there, and -- and let's -- let's
go to the user agent panel there. You can

270
00:25:44,730 --> 00:25:50,510
see the tabs now in the settings. And if I
click on user agent, now what's -- it's a

271
00:25:50,510 --> 00:25:52,230
Galaxy Nexus --
>>Pavel Feldman: It's a Galaxy Nexus, yes.

272
00:25:52,230 --> 00:25:58,330
Does anyone have one?
>>Sam Dutton: Yes, so I will select that now.

273
00:25:58,330 --> 00:26:05,330
And -- and that's -- let's refresh that. You
can see we've got a really accurate representation

274
00:26:07,220 --> 00:26:14,220
of what it actually looks like on the mobile
device. And let's just -- in fact, this little

275
00:26:15,030 --> 00:26:19,600
button here, I don't know if you can see that,
it kind of swaps from portrait to landscape

276
00:26:19,600 --> 00:26:24,720
mode pretty handy. So if I click that and
just zoom out again, you can see now again

277
00:26:24,720 --> 00:26:30,080
we have got a really accurate representation.
One thing that we've got here, you know, it's

278
00:26:30,080 --> 00:26:35,559
not kind of faking it. You will be able to
use Media Queries for this and it will work,

279
00:26:35,559 --> 00:26:41,360
so, yeah, really handy stuff. I will turn
that off.

280
00:26:41,360 --> 00:26:44,780
[ Applause ]
>>Sam Dutton: And obviously another crucial

281
00:26:44,780 --> 00:26:51,780
feature when you are trying to build for mobile
devices is touch. And if we go to this example,

282
00:26:54,760 --> 00:27:00,000
it's -- it gives us, you know, the ability
to see how touch works. The only problem being

283
00:27:00,000 --> 00:27:01,410
--
>>Pavel Feldman: Override. You --

284
00:27:01,410 --> 00:27:04,600
>>Sam Dutton: Sorry, I left the override on
there.

285
00:27:04,600 --> 00:27:08,140
>>Pavel Feldman: Yeah.
>>Sam Dutton: Okay, just refresh that. And,

286
00:27:08,140 --> 00:27:12,600
yeah, so what you can do here is use touchevents,
but, you know, it doesn't work obviously.

287
00:27:12,600 --> 00:27:18,530
What we have in the tools is the ability now
to emulate touchevents and you can set breakpoints

288
00:27:18,530 --> 00:27:23,860
and so on, there we have it.
I'm using touch there on the desktop device.

289
00:27:23,860 --> 00:27:26,780
So, yeah, really handy tool.
>>Pavel Feldman: So you were just dragging

290
00:27:26,780 --> 00:27:33,780
your mouse and it was emulating the touch.
>>Sam Dutton: Right, yeah, that's good stuff.

291
00:27:36,220 --> 00:27:41,830
So, um, I would like to just kind of I don't
know shift focus a little bit now. We've talked

292
00:27:41,830 --> 00:27:47,559
a lot about the parts of the tools that make
your life easier as a developer. Also, you

293
00:27:47,559 --> 00:27:53,740
know, thinking about the users of your apps.
What's in it for them?

294
00:27:53,740 --> 00:27:57,929
And, you know, particularly in this world
we have now where users really come to expect

295
00:27:57,929 --> 00:28:03,669
from Web apps these, you know, these new features
that really push the limits of the CPU and

296
00:28:03,669 --> 00:28:10,669
GPU and memory and so on and, you know, in
that context, in particular, how do we -- how

297
00:28:10,679 --> 00:28:17,070
do we measure responsiveness? You know, this
idea like what is it, how do we measure it?

298
00:28:17,070 --> 00:28:23,179
And luckily, we have some tools for that.
I was thinking in particular, you know, a

299
00:28:23,179 --> 00:28:30,179
website you may have seen called HTML5rocks.
It's got a really nice interface, really great

300
00:28:30,460 --> 00:28:34,230
content. But we've noticed some, you know,
just slight stuttering, it's hard to see here.

301
00:28:34,230 --> 00:28:41,230
But some slight stuttering with scrolling
on the page and, you know, the thing was coming

302
00:28:41,450 --> 00:28:45,830
at that problem -- you know, there are a million
things it could have been. And what I wanted

303
00:28:45,830 --> 00:28:50,220
to know from Pavel is how do we approach that
problem where you really kind of have no idea

304
00:28:50,220 --> 00:28:54,280
where to start.
So, yeah, I thought maybe you could give us

305
00:28:54,280 --> 00:28:56,159
hints there.
>>Pavel Feldman: Yeah, of course. So you start

306
00:28:56,159 --> 00:29:00,630
with the timeline when you don't know what's
happening in the page, especially if you have

307
00:29:00,630 --> 00:29:03,330
performance issues in the page, you start
with the timeline.

308
00:29:03,330 --> 00:29:10,030
So let us record a timeline in here. I will
do devtools to get a bit more real estate

309
00:29:10,030 --> 00:29:16,600
in here. And in the timeline, I am pressing
record the record button and I go to the page,

310
00:29:16,600 --> 00:29:23,179
and I scroll it a bit, and then I go back
and turn off the recording. So what I can

311
00:29:23,179 --> 00:29:28,169
see here, let me zoom into a window here.
What I can see here is a lot of events are

312
00:29:28,169 --> 00:29:33,230
happening within the browser. And timeline
not only shows us the JavaScript events, it

313
00:29:33,230 --> 00:29:39,309
shows all of the native events, styles, painting,
everything that happens in the browser. While

314
00:29:39,309 --> 00:29:44,700
hovering over these elements, you can see
what is actually taking time. Yellow is scripting,

315
00:29:44,700 --> 00:29:49,710
blue is loading, we didn't have any and green
is painting. So this picture gives you a very

316
00:29:49,710 --> 00:29:54,679
good understanding of what's slow.
>>Sam Dutton: Yeah. That's good. That's good.

317
00:29:54,679 --> 00:30:00,130
I mean, the only problem is, you know, I remember
when I first saw this timeline thing I thought,

318
00:30:00,130 --> 00:30:04,250
wow, that's lot of information. But it's kind
of useless, you know. It's like where do we

319
00:30:04,250 --> 00:30:08,400
go from there? It doesn't really give me a
picture of what's happening each time there's

320
00:30:08,400 --> 00:30:11,700
a slowness --
>>Pavel Feldman: I give up. So we've gotten

321
00:30:11,700 --> 00:30:16,480
exactly this feedback from you and we thought
we need something better. And with this version

322
00:30:16,480 --> 00:30:22,620
of Chrome we are introducing a new frame mode
of the timeline. Let me zoom into a couple

323
00:30:22,620 --> 00:30:27,740
of frames. So with these frame mode in the
timeline, we are defining a new term, a frame.

324
00:30:27,740 --> 00:30:34,460
And the frame is the amount of time that the
browser needs to update the screen. It includes

325
00:30:34,460 --> 00:30:39,330
everything. JavaScript processing, recalculation
of the styles, painting, everything is happening

326
00:30:39,330 --> 00:30:43,570
within the single frame and then your user
sees the picture.

327
00:30:43,570 --> 00:30:49,429
You can see the same nice color coding in
here. Green is paint, purple is layout, styles

328
00:30:49,429 --> 00:30:54,730
and the yellow is scripting.
But more importantly, we set a baseline to

329
00:30:54,730 --> 00:31:01,080
you. And this baseline is 60-hertz. 60 frames
per second. That's what browser expects from

330
00:31:01,080 --> 00:31:08,080
you. You need to generate 60 frames each second.
It gives you only 16 milliseconds per frame.

331
00:31:08,850 --> 00:31:14,330
That's the same vsync signal that we've been
talking about on the keynote. Now, if we look

332
00:31:14,330 --> 00:31:21,330
at this very page, we can see that the frame
was taking, in fact, 45 milliseconds.

333
00:31:21,440 --> 00:31:28,440
And it is above the baseline of the 60 frames
per second. This solid line in the middle.

334
00:31:28,970 --> 00:31:34,370
So it's not JavaScript in your case. It's
not styles. It's the paint. You must be painting

335
00:31:34,370 --> 00:31:37,919
something very beautiful.
>>Sam Dutton: Yeah, yeah, no I know.

336
00:31:37,919 --> 00:31:40,950
[Laughter].
>>Sam Dutton: What I know is the culprit is

337
00:31:40,950 --> 00:31:46,830
-- yeah, some there's some heavy duty CSS
in there, a lot of gradients.

338
00:31:46,830 --> 00:31:52,250
>>Pavel Feldman: Oh, I know! [Laughter]
>>Sam Dutton: Aesthetic. Nice background image.

339
00:31:52,250 --> 00:31:58,850
>>Pavel Feldman: I know it's nice, but it's
slow. I removed all of them, and the page

340
00:31:58,850 --> 00:32:05,000
still has that background. What's wrong? Okay.
Let's inspect. Oh, are there are more.

341
00:32:05,000 --> 00:32:07,679
[Laughter]
>>Pavel Feldman: And those are the same. You

342
00:32:07,679 --> 00:32:13,059
are using all over again the same gradients.
>>Sam Dutton: Twice is good. [Laughter].

343
00:32:13,059 --> 00:32:16,159
>>Pavel Feldman: Okay.
Maybe it was making it slow. Okay. Anyways,

344
00:32:16,159 --> 00:32:21,000
now that I've disabled everything and you
can't really tell the difference, can you?

345
00:32:21,000 --> 00:32:27,460
Let me go back to the timeline and start recording.
And let me scroll here a bit.

346
00:32:27,460 --> 00:32:31,549
Go back and stop my timeline. [Laughter].
[ Applause ]

347
00:32:31,549 --> 00:32:38,150
>>Pavel Feldman: There's nice 16 milliseconds
frame, thank you.

348
00:32:38,150 --> 00:32:44,740
>>Sam Dutton: Yeah, okay, well done.
>>> [ Inaudible - no mic ]

349
00:32:44,740 --> 00:32:47,740
>>Pavel Feldman: Okay. Let's take it to the
Q and A.

350
00:32:47,740 --> 00:32:52,600
Thank you.
>>Sam Dutton: Yeah, and if you want to learn

351
00:32:52,600 --> 00:32:57,370
more about that stuff, after us there's the
jank buster session.

352
00:32:57,370 --> 00:33:00,020
It will go into more detail.
>>Pavel Feldman: Right. So that was smooth

353
00:33:00,020 --> 00:33:06,539
animations. Wrapping up, please measure performance
of your animations and scrolling. Now we have

354
00:33:06,539 --> 00:33:11,960
a good baseline, 16 milliseconds, you will
know for sure, (indiscernible) smooth has

355
00:33:11,960 --> 00:33:17,450
now a value, it's 60.
Use this time wisely. Think as game developers.

356
00:33:17,450 --> 00:33:22,240
Game developers don't have much time for a
frame. Tools will help you narrowing down

357
00:33:22,240 --> 00:33:27,600
the problem, whether it's paint or JavaScript.
After you know the paint events and you need

358
00:33:27,600 --> 00:33:31,480
to bisect those, regress, find where the culprit
is.

359
00:33:31,480 --> 00:33:35,190
For the JavaScript we have better tools. We
will point you to the very line of the source

360
00:33:35,190 --> 00:33:41,440
code that is updating the layout or recalculating
styles. So you will know what is wrong.

361
00:33:41,440 --> 00:33:46,190
And as Sam mentioned, in this very room, right
after ours, there is going to be an extended

362
00:33:46,190 --> 00:33:52,299
session on the frames mode for the timeline
and the GPU team from Chrome is going to drive

363
00:33:52,299 --> 00:33:56,980
it. So make sure you don't miss it.
>>Sam Dutton: Yeah, great stuff.

364
00:33:56,980 --> 00:34:00,950
Of course, Pavel was kind of cheating there.
You know, you can always just delete stuff

365
00:34:00,950 --> 00:34:05,150
to make a web app work faster.
>>Pavel Feldman: You can? [Laughter].

366
00:34:05,150 --> 00:34:10,070
>>Sam Dutton: That's true. But, you know,
I mean we all know that these situations,

367
00:34:10,070 --> 00:34:15,560
as much as you optimize everything, all your
code, you get to a point sometimes where you've

368
00:34:15,560 --> 00:34:18,540
got some code that is just inherently CPU
intensive, long running.

369
00:34:18,540 --> 00:34:25,429
And, you know, I was thinking about how to
use the devtools to deal with that. And I

370
00:34:25,429 --> 00:34:29,800
was thinking of -- you know, the prettyprint
function itself. What I have noticed with

371
00:34:29,800 --> 00:34:34,359
that is that, you know, it's obviously doing
a lot of work but it doesn't seem to freeze

372
00:34:34,359 --> 00:34:37,710
up the interface, so I have asked Pavel about
how that works.

373
00:34:37,710 --> 00:34:42,060
>>Pavel Feldman: Right, so it does use more
than 16 milliseconds of time. We are using

374
00:34:42,060 --> 00:34:45,970
WebWorkers to move the work off into the other
thread.

375
00:34:45,970 --> 00:34:49,320
>>Sam Dutton: Okay, Yeah. I mean, I always
feel like I should use WebWorkers.

376
00:34:49,320 --> 00:34:53,119
>>Pavel Feldman: Do you use WebWorkers? Not
much, okay.

377
00:34:53,119 --> 00:34:57,599
>>Sam Dutton: But I always sort of shy away
from it, because I feel like they are hard

378
00:34:57,599 --> 00:35:03,080
to debug, you know, like where do you start?
>>Pavel Feldman: Oh, is it? [Laughter].

379
00:35:03,080 --> 00:35:09,849
>>Pavel Feldman: Let's try that. As I mentioned
we will be focusing on the WebWorkers, so

380
00:35:09,849 --> 00:35:14,849
let me go back to the page where we were debugging
devtools, for the devtools.

381
00:35:14,849 --> 00:35:20,080
We will be interested in the source code.
Do we have any? Well, let's reload.

382
00:35:20,080 --> 00:35:27,080
Let's get some. Yeah, we've got some files.
Okay. So here is the source code. As you probably

383
00:35:27,190 --> 00:35:33,310
know, when you press this little button, it
gets prettyprinted, really nice. And as I

384
00:35:33,310 --> 00:35:38,830
mentioned, it happens in the worker. So let's
try going ahead and debug it. I'm going to

385
00:35:38,830 --> 00:35:45,830
the debugger sidebar, under the workers tab
I choose to pause on start. So what it should

386
00:35:47,440 --> 00:35:52,900
do, when the worker is created for your page,
it should stop it before the very first statement

387
00:35:52,900 --> 00:35:59,420
this worker executes.
And we should be able to debug it. Let's try

388
00:35:59,420 --> 00:36:04,150
it out.
Okay. Now that we have three windows with

389
00:36:04,150 --> 00:36:09,000
the devtools on the screen, I feel I must
go over them again. So the one to the left,

390
00:36:09,000 --> 00:36:14,270
is your Web page. It's just me, I have the
devtools, sorry. One to the right is the devtools.

391
00:36:14,270 --> 00:36:18,380
And the one in the middle is the devtools
for the worker. [Laughter].

392
00:36:18,380 --> 00:36:22,740
>>Sam Dutton: Got it.
>>Pavel Feldman: Yeah, is that okay?

393
00:36:22,740 --> 00:36:28,560
Right. So I can step through the execution
here and I can see that I'm debugging the

394
00:36:28,560 --> 00:36:35,560
worker. The worker is stopped. But he can
scroll the page. So the page is not blocked

395
00:36:36,460 --> 00:36:41,760
by the worker. So this is not the fake worker
emulation using iFrames, this is the real

396
00:36:41,760 --> 00:36:46,290
stuff, native workers being debugged. Now,
of course you can use all of the debugging

397
00:36:46,290 --> 00:36:53,290
functions in here or you can go and collect
CPU profiles or take heap snapshots, do the

398
00:36:53,440 --> 00:36:59,490
timeline for the worker or use console. This
devtools window is working in the context

399
00:36:59,490 --> 00:37:06,490
of your worker. And if you type window in
here, there is no window and there's no document.

400
00:37:08,400 --> 00:37:11,280
Who are you?
[Laughter]

401
00:37:11,280 --> 00:37:17,230
>>Pavel Feldman: It is dedicated worker context.
So this is in fact the worker object.

402
00:37:17,230 --> 00:37:23,849
Now, we support debugging workers, the dedicated
workers and the shared workers. And the way

403
00:37:23,849 --> 00:37:30,849
to start debugging shared workers is to visit
Chrome Inspect. That's where all of the inspectable

404
00:37:31,940 --> 00:37:36,900
properties of Chrome are represented, be it
page or an extension or a background page,

405
00:37:36,900 --> 00:37:40,920
application, shared worker, everything you
can start from here. You click inspect and

406
00:37:40,920 --> 00:37:47,380
you are brought to the right window.
So that's the WebWorker story.

407
00:37:47,380 --> 00:37:54,380
[ Applause ]
>>Sam Dutton: I may even use them now. We

408
00:37:55,980 --> 00:38:02,290
talked a lot about memory, but of course,
there's always some kind of tradeoff with

409
00:38:02,290 --> 00:38:09,290
performance. Well, or is there?
We did some testing of Google Web apps, and

410
00:38:11,560 --> 00:38:18,560
you can see on the graph here, the yellow
line at the top there represents overtime

411
00:38:18,859 --> 00:38:25,859
memory consumption, and the blue with a high
level variance represents the measure of the

412
00:38:26,430 --> 00:38:33,060
projection of latency. One thing we're finding
with Web apps, I think this is a common experience

413
00:38:33,060 --> 00:38:38,890
now, people are using Web Apps for much longer
than they used to. We have users of Google

414
00:38:38,890 --> 00:38:45,890
Apps like running them for days. So you need
to be aware of that. What we learned was obviously

415
00:38:47,230 --> 00:38:53,690
that there were memory leaks and that we could
fix, and the most common source of that was

416
00:38:53,690 --> 00:38:57,330
problematic -- in fact, it was problematic
usage of event listeners.

417
00:38:57,330 --> 00:39:02,470
>>Pavel Feldman: Okay. So I think we have
some tools for that.

418
00:39:02,470 --> 00:39:06,040
>>Sam Dutton: Yeah, indeed.
>>Pavel Feldman: And we're going to explore

419
00:39:06,040 --> 00:39:11,070
a simple example of the memory leak, and --
>>Sam Dutton: That's a lovely website.

420
00:39:11,070 --> 00:39:18,070
>>Pavel Feldman: Yeah. So I'm going to the
source, and let us see the source code. So

421
00:39:19,890 --> 00:39:26,890
what it does is every time I click "say hello",
it creates an element. Hello, there. And it

422
00:39:27,859 --> 00:39:34,859
adds it to the result. But then in a second
it just removed them all. But they all are

423
00:39:35,849 --> 00:39:42,560
still here in this array. Let's see how the
tool handles that memory leak case. But now

424
00:39:42,560 --> 00:39:47,089
let's imagine we don't know it all and we
start from scratch. Can you forget everything

425
00:39:47,089 --> 00:39:52,200
that I've just said?
I'm going to start recording the timeline,

426
00:39:52,200 --> 00:39:59,200
and a number of clicks in here, and let me
undock the timeline. Oops. And we are going

427
00:40:04,260 --> 00:40:09,750
to look at the memory view for it, and let
me face the window. What you can see here

428
00:40:09,750 --> 00:40:15,160
is the heap graph. That's the memory your
app is consuming at the top, so it's a bit

429
00:40:15,160 --> 00:40:21,869
more than a megabyte. Then there is a regular
timeline, and then there is the memory counters,

430
00:40:21,869 --> 00:40:27,690
DOM counters, and event list counters represented
in here. You can see that the number of DOM

431
00:40:27,690 --> 00:40:34,690
notes increased from 18 to 24 as I was clicking,
and the document is still alone, and there

432
00:40:35,030 --> 00:40:42,030
are two new event listeners in here. If I
click on the step, I will see that there is

433
00:40:43,099 --> 00:40:50,099
an event associated with that. So every time
it grows, there is some event in here, and

434
00:40:52,810 --> 00:40:59,810
indeed the link, we can hover over and jump
to the line that was creating that object,

435
00:40:59,849 --> 00:41:06,750
of course, but more importantly we now know
what user action is causing the leak. Now

436
00:41:06,750 --> 00:41:13,750
that we know what is the problem, we'll find
the actual location of that object. And for

437
00:41:15,500 --> 00:41:22,500
that we turn to the profiler, and in the profiler,
I'm going to -- let me go back to the page.

438
00:41:23,010 --> 00:41:30,010
I'm going to take a heap snapshot. Let me
say hello a few more times and take another

439
00:41:31,000 --> 00:41:38,000
heap snapshot, and let's see what it is all
about. So the heap snapshot is in fact the

440
00:41:38,440 --> 00:41:45,440
snapshot of the JavaScript heap of running
application. And the summary view that I'm

441
00:41:45,710 --> 00:41:51,930
looking at is the summary for the heap where
all the objects are grouped by their type.

442
00:41:51,930 --> 00:41:58,390
For example, those are API functions and those
are date objects. Those are Chrome events.

443
00:41:58,390 --> 00:42:04,280
So everything is grouped in here. For each
of the objects I can see -- for each of the

444
00:42:04,280 --> 00:42:10,099
group I can see the object count, shadow size
and the retain size, so its own size and the

445
00:42:10,099 --> 00:42:17,099
size of the tree it is holding. Now, if I
go to the second snapshot, that was taken

446
00:42:17,940 --> 00:42:24,940
after my actions that are supposed to leak,
I can compare it to the first one.

447
00:42:28,750 --> 00:42:35,750
[ APPLAUSE ]
And in the comparison mode, I can see that

448
00:42:36,160 --> 00:42:42,690
there are 7 new objects. And if I hover over
these objects, you get this hover card that

449
00:42:42,690 --> 00:42:48,329
you got used to while debugging, and if I
select this object, it will show me the retaining

450
00:42:48,329 --> 00:42:54,910
trees for this object. Those are the guys
that reference my object. And those are the

451
00:42:54,910 --> 00:43:01,910
real cause of the memory leak. In this case,
I have an array. And in its 13th slot there

452
00:43:02,339 --> 00:43:09,339
is this paragraph element, and, you know these
dollar zero that refers the currently selected

453
00:43:09,560 --> 00:43:16,560
element in the elements panel, it also works
in here. So from this panel you can jump into

454
00:43:16,720 --> 00:43:22,160
the source -- into the console, into the running
object and explore it there. Let's see what

455
00:43:22,160 --> 00:43:26,820
is holding this array?
It's a window. It's a global object. And the

456
00:43:26,820 --> 00:43:33,820
property name on it is "holding", so if I
do dollar zero, that's my window, and if I

457
00:43:33,920 --> 00:43:40,920
do dollar zero holding, that's the array that
was holding the paragraph element. So to recap

458
00:43:43,140 --> 00:43:49,560
that, if you don't know where your memory
leak is or where is the unbonded cache that

459
00:43:49,560 --> 00:43:55,480
you're using, you should go to the time line,
then you perform your actions and look at

460
00:43:55,480 --> 00:44:01,060
the spikes in the DOM node counters. There
is also garbage collection button that you

461
00:44:01,060 --> 00:44:06,579
can press in the timeline to collect the garbage
that should bring everything back to normal.

462
00:44:06,579 --> 00:44:12,680
If it doesn't, this means you have a leak.
Now that you have tracked down the user scenario

463
00:44:12,680 --> 00:44:18,270
that is responsible for your leak, start using
the heap profiler. You take a heap snapshot,

464
00:44:18,270 --> 00:44:24,369
then you do your action, you take another
snapshot and then you compare the two. And

465
00:44:24,369 --> 00:44:28,760
once you've seen the leak objects, the objects
that should not be there, look for suspicious

466
00:44:28,760 --> 00:44:34,690
classes that you own the code, you know it.
Then track the retainers in the bottom part

467
00:44:34,690 --> 00:44:39,430
of the screen to track them to the global
objects and you will see the exact path that

468
00:44:39,430 --> 00:44:45,200
is leaking memory. There are more complicated
techniques for finding memory leaks that are

469
00:44:45,200 --> 00:44:51,829
more efficient such as three snapshot technology
where you take three snapshots, then you look

470
00:44:51,829 --> 00:44:58,380
at the third, and filter out everything that
has been allocated between one and two, or

471
00:44:58,380 --> 00:45:02,760
actually show everything that has been allocated
between one and two, but it's a different

472
00:45:02,760 --> 00:45:06,869
technique. It's more complex. It's beyond
this session, but we are here at the Chrome

473
00:45:06,869 --> 00:45:12,560
booth, so if you have questions there, make
sure you come and ask them there. Okay.

474
00:45:12,560 --> 00:45:17,650
>>Sam Dutton: Thanks very much, Pavel, really
useful tools for dealing with memory as well

475
00:45:17,650 --> 00:45:23,960
as performance. We don't have much more time,
but I just wanted to mention a couple of more

476
00:45:23,960 --> 00:45:27,710
features that have come into the tools now,
really useful stuff, particularly in relation

477
00:45:27,710 --> 00:45:30,089
to clientside story.
>>Pavel Feldman: It's not the end.

478
00:45:30,089 --> 00:45:35,760
>>Sam Dutton: Have a look at the features
for index DB and App Cache. Have you seen

479
00:45:35,760 --> 00:45:39,550
the web components? We have great tools for
shadow DOM inspection, just go to the elements

480
00:45:39,550 --> 00:45:46,010
panel and drill down into an element and you
will see the shadow DOM compliance. It's great

481
00:45:46,010 --> 00:45:52,119
stuff. My favorite thing of all, Pavel wouldn't
let me demonstrate is source maps. These are

482
00:45:52,119 --> 00:45:57,640
really easy to work with, you know, you use
a tool like closure to minify your code, at

483
00:45:57,640 --> 00:46:03,089
the same time you make a source map file,
you put a link to the source map file in the

484
00:46:03,089 --> 00:46:09,140
minified code, and that's it. When you use
that code in the devtools, you'll see the

485
00:46:09,140 --> 00:46:12,520
human readable version seamlessly in place.
It makes life much easier.

486
00:46:12,520 --> 00:46:17,900
>>Pavel Feldman: Come on. Come on. How can
you love a feature like that? Here is my favorite

487
00:46:17,900 --> 00:46:24,900
one. Here is the WebKit, right? Let us go
back there. No, let's do Google. So in the

488
00:46:27,380 --> 00:46:31,970
Dev Tools, right, I'm a developer, and where
is everything in here?

489
00:46:31,970 --> 00:46:37,700
Okay. And there's Google, and sometimes I
am ambitious and I kind of think, okay, let

490
00:46:37,700 --> 00:46:44,700
me change things here, and it will be a Google
search, supersearch -- it didn't apply. Why?

491
00:46:46,220 --> 00:46:53,220
They are fooling me. Come on. Do it again.
>>Sam Dutton: That's weird.

492
00:46:53,420 --> 00:46:59,960
>>Pavel Feldman: Yeah. Oh, it wasn't title.
Okay. Sorry. I'm feeling very lucky. Are you

493
00:46:59,960 --> 00:47:02,990
working for me?
Okay. Good. Then I have more ambitious, I

494
00:47:02,990 --> 00:47:09,640
think. Okay. So that color is not -- I want
a red one. And then I think, okay, this Nexus

495
00:47:09,640 --> 00:47:16,640
7 is really cool. I actually go and list the
font size for it, and do the shift up. Yeah,

496
00:47:19,540 --> 00:47:24,060
and I think, okay, so this is enough clutter
here, right?

497
00:47:24,060 --> 00:47:27,690
I need to get rid of it, and go and delete
it all, and you know what, the search field,

498
00:47:27,690 --> 00:47:29,290
I don't like it either. I'll just delete it
all.

499
00:47:29,290 --> 00:47:30,920
>>Sam Dutton: That's too complex.
>>Pavel Feldman: Come on. And then I think,

500
00:47:30,920 --> 00:47:37,920
okay, I've done a lot -- why can't I delete
it? Come on, Google, where is it?

501
00:47:40,960 --> 00:47:47,960
Yeah. And I think, okay, that's enough, and
then I calm down, I think I like it the way

502
00:47:49,339 --> 00:47:56,339
it was, and I press command C and things are
undone, or I press shift command C and things

503
00:47:57,520 --> 00:48:04,520
are redone. So we have the complete undo-redo
stuck in here that is more importantly retaining

504
00:48:05,450 --> 00:48:11,359
the identity of the nodes, so when I'm deleting
nodes or recreating nodes, those are the same

505
00:48:11,359 --> 00:48:16,710
objects, and your JavaScript points there
and your program remains functional with that.

506
00:48:16,710 --> 00:48:22,020
So that's a cool feature.
[ APPLAUSE ]

507
00:48:22,020 --> 00:48:26,570
>>Sam Dutton: Go back. Go back. Come on, while
you're there, someone asked for this, do command

508
00:48:26,570 --> 00:48:30,300
-- what is it, command plus.
>>Pavel Feldman: No, I won't show you. I'll

509
00:48:30,300 --> 00:48:34,849
show you the question mark. The question mark
is where you get all the shortcuts to all

510
00:48:34,849 --> 00:48:40,930
the features that we have, the ones with the
shortcuts, including the ones that go to file,

511
00:48:40,930 --> 00:48:47,930
go to line, and goes to your font size.
>>Sam Dutton: Okay. So, yeah, we've been using

512
00:48:49,609 --> 00:48:54,720
Chrome Canary today. Would recommend if you're
using the devtools a lot, that you give Chrome

513
00:48:54,720 --> 00:48:59,740
Canary a try, you get all the newest features
and also you can give us feedback on how you

514
00:48:59,740 --> 00:49:06,740
would like to see the devtools in the future.
And if you've never filed a bug, you know,

515
00:49:07,119 --> 00:49:09,410
today's the day, new.crbug.com. Go there to
file bugs, make feature requests, anything

516
00:49:09,410 --> 00:49:16,410
Chrome related particularly with the devtools,
do it now, yeah, that's the place to go for

517
00:49:16,690 --> 00:49:23,690
any of you stuff. So, yeah, that's it from
us, thank you very much. Indeed.

518
00:49:27,739 --> 00:49:34,739
[ APPLAUSE ]
>>Sam Dutton: We've got about -- yeah, about

519
00:49:35,510 --> 00:49:40,740
7 minutes for questions so if you would like
to ask questions, come up to the mics in the

520
00:49:40,740 --> 00:49:43,349
aisles there.
>>> I thought of one more question, you're

521
00:49:43,349 --> 00:49:47,579
taking requests for improvements to devtools.
Remote debugging is really cool, but it doesn't

522
00:49:47,579 --> 00:49:51,500
work when you're offline, because it hits
app spot first. It makes it really hard to

523
00:49:51,500 --> 00:49:54,790
do like mobile development on an airplane.
>>Pavel Feldman: So I can give you advice

524
00:49:54,790 --> 00:50:01,599
how to work around it, and then we'll fix
it. So the workaround is to save that page

525
00:50:01,599 --> 00:50:06,920
that is served alt app engine, and it's just
a Web app, and you save it, you open it, and

526
00:50:06,920 --> 00:50:12,310
you point to your Chrome instance or your
mobile instance and it will work. No need

527
00:50:12,310 --> 00:50:19,310
for a cloud there. Okay?
>>> Is there a way to see the packets in the

528
00:50:19,420 --> 00:50:23,760
Web socket?
>>Pavel Feldman: Yes, in fact you can see

529
00:50:23,760 --> 00:50:30,760
the packets on the Web socket.
And let me show it to you, so that's -- okay.

530
00:50:33,060 --> 00:50:37,870
I'm going to use a -- we are using those,
right, for the devtool itself, where are you

531
00:50:37,870 --> 00:50:44,609
-- where are you?
Okay. So I'll need to do devtool on devtool

532
00:50:44,609 --> 00:50:51,609
on devtool, but that's probably fine. You
got used to it. And in the network, I don't

533
00:50:53,940 --> 00:51:00,940
need to record. I'll just do some stuff. And
you should see the packets in here, and if

534
00:51:03,170 --> 00:51:09,680
they aren't, we just can't find them, so the
idea is that you can see the resource responsible

535
00:51:09,680 --> 00:51:15,010
for the Web socket packet in here, and in
the editing part of this screen, you will

536
00:51:15,010 --> 00:51:22,010
see Web socket frames tab. I can't show it
to you right now, but it's there, and it is

537
00:51:22,079 --> 00:51:25,530
going to be stable in Chrome 21. It's a recent
feature.

538
00:51:25,530 --> 00:51:30,010
>>Sam Dutton: And another?
>>> Hi, thank you guys for the presentation.

539
00:51:30,010 --> 00:51:37,010
It was real cool. So I have a question: Is
it possible to simulate the http request that

540
00:51:38,040 --> 00:51:45,030
like that made from UI, or, you know, you
click a button, you have a bunch of requests,

541
00:51:45,030 --> 00:51:50,359
is it possible to simulate a bunch of them
and override some headers, override a script

542
00:51:50,359 --> 00:51:56,470
that can do it.
>>Pavel Feldman: Not yet. XHR replay simulation

543
00:51:56,470 --> 00:52:02,180
is very high in our to-do list, so we are
going to make it soon, but it's not there

544
00:52:02,180 --> 00:52:05,839
yet.
>>Sam Dutton: Yeah, lots of people are asking

545
00:52:05,839 --> 00:52:07,059
for that.
>>> Thanks.

546
00:52:07,059 --> 00:52:10,349
>>> So do these techniques -- I mean the kind
of examples that you showed were a little

547
00:52:10,349 --> 00:52:16,240
bit, you know, contrived obviously for the
demo, but let's say Gmail, does Gmail use

548
00:52:16,240 --> 00:52:21,900
the Chrome devtools in the same way that you're
doing it or do they use different tools or

549
00:52:21,900 --> 00:52:27,240
do they have different techniques in how they
use the tools, you know, for debugging and

550
00:52:27,240 --> 00:52:30,950
just working with that system, because there's
literally, you know, dozens if not hundreds

551
00:52:30,950 --> 00:52:35,560
of events happening per second in the timeline,
the heap snapshots will have, you know, tons

552
00:52:35,560 --> 00:52:38,880
of different things, does it scale to something
at that level?

553
00:52:38,880 --> 00:52:44,560
>>Pavel Feldman: Gmail is our best in-house
client so we're working with them a lot. These

554
00:52:44,560 --> 00:52:49,660
three snapshot techniques with the heap profiling
was in fact -- those were discovered while

555
00:52:49,660 --> 00:52:55,280
working with the Gmail team while they were
hunting their memory leaks. They're also using

556
00:52:55,280 --> 00:52:58,180
timeline and, of course, they're using RD
bugger.

557
00:52:58,180 --> 00:53:01,510
>>> So it does.
>>Pavel Feldman: Yes. Of course.

558
00:53:01,510 --> 00:53:06,480
>>> Okay, thanks.
>>> Hi, is there a good way to inspect, edit

559
00:53:06,480 --> 00:53:13,420
CSS key frames, the CSS animation key frames?
Because you can -- you can see the define

560
00:53:13,420 --> 00:53:18,109
animation, but I want to see the key frames,
edit them, and then look at performance issues.

561
00:53:18,109 --> 00:53:23,349
>>Pavel Feldman: So the best you can get is
just jumping to the source code and editing

562
00:53:23,349 --> 00:53:28,650
them there. Everything you do in the source
code is immediately reflected in the screen.

563
00:53:28,650 --> 00:53:31,280
>>> Okay.
>>Pavel Feldman: But there is no structural

564
00:53:31,280 --> 00:53:33,690
editing for the key frames and for media queries
yet.

565
00:53:33,690 --> 00:53:38,400
>>> Okay. And then is there a way to trigger
them, force them to rerun in a performance

566
00:53:38,400 --> 00:53:41,380
tracing kind of context.
>>Pavel Feldman: Of course. You can edit everything

567
00:53:41,380 --> 00:53:45,980
in here, and then you just save, and then
you go to the timeline and you perform those

568
00:53:45,980 --> 00:53:52,980
actions and they will be using these new styles.
Okay, thank you. Is the mobile debugging going

569
00:53:55,109 --> 00:54:01,849
to be available on Chrome for IOS?
>>Pavel Feldman: I don't know. We'll have

570
00:54:01,849 --> 00:54:07,640
to check. So the remote debugging background
is a part of WebKit, so the code is there.

571
00:54:07,640 --> 00:54:14,640
I believe there is a way to remove the debugger
IOS devices. I don't know about the Chrome,

572
00:54:15,980 --> 00:54:22,230
but I can find it out for you, and e-mail
that, I'll send it back to you.

573
00:54:22,230 --> 00:54:25,220
>>> Thanks.
>>> And you talked earlier about getting below

574
00:54:25,220 --> 00:54:29,710
60 frames a second, there was I think green,
purple and blue were colors that you talked

575
00:54:29,710 --> 00:54:32,680
about, and when you got below they all turned
gray. What was the gray for?

576
00:54:32,680 --> 00:54:39,680
>>Pavel Feldman: Okay, so here is the thing:
The frame for us is everything that beginning

577
00:54:40,170 --> 00:54:47,170
of the frames, and the gray that you saw above
is the CPU activity that we do not instrument,

578
00:54:48,700 --> 00:54:54,430
or it's an idle time. We are working on distinguishing
between the two, so very soon we will be able

579
00:54:54,430 --> 00:55:01,430
to say this is the CPU. It has been doing
something. Or this is idle, the other tasks

580
00:55:02,619 --> 00:55:07,240
are using it. So we are actively working on
the timeline, on the frame mode, and it's

581
00:55:07,240 --> 00:55:11,160
very first revision of it.
>>> So if it's gray and it is the CPU that's

582
00:55:11,160 --> 00:55:14,380
doing it, it's your app that is causing that
CPU to spin up but you don't know why?

583
00:55:14,380 --> 00:55:19,950
>>Pavel Feldman: Right, the spikes that we
saw on the timeline, the gray one, transparent

584
00:55:19,950 --> 00:55:26,150
one, were related to the CPU related to the
switching in windows that I was doing as the

585
00:55:26,150 --> 00:55:31,550
timeline was captured, so that was idle from
your page perspective, because it was not

586
00:55:31,550 --> 00:55:36,329
wasting CPU resources, so we will be able
to cut that down soon and tell you that your

587
00:55:36,329 --> 00:55:42,319
page is not responsible for it. But the picture
that we show is accurate from the repaint

588
00:55:42,319 --> 00:55:47,869
perspective, from the frame perspective, because
something has been happening and your frame

589
00:55:47,869 --> 00:55:54,460
has not been painted at that time, so there
was indeed a jank in the repaint.

590
00:55:54,460 --> 00:56:00,140
>>> Thank you.
>>> Is there any plans on integrating a -- like

591
00:56:00,140 --> 00:56:07,140
a testing framework into the devtool so, say,
macros and assertions and these kinds of things.

592
00:56:07,260 --> 00:56:13,210
>>Pavel Feldman: So we have a nice extensions
API support where we add extensions for you

593
00:56:13,210 --> 00:56:19,170
to be able to build your own panel in the
devtool, or to react upon selection of an

594
00:56:19,170 --> 00:56:24,670
element in the elements panel and such. We
might extend those APIs if they are not sufficient

595
00:56:24,670 --> 00:56:31,619
for achieving your goals. So we -- yeah, we
are -- we are relying upon the third parties

596
00:56:31,619 --> 00:56:34,809
to provide the functional like that.
>>> All right, so there's no -- right now

597
00:56:34,809 --> 00:56:38,869
on that direct like roadmap, there's no plans
for a testing framework essentially?

598
00:56:38,869 --> 00:56:42,880
>>Pavel Feldman: Right. Those would be done
through the extensions at least at the first

599
00:56:42,880 --> 00:56:46,280
page.
>>> Okay, cool, thanks.

600
00:56:46,280 --> 00:56:50,460
>>> I'm an engineer on the Google+ team, and
first of all, I just want to say thanks so

601
00:56:50,460 --> 00:56:53,410
much for these tools, I couldn't do my job
without them. I mean, they're just a real

602
00:56:53,410 --> 00:57:00,410
joy to use, they make Web development fun
again. That said, we do obviously have a pretty

603
00:57:01,319 --> 00:57:06,180
massively large JavaScript application and
it's compiling files together and it's starting

604
00:57:06,180 --> 00:57:11,380
across all that, so at least the search across
sources made it easier again to figure out

605
00:57:11,380 --> 00:57:16,329
where that JavaScript is coming from, but
just loading it in and parsing it still is

606
00:57:16,329 --> 00:57:21,089
pretty pokey, it's many -- I'm just curious
how optimized that stuff is and how much you

607
00:57:21,089 --> 00:57:24,940
think you can improve the performance even
further when you have really large JavaScript?

608
00:57:24,940 --> 00:57:30,109
>>> All right, so, by the moment Gmail was
our like largest client, so whenever they

609
00:57:30,109 --> 00:57:35,710
hit the limitation, they came to us and we
fixed it, and please, do that as well, and

610
00:57:35,710 --> 00:57:40,079
we'll be improving. So right now with the
frame mode, we found that we have a lot of

611
00:57:40,079 --> 00:57:45,349
junk in our own UI, and we do know a couple
of little knocks related to the scale with

612
00:57:45,349 --> 00:57:52,349
our text viewer. We are comfortable at about
100K lines. When it goes beyond we are not

613
00:57:52,609 --> 00:57:57,500
that comfortable from the memory standpoint,
but those are all fixable, so as we hit new

614
00:57:57,500 --> 00:57:59,329
limitations, we are fixing them, so please
provide your feedback.

615
00:57:59,329 --> 00:58:04,259
>>> Okay, great. Will do. Thanks.
>>Sam Dutton: Question from this side.

616
00:58:04,259 --> 00:58:10,349
>>> We've been writing some code that runs
on both node.js and the client, since node.js

617
00:58:10,349 --> 00:58:15,470
using V8 does it have any association with
this, or is this purely the clientside browser?

618
00:58:15,470 --> 00:58:22,470
>>Pavel Feldman: Right. This is working against
the WebKit based browsers primarily, so it

619
00:58:22,599 --> 00:58:28,390
does not work against V8 or node. There is
a solution that works against node, because

620
00:58:28,390 --> 00:58:33,690
node supports -- exposes the V8 debugging
protocol. There's a project called Chrome

621
00:58:33,690 --> 00:58:40,690
devtool for Java that is an eclipse plug-in,
and eclipse has indicated that can connect

622
00:58:42,050 --> 00:58:49,050
both to Chrome and to raw V8 including node.
I know that there is a fork of Web inspector

623
00:58:49,900 --> 00:58:56,510
that works a pretty old font that works against
node, and I know there are people that are

624
00:58:56,510 --> 00:59:02,390
trying to implement wrappers around V8 so
that they emulated the remote debugging protocol

625
00:59:02,390 --> 00:59:07,450
that Chrome devtool is using so that we could
connect there, but that is a work in progress.

626
00:59:07,450 --> 00:59:09,339
>>> Okay.
>>Pavel Feldman: So it's Chrome devtools for

627
00:59:09,339 --> 00:59:15,940
Java and that is an eclipse plug-in.
>>Sam Dutton: Thanks very much. I think we

628
00:59:15,940 --> 00:59:22,000
better wrap it up. We've run out of time.
Thanks again. Thanks also for the live feature

629
00:59:22,000 --> 00:59:23,290
request earlier. We'll take note of that.
Thank you.

630
00:59:23,290 --> 00:59:23,999
>>Pavel Feldman: Thank you.
[ Applause ]

