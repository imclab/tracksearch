1
00:00:00,000 --> 00:00:45,270
[MUSIC PLAYING]

2
00:00:45,270 --> 00:00:48,170
MALE SPEAKER 1: Shanghai GDG
is a very interesting

3
00:00:48,170 --> 00:00:49,140
developer community.

4
00:00:49,140 --> 00:00:49,970
FEMALE SPEAKER 1: I'm
glad somebody

5
00:00:49,970 --> 00:00:51,250
has asked this question.

6
00:00:51,250 --> 00:00:52,390
MALE SPEAKER 2: This is where
the magic happens.

7
00:00:52,390 --> 00:00:53,710
FEMALE SPEAKER 2: This is
primarily a question and

8
00:00:53,710 --> 00:00:54,250
answer show.

9
00:00:54,250 --> 00:00:56,585
So if any of you out there would
like to ask questions--

10
00:00:56,585 --> 00:01:03,770

11
00:01:03,770 --> 00:01:04,310
PETE LEPAGE: All right.

12
00:01:04,310 --> 00:01:05,940
Welcome, everybody.

13
00:01:05,940 --> 00:01:06,850
My name is Pete LePage.

14
00:01:06,850 --> 00:01:10,110
I'm a developer advocate
with the Google Chrome

15
00:01:10,110 --> 00:01:11,330
team here at Google.

16
00:01:11,330 --> 00:01:12,870
I guess I said Google
a few times.

17
00:01:12,870 --> 00:01:14,730
I have Google on
the mind today.

18
00:01:14,730 --> 00:01:20,375
And with me today joining from
London, we have Paul Lewis.

19
00:01:20,375 --> 00:01:20,715
PAUL LEWIS: Paul Lewis.

20
00:01:20,715 --> 00:01:20,800
Yes.

21
00:01:20,800 --> 00:01:22,320
PETE LEPAGE: Mr. Lewis, how
are you doing today?

22
00:01:22,320 --> 00:01:24,560
PAUL LEWIS: I'm very
good, thank you.

23
00:01:24,560 --> 00:01:25,865
As you said, live from London.

24
00:01:25,865 --> 00:01:27,270
So yeah all good.

25
00:01:27,270 --> 00:01:28,360
PETE LEPAGE: Excellent.

26
00:01:28,360 --> 00:01:32,730
Well, so last week, we had a
hackathon back in Mountain

27
00:01:32,730 --> 00:01:36,940
View that we were both there
for, and we got to play with

28
00:01:36,940 --> 00:01:37,890
some interesting hardware.

29
00:01:37,890 --> 00:01:39,250
We did some kind
of neat things.

30
00:01:39,250 --> 00:01:42,080
I sort of alluded to it in
our Hangout last week.

31
00:01:42,080 --> 00:01:47,060
But one of the big things that
I think you and Paul Kinlan

32
00:01:47,060 --> 00:01:52,710
did a couple days before was to
sit down and start doing a

33
00:01:52,710 --> 00:01:54,280
little bit of hacking
on one of the

34
00:01:54,280 --> 00:01:56,156
Parrot AR.Drones, right?

35
00:01:56,156 --> 00:01:57,285
PAUL LEWIS: Absolutely, yeah.

36
00:01:57,285 --> 00:02:04,750
So Chrome has the sockets API,
and we knew that this drone

37
00:02:04,750 --> 00:02:05,990
communicated over UDP.

38
00:02:05,990 --> 00:02:10,509
So what we wanted to do is find
out how difficult or how

39
00:02:10,509 --> 00:02:13,420
easy it would be to actually
get Chrome through a Chrome

40
00:02:13,420 --> 00:02:14,940
app talking to the drone.

41
00:02:14,940 --> 00:02:16,250
So that is exactly right.

42
00:02:16,250 --> 00:02:17,820
A couple of days before the
hackathon, as you said, Paul

43
00:02:17,820 --> 00:02:22,230
Kinlan and I sat down with the
documentation and started

44
00:02:22,230 --> 00:02:23,030
hacking away.

45
00:02:23,030 --> 00:02:23,480
PETE LEPAGE: All right.

46
00:02:23,480 --> 00:02:27,560
Well, so, we recorded some video
of us playing with this

47
00:02:27,560 --> 00:02:29,960
thing a couple days before
the Hangout.

48
00:02:29,960 --> 00:02:33,150
Let's take a quick look at
that video right now.

49
00:02:33,150 --> 00:02:34,400
All right.

50
00:02:34,400 --> 00:02:39,180

51
00:02:39,180 --> 00:02:41,420
So we didn't put any audio into
the video, but you can

52
00:02:41,420 --> 00:02:42,950
see that drone flying around.

53
00:02:42,950 --> 00:02:46,750
Now, you hooked it up via a
gamepad, so the gamepad is

54
00:02:46,750 --> 00:02:48,700
actually controlling
the drone.

55
00:02:48,700 --> 00:02:53,400
The gamepad is hooked into
Chrome, and then Chrome's

56
00:02:53,400 --> 00:02:56,690
connected via Wi-Fi to the
drone, and the drone goes

57
00:02:56,690 --> 00:02:57,440
flying around.

58
00:02:57,440 --> 00:02:58,780
Isn't that--

59
00:02:58,780 --> 00:03:00,010
PAUL LEWIS: That's
pretty much it.

60
00:03:00,010 --> 00:03:02,030
And what we're going to do is
we'll step through and talk

61
00:03:02,030 --> 00:03:03,625
through each of those
bits today.

62
00:03:03,625 --> 00:03:04,040
PETE LEPAGE: All right.

63
00:03:04,040 --> 00:03:05,190
So we'll take--

64
00:03:05,190 --> 00:03:08,340
I think the video has just
a little bit more to it.

65
00:03:08,340 --> 00:03:10,910
We'll take one more quick sec.

66
00:03:10,910 --> 00:03:12,230
We kind of had a lot of fun.

67
00:03:12,230 --> 00:03:14,060
We kind of crashed the drone--

68
00:03:14,060 --> 00:03:14,720
I don't know--

69
00:03:14,720 --> 00:03:17,780
300 or 400 times.

70
00:03:17,780 --> 00:03:20,680
We ended up having people
run away from it.

71
00:03:20,680 --> 00:03:21,890
It was kind of fun.

72
00:03:21,890 --> 00:03:24,520
And in fact, I think, we hit
each other with it a few times

73
00:03:24,520 --> 00:03:25,520
accidentally.

74
00:03:25,520 --> 00:03:30,180
It's pretty easy to fly once
you sort of get the hang of

75
00:03:30,180 --> 00:03:34,120
it, but it took us a little
bit to get the hang of it.

76
00:03:34,120 --> 00:03:35,860
So the video is done.

77
00:03:35,860 --> 00:03:40,270
So let's sort of jump in and
take a look at some of the

78
00:03:40,270 --> 00:03:41,290
things that went on.

79
00:03:41,290 --> 00:03:45,510
So do you want to start just
explaining how you started and

80
00:03:45,510 --> 00:03:47,760
what you were thinking about as
you were working on this?

81
00:03:47,760 --> 00:03:49,030
PAUL LEWIS: Absolutely.

82
00:03:49,030 --> 00:03:54,240
So if you still have me on
camera, this is the drone.

83
00:03:54,240 --> 00:03:55,680
PETE LEPAGE: Yep.

84
00:03:55,680 --> 00:03:58,930
PAUL LEWIS: This thing is
absolutely brilliant.

85
00:03:58,930 --> 00:04:01,310
And we had one of those.

86
00:04:01,310 --> 00:04:04,270
We have a standard gamepad.

87
00:04:04,270 --> 00:04:08,960
And as we said in the intro,
the gamepad API is what we

88
00:04:08,960 --> 00:04:11,220
used to get input.

89
00:04:11,220 --> 00:04:12,860
But actually, we didn't
start with that.

90
00:04:12,860 --> 00:04:16,970
What we started with was the
SDK and the documentation.

91
00:04:16,970 --> 00:04:22,550
And the team at Parrot actually
have a PDF and a

92
00:04:22,550 --> 00:04:26,130
fully-fledged C library that
you can go and look at that

93
00:04:26,130 --> 00:04:30,500
will explain to you exactly what
you need to communicate

94
00:04:30,500 --> 00:04:33,310
and how and all the rest
of it to the drone.

95
00:04:33,310 --> 00:04:35,360
So that's what we
started with.

96
00:04:35,360 --> 00:04:38,420
So if you want to bring
up my screen.

97
00:04:38,420 --> 00:04:39,560
PETE LEPAGE: I can do that.

98
00:04:39,560 --> 00:04:42,430
All right, so we have
your screen up.

99
00:04:42,430 --> 00:04:43,630
PAUL LEWIS: OK.

100
00:04:43,630 --> 00:04:47,090
So the first thing we
knew about was the

101
00:04:47,090 --> 00:04:47,675
fact that there are--

102
00:04:47,675 --> 00:04:49,150
I have them listed here.

103
00:04:49,150 --> 00:04:52,500
There are four socket
connections that you can make

104
00:04:52,500 --> 00:04:52,980
to a drone.

105
00:04:52,980 --> 00:04:53,980
One is on port 554--

106
00:04:53,980 --> 00:04:54,650
PETE LEPAGE: OK.

107
00:04:54,650 --> 00:04:56,140
PAUL LEWIS: --over UDP.

108
00:04:56,140 --> 00:04:59,160
And I'll talk about what each
of these does in a second,

109
00:04:59,160 --> 00:05:03,230
5555, 5556, and 5559.

110
00:05:03,230 --> 00:05:06,820
So we knew these four
ports existed.

111
00:05:06,820 --> 00:05:10,970
The 5554 is the one that you get
information back from the

112
00:05:10,970 --> 00:05:12,430
drone using.

113
00:05:12,430 --> 00:05:14,380
So it will actually
send over UDP.

114
00:05:14,380 --> 00:05:18,780
It will send you messages
regarding its altitude, its

115
00:05:18,780 --> 00:05:23,490
velocity, it's battery levels,
all sorts of information that

116
00:05:23,490 --> 00:05:25,140
you can actually just get
straight back from this thing.

117
00:05:25,140 --> 00:05:28,420
Because this thing has got
really a lot of sensors on it.

118
00:05:28,420 --> 00:05:31,410
It actually gathers a lot
of information for you.

119
00:05:31,410 --> 00:05:32,810
So that's how you
get that back.

120
00:05:32,810 --> 00:05:37,490
So you get packets on 5554.

121
00:05:37,490 --> 00:05:40,870
5555 is this TCP channel where
it actually streams across

122
00:05:40,870 --> 00:05:43,870
H.264 video.

123
00:05:43,870 --> 00:05:45,540
So again, you can connect
up to that.

124
00:05:45,540 --> 00:05:48,020
As soon as you connect to it,
it starts sending you video

125
00:05:48,020 --> 00:05:48,810
information.

126
00:05:48,810 --> 00:05:50,410
Now, we actually haven't
implemented it.

127
00:05:50,410 --> 00:05:54,030
I should say about this code,
not only is it on the GitHub

128
00:05:54,030 --> 00:06:00,330
samples, but it is not, shall
we say, a fully fledged

129
00:06:00,330 --> 00:06:01,875
covers-all-angles API.

130
00:06:01,875 --> 00:06:04,520
Certainly, it was more of a--
as you said, we did this at

131
00:06:04,520 --> 00:06:05,960
the hackathon as a
proof of concept.

132
00:06:05,960 --> 00:06:08,170
We wanted to actually see how
easy it was to get the

133
00:06:08,170 --> 00:06:10,890
communication going and
get the thing flying.

134
00:06:10,890 --> 00:06:15,430
But it's not-- as I say, it's
not a replacement for anything

135
00:06:15,430 --> 00:06:19,120
that we've currently got,
which is a lot.

136
00:06:19,120 --> 00:06:22,530
So 5555 is the video.

137
00:06:22,530 --> 00:06:26,730
5556 is what I consider to be
a really interesting one.

138
00:06:26,730 --> 00:06:30,840
This is actually how you send
commands to the drone.

139
00:06:30,840 --> 00:06:34,570
Now, the drone itself abstracts
away quite a lot

140
00:06:34,570 --> 00:06:38,930
of-- well, an awful lot of the
hard work, judging from what I

141
00:06:38,930 --> 00:06:42,560
understand about flying over
remote-controlled vehicles.

142
00:06:42,560 --> 00:06:45,910
So, for example, one of the
AT commands, an AT command

143
00:06:45,910 --> 00:06:47,590
actually used to be used
when you're talking

144
00:06:47,590 --> 00:06:49,615
to old-school modems.

145
00:06:49,615 --> 00:06:51,410
So you'd actually send
AT commands.

146
00:06:51,410 --> 00:06:53,200
We send just stream commands.

147
00:06:53,200 --> 00:06:56,390
So you send the drone AT
commands, one of which will be

148
00:06:56,390 --> 00:06:58,460
"takeoff, and it will
just take off and

149
00:06:58,460 --> 00:07:00,160
hover waiting for you.

150
00:07:00,160 --> 00:07:03,410
Another one is "land." Again,
we'll step through some of

151
00:07:03,410 --> 00:07:05,330
these in a little more detail.

152
00:07:05,330 --> 00:07:09,160
So you actually construct all
these AT commands per frame

153
00:07:09,160 --> 00:07:12,570
that you want to send
to the drone.

154
00:07:12,570 --> 00:07:14,490
And then the last one is the
command one, which you can see

155
00:07:14,490 --> 00:07:17,000
at the bottom of my screen,
which is on 5559.

156
00:07:17,000 --> 00:07:19,160
And I'll just scroll up.

157
00:07:19,160 --> 00:07:25,370
5559, and that is used for sort
of admin controls, admin

158
00:07:25,370 --> 00:07:26,830
commands that you
need to send.

159
00:07:26,830 --> 00:07:29,480
Just because you're potentially
sending an awful

160
00:07:29,480 --> 00:07:32,580
lot of information, as I
understand it anyway, over the

161
00:07:32,580 --> 00:07:37,190
AT command on 5556, there is
a chance that you could be

162
00:07:37,190 --> 00:07:40,090
losing packets because
this is over TCP.

163
00:07:40,090 --> 00:07:44,605
So if you're not familiar with
the differences, basically TCP

164
00:07:44,605 --> 00:07:45,690
is guaranteed delivery.

165
00:07:45,690 --> 00:07:46,490
UPD is not.

166
00:07:46,490 --> 00:07:51,680
So we send a lot, and so there's
a possibility that

167
00:07:51,680 --> 00:07:54,300
certain command packets
could get lost.

168
00:07:54,300 --> 00:07:56,480
So the command one at the bottom
there, that 5559, is

169
00:07:56,480 --> 00:07:59,810
like a separate channel on which
to have a discussion

170
00:07:59,810 --> 00:08:02,040
with the drone and say certain
things, like emergency

171
00:08:02,040 --> 00:08:05,380
cutouts, I believe, on that
channel, which you kind of

172
00:08:05,380 --> 00:08:07,545
want, really, if it's going
to be an emergency.

173
00:08:07,545 --> 00:08:07,830
PETE LEPAGE: Yeah.

174
00:08:07,830 --> 00:08:11,260
It's kind of useful.

175
00:08:11,260 --> 00:08:13,430
PAUL LEWIS: So those are the
four sockets that we need.

176
00:08:13,430 --> 00:08:16,750
And if we go down, you'll
see that I've got

177
00:08:16,750 --> 00:08:20,090
an init in the API.

178
00:08:20,090 --> 00:08:22,000
And init connects three
of the four.

179
00:08:22,000 --> 00:08:23,380
As I say, we haven't
done the video one.

180
00:08:23,380 --> 00:08:28,850
It connects with the AT, the
nav, and the command sockets.

181
00:08:28,850 --> 00:08:31,200
And that looks a little
bit like this.

182
00:08:31,200 --> 00:08:34,210
So you've got
chrome.socket.create.

183
00:08:34,210 --> 00:08:37,150
And in those objects that I had,
you've either got UDP or

184
00:08:37,150 --> 00:08:40,870
TCP, which is the first
parameter, an unused second

185
00:08:40,870 --> 00:08:42,320
parameter, and then
the callback.

186
00:08:42,320 --> 00:08:46,930
Don't forget that all the Chrome
APIs are asynchronous.

187
00:08:46,930 --> 00:08:51,810
That sends you back soc info
which tells you things like

188
00:08:51,810 --> 00:08:55,290
the socket ID of the socket
that you just created.

189
00:08:55,290 --> 00:09:00,000
And that then allows you to
do connects and binds.

190
00:09:00,000 --> 00:09:01,240
So again, it's one
of these things.

191
00:09:01,240 --> 00:09:04,010
It's worth looking at the
socket documentation.

192
00:09:04,010 --> 00:09:07,040
And it's worth spending a bit
of time understanding socket

193
00:09:07,040 --> 00:09:09,060
communication in general.

194
00:09:09,060 --> 00:09:14,740
But we have different things
like bind and connect.

195
00:09:14,740 --> 00:09:16,750
So we do, depending on
what it is need.

196
00:09:16,750 --> 00:09:19,380
So, for example, when we bind a
socket, that's normally when

197
00:09:19,380 --> 00:09:21,210
we want to receive
information.

198
00:09:21,210 --> 00:09:22,720
When we connect, it's
typically when we

199
00:09:22,720 --> 00:09:23,580
want to send out.

200
00:09:23,580 --> 00:09:28,820
It's not entirely the same, so
there are subtleties to this.

201
00:09:28,820 --> 00:09:32,770
So what we do is we go through
and create those sockets.

202
00:09:32,770 --> 00:09:36,240
And you'll see when we do that,
we just have a little

203
00:09:36,240 --> 00:09:39,050
callback that says when
we're connected.

204
00:09:39,050 --> 00:09:43,430
If we've got nothing left to
connect, then we start

205
00:09:43,430 --> 00:09:45,450
actually communicating
with the drone,

206
00:09:45,450 --> 00:09:47,000
which is always nice.

207
00:09:47,000 --> 00:09:50,530
2 we send the KeepAlive command
roughly every second,

208
00:09:50,530 --> 00:09:52,590
which basically says to
the drone, I'm here.

209
00:09:52,590 --> 00:09:53,464
I'm here.

210
00:09:53,464 --> 00:09:56,040
I'm here.

211
00:09:56,040 --> 00:09:59,590
If you don't do that, after 2
seconds, the drone determines

212
00:09:59,590 --> 00:10:01,170
that you are no longer around.

213
00:10:01,170 --> 00:10:03,810
And I think it goes into hove
mode waiting for you to

214
00:10:03,810 --> 00:10:04,530
actually reconnect.

215
00:10:04,530 --> 00:10:06,620
So it's good to send
those KeepAlives.

216
00:10:06,620 --> 00:10:08,500
FlatTrim, that says--

217
00:10:08,500 --> 00:10:09,810
because this is the
first thing we do

218
00:10:09,810 --> 00:10:10,680
before we take off.

219
00:10:10,680 --> 00:10:15,080
We say to the drone, you're
on horizontal ground.

220
00:10:15,080 --> 00:10:16,910
You need to calibrate as though
this was flat ground.

221
00:10:16,910 --> 00:10:19,170
Because one of the many
things it does is it

222
00:10:19,170 --> 00:10:20,670
keeps itself level.

223
00:10:20,670 --> 00:10:23,720
So the FlatTrim is used for that
to actually work out what

224
00:10:23,720 --> 00:10:27,110
level and medium it
is, I suppose.

225
00:10:27,110 --> 00:10:28,730
Sensitivity.

226
00:10:28,730 --> 00:10:30,050
You can set the sensitivity.

227
00:10:30,050 --> 00:10:32,490
So when you're actually flying
this thing, how sensitive it

228
00:10:32,490 --> 00:10:35,660
is, I actually have it set quite
sensitive, which may

229
00:10:35,660 --> 00:10:39,710
explain how difficult I made
it for you to fly, Pete.

230
00:10:39,710 --> 00:10:42,200
PETE LEPAGE: Well, I
wasn't that bad.

231
00:10:42,200 --> 00:10:44,550
It was more the--

232
00:10:44,550 --> 00:10:44,970
I don't know.

233
00:10:44,970 --> 00:10:47,260
The first couple of times I
think we were trying this, it

234
00:10:47,260 --> 00:10:49,990
was kind of fun because I think
for both you and I, we

235
00:10:49,990 --> 00:10:52,030
were trying it for
the first time.

236
00:10:52,030 --> 00:10:56,200
We had never done it before,
and we were going on this

237
00:10:56,200 --> 00:10:59,880
sucker in a kind of a slightly
windy situation.

238
00:10:59,880 --> 00:11:03,990
So we were in an interesting
place

239
00:11:03,990 --> 00:11:06,740
where, hey, were outside--

240
00:11:06,740 --> 00:11:09,190
because we didn't want to try it
inside because when we did

241
00:11:09,190 --> 00:11:11,950
try it inside, we ended up
hitting a few walls.

242
00:11:11,950 --> 00:11:13,460
Oops.

243
00:11:13,460 --> 00:11:16,900
And then a few times, once we
got outside, it was good, but

244
00:11:16,900 --> 00:11:18,490
we ended up having people
running around.

245
00:11:18,490 --> 00:11:20,130
So it made for a kind
of fun time.

246
00:11:20,130 --> 00:11:21,990
PAUL LEWIS: It certainly did.

247
00:11:21,990 --> 00:11:25,720
So this is all by way of
bootstrap at this point.

248
00:11:25,720 --> 00:11:28,320
So we've opened up our
socket connections.

249
00:11:28,320 --> 00:11:29,460
We've sent a few commands.

250
00:11:29,460 --> 00:11:31,980
And I can dig into those
commands in a second, but the

251
00:11:31,980 --> 00:11:36,480
main thing to know is we
then go into this loop.

252
00:11:36,480 --> 00:11:39,830
And this is the bit that is
the heart and soul of

253
00:11:39,830 --> 00:11:41,100
what's going on.

254
00:11:41,100 --> 00:11:45,110
So let me drop down to loop.

255
00:11:45,110 --> 00:11:47,316
Where is it now?

256
00:11:47,316 --> 00:11:49,030
Loop.

257
00:11:49,030 --> 00:11:53,320
OK, so you'll see that we've got
these drone commands, and

258
00:11:53,320 --> 00:11:56,330
I will show you what one
of those actually is.

259
00:11:56,330 --> 00:11:57,980
The first parameter is
the actual command.

260
00:11:57,980 --> 00:12:00,230
Now, if you look inside the
documentation, you'll see

261
00:12:00,230 --> 00:12:05,390
that, typically, the commands
are like AT* and then a

262
00:12:05,390 --> 00:12:06,280
specific command.

263
00:12:06,280 --> 00:12:08,280
And one of those specific
commands is this PCMD_MAG.

264
00:12:08,280 --> 00:12:11,840

265
00:12:11,840 --> 00:12:15,090
And then normally there is
a comma-separated list of

266
00:12:15,090 --> 00:12:17,430
parameters after which,
actually, what you're

267
00:12:17,430 --> 00:12:18,310
configuring.

268
00:12:18,310 --> 00:12:22,840
So in this case, the PCMD_MAG
is for telling the drone how

269
00:12:22,840 --> 00:12:25,620
to fly, so it's left
and right tilt.

270
00:12:25,620 --> 00:12:27,270
So here's the thing.

271
00:12:27,270 --> 00:12:29,200
If you're looking at the drone,
it's got left and right

272
00:12:29,200 --> 00:12:33,350
tilt, front and back tilt, which
is it actually flying.

273
00:12:33,350 --> 00:12:35,530
Then there is vertical speed,
which is kind of up and down

274
00:12:35,530 --> 00:12:36,690
its elevation, and then there's

275
00:12:36,690 --> 00:12:38,580
rotation, the angular speed.

276
00:12:38,580 --> 00:12:40,940
So you see, all four
of those things are

277
00:12:40,940 --> 00:12:41,960
actually captured here.

278
00:12:41,960 --> 00:12:43,350
PETE LEPAGE: Right.

279
00:12:43,350 --> 00:12:46,830
Now, the one thing, and you
probably are going to go into

280
00:12:46,830 --> 00:12:51,190
this in a sec, but I saw that
float 32 to int 32.

281
00:12:51,190 --> 00:12:54,740
And I'm like, why the heck
would you convert

282
00:12:54,740 --> 00:12:57,300
a float to an int?

283
00:12:57,300 --> 00:13:01,220
And why are you doing it
yourself instead of just using

284
00:13:01,220 --> 00:13:03,290
one of the built-in functions?

285
00:13:03,290 --> 00:13:09,310
Like why not just do floor or
ceiling or something like that

286
00:13:09,310 --> 00:13:13,130
where we can get a much
more manageable value?

287
00:13:13,130 --> 00:13:18,590
PAUL LEWIS: So for whatever
reason, the drone likes to

288
00:13:18,590 --> 00:13:20,660
receive float values
as integers.

289
00:13:20,660 --> 00:13:24,270

290
00:13:24,270 --> 00:13:28,190
So say, for example, the left
and right tilt, so that's the

291
00:13:28,190 --> 00:13:30,370
sort of flying left and right.

292
00:13:30,370 --> 00:13:32,450
You get a number between
minus 1 and 1.

293
00:13:32,450 --> 00:13:34,700
That's what you've got
to send the drone.

294
00:13:34,700 --> 00:13:38,390
But bit-wise, that comes out
as a completely different

295
00:13:38,390 --> 00:13:39,750
number as an integer.

296
00:13:39,750 --> 00:13:43,970
So the actual bits for a 32-bit
flow, that make up

297
00:13:43,970 --> 00:13:46,760
minus 1 look very different to
the bits that would make up an

298
00:13:46,760 --> 00:13:49,060
integer at minus 1, as
I understand it.

299
00:13:49,060 --> 00:13:52,700
So we wrote the Util.

300
00:13:52,700 --> 00:13:55,330
So DRONE.Util.float32ToInt32,
which

301
00:13:55,330 --> 00:13:57,530
converts at the bit level.

302
00:13:57,530 --> 00:14:00,090
And what we do is actually
very useful if you

303
00:14:00,090 --> 00:14:01,550
ever need to do it.

304
00:14:01,550 --> 00:14:05,631
The array buffer is your
best friend here.

305
00:14:05,631 --> 00:14:08,890
And so we create a 4 byte,
so that's 32 bits.

306
00:14:08,890 --> 00:14:11,870
We create a 4-byte ArrayBuffer
and then a

307
00:14:11,870 --> 00:14:14,180
DataView on that buffer.

308
00:14:14,180 --> 00:14:19,880
And then we set a 32-bit float
on our buffer with a value,

309
00:14:19,880 --> 00:14:23,660
and then we read back
out an integer 32.

310
00:14:23,660 --> 00:14:26,295
So it's definitely worth looking
into DataViews and

311
00:14:26,295 --> 00:14:28,330
ArrayBuffers if you've ever
come across them.

312
00:14:28,330 --> 00:14:29,950
The ArrayBuffer is sort of--

313
00:14:29,950 --> 00:14:31,380
it's almost data agnostic.

314
00:14:31,380 --> 00:14:32,290
It doesn't really care.

315
00:14:32,290 --> 00:14:34,560
It's just going to store
bits and bytes.

316
00:14:34,560 --> 00:14:36,020
It doesn't really mind.

317
00:14:36,020 --> 00:14:37,700
It's the views that you
attach on the top.

318
00:14:37,700 --> 00:14:43,830
So DataView is good when you
need to push in and pull out

319
00:14:43,830 --> 00:14:47,160
data of different types like
unsigned integers, integers,

320
00:14:47,160 --> 00:14:51,490
floats, some of them 16
bit, 8 bit, 32 bit.

321
00:14:51,490 --> 00:14:53,390
So it gives you all these
different ways of actually

322
00:14:53,390 --> 00:14:56,200
accessing the underlying
bits and bytes.

323
00:14:56,200 --> 00:14:59,740
So that's how we actually do
that conversion from a 32-bit

324
00:14:59,740 --> 00:15:02,990
float to a 32-bit integer.

325
00:15:02,990 --> 00:15:03,780
So that's why.

326
00:15:03,780 --> 00:15:05,980
It's just simply because that's
how the drone likes to

327
00:15:05,980 --> 00:15:07,550
receive its data.

328
00:15:07,550 --> 00:15:10,300
How it then actually deals with
it on the other side, I'm

329
00:15:10,300 --> 00:15:11,550
not so sure.

330
00:15:11,550 --> 00:15:13,800

331
00:15:13,800 --> 00:15:16,850
So one of things we're doing,
is we've got these numbers

332
00:15:16,850 --> 00:15:18,910
that we're converting, the left
and right tilt, the front

333
00:15:18,910 --> 00:15:22,030
and back, the vertical speed
and the angular speed.

334
00:15:22,030 --> 00:15:23,893
And we're converting those
or wrapping them

335
00:15:23,893 --> 00:15:26,400
up in a drone command.

336
00:15:26,400 --> 00:15:28,310
So let me show you a drone
command, which

337
00:15:28,310 --> 00:15:32,070
is remarkably simple.

338
00:15:32,070 --> 00:15:35,070
We create a command with the
actual command string, which

339
00:15:35,070 --> 00:15:43,810
in that case was PCMD_MAG and
then the actual parts of the

340
00:15:43,810 --> 00:15:45,570
message that we want to put
after the command, so the

341
00:15:45,570 --> 00:15:47,720
actual values themselves.

342
00:15:47,720 --> 00:15:52,011
So you'll see in this case,
this has one, two, three,

343
00:15:52,011 --> 00:15:54,940
four, five, six, seven.

344
00:15:54,940 --> 00:15:56,300
I'm not using six and seven
as you can see.

345
00:15:56,300 --> 00:15:57,790
I've just filled them
with zeroes for now.

346
00:15:57,790 --> 00:16:00,290

347
00:16:00,290 --> 00:16:03,650
And then whenever we actually
write it out to a string,

348
00:16:03,650 --> 00:16:06,730
you'll see, I mentioned at the
start, we have this AT*

349
00:16:06,730 --> 00:16:07,515
followed by the command.

350
00:16:07,515 --> 00:16:08,380
PETE LEPAGE: Right.

351
00:16:08,380 --> 00:16:09,540
PAUL LEWIS: That's exactly
what we're doing here.

352
00:16:09,540 --> 00:16:13,000
When we say give me this drone
command in a string format, it

353
00:16:13,000 --> 00:16:16,920
converts it and says AT command,
AT*, followed by the

354
00:16:16,920 --> 00:16:18,890
actual command.

355
00:16:18,890 --> 00:16:22,380
And then you'll see this
DRONE.Sequence.next.

356
00:16:22,380 --> 00:16:29,190
Every message that you send
to the drone increases

357
00:16:29,190 --> 00:16:31,070
incrementally, increases
by one every time.

358
00:16:31,070 --> 00:16:32,860
That's a better way
of saying it.

359
00:16:32,860 --> 00:16:34,330
So we start off at one.

360
00:16:34,330 --> 00:16:37,390
The first command you send has
a sequence number of one, and

361
00:16:37,390 --> 00:16:38,660
it just goes up from there.

362
00:16:38,660 --> 00:16:40,980
So we just keep a track on that
internally so you don't

363
00:16:40,980 --> 00:16:45,030
have to remember which number
you're on and so forth.

364
00:16:45,030 --> 00:16:48,010
And then we just simply join
together with commas the

365
00:16:48,010 --> 00:16:53,212
different parts of
the command.

366
00:16:53,212 --> 00:16:55,520
PETE LEPAGE: So I just want
to interrupt for one sec.

367
00:16:55,520 --> 00:16:59,250
As people are watching this, if
you have questions, you can

368
00:16:59,250 --> 00:17:02,750
go post your questions to the
Google Moderator queue.

369
00:17:02,750 --> 00:17:17,079
If you go to
http://goo.gl/gHCgH.

370
00:17:17,079 --> 00:17:19,260
I'll get that posted on
screen here in a sec.

371
00:17:19,260 --> 00:17:24,140
But again, that's small g,
capital H, capital C, small g,

372
00:17:24,140 --> 00:17:25,542
Capital H.

373
00:17:25,542 --> 00:17:27,160
PAUL LEWIS: Awesome.

374
00:17:27,160 --> 00:17:30,270
So we've got this command that
actually tells the drone where

375
00:17:30,270 --> 00:17:33,191
to fly and so forth, but for the
eagle eyed among you, you

376
00:17:33,191 --> 00:17:34,770
will have realized we've
not actually told the

377
00:17:34,770 --> 00:17:36,750
drone to take off.

378
00:17:36,750 --> 00:17:38,960
Luckily, that's the next one.

379
00:17:38,960 --> 00:17:40,430
And that simply just
takes a number.

380
00:17:40,430 --> 00:17:43,670
So the commander here is ref
and it takes a number.

381
00:17:43,670 --> 00:17:44,610
There are two numbers--

382
00:17:44,610 --> 00:17:46,580
takeoff and land.

383
00:17:46,580 --> 00:17:49,400
So they're just stored in
certain, I believe, open

384
00:17:49,400 --> 00:17:50,410
constants up here.

385
00:17:50,410 --> 00:17:53,742
I have take off and land.

386
00:17:53,742 --> 00:17:56,270
It's two magic numbers.

387
00:17:56,270 --> 00:18:01,060
So let me see now.

388
00:18:01,060 --> 00:18:02,990
Take off and land.

389
00:18:02,990 --> 00:18:05,490
So it's interesting then
that you're in

390
00:18:05,490 --> 00:18:06,930
this situation where--

391
00:18:06,930 --> 00:18:08,540
oh, it's also worth saying
these numbers

392
00:18:08,540 --> 00:18:09,900
are absolute values.

393
00:18:09,900 --> 00:18:12,630
So one of the things about
sending these packets

394
00:18:12,630 --> 00:18:15,930
repeatedly to the drone is you
might be thinking, well, what

395
00:18:15,930 --> 00:18:17,180
if packets get dropped?

396
00:18:17,180 --> 00:18:20,220

397
00:18:20,220 --> 00:18:21,790
How is it going to
cope with that?

398
00:18:21,790 --> 00:18:23,160
So there's a couple
of things here.

399
00:18:23,160 --> 00:18:26,570
One is that we lop about
every 30 milliseconds.

400
00:18:26,570 --> 00:18:29,930
And again, the SDK recommends
roughly that rate, that you

401
00:18:29,930 --> 00:18:34,360
send these commands roughly
that often.

402
00:18:34,360 --> 00:18:35,750
But these values are absolute.

403
00:18:35,750 --> 00:18:39,850
So for example, the tilt is a
value between minus 1 and 1.

404
00:18:39,850 --> 00:18:43,000
The drone seemingly doesn't
expect you to interplay

405
00:18:43,000 --> 00:18:44,480
between numbers or anything
like that.

406
00:18:44,480 --> 00:18:46,880
If you say 0, it's just
going to stop there.

407
00:18:46,880 --> 00:18:49,220
If you say minus 1, it's
going to go off.

408
00:18:49,220 --> 00:18:52,240
And as soon as you say 0 again,
it's going to stop.

409
00:18:52,240 --> 00:18:55,310
So it's not like you have to
manage the transition between

410
00:18:55,310 --> 00:18:56,280
those numbers.

411
00:18:56,280 --> 00:18:59,480
So in that sense, we're sending
more than enough

412
00:18:59,480 --> 00:19:03,595
packets to just get through to
the drone to say, here's how I

413
00:19:03,595 --> 00:19:05,140
want you to behave right now.

414
00:19:05,140 --> 00:19:07,020
And certainly in our
experience it's

415
00:19:07,020 --> 00:19:08,270
worked out just fine.

416
00:19:08,270 --> 00:19:10,940

417
00:19:10,940 --> 00:19:12,085
PETE LEPAGE: All right.

418
00:19:12,085 --> 00:19:15,880
PAUL LEWIS: And then let's look
at the actual action.

419
00:19:15,880 --> 00:19:19,160
So we expose through this API
a number of actions that you

420
00:19:19,160 --> 00:19:20,700
can actually do--

421
00:19:20,700 --> 00:19:25,310
take off, land, raise and lower
the drone, tilt left and

422
00:19:25,310 --> 00:19:26,120
right, which we talked about.

423
00:19:26,120 --> 00:19:28,260
So there's the flying ones,
the tilting ones.

424
00:19:28,260 --> 00:19:30,910
Then there is rotation, and
then there's an all stop,

425
00:19:30,910 --> 00:19:36,240
which basically just resets
all those values to zero.

426
00:19:36,240 --> 00:19:39,140
You can see they're all set on
this status object, which we

427
00:19:39,140 --> 00:19:42,290
use when we're actually pulling
out those values.

428
00:19:42,290 --> 00:19:46,310
So we have this single source of
truth internally to the API

429
00:19:46,310 --> 00:19:50,400
as to what we think the drone
should be doing, OK?

430
00:19:50,400 --> 00:19:53,160
PETE LEPAGE: All right.

431
00:19:53,160 --> 00:19:56,120
PAUL LEWIS: So these
all get exposed.

432
00:19:56,120 --> 00:19:59,190
And that's really all there is
to it in terms of actually

433
00:19:59,190 --> 00:20:01,570
sending out information.

434
00:20:01,570 --> 00:20:03,920
We do pick up the nav data.

435
00:20:03,920 --> 00:20:06,360
Let me just find that.

436
00:20:06,360 --> 00:20:07,930
Now, I don't pick it
up all that often.

437
00:20:07,930 --> 00:20:13,500
It's something I like to do with
mine is to actually pull

438
00:20:13,500 --> 00:20:17,370
in enough data and to use it to
visualize what's going on a

439
00:20:17,370 --> 00:20:18,100
little bit more.

440
00:20:18,100 --> 00:20:20,505
But what we do is, we read
from that nav socket.

441
00:20:20,505 --> 00:20:24,980
And if you remember back at the
start, I said 5554 is the

442
00:20:24,980 --> 00:20:27,280
socket on which the drone
is going to send its

443
00:20:27,280 --> 00:20:29,040
information to you.

444
00:20:29,040 --> 00:20:30,580
So we read from that.

445
00:20:30,580 --> 00:20:33,300
And if we have data, we just
run it through this

446
00:20:33,300 --> 00:20:36,060
DRONE.NavData.parse.

447
00:20:36,060 --> 00:20:39,540
So this just comes back as
an array buffer, and it

448
00:20:39,540 --> 00:20:42,060
contains some data.

449
00:20:42,060 --> 00:20:44,760
And the data it contains,
as I said, is things

450
00:20:44,760 --> 00:20:46,480
like you can see here.

451
00:20:46,480 --> 00:20:51,980
We get things like battery
percentage, its angles, its

452
00:20:51,980 --> 00:20:53,580
altitude, and its velocities.

453
00:20:53,580 --> 00:20:56,530
And what we do is this array
buffer that comes back in

454
00:20:56,530 --> 00:21:02,460
through the socket, we attach
one of those DataViews again

455
00:21:02,460 --> 00:21:05,810
on to that data so we could
start pulling things out.

456
00:21:05,810 --> 00:21:09,390
And then at very known positions
from within that

457
00:21:09,390 --> 00:21:12,160
array buffer, we can start
pulling numbers.

458
00:21:12,160 --> 00:21:17,800
So the battery is, for example,
I think at the 24th

459
00:21:17,800 --> 00:21:25,710
byte or thereabouts, maybe
slightly further on.

460
00:21:25,710 --> 00:21:28,570
So as I say, the documentation
has all this listed for you as

461
00:21:28,570 --> 00:21:29,440
does the source code.

462
00:21:29,440 --> 00:21:32,170
So it's more a case of flushing
out and saying, OK, I

463
00:21:32,170 --> 00:21:34,040
got this data back
from the drone.

464
00:21:34,040 --> 00:21:35,890
It's just this raw data.

465
00:21:35,890 --> 00:21:38,670
Now, I actually need to
specifically attach on a

466
00:21:38,670 --> 00:21:41,510
DataView and sort of pull the
numbers out manually.

467
00:21:41,510 --> 00:21:46,090
And then obviously, we wrap
those back up as an object and

468
00:21:46,090 --> 00:21:49,650
return those if needed.

469
00:21:49,650 --> 00:21:52,340
So you might think it's actually
more complicated to

470
00:21:52,340 --> 00:21:54,280
talk to a drone.

471
00:21:54,280 --> 00:21:55,420
It's actually not.

472
00:21:55,420 --> 00:21:58,750
Chrome does a great job of
abstracting away this socket

473
00:21:58,750 --> 00:22:02,030
read and write, stuff
that you need to do.

474
00:22:02,030 --> 00:22:04,150
And so it's really just a case
of opening the socket,

475
00:22:04,150 --> 00:22:06,360
following the instructions,
and start

476
00:22:06,360 --> 00:22:09,340
reading and writing data.

477
00:22:09,340 --> 00:22:12,220
So then the other side of this,
unless you've got any

478
00:22:12,220 --> 00:22:12,730
questions, Pete.

479
00:22:12,730 --> 00:22:14,210
PETE LEPAGE: No.

480
00:22:14,210 --> 00:22:15,200
I'll let you keep going.

481
00:22:15,200 --> 00:22:16,240
PAUL LEWIS: All right.

482
00:22:16,240 --> 00:22:16,500
Cool.

483
00:22:16,500 --> 00:22:20,475
So now, we've got this drone
API, and we wanted to wrap it

484
00:22:20,475 --> 00:22:23,540
up inside a Chrome app
and put a gamepad API

485
00:22:23,540 --> 00:22:24,960
on it, and so forth.

486
00:22:24,960 --> 00:22:28,700
So one of the first things I did
was to get one of these.

487
00:22:28,700 --> 00:22:29,390
PETE LEPAGE: Right.

488
00:22:29,390 --> 00:22:31,590
So the gamepad controller.

489
00:22:31,590 --> 00:22:34,740
PAUL LEWIS: Yep, and drop
that into Chrome.

490
00:22:34,740 --> 00:22:38,180
And then on HTML5rocks--

491
00:22:38,180 --> 00:22:43,210
and we can put this link up in
a little bit-- we have these

492
00:22:43,210 --> 00:22:45,070
tutorials on the gamepad.

493
00:22:45,070 --> 00:22:48,010
Because one of the things about
the gamepad API is it's

494
00:22:48,010 --> 00:22:49,790
gamepad agnostic.

495
00:22:49,790 --> 00:22:52,190
And that means it can be quite
interesting to work with,

496
00:22:52,190 --> 00:22:55,990
because it doesn't say, oh,
this is the X button the

497
00:22:55,990 --> 00:22:57,040
square button.

498
00:22:57,040 --> 00:22:59,480
It just says this button one or
button two, button three,

499
00:22:59,480 --> 00:23:01,090
button four.

500
00:23:01,090 --> 00:23:04,560
So when you actually know the
pad you're dealing with, often

501
00:23:04,560 --> 00:23:07,910
it can be good to abstract
that away a little bit.

502
00:23:07,910 --> 00:23:10,410
And that's exactly what this
code does, and it's on

503
00:23:10,410 --> 00:23:11,490
HTML5rocks.

504
00:23:11,490 --> 00:23:13,020
It's definitely worth reading
through because it's a really

505
00:23:13,020 --> 00:23:15,510
good introduction to
the gamepad API.

506
00:23:15,510 --> 00:23:19,270
But you'll see right at the
bottom of here, I've wired it

507
00:23:19,270 --> 00:23:21,810
up so that I have this
DRONE.Gamepad.

508
00:23:21,810 --> 00:23:27,490
So I abstracted the gamepad a
little bit further and have

509
00:23:27,490 --> 00:23:28,740
this updateButton
and updateAxis.

510
00:23:28,740 --> 00:23:34,120
So every button on the gamepad
and every axis for the sticks,

511
00:23:34,120 --> 00:23:38,306
the sticks over here, they get
sent through to me through

512
00:23:38,306 --> 00:23:38,690
this update button and--

513
00:23:38,690 --> 00:23:42,891
PETE LEPAGE: So you're listening
for each of those.

514
00:23:42,891 --> 00:23:45,380
PAUL LEWIS: This is actually
done through polling.

515
00:23:45,380 --> 00:23:49,710
So there aren't events
for the gamepad API.

516
00:23:49,710 --> 00:23:52,430
It's a polling API.

517
00:23:52,430 --> 00:23:56,501
So yeah, you send a request from
the gamepad, OK, button-1

518
00:23:56,501 --> 00:23:58,900
or button-0, what's its
current status?

519
00:23:58,900 --> 00:24:00,090
So that gets sent through.

520
00:24:00,090 --> 00:24:03,230
Now that, curiously enough,
actually fits with our model

521
00:24:03,230 --> 00:24:06,260
because we're going to be
sending data to the drone very

522
00:24:06,260 --> 00:24:09,240
often as well.

523
00:24:09,240 --> 00:24:10,390
We know we're polling
the gamepad.

524
00:24:10,390 --> 00:24:13,290
We're getting the latest value
from the gamepad, and we send

525
00:24:13,290 --> 00:24:14,510
that through to the drone.

526
00:24:14,510 --> 00:24:16,250
We pipe it through the
API, but we send that

527
00:24:16,250 --> 00:24:18,330
through to the drone.

528
00:24:18,330 --> 00:24:21,400
So let me just fire up.

529
00:24:21,400 --> 00:24:27,940
I believe it should be in
the drone's gamepad API.

530
00:24:27,940 --> 00:24:33,070
So you can see in the
updateButton and updateAxis,

531
00:24:33,070 --> 00:24:36,390
we have a little bit going on.

532
00:24:36,390 --> 00:24:37,590
Let's talk about the
updateButton.

533
00:24:37,590 --> 00:24:42,500
So updateButton, that gets
called whenever I press--

534
00:24:42,500 --> 00:24:46,150
or, in fact, it gets called
several times a second.

535
00:24:46,150 --> 00:24:49,410
All I'm looking for is whether
the value is 1, so press down.

536
00:24:49,410 --> 00:24:51,830
Now, if it's the right shoulder
button, you'll see

537
00:24:51,830 --> 00:24:54,980
I'm telling the drone
to take off.

538
00:24:54,980 --> 00:24:56,970
If it's the left shoulder
button, land.

539
00:24:56,970 --> 00:24:59,140
And the select button on
here is the all stop.

540
00:24:59,140 --> 00:25:00,480
It's the one that actually
says all the

541
00:25:00,480 --> 00:25:01,900
numbers, go back to zero.

542
00:25:01,900 --> 00:25:04,880
PETE LEPAGE: So one of the
things that, as you were

543
00:25:04,880 --> 00:25:07,010
talking about this and telling
me about this originally, the

544
00:25:07,010 --> 00:25:11,300
question I had is, so are you
using RequestAnimationFrame to

545
00:25:11,300 --> 00:25:14,320
do these loops, or are you
doing a setTimeout?

546
00:25:14,320 --> 00:25:19,020
PAUL LEWIS: So we are using
the setTimeout, because

547
00:25:19,020 --> 00:25:22,010
RequestAnimationFrame would drop
to one frame per second

548
00:25:22,010 --> 00:25:27,190
if the tab or window wasn't
actually focused.

549
00:25:27,190 --> 00:25:30,890
In the Chrome apps
situation, it's

550
00:25:30,890 --> 00:25:32,010
possibly slightly different.

551
00:25:32,010 --> 00:25:34,950
I would need to do a double
check, but we really want that

552
00:25:34,950 --> 00:25:36,760
data to be sent in any case.

553
00:25:36,760 --> 00:25:38,760
And it's not visual
updates that we're

554
00:25:38,760 --> 00:25:40,190
doing to the browser.

555
00:25:40,190 --> 00:25:44,680
So it's probably a suitable
situation in which to use the

556
00:25:44,680 --> 00:25:45,180
setTimeout.

557
00:25:45,180 --> 00:25:50,230
I think at the bottom of the
loop there, you'll see

558
00:25:50,230 --> 00:25:54,520
setTimeout is what we're doing
for making sure that we call a

559
00:25:54,520 --> 00:25:58,660
loop whether or not we're
actually in a minimize,

560
00:25:58,660 --> 00:26:01,730
maximized, or all the apps
on view, on screen.

561
00:26:01,730 --> 00:26:04,350

562
00:26:04,350 --> 00:26:05,710
All right, so the gamepad.

563
00:26:05,710 --> 00:26:09,930
One of the interesting things
about the updateAxis, so the

564
00:26:09,930 --> 00:26:15,950
values here on the axes are
minus 1 to 1 in both the axes,

565
00:26:15,950 --> 00:26:19,470
which maps extraordinarily well
to our drone, which takes

566
00:26:19,470 --> 00:26:21,640
values of minus 1 to 1.

567
00:26:21,640 --> 00:26:24,520
So pretty much all we do is we
take whatever the value is on

568
00:26:24,520 --> 00:26:26,820
that particular axis, and you'll
see if it's stick-1,

569
00:26:26,820 --> 00:26:32,470
which is the left one, we just
pass it, tilt left and right,

570
00:26:32,470 --> 00:26:34,930
and tilt front to back.

571
00:26:34,930 --> 00:26:37,360
Stick-2 is going to be
used for rotation

572
00:26:37,360 --> 00:26:40,050
and raise and lower.

573
00:26:40,050 --> 00:26:41,360
And that's it.

574
00:26:41,360 --> 00:26:44,880
That's all that is involved
with the gamepad API.

575
00:26:44,880 --> 00:26:45,950
So there you go.

576
00:26:45,950 --> 00:26:47,330
That is pretty much it.

577
00:26:47,330 --> 00:26:50,350
Everything else is just icing
on the cake in terms of

578
00:26:50,350 --> 00:26:55,360
actually putting together
a standard Chrome app.

579
00:26:55,360 --> 00:26:57,870
What I should say, I have missed
something, which is the

580
00:26:57,870 --> 00:27:00,430
permission side of things.

581
00:27:00,430 --> 00:27:02,760
Socket permissions are required
if you're going to

582
00:27:02,760 --> 00:27:07,420
actually open and use
socket connection.

583
00:27:07,420 --> 00:27:13,310
So I've got udp-bind send-to,
and tcp-connect, tcp-listen.

584
00:27:13,310 --> 00:27:18,870
Those are documented on the
developer.chrome.com/apps

585
00:27:18,870 --> 00:27:21,440
site, and you could actually
have a look and see what

586
00:27:21,440 --> 00:27:23,550
permissions you would need if
you were going to build

587
00:27:23,550 --> 00:27:24,230
something like this.

588
00:27:24,230 --> 00:27:27,000
So don't forget to add those
socket permissions to your

589
00:27:27,000 --> 00:27:29,951
manifest if that's what
you're doing, OK?

590
00:27:29,951 --> 00:27:31,010
PETE LEPAGE: All right.

591
00:27:31,010 --> 00:27:31,920
Cool.

592
00:27:31,920 --> 00:27:34,980
Well, we seem to have a few
questions coming in.

593
00:27:34,980 --> 00:27:40,320
So let's pop over to some
of those questions and

594
00:27:40,320 --> 00:27:41,390
see what we can do.

595
00:27:41,390 --> 00:27:44,260
So the first question is
"what's the latency in

596
00:27:44,260 --> 00:27:47,030
milliseconds for controlling
and getting the center data

597
00:27:47,030 --> 00:27:48,050
from the drone?

598
00:27:48,050 --> 00:27:50,880
Is it similar to the Parrot app
on smartphones or is it

599
00:27:50,880 --> 00:27:53,970
worse?" What was your
experience on that?

600
00:27:53,970 --> 00:27:59,690
PAUL LEWIS: So we haven't
actually tested this

601
00:27:59,690 --> 00:28:00,690
comparatively or anything.

602
00:28:00,690 --> 00:28:05,210
But what we have done is we've
made those socket APIs quite

603
00:28:05,210 --> 00:28:07,210
close to the metal.

604
00:28:07,210 --> 00:28:12,990
So they're really quite
performant and really fast.

605
00:28:12,990 --> 00:28:15,090
And certainly, I've had no
problems getting messages

606
00:28:15,090 --> 00:28:16,520
through to the drone
or getting messages

607
00:28:16,520 --> 00:28:18,440
back from the drone.

608
00:28:18,440 --> 00:28:21,310
So while that's empirical,
it's something that I can

609
00:28:21,310 --> 00:28:23,195
certainly say for sure
that it's been no

610
00:28:23,195 --> 00:28:24,190
problem to work with.

611
00:28:24,190 --> 00:28:24,870
PETE LEPAGE: OK.

612
00:28:24,870 --> 00:28:29,590
And so we do know that it's not
going to probably be like

613
00:28:29,590 --> 00:28:33,660
instantaneous, but it should
be pretty quick, and we can

614
00:28:33,660 --> 00:28:34,960
see how things go.

615
00:28:34,960 --> 00:28:37,850
That's maybe something we can
have a look at and add to the

616
00:28:37,850 --> 00:28:39,000
documentation or something
like that.

617
00:28:39,000 --> 00:28:42,180
PAUL LEWIS: There is worth
bearing in mind that the drone

618
00:28:42,180 --> 00:28:43,710
creates its own Wi-Fi network.

619
00:28:43,710 --> 00:28:45,180
I'm not sure if I said
this at the start.

620
00:28:45,180 --> 00:28:48,240
It creates it's own Wi-Fi
network when you switch it on.

621
00:28:48,240 --> 00:28:48,970
PETE LEPAGE: Oh, interesting.

622
00:28:48,970 --> 00:28:49,720
That's right.

623
00:28:49,720 --> 00:28:55,570
So it's not connecting to your
personal Wi-Fi network or

624
00:28:55,570 --> 00:28:57,480
anything like that, which would
be really cool, because

625
00:28:57,480 --> 00:29:00,330
it would mean like here at work,
we could connect it to

626
00:29:00,330 --> 00:29:02,400
the Google wireless.

627
00:29:02,400 --> 00:29:05,110
I could be at one end the
building or I could have it

628
00:29:05,110 --> 00:29:08,330
here, and you could
fly it in London.

629
00:29:08,330 --> 00:29:10,665
PAUL LEWIS: I'm terrified of
you having a drone army,

630
00:29:10,665 --> 00:29:12,010
remote drone army.

631
00:29:12,010 --> 00:29:13,140
That's the stuff
of nightmares.

632
00:29:13,140 --> 00:29:14,280
PETE LEPAGE: Yeah.

633
00:29:14,280 --> 00:29:16,090
It would be kind of fun,
though, I gotta say.

634
00:29:16,090 --> 00:29:17,990
PAUL LEWIS: Yeah, it would.

635
00:29:17,990 --> 00:29:19,640
So because of that, it's
not going through

636
00:29:19,640 --> 00:29:20,940
any routers or switches.

637
00:29:20,940 --> 00:29:24,150
I mean, I'm no networking
hardware expert, but that

638
00:29:24,150 --> 00:29:27,060
certainly gives you
every chance.

639
00:29:27,060 --> 00:29:28,210
PETE LEPAGE: Cool.

640
00:29:28,210 --> 00:29:32,610
And you do have those multiple
channels, so that way, you can

641
00:29:32,610 --> 00:29:33,610
get stuff back.

642
00:29:33,610 --> 00:29:36,380
If you're sending a bunch of
commands out to one, you've

643
00:29:36,380 --> 00:29:40,150
got that emergency channel that
you can get something in.

644
00:29:40,150 --> 00:29:43,910
Obviously, it's not going to
be perfect for getting the

645
00:29:43,910 --> 00:29:48,820
stuff back, but it at least
gives you a well thought-out

646
00:29:48,820 --> 00:29:50,080
API that you can play with.

647
00:29:50,080 --> 00:29:50,910
PAUL LEWIS: Definitely.

648
00:29:50,910 --> 00:29:52,070
I mean, this is UDP.

649
00:29:52,070 --> 00:29:56,060
Like I said, UDP is not
guaranteed delivery by the

650
00:29:56,060 --> 00:29:57,890
very nature of the protocol.

651
00:29:57,890 --> 00:30:00,510
But there is a lot of traffic.

652
00:30:00,510 --> 00:30:04,940
So the other thing to say is all
the messages back from the

653
00:30:04,940 --> 00:30:06,910
drone are sequenced.

654
00:30:06,910 --> 00:30:11,740
So if you did manage to get
something out of order, you

655
00:30:11,740 --> 00:30:13,480
can always check the sequence
number and make sure it's

656
00:30:13,480 --> 00:30:15,175
greater than the last
one you received.

657
00:30:15,175 --> 00:30:16,896
PETE LEPAGE: Oh, perfect.

658
00:30:16,896 --> 00:30:18,130
PAUL LEWIS: Which is as you're
sending an increasing sequence

659
00:30:18,130 --> 00:30:19,430
number, so is the drone.

660
00:30:19,430 --> 00:30:22,940
They don't relate, but they
both go up over time.

661
00:30:22,940 --> 00:30:23,830
PETE LEPAGE: OK.

662
00:30:23,830 --> 00:30:25,760
Cool.

663
00:30:25,760 --> 00:30:29,760
So Devon wanted to know how he
could get started with Chrome

664
00:30:29,760 --> 00:30:32,130
apps or get pointed in
the right direction.

665
00:30:32,130 --> 00:30:34,050
And Devon, I think that's
a great question.

666
00:30:34,050 --> 00:30:38,170
And there's a lot of good
resources and watching events

667
00:30:38,170 --> 00:30:41,220
like this is certainly one place
as we dive into a bunch

668
00:30:41,220 --> 00:30:44,390
of the APIs and some of the
things that you can do.

669
00:30:44,390 --> 00:30:48,290
But the best place you can go
is to the Chrome Developer

670
00:30:48,290 --> 00:30:49,140
documentation.

671
00:30:49,140 --> 00:30:53,660
So if you go
developer.chrome.com and have

672
00:30:53,660 --> 00:30:57,510
a look on the right-hand side,
there's a link there that says

673
00:30:57,510 --> 00:30:58,830
Chrome Apps.

674
00:30:58,830 --> 00:30:59,880
Click that.

675
00:30:59,880 --> 00:31:03,120
There's some really great stuff
on how to get started.

676
00:31:03,120 --> 00:31:06,870
The other good one that's really
interesting and really

677
00:31:06,870 --> 00:31:11,120
useful is to check out the I/O
talk that was done by Erik and

678
00:31:11,120 --> 00:31:14,400
Mihai, two of the engineers
on Chrome apps.

679
00:31:14,400 --> 00:31:20,300
So if you go to google.com/io
and look for the session that

680
00:31:20,300 --> 00:31:25,210
they did, Eric Kay, Mihai, and
I'm going to mispronounce his

681
00:31:25,210 --> 00:31:28,425
last name but it starts
with a P.

682
00:31:28,425 --> 00:31:30,440
PAUL LEWIS: I'm leaving
you hanging here.

683
00:31:30,440 --> 00:31:31,400
I don't know how to
spell Mihai's

684
00:31:31,400 --> 00:31:32,320
name either, I'm afraid.

685
00:31:32,320 --> 00:31:32,870
PETE LEPAGE: Awesome.

686
00:31:32,870 --> 00:31:33,665
All right.

687
00:31:33,665 --> 00:31:36,810
PAUL LEWIS: The other thing,
Devon, it's worth watching

688
00:31:36,810 --> 00:31:39,160
previous sessions
that we've run.

689
00:31:39,160 --> 00:31:42,000
The first couple of weeks, in
particular, we talked about

690
00:31:42,000 --> 00:31:47,430
the Hello World and what the
APIs are and CSP, Content

691
00:31:47,430 --> 00:31:49,600
Security Policy, and all
those kinds of things.

692
00:31:49,600 --> 00:31:52,180
So definitely worth watching
those as well if you have time

693
00:31:52,180 --> 00:31:53,240
PETE LEPAGE: Yeah.

694
00:31:53,240 --> 00:31:55,900
And you can find those
all if you go to

695
00:31:55,900 --> 00:32:00,600
developers.google.com/live, and
look at the Chrome events.

696
00:32:00,600 --> 00:32:01,490
We've done now--

697
00:32:01,490 --> 00:32:05,380
I think this is our fifth or
sixth Hangout that we've done.

698
00:32:05,380 --> 00:32:07,680
And we're doing them
as a weekly event.

699
00:32:07,680 --> 00:32:10,130
So next week, we'll do
a different topic.

700
00:32:10,130 --> 00:32:13,290
We'll dive into some new stuff,
show you guys some

701
00:32:13,290 --> 00:32:15,770
pretty neat things that
are going on.

702
00:32:15,770 --> 00:32:18,390

703
00:32:18,390 --> 00:32:21,710
So the next question, I think,
Paul, this one's

704
00:32:21,710 --> 00:32:23,640
pretty much for you.

705
00:32:23,640 --> 00:32:26,646
"What sort of line theme
that you are using?"

706
00:32:26,646 --> 00:32:30,780
PAUL LEWIS: It's Coda doc,
and it's Monokai

707
00:32:30,780 --> 00:32:31,950
is the color theme.

708
00:32:31,950 --> 00:32:33,270
I had to double check
that just then.

709
00:32:33,270 --> 00:32:34,240
I wasn't sure.

710
00:32:34,240 --> 00:32:36,680
It's been a while since I've
changed it, but yeah, it's

711
00:32:36,680 --> 00:32:42,750
sort of dark and Monokai
is the color scheme.

712
00:32:42,750 --> 00:32:42,940
OK.

713
00:32:42,940 --> 00:32:46,460
PETE LEPAGE: So now, you've
taken this code, you put this

714
00:32:46,460 --> 00:32:47,390
code up on GitHub.

715
00:32:47,390 --> 00:32:48,430
Is that right?

716
00:32:48,430 --> 00:32:50,585
PAUL LEWIS: Yeah, so it's
GitHub.com/googl

717
00:32:50,585 --> 00:32:51,835
echrome/chrome-app-samples.

718
00:32:51,835 --> 00:32:57,550

719
00:32:57,550 --> 00:33:00,170
We talked about this over
the last few weeks.

720
00:33:00,170 --> 00:33:04,300
It's the normal GitHub report
that we mention each week.

721
00:33:04,300 --> 00:33:06,840
So take a look at that.

722
00:33:06,840 --> 00:33:10,140
It's under there as
Parrot AR.Drone.

723
00:33:10,140 --> 00:33:12,060
And the code is commented.

724
00:33:12,060 --> 00:33:14,570
As I said, it's not going to
cover every angle, but if you

725
00:33:14,570 --> 00:33:16,870
want to see about how you can
get started with socket

726
00:33:16,870 --> 00:33:19,900
programming, it should be one
of several good examples.

727
00:33:19,900 --> 00:33:20,500
PETE LEPAGE: Yeah.

728
00:33:20,500 --> 00:33:23,740
It's a good, easy way to sort
of way to look at some of

729
00:33:23,740 --> 00:33:24,500
those things.

730
00:33:24,500 --> 00:33:28,400
There's lots of devices out
there that do have IP and

731
00:33:28,400 --> 00:33:30,210
socket-based stuff.

732
00:33:30,210 --> 00:33:32,990
In that set of samples, there's
ones that will do--

733
00:33:32,990 --> 00:33:37,140
I think there's a telnet one
if I'm not mistaken, and

734
00:33:37,140 --> 00:33:39,250
there's a couple others so that
you can go and play with

735
00:33:39,250 --> 00:33:40,550
those kinds of things.

736
00:33:40,550 --> 00:33:43,210
And there are other hardware
devices that you can pick up.

737
00:33:43,210 --> 00:33:45,330
The one that I've been playing
with recently, because I want

738
00:33:45,330 --> 00:33:48,780
to figure out a way to control
my air conditioners.

739
00:33:48,780 --> 00:33:50,920
I've got a window air
conditioner here in New York

740
00:33:50,920 --> 00:33:52,960
City, and it gets a
little hot, and I

741
00:33:52,960 --> 00:33:54,130
forget to turn it off.

742
00:33:54,130 --> 00:33:57,200
Got my first electric bill the
other day and oh, yeah.

743
00:33:57,200 --> 00:34:01,480
Don't forget to turn your
expensive appliances off,

744
00:34:01,480 --> 00:34:03,390
because they, um--

745
00:34:03,390 --> 00:34:04,150
not pretty.

746
00:34:04,150 --> 00:34:08,630
In any event, I want a Chrome
app that will allow me to turn

747
00:34:08,630 --> 00:34:10,040
this on and off.

748
00:34:10,040 --> 00:34:14,929
And so there's an IP to infrared
controller that I

749
00:34:14,929 --> 00:34:17,550
found that will allow me to go
and do that kind of stuff.

750
00:34:17,550 --> 00:34:21,760
So that's just another example
of some of the hardware

751
00:34:21,760 --> 00:34:25,610
control that you can do
with Chrome apps.

752
00:34:25,610 --> 00:34:28,130
So with that, I think that's
about the end of our questions

753
00:34:28,130 --> 00:34:29,270
for this week.

754
00:34:29,270 --> 00:34:33,969
We're going to be back next
week with the polls, with

755
00:34:33,969 --> 00:34:35,290
Renardo, myself.

756
00:34:35,290 --> 00:34:38,560
And we're going to be diving
into some more stuff about

757
00:34:38,560 --> 00:34:39,590
Chrome apps.

758
00:34:39,590 --> 00:34:41,670
So with that, thanks,
everybody.

759
00:34:41,670 --> 00:34:44,159
I hope you have a wonderful
week, and we'll

760
00:34:44,159 --> 00:34:45,980
talk to you all soon.

761
00:34:45,980 --> 00:34:46,275
PAUL LEWIS: Thanks.

762
00:34:46,275 --> 00:34:47,679
PETE LEPAGE: All righty.

763
00:34:47,679 --> 00:34:48,160
Bye, everybody.

764
00:34:48,160 --> 00:34:50,860
PAUL LEWIS: Bye.

765
00:34:50,860 --> 00:35:04,167
[MUSIC PLAYING]

