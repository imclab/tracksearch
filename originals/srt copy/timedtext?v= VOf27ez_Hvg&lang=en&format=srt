1
00:00:03,129 --> 00:00:07,729
>>Ray Cromwell: Hi. Good afternoon. Welcome
to the history and future of Google Web Toolkit.

2
00:00:07,729 --> 00:00:14,729
My name is ray Cromwell, I'm tech lead for
GWT. So I'd like to just jump right in because

3
00:00:16,369 --> 00:00:20,109
we've got seven years, believe it or not,
of history to cover.

4
00:00:20,109 --> 00:00:25,519
So, often people actually come up to me and
say why did Google even create GWT in the

5
00:00:25,519 --> 00:00:32,519
first place? Isn't JavaScript good enough
for you? Why do you need Java for Web programming?

6
00:00:33,350 --> 00:00:39,400
So I think it's instrumental to go back and
look at the context in which GWT was conceived

7
00:00:39,400 --> 00:00:45,850
seven years ago. So if you think back seven
years ago, which is an eternity in Web time,

8
00:00:45,850 --> 00:00:50,780
Web 2.0 was just starting, AJAX apps, rich
internet applications were just being created,

9
00:00:50,780 --> 00:00:55,270
the first sort of series of them. And people
were actually thinking back then that the

10
00:00:55,270 --> 00:00:59,829
future of rich internet applications was going
to be something like a war between Adobe Air

11
00:00:59,829 --> 00:01:04,360
and Microsoft Silverlight. I mean, there were
conventions on this. And people did not think

12
00:01:04,360 --> 00:01:08,819
that the browsers were powerful enough to
do really, really capable applications.

13
00:01:08,819 --> 00:01:15,819
And then Google released Gmail in 2004 and
Google Maps in 2005, and I think that started

14
00:01:15,829 --> 00:01:20,850
to change people's imagination because for
the first time, especially with Google Maps,

15
00:01:20,850 --> 00:01:26,439
people saw an application that was written
in the Web that was fast, it was fluid, it

16
00:01:26,439 --> 00:01:30,079
was -- in fact, this was before touch. It
was touchable. The way you interacted with

17
00:01:30,079 --> 00:01:33,319
the Google Maps application is you grabbed
it with the mouse pointer and flung the map

18
00:01:33,319 --> 00:01:38,759
around. So that fired up people's imagination
and people really wanted to start building

19
00:01:38,759 --> 00:01:42,630
rich Web applications like this.
But at the time if you looked around and surveyed

20
00:01:42,630 --> 00:01:48,560
the landscape there wasn't a lot of good tools
to do this in just raw JavaScript by hand.

21
00:01:48,560 --> 00:01:52,869
In fact, jQuery, which is really the most
popular library out there, wasn't even released

22
00:01:52,869 --> 00:01:59,539
until 2006. And I think probably Bruce Johnson
and Joe Weber who created GWT were sitting

23
00:01:59,539 --> 00:02:03,170
around somewhere in a cafe and saying How
can we solve this problem without building

24
00:02:03,170 --> 00:02:08,920
our own JavaScript bidi, JavaScript testing
frameworks and build servers and all this

25
00:02:08,920 --> 00:02:11,130
other kind of stuff that's been there for
a long time.

26
00:02:11,130 --> 00:02:16,310
And if you look at Java they were like wow,
it has seven million programmers, it has intelliJ

27
00:02:16,310 --> 00:02:22,310
and Eclipse, it's got Ant and Maven and it's
got J Unit and Test Mg and it has bug analysis

28
00:02:22,310 --> 00:02:25,790
software and dependency package management
and all this stuff.

29
00:02:25,790 --> 00:02:28,990
The only thing you can't do with it is you
can't write a client side Web application

30
00:02:28,990 --> 00:02:34,700
except if you want to do applets or something.
If I could only compile Java to JavaScript

31
00:02:34,700 --> 00:02:39,280
it would close the loop and we would get massive
leverage on that ecosystem. So that I think

32
00:02:39,280 --> 00:02:46,280
was the foundation context for GWT.
So it's evolved a lot since then. The first

33
00:02:46,870 --> 00:02:53,040
version of GWT was released in 2006, followed
very shortly by a few other versions that

34
00:02:53,040 --> 00:02:58,890
really didn't add much to fix bugs. The really
important thing is with GWT 1.3 in 2007 early

35
00:02:58,890 --> 00:03:04,150
on we released it as open source. And for
the first time everyone could contribute to

36
00:03:04,150 --> 00:03:09,840
GWT if they wanted to. And it was also the
first to get OSX support.

37
00:03:09,840 --> 00:03:15,380
Later in 2007 we added J Unit testing framework
support as well as automatic sprite sheeting.

38
00:03:15,380 --> 00:03:20,720
This was another first because back in 2007
we were automatically creating CSS sprite

39
00:03:20,720 --> 00:03:25,310
sheets on the fly well before actually people
had built tools to do this for hand-coded

40
00:03:25,310 --> 00:03:28,810
JavaScript. But the biggest thing people were
asking us over and over again is when are

41
00:03:28,810 --> 00:03:32,610
you going to have Java 5 support? We want
generics, we want enoms, we want auto boxing,

42
00:03:32,610 --> 00:03:38,070
all that stuff. So they did a fire drill,
they crunched down and in 2008 they got Java

43
00:03:38,070 --> 00:03:45,070
1.5 support. In fact, 1.5 was one of the biggest
releases. It added not just Java 1.5 support,

44
00:03:45,180 --> 00:03:49,180
but this new overlay type system that allowed
you to link with JavaScript for the first

45
00:03:49,180 --> 00:03:55,650
time with zero overhead in the compiler. It
had a new low level DOM API, and we added

46
00:03:55,650 --> 00:03:59,200
CSS themes to the widgets for the first time,
so everyone who used GWT early on knew that

47
00:03:59,200 --> 00:04:04,540
the widgets no style whatsoever. Out of the
box it just looked like nothing. So we added

48
00:04:04,540 --> 00:04:09,170
a couple of CSS themes so at least out of
the box someone could actually look at the

49
00:04:09,170 --> 00:04:11,319
app and not puke.
[ Laughter ]

50
00:04:11,319 --> 00:04:15,650
>>Ray Cromwell: And we added this thing called
linkers which has some useful things that

51
00:04:15,650 --> 00:04:21,230
I can perhaps get into later.
And with 2009 we basically redid the event

52
00:04:21,230 --> 00:04:25,720
handler system to make event handling more
generic and not just tied to the DOM. Now

53
00:04:25,720 --> 00:04:30,120
you could fire custom events and reuse events
on both the client and in your server code.

54
00:04:30,120 --> 00:04:34,110
We added code coverage support with Emma.
We added war directory support so you could

55
00:04:34,110 --> 00:04:38,220
just point our tools at a war directory and
it would work. And we added a parallelized

56
00:04:38,220 --> 00:04:41,280
build system that today is mostly used by
Google.

57
00:04:41,280 --> 00:04:48,280
In 2009 we had a minor release that mostly
just added support. 2009, though, was the

58
00:04:49,720 --> 00:04:54,160
year of a really big release, and that was
GWT 2.0. And GWT 2.0 was an overhaul. It was

59
00:04:54,160 --> 00:04:58,760
the biggest release ever. We added a totally
new dev mode so that you could develop in

60
00:04:58,760 --> 00:05:02,710
development mode with any browser you liked.
So whether it was Chrome or whether it was

61
00:05:02,710 --> 00:05:08,210
IE, whether it was Safari, Firefox, you had
the same experience. Previously we were bundling

62
00:05:08,210 --> 00:05:13,870
a really old version of Firefox or IE directly
into the GWT toolkit, so you couldn't even

63
00:05:13,870 --> 00:05:18,660
upgrade the browser you were developing with.
We added draft compilation to speed up your

64
00:05:18,660 --> 00:05:24,490
compiles. We added this new templating system
called UI binder. We added layout panels for

65
00:05:24,490 --> 00:05:30,240
really efficient CSS style layout. And we
added the code splitter, which was an overhaul

66
00:05:30,240 --> 00:05:34,760
to compiler to allow you to tell the compiler
that certain pieces of code don't need to

67
00:05:34,760 --> 00:05:39,260
be loaded when your app starts up, but they
can be loaded later. And a new system for

68
00:05:39,260 --> 00:05:42,940
bundling resources into your application,
which was called client bundle, which was

69
00:05:42,940 --> 00:05:47,340
the evolution of image bundle, which did sprite
sheets. With client bundle we also bundle

70
00:05:47,340 --> 00:05:53,070
in CSS and we have a CSS compiler that performs
optimizations on the CSS to shrink that down

71
00:05:53,070 --> 00:05:58,180
as well.
In 2010 we partnered with VMWare to support

72
00:05:58,180 --> 00:06:04,480
their cloud, and that necessitated a new RPC
system that was not as tied to Java as GWT

73
00:06:04,480 --> 00:06:10,699
RPC was, and that was request factory, which
was a more JSON oriented RPC framework. We

74
00:06:10,699 --> 00:06:16,370
did data binding with the editor framework.
JSR 303 bean validation support, model view

75
00:06:16,370 --> 00:06:22,760
presenter pattern support, and a new system
of cell widgets which are efficient widgets

76
00:06:22,760 --> 00:06:28,250
for rendering like tables and grids.
Then we had a couple of minor releases. We

77
00:06:28,250 --> 00:06:33,360
acquired this company called Instantiations
and we released as open source WYSIWYG designer

78
00:06:33,360 --> 00:06:39,990
for GWT UIs. We added a lot of HTML5 support,
like canvas and storage and things like that.

79
00:06:39,990 --> 00:06:46,350
And we dropped in a little bit of stuff for
Google in terms of enhancing app integration.

80
00:06:46,350 --> 00:06:50,020
And then finally, in the last release we sort
of started to think that we need to move off

81
00:06:50,020 --> 00:06:54,460
Ant and get more towards Maven, so we sort
of Mavenized it.

82
00:06:54,460 --> 00:06:59,260
So that's where we were. That's the history
of GWT.

83
00:06:59,260 --> 00:07:02,680
So where are we today?
Well, as far as we can tell the SDK has been

84
00:07:02,680 --> 00:07:06,620
downloaded over a million times, but that's
probably not an accurate number because a

85
00:07:06,620 --> 00:07:13,620
lot of people are getting it from Maven central
now. We have over 100,000 monthly active developers.

86
00:07:13,820 --> 00:07:17,830
Because software basically periodically checks
to see if there's a new version to give you

87
00:07:17,830 --> 00:07:22,169
a notification that GWT 2.5 is available.
So we at least know of Eclipse users there's

88
00:07:22,169 --> 00:07:27,229
100,000 active developers. We have deep integration
with Eclipse through the Google Eclipse plug-in

89
00:07:27,229 --> 00:07:33,639
with intelliJ and with VMWare spring tools.
And our products are used widely within Google,

90
00:07:33,639 --> 00:07:39,520
including our biggest product, which is AdWords,
Google Flights, Offers, Google Groups, Blogger,

91
00:07:39,520 --> 00:07:43,040
many that you haven't even imagined that were
written in GWT.

92
00:07:43,040 --> 00:07:48,150
And we did a couple of fun things. We ported
Quake, first-person shooter in 2009 using

93
00:07:48,150 --> 00:07:53,759
GWT to the Web and it ran smoothly at 60 frames
per second in a browser, and Angry Birds for

94
00:07:53,759 --> 00:07:57,570
the Web, if you've ever played for Chrome,
is written in GWT.

95
00:07:57,570 --> 00:08:02,350
So GWT today is a mature, high quality code
base.

96
00:08:02,350 --> 00:08:06,940
What more could we do? Is there anything left
to actually do to improve GWT?

97
00:08:06,940 --> 00:08:13,940
And I'm happy to say over the last year we've
done a lot. In fact, the GWT 2.5 release that

98
00:08:14,389 --> 00:08:19,740
we're introducing today is the largest release
we've done, I think, since GWT 2.1. We've

99
00:08:19,740 --> 00:08:25,630
added more stuff in 2.5 than we did in 2.2,
2.3, 2.4 put together.

100
00:08:25,630 --> 00:08:31,960
Let me go over a few of them. First, we did
a lot of work on the compiler. So out of the

101
00:08:31,960 --> 00:08:36,740
box with no changes to your code, if you just
recompile your application you will get a

102
00:08:36,740 --> 00:08:40,690
substantial code size reduction.
For example, the showcase application, if

103
00:08:40,690 --> 00:08:46,680
you just recompile the GWT 2.5, 14% smaller
JavaScript. And that is undercounting because

104
00:08:46,680 --> 00:08:52,140
the GWT user library has added a lot more
bloat in terms of the underlying library code.

105
00:08:52,140 --> 00:08:56,240
So it probably would have been even smaller.
The mobile Web app, eight percent smaller.

106
00:08:56,240 --> 00:09:00,880
Your mileage may vary. The larger the app
probably the better the benefit. Smaller apps,

107
00:09:00,880 --> 00:09:06,210
smaller benefit.
But we can do better. We also integrated the

108
00:09:06,210 --> 00:09:10,860
JavaScript closure compiler that is used at
Google for like Gmail and Google+ and Google

109
00:09:10,860 --> 00:09:16,640
Docs and a lot of other large JavaScript applications.
And the closure compiler has a lot of really

110
00:09:16,640 --> 00:09:21,560
low level JavaScript optimizations that we
never really would think to do in GWT because

111
00:09:21,560 --> 00:09:26,710
it's Java oriented, things like putting bang
zero instead of true or if you have a number

112
00:09:26,710 --> 00:09:32,600
like 10,000, rewrite it as 1E4 in scientific
language. It saves off two bytes.

113
00:09:32,600 --> 00:09:37,860
So here you can see if you enable closure
compiler you get an extra five percent co-size

114
00:09:37,860 --> 00:09:44,020
reduction. So now versus GWT 2.4, recompiled
with the switch closure compiler, we're 20%

115
00:09:44,020 --> 00:09:51,020
smaller than GWT 2.4.
But we can do better. We've also looked at

116
00:09:51,589 --> 00:09:55,540
the code splitter and so the showcase application,
for example, does a live code splitting. If

117
00:09:55,540 --> 00:09:59,160
you're not aware of what code splitting does,
it allows you to pick parts of your application,

118
00:09:59,160 --> 00:10:04,310
like a composed window or settings page, that
may not be displayed immediately when your

119
00:10:04,310 --> 00:10:08,110
application is loaded up. You can mark them
as split points that the compiler has the

120
00:10:08,110 --> 00:10:12,300
option of deferring and loading later. So
it can move that code out into a separate

121
00:10:12,300 --> 00:10:18,020
JS file, shrinking the initial size of the
JS that has to be loaded. So any bit of code

122
00:10:18,020 --> 00:10:23,000
that is exclusive to one particular fragment
and is not shared is called exclusive code.

123
00:10:23,000 --> 00:10:27,330
What I'm showing up here is there's split
points. They have some code that is only referenced

124
00:10:27,330 --> 00:10:31,830
within those split points, and if there is
some like, let's say, job util list that both

125
00:10:31,830 --> 00:10:36,240
of them use, and so any time there's shared
code we put that code in a shared fragment

126
00:10:36,240 --> 00:10:41,640
called the leftovers fragment.
Here's the problem. As you continue to increase

127
00:10:41,640 --> 00:10:46,250
the number of split points in your application,
the probability of there being shared code

128
00:10:46,250 --> 00:10:51,700
between any two split points rises. And what
that means is that that leftovers fragment

129
00:10:51,700 --> 00:10:56,020
at the bottom gets larger and larger. So when
your application loads up, before it can run

130
00:10:56,020 --> 00:11:01,370
any of these split points it has to load the
leftovers fragment because it's a shared library.

131
00:11:01,370 --> 00:11:04,399
So we needed to do something about that leftovers
fragment.

132
00:11:04,399 --> 00:11:10,110
What we do is we perform a kind of clustering.
We analyze all the fragments that you've split

133
00:11:10,110 --> 00:11:14,470
out and looked for ones that are most similar,
that basically use the most amount of code

134
00:11:14,470 --> 00:11:19,920
together, and we merge them into one fragment.
And hopefully there's a lot of shared code

135
00:11:19,920 --> 00:11:26,050
that no longer is used by anybody else. It's
only used now within that new merged fragment

136
00:11:26,050 --> 00:11:29,700
that you see in the middle of the screen.
That leaves the leftovers fragment down at

137
00:11:29,700 --> 00:11:35,140
the bottom empty where we've hoisted some
code out of it into this new shared fragment.

138
00:11:35,140 --> 00:11:42,110
So what can of effect can this have on an
application like Showcase? 39% reduction in

139
00:11:42,110 --> 00:11:45,959
code size of the initial JavaScript that your
application has to load before it can present

140
00:11:45,959 --> 00:11:49,490
the UI to the user.
The first time I saw this I thought we had

141
00:11:49,490 --> 00:11:53,779
a bug in the compiler and it was wrong, it
was removing too much code, but I've measured

142
00:11:53,779 --> 00:12:00,779
it several times and it's true. 39% code size
reduction.

143
00:12:00,920 --> 00:12:05,839
But there are other things we had to do. We
had to improve the overall diagnostics of

144
00:12:05,839 --> 00:12:09,560
the compiler. Things that you might rely on
like if someone is running your application

145
00:12:09,560 --> 00:12:13,110
and a user hits an exception, how are you
going to find out what happened and what line

146
00:12:13,110 --> 00:12:17,220
of code it happened on?
So there's this new standard that Google has

147
00:12:17,220 --> 00:12:20,930
proposed and other people have adopted called
source maps. What it does is whenever you

148
00:12:20,930 --> 00:12:25,980
compile anything to JavaScript, be it Java,
Closure, Coffee Script, whatever, we write

149
00:12:25,980 --> 00:12:30,320
out the standardized mapping file which says
this piece of Java or Coffee Script or whatever

150
00:12:30,320 --> 00:12:33,740
source language became this bit of obfuscated
JavaScript in the output.

151
00:12:33,740 --> 00:12:39,410
But having that bidirectional mapping, now
when you go to debug or inspect obfuscated

152
00:12:39,410 --> 00:12:42,830
compiled JavaScript code, it can actually
tell you the original line of code that it

153
00:12:42,830 --> 00:12:47,600
came from in your source language before you
messed with it.

154
00:12:47,600 --> 00:12:52,500
So this permits de-obfuscation of script,
but it allows GWT, more importantly, to construct

155
00:12:52,500 --> 00:12:57,350
perfectly accurate stack traces.
So right now today if the user encounters

156
00:12:57,350 --> 00:13:02,420
like an exception in one of the GWT applications,
you get the line number of the method, the

157
00:13:02,420 --> 00:13:06,380
name of the method that it occurred in, but
you actually don't actually get the actual

158
00:13:06,380 --> 00:13:09,980
line number of code within the method that
it occurred on.

159
00:13:09,980 --> 00:13:15,339
And in fact, if the compiler has inline several
methods and rolled them up into one, you actually

160
00:13:15,339 --> 00:13:19,440
don't even know what method it occurred in
because now those small inline methods are

161
00:13:19,440 --> 00:13:24,769
not even on the call stack. They've been basically
moved in to the parent caller.

162
00:13:24,769 --> 00:13:29,089
Not so with source maps. Now you will actually
know the exact original function, regardless

163
00:13:29,089 --> 00:13:33,680
of optimizations, where the error occurred.
It's Chrome only for now. Firefox has demoed

164
00:13:33,680 --> 00:13:40,680
it and they promise to support it.
Okay. So this kind of dovetails into super

165
00:13:42,470 --> 00:13:46,870
dev mode because it's what enables it. But
here's the problem. Over the years people

166
00:13:46,870 --> 00:13:51,649
have complained we haven't kept our dev mode,
C++ plug-ins up to date.

167
00:13:51,649 --> 00:13:54,910
Basically we use these native plug-ins that
we install into the browser so that when you

168
00:13:54,910 --> 00:13:59,370
run in dev mode and it's running Java code
and it has to remote control the browser and

169
00:13:59,370 --> 00:14:04,040
tell the browser add a DOM element somewhere,
it talks to this plug-in, which then remotes

170
00:14:04,040 --> 00:14:06,829
controls the browser to actually update the
browser.

171
00:14:06,829 --> 00:14:13,170
The problem is that the browser vendors have
accelerated their iteration on their browser.

172
00:14:13,170 --> 00:14:17,720
Used to be they would release a browser once
a year, Firefox 4, 5, it would take a year.

173
00:14:17,720 --> 00:14:21,670
That would give the GWT team more than enough
time to actually update three or four different

174
00:14:21,670 --> 00:14:25,839
plug-ins on three or four different operating
systems. But now we simply can't handle it

175
00:14:25,839 --> 00:14:28,600
because every six weeks they're releasing
a new version.

176
00:14:28,600 --> 00:14:35,600
Like, for example, every time Firefox releases
a new version of Firefox it breaks the C++

177
00:14:35,850 --> 00:14:39,160
plug-ins that we have.
So we needed a new solution. Plus on things

178
00:14:39,160 --> 00:14:42,990
like mobile devices like iOS you can't even
have plug-ins in the browser, so how would

179
00:14:42,990 --> 00:14:49,990
you debug a GWT application on an iPad?
So what if we could create a GWT compiler

180
00:14:50,100 --> 00:14:53,860
that was so fast we could compile your Java
code in one second? Biggest complaint we get

181
00:14:53,860 --> 00:14:57,620
is the compiler is slow. So what if we could
speed it up so we could compile your code

182
00:14:57,620 --> 00:15:03,420
in one second or 10 seconds? Then you could
actually iterate by loading up JavaScript

183
00:15:03,420 --> 00:15:08,769
into their browser. And with the combination
of source maps, you actually could debug source

184
00:15:08,769 --> 00:15:15,769
level Java code right in your browser.
So let me show you a demo of that. So I've

185
00:15:18,070 --> 00:15:23,180
got the GWT code server running, which is
the new super dev mode server. It's a servlet.

186
00:15:23,180 --> 00:15:26,519
It starts up on your GWT module and basically
it's waiting there for me to connect. It's

187
00:15:26,519 --> 00:15:31,459
going to serve up the compiled code.
So I'm going to go to this application I have

188
00:15:31,459 --> 00:15:38,459
called Silver Comet, and hopefully I've got
a network connection and it can load up.

189
00:15:45,610 --> 00:15:52,610
I might be in trouble here. If that doesn't,
what I'll do is I have another version. Here

190
00:16:02,220 --> 00:16:08,160
let's do this.
I'll just skip ahead for a second and I'll

191
00:16:08,160 --> 00:16:15,160
come back to that and show it to you.
All right. Let's let that go for a second.

192
00:16:15,310 --> 00:16:18,760
Okay. There it is.
So this is an application, it's graphing marathon

193
00:16:18,760 --> 00:16:23,250
data from the Silver Comet half-marathon in
Atlanta. You can see I can do things like

194
00:16:23,250 --> 00:16:28,540
I can hit a character, click on a person,
it tells me where the runner is.

195
00:16:28,540 --> 00:16:35,540
If I were to try to debug this today, I would
bring up the Chrome inspector and I go to

196
00:16:37,160 --> 00:16:43,930
scripts. You can see that it's basically compiled
JavaScript. So it would be really hard to

197
00:16:43,930 --> 00:16:50,930
like set a break point in here and debug it.
So let's go down to here and click on this

198
00:16:51,589 --> 00:16:57,450
little -- in the Chrome inspector this little
gearbox and say enable source maps. So now

199
00:16:57,450 --> 00:17:00,820
I'm going to click this -- I'm going to go
back to the code server and I'm going to drag

200
00:17:00,820 --> 00:17:06,159
this bookmarklet up here and I'm going to
turn on super dev mode.

201
00:17:06,159 --> 00:17:13,159
So hopefully it's going to reload. I think
my network is having problems.

202
00:17:15,939 --> 00:17:22,939
Okay. There it is. I'm going to click super
dev mode, click compile. And it's compiling.

203
00:17:29,350 --> 00:17:34,169
And usually this takes like less than two
seconds, but network is loading already, so

204
00:17:34,169 --> 00:17:35,660
it's already finished, but it's loading on
the bottom.

205
00:17:35,660 --> 00:17:42,500
There we go.
Now it's reloading the compiled JavaScript.

206
00:17:42,500 --> 00:17:47,150
It's already been compiled at this point.
I go over to this window over here and I can

207
00:17:47,150 --> 00:17:53,130
probably show you compiled in 0.979 seconds,
if you can see that.

208
00:17:53,130 --> 00:17:58,770
So the issue is there is some kind of network
thing that's hurting my demo here.

209
00:17:58,770 --> 00:18:05,770
Let me bring up the inspector and see if I
can show this to you.

210
00:18:05,870 --> 00:18:12,870
Oh, there it is. So it's back up. I'm going
to go to the scripts tag now, scripts. Now

211
00:18:17,150 --> 00:18:22,049
you can see I have Java code in here.
[ Applause ]

212
00:18:22,049 --> 00:18:28,000
>>Ray Cromwell: And I promise you it won't
take this long when you actually do it on

213
00:18:28,000 --> 00:18:31,770
your own computer. I'm going to go and I can
set a break point here. See that? And I will

214
00:18:31,770 --> 00:18:35,610
come up here and hit a character and you can
see it doing a break point. I can hit play

215
00:18:35,610 --> 00:18:39,770
and you see the things up there? So I'm stepping
through Java code. In fact, you can do something

216
00:18:39,770 --> 00:18:42,510
in super dev mode that you could never do
in regular dev mode. I'm going to step down

217
00:18:42,510 --> 00:18:49,510
into a JSNI function. I'm going to step into
this item shell, step into remove property,

218
00:18:50,640 --> 00:18:57,070
JSNI JavaScript function. You could never
do that before in regular dev mode.

219
00:18:57,070 --> 00:19:04,070
[Applause].
So let's go back to slides. Okay. UI binder.

220
00:19:08,270 --> 00:19:10,770
If you use UI binder we have more good news
for you.

221
00:19:10,770 --> 00:19:16,900
First of all, if you sell widgets, you can
now actually -- you don't have to write Java

222
00:19:16,900 --> 00:19:21,770
code, you can actually specify the template
for a cell that renders in a table grid or

223
00:19:21,770 --> 00:19:28,020
in a tree with a UI binder template. There's
sort of a new interface called UI render and

224
00:19:28,020 --> 00:19:31,950
it does that.
Secondly, we have optimized the way UI binder

225
00:19:31,950 --> 00:19:36,140
constructs the HTML and injects into the page
significantly. We have vastly reduced the

226
00:19:36,140 --> 00:19:42,860
number of DOM operations down to just a few.
The end result of that is start-up latency

227
00:19:42,860 --> 00:19:48,350
for Orchid, which also uses GWT was reduced
by 20%, and the rendering speed it was taking

228
00:19:48,350 --> 00:19:53,960
to refresh the HTML on the page went up by
300%. So not just the compiler has been improved,

229
00:19:53,960 --> 00:20:00,190
but the speed of the widgets has been improved
up to 300%.

230
00:20:00,190 --> 00:20:06,400
And we've also started the beginnings of adding
support for using the same I 18 and message

231
00:20:06,400 --> 00:20:11,840
class used on the client side in the server.
So using GWT.create in the server, and what

232
00:20:11,840 --> 00:20:16,850
that will get to is sometimes you want to
share code between the client server in terms

233
00:20:16,850 --> 00:20:22,110
of internationalization resource bundles,
this will basically get you there eventually.

234
00:20:22,110 --> 00:20:27,730
And we have updated the ARIA library support
in the GWT to the newest W3C standard. If

235
00:20:27,730 --> 00:20:34,730
you have accessibility concerns, we have better
support for that. Lastly, we're introducing

236
00:20:37,160 --> 00:20:44,160
a new experimental library called Elemental.
So what is Elemental? Well, over the years,

237
00:20:46,140 --> 00:20:50,330
as I said, the browser vendors are iterating
faster and faster, every week they are adding

238
00:20:50,330 --> 00:20:57,330
a new HTML5 API into JavaScript. And we just
can't keep up hand wrapping those APIs, so

239
00:20:57,700 --> 00:21:03,090
every release, GWT 2.2, 2.3, 2.4, we added
a few. We added canvas and then we added local

240
00:21:03,090 --> 00:21:07,380
storage, an index database, so on.
But there's just too many. We can't keep it

241
00:21:07,380 --> 00:21:12,740
up as a manual process.
So what Elemental is, it's a library that

242
00:21:12,740 --> 00:21:19,740
builds a complete 100% HTML5 mapping to the
latest Chrome, WebKit and soon Firefox, by

243
00:21:21,970 --> 00:21:27,500
actually looking at the C++ source code definitions
for the JavaScript run times used for exporting

244
00:21:27,500 --> 00:21:34,340
their APIs and auto generating a complete
set of GWT classes that directly call into

245
00:21:34,340 --> 00:21:39,450
those APIs, look, it's all done -- I've got
a typo in there -- with JavaScript overlay

246
00:21:39,450 --> 00:21:44,570
type. So when you compile this, they all melt
away, it's a small or smaller than you could

247
00:21:44,570 --> 00:21:49,950
write by hand. There's no overhead. Every
API you could think of is there, WebGL, Web

248
00:21:49,950 --> 00:21:54,270
audio sockets, RTC, even Web Intents, Shadow
DOM, these new things that you might have

249
00:21:54,270 --> 00:21:59,770
just seen at the show today. We have a new
set of collection classes that you can use

250
00:21:59,770 --> 00:22:05,860
as an alternative to JavaScript util collections
that are mapped directly to underline JavaScript

251
00:22:05,860 --> 00:22:10,789
collections, so there's no overhead if you
use like maps or arrays, no extra bloat. And

252
00:22:10,789 --> 00:22:15,760
a new JSON library, similarly that has no
overhead if you use it, just directly access

253
00:22:15,760 --> 00:22:22,760
JSON objects and no bloat in the output. I
think this is an excellent library for doing

254
00:22:23,169 --> 00:22:26,870
mobile device development because the mobile
device browsers are often on the bleeding

255
00:22:26,870 --> 00:22:31,539
edge of CSS3 and things like that because
that's how they get their extra performance.

256
00:22:31,539 --> 00:22:37,890
So it could also work for desktop. But you
might have the -- already using the existing

257
00:22:37,890 --> 00:22:40,610
stuff, so you will have to decide whether
or not you want to move over to this library.

258
00:22:40,610 --> 00:22:47,610
But try it out. I'm going to show you a demo.
Real quick. And I cooked up sort of a hack

259
00:22:49,590 --> 00:22:54,360
to show you the power of super dev mode and
to show the power of Elemental.

260
00:22:54,360 --> 00:22:59,070
And so what I have done is I've built this
servlet filter that if you try to load up

261
00:22:59,070 --> 00:23:04,580
an HTML page and if you have something in
there like this ... I'm going to type a script

262
00:23:04,580 --> 00:23:11,580
tag. I'm going to say type the SQL to text/
-- no, not JavaScript, Java. And in here,

263
00:23:14,179 --> 00:23:18,460
I'm just going to write like I would write
JavaScript. Window.alert.

264
00:23:18,460 --> 00:23:25,460
Hello. Believe it or not, that's Java code,
not JavaScript. So I have a servlet filter,

265
00:23:26,850 --> 00:23:30,910
when this file is being piped out will catch
that script tag and see well, that's Java

266
00:23:30,910 --> 00:23:35,990
code, automatically synthesize a GWT module
entry point on the fly, right into the super

267
00:23:35,990 --> 00:23:40,200
dev mode compiler, compile it in one second,
then replace it back with a regular script

268
00:23:40,200 --> 00:23:46,820
type, text JavaScript, and then the page loads.
And so -- so my computer is kind of slow on

269
00:23:46,820 --> 00:23:51,130
a real computer -- if I would upgrade my computer
it would run a lot faster, but I will show

270
00:23:51,130 --> 00:23:58,130
you that right now. Let's see -- if I just
write some code there, and it's -- oops. Wait.

271
00:24:05,020 --> 00:24:11,990
Okay. Is it running? It is running. Okay.
Demo problems again. Oh, that's because it's

272
00:24:11,990 --> 00:24:17,500
on my local machine.
That would make all difference okay. Let's

273
00:24:17,500 --> 00:24:20,340
let that load. There you go.
[ Applause ]

274
00:24:20,340 --> 00:24:26,690
>>Ray Cromwell: So now you can develop -- if
I were to release this servlet filter, you

275
00:24:26,690 --> 00:24:30,809
can actually develop Java code in a really
lightweight fashion, where you can have multiple

276
00:24:30,809 --> 00:24:34,950
HTML pages and just sprinkle a little bit
of Java code in each page a page at a time

277
00:24:34,950 --> 00:24:39,010
and just get a little tiny bit of compiled
Java code out of it. Well, why would you do

278
00:24:39,010 --> 00:24:42,020
that?
Well, simple. Any of you know by heart the

279
00:24:42,020 --> 00:24:49,020
new Web RTC camera API? I sure don't. There's
a lot of APIs in HTML5. But because this is

280
00:24:49,669 --> 00:24:56,039
Java, this is my Java IDE, you know, I can
do things like this, you know, window -- this

281
00:24:56,039 --> 00:25:02,200
is the Elemental library -- .getnavigator
or .get -- you see all of these APIs in geolocation,

282
00:25:02,200 --> 00:25:08,450
platform plug-ins, product, I can do WebKitgetusermedia,
which is the new Web RTC API to access the

283
00:25:08,450 --> 00:25:11,470
camera.
So you can get full completion, all of the

284
00:25:11,470 --> 00:25:15,720
normal stuff that you love in your IPE, but
with the sort of lightweight HTML programming

285
00:25:15,720 --> 00:25:18,850
experience. So let's try that out and see
if that works.

286
00:25:18,850 --> 00:25:25,850
Going to take a second to recompile. And hopefully
this works. There you go.

287
00:25:30,799 --> 00:25:36,409
[ Applause ]
>>Ray Cromwell: So try this out, it's experimental,

288
00:25:36,409 --> 00:25:39,809
but it has a lot of cool APIs in it to try
out. Okay.

289
00:25:39,809 --> 00:25:46,460
So you have seen the past, you have seen the
now, let's talk about the future.

290
00:25:46,460 --> 00:25:51,780
So one of the problems that's been happening
over the last year or so is that ability to

291
00:25:51,780 --> 00:25:56,970
iterate on GWT by taking outside community
contributions has slowed a lot. The reason

292
00:25:56,970 --> 00:26:02,090
why, it has been paradoxically due to GWT's
success within Google. So as more and more

293
00:26:02,090 --> 00:26:09,070
internal Google apps migrated to GWT, we could
not take much of a chance accepting patches

294
00:26:09,070 --> 00:26:14,110
without thoroughly reviewing them. Imagine
somebody submits a patch and it puts a bug

295
00:26:14,110 --> 00:26:19,320
into ad words, we could lose billions of dollars
of revenue. So we have to be really careful

296
00:26:19,320 --> 00:26:25,400
about accepting external community patches.
So you might have noticed a lot of frustration

297
00:26:25,400 --> 00:26:29,039
with the issue tracker because we had our
internal issue tracker, and we were proprietary

298
00:26:29,039 --> 00:26:33,679
to internal bugs. Hundreds of internal GWT
apps, you know, our internal customers come

299
00:26:33,679 --> 00:26:39,390
first, compared to the community because that's
where our money is coming from. And so -- so

300
00:26:39,390 --> 00:26:42,480
I thought that was a really sorry situation
to be in because a lot of the people in the

301
00:26:42,480 --> 00:26:46,970
community have contributed so much to GWT
over the years and we really needed to do

302
00:26:46,970 --> 00:26:52,210
them better.
And so I suggested and we adopted that we're

303
00:26:52,210 --> 00:26:59,210
going to basically change the governor -- governing
body of GWT to no longer just be Google as

304
00:26:59,549 --> 00:27:06,549
a dictator, but be as a peer. So we're introducing
the GWT steering committee. So now the control

305
00:27:06,620 --> 00:27:11,210
over the future roadmap of GWT, when features
go into it, who gets to be a committer, who

306
00:27:11,210 --> 00:27:15,909
is a code reviewer, what patches get landed
is now going to be controlled by a committee

307
00:27:15,909 --> 00:27:20,789
of several of the top, you know, star contributors
to the GWT community and some of the biggest

308
00:27:20,789 --> 00:27:26,090
companies using GWT. Google goes from being
now a gatekeeper to a peer amongst equals.

309
00:27:26,090 --> 00:27:29,890
So we have to be more responsive, we have
to think more about what other people are

310
00:27:29,890 --> 00:27:33,450
using GWT for, not only what we are using
it for. The steering committee is going to

311
00:27:33,450 --> 00:27:36,440
determine what the project guidelines are,
what the policies and philosophies of the

312
00:27:36,440 --> 00:27:41,289
project is going forward and determine who
gets direct commit access to the master branch.

313
00:27:41,289 --> 00:27:45,400
And it's going to set the overall future roadmap
as I said. We have drawn from a mix of star

314
00:27:45,400 --> 00:27:49,100
contributors, and here they are. This is the
initial GWT steering committee. It's Google,

315
00:27:49,100 --> 00:27:55,490
Vaadin, Sencha, Red Hat, Thomas Broyer, and
Stephan Haberman, who have done an enormous

316
00:27:55,490 --> 00:28:01,120
number of bug fixes to GWT over the years.
Daniel Kurka, who has done an absolutely awesome

317
00:28:01,120 --> 00:28:06,970
mobile GWT library, and Christian Goudreau
of Arcbees, who has done the GWT team library

318
00:28:06,970 --> 00:28:10,659
which a lot of people use because it extends
our MVP library, it's really fabulous.

319
00:28:10,659 --> 00:28:15,020
We've had some early decisions. We've had
a couple of meetings already. We've decided,

320
00:28:15,020 --> 00:28:20,450
this might please many of you, we're moving
the DMT repository from Subversion to Git.

321
00:28:20,450 --> 00:28:25,669
[ Applause ]
>>Ray Cromwell: And we're going to have two

322
00:28:25,669 --> 00:28:32,020
official branches now. The master dev line
trunk, where all of you if you have a feature,

323
00:28:32,020 --> 00:28:37,150
you can submit your patch, and it can land,
whether or not it may break an internal GWT

324
00:28:37,150 --> 00:28:40,309
application. This will be the bleeding edge
branch. Everyone when you get a nightly build

325
00:28:40,309 --> 00:28:44,570
one and try it out, we can figure out what
needs to be rolled back. But if it makes it

326
00:28:44,570 --> 00:28:49,370
through the dev branch and doesn't destroy
anybody's applications, then it's going to

327
00:28:49,370 --> 00:28:53,820
be cherry picked into the beta branch, which
represents the work on the next release, let's

328
00:28:53,820 --> 00:28:59,710
say GWT 2.6 or GWT 3.0. The beta release is
what Google is going to be building our internal

329
00:28:59,710 --> 00:29:03,570
apps off of. So there's going to be a lot
of quality assurance on that branch so you

330
00:29:03,570 --> 00:29:07,760
can be sure if you want to pick up something
that's a little more stable, you can be trusting

331
00:29:07,760 --> 00:29:11,700
in, that would be beta branch. Our partners
like Sencha and Vaadin will probably also

332
00:29:11,700 --> 00:29:18,700
be shipping code based off of beta branch
works, not the dev link. So you will have

333
00:29:19,830 --> 00:29:24,400
a much lower probability of breakage.
So here's where you will find us, there's

334
00:29:24,400 --> 00:29:28,840
going to be a new website, not up yet. It's
google.com/gwtsteering. You can read about

335
00:29:28,840 --> 00:29:33,950
all of the new rules, processes for contributing
to the GWT. And there's a GWT steering mailing

336
00:29:33,950 --> 00:29:36,820
list where you can read our meeting minutes
and our discussions on what's happening with

337
00:29:36,820 --> 00:29:40,520
the future of GWT and where it's going. So
you won't to wait ages for a blog post from

338
00:29:40,520 --> 00:29:45,000
us to see what's happening.
Now you can read it in real-time.

339
00:29:45,000 --> 00:29:49,450
So now I would like to ask Michael Mullany,
CEO of Sencha, to talk about all of the brave

340
00:29:49,450 --> 00:29:54,220
and exciting things that they're going to
do with GWT now and in the future.

341
00:29:54,220 --> 00:30:01,220
[ Applause ]
>>Michael Mullany: Awesome, it's great to

342
00:30:01,610 --> 00:30:07,240
be here. My name is Michael Mullany, I run
Sencha. Also joined by Darrell Meyer here

343
00:30:07,240 --> 00:30:13,159
in the audience who is a tech lead for Sencha
GXT at Sencha. Do you want to stand up, say

344
00:30:13,159 --> 00:30:15,540
hi?
>>> Hi there.

345
00:30:15,540 --> 00:30:19,289
[ Applause ]
>>Michael Mullany: Okay. So before we start

346
00:30:19,289 --> 00:30:23,830
just a quick poll. How many people have developed
with GWT, since you're in the GWT session,

347
00:30:23,830 --> 00:30:30,830
right? Good. How many people have done an
app over 10,000 lines? 50,000 lines? 100,000

348
00:30:31,799 --> 00:30:35,740
lines? Half a million lines? Over a million
lines of code?

349
00:30:35,740 --> 00:30:41,110
Okay. That's a good distribution.
Well, one of the reasons that we are excited

350
00:30:41,110 --> 00:30:44,720
about GWT is because it does really help you
with very large applications and very large

351
00:30:44,720 --> 00:30:50,750
teams working together. We are a company that
has about 2 million worldwide developers in

352
00:30:50,750 --> 00:30:57,750
JavaScript and in Java. Across all sorts of
applications and all sorts of geographies.

353
00:30:58,080 --> 00:31:02,669
Of that, we have about 400,000 registered
community members on an incredibly active

354
00:31:02,669 --> 00:31:06,789
forum, so we're approaching kind of a million
posts on our forums over time.

355
00:31:06,789 --> 00:31:13,000
We're also expanding geographically pretty
rapidly. We started on the East Coast, moved

356
00:31:13,000 --> 00:31:18,000
to California, we just opened a Vancouver
office and an Amsterdam office. I'm not allowed

357
00:31:18,000 --> 00:31:21,960
to say we're hiring, so I won't say that.
[ Laughter ]

358
00:31:21,960 --> 00:31:28,960
>>Michael Mullany: We have a really amazing
array of applications built with Sencha Technologies

359
00:31:29,110 --> 00:31:35,360
with XGS, with Sencha Touch and with GWT.
We have everything from very large clinical

360
00:31:35,360 --> 00:31:42,360
trials management applications to CAs, admin
interfaces to Dell's warehouse management

361
00:31:42,620 --> 00:31:49,090
system, Best Buy's store system, all built
with Sencha technologies. We're primarily

362
00:31:49,090 --> 00:31:52,760
focused on business applications and very
large applications. That's why people use

363
00:31:52,760 --> 00:31:59,760
a very structured framework, like XGS or GWT.
And our goal is to take -- to really provide

364
00:32:00,549 --> 00:32:07,549
a complete productivity capability from design
time to development run, all the way to deployment.

365
00:32:07,960 --> 00:32:13,830
So Sencha architect, if you stopped by our
sandbox yesterday, is a drag and drop visual

366
00:32:13,830 --> 00:32:18,929
app builder for Sencha Touch and XGS so you
can get mobile and desktop on the same tool.

367
00:32:18,929 --> 00:32:25,929
We are also happy to be working on GWT designer
integration for GXT. Sencha (indiscernible)

368
00:32:26,950 --> 00:32:31,399
is focused on content animations. The build
side JavaScript frameworks for mobile and

369
00:32:31,399 --> 00:32:37,840
desktop and we have GXT for Java. Our deployment
is the newest thing that we have. It's cloud

370
00:32:37,840 --> 00:32:42,760
services that basically provide back end point
services like notifications, authentications,

371
00:32:42,760 --> 00:32:49,760
app messaging for mobile and desktop applications.
Our goal, and I think this is a common thing

372
00:32:50,000 --> 00:32:56,890
across developer bases today, is to as much
as possible provide a single HTML platform

373
00:32:56,890 --> 00:33:02,070
across all of these -- in the multi-device
world, right? So from phones to tablets to

374
00:33:02,070 --> 00:33:06,730
TVs to desktops, people are trying to create
application experiences that follow you from

375
00:33:06,730 --> 00:33:12,929
device to device, that reuse data, reuse models,
reuse business logic, controller logic as

376
00:33:12,929 --> 00:33:18,070
much as possible and that's really our design
point for Sencha Technologies, whether in

377
00:33:18,070 --> 00:33:25,070
JavaScript or in Java. XGS 4 is our JavaScript
framework, I won't spend much time on it.

378
00:33:25,270 --> 00:33:32,270
It basically provides structure for JavaScript
programmers who want to create large applications

379
00:33:32,950 --> 00:33:38,049
that are pixel perfect across browser. The
companion to that is that Sencha Touch, which

380
00:33:38,049 --> 00:33:41,409
is again a JavaScript framework for modern
mobile devices.

381
00:33:41,409 --> 00:33:45,789
We made a bet that smart phones were the only
phones that smarted and that turned out that

382
00:33:45,789 --> 00:33:51,490
was the case. We do an awful lot of low level
platform code switching abstraction to make

383
00:33:51,490 --> 00:33:57,179
the code base work across every device that
you can think of. I mentioned architect and

384
00:33:57,179 --> 00:34:04,179
IL. So on to Sencha GXT, which is a meet for
this room. GXT started about five years ago

385
00:34:06,330 --> 00:34:13,330
as the -- as Darrell's project and then Darrell
joined Sencha and merged with the Sencha team.

386
00:34:14,639 --> 00:34:18,419
It's basically fully featured, theme-able,
high performance widgets.

387
00:34:18,419 --> 00:34:25,419
It's a true GWT implementation, even more
so in GXT 3 than was the case in GXT 2. The

388
00:34:25,599 --> 00:34:32,159
big thing that GXT brings to the table is
full alignment with GWT conventions in GXT

389
00:34:32,159 --> 00:34:37,839
3. But really the thing that knocks you on
the head when you look at GXT is just the

390
00:34:37,839 --> 00:34:43,739
sheer volume and weight of UI widgets that
we bring to the table that you don't have

391
00:34:43,739 --> 00:34:49,589
to create yourself. There's -- there's literally
several hundred widgets of all types for all

392
00:34:49,589 --> 00:34:55,309
types of applications that work the way that
GXT or GWT expects.

393
00:34:55,309 --> 00:35:02,309
So GXT we just completed an enormous release,
our GXT release. It was just released about

394
00:35:02,769 --> 00:35:09,769
six or eight weeks ago. It basically takes
what we had built ourselves from our own custom

395
00:35:10,799 --> 00:35:17,799
conventions for things like event handling,
all into GWT 2.1 through 2.3 conventions.

396
00:35:19,539 --> 00:35:26,539
So, for example, we now use the cells to render
our trees and our grids and it's much, much

397
00:35:28,019 --> 00:35:32,219
faster and much, much lighter weight. We have
also moved to interface-based design, so for

398
00:35:32,219 --> 00:35:38,900
large applications it's much easier to create
mocks and to do testing. We've done --

399
00:35:38,900 --> 00:35:43,089
[ Applause ]
>>Michael Mullany: Thank you. Custom theming,

400
00:35:43,089 --> 00:35:46,940
so we now use the appearance pattern. We've
pulled out theming information out of the

401
00:35:46,940 --> 00:35:52,579
components and out of widgets, so it's much,
much easier to add raw HTML and CSS styling

402
00:35:52,579 --> 00:35:58,789
into your components without standing on your
head. We also have much improved model support.

403
00:35:58,789 --> 00:36:05,789
So in -- in GXT 2, you basically have to use
our custom data stores and that was the only

404
00:36:05,959 --> 00:36:11,259
way of getting data into an application again
without standing on your head. Now you can

405
00:36:11,259 --> 00:36:17,700
basically pull in -- pull in model data from
plain Java objects or for any beans that you

406
00:36:17,700 --> 00:36:24,700
have. Much more flexible. We also added full
UI binder support so you can declare your

407
00:36:24,700 --> 00:36:31,700
UI widgets with the UI binder XML conventions.
Another thing, strongly type layout engine.

408
00:36:33,380 --> 00:36:40,380
One of the big issues with our layouts in
GXT 2 was that you could basically have a

409
00:36:41,369 --> 00:36:46,339
lot of mismatches between a container type
and a layout. So now we've gone to strongly

410
00:36:46,339 --> 00:36:50,450
typed layouts, so it's much harder to make
a mistake and the compiler will catch it if

411
00:36:50,450 --> 00:36:56,650
you try and associate a layout with a container
that doesn't match it.

412
00:36:56,650 --> 00:37:03,650
And there's a lot of other things in the release,
but basically the whole theme was have a huge

413
00:37:04,549 --> 00:37:11,549
widget library and theming that works with
the new GWT conventions and I think we've

414
00:37:12,160 --> 00:37:16,109
been pretty successful with that. It's had
a great response and a great reception in

415
00:37:16,109 --> 00:37:23,109
the short weeks that we've released it. And
we're really happy to have released it. So

416
00:37:24,079 --> 00:37:30,390
we're actually incredibly excited about this
opening up of GWT with the steering committee.

417
00:37:30,390 --> 00:37:36,219
One of the main reasons that we ended it with
custom conventions in GXT 2 was the fact that

418
00:37:36,219 --> 00:37:41,339
we had no idea what was coming down the road
from the GWT team. So we had our own event

419
00:37:41,339 --> 00:37:45,349
system and I think it was literally a couple
of months afterwards there was a new event

420
00:37:45,349 --> 00:37:51,859
system from GWT that if we had known was coming,
we probably would have aligned with.

421
00:37:51,859 --> 00:37:56,819
So we're really happy to continue to promote
RIA for Java developers. We're really excited

422
00:37:56,819 --> 00:38:02,140
to be a member of the steering committee.
We would love to hear you, as a member of

423
00:38:02,140 --> 00:38:07,719
the steering committee, your ideas for how
we can improve GWT going forward. GWT we feel

424
00:38:07,719 --> 00:38:12,900
is the best way for organizations that are
committed to Java to build front end applications,

425
00:38:12,900 --> 00:38:18,390
particularly larger ones, larger teams, that's
what our customer base tells us why GWT is

426
00:38:18,390 --> 00:38:24,140
an awesome solution for them.
So what are we doing?

427
00:38:24,140 --> 00:38:28,130
We've just finished our GXT release, so it
was pretty huge. We're just getting around

428
00:38:28,130 --> 00:38:34,690
to planning the next release. But a couple
of things we're doing is making the appearance

429
00:38:34,690 --> 00:38:39,339
implementation that we have better with a
more flexible client bundle, we are doing

430
00:38:39,339 --> 00:38:43,349
some updates to UI binder, and I think some
of our changes have actually made it into

431
00:38:43,349 --> 00:38:50,349
the 2.5 code base. Theme building. You know,
it's actually a huge request across our product

432
00:38:51,469 --> 00:38:57,400
line, which is how can we do better visual
design without having to hack into SASS or

433
00:38:57,400 --> 00:39:04,130
hack into custom CSS. Better IDE support and
tooling. So there's some support coming in

434
00:39:04,130 --> 00:39:11,130
GWT designer for GXT 3. But our goal is to
make it easier and easier to create GXT applications

435
00:39:11,160 --> 00:39:18,160
using standard Eclipse and stand IDEs.
There's much, much more detail into what we've

436
00:39:19,539 --> 00:39:23,299
put into GXT 3, we're really proud of the
release. Probably the best place to learn

437
00:39:23,299 --> 00:39:30,299
more about it is on our blog, that's the link.
Just Sencha-GXT from our blog. Also Darrell

438
00:39:33,319 --> 00:39:36,940
and myself will be here hanging around after
the session if you want to talk to us more

439
00:39:36,940 --> 00:39:40,049
about GXT.
We're really excited about the directions,

440
00:39:40,049 --> 00:39:44,150
we're really honored that Google has asked
us to participate in the steering committee,

441
00:39:44,150 --> 00:39:50,779
and we hope to be able to serve the GWT community
as best we can in this new role. So thanks

442
00:39:50,779 --> 00:39:53,479
again.
[ Applause ]

443
00:39:53,479 --> 00:40:00,479
>>Ray Cromwell: I would like to ask Joonas
Lehtinen to come up. He's the C.E.O. of Vaadin,

444
00:40:03,219 --> 00:40:10,109
which he has a fabulous framework. He's going
to tell you all how Vaadin is going to contribute

445
00:40:10,109 --> 00:40:17,109
to GWT and what they're all about.
>>Joonas Lehtinen: Yeah, I'm really excited

446
00:40:20,650 --> 00:40:27,039
to be here and see where GWT is going at the
moment. Let's first kind of give a brief intro

447
00:40:27,039 --> 00:40:34,039
to (indiscernible) how we are using GWT and
where that relationship is going in the future.

448
00:40:34,539 --> 00:40:41,539
So you can say that Vaadin is a Java frame
building rich web applications, and as that

449
00:40:41,660 --> 00:40:46,380
it's quite like GWT, but at the same time
it's different from GWT; in Vaadin you're

450
00:40:46,380 --> 00:40:51,969
doing everything from the server side. It's
basically based on three different items.

451
00:40:51,969 --> 00:40:58,709
So first we want to have amazing components,
both as URL components as well as data sources

452
00:40:58,709 --> 00:41:05,329
and data (indiscernible) themes and so on.
So we have really nice set of widgets in the

453
00:41:05,329 --> 00:41:12,329
core product, hundred or so widgets, you can
go to vaadin.com/demo to see that out. There

454
00:41:13,249 --> 00:41:19,709
are also widgets for mobile, Android, iPhone,
iPad. What I'm mostly excited about is the

455
00:41:19,709 --> 00:41:23,549
community around Vaadin, so there are hundreds
of plug-ins in for Vaadin.

456
00:41:23,549 --> 00:41:30,549
Those plug-ins might be widget outbreaks or
integrations or themes or tools. Second idea

457
00:41:31,099 --> 00:41:37,829
is that they're combining server side RIA
together with (inaudible) so what is this

458
00:41:37,829 --> 00:41:43,949
search? Look at this, so basically you have
five layers in your (inaudible), so you have

459
00:41:43,949 --> 00:41:49,019
the back end layer and the Web server. You
have communications. And you're going to have

460
00:41:49,019 --> 00:41:55,489
Java to Java compiler, and then Java to Java
within Web browser, so if you look at GWT,

461
00:41:55,489 --> 00:42:00,150
it looks like this, so this
(indiscernible) four layers, and optionally

462
00:42:00,150 --> 00:42:06,489
you can do on JavaScript on top of that. Vaadin
is quite different. You are only writing two

463
00:42:06,489 --> 00:42:11,209
layers. You're only writing code on the server
side, so everything on the (indiscernible)

464
00:42:11,209 --> 00:42:16,559
layer and on the browser side is total automatic.
You don't have to write any line of code for

465
00:42:16,559 --> 00:42:22,160
those. And if you're converting this to Java
frameworks, I like XJS, it's probably the

466
00:42:22,160 --> 00:42:28,549
best one out there at the moment. So also
in here you're writing four layers, and this

467
00:42:28,549 --> 00:42:35,440
is the core of the (indiscernible) you can
kind of skip half -- half of your program

468
00:42:35,440 --> 00:42:40,229
when you're writing in Vaadin. It actually
works like this. So all of the components

469
00:42:40,229 --> 00:42:45,949
have two parts. You have server side component,
it's basically API that your program is against,

470
00:42:45,949 --> 00:42:52,789
so whole UI is on the server side. On the
client side, you are rendering and event handling,

471
00:42:52,789 --> 00:42:59,789
and that part is totally done with Web toolkit.
(indiscernible) Third thing, Java, basically

472
00:43:02,630 --> 00:43:08,369
everything in Vaadin is (indiscernible) object,
so all of the components are plain ole objects

473
00:43:08,369 --> 00:43:15,369
just running on the server side in the real
JVM. (indiscernible) you can write UI in any

474
00:43:15,380 --> 00:43:22,380
language out there. You can use (indiscernible)
what have you. You can use any tooling, any

475
00:43:22,519 --> 00:43:29,519
IDs. You can deploy this to almost any server
out there, most of the clouds, and at the

476
00:43:30,979 --> 00:43:33,559
end of the day, it's just one file, so you
can use that in any web browser. Just drop

477
00:43:33,559 --> 00:43:40,559
that (indiscernible) into a project, you can
start adding UIs with that. It's (indiscernible)

478
00:43:41,130 --> 00:43:46,989
license so it should be the same license as
GWT. So what's the relation between Vaadin

479
00:43:46,989 --> 00:43:51,319
and GWT? Let's look at the history. This is
actually quite an old project. We started

480
00:43:51,319 --> 00:43:58,319
in 2001 already. So we've had 11 years of
history behind us. And then we kind of started

481
00:43:58,369 --> 00:44:03,869
to have huge number of JavaScript code lines
on the client side to render all of those

482
00:44:03,869 --> 00:44:10,729
components, and it turned out to be not that
nice, so fortunately GWT came along and we

483
00:44:10,729 --> 00:44:17,459
threw all of that away and we wrote everything
in GWT. (indiscernible) It was a perfect fit

484
00:44:17,459 --> 00:44:24,199
to Vaadin. Both are written in Java. Both
(indiscernible) oriented and both recorded

485
00:44:24,199 --> 00:44:29,739
across browsers, something very important
for us. So I could say that this has been

486
00:44:29,739 --> 00:44:34,940
kind of like standing on the shoulder of a
giant, this giant being Google and (indiscernible)

487
00:44:34,940 --> 00:44:40,719
you have been doing a really, really excellent
job, and it has been helping to write quite

488
00:44:40,719 --> 00:44:46,569
a bit, so we haven't had to deal with all
the browser differences ourself. So you can

489
00:44:46,569 --> 00:44:49,920
see this as
our engagement period of five years for us,

490
00:44:49,920 --> 00:44:56,829
and this has been strange engagement because
after five years, we are still in love with

491
00:44:56,829 --> 00:45:02,880
GWT. I truly think that GWT is the best way
of building Web scripts, Web application on

492
00:45:02,880 --> 00:45:07,979
the client side with Java. So if you're building
a huge application, there is -- that's the

493
00:45:07,979 --> 00:45:13,839
kind of number one way of doing that on the
client side. But the relationship have been

494
00:45:13,839 --> 00:45:19,699
kind of unidirectional. We have been getting
a lot from GWT. And we haven't been giving

495
00:45:19,699 --> 00:45:25,229
too much back. And I think this is the same
for many of us, so we have been using GWT,

496
00:45:25,229 --> 00:45:31,619
we haven't been giving too much back to GWT.
And I'm really thrilled to see this new development

497
00:45:31,619 --> 00:45:38,319
with the steering committee and more open
process for GWT, so we can come back to GWT,

498
00:45:38,319 --> 00:45:45,319
and I hope in the end this grows to be something
much, much, much bigger than it is today.

499
00:45:45,949 --> 00:45:51,599
So where do we go next?
You have been kind of jumping in five year

500
00:45:51,599 --> 00:45:56,349
leaps. What's the next leap for us?
So I'm really thrilled to announce the new

501
00:45:56,349 --> 00:46:03,349
study for Vaadin. We are adding GWT to Vaadin.
So what does it mean?

502
00:46:03,539 --> 00:46:08,739
At the moment we are kind of using GWT as
a dependents. We are using GWT as a rendering

503
00:46:08,739 --> 00:46:14,019
agent behind the scenes in Vaadin. What they
are doing, they are moving inside Vaadin,

504
00:46:14,019 --> 00:46:17,869
so they're taking copy, putting that inside
Vaadin and maintaining ourselves

505
00:46:17,869 --> 00:46:24,869
(indiscernible) and we, of course, are contributing
all of those back to GWT. This also means

506
00:46:28,249 --> 00:46:35,249
that Vaadin will be combined with GWT. So
for two days project you can use Vaadin for

507
00:46:35,709 --> 00:46:39,660
that, and as a win developer, a new customer
what's more in there?

508
00:46:39,660 --> 00:46:46,209
There are a couple of things. But first, there
are actually two sides of Vaadin. So we have

509
00:46:46,209 --> 00:46:50,989
two program modules. We have server side programming
and we have client side programming. Server

510
00:46:50,989 --> 00:46:55,920
side being optimized for the productivity
and the client side being optimized for the

511
00:46:55,920 --> 00:47:02,920
controlling. So you get both around 50 reduction
of code lines when you're programming in the

512
00:47:04,140 --> 00:47:10,089
server side as well as all of the wonderful
controller on the platform on the client side.

513
00:47:10,089 --> 00:47:14,999
So you can see that from the developer point
of view we are adding

514
00:47:14,999 --> 00:47:21,999
(indiscernible) components, tools, themes,
but also there's one more theme. (indiscernible)

515
00:47:22,880 --> 00:47:29,249
support, we are serving companies who are
using our technology to build applications,

516
00:47:29,249 --> 00:47:35,170
and now that we are merging GWT in the Vaadin
directly, we are starting the support with

517
00:47:35,170 --> 00:47:42,170
Vaadin. If (indiscernible) we are a good project
for you. This is going to be available pretty

518
00:47:45,949 --> 00:47:52,949
soon now. So we are targeting for the Java
1 release with Vaadin 7 that will be including

519
00:47:53,589 --> 00:48:00,589
GWT, and it's available as a developer preview
today. This is an early alpha release, but

520
00:48:01,019 --> 00:48:07,559
it's there for you to try out. There is a
ton of more things to read about how Vaadin

521
00:48:07,559 --> 00:48:14,559
would kind of combine and what that old aspect,
(indiscernible) and read more about this.

522
00:48:15,439 --> 00:48:15,979
Thank you.
[ Applause ]

523
00:48:15,979 --> 00:48:22,979
>> Ray Cromwell: Let me switch back to my
slides. Okay. So there were a couple of other

524
00:48:35,599 --> 00:48:38,549
steering committee members who couldn't be
here, I don't want to spend too much time.

525
00:48:38,549 --> 00:48:45,509
But Christian Goudreau has developed a wonderful
library called GWT, and he is on the steering

526
00:48:45,509 --> 00:48:49,439
committee as well, and he has some wonderful
things to say, and I'll just leave that up

527
00:48:49,439 --> 00:48:55,689
there for a second for posterity. As well
as Daniel Kurka who has done an incredible

528
00:48:55,689 --> 00:48:59,839
mobile library for web property (indiscernible)
I encourage you to go to n-gwt.com, check

529
00:48:59,839 --> 00:49:04,069
it out. And he is also on the steering committee.
I'm sure he's going to be focused on making

530
00:49:04,069 --> 00:49:11,069
GWT better for mobile. Finally, we are hiring.
Believe it or not. So if you are a unemployed

531
00:49:14,729 --> 00:49:18,779
GWT programmer and you're looking to join
Google, and work on (indiscernible) please

532
00:49:18,779 --> 00:49:25,779
send your resume to Google.com/jobs. And now
I will turn the microphone over to you. You're

533
00:49:26,779 --> 00:49:33,779
free to ask questions.
[ Applause ]

534
00:49:35,369 --> 00:49:42,369
>>> Hi. So my first question is about validation.
You said you've implemented the 303 at 2010,

535
00:49:42,959 --> 00:49:49,959
but as for now, our classes in package validation
are marked as experimental, and they say do

536
00:49:52,039 --> 00:49:56,839
not use them in production.
>>Ray Cromwell: Yes. I'll answer very quickly.

537
00:49:56,839 --> 00:50:02,609
We have recently hired someone to specifically
work on the support in GWT and to make it

538
00:50:02,609 --> 00:50:09,609
100% compatible with the 303 TCK test compatibility
kit. So if you look at the event logs right

539
00:50:09,999 --> 00:50:14,579
now, you'll see a new guy who is committing
-- or actually one by one he's fixing the

540
00:50:14,579 --> 00:50:19,380
TCK test, and once they pass the TCK, then
we'll remove the experimental tag.

541
00:50:19,380 --> 00:50:26,140
>>> Okay, thanks. When will 2.5 be released?
>>Ray Cromwell: RC1 is out already. You can

542
00:50:26,140 --> 00:50:31,559
download it now. Probably in maybe a week
or two, the final version, after we get some

543
00:50:31,559 --> 00:50:34,579
bug reports back and smoke test it more. Okay.
Thank you.

544
00:50:34,579 --> 00:50:39,579
I'll go over to this one.
>>> Hi, I'm a GIS developer, I use Google

545
00:50:39,579 --> 00:50:46,579
maps to do -- in my projects. Most of -- I
hate JavaScript. Most of the time I'm looking

546
00:50:47,449 --> 00:50:54,449
for a GWT wrappers around Google maps API.
Are you guys coordinating between the two

547
00:50:57,269 --> 00:51:03,719
teams to always have a GWT library for Google
maps once a new version of Google maps API

548
00:51:03,719 --> 00:51:06,469
comes out?
>>Ray Cromwell: Yeah, a good question. So,

549
00:51:06,469 --> 00:51:10,539
yes, in the past, we have done that, I believe
recently they may have released an update

550
00:51:10,539 --> 00:51:17,539
to the Google API libraries for GWT which
included some support I think for 3.0. I don't

551
00:51:17,749 --> 00:51:24,589
know what state it's in. Unfortunately, the
person who is working on it, Eric Zundel,

552
00:51:24,589 --> 00:51:30,329
left to go to another company, but we will
try to figure out a solution for that. It

553
00:51:30,329 --> 00:51:33,969
may be that the steering committee takes it
over, like for example, maybe Sencha with

554
00:51:33,969 --> 00:51:38,999
some maps, widgets in there, and they can
basically take on the task of ensuring it's

555
00:51:38,999 --> 00:51:43,299
always up to date. But we'll find out. We
are definitely concerned about it, because

556
00:51:43,299 --> 00:51:47,649
maps are actually very important.
>>> Thank you.

557
00:51:47,649 --> 00:51:54,649
>>> Hello. (saying name). I'm a new developer
and our team is mostly -- we are mostly using

558
00:51:54,979 --> 00:52:00,989
intelliJ to develop and to debug our applications,
and the question is with the new super dev

559
00:52:00,989 --> 00:52:07,289
mode, will we be able to use our favorite
IDE to debug applications, or the only way

560
00:52:07,289 --> 00:52:10,630
to do it will be the browser?
>>Ray Cromwell: Right. Good question. As you

561
00:52:10,630 --> 00:52:17,630
can see. I am a rabid intelliJ user, I love
intelliJ, and I constantly rag on people at

562
00:52:17,930 --> 00:52:24,729
Google that use eclipse. The answer is that
we are trying to talk to JetBrains, they've

563
00:52:24,729 --> 00:52:29,390
done a lot of good support in the past to
basically get support for source maps within

564
00:52:29,390 --> 00:52:34,869
intelliJ, and based on the outcome of those
talks, if they're willing to do it, if source

565
00:52:34,869 --> 00:52:40,869
maps are implemented or if we had a plug-in
to do it for intelliJ, intelliJ can already

566
00:52:40,869 --> 00:52:44,329
attach to JavaScript debuggers, so essentially
instead of attaching it to JVM, you attach

567
00:52:44,329 --> 00:52:48,400
it to the Chrome debugger, and all it has
to do is use the map to actually let you match

568
00:52:48,400 --> 00:52:55,249
it back into the editor, breakpoint intelliJ
to control Chrome. It definitely is a possibility

569
00:52:55,249 --> 00:52:58,539
to make that work, and we need to talk to
the right people and make it happen.

570
00:52:58,539 --> 00:53:01,989
>>> All right. Thanks.
>>Ray Cromwell: Let's go over there.

571
00:53:01,989 --> 00:53:06,869
>>> Hi, I have two questions, actually. First
about the steering committee. I'm very happy

572
00:53:06,869 --> 00:53:13,869
to see that Google is accepting more external
people, but I'm also a little bit concerned

573
00:53:15,359 --> 00:53:22,359
because there are a lot of companies that
have large libraries on the steering committee.

574
00:53:24,019 --> 00:53:30,650
How do you guaranty that -- these companies
have their own agenda. How do you guaranty

575
00:53:30,650 --> 00:53:37,650
that GWT doesn't become bloated with their
features that --

576
00:53:37,739 --> 00:53:43,930
>>Ray Cromwell: I can answer that. First thing
is that when we initially nominated them,

577
00:53:43,930 --> 00:53:47,299
we told them that we realize that they have
commercial interests, but we would like steering

578
00:53:47,299 --> 00:53:53,119
committee members to also kind of wear the
GWT hat. So, for example, we're on the GCC

579
00:53:53,119 --> 00:53:58,359
committee, I think, you know, Google participated
with GCC development, and of course people

580
00:53:58,359 --> 00:54:02,559
on the GCC steering committee, they're all
commercial companies or different chip, you

581
00:54:02,559 --> 00:54:06,539
know, like AMD or Intel or whatever, so they
have interest, but the people on the committee

582
00:54:06,539 --> 00:54:12,199
usually do a pretty good job of wearing their
GCC hats, and we expect that the GWT community

583
00:54:12,199 --> 00:54:17,729
members kind of wear their GWT hats so that
they have things that are competitive, they're

584
00:54:17,729 --> 00:54:22,689
probably going to keep them anyway, because
that's their value, but if there's new core

585
00:54:22,689 --> 00:54:28,619
features they need, like new event handlers
or new support for low level operations or

586
00:54:28,619 --> 00:54:33,359
there's bug fixes that they have been forking
off privately in the past to fix, now they

587
00:54:33,359 --> 00:54:37,709
will contribute them back. The second thing
is that the committee is run by consensus,

588
00:54:37,709 --> 00:54:43,160
so if anyone objects, basically, to a proposal,
it doesn't happen. So we basically all have

589
00:54:43,160 --> 00:54:47,549
to agree, and some people on the committee
will be concerned about bloat, and if, you

590
00:54:47,549 --> 00:54:50,839
know, someone wants to drop in like a two
megabyte JavaScript library, there is going

591
00:54:50,839 --> 00:54:57,109
to be some objections. Is that --
>>> I have a question about the example you

592
00:54:57,109 --> 00:55:03,979
showed with injecting Java code inside the
HTML page, so you type window from lower case

593
00:55:03,979 --> 00:55:10,170
W, it's not class window.
>>Ray Cromwell: That's right. So -- yeah,

594
00:55:10,170 --> 00:55:17,170
so the intelliJ is actually a really fabulous
IDE, (indiscernible) so I told intelliJ to

595
00:55:17,299 --> 00:55:22,929
assume that there's a line in the code that
looks like this, window window is equal to

596
00:55:22,929 --> 00:55:29,929
browser dot get window, and so that is like
implied that's there, and what happens is

597
00:55:30,429 --> 00:55:35,589
the filter, when it's extracting that code
and writing it to disc, it inserts that line,

598
00:55:35,589 --> 00:55:40,709
so the IDE doesn't complain that that window
variable is missing because I told intelliJ

599
00:55:40,709 --> 00:55:44,259
to assume that that's injected. So that is
a feature of intelliJ, so if you're an eclipse

600
00:55:44,259 --> 00:55:48,439
user, you might want to check that out.
[ Laughter ]

601
00:55:48,439 --> 00:55:55,439
>>Ray Cromwell: Okay. Let me go to him first.
>>> So another question I wanted to ask is

602
00:55:56,109 --> 00:56:03,109
about kind of release for GWT, what are the
next versions when they will be out and what

603
00:56:03,339 --> 00:56:07,759
features are planned so probably this question
must go to your committee and what will be

604
00:56:07,759 --> 00:56:11,329
the process? Who will decide?
>>Ray Cromwell: Right. Excellent question.

605
00:56:11,329 --> 00:56:18,329
And, yes, I should have basically made it
clear that 2.5 will actually be the last official

606
00:56:18,539 --> 00:56:24,269
Google controlled release. Every new release,
GWT 2.6 or GWT 3.0, will now be basically

607
00:56:24,269 --> 00:56:29,229
a steering committee release, and so the road
map, we haven't -- we've just started our

608
00:56:29,229 --> 00:56:34,779
first two or three steering committee meetings.
We got basic IP issues, and things like that.

609
00:56:34,779 --> 00:56:40,640
We're getting to starting to find a road map,
where are we going to go, go to GitHub or

610
00:56:40,640 --> 00:56:46,099
somewhere else, there's lots of arguments
in the base over that kind of stuff (indiscernible)

611
00:56:46,099 --> 00:56:50,519
and so one thing we're going to discuss is
what's going to go into the next version and

612
00:56:50,519 --> 00:56:55,719
when is it going to be released. So if you
watch GWT steering -- GWT.steering at Google.com,

613
00:56:55,719 --> 00:57:02,719
you can follow along and probably get some
inkling as to when it's going to happen. Probably

614
00:57:03,609 --> 00:57:06,229
sooner.
Okay. Any last questions?

615
00:57:06,229 --> 00:57:09,829
All right. Well, thanks for coming, guys,
and I hope you continue to join GWT.

