1
00:00:03,449 --> 00:00:08,160
Hi, I'm Aaron, a programmer working on the
extension system for Google Chrome.

2
00:00:08,160 --> 00:00:12,469
One of the most powerful features of our system
is the ability to interact with web pages.

3
00:00:12,469 --> 00:00:14,629
This is done with a feature called 'content
scripts'.

4
00:00:14,629 --> 00:00:20,329
Using a content script, an extension developer
can do things like: find unlinked URLs in

5
00:00:20,329 --> 00:00:25,860
web pages and convert them into links, download
all images on a page, or add in-page integration

6
00:00:25,860 --> 00:00:29,800
with a third-party application.
Content scripts do all of this by interacting

7
00:00:29,800 --> 00:00:33,020
with a web page's Document Object Model, or
its "DOM" for short.

8
00:00:33,020 --> 00:00:37,890
The DOM is a tree-like data structure that
represents the HTML for a web page.

9
00:00:37,890 --> 00:00:42,300
This is the same API that is used by web developers
today to make modern web applications like

10
00:00:42,300 --> 00:00:45,620
Google Maps.
With extensions, the DOM for a web page is

11
00:00:45,620 --> 00:00:49,760
shared between the page's JavaScript and each
of the content scripts that is also interacting

12
00:00:49,760 --> 00:00:52,970
with that page.
Any of the scripts can modify the DOM, for

13
00:00:52,970 --> 00:00:57,620
example by removing a node, and all the scripts
will immediately see the change.

14
00:00:57,620 --> 00:01:01,970
We want to share the structure of the DOM
between web pages and content scripts, but

15
00:01:01,970 --> 00:01:06,689
it is important for robustness that the scripts
themselves are isolated from each other.

16
00:01:06,689 --> 00:01:12,749
For example, it should be possible for the
web page to use jQuery v1.2 and the content

17
00:01:12,749 --> 00:01:17,899
script to use jQuery v1.3 without the two
versions of the library accidentally interfering

18
00:01:17,899 --> 00:01:22,409
with each other.
Also, since extensions have access to privileged

19
00:01:22,409 --> 00:01:27,679
APIs and sensitive user data, we need to make
sure that the web page JavaScript cannot use

20
00:01:27,679 --> 00:01:31,539
the shared DOM as a way to get access to those
APIs and that data.

21
00:01:31,539 --> 00:01:35,439
In Google Chrome, we keep content scripts
isolated from each other and from the pages

22
00:01:35,439 --> 00:01:38,490
they are running on with a system called 'isolated
worlds'.

23
00:01:38,490 --> 00:01:43,600
Each script that is accessing the DOM runs
in its own isolated world. Each isolated world

24
00:01:43,600 --> 00:01:47,649
gets its own clean JavaScript environment,
which ensures that libraries don't conflict

25
00:01:47,649 --> 00:01:51,049
with each other.
Many isolated worlds can share access to a

26
00:01:51,049 --> 00:01:55,439
single DOM tree, but when they do, they each
get their own complement of JavaScript objects

27
00:01:55,439 --> 00:01:59,509
to represent the nodes in the tree.
Since no JavaScript objects are shared between

28
00:01:59,509 --> 00:02:04,419
isolated worlds, it is not possible for web
page JavaScript to use the shared DOM to "break

29
00:02:04,419 --> 00:02:09,929
out" of the normal web page sandbox and somehow
get access to the content script or its APIs.

30
00:02:09,929 --> 00:02:14,000
With content scripts, extension developers
can take full advantage of the familiar DOM

31
00:02:14,000 --> 00:02:18,000
API to manipulate web pages.
And because of isolated worlds, they can do

32
00:02:18,000 --> 00:02:22,970
this without having to worry about web pages
or other extensions accidentally interfering.

33
00:02:22,970 --> 00:02:26,569
Learn more on content scripts and the rest
of the Google Chrome extensions system

34
00:02:26,569 --> 00:02:29,950
by visiting our web site at code.google.com/chrome/extensions.

