1
00:00:00,000 --> 00:00:12,340
[MUSIC PLAYING]

2
00:00:12,340 --> 00:00:13,980
BILL LUAN: Shanghai
GDG is a very

3
00:00:13,980 --> 00:00:16,070
interesting developer community.

4
00:00:16,070 --> 00:00:16,900
FEMALE SPEAKER: I'm
glad somebody

5
00:00:16,900 --> 00:00:17,990
has asked this question.

6
00:00:17,990 --> 00:00:19,436
MALE SPEAKER: This is where
the magic happens.

7
00:00:19,436 --> 00:00:21,130
FEMALE SPEAKER: This is
primarily a question and

8
00:00:21,130 --> 00:00:22,460
answer show, so if any
of you out there

9
00:00:22,460 --> 00:00:23,710
would like to ask questions.

10
00:00:23,710 --> 00:00:28,800

11
00:00:28,800 --> 00:00:43,242
[MUSIC PLAYING]

12
00:00:43,242 --> 00:00:46,760

13
00:00:46,760 --> 00:00:48,870
PETE LEPAGE: Welcome,
everybody.

14
00:00:48,870 --> 00:00:50,600
Really awesome event today.

15
00:00:50,600 --> 00:00:54,340
We're taking a behind scenes
look at Movi Kanti Revo, one

16
00:00:54,340 --> 00:00:57,980
of the new Chrome experiments
that just launched yesterday.

17
00:00:57,980 --> 00:01:00,390
My name's Pete LePage, I'm a
developer advocate with the

18
00:01:00,390 --> 00:01:01,270
Chrome team.

19
00:01:01,270 --> 00:01:05,810
And with me, we've got Aubrey
and KC from Subatomic who

20
00:01:05,810 --> 00:01:08,650
built this absolutely phenomenal
experience.

21
00:01:08,650 --> 00:01:10,970
Do you guys want to introduce
yourself?

22
00:01:10,970 --> 00:01:12,320
AUBREY ANDERSON: Sure, my
name's Aubrey Anderson.

23
00:01:12,320 --> 00:01:15,790
I'm the president
of Subatomic.

24
00:01:15,790 --> 00:01:16,990
KC AUSTIN: My name
is KC Austin.

25
00:01:16,990 --> 00:01:21,200
I'm one of the lead developers
on this project.

26
00:01:21,200 --> 00:01:22,430
PETE LEPAGE: Awesome.

27
00:01:22,430 --> 00:01:23,920
So this launched yesterday.

28
00:01:23,920 --> 00:01:28,580
This is something that has been
coming to fruition for us

29
00:01:28,580 --> 00:01:31,460
for probably four or
five months now.

30
00:01:31,460 --> 00:01:32,750
AUBREY ANDERSON: Yeah,
about five months.

31
00:01:32,750 --> 00:01:34,930
I'd say we started storyboarding
and concepting

32
00:01:34,930 --> 00:01:36,730
probably fully five
months ago.

33
00:01:36,730 --> 00:01:41,230
And then did some initial
concept work in the browser

34
00:01:41,230 --> 00:01:45,370
just to make sure that all our
assumptions, or at least most

35
00:01:45,370 --> 00:01:47,710
of our assumptions were
going to true.

36
00:01:47,710 --> 00:01:51,430
And then we had a long period
of just asset creation where

37
00:01:51,430 --> 00:01:54,090
we went out to Las Vegas and
shot the Cirque people doing

38
00:01:54,090 --> 00:01:59,370
their performances on the
blue [? sight. ?]

39
00:01:59,370 --> 00:02:03,760
And a lot of post production,
and just getting what they

40
00:02:03,760 --> 00:02:05,960
call mats sorted out, and
getting everybody keyed.

41
00:02:05,960 --> 00:02:08,800

42
00:02:08,800 --> 00:02:12,410
And sort of in parallel to
that, KC and I have been

43
00:02:12,410 --> 00:02:16,610
developing the browser, working
on building scenes.

44
00:02:16,610 --> 00:02:18,610
And we'll kind of show you how
we build the scenes as we go.

45
00:02:18,610 --> 00:02:19,850
PETE LEPAGE: Awesome, cool.

46
00:02:19,850 --> 00:02:23,400
So for those of you who are
watching live right now, we do

47
00:02:23,400 --> 00:02:25,800
have a moderator queue, that
if you want to go post your

48
00:02:25,800 --> 00:02:28,030
questions, you can go post
your questions there.

49
00:02:28,030 --> 00:02:30,800
We'll take your live
questions towards

50
00:02:30,800 --> 00:02:31,870
the end of our session.

51
00:02:31,870 --> 00:02:35,560
So as we dive into some of these
things, please post your

52
00:02:35,560 --> 00:02:37,640
questions there.

53
00:02:37,640 --> 00:02:42,670
Let's jump in and talk about
some of the 3D experiences and

54
00:02:42,670 --> 00:02:43,620
how those were built.

55
00:02:43,620 --> 00:02:49,820
Because it's a pretty new
concept for the browser to put

56
00:02:49,820 --> 00:02:53,420
all of these pieces into the
world and actually build

57
00:02:53,420 --> 00:02:58,530
something that as it rotates
and moves, really the

58
00:02:58,530 --> 00:02:59,720
prospective just changes.

59
00:02:59,720 --> 00:03:02,670
You've got a really neat
parallaxing going on, all of

60
00:03:02,670 --> 00:03:03,810
that kind of stuff.

61
00:03:03,810 --> 00:03:05,490
AUBREY ANDERSON: Yeah, so maybe
we'll show you a little

62
00:03:05,490 --> 00:03:07,890
bit, in case you haven't
seen the experience.

63
00:03:07,890 --> 00:03:12,340
PETE LEPAGE: All right, well if
we can bring up the screen.

64
00:03:12,340 --> 00:03:13,587
Great.

65
00:03:13,587 --> 00:03:16,390
AUBREY ANDERSON: It looks
like it's happening.

66
00:03:16,390 --> 00:03:18,940
So I'm just going hold off on
the microphone for now.

67
00:03:18,940 --> 00:03:22,290
So what we've done, we've tried
to keep to sort of a

68
00:03:22,290 --> 00:03:25,400
theatrical approach
but do that with

69
00:03:25,400 --> 00:03:26,330
elements in the browser.

70
00:03:26,330 --> 00:03:29,950
And I'm just going to rotate
this model as we look at.

71
00:03:29,950 --> 00:03:33,820
These are all divs, which is a
sort of important distinction

72
00:03:33,820 --> 00:03:38,050
from technologies like WebGL or
other ways that you might

73
00:03:38,050 --> 00:03:40,570
manipulate content in 3D.

74
00:03:40,570 --> 00:03:43,170
But the other challenge we
had is integrating video.

75
00:03:43,170 --> 00:03:46,100
So in this example, you'll see,
as obviously in the real

76
00:03:46,100 --> 00:03:48,620
experience, you can't turn the
model around because that sort

77
00:03:48,620 --> 00:03:49,710
of blows it.

78
00:03:49,710 --> 00:03:54,320
But I think it's sort of good to
understand how these things

79
00:03:54,320 --> 00:03:57,450
are stacked up in 3D space.

80
00:03:57,450 --> 00:03:59,940
We have the front layer here,
which is a video element.

81
00:03:59,940 --> 00:04:02,470
That's a piece of
WebM that we're

82
00:04:02,470 --> 00:04:04,525
loading and playing back.

83
00:04:04,525 --> 00:04:08,070
And that has the same background
in the same

84
00:04:08,070 --> 00:04:10,520
proportions as you see when the
interactive part of the

85
00:04:10,520 --> 00:04:11,640
experience starts.

86
00:04:11,640 --> 00:04:13,600
But if I flip it here,
you'll see that's

87
00:04:13,600 --> 00:04:15,050
the back of the video.

88
00:04:15,050 --> 00:04:17,760
There's the sea, which is
actually titled away from us a

89
00:04:17,760 --> 00:04:19,160
little bit.

90
00:04:19,160 --> 00:04:23,734
And then these other elements,
the links, and the back plate.

91
00:04:23,734 --> 00:04:26,340
And if you can see, even farther
behind that, is sort

92
00:04:26,340 --> 00:04:29,390
of the sky, and the sea,
and some kind of

93
00:04:29,390 --> 00:04:32,610
foggy elements there.

94
00:04:32,610 --> 00:04:34,980
And as the video plays out, what
it does is it just kind

95
00:04:34,980 --> 00:04:40,180
of crossfades to the 3D elements
behind it and creates

96
00:04:40,180 --> 00:04:43,120
this kind of relatively
fluid experience.

97
00:04:43,120 --> 00:04:46,350
I think it's just about to
go in to crossfade here.

98
00:04:46,350 --> 00:04:50,980
KC AUSTIN: We actually build the
scene in CSS with all the

99
00:04:50,980 --> 00:04:52,330
separate elements first.

100
00:04:52,330 --> 00:04:55,720
Screenshot that, composited
that screenshot into the

101
00:04:55,720 --> 00:05:00,760
background plate of the video,
and then that got exported at

102
00:05:00,760 --> 00:05:02,560
WebM, so it crossfades
perfectly.

103
00:05:02,560 --> 00:05:04,610
AUBREY ANDERSON: So there's
a real back and forth.

104
00:05:04,610 --> 00:05:07,330
And for post-production people,
this is kind of a new

105
00:05:07,330 --> 00:05:10,040
idea because they're used to
just sort of getting a

106
00:05:10,040 --> 00:05:12,240
drawing, getting some art,
and then having to

107
00:05:12,240 --> 00:05:13,460
put that in the video.

108
00:05:13,460 --> 00:05:15,810
But in this case, that
was only the start.

109
00:05:15,810 --> 00:05:16,700
PETE LEPAGE: OK.

110
00:05:16,700 --> 00:05:19,720
So now one of the things I know
we were playing with and

111
00:05:19,720 --> 00:05:23,740
looking at early on was that
WebM doesn't do alpha

112
00:05:23,740 --> 00:05:25,050
transparency yet.

113
00:05:25,050 --> 00:05:26,310
AUBREY ANDERSON: It's true.

114
00:05:26,310 --> 00:05:28,980
Fortunately, for everybody,
I think that's coming.

115
00:05:28,980 --> 00:05:33,880
And we worked with the animation
codec as a way to

116
00:05:33,880 --> 00:05:35,770
kind of comp these things
together, which does do video

117
00:05:35,770 --> 00:05:36,800
transparency.

118
00:05:36,800 --> 00:05:38,710
Obviously you can't put that on
the web because the files

119
00:05:38,710 --> 00:05:40,370
are hundreds of meg.

120
00:05:40,370 --> 00:05:43,440
But one of the things we look
forward to is being able to

121
00:05:43,440 --> 00:05:47,020
actually live composite these
elements right into the scene.

122
00:05:47,020 --> 00:05:49,980
So rather than having a back
plate inside the video like we

123
00:05:49,980 --> 00:05:52,740
saw and having to do this sort
hoop jumping of switching it

124
00:05:52,740 --> 00:05:55,670
out, we'll be able to just
make the background

125
00:05:55,670 --> 00:05:58,500
transparent, key out the
characters, and just park them

126
00:05:58,500 --> 00:06:02,020
right in the 3D model,
which is just going

127
00:06:02,020 --> 00:06:03,220
to be insanely powerful.

128
00:06:03,220 --> 00:06:04,990
KC AUSTIN: And all the scenes
are actually built now.

129
00:06:04,990 --> 00:06:08,430
Even the contortionist scene
with the tree behind it, the

130
00:06:08,430 --> 00:06:13,440
tree was built with CSS, with
every strip of bark on it is a

131
00:06:13,440 --> 00:06:14,790
different PNG.

132
00:06:14,790 --> 00:06:15,530
PETE LEPAGE: Oh wow.

133
00:06:15,530 --> 00:06:18,730
KC AUSTIN: So it's built in
3D and rotated behind the

134
00:06:18,730 --> 00:06:20,210
characters.

135
00:06:20,210 --> 00:06:23,650
And as soon as we found out
that alpha wasn't going to

136
00:06:23,650 --> 00:06:28,730
make it, we set it up to
screenshot it, composite it

137
00:06:28,730 --> 00:06:30,080
again behind.

138
00:06:30,080 --> 00:06:34,515
But all the scenes are set
up, so they do work

139
00:06:34,515 --> 00:06:37,750
if you had the alpha.

140
00:06:37,750 --> 00:06:40,430
PETE LEPAGE: So we have a case
study that I sort of took this

141
00:06:40,430 --> 00:06:43,020
particular scene and took it
apart and sort of built each

142
00:06:43,020 --> 00:06:45,230
of the pieces individually.

143
00:06:45,230 --> 00:06:49,890
But why don't we open up the dev
tools and have a look at,

144
00:06:49,890 --> 00:06:53,530
or even some real code,
and have a look at

145
00:06:53,530 --> 00:06:54,620
what's going on here.

146
00:06:54,620 --> 00:06:55,890
Like how is this built?

147
00:06:55,890 --> 00:06:57,840
AUBREY ANDERSON: I think that's
a super great idea.

148
00:06:57,840 --> 00:06:59,950
The other think I just wanted to
point out also is that you

149
00:06:59,950 --> 00:07:01,860
can kind of keep going
in Z space.

150
00:07:01,860 --> 00:07:05,300
So here, if you hit back button,
we have the pink man.

151
00:07:05,300 --> 00:07:06,800
And this is just sort
of non sequitur.

152
00:07:06,800 --> 00:07:08,180
It's just something that
happens if you

153
00:07:08,180 --> 00:07:10,170
happen to find this.

154
00:07:10,170 --> 00:07:11,420
PETE LEPAGE: It's a nice
little Easter egg.

155
00:07:11,420 --> 00:07:12,490
AUBREY ANDERSON: A little
Easter egg, exactly.

156
00:07:12,490 --> 00:07:16,720
You can zoom the whole model out
and you can keep going in

157
00:07:16,720 --> 00:07:19,490
3D space, both forward and back,
and left and right, and

158
00:07:19,490 --> 00:07:20,960
up and down.

159
00:07:20,960 --> 00:07:22,900
Yeah, probably the easiest
thing is to just sort of

160
00:07:22,900 --> 00:07:26,320
inspect some of this stuff
as a way to get started.

161
00:07:26,320 --> 00:07:28,800
KC AUSTIN: Start with like the
rotational containers?

162
00:07:28,800 --> 00:07:30,050
AUBREY ANDERSON: Yeah.

163
00:07:30,050 --> 00:07:31,980

164
00:07:31,980 --> 00:07:34,696
I can kind of show you some
of the anatomy of how

165
00:07:34,696 --> 00:07:35,900
this is built out.

166
00:07:35,900 --> 00:07:38,030
This is probably small
text for you guys.

167
00:07:38,030 --> 00:07:38,550
Sorry about that.

168
00:07:38,550 --> 00:07:42,880
But you will at least get a
sense of how the rotation is

169
00:07:42,880 --> 00:07:44,280
accomplished.

170
00:07:44,280 --> 00:07:47,710
We have several div containers
which have 3D prospective

171
00:07:47,710 --> 00:07:50,040
applied to them via CSS.

172
00:07:50,040 --> 00:07:54,980
And I think one of the biggest
brain challenges is not

173
00:07:54,980 --> 00:07:59,580
thinking of elements as singular
and transformable by

174
00:07:59,580 --> 00:08:00,230
themselves.

175
00:08:00,230 --> 00:08:02,780
A lot of times, a complex
transformation is happening

176
00:08:02,780 --> 00:08:06,460
because the element is moving
and its container is moving on

177
00:08:06,460 --> 00:08:09,580
a different axis, and its
container is moving maybe on a

178
00:08:09,580 --> 00:08:10,520
different axis.

179
00:08:10,520 --> 00:08:14,310
So we find this model is
generally contained in three

180
00:08:14,310 --> 00:08:18,200
boxes and each box generally
handles one axis of the

181
00:08:18,200 --> 00:08:23,290
rotation, which gives us kind of
an infinite flexibility in

182
00:08:23,290 --> 00:08:24,310
moving this model around.

183
00:08:24,310 --> 00:08:26,890
We can move it up and down, left
and right, and kind of

184
00:08:26,890 --> 00:08:27,600
tilt it all around.

185
00:08:27,600 --> 00:08:30,020
But that requires three
containers to really

186
00:08:30,020 --> 00:08:34,250
accomplish it in the way
that you would want.

187
00:08:34,250 --> 00:08:37,970
I think I see when people first
approach CSS and 3D,

188
00:08:37,970 --> 00:08:41,380
they're like, well, I have the
element, and I put it, I

189
00:08:41,380 --> 00:08:43,909
rotated it, and then I wanted to
rotate it that way as well,

190
00:08:43,909 --> 00:08:44,550
and that didn't work.

191
00:08:44,550 --> 00:08:47,260
And it's like, well, it's a
container within a container.

192
00:08:47,260 --> 00:08:49,200
It's just a slightly different
way to think about it.

193
00:08:49,200 --> 00:08:51,040
KC AUSTIN: It's a lot easier to
think about it that way, to

194
00:08:51,040 --> 00:08:54,640
separate out the translates
and the rotates as well.

195
00:08:54,640 --> 00:08:58,620
Because in the CSS transform,
you have to have translate 3D

196
00:08:58,620 --> 00:09:00,930
and rotate within the
same transform

197
00:09:00,930 --> 00:09:02,680
block in the same string.

198
00:09:02,680 --> 00:09:06,020
So if you break those out, you
now can have the translate 3D

199
00:09:06,020 --> 00:09:09,020
on one div and then the
container and then another

200
00:09:09,020 --> 00:09:11,610
container have the rotate, and
you can affect them separately

201
00:09:11,610 --> 00:09:12,860
and not have to worry about.

202
00:09:12,860 --> 00:09:15,280

203
00:09:15,280 --> 00:09:17,120
AUBREY ANDERSON: So I just
wanted to kind of point out a

204
00:09:17,120 --> 00:09:17,840
couple of things.

205
00:09:17,840 --> 00:09:21,140
We also lean very heavily
on animation.

206
00:09:21,140 --> 00:09:23,220
So I'll show you this behavior
really quick.

207
00:09:23,220 --> 00:09:30,340
So when this v first loads,
you'll see it sort of does

208
00:09:30,340 --> 00:09:32,370
this long drift down here.

209
00:09:32,370 --> 00:09:34,400
And you are sort of drifting
through this

210
00:09:34,400 --> 00:09:35,820
kind of 3D star field.

211
00:09:35,820 --> 00:09:41,190
Each of these stars is a PNG
file that KC has placed in

212
00:09:41,190 --> 00:09:43,190
real space, more or less.

213
00:09:43,190 --> 00:09:45,100
PETE LEPAGE: There's
one scene that just

214
00:09:45,100 --> 00:09:45,920
sort of blew me away.

215
00:09:45,920 --> 00:09:49,270
The one scene where the women
are blowing the little

216
00:09:49,270 --> 00:09:50,765
fireflies off.

217
00:09:50,765 --> 00:09:54,490
And just the fact that each one
of those stars is its own

218
00:09:54,490 --> 00:09:57,530
item that sort of moves
in space and time.

219
00:09:57,530 --> 00:09:58,710
KC AUSTIN: Yeah, each
one has a class.

220
00:09:58,710 --> 00:10:01,750
It's just one class for a star
that has this tiny PNG and I

221
00:10:01,750 --> 00:10:04,300
just looped through a couple
hundred times, placed them in

222
00:10:04,300 --> 00:10:09,520
random positions in Z, X, Y. And
it kind of gives you that

223
00:10:09,520 --> 00:10:11,880
parallaxing feel when you
rotate everything.

224
00:10:11,880 --> 00:10:13,780
AUBREY ANDERSON: Yeah, that's
this view here.

225
00:10:13,780 --> 00:10:15,430
This is an interesting
view as well.

226
00:10:15,430 --> 00:10:19,840
Each of these elements is
obviously, we're accomplishing

227
00:10:19,840 --> 00:10:23,070
transparency here, but not in
the way you might think.

228
00:10:23,070 --> 00:10:28,100
This is a video that we're
making manually by using a

229
00:10:28,100 --> 00:10:31,800
long animation and moving a
background sprite around.

230
00:10:31,800 --> 00:10:35,540
So each of these women is
actually a big sprite sheet of

231
00:10:35,540 --> 00:10:40,900
PNGs that we're applying an
animation and stepping from

232
00:10:40,900 --> 00:10:41,340
scene to scene.

233
00:10:41,340 --> 00:10:42,180
PETE LEPAGE: Oh, very cool.

234
00:10:42,180 --> 00:10:42,530
OK.

235
00:10:42,530 --> 00:10:44,180
KC AUSTIN: Since we move through
that scene, we can't

236
00:10:44,180 --> 00:10:48,080
do any sort of background
compositing behind the videos.

237
00:10:48,080 --> 00:10:51,860
So in this case, we had
to do a sprite sheet.

238
00:10:51,860 --> 00:10:56,500
And it's basically like
an insanely large PNG.

239
00:10:56,500 --> 00:10:57,860
PETE LEPAGE: Wow.

240
00:10:57,860 --> 00:11:01,350
KC AUSTIN: But I mean, even then
as an optimized PNG, it's

241
00:11:01,350 --> 00:11:04,160
like maybe a meg and a half
per sprite sheet.

242
00:11:04,160 --> 00:11:08,840
So it's not as big as a
video would be anyway.

243
00:11:08,840 --> 00:11:10,620
PETE LEPAGE: Yeah, like I was
going to say, compare that to

244
00:11:10,620 --> 00:11:15,370
a video, and it's pretty much
the same size or smaller in

245
00:11:15,370 --> 00:11:16,620
some cases.

246
00:11:16,620 --> 00:11:18,500

247
00:11:18,500 --> 00:11:20,470
AUBREY ANDERSON: Just if you're
starting from scratch

248
00:11:20,470 --> 00:11:23,420
with this technology, I think
it's just important to

249
00:11:23,420 --> 00:11:25,850
understand how things
get glued together.

250
00:11:25,850 --> 00:11:30,140
So you'll see in the code
here, we're applying a

251
00:11:30,140 --> 00:11:32,240
transform on this element.

252
00:11:32,240 --> 00:11:33,860
This has an interesting
side effect.

253
00:11:33,860 --> 00:11:37,870
When you translate something 3D,
it also will bounce that

254
00:11:37,870 --> 00:11:41,073
element down into the hardware,
essentially put it

255
00:11:41,073 --> 00:11:44,990
in the GPU's stack, rather
than having the

256
00:11:44,990 --> 00:11:46,990
CPU have to do it.

257
00:11:46,990 --> 00:11:52,020
And also, importantly, think
in terms of prefixes.

258
00:11:52,020 --> 00:11:54,130
This is probably how
you will start

259
00:11:54,130 --> 00:11:55,850
working with it in Chrome.

260
00:11:55,850 --> 00:11:59,250
We use a framework called
Neutrino, which helps us

261
00:11:59,250 --> 00:12:02,320
simplify some of the language.

262
00:12:02,320 --> 00:12:04,930
And each of these, in a
different browser context,

263
00:12:04,930 --> 00:12:07,140
will have a different prefix.

264
00:12:07,140 --> 00:12:14,380
Like that for Mozilla, like that
for Opera, and like that

265
00:12:14,380 --> 00:12:16,590
sort of the various WebKits,
Chrome, Safari,

266
00:12:16,590 --> 00:12:17,874
that type of thing.

267
00:12:17,874 --> 00:12:21,360

268
00:12:21,360 --> 00:12:21,890
We've done that.

269
00:12:21,890 --> 00:12:23,560
There's a couple of frameworks
out there that will

270
00:12:23,560 --> 00:12:24,680
help you with this.

271
00:12:24,680 --> 00:12:24,935
PETE LEPAGE: That's awesome.

272
00:12:24,935 --> 00:12:25,610
AUBREY ANDERSON:
It's just nice.

273
00:12:25,610 --> 00:12:27,657
This is how it will look
in a year or two.

274
00:12:27,657 --> 00:12:30,670
So just to get yourself thinking
in terms of the

275
00:12:30,670 --> 00:12:34,590
unprefixed syntax sooner
than later.

276
00:12:34,590 --> 00:12:38,190
And just kind of a
couple things to

277
00:12:38,190 --> 00:12:40,230
try to parse through.

278
00:12:40,230 --> 00:12:42,660
There are transforms and
there are animations.

279
00:12:42,660 --> 00:12:47,470
And animations are just
sequences of CSS state.

280
00:12:47,470 --> 00:12:50,970
Generally they're sequences of
transform state, but they can

281
00:12:50,970 --> 00:12:51,640
be any state you want.

282
00:12:51,640 --> 00:12:53,900
You can go from a big fat
border to a tiny border.

283
00:12:53,900 --> 00:12:55,550
You can go from a blue
background to a red

284
00:12:55,550 --> 00:12:56,490
background.

285
00:12:56,490 --> 00:13:00,830
And what the CSS animation
engine does is it essentially

286
00:13:00,830 --> 00:13:03,070
tweens those states for you.

287
00:13:03,070 --> 00:13:04,610
So you express yourself
in terms of

288
00:13:04,610 --> 00:13:05,910
where you want to start.

289
00:13:05,910 --> 00:13:12,490
I want the element to begin 700
pixels back in Z space.

290
00:13:12,490 --> 00:13:15,960
So these three elements, this
is X, this is Y, and this is

291
00:13:15,960 --> 00:13:22,870
Z. And I would like it to end
transformed 90 pixels over,

292
00:13:22,870 --> 00:13:24,660
that's 90 pixels to the right.

293
00:13:24,660 --> 00:13:30,100
1,400 pixels down, that's a
push down on the y-axis.

294
00:13:30,100 --> 00:13:32,520
And 100 pixels forward
in Z space.

295
00:13:32,520 --> 00:13:35,110
So you can kind of think
this through.

296
00:13:35,110 --> 00:13:38,960
The element is moving from
somewhere back there to a

297
00:13:38,960 --> 00:13:42,300
little bit forward of, if you
think of zero, that's the

298
00:13:42,300 --> 00:13:46,540
plane of your browser,
sort of.

299
00:13:46,540 --> 00:13:49,670
But it's moving forward in
space, as well as down.

300
00:13:49,670 --> 00:13:51,240
It's also a scaling.

301
00:13:51,240 --> 00:13:54,790
So actually, a really immense
amount of stuff if you were

302
00:13:54,790 --> 00:13:57,245
thinking of this, trying to
accomplish this in, say, a

303
00:13:57,245 --> 00:13:59,690
canvas, this would be very,
very hard to express.

304
00:13:59,690 --> 00:14:02,810
Just this simple thing, you'd
have to get really granular

305
00:14:02,810 --> 00:14:05,160
about what was happening to
the element fame by frame.

306
00:14:05,160 --> 00:14:09,460
But here, we just say start
here and end here, take 25

307
00:14:09,460 --> 00:14:11,630
seconds to make that happen.

308
00:14:11,630 --> 00:14:14,610
And you can even apply some kind
of using easing, sort of

309
00:14:14,610 --> 00:14:17,510
Robert Penner style
math to how you

310
00:14:17,510 --> 00:14:19,340
begin and end the animation.

311
00:14:19,340 --> 00:14:21,920
In this case, ease in/out means
that it will sort of

312
00:14:21,920 --> 00:14:24,880
have a parabolic ramp up, get to
a midpoint, and then have a

313
00:14:24,880 --> 00:14:27,490
parabolic ramp down, which just
gives it a little more

314
00:14:27,490 --> 00:14:30,340
organic feel.

315
00:14:30,340 --> 00:14:32,590
KC AUSTIN: We tried to use
animation as much as we could.

316
00:14:32,590 --> 00:14:35,390
Like the bubbles, when you
create a bubble, you just

317
00:14:35,390 --> 00:14:37,840
place it in a random position,
and then just

318
00:14:37,840 --> 00:14:39,340
add a class to it.

319
00:14:39,340 --> 00:14:41,590
And when you add that class,
it adds the ascendant key

320
00:14:41,590 --> 00:14:43,790
frame animation and
the bubble rises.

321
00:14:43,790 --> 00:14:45,690
So you don't have
to go through.

322
00:14:45,690 --> 00:14:48,380
It's just as simple as
creating the div.

323
00:14:48,380 --> 00:14:50,170
PETE LEPAGE: And adding
that class--

324
00:14:50,170 --> 00:14:51,070
KC AUSTIN: And then it goes.

325
00:14:51,070 --> 00:14:52,910
PETE LEPAGE: --and it
all happens for you.

326
00:14:52,910 --> 00:14:55,470
KC AUSTIN: And if you create
those at different times, then

327
00:14:55,470 --> 00:14:58,220
you'd get a bunch of bubble
all floating up.

328
00:14:58,220 --> 00:14:59,160
PETE LEPAGE: Very cool.

329
00:14:59,160 --> 00:15:02,440
One of the things I noticed as I
started playing with some of

330
00:15:02,440 --> 00:15:08,010
these 3D animations was that
when you apply a transform on

331
00:15:08,010 --> 00:15:12,340
the z-axis, it pushes it back,
but it also does exactly what

332
00:15:12,340 --> 00:15:13,880
physics says it should do.

333
00:15:13,880 --> 00:15:14,640
AUBREY ANDERSON: It
gets smaller.

334
00:15:14,640 --> 00:15:15,620
PETE LEPAGE: And it
makes it smaller.

335
00:15:15,620 --> 00:15:16,260
AUBREY ANDERSON: That's true.

336
00:15:16,260 --> 00:15:18,500
PETE LEPAGE: So that's one of
those ones where keeping in

337
00:15:18,500 --> 00:15:20,400
mind that scale factor
is really important.

338
00:15:20,400 --> 00:15:22,580
Because you're going to put
something back or move it

339
00:15:22,580 --> 00:15:25,150
really close, all of a sudden
it's going to go from being

340
00:15:25,150 --> 00:15:28,350
whatever size you expected
it to be to

341
00:15:28,350 --> 00:15:30,070
being bigger or smaller.

342
00:15:30,070 --> 00:15:31,530
AUBREY ANDERSON: I think that's
another important thing

343
00:15:31,530 --> 00:15:35,010
to keep in mind too, that what
you get from the rendering

344
00:15:35,010 --> 00:15:39,790
engine generally reflects
reality, but for an

345
00:15:39,790 --> 00:15:41,320
interactive environment
that's not always

346
00:15:41,320 --> 00:15:42,100
what you want to do.

347
00:15:42,100 --> 00:15:44,160
It's a little bit like
deceleration physics on a

348
00:15:44,160 --> 00:15:45,190
touch device.

349
00:15:45,190 --> 00:15:47,570
They're not real physics because
real physics actually

350
00:15:47,570 --> 00:15:50,220
don't feel that good.

351
00:15:50,220 --> 00:15:53,550
Like the way an element really
decelerates in space, from an

352
00:15:53,550 --> 00:15:55,990
interactive perspective is
kind of not that cool.

353
00:15:55,990 --> 00:15:58,900
So the same with transforms,
a lot of times we'll find

354
00:15:58,900 --> 00:16:02,770
ourselves subtly scaling things
up or down and actually

355
00:16:02,770 --> 00:16:05,560
pulling them out of whatever
you might characterize as

356
00:16:05,560 --> 00:16:08,630
realism in terms of a real 3D
model, if you're thinking in

357
00:16:08,630 --> 00:16:11,730
terms of like WebGL terms.

358
00:16:11,730 --> 00:16:14,980
But in order to make them sit
right compositionally and just

359
00:16:14,980 --> 00:16:17,910
to make when your brain looks
at you go, oh yeah, probably

360
00:16:17,910 --> 00:16:20,510
that tree and that person
are in the same world.

361
00:16:20,510 --> 00:16:22,480
Oftentimes you have to bring
the person way forward and

362
00:16:22,480 --> 00:16:23,860
scale them way down.

363
00:16:23,860 --> 00:16:26,260
Because bringing them forward
makes them big, and even

364
00:16:26,260 --> 00:16:29,110
though that is the right
perspective, you have to scale

365
00:16:29,110 --> 00:16:32,700
them down in order to just
buy it compositionally.

366
00:16:32,700 --> 00:16:34,060
I'll show you another example.

367
00:16:34,060 --> 00:16:38,090
So these lanterns, you'll see
they're sort of randomized,

368
00:16:38,090 --> 00:16:41,610
and they kind of float out, and
then eventually will shoot

369
00:16:41,610 --> 00:16:43,390
up into the sky.

370
00:16:43,390 --> 00:16:47,240
Again, this programmatically
would be relatively difficult

371
00:16:47,240 --> 00:16:50,300
to express because you'd have to
sort of micromanage each of

372
00:16:50,300 --> 00:16:51,620
these elements.

373
00:16:51,620 --> 00:16:53,750
But in our case here, we
don't actually have

374
00:16:53,750 --> 00:16:54,850
to do that at all.

375
00:16:54,850 --> 00:16:56,170
We have a lantern.

376
00:16:56,170 --> 00:16:58,280
This is how every
lantern starts.

377
00:16:58,280 --> 00:16:59,690
And we have a little
particle generator

378
00:16:59,690 --> 00:17:01,720
that makes a new lantern.

379
00:17:01,720 --> 00:17:05,380
Every time a lantern gets thrown
up there, it's pushed a

380
00:17:05,380 --> 00:17:07,250
little bit in left space.

381
00:17:07,250 --> 00:17:10,200
It has some sort of width and
height, and all the stuff

382
00:17:10,200 --> 00:17:13,460
you'd normally do to a div
to get it to render.

383
00:17:13,460 --> 00:17:15,869
And we set a starting point.

384
00:17:15,869 --> 00:17:18,950
And then we just attach an
animation to it every time it

385
00:17:18,950 --> 00:17:19,520
gets added.

386
00:17:19,520 --> 00:17:23,150
And I think the attachment of
the animation can happen also

387
00:17:23,150 --> 00:17:24,640
in JavaScript, which
is important.

388
00:17:24,640 --> 00:17:25,890
You can sort of wait.

389
00:17:25,890 --> 00:17:28,050
And in this case, the lanterns
start all hidden.

390
00:17:28,050 --> 00:17:30,550
And in JavaScript when the video
is ended, we get the

391
00:17:30,550 --> 00:17:32,980
ended event on the video, and
we kick off these sort of

392
00:17:32,980 --> 00:17:33,830
lantern animations.

393
00:17:33,830 --> 00:17:35,770
PETE LEPAGE: So the lanterns
can start floating in.

394
00:17:35,770 --> 00:17:37,150
AUBREY ANDERSON: They can start
floating in, exactly.

395
00:17:37,150 --> 00:17:39,720
But then we can forget about
it, which is awesome.

396
00:17:39,720 --> 00:17:42,780
The lanterns all go through
this same transformation.

397
00:17:42,780 --> 00:17:46,100
But JavaScript, as it loops
through, is setting a

398
00:17:46,100 --> 00:17:48,200
different time on
the animation.

399
00:17:48,200 --> 00:17:50,880
So the speed at which
they go through it

400
00:17:50,880 --> 00:17:52,430
will change and randomize.

401
00:17:52,430 --> 00:17:55,500
The place they start, X and Y,
will change and randomize.

402
00:17:55,500 --> 00:17:58,210
But what happens from there
is always the same.

403
00:17:58,210 --> 00:17:59,895
It goes through this
transform, it

404
00:17:59,895 --> 00:18:01,640
drifts basically up.

405
00:18:01,640 --> 00:18:05,400
But if you think of it in 3D
space, up sort of means away

406
00:18:05,400 --> 00:18:08,995
because we're also scaling them
down as they drift up.

407
00:18:08,995 --> 00:18:14,350
So you can see the go from this
sort of Y positioning up

408
00:18:14,350 --> 00:18:16,790
to slightly less
Y positioning.

409
00:18:16,790 --> 00:18:21,480
And then in the last 10% of the
animation, they shoot way

410
00:18:21,480 --> 00:18:25,830
up in Y, which has the visual
effect of making them go up

411
00:18:25,830 --> 00:18:26,550
into space.

412
00:18:26,550 --> 00:18:27,840
PETE LEPAGE: Yeah, I think
that's one of my favorite

413
00:18:27,840 --> 00:18:32,570
things about the animation, is
being able to say, hey, I

414
00:18:32,570 --> 00:18:35,240
start at zero, and obviously
I'm going to

415
00:18:35,240 --> 00:18:36,545
specify my end animation.

416
00:18:36,545 --> 00:18:39,940
But you can also put in sort of
middle points where you can

417
00:18:39,940 --> 00:18:46,250
say, hey, I want the middle
point to be maybe at 80%.

418
00:18:46,250 --> 00:18:48,570
You can get that math
built yourself.

419
00:18:48,570 --> 00:18:51,210
Like you could go, oh hey,
I want it to go how

420
00:18:51,210 --> 00:18:52,360
I want it to work.

421
00:18:52,360 --> 00:18:54,450
AUBREY ANDERSON: Absolutely, and
you can get really sort of

422
00:18:54,450 --> 00:18:55,750
propeller heady about it.

423
00:18:55,750 --> 00:18:58,390
This I believe is five
digit precision.

424
00:18:58,390 --> 00:18:59,775
PETE LEPAGE: Oh, wow, I didn't
know that actually.

425
00:18:59,775 --> 00:19:01,710
AUBREY ANDERSON: Some browsers
have three digit precision, so

426
00:19:01,710 --> 00:19:02,950
I recommended keeping
to three.

427
00:19:02,950 --> 00:19:05,260
But I believe Chrome actually
observes five.

428
00:19:05,260 --> 00:19:08,670
So you can get very,
very specific.

429
00:19:08,670 --> 00:19:11,130
This in a four second animation,
obviously, is not

430
00:19:11,130 --> 00:19:12,120
something you'd do very often.

431
00:19:12,120 --> 00:19:15,110
But if you have a very
long-lived animation,

432
00:19:15,110 --> 00:19:18,850
something that takes 100
seconds, or 500 seconds,

433
00:19:18,850 --> 00:19:21,090
sometimes to get the timing just
right, like when you're

434
00:19:21,090 --> 00:19:23,010
motion mapping video.

435
00:19:23,010 --> 00:19:24,290
KC AUSTIN: That's what we were
doing for the videos.

436
00:19:24,290 --> 00:19:27,040
I actually wrote something so
that when you hit the Space

437
00:19:27,040 --> 00:19:31,630
bar during a video, it would
get put the time over the

438
00:19:31,630 --> 00:19:33,660
duration and log that.

439
00:19:33,660 --> 00:19:35,090
And then I could just
copy, paste that

440
00:19:35,090 --> 00:19:37,220
into here and do that.

441
00:19:37,220 --> 00:19:39,970
And that's how we would track
where things to sync things up

442
00:19:39,970 --> 00:19:40,890
with video.

443
00:19:40,890 --> 00:19:41,160
AUBREY ANDERSON: Oh,
that's cool.

444
00:19:41,160 --> 00:19:42,980
So you'd leave the video rolling
and just go tap.

445
00:19:42,980 --> 00:19:44,150
KC AUSTIN: The video rolling,
and I'd be like, OK, I want

446
00:19:44,150 --> 00:19:46,415
that to happen here, and then
boom, and then just copy that

447
00:19:46,415 --> 00:19:49,095
in, and that's where that
key frame basically is.

448
00:19:49,095 --> 00:19:52,500
It's kind of like
a queue point.

449
00:19:52,500 --> 00:19:54,770
AUBREY ANDERSON: Chrome as a
tool for motion mapping.

450
00:19:54,770 --> 00:19:57,880
That's pretty badass.

451
00:19:57,880 --> 00:20:00,310
So do you want to talk about the
fireflies at little bit.

452
00:20:00,310 --> 00:20:04,750
KC AUSTIN: Yeah, so the
fireflies, I thought about how

453
00:20:04,750 --> 00:20:07,250
we could do with that sort of
the key frame animation, but

454
00:20:07,250 --> 00:20:08,820
we needed them more reactive.

455
00:20:08,820 --> 00:20:16,220
So when they're made, they're
generated, and then they sort

456
00:20:16,220 --> 00:20:20,990
of fly down the path in front of
you in Z. And then when you

457
00:20:20,990 --> 00:20:24,120
get to the next scene at the
fork, they kind of split and

458
00:20:24,120 --> 00:20:25,150
go left and right.

459
00:20:25,150 --> 00:20:27,040
And that's where you
can choose a path,

460
00:20:27,040 --> 00:20:28,560
either left or right.

461
00:20:28,560 --> 00:20:30,760
And when you lean left, they
have to all kind of

462
00:20:30,760 --> 00:20:31,660
hover to the left.

463
00:20:31,660 --> 00:20:33,650
When you lean right, they have
to hover to the right.

464
00:20:33,650 --> 00:20:38,340
So in that case, since they're
reactive, we couldn't really

465
00:20:38,340 --> 00:20:41,210
use the key frame animations.

466
00:20:41,210 --> 00:20:44,290
So as you can see here, they're
kind of just flying

467
00:20:44,290 --> 00:20:47,680
down in front of you.

468
00:20:47,680 --> 00:20:52,020
So there's a state that they all
look for that's out in the

469
00:20:52,020 --> 00:20:54,840
main application that's
called control.

470
00:20:54,840 --> 00:20:58,450
And if that's set to center,
they just go in the center.

471
00:20:58,450 --> 00:21:01,150
If that's set to right, they
all move to the right, if

472
00:21:01,150 --> 00:21:01,590
that's set to left.

473
00:21:01,590 --> 00:21:03,280
So you can call that
from anywhere,

474
00:21:03,280 --> 00:21:05,980
and set that variable.

475
00:21:05,980 --> 00:21:08,040
For example, right now--

476
00:21:08,040 --> 00:21:10,770
AUBREY ANDERSON: You'll see
them, there, they're more or

477
00:21:10,770 --> 00:21:11,240
less centered.

478
00:21:11,240 --> 00:21:13,160
Or they're split, right?

479
00:21:13,160 --> 00:21:16,480
KC AUSTIN: Left and right.

480
00:21:16,480 --> 00:21:20,820
If you just make this variable
control, if you set it to

481
00:21:20,820 --> 00:21:25,570
right, you'll see them
all kind of--

482
00:21:25,570 --> 00:21:27,300
PETE LEPAGE: Oh, and they
all move to the right.

483
00:21:27,300 --> 00:21:28,760
KC AUSTIN: --they all
meander over.

484
00:21:28,760 --> 00:21:32,020
And then if you set it
to split, they split.

485
00:21:32,020 --> 00:21:34,800
And then if you set it to left,
they'll all meander over

486
00:21:34,800 --> 00:21:36,270
to the other side.

487
00:21:36,270 --> 00:21:41,080
And these, there's an object.

488
00:21:41,080 --> 00:21:43,950
There's a few ways that I was
experimenting with doing this.

489
00:21:43,950 --> 00:21:46,560
There was the jQuery
thing where you can

490
00:21:46,560 --> 00:21:48,870
add data to a div.

491
00:21:48,870 --> 00:21:50,360
And that was the first thing.

492
00:21:50,360 --> 00:21:52,870
But I ended up just doing the
way that I'm used to doing,

493
00:21:52,870 --> 00:21:57,700
which is I have an object that's
a firefly JavaScript

494
00:21:57,700 --> 00:22:02,110
object that has all the X, Y, Z
positions and the logic for

495
00:22:02,110 --> 00:22:04,220
updating it, the particle.

496
00:22:04,220 --> 00:22:06,400
So it's a very simple
particle system that

497
00:22:06,400 --> 00:22:07,670
updates on every frame.

498
00:22:07,670 --> 00:22:09,910
And then I have a loop
that goes through

499
00:22:09,910 --> 00:22:11,340
and updates all those.

500
00:22:11,340 --> 00:22:13,150
And then within that object,
there's also a

501
00:22:13,150 --> 00:22:14,080
reference to the div.

502
00:22:14,080 --> 00:22:16,330
AUBREY ANDERSON: Are those
guys their own view?

503
00:22:16,330 --> 00:22:17,430
KC AUSTIN: Yeah, they
have their own view.

504
00:22:17,430 --> 00:22:20,440
It's fireflies.js.

505
00:22:20,440 --> 00:22:25,250
So you'll see, this is
the fireflies object.

506
00:22:25,250 --> 00:22:29,380
Oh, this is the control here,
so that could be center,

507
00:22:29,380 --> 00:22:34,180
split, and then disperse just
sends them off of the screen.

508
00:22:34,180 --> 00:22:38,570
Where to generate them in the
beginning is a whole other

509
00:22:38,570 --> 00:22:39,560
thing to get into.

510
00:22:39,560 --> 00:22:44,520
But we needed them to actually
show up at the end of the hand

511
00:22:44,520 --> 00:22:47,210
when the siren actually
raise her hand.

512
00:22:47,210 --> 00:22:51,560
So what I had to do was find the
X and Y position of that

513
00:22:51,560 --> 00:22:56,380
sprite sheet and then go into
the sprite sheet in Photoshop

514
00:22:56,380 --> 00:23:03,060
and see how many pixels left
and top where the hand is.

515
00:23:03,060 --> 00:23:03,700
PETE LEPAGE: Oh wow.

516
00:23:03,700 --> 00:23:06,510
KC AUSTIN: And add that to
the sprite sheet X and Y.

517
00:23:06,510 --> 00:23:08,165
PETE LEPAGE: So you were going,
OK, here's my sprite

518
00:23:08,165 --> 00:23:11,110
sheet, I know that the
hand ends at this.

519
00:23:11,110 --> 00:23:12,900
KC AUSTIN: And the hand
pixels where I want

520
00:23:12,900 --> 00:23:15,010
it to form is there.

521
00:23:15,010 --> 00:23:19,380
And then you add that to the
X, Y, Z of the sprite sheet

522
00:23:19,380 --> 00:23:21,750
and then that places it where
you want it to go.

523
00:23:21,750 --> 00:23:27,140
With then you call that on the
WebKit animation iteration.

524
00:23:27,140 --> 00:23:30,480
So when that iteration is done,
the sprite sheet is

525
00:23:30,480 --> 00:23:34,970
ended, that's when her hand is
up, create the thing, and then

526
00:23:34,970 --> 00:23:36,890
it just goes by itself.

527
00:23:36,890 --> 00:23:39,300
And you can see it in the
update loop here.

528
00:23:39,300 --> 00:23:43,540

529
00:23:43,540 --> 00:23:50,490
This is all the variables
for the set-up.

530
00:23:50,490 --> 00:23:54,255
And if it's left, it sets
the center and border.

531
00:23:54,255 --> 00:23:56,100
If it's right, it sets the
center and border.

532
00:23:56,100 --> 00:24:04,210
If it's split, it checks if
its ID is even or odd.

533
00:24:04,210 --> 00:24:06,515
If it's even, then it goes to
one side, if it's odd, it goes

534
00:24:06,515 --> 00:24:08,070
to the other.

535
00:24:08,070 --> 00:24:10,730
And if it disperses, it just
takes off, off the screen, and

536
00:24:10,730 --> 00:24:12,480
doesn't mind the borders.

537
00:24:12,480 --> 00:24:14,700
It's a very simple
particle system.

538
00:24:14,700 --> 00:24:17,850
But for this, we had to
update it on every

539
00:24:17,850 --> 00:24:20,350
frame with the interval.

540
00:24:20,350 --> 00:24:25,380
AUBREY ANDERSON: And then, let's
look at the CSS as well

541
00:24:25,380 --> 00:24:29,400
just as kind of see how they
get bound together.

542
00:24:29,400 --> 00:24:32,435
Because the fireflies
themselves have a--

543
00:24:32,435 --> 00:24:35,680
KC AUSTIN: Yeah, they also have
an animation on them.

544
00:24:35,680 --> 00:24:40,870
And the CSS animation is
to make them blink.

545
00:24:40,870 --> 00:24:42,470
AUBREY ANDERSON: So each of
these elements, every time you

546
00:24:42,470 --> 00:24:45,330
add a div, you give it the class
firefly, it's going to

547
00:24:45,330 --> 00:24:48,960
obey these directions here, and
bind itself to the firefly

548
00:24:48,960 --> 00:24:50,800
light animation.

549
00:24:50,800 --> 00:24:52,260
And it'll do this independently
of whatever

550
00:24:52,260 --> 00:24:55,290
JavaScript is doing to the div
that actually contains them.

551
00:24:55,290 --> 00:24:58,840
This bit just keeps
running on a loop.

552
00:24:58,840 --> 00:25:00,490
KC AUSTIN: And since they're
created at different times,

553
00:25:00,490 --> 00:25:03,210
then they blink at
different times.

554
00:25:03,210 --> 00:25:05,510
AUBREY ANDERSON: Yeah, these
will all go from zero.

555
00:25:05,510 --> 00:25:07,420
Animations are also interesting
in the sense that

556
00:25:07,420 --> 00:25:12,460
when the element is visible,
the animation runs.

557
00:25:12,460 --> 00:25:14,860
But they'll clean
themselves up.

558
00:25:14,860 --> 00:25:17,650
If you set the elements to
display none, the animation

559
00:25:17,650 --> 00:25:19,013
stops and unloads.

560
00:25:19,013 --> 00:25:20,690
PETE LEPAGE: Oh, cool.

561
00:25:20,690 --> 00:25:22,610
AUBREY ANDERSON: So we were sort
of pleasantly surprised

562
00:25:22,610 --> 00:25:24,950
by how much management
you get.

563
00:25:24,950 --> 00:25:27,720
We never have to go in and
cancel the information.

564
00:25:27,720 --> 00:25:29,930
KC AUSTIN: Like for the bubbles
for example, when we

565
00:25:29,930 --> 00:25:33,450
would create the bubble, it
would play the animation.

566
00:25:33,450 --> 00:25:38,410
And then on WebKit end, we were
settings display to none,

567
00:25:38,410 --> 00:25:40,960
that would clear
the animation.

568
00:25:40,960 --> 00:25:43,570
PETE LEPAGE: Then it's
not taking up memory.

569
00:25:43,570 --> 00:25:44,120
Something like this--

570
00:25:44,120 --> 00:25:45,330
KC AUSTIN: It's not on
the render queue.

571
00:25:45,330 --> 00:25:47,400
PETE LEPAGE: --if every piece
of bark on some of these

572
00:25:47,400 --> 00:25:48,630
things is its own element--

573
00:25:48,630 --> 00:25:49,800
KC AUSTIN: Oh yeah,
it gets heavy.

574
00:25:49,800 --> 00:25:50,960
PETE LEPAGE: --you got
to start thinking

575
00:25:50,960 --> 00:25:52,455
about a lot of usage.

576
00:25:52,455 --> 00:25:55,620
KC AUSTIN: Or if you're
generating bubbles every

577
00:25:55,620 --> 00:26:01,470
second, the divs start
piling up.

578
00:26:01,470 --> 00:26:03,880
Actually for the bubbles, on
WebKit end I was actually

579
00:26:03,880 --> 00:26:05,280
removing the div.

580
00:26:05,280 --> 00:26:07,050
AUBREY ANDERSON: Oh right,
when the animation ends,

581
00:26:07,050 --> 00:26:10,130
[INAUDIBLE], you can just
take the div out.

582
00:26:10,130 --> 00:26:13,260
PETE LEPAGE: And there's an
event that's fired when the

583
00:26:13,260 --> 00:26:13,470
animation--

584
00:26:13,470 --> 00:26:14,250
[INTERPOSING VOICES]

585
00:26:14,250 --> 00:26:15,606
PETE LEPAGE: --oh, that event.

586
00:26:15,606 --> 00:26:17,520
AUBREY ANDERSON: Both transition
and animation get a

587
00:26:17,520 --> 00:26:18,580
start and an end.

588
00:26:18,580 --> 00:26:22,240
And animations get an iteration,
which means that

589
00:26:22,240 --> 00:26:24,080
like if it's looping over
a second, you'll get an

590
00:26:24,080 --> 00:26:25,685
iteration called [INAUDIBLE].

591
00:26:25,685 --> 00:26:28,420
You can actually fake a
setTimeout that way.

592
00:26:28,420 --> 00:26:29,180
PETE LEPAGE: Oh, very nice.

593
00:26:29,180 --> 00:26:31,640
AUBREY ANDERSON: I didn't say
that and I don't recommend it.

594
00:26:31,640 --> 00:26:33,700
PETE LEPAGE: Now, actually
that's a good point.

595
00:26:33,700 --> 00:26:36,450
I assume you guys used
requestAnimationFrame as

596
00:26:36,450 --> 00:26:38,470
opposed to setTimeout for?

597
00:26:38,470 --> 00:26:40,120
AUBREY ANDERSON: We ended up
using setTimeout for almost

598
00:26:40,120 --> 00:26:42,800
everything, primarily for
compatibility's sake.

599
00:26:42,800 --> 00:26:47,670
Because requestAnimationFrame,
I think, is cooler and better

600
00:26:47,670 --> 00:26:48,730
objectively speaking.

601
00:26:48,730 --> 00:26:49,980
PETE LEPAGE: Absolutely.

602
00:26:49,980 --> 00:26:51,580

603
00:26:51,580 --> 00:26:52,810
AUBREY ANDERSON: Obviously this
is a Chrome experiment,

604
00:26:52,810 --> 00:26:55,115
but we wanted to be as
compatible as possible when

605
00:26:55,115 --> 00:26:57,230
you took it to another
environment.

606
00:26:57,230 --> 00:27:02,900
And not all environments speak
requestAnimationFrame, with

607
00:27:02,900 --> 00:27:05,830
some notable exceptions.

608
00:27:05,830 --> 00:27:10,770
And then in testing also,
I did a bunch of sort of

609
00:27:10,770 --> 00:27:14,090
parallel testing in terms of
setting timeouts that way,

610
00:27:14,090 --> 00:27:16,550
setting them with animation,
setting them with setTimeouts.

611
00:27:16,550 --> 00:27:18,580
The main thing about setTimeout
is that you just

612
00:27:18,580 --> 00:27:20,410
have to be really careful
that you don't

613
00:27:20,410 --> 00:27:21,720
leave anybody hanging.

614
00:27:21,720 --> 00:27:24,310
So when you view tears down,
you just have to make sure

615
00:27:24,310 --> 00:27:27,170
that any time you set a timeout
you keep a reference

616
00:27:27,170 --> 00:27:31,050
to it, and as your view tears
down, you cancel.

617
00:27:31,050 --> 00:27:33,780

618
00:27:33,780 --> 00:27:36,390
And I think timeout has got such
a bad name for a number

619
00:27:36,390 --> 00:27:37,360
of reasons, but that's
one of them.

620
00:27:37,360 --> 00:27:40,750
It's very easy to make
terrible mistakes.

621
00:27:40,750 --> 00:27:43,860
KC AUSTIN: I think we'd prefer
to do the animation frame,

622
00:27:43,860 --> 00:27:46,620
because it is clocked
like exactly.

623
00:27:46,620 --> 00:27:49,850
But for this kind of stuff
too, it's just fireflies

624
00:27:49,850 --> 00:27:53,360
flying around the screen, it
doesn't have to be perfectly

625
00:27:53,360 --> 00:27:56,740
precise at exactly 60 frames
a second or exactly

626
00:27:56,740 --> 00:27:57,450
whatever you need.

627
00:27:57,450 --> 00:28:00,830
So as long as they move around
realistically, the interval

628
00:28:00,830 --> 00:28:03,910
works fine, as long as
you clear it after.

629
00:28:03,910 --> 00:28:05,280
AUBREY ANDERSON: And
for us, there's

630
00:28:05,280 --> 00:28:07,940
so much media happening.

631
00:28:07,940 --> 00:28:11,970
So a lot of times, our timing,
the holder of the master clock

632
00:28:11,970 --> 00:28:15,700
is actually a piece of video
or a piece of music.

633
00:28:15,700 --> 00:28:18,811
So if you look at like the
tree, for instance.

634
00:28:18,811 --> 00:28:23,430

635
00:28:23,430 --> 00:28:25,480
PETE LEPAGE: And just as a
reminder, if people have

636
00:28:25,480 --> 00:28:28,330
questions, please go and post
those on Google Moderator so

637
00:28:28,330 --> 00:28:31,510
we can come back to some of
these in a little bit.

638
00:28:31,510 --> 00:28:34,160
And as well, you can go visit
this at MoviKantiRevo.com.

639
00:28:34,160 --> 00:28:37,170

640
00:28:37,170 --> 00:28:39,370
It's available as
of last night.

641
00:28:39,370 --> 00:28:40,710
AUBREY ANDERSON: Yeah,
I heard it launched.

642
00:28:40,710 --> 00:28:41,402
PETE LEPAGE: Woo-hoo.

643
00:28:41,402 --> 00:28:42,980
Yay.

644
00:28:42,980 --> 00:28:45,990
AUBREY ANDERSON: So in this one,
we have one big animation

645
00:28:45,990 --> 00:28:49,380
which is transforming the
whole model, essentially

646
00:28:49,380 --> 00:28:50,980
creating a pan up effect.

647
00:28:50,980 --> 00:28:53,390
But we're not really panning
up, obviously.

648
00:28:53,390 --> 00:28:55,860
One big div containing
everything is actually

649
00:28:55,860 --> 00:28:57,680
animation down very slowly.

650
00:28:57,680 --> 00:28:59,760
And then there's all these sort
of individual pieces of

651
00:28:59,760 --> 00:29:03,610
video that we're listening to,
specific events, the start,

652
00:29:03,610 --> 00:29:07,120
the end, and, in some cases,
various timing events.

653
00:29:07,120 --> 00:29:08,890
So there's multiple things
happening, but there's no

654
00:29:08,890 --> 00:29:10,220
setTimeouts in this context.

655
00:29:10,220 --> 00:29:14,110
We're looking at how much time
has elapsed in the animation

656
00:29:14,110 --> 00:29:17,630
and how much time has elapsed
in a given piece of media.

657
00:29:17,630 --> 00:29:20,220
And those things are keeping
time for us.

658
00:29:20,220 --> 00:29:23,450
The advantage there is if for
some reason somebody hits this

659
00:29:23,450 --> 00:29:25,570
on a slow network connection and
the video takes an extra

660
00:29:25,570 --> 00:29:28,430
five seconds to start, obviously
you don't want your

661
00:29:28,430 --> 00:29:30,150
timing to get all messed up.

662
00:29:30,150 --> 00:29:34,160
So pretty much up to lean on the
video to kind of run the

663
00:29:34,160 --> 00:29:36,320
clock and tell you what's
happening when.

664
00:29:36,320 --> 00:29:41,150
KC AUSTIN: We also have a simple
queue point script in

665
00:29:41,150 --> 00:29:45,240
there that tracks the video on
video update and tracks what

666
00:29:45,240 --> 00:29:45,850
time it is.

667
00:29:45,850 --> 00:29:51,370
And then you have an array that
has times and functions

668
00:29:51,370 --> 00:29:53,640
that fire during those times.

669
00:29:53,640 --> 00:29:55,490
So as soon as it hits those
times, it will fire those

670
00:29:55,490 --> 00:29:58,220
functions off.

671
00:29:58,220 --> 00:30:02,340
So you can bring up the video,
see what time exactly you want

672
00:30:02,340 --> 00:30:03,120
that to fire.

673
00:30:03,120 --> 00:30:06,480
Like on the curtain, when she
leans, we need to trigger the

674
00:30:06,480 --> 00:30:07,910
curtain to open.

675
00:30:07,910 --> 00:30:12,270
So we just say at five seconds,
trigger the current

676
00:30:12,270 --> 00:30:15,320
left, and then it'll
fire that.

677
00:30:15,320 --> 00:30:17,320
AUBREY ANDERSON: One of the
things I'd love to see happen

678
00:30:17,320 --> 00:30:20,480
in the media tags, in general,
is some sort of a better way

679
00:30:20,480 --> 00:30:23,120
to plug into what's happening
in the media world.

680
00:30:23,120 --> 00:30:27,090
Like a of times, we have to
manually set up a framework to

681
00:30:27,090 --> 00:30:28,710
observe a piece of media.

682
00:30:28,710 --> 00:30:33,030
The media tells us a lot when
it's loading and about whether

683
00:30:33,030 --> 00:30:34,420
it can play or can't play.

684
00:30:34,420 --> 00:30:37,285
Once it's rolling, it's kind
of quiet unless you ask it,

685
00:30:37,285 --> 00:30:39,960
and basically just go
in and getTime.

686
00:30:39,960 --> 00:30:43,600
You get the element and ask
it for current time.

687
00:30:43,600 --> 00:30:46,660
And current time will give
you seconds and sometimes

688
00:30:46,660 --> 00:30:48,390
milliseconds.

689
00:30:48,390 --> 00:30:51,090
And then you have to kind of
infer from what's going on.

690
00:30:51,090 --> 00:30:54,870
But it'd be great to have that
API get deeper someday and be

691
00:30:54,870 --> 00:30:59,443
able to have the media tell us
and create callbacks that we

692
00:30:59,443 --> 00:31:00,870
can listen for.

693
00:31:00,870 --> 00:31:03,450
It's very new, it's very
young, so there's a

694
00:31:03,450 --> 00:31:05,850
lot going on there.

695
00:31:05,850 --> 00:31:07,530
PETE LEPAGE: I think there's
so many opportunities.

696
00:31:07,530 --> 00:31:12,020
We've got like the now with
the Web Audio API.

697
00:31:12,020 --> 00:31:15,160
Hopefully we'll be able to get
something potentially similar

698
00:31:15,160 --> 00:31:17,400
sort of for video that we'll
be able to get a lot more

699
00:31:17,400 --> 00:31:18,160
stuff with.

700
00:31:18,160 --> 00:31:20,680
AUBREY ANDERSON: Oh yeah,
and we had high hopes.

701
00:31:20,680 --> 00:31:27,870
Obviously, we're using Web
Audio and WebRTC in this.

702
00:31:27,870 --> 00:31:30,550
But one of the things we ran
into, which I think just got

703
00:31:30,550 --> 00:31:34,390
fixed in Canary, like yesterday,
was the ability to

704
00:31:34,390 --> 00:31:37,170
essentially loop those
things back and plug

705
00:31:37,170 --> 00:31:39,880
them into one another.

706
00:31:39,880 --> 00:31:42,970
Which you wouldn't think would
be that big a deal, but it's

707
00:31:42,970 --> 00:31:47,450
actually a super, super
important when creating things

708
00:31:47,450 --> 00:31:48,420
like voice control.

709
00:31:48,420 --> 00:31:54,920
So what we had hoped to
accomplish here was to allow

710
00:31:54,920 --> 00:31:59,490
us to listen to the camera
and microphone.

711
00:31:59,490 --> 00:32:02,570
And obviously, we're painting
the camera frames

712
00:32:02,570 --> 00:32:05,150
in here with a canvas.

713
00:32:05,150 --> 00:32:09,030
But the audio, we cannot, or
at least have not been able

714
00:32:09,030 --> 00:32:12,100
to, sort of feed that back into
the Web Audio API and

715
00:32:12,100 --> 00:32:13,100
analyze it.

716
00:32:13,100 --> 00:32:16,820
Our sort of dream for some of
these sections was she would

717
00:32:16,820 --> 00:32:19,060
come up and ask you to whistle,
you would whistle, we

718
00:32:19,060 --> 00:32:21,650
would look at the frequency and
use Web Audio to sort of

719
00:32:21,650 --> 00:32:24,900
analyze whether you had hit a
certain frequency range, and

720
00:32:24,900 --> 00:32:27,520
create different behaviors
based on low tone, a high

721
00:32:27,520 --> 00:32:30,150
tone, a loud sound,
a quiet sound.

722
00:32:30,150 --> 00:32:34,350
And that's something that I
think we will get to as we go.

723
00:32:34,350 --> 00:32:39,810
But it's really exciting to see
that kind of come about.

724
00:32:39,810 --> 00:32:41,390
And there was a bug filed
about it already.

725
00:32:41,390 --> 00:32:43,590
But we jumped on the bug and
we're like, well we're trying

726
00:32:43,590 --> 00:32:44,610
to do this, and this,
and this.

727
00:32:44,610 --> 00:32:46,470
And then we saw other people
kind of go, oh yeah, we want

728
00:32:46,470 --> 00:32:47,610
to do that too.

729
00:32:47,610 --> 00:32:50,910
So I think it built some
momentum and has now actually

730
00:32:50,910 --> 00:32:52,610
been sorted out.

731
00:32:52,610 --> 00:32:55,590
PETE LEPAGE: So let's talk about
the facial detection,

732
00:32:55,590 --> 00:32:57,800
getUserMedia, and what's
going on there.

733
00:32:57,800 --> 00:33:02,240
Because you start Movi Kanti
Revo for the first time and it

734
00:33:02,240 --> 00:33:06,000
says, hey, this application
wants to use your webcam and

735
00:33:06,000 --> 00:33:07,910
microphone, do you
want to allow?

736
00:33:07,910 --> 00:33:11,260
And you click Yes, and all of
a sudden, there's your face.

737
00:33:11,260 --> 00:33:12,380
What's going on there?

738
00:33:12,380 --> 00:33:14,810
AUBREY ANDERSON: So there's a
bunch of stuff going on there.

739
00:33:14,810 --> 00:33:19,480
The first thing happens is
when you click Allow, it

740
00:33:19,480 --> 00:33:20,820
creates a video tag.

741
00:33:20,820 --> 00:33:24,070
And it sets the source of that
video tag to whatever

742
00:33:24,070 --> 00:33:26,480
WebRTC gives you.

743
00:33:26,480 --> 00:33:28,980
WebRTC gives you this sort of
string of gobbledygook, which

744
00:33:28,980 --> 00:33:31,432
is really just a kind of a
reference, I think, so that

745
00:33:31,432 --> 00:33:34,290
the system can bind
up to the feed

746
00:33:34,290 --> 00:33:36,130
coming in from the camera.

747
00:33:36,130 --> 00:33:37,330
But that's really
only step one.

748
00:33:37,330 --> 00:33:41,050
The video tag doesn't get you
very far in terms of doing

749
00:33:41,050 --> 00:33:43,360
motion tracking or anything
like that.

750
00:33:43,360 --> 00:33:45,670
To do that, you really
need to use canvas,

751
00:33:45,670 --> 00:33:47,770
at least right now.

752
00:33:47,770 --> 00:33:50,860
So you never actually see the
video that we bring in.

753
00:33:50,860 --> 00:33:53,390
The first thing you see
is a canvas element.

754
00:33:53,390 --> 00:33:56,300
This canvas element has some
sort of vignetting going on

755
00:33:56,300 --> 00:33:58,410
and some other treatments,
which is why I'm sort of

756
00:33:58,410 --> 00:34:00,510
partially transparent here.

757
00:34:00,510 --> 00:34:04,770
But the sort of meat of what's
happening is that the frames

758
00:34:04,770 --> 00:34:07,810
from the video are getting
pulled into the canvas, we're

759
00:34:07,810 --> 00:34:09,690
then blowing through
the pixel.

760
00:34:09,690 --> 00:34:14,840
The pixels of the canvas gives
you a sort of big and

761
00:34:14,840 --> 00:34:17,909
unfortunately convoluted
pixel array.

762
00:34:17,909 --> 00:34:21,420
So it's actually just a big
single list of pixels.

763
00:34:21,420 --> 00:34:27,090
And pixels 0, 1 2, and 3, are
the R, G, B, and A of the

764
00:34:27,090 --> 00:34:28,750
first pixel.

765
00:34:28,750 --> 00:34:30,739
Those are the first
four slots.

766
00:34:30,739 --> 00:34:35,830
So you have to take the slots
of the array, four by four,

767
00:34:35,830 --> 00:34:39,219
and just make a note for
yourself that every four means

768
00:34:39,219 --> 00:34:43,605
a pixel, and start your start to
pixel-level analysis there

769
00:34:43,605 --> 00:34:45,969
and that way.

770
00:34:45,969 --> 00:34:48,270
So we're using a couple
of things.

771
00:34:48,270 --> 00:34:53,330
One is this really fantastic,
and reasonably fast JavaScript

772
00:34:53,330 --> 00:34:55,775
CCV library to recognize face.

773
00:34:55,775 --> 00:34:59,780

774
00:34:59,780 --> 00:35:01,590
It's very fast, but it's still
JavaScript, so it's

775
00:35:01,590 --> 00:35:03,590
comparatively slow to
like native code.

776
00:35:03,590 --> 00:35:07,870
So every second or so, we do
face detection and average out

777
00:35:07,870 --> 00:35:11,480
the things like the size and
the location of your face.

778
00:35:11,480 --> 00:35:15,520
And so, if you kind of lean it,
it's keyed to zoom, and

779
00:35:15,520 --> 00:35:16,880
that will sort of trigger
the zoom in.

780
00:35:16,880 --> 00:35:18,800
Leaning out will sort
of push out, again,

781
00:35:18,800 --> 00:35:20,460
with the zoom level.

782
00:35:20,460 --> 00:35:24,320
And then from there, we're just
looking at what I think

783
00:35:24,320 --> 00:35:25,955
of as pretty traditional
motion detection.

784
00:35:25,955 --> 00:35:30,120

785
00:35:30,120 --> 00:35:34,040
And Jason who's not here wrote
this, and he's very smart.

786
00:35:34,040 --> 00:35:39,040
So it blows through pixels, it
looks at an interval, it looks

787
00:35:39,040 --> 00:35:42,380
at what that pixel looked like
last time it checked and what

788
00:35:42,380 --> 00:35:44,100
it looks like now.

789
00:35:44,100 --> 00:35:45,950
And so it's a threshold
for a difference.

790
00:35:45,950 --> 00:35:48,970
So if that pixel is these
different enough, that is the

791
00:35:48,970 --> 00:35:52,130
color or the tone has changed
past a certain threshold, we

792
00:35:52,130 --> 00:35:53,310
call that motion.

793
00:35:53,310 --> 00:35:55,950
So that means there's
something happening.

794
00:35:55,950 --> 00:35:58,930
There's some places where
that falls down.

795
00:35:58,930 --> 00:36:01,880
But actually, in practice,
especially with a laptop or

796
00:36:01,880 --> 00:36:04,730
whatever sitting on the table,
it's pretty darn accurate, and

797
00:36:04,730 --> 00:36:06,190
actually very, very fast.

798
00:36:06,190 --> 00:36:08,850
Fast enough for where this is
probably 15 or 18 frames per

799
00:36:08,850 --> 00:36:11,870
second, and we're still doing
all this other stuff, and 3D

800
00:36:11,870 --> 00:36:13,290
transforms, and animations
and stuff.

801
00:36:13,290 --> 00:36:17,030
So we're definitely beating
up the JavaScript

802
00:36:17,030 --> 00:36:18,530
run time pretty badly.

803
00:36:18,530 --> 00:36:21,386
But it's OK, it actually runs.

804
00:36:21,386 --> 00:36:22,650
PETE LEPAGE: We're pushing
the browser pretty hard.

805
00:36:22,650 --> 00:36:25,410
KC AUSTIN: And we threw
everything else onto the GPU

806
00:36:25,410 --> 00:36:26,920
with the translate 3D.

807
00:36:26,920 --> 00:36:33,450
So that frees up all the CPU
that we can this other stuff.

808
00:36:33,450 --> 00:36:34,970
AUBREY ANDERSON: It's that
sort of balance.

809
00:36:34,970 --> 00:36:38,600
Anything that you can say, here,
graphics card, and get

810
00:36:38,600 --> 00:36:39,040
it out of--

811
00:36:39,040 --> 00:36:40,580
PETE LEPAGE: You go do this.

812
00:36:40,580 --> 00:36:42,570
AUBREY ANDERSON: I mean this
is a huge difference.

813
00:36:42,570 --> 00:36:43,640
This is sort of a tangent.

814
00:36:43,640 --> 00:36:47,200
But like the way we used to do
it with JavaScript, or like if

815
00:36:47,200 --> 00:36:50,900
you do jquery.animate, or
anything that is essentially

816
00:36:50,900 --> 00:36:54,440
clock-based animation where
JavaScript is setting timeouts

817
00:36:54,440 --> 00:36:57,540
or running an interval and
observing elements.

818
00:36:57,540 --> 00:37:01,340
It's just dog slow compared to,
an even with a very fast

819
00:37:01,340 --> 00:37:04,530
JavaScript run time, it's that
sort of single-threaded like

820
00:37:04,530 --> 00:37:06,330
JavaScript has to think
about every frame.

821
00:37:06,330 --> 00:37:11,950
Which, I think there's 150
lanterns, there's this

822
00:37:11,950 --> 00:37:14,920
background animation happening,
there are all these

823
00:37:14,920 --> 00:37:18,055
elements positioned in 3D space,
the canvas analysis,

824
00:37:18,055 --> 00:37:21,660
the video coming in, there's
a lot going on

825
00:37:21,660 --> 00:37:24,410
even in this one page.

826
00:37:24,410 --> 00:37:26,390
PETE LEPAGE: So I think that
one of the things that just

827
00:37:26,390 --> 00:37:30,180
sort of blew me away with the
getUserMedia and WebRTC is

828
00:37:30,180 --> 00:37:33,780
like you get access to the
camera, of course, user's

829
00:37:33,780 --> 00:37:35,095
permission first.

830
00:37:35,095 --> 00:37:38,350
You then take that, render that
onto canvas, you can do

831
00:37:38,350 --> 00:37:39,540
whatever you want with
it from there.

832
00:37:39,540 --> 00:37:41,090
It's not going anywhere.

833
00:37:41,090 --> 00:37:44,530
All that video's sitting
on your local machine.

834
00:37:44,530 --> 00:37:48,360
So you're doing all that
analysis there.

835
00:37:48,360 --> 00:37:52,680
And then being able to make an
entire scene and the world

836
00:37:52,680 --> 00:37:54,490
move about in that way.

837
00:37:54,490 --> 00:37:59,720
So as your head goes one way,
you start to tilt the world.

838
00:37:59,720 --> 00:38:01,600
To go back to the 3D transforms
we were talking

839
00:38:01,600 --> 00:38:03,330
about earlier, you start
applying those.

840
00:38:03,330 --> 00:38:06,420
AUBREY ANDERSON: Yeah, in the
real app we have thresholds on

841
00:38:06,420 --> 00:38:07,330
these 3D transforms.

842
00:38:07,330 --> 00:38:09,260
I've turned them off for the
sake of this demo so you can

843
00:38:09,260 --> 00:38:11,280
see and spin the whole model
all the way around.

844
00:38:11,280 --> 00:38:12,890
PETE LEPAGE: Is that something
that developers

845
00:38:12,890 --> 00:38:14,500
can go do very easily?

846
00:38:14,500 --> 00:38:18,780
Is there a place with dev
tools they can go?

847
00:38:18,780 --> 00:38:21,190
KC AUSTIN: There was one
variable author mode that

848
00:38:21,190 --> 00:38:21,790
turned it on.

849
00:38:21,790 --> 00:38:25,420
But since, you'd have to just
take one condition out.

850
00:38:25,420 --> 00:38:28,340
But yeah, it's just
one condition.

851
00:38:28,340 --> 00:38:29,010
AUBREY ANDERSON:
It's tweakable.

852
00:38:29,010 --> 00:38:31,643
Maybe I'll send it to you and
you can post it somewhere.

853
00:38:31,643 --> 00:38:33,590
PETE LEPAGE: Yeah, that
would be kind of cool.

854
00:38:33,590 --> 00:38:35,540
Because it really is one
of those fun things for

855
00:38:35,540 --> 00:38:37,930
developers to go, oh, hey,
I want to take this part.

856
00:38:37,930 --> 00:38:41,510
I want to see what's going on
behind each of these pieces.

857
00:38:41,510 --> 00:38:43,960
AUBREY ANDERSON: And you don't
even have to do that by

858
00:38:43,960 --> 00:38:44,690
tweaking variables.

859
00:38:44,690 --> 00:38:49,380
You can actually go into the
inspector and just change the

860
00:38:49,380 --> 00:38:52,010
translate 3D state
of the element.

861
00:38:52,010 --> 00:38:55,290
And almost all the
elements here are

862
00:38:55,290 --> 00:38:58,280
transform in 3D space.

863
00:38:58,280 --> 00:39:02,010
And so you can just go in and
change the rotate Y value and

864
00:39:02,010 --> 00:39:04,630
or add a rotate Y value if
it doesn't have one.

865
00:39:04,630 --> 00:39:06,620
And you'll see it do this.

866
00:39:06,620 --> 00:39:09,180
KC AUSTIN: You do to force
perspective container and go

867
00:39:09,180 --> 00:39:11,630
into the X, Y, Z of that.

868
00:39:11,630 --> 00:39:13,410
And you can sort of do
whatever you want.

869
00:39:13,410 --> 00:39:13,930
AUBREY ANDERSON:
Move it around.

870
00:39:13,930 --> 00:39:16,160
PETE LEPAGE: See how
that happens.

871
00:39:16,160 --> 00:39:17,166
AUBREY ANDERSON: I like that
you get to see the back

872
00:39:17,166 --> 00:39:18,350
of the video too.

873
00:39:18,350 --> 00:39:20,642
You don't have to have this,
but we've left it on just

874
00:39:20,642 --> 00:39:22,380
because it's kind of cool.

875
00:39:22,380 --> 00:39:24,600
PETE LEPAGE: Well, that
was one of the things.

876
00:39:24,600 --> 00:39:26,120
I don't think we ended
up doing it.

877
00:39:26,120 --> 00:39:28,460
But I remember us talking about
it at one point, was

878
00:39:28,460 --> 00:39:30,630
like an Easter egg where like
if you actually turned the

879
00:39:30,630 --> 00:39:34,420
scene around all the way, you
actually would see sort of

880
00:39:34,420 --> 00:39:36,610
back, like almost backstage
kind of thing.

881
00:39:36,610 --> 00:39:38,560
AUBREY ANDERSON:
Yeah, totally.

882
00:39:38,560 --> 00:39:42,480
We had kind of a long list of
extra wonderful things that

883
00:39:42,480 --> 00:39:45,970
time is always against
you in trying to

884
00:39:45,970 --> 00:39:47,730
actually ship something.

885
00:39:47,730 --> 00:39:50,230
But yeah, there are
several little

886
00:39:50,230 --> 00:39:51,390
things if you dig around.

887
00:39:51,390 --> 00:39:51,890
PETE LEPAGE: Awesome.

888
00:39:51,890 --> 00:39:53,040
AUBREY ANDERSON: I'm not
giving them all way.

889
00:39:53,040 --> 00:39:55,490
PETE LEPAGE: Yeah, we definitely
don't want.

890
00:39:55,490 --> 00:39:56,790
We've given one good one.

891
00:39:56,790 --> 00:39:57,330
AUBREY ANDERSON: Yeah,
there's at least one

892
00:39:57,330 --> 00:39:58,630
good one we gave away.

893
00:39:58,630 --> 00:40:00,230
PETE LEPAGE: Cool.

894
00:40:00,230 --> 00:40:02,250
So one of the other things that
we thought about with

895
00:40:02,250 --> 00:40:06,060
this experiment was mobile
experiences, right?

896
00:40:06,060 --> 00:40:08,420
Do you want to talk a
little bit about how

897
00:40:08,420 --> 00:40:10,380
you approached that?

898
00:40:10,380 --> 00:40:12,990
AUBREY ANDERSON: Yeah, I guess
there's another sort of

899
00:40:12,990 --> 00:40:16,930
important side effect to letting
CSS do a lot of this

900
00:40:16,930 --> 00:40:18,310
heavy lifting for you.

901
00:40:18,310 --> 00:40:20,280
One is obviously it's
just easier on the

902
00:40:20,280 --> 00:40:21,870
JavaScript run time.

903
00:40:21,870 --> 00:40:23,545
But the other kind
of cool thing is

904
00:40:23,545 --> 00:40:25,030
that it's very portable.

905
00:40:25,030 --> 00:40:28,850
So any other browser runtime
that thinks about things this

906
00:40:28,850 --> 00:40:33,730
way will allow you to render
these elements on the GPU of

907
00:40:33,730 --> 00:40:36,820
whatever device you happen
to be looking at.

908
00:40:36,820 --> 00:40:42,430
And so we're kind of fortunate
to be coming into an era where

909
00:40:42,430 --> 00:40:45,560
a lot of browsers speak the
same, or at least subtle

910
00:40:45,560 --> 00:40:49,580
variance of the same language,
and will do the same things

911
00:40:49,580 --> 00:40:53,020
with those instructions, so
particularly animations and

912
00:40:53,020 --> 00:40:55,470
transforms.

913
00:40:55,470 --> 00:41:01,310
So as we set something like
transform translate 3D, we now

914
00:41:01,310 --> 00:41:04,650
have support for this in pretty
much, at least the

915
00:41:04,650 --> 00:41:09,580
latest releases of, all major
browsers and mobile.

916
00:41:09,580 --> 00:41:13,090
And in the mobile space it is
particularly important because

917
00:41:13,090 --> 00:41:15,150
obviously your CPU is pegged
down quite a bit.

918
00:41:15,150 --> 00:41:18,030
You're generally running
on sometimes dual core.

919
00:41:18,030 --> 00:41:20,060
Now but it's still
100 megahertz.

920
00:41:20,060 --> 00:41:23,000
And its a phone, it's also doing
whatever the phone needs

921
00:41:23,000 --> 00:41:24,680
to do, and there's
a lot going, it's

922
00:41:24,680 --> 00:41:27,220
not just the browser.

923
00:41:27,220 --> 00:41:30,000
And so the ability to take
elements in the browser and

924
00:41:30,000 --> 00:41:32,200
render them on the graphics
hardware is really, really

925
00:41:32,200 --> 00:41:33,740
huge and really important.

926
00:41:33,740 --> 00:41:36,600
And if you look at this
experience on tablets, you

927
00:41:36,600 --> 00:41:39,290
actually get pretty competent
rendering, and, in some cases,

928
00:41:39,290 --> 00:41:43,870
really kickass rendering just by
virtue of this same thing.

929
00:41:43,870 --> 00:41:46,220
And places where we don't have
a really good JavaScript run

930
00:41:46,220 --> 00:41:49,650
time, we can dodge that to some
extent by rendering right

931
00:41:49,650 --> 00:41:52,130
on the hardware.

932
00:41:52,130 --> 00:41:54,580
PETE LEPAGE: Now we don't have
getUserMedia on mobile.

933
00:41:54,580 --> 00:41:59,580
So instead, it did something I
thought was brilliant and it

934
00:41:59,580 --> 00:42:00,760
makes perfect sense.

935
00:42:00,760 --> 00:42:05,350
AUBREY ANDERSON: Yeah, what we
did on mobile is we pegged

936
00:42:05,350 --> 00:42:07,410
that behavior to tilt.

937
00:42:07,410 --> 00:42:10,670
So as you tilt, you'll see this
kind of interface here,

938
00:42:10,670 --> 00:42:14,336
which is like a little
four-way controller.

939
00:42:14,336 --> 00:42:18,400
This is a poor man's D-pad.

940
00:42:18,400 --> 00:42:24,260
And as you tilt, you will get
the sort of same effect as if

941
00:42:24,260 --> 00:42:26,750
we detected motion on the
left and right side.

942
00:42:26,750 --> 00:42:30,316
PETE LEPAGE: So tilt device
orientation, so that as you

943
00:42:30,316 --> 00:42:32,960
tilt the device it gets
that same thing.

944
00:42:32,960 --> 00:42:37,260
And it's pretty rare that I'm
going to pick up my laptop or

945
00:42:37,260 --> 00:42:40,265
desktop and go, oo, look,
I can do this.

946
00:42:40,265 --> 00:42:43,860
I've done it A. Few times for
a quick little demo and it's

947
00:42:43,860 --> 00:42:44,620
kind of fun.

948
00:42:44,620 --> 00:42:47,810
But you're not going to give
your kid your laptop and say,

949
00:42:47,810 --> 00:42:50,956
hey, go play with Movi Kanti
Revo and tilt it.

950
00:42:50,956 --> 00:42:54,060
So it doesn't work there, but
it works so beautifully on

951
00:42:54,060 --> 00:42:58,840
mobile where people just
naturally think, oh, cool.

952
00:42:58,840 --> 00:43:03,450
AUBREY ANDERSON: Yeah, we tried
to on mobile side do the

953
00:43:03,450 --> 00:43:06,100
thing that you would think
that it would do to the

954
00:43:06,100 --> 00:43:09,570
greatest extent that we could,
so wherever possible just

955
00:43:09,570 --> 00:43:12,850
tried to do the right
thing and the thing

956
00:43:12,850 --> 00:43:14,590
that you might expect.

957
00:43:14,590 --> 00:43:16,710
KC AUSTIN: We have sort of this
higher level thing that

958
00:43:16,710 --> 00:43:19,820
makes it lean either way, and
then that will accept input

959
00:43:19,820 --> 00:43:20,820
from wherever you want.

960
00:43:20,820 --> 00:43:25,260
So if it's the widget that has
the video stuff, that'll tell

961
00:43:25,260 --> 00:43:28,450
it, or the tilt, or whatever
else we wanted.

962
00:43:28,450 --> 00:43:31,180
AUBREY ANDERSON: Yeah, you can
really map any input into the

963
00:43:31,180 --> 00:43:35,820
general rotation controller and
wire up whatever type of

964
00:43:35,820 --> 00:43:36,750
control you want.

965
00:43:36,750 --> 00:43:41,200
So you could easily wire
it touch, or keyboard.

966
00:43:41,200 --> 00:43:43,450
PETE LEPAGE: So we could even,
like, game pack controllers.

967
00:43:43,450 --> 00:43:44,725
AUBREY ANDERSON: Yeah,
we could do game pack

968
00:43:44,725 --> 00:43:45,560
controllers.

969
00:43:45,560 --> 00:43:47,765
PETE LEPAGE: HTML5 has got the
API for doing that, so like

970
00:43:47,765 --> 00:43:50,160
you could [INAUDIBLE].

971
00:43:50,160 --> 00:43:51,430
AUBREY ANDERSON: Yeah, there's
some potential there.

972
00:43:51,430 --> 00:43:52,540
PETE LEPAGE: That would
be really fun.

973
00:43:52,540 --> 00:43:54,300
That would be really
net to go do.

974
00:43:54,300 --> 00:43:56,850
We've been playing with one
for our Chrome Apps.

975
00:43:56,850 --> 00:44:00,470
We've got one of the Parrot
Drone helicopters.

976
00:44:00,470 --> 00:44:04,530
And we managed to make it fly
using purely HTML and

977
00:44:04,530 --> 00:44:08,200
JavaScript with a Chrome
App, which is like tons

978
00:44:08,200 --> 00:44:09,790
of fun to go to.

979
00:44:09,790 --> 00:44:12,120
I'm going to start pull up some
of the questions to see

980
00:44:12,120 --> 00:44:14,520
if people have submitted
stuff.

981
00:44:14,520 --> 00:44:19,165
But what was your favorite
part of this project?

982
00:44:19,165 --> 00:44:19,810
AUBREY ANDERSON: I don't know.

983
00:44:19,810 --> 00:44:21,060
Do you have a favorite part?

984
00:44:21,060 --> 00:44:24,386

985
00:44:24,386 --> 00:44:27,520
KC AUSTIN: Just overall,
probably just getting to the

986
00:44:27,520 --> 00:44:32,460
point where I can be creative
without having to think about

987
00:44:32,460 --> 00:44:35,380
the CSS, and all the code
and everything.

988
00:44:35,380 --> 00:44:38,180
Getting to a point where I can
set things up, get things

989
00:44:38,180 --> 00:44:41,090
moving around, build these
scenes out without thinking

990
00:44:41,090 --> 00:44:42,920
about the code anymore.

991
00:44:42,920 --> 00:44:45,170
I think that's the best thing,
when you finally get to the

992
00:44:45,170 --> 00:44:47,870
point where you're not thinking
about how things

993
00:44:47,870 --> 00:44:48,480
should be set up.

994
00:44:48,480 --> 00:44:52,560
Because we went to so many
iterations of do we do CSS

995
00:44:52,560 --> 00:44:56,400
animations, do we do JavaScript,
how do we have the

996
00:44:56,400 --> 00:44:57,950
scenes set up in 3D?

997
00:44:57,950 --> 00:44:59,910
Once you get to the point
where all that kind of

998
00:44:59,910 --> 00:45:03,480
workflow is all settled, and
then you can take the assets

999
00:45:03,480 --> 00:45:05,850
from getting build something
at the end, I think

1000
00:45:05,850 --> 00:45:08,590
that's the best part.

1001
00:45:08,590 --> 00:45:10,570
AUBREY ANDERSON: I really
liked also when we were

1002
00:45:10,570 --> 00:45:14,090
shooting in Las Vegas.

1003
00:45:14,090 --> 00:45:16,590
We had a lot of these models
or at least preliminary

1004
00:45:16,590 --> 00:45:18,730
versions of the models built.

1005
00:45:18,730 --> 00:45:23,130
And so we were able to take
really quick keys from the

1006
00:45:23,130 --> 00:45:27,280
camera and just make me
quick movie files.

1007
00:45:27,280 --> 00:45:30,910
And they were sort of res'ed
out and stuff, but we were

1008
00:45:30,910 --> 00:45:34,790
able to drop those right into
the environment as we had them

1009
00:45:34,790 --> 00:45:39,760
mocked up and show the actors,
show the performers what they

1010
00:45:39,760 --> 00:45:41,480
were going to look like
in the environment.

1011
00:45:41,480 --> 00:45:45,050
And they were like, ah, OK,
I see, so I'm in a forest.

1012
00:45:45,050 --> 00:45:47,210
And I think when they went
back and did another take

1013
00:45:47,210 --> 00:45:51,970
after seeing it, I think it
changed their idea, and it

1014
00:45:51,970 --> 00:45:54,540
gave them a real sense of
what was happening.

1015
00:45:54,540 --> 00:45:56,650
And I think it changed the
quality of the performance

1016
00:45:56,650 --> 00:45:58,100
because they could actually
previsualized.

1017
00:45:58,100 --> 00:46:01,190
PETE LEPAGE: Well they were
in this blue screen room.

1018
00:46:01,190 --> 00:46:05,160
Like literally it was this
cube of just pure blue.

1019
00:46:05,160 --> 00:46:09,610
And it's hard to imagine in that
without having something

1020
00:46:09,610 --> 00:46:11,630
to start with where
you're going.

1021
00:46:11,630 --> 00:46:13,690
KC AUSTIN: And mocking the
scenes up and just having

1022
00:46:13,690 --> 00:46:15,120
layers is really fast.

1023
00:46:15,120 --> 00:46:18,280
So you could just have that set
up, throw them in, show

1024
00:46:18,280 --> 00:46:20,870
them how it looks, even change
stuff on the fly.

1025
00:46:20,870 --> 00:46:22,730
AUBREY ANDERSON: Yeah, move
things up and down in Z space,

1026
00:46:22,730 --> 00:46:23,920
scale things around.

1027
00:46:23,920 --> 00:46:27,090
And because it's all CSS and
you're not down there making a

1028
00:46:27,090 --> 00:46:28,970
code level change and forgetting
a semicolon or

1029
00:46:28,970 --> 00:46:31,750
whatever, it's very, very quick
and easy to change.

1030
00:46:31,750 --> 00:46:33,750
You can change it right
in the inspector.

1031
00:46:33,750 --> 00:46:36,875
It was, I would say, my first
experience with something that

1032
00:46:36,875 --> 00:46:41,460
was that real time with that
kind of media production.

1033
00:46:41,460 --> 00:46:44,780
PETE LEPAGE: Yeah, and to see
them all come over and look at

1034
00:46:44,780 --> 00:46:47,320
this, like they were
just so amazed.

1035
00:46:47,320 --> 00:46:50,690
And in fact, some of the artists
were at the launch

1036
00:46:50,690 --> 00:46:52,180
last night.

1037
00:46:52,180 --> 00:46:53,950
Like we've been heads
down in this.

1038
00:46:53,950 --> 00:46:54,750
We've seen this--

1039
00:46:54,750 --> 00:46:55,800
AUBREY ANDERSON: They'd
never seen it.

1040
00:46:55,800 --> 00:46:58,700
PETE LEPAGE: --hours, and hours,
and hours a day, and

1041
00:46:58,700 --> 00:46:59,400
they had never seen it.

1042
00:46:59,400 --> 00:47:02,820
And the look of sort of joy,
and glee, and excitement on

1043
00:47:02,820 --> 00:47:06,770
their face to see them in this
world was pretty phenomenal.

1044
00:47:06,770 --> 00:47:07,660
AUBREY ANDERSON: Right on.

1045
00:47:07,660 --> 00:47:09,010
I had to talk, I missed that.

1046
00:47:09,010 --> 00:47:09,890
But I'm glad that happened.

1047
00:47:09,890 --> 00:47:11,390
PETE LEPAGE: Yeah.

1048
00:47:11,390 --> 00:47:14,900
So a couple questions
from the audience.

1049
00:47:14,900 --> 00:47:18,060
And please post anymore as we're
going through these.

1050
00:47:18,060 --> 00:47:26,570
But the first question was,
somebody tried to run it on

1051
00:47:26,570 --> 00:47:31,060
some of the older browsers, so
like Firefox 3.6, and IE 9,

1052
00:47:31,060 --> 00:47:33,980
and it doesn't degrade
gracefully.

1053
00:47:33,980 --> 00:47:40,870
And besides WebRTC not working,
why didn't it work in

1054
00:47:40,870 --> 00:47:43,500
those older browsers?

1055
00:47:43,500 --> 00:47:45,490
AUBREY ANDERSON: The big barrier
is the ability to

1056
00:47:45,490 --> 00:47:48,630
translate elements
in 3D space.

1057
00:47:48,630 --> 00:47:53,480
And sort of early on we were
like, well, if we do it this

1058
00:47:53,480 --> 00:47:56,380
way, we are going to
lose some of the

1059
00:47:56,380 --> 00:47:59,100
older browser renderers.

1060
00:47:59,100 --> 00:48:01,420
But this being a Chrome
experiment, we wanted to

1061
00:48:01,420 --> 00:48:06,460
really show the latest, greatest
and do the really

1062
00:48:06,460 --> 00:48:09,930
best we could do with the
technology that we have on the

1063
00:48:09,930 --> 00:48:11,400
sort of leading edge.

1064
00:48:11,400 --> 00:48:15,740
Not that WebKit transform is
particularly, but broad

1065
00:48:15,740 --> 00:48:18,340
support is pretty new.

1066
00:48:18,340 --> 00:48:22,090
So the big barrier for older
browsers is that they will not

1067
00:48:22,090 --> 00:48:24,860
translate elements
in 3D space.

1068
00:48:24,860 --> 00:48:29,340
A lot of them have translate Y,
they have translate X, or

1069
00:48:29,340 --> 00:48:35,290
they have a translate function
that takes an X and a Y, but

1070
00:48:35,290 --> 00:48:39,840
there's no Z. And they also
don't do that work

1071
00:48:39,840 --> 00:48:42,840
largely on the GPU.

1072
00:48:42,840 --> 00:48:47,460
So the barrier for us was a
browser run time that when you

1073
00:48:47,460 --> 00:48:51,090
ask it to put an element,
position it in 3D space, it

1074
00:48:51,090 --> 00:48:54,190
would do that for you, and do
the right thing, and hopefully

1075
00:48:54,190 --> 00:48:56,990
do it on the graphics card
wherever possible.

1076
00:48:56,990 --> 00:49:00,350
So you'll see this on Windows XP
as well, like Chrome ships

1077
00:49:00,350 --> 00:49:04,650
with acceleration turned off
by default on Windows XP.

1078
00:49:04,650 --> 00:49:07,970
And so even though Chrome can
do it, they, I think, can't

1079
00:49:07,970 --> 00:49:12,080
reliably be certain of the GPU
environment, so they hedge the

1080
00:49:12,080 --> 00:49:13,430
bet and ship it off.

1081
00:49:13,430 --> 00:49:16,260
You can go into about:flags
and turn it back on.

1082
00:49:16,260 --> 00:49:19,480
But the browser that can't speak
that language, we had to

1083
00:49:19,480 --> 00:49:20,620
just let those ones go.

1084
00:49:20,620 --> 00:49:23,210
KC AUSTIN: Or even you could
have the newest version of

1085
00:49:23,210 --> 00:49:26,700
Chrome but with a super old GPU,
it just won't know what

1086
00:49:26,700 --> 00:49:29,250
to do with those layers.

1087
00:49:29,250 --> 00:49:31,680
PETE LEPAGE: And one of the
really important things about

1088
00:49:31,680 --> 00:49:34,850
Chrome experiments is they are
meant push the web forward and

1089
00:49:34,850 --> 00:49:37,490
show what's possible
on the web.

1090
00:49:37,490 --> 00:49:40,640
And that's sort of one of those
things where this works

1091
00:49:40,640 --> 00:49:46,570
in many, almost all of the
modern browsers without any

1092
00:49:46,570 --> 00:49:48,230
craziness going on.

1093
00:49:48,230 --> 00:49:49,450
And so we want to push that.

1094
00:49:49,450 --> 00:49:53,420
We want people to look at this
and go, holy smokes, this is

1095
00:49:53,420 --> 00:49:56,890
all HTML, I can do
this myself.

1096
00:49:56,890 --> 00:49:58,520
I can go in and look this.

1097
00:49:58,520 --> 00:50:00,890
There's nothing proprietary.

1098
00:50:00,890 --> 00:50:02,630
You can view source on
the code on this.

1099
00:50:02,630 --> 00:50:04,000
AUBREY ANDERSON: Yeah, and
change the whole thing.

1100
00:50:04,000 --> 00:50:06,620
And I mean, I think it's also
important to really understand

1101
00:50:06,620 --> 00:50:08,610
that this is an art piece.

1102
00:50:08,610 --> 00:50:12,140
I mean, we're not
trying to sell

1103
00:50:12,140 --> 00:50:13,950
refrigerators from this website.

1104
00:50:13,950 --> 00:50:18,090
Like we're trying to do creative
work with new tools

1105
00:50:18,090 --> 00:50:20,840
that we have discovered
in modern browsers.

1106
00:50:20,840 --> 00:50:24,140
And that's, I think, the
experiment part of the Chrome

1107
00:50:24,140 --> 00:50:26,210
experiment.

1108
00:50:26,210 --> 00:50:29,490
We're fundamentally pretty
creative people, and that's

1109
00:50:29,490 --> 00:50:31,580
where our hearts
and minds are.

1110
00:50:31,580 --> 00:50:32,930
We're also technical.

1111
00:50:32,930 --> 00:50:38,030
But the point of this whole
process was to take the tools

1112
00:50:38,030 --> 00:50:41,160
that we have discovered in the
browser, push them as hard as

1113
00:50:41,160 --> 00:50:43,640
we could in the name
of doing something

1114
00:50:43,640 --> 00:50:46,220
artistic and creative.

1115
00:50:46,220 --> 00:50:46,930
PETE LEPAGE: Cool, awesome.

1116
00:50:46,930 --> 00:50:51,900
The next question, was it easier
to do this in HTML and

1117
00:50:51,900 --> 00:50:54,400
JavaScript than it
was in Flash?

1118
00:50:54,400 --> 00:50:56,662
AUBREY ANDERSON: Oh,
that's interesting.

1119
00:50:56,662 --> 00:50:59,730
PETE LEPAGE: And we talked last
night, you came from a

1120
00:50:59,730 --> 00:51:00,570
Flash world.

1121
00:51:00,570 --> 00:51:04,420
KC AUSTIN: Yeah, I've been in
the Flash world since '98.

1122
00:51:04,420 --> 00:51:08,200
I helped shape the plug-in.

1123
00:51:08,200 --> 00:51:11,040
I've been working on it for
years, and years, and years.

1124
00:51:11,040 --> 00:51:14,490
And it's not so much a
matter of could we do

1125
00:51:14,490 --> 00:51:16,110
it better in Flash.

1126
00:51:16,110 --> 00:51:21,050
Flash has all kinds of different
effects, and

1127
00:51:21,050 --> 00:51:23,160
filters, and everything
but [INAUDIBLE]

1128
00:51:23,160 --> 00:51:23,830
level stuff.

1129
00:51:23,830 --> 00:51:27,190
And you do get the webcam across
all browsers, which

1130
00:51:27,190 --> 00:51:27,670
would be great.

1131
00:51:27,670 --> 00:51:33,390
But it's more the point of being
challenging and doing it

1132
00:51:33,390 --> 00:51:36,310
without Flash.

1133
00:51:36,310 --> 00:51:37,510
And this is the future.

1134
00:51:37,510 --> 00:51:41,150
So I think we have to push it.

1135
00:51:41,150 --> 00:51:44,070
And eventually, we will
have everything

1136
00:51:44,070 --> 00:51:45,430
that we have in Flash.

1137
00:51:45,430 --> 00:51:49,140
We already have the
CSS filters now.

1138
00:51:49,140 --> 00:51:52,680
With canvas we're getting
bitmap level effects.

1139
00:51:52,680 --> 00:51:56,480
So it's getting there and we
just need to push it forward

1140
00:51:56,480 --> 00:51:58,760
until it is 100%.

1141
00:51:58,760 --> 00:52:00,750
PETE LEPAGE: Yeah, and I think
this is something that we will

1142
00:52:00,750 --> 00:52:02,820
absolutely get to.

1143
00:52:02,820 --> 00:52:06,420
And this is something that is,
I think, in many ways, much

1144
00:52:06,420 --> 00:52:07,960
more accessible to people.

1145
00:52:07,960 --> 00:52:10,030
KC AUSTIN: Yeah, and if you
say, we could have had the

1146
00:52:10,030 --> 00:52:15,000
microphone in Flash, and we
actually thought about having

1147
00:52:15,000 --> 00:52:18,130
just one element just to grab
the microphone and pipe it in

1148
00:52:18,130 --> 00:52:19,450
just from Flash.

1149
00:52:19,450 --> 00:52:22,390
But we decided against it just
because we wanted it to be

1150
00:52:22,390 --> 00:52:24,090
complete a complete
HTML5 experience.

1151
00:52:24,090 --> 00:52:30,510
And now, yesterday, we do have
audio in Canary, and because

1152
00:52:30,510 --> 00:52:32,430
of the fact that we're
pushing it forward.

1153
00:52:32,430 --> 00:52:35,880
So the next thing that we
do, we will have that.

1154
00:52:35,880 --> 00:52:39,060
AUBREY ANDERSON: I also think
it's really important that

1155
00:52:39,060 --> 00:52:41,760
this is markup.

1156
00:52:41,760 --> 00:52:44,100
We're doing things
declaratively, by and large,

1157
00:52:44,100 --> 00:52:46,550
in this application, which is

1158
00:52:46,550 --> 00:52:50,800
fundamentally a different idea.

1159
00:52:50,800 --> 00:52:53,300
KC AUSTIN: It was a paradigm
shift for me to work in this.

1160
00:52:53,300 --> 00:52:56,160
I have a very like
game programming

1161
00:52:56,160 --> 00:52:57,560
mentality in Flash.

1162
00:52:57,560 --> 00:53:00,060
And I have the way that
I set things up

1163
00:53:00,060 --> 00:53:01,400
is completely different.

1164
00:53:01,400 --> 00:53:05,784
And Aubrey had to kind of turn
everything on its head for me.

1165
00:53:05,784 --> 00:53:08,390
[INTERPOSING VOICES]

1166
00:53:08,390 --> 00:53:09,870
PETE LEPAGE: So he had to apply
that 3D transform--

1167
00:53:09,870 --> 00:53:11,609
AUBREY ANDERSON: Yeah,
to your brain.

1168
00:53:11,609 --> 00:53:12,970
PETE LEPAGE: --and
then rotate.

1169
00:53:12,970 --> 00:53:14,930
KC AUSTIN: So I had to like
change things around

1170
00:53:14,930 --> 00:53:18,690
completely and get back into
that markup, CSS, JavaScript

1171
00:53:18,690 --> 00:53:19,800
kind of mentality.

1172
00:53:19,800 --> 00:53:22,730
PETE LEPAGE: Cool.

1173
00:53:22,730 --> 00:53:25,690
So the next question, what kind
of DOM and JS cleanup did

1174
00:53:25,690 --> 00:53:29,350
you do to keep the performance
and memory leaks to a minimum?

1175
00:53:29,350 --> 00:53:31,900
As the user stays in
this experience,

1176
00:53:31,900 --> 00:53:33,430
like it runs 10 minutes.

1177
00:53:33,430 --> 00:53:34,970
KC AUSTIN: It has to clean
up everything.

1178
00:53:34,970 --> 00:53:37,760
You have to clean up
all the intervals.

1179
00:53:37,760 --> 00:53:43,850
And the Neutrino with like
setting display to none after

1180
00:53:43,850 --> 00:53:45,580
the pages are done.

1181
00:53:45,580 --> 00:53:47,980
AUBREY ANDERSON: Yeah, we were
working within a framework

1182
00:53:47,980 --> 00:53:50,340
that we also invented
call Neutrino.

1183
00:53:50,340 --> 00:53:55,280
And what that does is just gives
you a simple lifestyle--

1184
00:53:55,280 --> 00:53:56,550
life cycle.

1185
00:53:56,550 --> 00:53:58,930
Also, some lifestyle management,
but mostly life

1186
00:53:58,930 --> 00:53:59,450
cycle management.

1187
00:53:59,450 --> 00:54:03,030
PETE LEPAGE: That would
be a pretty phenomenal

1188
00:54:03,030 --> 00:54:03,870
framework to have.

1189
00:54:03,870 --> 00:54:05,540
AUBREY ANDERSON: It comes
with a hat and some cool

1190
00:54:05,540 --> 00:54:06,310
sunglasses.

1191
00:54:06,310 --> 00:54:09,880
PETE LEPAGE: Awesome,
sign me up.

1192
00:54:09,880 --> 00:54:13,640
AUBREY ANDERSON: It's a tool
that allows you to think in

1193
00:54:13,640 --> 00:54:16,230
terms of a kind of atomic
modular views.

1194
00:54:16,230 --> 00:54:19,070
And the views have a life cycle,
they become visible,

1195
00:54:19,070 --> 00:54:21,520
they become invisible.

1196
00:54:21,520 --> 00:54:25,600
And it just helps you manage
some of that stuff.

1197
00:54:25,600 --> 00:54:28,820
Our friend in this situation
is display none.

1198
00:54:28,820 --> 00:54:35,100
So what we found in browsers is
display none takes it out

1199
00:54:35,100 --> 00:54:37,370
of the memory stock.

1200
00:54:37,370 --> 00:54:40,360
So then you just have to be
careful about what JavaScript

1201
00:54:40,360 --> 00:54:42,270
is doing, make sure that
JavaScript is not running

1202
00:54:42,270 --> 00:54:45,850
away, or you don't have
an interval or a

1203
00:54:45,850 --> 00:54:48,080
timeout still running.

1204
00:54:48,080 --> 00:54:52,240
But by and large, if you are
animating with WebKit

1205
00:54:52,240 --> 00:54:57,460
animation for with transforms,
and you set display none on

1206
00:54:57,460 --> 00:55:02,280
any block of HTML, from there
all the way down the stack in

1207
00:55:02,280 --> 00:55:04,255
the DOM is just yanked.

1208
00:55:04,255 --> 00:55:06,630
And it's yanked actually
fairly quickly.

1209
00:55:06,630 --> 00:55:10,350
And you get the memory back
almost immediately.

1210
00:55:10,350 --> 00:55:14,650
So obviously each of these
scenes has hundreds and

1211
00:55:14,650 --> 00:55:16,740
hundreds of things going on.

1212
00:55:16,740 --> 00:55:19,150
They're massive, they're
transparent PNG files, they're

1213
00:55:19,150 --> 00:55:22,020
video files, and all
those things.

1214
00:55:22,020 --> 00:55:25,200
And so setting display none to a
whole block, we can actually

1215
00:55:25,200 --> 00:55:27,860
leave it in the DOM.

1216
00:55:27,860 --> 00:55:29,790
In some cases, we do, some
cases, we don't.

1217
00:55:29,790 --> 00:55:31,630
KC AUSTIN: Yeah, I was doing
some cleanup where on WebKit

1218
00:55:31,630 --> 00:55:33,930
end I would actually remove
the HTML element.

1219
00:55:33,930 --> 00:55:37,330
But that was more just
for me, so it wasn't

1220
00:55:37,330 --> 00:55:39,382
2,000 divs in the DOM.

1221
00:55:39,382 --> 00:55:40,620
AUBREY ANDERSON:
Yeah, totally.

1222
00:55:40,620 --> 00:55:44,160
The one exception, I
think, is video.

1223
00:55:44,160 --> 00:55:47,060
Obviously, even display
none on video,

1224
00:55:47,060 --> 00:55:48,020
it's a little squirrely.

1225
00:55:48,020 --> 00:55:53,070
So you'll see, if you watch
the life cycle in the DOM

1226
00:55:53,070 --> 00:55:56,660
happen, just let the thing play,
you'll see video tags

1227
00:55:56,660 --> 00:55:59,760
getting injected, they'll play,
they'll get pulled.

1228
00:55:59,760 --> 00:56:02,760
So we do try to do some more
aggressive cleanup and

1229
00:56:02,760 --> 00:56:05,240
management on video and
audio in particular.

1230
00:56:05,240 --> 00:56:08,780
But for animations and all that
stuff, it's just kind of

1231
00:56:08,780 --> 00:56:11,790
wonderfully managed by virtue
of the view state.

1232
00:56:11,790 --> 00:56:13,170
PETE LEPAGE: Cool.

1233
00:56:13,170 --> 00:56:15,570
So we've only got like a
couple minutes left.

1234
00:56:15,570 --> 00:56:16,700
So I'm going to take
this last question.

1235
00:56:16,700 --> 00:56:18,920
I think it's a wonderful
question.

1236
00:56:18,920 --> 00:56:21,800
How would you recommend a web
developer that didn't do any

1237
00:56:21,800 --> 00:56:25,160
animations start using them
in their next app.

1238
00:56:25,160 --> 00:56:27,220
Is there a good framework
or library that

1239
00:56:27,220 --> 00:56:28,190
they should look at?

1240
00:56:28,190 --> 00:56:30,840
Or is there a set of tools?

1241
00:56:30,840 --> 00:56:32,950
How do they get started?

1242
00:56:32,950 --> 00:56:36,190
AUBREY ANDERSON: Well, I think
HTML5 Rocks is actually a

1243
00:56:36,190 --> 00:56:37,240
pretty nice place to start.

1244
00:56:37,240 --> 00:56:39,250
I'm not just plugging
a Google thing.

1245
00:56:39,250 --> 00:56:43,370
Like it actually is a nice place
to just step through an

1246
00:56:43,370 --> 00:56:44,320
approach to that.

1247
00:56:44,320 --> 00:56:46,310
KC AUSTIN: That's what I was
going through a lot when I

1248
00:56:46,310 --> 00:56:47,890
first started.

1249
00:56:47,890 --> 00:56:50,870
Just go through every one of
those things and just get

1250
00:56:50,870 --> 00:56:53,470
things moving around on screen,
very simple things,

1251
00:56:53,470 --> 00:56:57,700
and just build, just kind of
snowball up your tool box.

1252
00:56:57,700 --> 00:56:59,770
And go through each of the
functions, check all the

1253
00:56:59,770 --> 00:57:01,660
different timing functions,
durations, all

1254
00:57:01,660 --> 00:57:03,330
that kind of stuff.

1255
00:57:03,330 --> 00:57:07,670
AUBREY ANDERSON: Yeah, you do
need to just jump into it,

1256
00:57:07,670 --> 00:57:11,790
make an animation,
and watch it go.

1257
00:57:11,790 --> 00:57:15,840
But it's not actually
that complicated.

1258
00:57:15,840 --> 00:57:20,040
So in some ways, it's something
that is noble and

1259
00:57:20,040 --> 00:57:22,400
easy to experiment with
and you can just do it

1260
00:57:22,400 --> 00:57:24,710
in HTML in a browser.

1261
00:57:24,710 --> 00:57:28,570
Just inline your CSS and
mess around with stuff.

1262
00:57:28,570 --> 00:57:29,830
And I'd start very simple.

1263
00:57:29,830 --> 00:57:34,470
Just make yourself a key frame
sequence with a 0% and 100%.

1264
00:57:34,470 --> 00:57:36,270
And just apply it and--

1265
00:57:36,270 --> 00:57:37,900
PETE LEPAGE: See what happens.

1266
00:57:37,900 --> 00:57:38,850
AUBREY ANDERSON: Yeah,
you'll sort of feel

1267
00:57:38,850 --> 00:57:40,470
your way through it.

1268
00:57:40,470 --> 00:57:43,090
It's like any new technology,
where there's a confused

1269
00:57:43,090 --> 00:57:44,710
couple of hours.

1270
00:57:44,710 --> 00:57:47,850
But it is actually really
well-documented, and

1271
00:57:47,850 --> 00:57:49,280
increasingly well-documented.

1272
00:57:49,280 --> 00:57:51,560
The first couple of years, it
was really, really hard to

1273
00:57:51,560 --> 00:57:52,415
find anything.

1274
00:57:52,415 --> 00:57:56,050
But I found, this year in
particular, a huge ramp up in

1275
00:57:56,050 --> 00:57:59,640
examples and copy, paste your
way through to something

1276
00:57:59,640 --> 00:58:02,360
happening, and just start
tweaking things, changing

1277
00:58:02,360 --> 00:58:05,510
variables, changing
time, and note.

1278
00:58:05,510 --> 00:58:08,420
And you'll go, oh, this is
a good way to do things.

1279
00:58:08,420 --> 00:58:11,850
It takes a minute to just change
your brain around from

1280
00:58:11,850 --> 00:58:14,510
thinking of there's a thing, I'm
going to select the thing,

1281
00:58:14,510 --> 00:58:16,960
and it's going to happen.

1282
00:58:16,960 --> 00:58:20,370
Largely we key animations to
class states, so you're still

1283
00:58:20,370 --> 00:58:22,350
selecting things sometimes
in the run time.

1284
00:58:22,350 --> 00:58:26,030
But a lot of times you're just
doing document.queryselector

1285
00:58:26,030 --> 00:58:28,480
some thing, and you're adding a
class to it or subtracting a

1286
00:58:28,480 --> 00:58:31,330
class to it.

1287
00:58:31,330 --> 00:58:32,520
PETE LEPAGE: All right,
well I want to

1288
00:58:32,520 --> 00:58:33,730
thank you guys so much.

1289
00:58:33,730 --> 00:58:38,350
We do have a case study
about building the 3D

1290
00:58:38,350 --> 00:58:39,760
world that's up.

1291
00:58:39,760 --> 00:58:41,920
We've got a bunch of other
case studies that we're

1292
00:58:41,920 --> 00:58:45,000
planning to put up over
the next couple weeks.

1293
00:58:45,000 --> 00:58:48,790
Because there's just so much
behind this whole experiment,

1294
00:58:48,790 --> 00:58:53,300
this whole world, that's
just like wow.

1295
00:58:53,300 --> 00:58:57,370
AUBREY ANDERSON: It sort of
leaks out of my ears.

1296
00:58:57,370 --> 00:58:58,620
PETE LEPAGE: Thank you
guys for joining us.

1297
00:58:58,620 --> 00:58:59,070
AUBREY ANDERSON: Thanks
for having us.

1298
00:58:59,070 --> 00:59:01,360
PETE LEPAGE: It's been really
great to have you and sort of

1299
00:59:01,360 --> 00:59:04,880
div in behind the divs here
and have a look at this.

1300
00:59:04,880 --> 00:59:06,030
Thank you guys for joining us.

1301
00:59:06,030 --> 00:59:08,010
And go check out Movi
Kanti Revo.

1302
00:59:08,010 --> 00:59:12,500
It's a M-O-V-I, Movi, Kanti,
K-A-N-T-I, Revo.

1303
00:59:12,500 --> 00:59:14,120
The URL is on screen.

1304
00:59:14,120 --> 00:59:15,580
Have a wonderful
day, everyone.

1305
00:59:15,580 --> 00:59:16,800
Thanks for joining us.

1306
00:59:16,800 --> 00:59:18,900
Bye bye.

1307
00:59:18,900 --> 00:59:49,800
[MUSIC PLAYING]

1308
00:59:49,800 --> 00:59:55,000

