1
00:00:00,000 --> 00:00:02,810

2
00:00:02,810 --> 00:00:04,690
MALE SPEAKER: Shanghai
GDG is a very

3
00:00:04,690 --> 00:00:06,770
interesting developer community.

4
00:00:06,770 --> 00:00:07,600
FEMALE SPEAKER 1: I'm
glad somebody

5
00:00:07,600 --> 00:00:08,790
has asked this question.

6
00:00:08,790 --> 00:00:10,015
MALE SPEAKER 2: This is where
the magic happens.

7
00:00:10,015 --> 00:00:10,877
FEMALE SPEAKER 2: This
is primarily a

8
00:00:10,877 --> 00:00:11,880
question-and-answer show.

9
00:00:11,880 --> 00:00:14,230
So if any of you out there would
like to ask questions.

10
00:00:14,230 --> 00:00:24,430

11
00:00:24,430 --> 00:00:25,680
MALE SPEAKER 3: All right,
welcome everybody.

12
00:00:25,680 --> 00:00:28,700

13
00:00:28,700 --> 00:00:32,630
I guess this is the third week
of our Chrome Apps hang out.

14
00:00:32,630 --> 00:00:36,750
And this week we've got with
us Paul and Renato.

15
00:00:36,750 --> 00:00:39,990
We're all back in our
home locations.

16
00:00:39,990 --> 00:00:43,860
So guys, why don't I have you
introduce yourselves, for

17
00:00:43,860 --> 00:00:47,220
those who are just joining
us for your first time.

18
00:00:47,220 --> 00:00:48,300
PAUL LEWIS: Hi, I'm
Paul Lewis.

19
00:00:48,300 --> 00:00:51,720
I'm a developer programs
engineer for Google and I work

20
00:00:51,720 --> 00:00:56,850
on GPU performance type things
and also Chrome Apps as well.

21
00:00:56,850 --> 00:00:59,270
So, that's me.

22
00:00:59,270 --> 00:01:03,480
MALE SPEAKER 3: Sweet
and next we--

23
00:01:03,480 --> 00:01:04,819
RENATO MANGINI: I'm
Renato Mangini,

24
00:01:04,819 --> 00:01:07,490
and I work from Brazil.

25
00:01:07,490 --> 00:01:10,650
I'm a Chrome developer
program engineer.

26
00:01:10,650 --> 00:01:14,500
And I work for Chrome
Apps currently.

27
00:01:14,500 --> 00:01:15,530
MALE SPEAKER 3: Awesome,
excellent.

28
00:01:15,530 --> 00:01:20,230
And so Renato, you were last
week in Mountain View with us.

29
00:01:20,230 --> 00:01:23,720
And then Paul you were not, but
you're going to be joining

30
00:01:23,720 --> 00:01:25,940
from Mountain View next week,
isn't that right?

31
00:01:25,940 --> 00:01:27,253
PAUL LEWIS: Next week and the
week after I'll be in

32
00:01:27,253 --> 00:01:28,230
Mountain View, yes.

33
00:01:28,230 --> 00:01:28,980
MALE SPEAKER 3: Awesome, good.

34
00:01:28,980 --> 00:01:30,990
Well, it'll be fun to
have you there.

35
00:01:30,990 --> 00:01:34,480
And I think the week after next
we're going to have a

36
00:01:34,480 --> 00:01:36,710
couple of us are going
to be heading back.

37
00:01:36,710 --> 00:01:38,520
Renato, are you headed
back to Mountain View

38
00:01:38,520 --> 00:01:39,350
next week as well?

39
00:01:39,350 --> 00:01:40,610
Or when do you go back?

40
00:01:40,610 --> 00:01:43,530
RENATO MANGINI: Not been next,
but the other one.

41
00:01:43,530 --> 00:01:47,740
On 11th, September 11th,
I will join you--

42
00:01:47,740 --> 00:01:48,170
MALE SPEAKER 3: Awesome.

43
00:01:48,170 --> 00:01:48,910
RINADO: --in Mountain View.

44
00:01:48,910 --> 00:01:50,430
MALE SPEAKER 3: Very cool.

45
00:01:50,430 --> 00:01:55,050
Well, so in that case, why don't
we jump in and look at

46
00:01:55,050 --> 00:01:58,940
some of the stuff that we're
going to talk about this week.

47
00:01:58,940 --> 00:02:02,010
We asked you guys the last two
weeks what APIs you're most

48
00:02:02,010 --> 00:02:04,210
interested in, what the things
that you think a really

49
00:02:04,210 --> 00:02:06,600
interesting and relevant.

50
00:02:06,600 --> 00:02:09,880
And it was kind of interesting
to see some of the results.

51
00:02:09,880 --> 00:02:12,890
But very clearly one of the
things you're most interested

52
00:02:12,890 --> 00:02:16,240
in hearing about it is the
news storage APIs.

53
00:02:16,240 --> 00:02:21,800
So with the evolution of Chrome
packaged apps, you can

54
00:02:21,800 --> 00:02:25,800
now have the ability to use
things like Chrome Sync and

55
00:02:25,800 --> 00:02:29,210
Chrome local storage that
allow you to store data

56
00:02:29,210 --> 00:02:32,140
locally on the user's computer,
as well as have it

57
00:02:32,140 --> 00:02:35,240
stored up into the cloud.

58
00:02:35,240 --> 00:02:38,800
So with that, why don't I pass
it over to Renato who's going

59
00:02:38,800 --> 00:02:43,452
to explain some of the new
APIs that are available.

60
00:02:43,452 --> 00:02:44,660
RENATO MANGINI: Excellent.

61
00:02:44,660 --> 00:02:46,730
Thanks, [? Pete. ?]

62
00:02:46,730 --> 00:02:50,040
If you're a web developer, you
probably use it to do local

63
00:02:50,040 --> 00:02:51,800
storage API.

64
00:02:51,800 --> 00:02:56,970
The local storage API is not
Chrome specific, but it has

65
00:02:56,970 --> 00:03:03,360
been for a few months and it
has for some months or some

66
00:03:03,360 --> 00:03:05,650
years, I'm not sure.

67
00:03:05,650 --> 00:03:11,370
But it has some problems with
basically the most important

68
00:03:11,370 --> 00:03:13,575
problem it is synchronous--

69
00:03:13,575 --> 00:03:13,840
MALE SPEAKER 3: Mmm.

70
00:03:13,840 --> 00:03:14,960
OK.

71
00:03:14,960 --> 00:03:17,610
RENATO MANGINI: Being
synchronous, it's a potential

72
00:03:17,610 --> 00:03:22,690
problem because if it's a
storage, it does a lot of IO

73
00:03:22,690 --> 00:03:29,340
and you cannot count on how much
time that IO will take.

74
00:03:29,340 --> 00:03:36,220
So this Chrome packaged API,
specific for Chrome packaged

75
00:03:36,220 --> 00:03:40,600
apps, is the Chrome storage.

76
00:03:40,600 --> 00:03:44,100
The Chrome storage is composed
of two storage areas, the

77
00:03:44,100 --> 00:03:46,500
local and the sync.

78
00:03:46,500 --> 00:03:50,730
Both have almost the same
behavior, the same API.

79
00:03:50,730 --> 00:03:54,430
You can use one or the other,
depending on your

80
00:03:54,430 --> 00:03:55,590
requirements.

81
00:03:55,590 --> 00:03:59,880
But it's simply a matter
of changing which

82
00:03:59,880 --> 00:04:01,180
storage you are using.

83
00:04:01,180 --> 00:04:05,920
The whole set of meta calls
is the same for both.

84
00:04:05,920 --> 00:04:08,830
The API is a pretty
much the same.

85
00:04:08,830 --> 00:04:15,360
It's almost the same as the
local storage from HTML5 on

86
00:04:15,360 --> 00:04:19,730
the open web, except
for a few changes.

87
00:04:19,730 --> 00:04:22,970
First of all, you have
to have a specific

88
00:04:22,970 --> 00:04:25,340
permission on your manifest.

89
00:04:25,340 --> 00:04:27,260
And the permission is
called storage.

90
00:04:27,260 --> 00:04:30,560
MALE SPEAKER 3: OK, so we need
to storage permission in order

91
00:04:30,560 --> 00:04:32,350
to be able to use this, right?

92
00:04:32,350 --> 00:04:32,940
RENATO MANGINI: Exactly.

93
00:04:32,940 --> 00:04:35,110
MALE SPEAKER 3: OK, cool.

94
00:04:35,110 --> 00:04:42,070
RENATO MANGINI: And then you
just call the methods from the

95
00:04:42,070 --> 00:04:44,920
storage area you want to use.

96
00:04:44,920 --> 00:04:49,330
For example, if you want to get
a specific value from the

97
00:04:49,330 --> 00:04:51,900
storage, you call Chrome
dot storage

98
00:04:51,900 --> 00:04:54,730
dot sync or dot local--

99
00:04:54,730 --> 00:04:55,070
MALE SPEAKER 3: OK.

100
00:04:55,070 --> 00:04:56,860
RENATO MANGINI: --depending
on the storage area.

101
00:04:56,860 --> 00:04:58,690
MALE SPEAKER 3: Now why are
there two different ones?

102
00:04:58,690 --> 00:05:00,570
Like can go into?

103
00:05:00,570 --> 00:05:01,830
RENATO MANGINI: Yeah,
absolutely.

104
00:05:01,830 --> 00:05:07,840
The local one, it stores
asynchronously in your local

105
00:05:07,840 --> 00:05:09,340
file system.

106
00:05:09,340 --> 00:05:15,950
And the sync one, it does the
same as the local one if you

107
00:05:15,950 --> 00:05:18,100
are offline.

108
00:05:18,100 --> 00:05:21,700
But as soon as you get online,
or if you are already online,

109
00:05:21,700 --> 00:05:27,900
it does sync the keys and values
with the cloud, with

110
00:05:27,900 --> 00:05:29,270
your Chrome account.

111
00:05:29,270 --> 00:05:34,770
As long as you're signed into
your Chrome account.

112
00:05:34,770 --> 00:05:34,990
MALE SPEAKER 3: OK.

113
00:05:34,990 --> 00:05:36,880
RENATO MANGINI: To your--

114
00:05:36,880 --> 00:05:41,000
MALE SPEAKER 3: So local only
ever exists on that particular

115
00:05:41,000 --> 00:05:42,050
user's computer, right?

116
00:05:42,050 --> 00:05:44,890
So like, hey, I've got my
Chromebook here, and if I do

117
00:05:44,890 --> 00:05:48,020
dot local, it's going to sit
there on that machine.

118
00:05:48,020 --> 00:05:52,920
But with dot sync, the
difference there is that it's

119
00:05:52,920 --> 00:05:54,950
going to sync on this
Chromebook, but it's also

120
00:05:54,950 --> 00:05:57,360
going to sync on my Chromebook
at home.

121
00:05:57,360 --> 00:06:00,490
It's going to sync on
maybe my Mac or my

122
00:06:00,490 --> 00:06:04,352
PC on another machine.

123
00:06:04,352 --> 00:06:05,520
RENATO MANGINI: Yeah,
absolutely.

124
00:06:05,520 --> 00:06:05,890
MALE SPEAKER 3: Cool.

125
00:06:05,890 --> 00:06:09,020
Now, what might be some use
cases as for where I would

126
00:06:09,020 --> 00:06:14,420
want to use sync versus local?

127
00:06:14,420 --> 00:06:19,740
RENATO MANGINI: The use case for
these Chrome storages is

128
00:06:19,740 --> 00:06:23,390
for storing small pieces
of information, so

129
00:06:23,390 --> 00:06:25,060
for example, settings.

130
00:06:25,060 --> 00:06:27,170
I think this is the
most important and

131
00:06:27,170 --> 00:06:28,360
relevant use case.

132
00:06:28,360 --> 00:06:33,060
If you just configured your
application without the

133
00:06:33,060 --> 00:06:38,750
settings changes you want, and
you do it on your laptop, you

134
00:06:38,750 --> 00:06:41,210
don't want to do it again
on your desktop.

135
00:06:41,210 --> 00:06:41,510
MALE SPEAKER 3: Right.

136
00:06:41,510 --> 00:06:44,740
RENATO MANGINI: It's very
important to the user to be

137
00:06:44,740 --> 00:06:50,090
able to share these settings
among other computers.

138
00:06:50,090 --> 00:06:57,270
And also the location inside the
app that the user are, the

139
00:06:57,270 --> 00:07:00,710
state of the app is very
important for developers to

140
00:07:00,710 --> 00:07:04,670
store that state on
the sync storage.

141
00:07:04,670 --> 00:07:10,600
So if I'm reading a specific
article on my desktop and I

142
00:07:10,600 --> 00:07:14,690
have to go out, I grab my laptop
and I open it and I

143
00:07:14,690 --> 00:07:18,550
opened the new reader
application.

144
00:07:18,550 --> 00:07:22,930
It's very good for me if the app
opens on the same page I

145
00:07:22,930 --> 00:07:23,860
was before.

146
00:07:23,860 --> 00:07:24,310
MALE SPEAKER 3: Right.

147
00:07:24,310 --> 00:07:24,900
So--

148
00:07:24,900 --> 00:07:26,700
RENATO MANGINI: We can achieve
that very easily.

149
00:07:26,700 --> 00:07:29,310
MALE SPEAKER 3: For stuff that
might be relevant to go across

150
00:07:29,310 --> 00:07:32,890
multiple machines, like so what
I've read in the news,

151
00:07:32,890 --> 00:07:37,870
maybe if I've got a news reader,
maybe what songs I

152
00:07:37,870 --> 00:07:40,560
listen to last or what playlist
I was playing with,

153
00:07:40,560 --> 00:07:43,200
if it's a media application--

154
00:07:43,200 --> 00:07:45,650
so there's a lot of good
cases where you'd want

155
00:07:45,650 --> 00:07:47,550
to sync that across.

156
00:07:47,550 --> 00:07:48,980
RENATO MANGINI: Yes,
absolutely.

157
00:07:48,980 --> 00:07:50,106
MALE SPEAKER 3: OK.

158
00:07:50,106 --> 00:07:52,070
PAUL LEWIS: It's worth pointing
out at this stage

159
00:07:52,070 --> 00:07:56,370
that there are some limits, and
there's a quota for the

160
00:07:56,370 --> 00:07:59,840
amount of data that can
be stored online.

161
00:07:59,840 --> 00:08:02,250
So you should check the docs
to make sure the--

162
00:08:02,250 --> 00:08:02,490
MALE SPEAKER 3: OK.

163
00:08:02,490 --> 00:08:05,270
PAUL LEWIS: --number of items
and the amount of data per

164
00:08:05,270 --> 00:08:07,060
item is within those limits.

165
00:08:07,060 --> 00:08:09,820
And that really [INAUDIBLE] for
things like these sort of

166
00:08:09,820 --> 00:08:12,670
settings or smaller
made value patts.

167
00:08:12,670 --> 00:08:14,390
MALE SPEAKER 3: Yeah,
that's a good point.

168
00:08:14,390 --> 00:08:19,210
So could I store entire
news articles?

169
00:08:19,210 --> 00:08:21,830
So say for example, I've got all
the news article, it's got

170
00:08:21,830 --> 00:08:24,330
a bunch of images, and maybe
there's a video.

171
00:08:24,330 --> 00:08:27,960
Do I want to put that
into sync or local?

172
00:08:27,960 --> 00:08:29,190
RENATO MANGINI: No,
I don't think so.

173
00:08:29,190 --> 00:08:31,300
MALE SPEAKER 3: OK, so probably
not to put those

174
00:08:31,300 --> 00:08:33,270
kinds of things there.

175
00:08:33,270 --> 00:08:36,770
But maybe to say I've read
that article, right?

176
00:08:36,770 --> 00:08:36,940
RENATO MANGINI: Exactly.

177
00:08:36,940 --> 00:08:38,110
PAUL LEWIS: Yeah.

178
00:08:38,110 --> 00:08:40,830
RENATO MANGINI: Yeah, the
example you mentioned before

179
00:08:40,830 --> 00:08:47,910
of music streaming application,
if you are going

180
00:08:47,910 --> 00:08:51,520
to save anything there, you save
the name or the ID of the

181
00:08:51,520 --> 00:08:55,650
music you were listening to, not
to music itself, just to

182
00:08:55,650 --> 00:08:56,830
be clear about that.

183
00:08:56,830 --> 00:08:57,360
MALE SPEAKER 3: All right.

184
00:08:57,360 --> 00:08:59,880
PAUL LEWIS: But there are also
the things like the file

185
00:08:59,880 --> 00:09:01,310
system API.

186
00:09:01,310 --> 00:09:04,630
So there are other APIS that you
could investigate if you

187
00:09:04,630 --> 00:09:08,210
want to actually store, say,
blogs or file data,

188
00:09:08,210 --> 00:09:10,000
specifically.

189
00:09:10,000 --> 00:09:12,900
But as we're saying, the Chrome
[INAUDIBLE] storage is

190
00:09:12,900 --> 00:09:13,960
ready for these.

191
00:09:13,960 --> 00:09:15,860
And they've value patts
ready right now.

192
00:09:15,860 --> 00:09:17,795
MALE SPEAKER 3: OK, cool.

193
00:09:17,795 --> 00:09:20,660

194
00:09:20,660 --> 00:09:24,590
Renato, does that about cover
what you wanted to talk about?

195
00:09:24,590 --> 00:09:30,390
RENATO MANGINI: Yeah, there is
one interesting method on the

196
00:09:30,390 --> 00:09:34,650
API that is the on change it.

197
00:09:34,650 --> 00:09:39,080
When you add the listener to the
on change it object, you

198
00:09:39,080 --> 00:09:41,280
get a call.

199
00:09:41,280 --> 00:09:47,590
Whenever anything on your
application storage has

200
00:09:47,590 --> 00:09:48,440
changed it.

201
00:09:48,440 --> 00:09:54,040
It's very important for syncing
stuff and receiving

202
00:09:54,040 --> 00:09:54,640
the [INAUDIBLE]

203
00:09:54,640 --> 00:09:56,850
of change on the other
computers.

204
00:09:56,850 --> 00:09:57,540
MALE SPEAKER 3: OK.

205
00:09:57,540 --> 00:10:02,210
RENATO MANGINI: The method
is on the documentation.

206
00:10:02,210 --> 00:10:06,520
The URL for documentation would
probably be on your

207
00:10:06,520 --> 00:10:08,780
screen in a few seconds,
if it's not yet.

208
00:10:08,780 --> 00:10:11,140
MALE SPEAKER 3: OK, it's
not there yet.

209
00:10:11,140 --> 00:10:14,220
I got to make one quick little
update while we're doing some

210
00:10:14,220 --> 00:10:14,890
of the demos.

211
00:10:14,890 --> 00:10:16,800
But we'll bring those up.

212
00:10:16,800 --> 00:10:19,820
RENATO MANGINI: And the method
is called it's Chrome dot

213
00:10:19,820 --> 00:10:21,520
stars dot on change it.

214
00:10:21,520 --> 00:10:23,870
And you have a method at
least on this object.

215
00:10:23,870 --> 00:10:26,990
And do you send it function
and that function, the

216
00:10:26,990 --> 00:10:31,540
callback, will be called
whenever there's a change on

217
00:10:31,540 --> 00:10:34,710
your storage.

218
00:10:34,710 --> 00:10:39,760
But apart from that, we have
get, set, clear, remove

219
00:10:39,760 --> 00:10:42,070
methods, which are pretty
straightforward.

220
00:10:42,070 --> 00:10:45,260
And we also have the
get bytes in use.

221
00:10:45,260 --> 00:10:50,570
That returns you how many bytes
that have been used on

222
00:10:50,570 --> 00:10:51,490
our storage.

223
00:10:51,490 --> 00:10:52,400
MALE SPEAKER 3: OK, excellent.

224
00:10:52,400 --> 00:10:53,750
That's pretty much it.

225
00:10:53,750 --> 00:10:56,660
MALE SPEAKER 3: And so we'll
get the link for the URL up

226
00:10:56,660 --> 00:10:57,710
here in a sec.

227
00:10:57,710 --> 00:11:00,830
But Paul, you actually
sat down and wrote a

228
00:11:00,830 --> 00:11:02,300
little sample for us.

229
00:11:02,300 --> 00:11:03,770
Do you want to talk
about that?

230
00:11:03,770 --> 00:11:04,650
PAUL LEWIS: Yeah, absolutely.

231
00:11:04,650 --> 00:11:09,140
So what I'm going to do is I'm
going to take over from where

232
00:11:09,140 --> 00:11:10,830
I left off last week.

233
00:11:10,830 --> 00:11:15,700
And if you want to go ahead and
show what's on my screen.

234
00:11:15,700 --> 00:11:17,680
MALE SPEAKER 3: All right, so
Paul your screen is up.

235
00:11:17,680 --> 00:11:19,605
Everybody can see your
screen right now.

236
00:11:19,605 --> 00:11:20,190
PAUL LEWIS: OK, awesome.

237
00:11:20,190 --> 00:11:24,690
So as you can see, I'm looking
at the manifest file, which is

238
00:11:24,690 --> 00:11:27,260
pretty much the same as we
left it last week in the

239
00:11:27,260 --> 00:11:27,800
Hello, World!

240
00:11:27,800 --> 00:11:31,800
So if this is completely new to
you, you might want to see

241
00:11:31,800 --> 00:11:34,920
last week's session where we
showed Hello, World! and how

242
00:11:34,920 --> 00:11:36,991
to get that from nothing.

243
00:11:36,991 --> 00:11:38,220
And so what I'm going
to do is I'm

244
00:11:38,220 --> 00:11:41,730
starting from that position.

245
00:11:41,730 --> 00:11:44,200
What I'm going to do is I'm
going to show you how you can

246
00:11:44,200 --> 00:11:48,110
use the Chrome storage APIs in
your apps and just show you

247
00:11:48,110 --> 00:11:50,880
the minimum amount of code that
you might want to add to

248
00:11:50,880 --> 00:11:52,410
your apps, just to kind
of things going.

249
00:11:52,410 --> 00:11:55,545
So the first thing that we need
add is those permissions

250
00:11:55,545 --> 00:11:57,966
that Renato talked
about earlier.

251
00:11:57,966 --> 00:12:01,600
So permissions, and
this is an array.

252
00:12:01,600 --> 00:12:03,680
And we only need one
item in the array

253
00:12:03,680 --> 00:12:05,770
today, which is storage.

254
00:12:05,770 --> 00:12:09,520
So that means that we're telling
Chrome that this

255
00:12:09,520 --> 00:12:12,130
particular package needs
access to those APIs.

256
00:12:12,130 --> 00:12:14,080
So I'm going to do is I'm going
to switch over, and I'm

257
00:12:14,080 --> 00:12:18,400
actually going to add in
Hello Sync to Chrome.

258
00:12:18,400 --> 00:12:22,670

259
00:12:22,670 --> 00:12:24,300
I will fire that up now.

260
00:12:24,300 --> 00:12:27,150
And let's have a look here.

261
00:12:27,150 --> 00:12:30,340
There's nothing particularly
going on of interest.

262
00:12:30,340 --> 00:12:34,290
It's just a blank HTML page.

263
00:12:34,290 --> 00:12:35,850
As I said, this is where
we left last week.

264
00:12:35,850 --> 00:12:40,040
So now what we need to do is we
need to find a way to put

265
00:12:40,040 --> 00:12:43,680
data into the Storage API and
then get back out and all

266
00:12:43,680 --> 00:12:45,840
those kinds of good things.

267
00:12:45,840 --> 00:12:49,110
So let's add in, because we
don't currently have any

268
00:12:49,110 --> 00:12:49,610
JavaScript.

269
00:12:49,610 --> 00:12:51,620
Now, if you remember from last
week, we couldn't have any

270
00:12:51,620 --> 00:12:54,870
inline JavaScript
because of CSP.

271
00:12:54,870 --> 00:12:59,470
So we're going to have
a separate app.js.

272
00:12:59,470 --> 00:13:01,355
And you can call that whatever
you like, it

273
00:13:01,355 --> 00:13:01,935
doesn't have to be that.

274
00:13:01,935 --> 00:13:05,600
I'm just going to go
with that for me.

275
00:13:05,600 --> 00:13:10,111
And I've taken the liberty of
creating that file elsewhere,

276
00:13:10,111 --> 00:13:11,610
which you can see over here.

277
00:13:11,610 --> 00:13:12,630
But it's completely empty
at the moment.

278
00:13:12,630 --> 00:13:16,700
Anyway, we haven't got any means
of putting stuff into

279
00:13:16,700 --> 00:13:20,290
the storage, so we just
need to create a form.

280
00:13:20,290 --> 00:13:24,120
We'll just put a single
input tag on that.

281
00:13:24,120 --> 00:13:26,900
So input, let's put a
placeholder in there.

282
00:13:26,900 --> 00:13:30,748

283
00:13:30,748 --> 00:13:33,540
Now let's go ahead and
enter a value.

284
00:13:33,540 --> 00:13:36,740
And give it an ID.

285
00:13:36,740 --> 00:13:40,120

286
00:13:40,120 --> 00:13:43,780
OK, and then what we want to
do is we also want output

287
00:13:43,780 --> 00:13:45,210
whatever the current value is.

288
00:13:45,210 --> 00:13:50,590
So we're going use
a text area.

289
00:13:50,590 --> 00:13:53,200
We're going to say
id="value-out".

290
00:13:53,200 --> 00:13:55,610
So we have an in and an out that
we're going to access via

291
00:13:55,610 --> 00:13:56,670
JavaScript.

292
00:13:56,670 --> 00:13:59,200
We're going to take the value
in that is stored in the

293
00:13:59,200 --> 00:14:00,890
Chrome Storage API and then
we're going to spit out

294
00:14:00,890 --> 00:14:04,700
whatever the current value
is back out into the

295
00:14:04,700 --> 00:14:07,560
value out text area.

296
00:14:07,560 --> 00:14:10,480
So over in app.js, now this is
where we're actually going to

297
00:14:10,480 --> 00:14:13,500
start talking to the APIs.

298
00:14:13,500 --> 00:14:19,240
So we'll fire a new
[INAUDIBLE].

299
00:14:19,240 --> 00:14:21,160
MALE SPEAKER 3: Hey, Paul, I
want to interrupt for one sec.

300
00:14:21,160 --> 00:14:23,820
There was a question that came
up last week that it got

301
00:14:23,820 --> 00:14:26,980
answered in the questions, but
I want to ask it of you now.

302
00:14:26,980 --> 00:14:29,890
What's that editor that
you're using there?

303
00:14:29,890 --> 00:14:31,710
PAUL LEWIS: It's
Sublime Text 2.

304
00:14:31,710 --> 00:14:32,610
MALE SPEAKER 3: Awesome.

305
00:14:32,610 --> 00:14:33,960
OK.

306
00:14:33,960 --> 00:14:37,140
PAUL LEWIS: Yeah, it's a
really handy editor.

307
00:14:37,140 --> 00:14:40,610
I mean, you'll see as well
when I'm typing the code.

308
00:14:40,610 --> 00:14:44,250
You see those white lines around
the code, hopefully.

309
00:14:44,250 --> 00:14:44,780
MALE SPEAKER 3: Yup.

310
00:14:44,780 --> 00:14:46,490
PAUL LEWIS: It's a really
useful feature of this

311
00:14:46,490 --> 00:14:49,060
particular ID is that you could
have inline linting,

312
00:14:49,060 --> 00:14:50,630
which means you can write
the JavaScript

313
00:14:50,630 --> 00:14:53,980
code for free, almost.

314
00:14:53,980 --> 00:14:57,050
So, carrying on, what I'm going
to do is I'm going to

315
00:14:57,050 --> 00:15:00,470
get a hold of those two
elements-- the input elements

316
00:15:00,470 --> 00:15:02,020
and the text area.

317
00:15:02,020 --> 00:15:03,270
So let's go ahead
and do that--

318
00:15:03,270 --> 00:15:07,134

319
00:15:07,134 --> 00:15:12,570
element by ID, and value
in, and value out.

320
00:15:12,570 --> 00:15:20,130

321
00:15:20,130 --> 00:15:22,860
I always find it interesting how
many mistakes I make when

322
00:15:22,860 --> 00:15:29,250
typing, almost costly
mistakes.

323
00:15:29,250 --> 00:15:32,610
MALE SPEAKER 3: That's almost
always the case isn't it?

324
00:15:32,610 --> 00:15:33,930
PAUL LEWIS: Certainly in
my case it is, yeah.

325
00:15:33,930 --> 00:15:41,150

326
00:15:41,150 --> 00:15:43,050
Sorry, give me a second.

327
00:15:43,050 --> 00:15:44,300
MALE SPEAKER 3: Uh-oh.

328
00:15:44,300 --> 00:15:47,680
PAUL LEWIS: Yeah, I need
to just drop out.

329
00:15:47,680 --> 00:15:49,380
Can you switch back
to my screen?

330
00:15:49,380 --> 00:15:51,230
MALE SPEAKER 3: Your screen's
still there, so they should

331
00:15:51,230 --> 00:15:52,950
still be able to see that.

332
00:15:52,950 --> 00:15:55,590
PAUL LEWIS: OK.

333
00:15:55,590 --> 00:15:59,070
OK, great.

334
00:15:59,070 --> 00:16:02,660
And then what I'm going to do
is I'm just going to do a

335
00:16:02,660 --> 00:16:03,940
valueChanged function.

336
00:16:03,940 --> 00:16:09,440
So whatever the value change
is we're going to set the

337
00:16:09,440 --> 00:16:13,620
value out in a text to
be that new value.

338
00:16:13,620 --> 00:16:15,490
So this is going to be a useful
helper function that

339
00:16:15,490 --> 00:16:18,430
we're going to fire off whenever
the value changes,

340
00:16:18,430 --> 00:16:20,640
either internally or externally
to our app.

341
00:16:20,640 --> 00:16:23,070
If you remember, we talked about
when the app changes

342
00:16:23,070 --> 00:16:23,580
externally.

343
00:16:23,580 --> 00:16:26,770
So if you change a value on your
machine, we're just going

344
00:16:26,770 --> 00:16:28,640
to call this value
change function.

345
00:16:28,640 --> 00:16:31,050
So that's sitting there,
helping us.

346
00:16:31,050 --> 00:16:32,520
And what we need to
do is we need to

347
00:16:32,520 --> 00:16:38,810
actually track the changes.

348
00:16:38,810 --> 00:16:41,840
The form element that I put into
the page, I'm just going

349
00:16:41,840 --> 00:16:45,520
to track on to the submit
event there.

350
00:16:45,520 --> 00:16:50,520
And let's fire that off.

351
00:16:50,520 --> 00:16:53,960
And what we're going to do is
we're going to say when this

352
00:16:53,960 --> 00:17:01,690
happens, let's grab the value
from the value in.

353
00:17:01,690 --> 00:17:05,619
We need to make sure that
because form submission isn't

354
00:17:05,619 --> 00:17:13,270
valid in packaged apps, we need
to prevent the default

355
00:17:13,270 --> 00:17:16,000
action of the submit So that
stops that from happening.

356
00:17:16,000 --> 00:17:19,210
So all we're interested in is
what's the value update?

357
00:17:19,210 --> 00:17:21,660
And then this is the
fun bit now--

358
00:17:21,660 --> 00:17:23,060
storage.sync.

359
00:17:23,060 --> 00:17:26,329
So we're going to do this
on the sync storage API.

360
00:17:26,329 --> 00:17:32,620
And what we do is we set an
object as the first parameter,

361
00:17:32,620 --> 00:17:36,200
which going to give it value.

362
00:17:36,200 --> 00:17:38,310
What I'm going to do as well is
I'm actually going to store

363
00:17:38,310 --> 00:17:42,380
its time stamp just for my
own interest, which is to

364
00:17:42,380 --> 00:17:47,460
basically say, I want you to set
my value, which is sort of

365
00:17:47,460 --> 00:17:48,510
[? a curve ?] values.

366
00:17:48,510 --> 00:17:49,240
And then--

367
00:17:49,240 --> 00:17:50,080
MALE SPEAKER 3: So we're going
to add a time stamp?

368
00:17:50,080 --> 00:17:51,450
PAUL LEWIS: --asychronous.

369
00:17:51,450 --> 00:17:53,510
This is an asynchronous API.

370
00:17:53,510 --> 00:17:54,500
MALE SPEAKER 3: OK.

371
00:17:54,500 --> 00:18:01,280
PAUL LEWIS: So I'm just going
to say that when this is

372
00:18:01,280 --> 00:18:03,380
completed, I would like to know
about it through just a

373
00:18:03,380 --> 00:18:04,830
console log event.

374
00:18:04,830 --> 00:18:08,160
So this should capture now,
whenever I submit the form.

375
00:18:08,160 --> 00:18:09,740
MALE SPEAKER 3: Sweet, OK.

376
00:18:09,740 --> 00:18:10,560
PAUL LEWIS: OK.

377
00:18:10,560 --> 00:18:14,300
So now the other thing is OK,
well, we can send stuff out,

378
00:18:14,300 --> 00:18:15,685
but we want to know when
things have changed.

379
00:18:15,685 --> 00:18:18,800

380
00:18:18,800 --> 00:18:22,620
And this is the event that
Renato mentioned earlier,

381
00:18:22,620 --> 00:18:26,320
which is the on changed.

382
00:18:26,320 --> 00:18:29,402
Nope add listener, not add event
listener, add listener,

383
00:18:29,402 --> 00:18:31,860
there we go.

384
00:18:31,860 --> 00:18:32,910
And that's going to
take a function.

385
00:18:32,910 --> 00:18:37,960
Again, this is an async API.

386
00:18:37,960 --> 00:18:42,700
Now, the callback for this
takes two perimeters--

387
00:18:42,700 --> 00:18:45,210
changes and name space.

388
00:18:45,210 --> 00:18:47,355
And the second one is the
interesting one, because from

389
00:18:47,355 --> 00:18:50,290
the eagle eye, the long view,
you will notice that it's on

390
00:18:50,290 --> 00:18:54,260
Chrome.storage, this on change
that we're listening for.

391
00:18:54,260 --> 00:18:54,700
[INAUDIBLE]

392
00:18:54,700 --> 00:18:58,170
Chrome.storage.sync or
Chrome.storage.local.

393
00:18:58,170 --> 00:19:00,450
And the name space will actually
tell you whether this

394
00:19:00,450 --> 00:19:03,500
is a change that's happened
in sync or in local.

395
00:19:03,500 --> 00:19:06,140
So you might need to distinguish
between the two.

396
00:19:06,140 --> 00:19:08,310
And if you do, that's what
the name space is for.

397
00:19:08,310 --> 00:19:10,920
MALE SPEAKER 3: So will name
space be storage or local?

398
00:19:10,920 --> 00:19:11,530
Or will it be--

399
00:19:11,530 --> 00:19:14,100
PAUL LEWIS: It will
be sync or local.

400
00:19:14,100 --> 00:19:15,870
MALE SPEAKER 3: Sync
or local, OK.

401
00:19:15,870 --> 00:19:18,920
PAUL LEWIS: So what I'm going
to do is I'm just going to

402
00:19:18,920 --> 00:19:21,536
check for my value, because
that's what I

403
00:19:21,536 --> 00:19:23,180
was setting up here.

404
00:19:23,180 --> 00:19:26,790
So if I have that then I will
want to call that helper

405
00:19:26,790 --> 00:19:33,420
function valueChanged with
changes.myValue, a and then

406
00:19:33,420 --> 00:19:36,250
interestingly, the new
value property.

407
00:19:36,250 --> 00:19:37,900
Now, you maybe wondering,
hang on, where did

408
00:19:37,900 --> 00:19:39,310
newValue come from?

409
00:19:39,310 --> 00:19:42,790
One of the things about the
changes object that comes in

410
00:19:42,790 --> 00:19:45,870
is that myValue will actually
have two properties, newValue

411
00:19:45,870 --> 00:19:46,760
and oldValue.

412
00:19:46,760 --> 00:19:50,060
So if you need to find out what
it changed from, that's

413
00:19:50,060 --> 00:19:52,230
what oldValue will have, and
newValue will have your new

414
00:19:52,230 --> 00:19:54,320
value, pretty much what
it says on the tin.

415
00:19:54,320 --> 00:19:56,410
But it's worth knowing that you
can have access to what it

416
00:19:56,410 --> 00:19:58,980
was and and what it isn't in
case you to do some other

417
00:19:58,980 --> 00:20:00,160
calculations in that.

418
00:20:00,160 --> 00:20:01,700
MALE SPEAKER 3: Yeah, so that
would be really good if you

419
00:20:01,700 --> 00:20:06,440
needed to do any kind of like
synchronization and sort of

420
00:20:06,440 --> 00:20:08,810
like, oh, well, they changed
this on this machine and this

421
00:20:08,810 --> 00:20:12,030
on this machine, and this was
the only like thing that

422
00:20:12,030 --> 00:20:13,400
actually changed.

423
00:20:13,400 --> 00:20:16,650
PAUL LEWIS: Yeah, and if it's
like, oh, this change actually

424
00:20:16,650 --> 00:20:20,320
has implications because you
change from this to this, then

425
00:20:20,320 --> 00:20:22,830
having access to what it
was is extremely useful

426
00:20:22,830 --> 00:20:24,730
in those use cases.

427
00:20:24,730 --> 00:20:28,450
And then the last thing that we
need to do now that we're

428
00:20:28,450 --> 00:20:31,750
running for changes and we're
submitting changes.

429
00:20:31,750 --> 00:20:33,940
The last thing we do need to do
is just kind of kick this

430
00:20:33,940 --> 00:20:35,840
whole thing off and say, well,
what is the current value?

431
00:20:35,840 --> 00:20:37,835
So what we can do is we can say,
Chrome.storage.sync.get.

432
00:20:37,835 --> 00:20:41,880

433
00:20:41,880 --> 00:20:45,320
And we're going to
ask for myValue.

434
00:20:45,320 --> 00:20:47,320
So we can pause there-- and
I'll show you this in a

435
00:20:47,320 --> 00:20:51,520
second-- but we can ask for a
string, which is a specific

436
00:20:51,520 --> 00:20:53,870
key from the object
that we set.

437
00:20:53,870 --> 00:20:56,700
Or we can pass through an array,
which allows us to

438
00:20:56,700 --> 00:20:58,840
request multiple items.

439
00:20:58,840 --> 00:21:00,350
So I'm going to get back.

440
00:21:00,350 --> 00:21:03,810
Again, this is an async cause,
so again, I can result.

441
00:21:03,810 --> 00:21:07,650
RENATO MANGINI: And also, Paul,
if you pass it new, you

442
00:21:07,650 --> 00:21:11,130
get the whole storage,
all the keys.

443
00:21:11,130 --> 00:21:12,380
PAUL LEWIS: There you go.

444
00:21:12,380 --> 00:21:14,880

445
00:21:14,880 --> 00:21:18,150
So it's containing the
properties that I requested,

446
00:21:18,150 --> 00:21:20,840
and very much like before, I'm
going to pass that through to

447
00:21:20,840 --> 00:21:24,690
my valueChanged, which should
hopefully spit it out now,

448
00:21:24,690 --> 00:21:29,150
unless I've made a colossal
mistake, hopefully--

449
00:21:29,150 --> 00:21:31,085
MALE SPEAKER 3: All right,
we're into the big test.

450
00:21:31,085 --> 00:21:31,940
It's always fun.

451
00:21:31,940 --> 00:21:33,960
PAUL LEWIS: It's currently
undefined, because I don't

452
00:21:33,960 --> 00:21:35,660
actually have a value
in there.

453
00:21:35,660 --> 00:21:39,990
So if I say myValue, they're
going to see My Value set.

454
00:21:39,990 --> 00:21:44,490
OK, now if I were to close
this out and hopefully

455
00:21:44,490 --> 00:21:48,490
relaunch it, you see that it's
actually restored My Value,

456
00:21:48,490 --> 00:21:49,290
based on this set.

457
00:21:49,290 --> 00:21:51,880
So that is really it.

458
00:21:51,880 --> 00:21:53,830
That's actually stored
up remotely.

459
00:21:53,830 --> 00:21:57,120
Now what we actually wanted
to do was to show you this

460
00:21:57,120 --> 00:21:59,530
actually working across
multiple machines.

461
00:21:59,530 --> 00:22:01,840
So what we've taken the liberty
of doing is you'll

462
00:22:01,840 --> 00:22:04,890
find there's new sample
on the GitHub repo

463
00:22:04,890 --> 00:22:06,970
called Hello World Sync.

464
00:22:06,970 --> 00:22:11,810
MALE SPEAKER 3: All right, let
me bring up the link for that.

465
00:22:11,810 --> 00:22:15,400
So people should be able to
see that on the screen.

466
00:22:15,400 --> 00:22:21,810
You can go to goo.gl/AP4Sy
is the URL for that.

467
00:22:21,810 --> 00:22:26,780
And it's capital A capital P 4
capital S and then the letter

468
00:22:26,780 --> 00:22:29,100
y in lowercase.

469
00:22:29,100 --> 00:22:30,060
PAUL LEWIS: OK, awesome.

470
00:22:30,060 --> 00:22:33,900
So if you can see on my screen,
I have the syncable

471
00:22:33,900 --> 00:22:36,560
storage app open.

472
00:22:36,560 --> 00:22:38,590
Renato, do you have it up
on your screen as well?

473
00:22:38,590 --> 00:22:40,240
RENATO MANGINI: Yes, I do.

474
00:22:40,240 --> 00:22:40,860
PAUL LEWIS: OK, awesome.

475
00:22:40,860 --> 00:22:43,480
So Renato and I both
have this app open.

476
00:22:43,480 --> 00:22:46,480
We're both signed in under
a test account.

477
00:22:46,480 --> 00:22:51,410
So as far as Chrome is
concerned, we're sort of

478
00:22:51,410 --> 00:22:52,530
hooked up together.

479
00:22:52,530 --> 00:22:57,355
So I'm going to change this
value to Chrome Apps Rock.

480
00:22:57,355 --> 00:22:58,530
And I'm going to change that.

481
00:22:58,530 --> 00:23:00,360
And hopefully that change is
going to be reflected on

482
00:23:00,360 --> 00:23:01,370
Renato's side.

483
00:23:01,370 --> 00:23:03,385
RENATO MANGINI: Yes,
it did, sir.

484
00:23:03,385 --> 00:23:05,330
PAUL LEWIS: OK, and that's all
the way to Brazil, so the

485
00:23:05,330 --> 00:23:07,030
internet pipes are
working today.

486
00:23:07,030 --> 00:23:10,030

487
00:23:10,030 --> 00:23:14,220
RENATO MANGINI: And then I
just changed it again.

488
00:23:14,220 --> 00:23:14,845
PAUL LEWIS: Yes, it did.

489
00:23:14,845 --> 00:23:16,744
RENATO MANGINI: And hopefully
you get--

490
00:23:16,744 --> 00:23:18,970
PAUL LEWIS: So you can see
how easy this code is to

491
00:23:18,970 --> 00:23:24,020
integrate, and to use, and
to store simple values.

492
00:23:24,020 --> 00:23:25,820
So there you go.

493
00:23:25,820 --> 00:23:29,120
RENATO MANGINI: You might take
note that we are both logged

494
00:23:29,120 --> 00:23:31,180
in with the same user.

495
00:23:31,180 --> 00:23:31,620
PAUL LEWIS: Yes.

496
00:23:31,620 --> 00:23:34,010
PAUL LEWIS: It wouldn't
work if we were

497
00:23:34,010 --> 00:23:36,510
different users, of course.

498
00:23:36,510 --> 00:23:37,890
It's important to note.

499
00:23:37,890 --> 00:23:39,380
PAUL LEWIS: It is very
important to note.

500
00:23:39,380 --> 00:23:43,660
It's a combination of the app
itself, of course, and the

501
00:23:43,660 --> 00:23:48,120
user that you're logged
in as into Chrome.

502
00:23:48,120 --> 00:23:51,350
All right, so that is this
week's demo done.

503
00:23:51,350 --> 00:23:51,970
MALE SPEAKER 3: Awesome.

504
00:23:51,970 --> 00:23:56,090
All right, so let's bring up
the URL for that again so

505
00:23:56,090 --> 00:23:59,530
people can find that
if they go to--

506
00:23:59,530 --> 00:24:03,770
actually, let's bring link for
the storage documentation, if

507
00:24:03,770 --> 00:24:05,820
you're looking for the
documentation on the storage

508
00:24:05,820 --> 00:24:11,950
APIs, goo.gl/oXODY.

509
00:24:11,950 --> 00:24:13,850
You can see the capitalization
there.

510
00:24:13,850 --> 00:24:17,040
It's small o, everything
else is capital.

511
00:24:17,040 --> 00:24:20,710
If you want to go and have a
look at the storage Hello

512
00:24:20,710 --> 00:24:24,870
World Sync that Paul just wrote
and showed you syncing

513
00:24:24,870 --> 00:24:28,470
between Paul and Renato from
London all the way down to

514
00:24:28,470 --> 00:24:32,750
Brazil, you can grab that
just there at the

515
00:24:32,750 --> 00:24:35,770
URL shown on screen.

516
00:24:35,770 --> 00:24:38,720
And as a reminder, one of the
other places where you can

517
00:24:38,720 --> 00:24:42,170
always go to get any of our
Chrome app samples is the

518
00:24:42,170 --> 00:24:44,860
Chrome app sample site,
which is up on GitHub.

519
00:24:44,860 --> 00:24:45,990
The link is there.

520
00:24:45,990 --> 00:24:51,090
Capital G, little m, capital
U, capital X, small t.

521
00:24:51,090 --> 00:24:55,090
So you can go grab those
and go from there.

522
00:24:55,090 --> 00:24:58,960
So from there, let's take
some questions.

523
00:24:58,960 --> 00:25:00,400
Last week we didn't
get enough time

524
00:25:00,400 --> 00:25:01,530
for all of your questions.

525
00:25:01,530 --> 00:25:04,170
So this week we wanted [? to ?]
put aside a bunch of

526
00:25:04,170 --> 00:25:06,170
extra time for your questions,
so that you

527
00:25:06,170 --> 00:25:08,370
could ask your questions.

528
00:25:08,370 --> 00:25:11,450
If you have questions that you
want to submit, you can go and

529
00:25:11,450 --> 00:25:14,790
submit them on moderator, either
through the Google

530
00:25:14,790 --> 00:25:22,700
Developers Live site or by
going to goo.gl/klubW--

531
00:25:22,700 --> 00:25:26,490
so klub W. I kind of want to
make a bad joke about that,

532
00:25:26,490 --> 00:25:28,930
but I won't.

533
00:25:28,930 --> 00:25:33,590
And I'm getting at least a
little giggle out of Paul.

534
00:25:33,590 --> 00:25:38,210
So with that, I'm going to take
that off screen for sec,

535
00:25:38,210 --> 00:25:41,080
because it's covering
me up nicely.

536
00:25:41,080 --> 00:25:44,330
And let's take look at some
of the questions.

537
00:25:44,330 --> 00:25:47,200
All right, so these are your
questions, and I'm looking at

538
00:25:47,200 --> 00:25:49,350
them here on moderator.

539
00:25:49,350 --> 00:25:52,500
And the first question, "I have
an app which should only

540
00:25:52,500 --> 00:25:55,910
be available for a small group
of people, but now I'm forced

541
00:25:55,910 --> 00:25:58,090
to publish it through the Chrome
Web Store to avoid

542
00:25:58,090 --> 00:25:59,200
errors in warning.

543
00:25:59,200 --> 00:26:03,170
Is there really no other way?"
And this is from Russell.

544
00:26:03,170 --> 00:26:06,610
Renato, do you want
to take this one?

545
00:26:06,610 --> 00:26:07,860
RENATO MANGINI: Yes, sure.

546
00:26:07,860 --> 00:26:12,520

547
00:26:12,520 --> 00:26:16,490
It's possible to use
the Chrome Web

548
00:26:16,490 --> 00:26:20,765
Store inside the domain.

549
00:26:20,765 --> 00:26:26,180
I would ask you to check with
the Chrome Web Store team and

550
00:26:26,180 --> 00:26:28,900
to check on documentation,
how to do that.

551
00:26:28,900 --> 00:26:34,510
But currently, you cannot
publish a packaged app on the

552
00:26:34,510 --> 00:26:35,230
Chrome Web Store.

553
00:26:35,230 --> 00:26:38,530
So the store's not complete yet,
on the Chrome Web Store

554
00:26:38,530 --> 00:26:39,730
for packaged apps.

555
00:26:39,730 --> 00:26:43,090
MALE SPEAKER 3: That's for the
new evolved package apps.

556
00:26:43,090 --> 00:26:46,700
For legacy packaged apps, for
the existing packaged apps,

557
00:26:46,700 --> 00:26:49,230
you can still publish,
correct?

558
00:26:49,230 --> 00:26:50,520
RENATO MANGINI: Yes,
absolutely.

559
00:26:50,520 --> 00:26:51,990
MALE SPEAKER 3: OK.

560
00:26:51,990 --> 00:26:56,130
And then just to reiterate what
Renato said there, if

561
00:26:56,130 --> 00:26:58,920
you're publishing an app and you
only want it available to

562
00:26:58,920 --> 00:27:04,570
a small group of people, you can
do that through the Google

563
00:27:04,570 --> 00:27:05,610
Apps account.

564
00:27:05,610 --> 00:27:08,040
So you need to set up a Google
Apps account for your domain,

565
00:27:08,040 --> 00:27:09,236
and then you can
do it that way.

566
00:27:09,236 --> 00:27:11,210
RENATO MANGINI: Yeah, there are
series of frustrations.

567
00:27:11,210 --> 00:27:12,740
They are describe it on
the documentation

568
00:27:12,740 --> 00:27:14,030
of Chrome Web Store.

569
00:27:14,030 --> 00:27:14,790
MALE SPEAKER 3: OK.

570
00:27:14,790 --> 00:27:18,590
RENATO MANGINI: But you can
do it in some cases.

571
00:27:18,590 --> 00:27:19,030
MALE SPEAKER 3: Cool.

572
00:27:19,030 --> 00:27:20,660
All right.

573
00:27:20,660 --> 00:27:23,790
So the next question, "Any way
to update your Chrome app

574
00:27:23,790 --> 00:27:25,710
manually, like the
user's notified

575
00:27:25,710 --> 00:27:27,380
that there's an update?

576
00:27:27,380 --> 00:27:31,100
And also is there any way you
can add features like feedback

577
00:27:31,100 --> 00:27:36,342
from users?" Paul, do you
want to take this one?

578
00:27:36,342 --> 00:27:41,210
PAUL LEWIS: Sure, I mean, right
now there isn't a way to

579
00:27:41,210 --> 00:27:44,090
update the Chrome
App manually.

580
00:27:44,090 --> 00:27:47,150
I think it's great feedback,
and we appreciate it.

581
00:27:47,150 --> 00:27:53,320
So we'd recommend that you file
a request with that in.

582
00:27:53,320 --> 00:27:58,230
And the same thing for the
feedback from users, if it's

583
00:27:58,230 --> 00:28:03,560
in app, you could consider
requests server-side, but

584
00:28:03,560 --> 00:28:05,710
obviously we'd recommend
you do offline first,

585
00:28:05,710 --> 00:28:07,370
of course, as always.

586
00:28:07,370 --> 00:28:13,570
But certainly, we don't have
any announcements on

587
00:28:13,570 --> 00:28:15,943
integrated feedback
in tier apps.

588
00:28:15,943 --> 00:28:17,170
RENATO MANGINI: Yeah.

589
00:28:17,170 --> 00:28:19,150
Can I complete your answer?

590
00:28:19,150 --> 00:28:21,500
PAUL LEWIS: Of course you can.

591
00:28:21,500 --> 00:28:24,720
RENATO MANGINI: Regarding
feedback from users, we have

592
00:28:24,720 --> 00:28:28,630
the full feedback assistant
on the Chrome Web Store.

593
00:28:28,630 --> 00:28:34,590
So when you publish your app,
you have to review and you

594
00:28:34,590 --> 00:28:37,530
have the feedback option on the
Chrome Web Store that was

595
00:28:37,530 --> 00:28:40,200
launched I think one month
or two months ago.

596
00:28:40,200 --> 00:28:41,720
It's really new, I think.

597
00:28:41,720 --> 00:28:45,910
It's the same for extensions
for legacy and hosted apps.

598
00:28:45,910 --> 00:28:52,360
And also, we are talking about
a better integration on

599
00:28:52,360 --> 00:28:56,360
feedback and mechanisms and
APIs and et cetera.

600
00:28:56,360 --> 00:28:58,060
But it's not there yet.

601
00:28:58,060 --> 00:29:03,350
So for now or for the moment,
you upload your Chrome apps,

602
00:29:03,350 --> 00:29:07,450
packaged apps, you can use the
current Chrome Web Store

603
00:29:07,450 --> 00:29:09,860
feedback system.

604
00:29:09,860 --> 00:29:10,240
MALE SPEAKER 3: Cool.

605
00:29:10,240 --> 00:29:15,080
And might as well jump in on
this, there are a bunch of

606
00:29:15,080 --> 00:29:19,200
great web apps and web
development tools out there

607
00:29:19,200 --> 00:29:21,940
that will allow you to add that
to your existing site.

608
00:29:21,940 --> 00:29:24,210
So they add is just sort
of like a little bit of

609
00:29:24,210 --> 00:29:25,800
JavaScript that you
add to your page,

610
00:29:25,800 --> 00:29:27,060
and they go do that.

611
00:29:27,060 --> 00:29:30,450
Now with those, you're going to
need to play carefully with

612
00:29:30,450 --> 00:29:33,410
some of those because they may
not necessarily work exactly

613
00:29:33,410 --> 00:29:35,720
as you'd expect in a Chrome
packaged app because of the

614
00:29:35,720 --> 00:29:37,580
Content Security Policy
restrictions.

615
00:29:37,580 --> 00:29:41,580
But they're at least
worth a look at.

616
00:29:41,580 --> 00:29:44,860
So I'm going to take this next
question, only because it's a

617
00:29:44,860 --> 00:29:46,520
kind of fun question to take.

618
00:29:46,520 --> 00:29:49,190
We're missing one of our
favorite, favorite team

619
00:29:49,190 --> 00:29:52,100
members here right now.

620
00:29:52,100 --> 00:29:55,465
Paul Kinlan is not with us, so
I'm going to channel Paul

621
00:29:55,465 --> 00:29:57,750
Kinlan for this question.

622
00:29:57,750 --> 00:30:00,770
"So let's say I've implemented
a simple text editor as a

623
00:30:00,770 --> 00:30:02,440
Chrome packaged app.

624
00:30:02,440 --> 00:30:06,040
Is there any way to expose
this app in the open-with

625
00:30:06,040 --> 00:30:08,900
context menu that shows up when
the user right clicks on

626
00:30:08,900 --> 00:30:11,250
a text file in file manager?"

627
00:30:11,250 --> 00:30:15,200
And the cool thing is,
"snitsyboo," or also known as

628
00:30:15,200 --> 00:30:16,450
web intents--

629
00:30:16,450 --> 00:30:19,100

630
00:30:19,100 --> 00:30:21,700
he's not allowed to say web
intents anymore, because he's

631
00:30:21,700 --> 00:30:23,640
just so focused on
web intents--

632
00:30:23,640 --> 00:30:27,090
but with the web intents, you
can actually say these types

633
00:30:27,090 --> 00:30:31,250
of files are able to be handled
by this application so

634
00:30:31,250 --> 00:30:35,870
that your Chrome packaged app
can open whatever type of file

635
00:30:35,870 --> 00:30:37,890
that you want to be
able to open.

636
00:30:37,890 --> 00:30:40,260
So you're pretty much
set with that.

637
00:30:40,260 --> 00:30:43,800
I don't think it's quite enabled
in the builds yet, but

638
00:30:43,800 --> 00:30:45,130
it is something we're
working on.

639
00:30:45,130 --> 00:30:48,790
And it is made on the roadmap
for something

640
00:30:48,790 --> 00:30:51,330
we're going to do.

641
00:30:51,330 --> 00:30:52,330
PAUL LEWIS: Awesome.

642
00:30:52,330 --> 00:30:54,090
MALE SPEAKER 3: Cool.

643
00:30:54,090 --> 00:30:56,940
"Will apps introduce additional
features for

644
00:30:56,940 --> 00:30:58,570
platform integration?

645
00:30:58,570 --> 00:31:01,280
I want my app to look and
feel native." Now

646
00:31:01,280 --> 00:31:03,210
this is from Russell.

647
00:31:03,210 --> 00:31:04,300
Paul, do you want to
take this one?

648
00:31:04,300 --> 00:31:04,765
PAUL LEWIS: Yeah.

649
00:31:04,765 --> 00:31:10,860
Yeah, so when you say look and
feel native, certainly we're

650
00:31:10,860 --> 00:31:15,310
looking to do things like if
you talk about task manager

651
00:31:15,310 --> 00:31:21,870
type stuff and alt-tab type
behaviors, that's definitely

652
00:31:21,870 --> 00:31:25,645
something that we're working
hard to get in place so that

653
00:31:25,645 --> 00:31:29,610
these apps, it's not sort of
necessarily launched from

654
00:31:29,610 --> 00:31:34,540
Chrome, and that it feels like
it's sitting alongside the

655
00:31:34,540 --> 00:31:37,980
native apps that you
guys are building.

656
00:31:37,980 --> 00:31:40,940
In terms of the look and feel,
ultimately this is the Chrome

657
00:31:40,940 --> 00:31:46,410
runtime and the browser
has the crafting

658
00:31:46,410 --> 00:31:48,520
the look and feel.

659
00:31:48,520 --> 00:31:51,950
Obviously things like web
components as they come down

660
00:31:51,950 --> 00:31:57,470
the line, they may enable you to
build the look and feel of

661
00:31:57,470 --> 00:31:58,050
[INAUDIBLE]

662
00:31:58,050 --> 00:31:59,140
differently.

663
00:31:59,140 --> 00:32:02,860
But as you'd expect from
your normal web--

664
00:32:02,860 --> 00:32:06,860
RENATO MANGINI: Allows you to do
whatever you want with the

665
00:32:06,860 --> 00:32:11,020
window, including creating a
specific type of bar that

666
00:32:11,020 --> 00:32:12,710
looks like a native
application or no

667
00:32:12,710 --> 00:32:13,890
type of bar at all.

668
00:32:13,890 --> 00:32:14,910
MALE SPEAKER 3: Yeah,
that's a good point.

669
00:32:14,910 --> 00:32:18,500
So with the apps, because they
don't have the address bar

670
00:32:18,500 --> 00:32:20,630
anything like that, should
look native.

671
00:32:20,630 --> 00:32:23,790
And now it's the matter of how
you style a lot of these

672
00:32:23,790 --> 00:32:26,780
things for them to look.

673
00:32:26,780 --> 00:32:27,425
All right.

674
00:32:27,425 --> 00:32:32,100
"In Canary packaged apps, we're
not sure if we can embed

675
00:32:32,100 --> 00:32:35,840
a web app like Gmail and
expect all of its

676
00:32:35,840 --> 00:32:37,620
functionality to work right.

677
00:32:37,620 --> 00:32:41,840
Adobe AIR lets you load an
iframe from a local file and

678
00:32:41,840 --> 00:32:46,440
use a parent-child bridge for
coms." Renato, I think we

679
00:32:46,440 --> 00:32:47,500
talked about this one earlier.

680
00:32:47,500 --> 00:32:49,340
Do you want to take this one?

681
00:32:49,340 --> 00:32:50,580
RENATO MANGINI: Yes,
absolutely.

682
00:32:50,580 --> 00:32:52,860
In fact, can you share
my screen?

683
00:32:52,860 --> 00:32:55,420
MALE SPEAKER 3: Yeah,
give me one sec to

684
00:32:55,420 --> 00:32:58,130
bring up your screen.

685
00:32:58,130 --> 00:33:02,386
And I think we have your screen
up, otherwise we have--

686
00:33:02,386 --> 00:33:06,280
RENATO MANGINI: I have
the Dojo application.

687
00:33:06,280 --> 00:33:07,960
MALE SPEAKER 3: Now we
have your screen up.

688
00:33:07,960 --> 00:33:09,600
RENATO MANGINI: All right.

689
00:33:09,600 --> 00:33:09,880
OK.

690
00:33:09,880 --> 00:33:16,120
So we have two solutions for
this problem you mentioned.

691
00:33:16,120 --> 00:33:17,930
We have the browser
tag, and we have

692
00:33:17,930 --> 00:33:20,050
the sent box of iframe.

693
00:33:20,050 --> 00:33:23,600
The sent box of iframe, you
use it for part of your

694
00:33:23,600 --> 00:33:28,460
application that you want to run
stuff that cannot run on

695
00:33:28,460 --> 00:33:33,920
application itself, like eval,
or new function, or dynamic

696
00:33:33,920 --> 00:33:37,280
JavaScript, so other ways
of [INAUDIBLE] scripts.

697
00:33:37,280 --> 00:33:39,350
And the browser tag, I think
it's more appropriate

698
00:33:39,350 --> 00:33:41,200
for what you want.

699
00:33:41,200 --> 00:33:42,700
And we have this sample.

700
00:33:42,700 --> 00:33:44,920
It's on the GitHub Web Store.

701
00:33:44,920 --> 00:33:46,620
It's called the browser tag.

702
00:33:46,620 --> 00:33:52,130
And what it does, and I execute
it, this is the Chrome

703
00:33:52,130 --> 00:33:55,150
packaged app.

704
00:33:55,150 --> 00:33:57,640
It looks like a browser.

705
00:33:57,640 --> 00:34:10,210
And if I go to Gmail, I can
actually open Gmail inside the

706
00:34:10,210 --> 00:34:10,750
packaged app.

707
00:34:10,750 --> 00:34:14,800
So yeah, it does exactly
what you mentioned.

708
00:34:14,800 --> 00:34:17,530
I think this is what
you were expecting.

709
00:34:17,530 --> 00:34:20,010
If not, please send another
question or

710
00:34:20,010 --> 00:34:21,564
comment on the question.

711
00:34:21,564 --> 00:34:22,370
All right?

712
00:34:22,370 --> 00:34:24,690
And the code for the sample
is also available.

713
00:34:24,690 --> 00:34:26,989
You can look how it's done.

714
00:34:26,989 --> 00:34:29,920
It's pretty simple.

715
00:34:29,920 --> 00:34:30,510
MALE SPEAKER 3: All right.

716
00:34:30,510 --> 00:34:30,980
Cool.

717
00:34:30,980 --> 00:34:32,139
Well, thank you.

718
00:34:32,139 --> 00:34:35,610
All right, so let's pop down
to the next question.

719
00:34:35,610 --> 00:34:38,630
"Does or will the storage
APIs support

720
00:34:38,630 --> 00:34:40,020
shared offline storage?

721
00:34:40,020 --> 00:34:43,560
For example, can a packaged app
from the same developer

722
00:34:43,560 --> 00:34:49,179
read state from other apps from
a unified offline store?"

723
00:34:49,179 --> 00:34:51,510
Renato, do you want to take
this one as well?

724
00:34:51,510 --> 00:34:55,010
RENATO MANGINI: Yeah, this is
a very good question indeed.

725
00:34:55,010 --> 00:35:01,500
And currently not, we don't
allow it now, because we use

726
00:35:01,500 --> 00:35:06,300
the application key to restrict

727
00:35:06,300 --> 00:35:09,040
your send box to storage.

728
00:35:09,040 --> 00:35:15,740
And I would ask you to post a
bug on it on crbug.com, so we

729
00:35:15,740 --> 00:35:16,990
can track it.

730
00:35:16,990 --> 00:35:19,070

731
00:35:19,070 --> 00:35:21,220
It looks like a very
common use case.

732
00:35:21,220 --> 00:35:24,540
We can discuss it with
the engineer team.

733
00:35:24,540 --> 00:35:25,920
MALE SPEAKER 3: Cool, yeah.

734
00:35:25,920 --> 00:35:27,170
All right.

735
00:35:27,170 --> 00:35:28,960

736
00:35:28,960 --> 00:35:30,600
All right, let's take
the next question.

737
00:35:30,600 --> 00:35:34,600
"Can packaged apps register
themselves as the default file

738
00:35:34,600 --> 00:35:38,850
handler for the type of file in
the external OS, either Mac

739
00:35:38,850 --> 00:35:41,870
or Windows?" So I think we
addressed this one with this

740
00:35:41,870 --> 00:35:44,540
"snitsyboo" stuff,
with web intents.

741
00:35:44,540 --> 00:35:47,760
You can register to be able to
open with or be able to handle

742
00:35:47,760 --> 00:35:51,110
a particular file type.

743
00:35:51,110 --> 00:35:54,450
If we didn't answer that,
please be sure to submit

744
00:35:54,450 --> 00:35:57,250
another question and we
can go from there.

745
00:35:57,250 --> 00:35:59,630
So the next question, "Are
packaged apps eventually

746
00:35:59,630 --> 00:36:03,460
coming to Android, so we can
write one app in HTML5 and

747
00:36:03,460 --> 00:36:07,175
have it run in the browser,
mobile, and Chrome OS?" Paul,

748
00:36:07,175 --> 00:36:09,650
do you want to take
this question?

749
00:36:09,650 --> 00:36:12,600
PAUL LEWIS: Yeah, so this has
come up the last couple of

750
00:36:12,600 --> 00:36:14,030
weeks as well.

751
00:36:14,030 --> 00:36:18,870
We're trying to get the
desktop story right.

752
00:36:18,870 --> 00:36:21,670
We don't have any announcements,
dates, times or

753
00:36:21,670 --> 00:36:26,540
anything like that, any of the
platforms at this stage.

754
00:36:26,540 --> 00:36:28,440
We understand the feedback,
and we appreciate your

755
00:36:28,440 --> 00:36:33,000
feedback that you want to
write the code once.

756
00:36:33,000 --> 00:36:36,111
And certainly it's something
we take the engineers team.

757
00:36:36,111 --> 00:36:38,220
So yeah.

758
00:36:38,220 --> 00:36:40,810
MALE SPEAKER 3: All
right, cool.

759
00:36:40,810 --> 00:36:44,040
So the next question is, "When
can I write packaged apps in

760
00:36:44,040 --> 00:36:47,390
Dart?" Well, you can
do it today.

761
00:36:47,390 --> 00:36:50,640
If you write your app in Dart
and you compile it down to

762
00:36:50,640 --> 00:36:52,860
JavaScript.

763
00:36:52,860 --> 00:36:57,160
You can't run them natively in
Dart yet, but it is something

764
00:36:57,160 --> 00:36:58,480
that the Dart team
is aware of.

765
00:36:58,480 --> 00:37:00,300
They've heard the ask.

766
00:37:00,300 --> 00:37:06,280
I'm sure there's probably a bug
in Cr Bug that's already

767
00:37:06,280 --> 00:37:06,790
been filed.

768
00:37:06,790 --> 00:37:09,940
If there isn't, go file the
bug and ask all of your

769
00:37:09,940 --> 00:37:13,520
friends to go star it, so that
the engineering team really

770
00:37:13,520 --> 00:37:18,090
sees how many people are
interested in this.

771
00:37:18,090 --> 00:37:20,910
Those kinds of things really
do help to drive the

772
00:37:20,910 --> 00:37:23,780
development of these things,
helps us to prioritize and

773
00:37:23,780 --> 00:37:27,160
understand what's going on.

774
00:37:27,160 --> 00:37:29,850
All right, so let's take
the next question.

775
00:37:29,850 --> 00:37:32,230
If you have any other questions,
please be sure to

776
00:37:32,230 --> 00:37:33,840
post them to the moderator.

777
00:37:33,840 --> 00:37:37,710
But the next question is "I
have a packaged app that

778
00:37:37,710 --> 00:37:41,170
displays generated content
in an iframe

779
00:37:41,170 --> 00:37:42,940
because of the new manifests.

780
00:37:42,940 --> 00:37:46,440
I get a Content Security Policy
error when it executes

781
00:37:46,440 --> 00:37:53,720
the JavaScript code in that
iframe." Is there any info

782
00:37:53,720 --> 00:37:56,640
that we can help with this?

783
00:37:56,640 --> 00:37:59,300

784
00:37:59,300 --> 00:38:02,000
PAUL LEWIS: It may be just
looking at this that there's

785
00:38:02,000 --> 00:38:05,600
some inline JavaScript.

786
00:38:05,600 --> 00:38:09,640
As we talked about in the demo
and last week, any JavaScript

787
00:38:09,640 --> 00:38:11,720
needs to be taken from
inline and taken out

788
00:38:11,720 --> 00:38:14,010
to a separate file.

789
00:38:14,010 --> 00:38:16,190
That may be the cause of
some of this stuff.

790
00:38:16,190 --> 00:38:19,040
It may be that the JavaScript
and the iframe is doing

791
00:38:19,040 --> 00:38:22,330
something like eval or creating
a new function.

792
00:38:22,330 --> 00:38:26,400
So I think because there are a
number of possibilities of

793
00:38:26,400 --> 00:38:29,340
what this JavaScript code is
doing or what might be that

794
00:38:29,340 --> 00:38:31,690
it's triggered.

795
00:38:31,690 --> 00:38:33,810
Post on the groups.

796
00:38:33,810 --> 00:38:39,580
We do strive to give a developer
help on there.

797
00:38:39,580 --> 00:38:42,970
And obviously community can
help you to debug whatever

798
00:38:42,970 --> 00:38:44,100
issue you're facing.

799
00:38:44,100 --> 00:38:46,730
But generally speaking, it's
definitely worth looking at

800
00:38:46,730 --> 00:38:51,300
the CSP restrictions and making
sure that your code is

801
00:38:51,300 --> 00:38:54,120
sitting inline with that.

802
00:38:54,120 --> 00:38:59,260
Because that may well be the
cause of what you're seeing.

803
00:38:59,260 --> 00:39:00,060
MALE SPEAKER 3: All right.

804
00:39:00,060 --> 00:39:03,350
Well, it looks like that's
the end of the questions.

805
00:39:03,350 --> 00:39:05,590
It's almost out of
time anyways.

806
00:39:05,590 --> 00:39:09,860
So with that we'll wrap up and
say guys, thank you very much

807
00:39:09,860 --> 00:39:10,800
for joining us.

808
00:39:10,800 --> 00:39:15,120
We'll be here again next
Tuesday, same bat time, same

809
00:39:15,120 --> 00:39:18,680
bat place, so 9:00 Pacific.

810
00:39:18,680 --> 00:39:22,210
And we look forward to talking
to you more about Chrome apps.

811
00:39:22,210 --> 00:39:27,330
Next week, Paul, Renato, I think
the plan is to dive into

812
00:39:27,330 --> 00:39:29,520
some of the sample applications
that we've

813
00:39:29,520 --> 00:39:34,100
written that really use the
storage mechanisms.

814
00:39:34,100 --> 00:39:35,720
Isn't that right?

815
00:39:35,720 --> 00:39:36,920
RENATO MANGINI: Yes, exactly.

816
00:39:36,920 --> 00:39:40,180
MALE SPEAKER 3: Yeah, so we'll
take what we learned today and

817
00:39:40,180 --> 00:39:43,480
put that to a real
practical use.

818
00:39:43,480 --> 00:39:46,610
We'll show you some really good
use cases, how to go use

819
00:39:46,610 --> 00:39:48,580
it, where it's being used.

820
00:39:48,580 --> 00:39:51,930
So that you can get those
ideas and sort of start

821
00:39:51,930 --> 00:39:53,700
forming them into your head.

822
00:39:53,700 --> 00:39:54,115
So with--

823
00:39:54,115 --> 00:39:54,845
PAUL LEWIS: Actually.

824
00:39:54,845 --> 00:39:55,160
MALE SPEAKER 3: Paul?

825
00:39:55,160 --> 00:39:57,590
PAUL LEWIS: Sorry, I'm just
going to throw in that between

826
00:39:57,590 --> 00:40:02,930
now and then, how about play
with the samples, have a go at

827
00:40:02,930 --> 00:40:08,880
coding up some of this Chrome
Storage API stuff and let us

828
00:40:08,880 --> 00:40:12,980
know in the questions if you
run into anything that is

829
00:40:12,980 --> 00:40:15,730
unexpected or whatever, and
we'll try and help you next

830
00:40:15,730 --> 00:40:17,980
week alongside looking
into those samples.

831
00:40:17,980 --> 00:40:21,050
So, take this week as an
opportunity to kind of dilute

832
00:40:21,050 --> 00:40:23,966
yourselves, and then we'll
do what we can to

833
00:40:23,966 --> 00:40:24,920
help you next week.

834
00:40:24,920 --> 00:40:25,690
MALE SPEAKER 3: Awesome.

835
00:40:25,690 --> 00:40:27,950
All right, well, everybody,
thanks so much.

836
00:40:27,950 --> 00:40:30,400
Hope you have a great week and
look forward to seeing

837
00:40:30,400 --> 00:40:31,780
everybody next week.

838
00:40:31,780 --> 00:40:33,440
Bye, guys.

839
00:40:33,440 --> 00:40:34,690
RENATO MANGINI: Bye-bye.

840
00:40:34,690 --> 00:40:40,080

