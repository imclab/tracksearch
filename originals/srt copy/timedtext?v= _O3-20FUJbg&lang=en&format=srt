1
00:00:00,000 --> 00:00:05,420

2
00:00:05,420 --> 00:00:07,120
BILL LUAN: Shanghai
GDG is a very

3
00:00:07,120 --> 00:00:09,420
interesting developer community.

4
00:00:09,420 --> 00:00:10,040
SUSANNAH RAUB: I'm
glad somebody

5
00:00:10,040 --> 00:00:11,070
has asked this question.

6
00:00:11,070 --> 00:00:12,694
RETO MEIER: This is where
the magic happens.

7
00:00:12,694 --> 00:00:13,820
JENNY MURPHY: This is primarily
a question and

8
00:00:13,820 --> 00:00:14,270
answer show.

9
00:00:14,270 --> 00:00:16,680
So if any of you out there would
like to ask questions.

10
00:00:16,680 --> 00:00:21,740

11
00:00:21,740 --> 00:00:23,800
PETE LEPAGE: Welcome,
everybody.

12
00:00:23,800 --> 00:00:27,200
This is, I think, our fourth or
fifth in the installment of

13
00:00:27,200 --> 00:00:29,570
the Chrome Apps Office Hours.

14
00:00:29,570 --> 00:00:33,170
This week, we have a really cool
event with some special

15
00:00:33,170 --> 00:00:35,260
guests who are joining us.

16
00:00:35,260 --> 00:00:39,940
This is the AngularJS team, who
was one of the first teams

17
00:00:39,940 --> 00:00:44,310
here at Google to build a Chrome
app using, obviously,

18
00:00:44,310 --> 00:00:46,970
the AngularJS framework.

19
00:00:46,970 --> 00:00:50,790
And they've learned a lot over
the last couple of months on

20
00:00:50,790 --> 00:00:53,850
how to build these things, some
of the issues they've run

21
00:00:53,850 --> 00:00:57,080
into, as well as how to
get around those.

22
00:00:57,080 --> 00:01:00,810
And really, how to build a
really cool Chrome app.

23
00:01:00,810 --> 00:01:06,045
So I'd like to introduce
Brad Green and Vojta--

24
00:01:06,045 --> 00:01:07,590
I forgot your last name.

25
00:01:07,590 --> 00:01:07,980
I apologize.

26
00:01:07,980 --> 00:01:08,310
VOJTA JINA: That's OK.

27
00:01:08,310 --> 00:01:10,544
Vojta, I think that's enough.

28
00:01:10,544 --> 00:01:11,800
PETE LEPAGE: All right.

29
00:01:11,800 --> 00:01:14,170
Brad, Vojta, why don't you guys
introduce yourselves.

30
00:01:14,170 --> 00:01:17,120
And we can talk about
TextDrive, this

31
00:01:17,120 --> 00:01:17,750
app that you guys--

32
00:01:17,750 --> 00:01:18,100
BRAD GREEN: Great.

33
00:01:18,100 --> 00:01:18,620
Great.

34
00:01:18,620 --> 00:01:19,700
So yeah, I'm Brad Green.

35
00:01:19,700 --> 00:01:22,120
I manage the AngularJS project
here at Google.

36
00:01:22,120 --> 00:01:25,530
And Vojta is one of the
engineers on the project.

37
00:01:25,530 --> 00:01:26,990
And we built this
app, TextDrive.

38
00:01:26,990 --> 00:01:28,490
It's a simple text editor.

39
00:01:28,490 --> 00:01:32,140
And it allows you to edit text,
which is actually cooler

40
00:01:32,140 --> 00:01:34,660
than you think on Chrome.

41
00:01:34,660 --> 00:01:37,490
Because if you want to edit your
CRX file without having

42
00:01:37,490 --> 00:01:41,160
to go rebuild the bundle, this
is a really cool thing to do.

43
00:01:41,160 --> 00:01:43,990
But I think it's a really
good example of

44
00:01:43,990 --> 00:01:45,200
pulling some pieces together.

45
00:01:45,200 --> 00:01:47,680
Some of these V2 APIs.

46
00:01:47,680 --> 00:01:49,600
We're showing you how you can
take really good advantage of

47
00:01:49,600 --> 00:01:51,630
them with Angular.

48
00:01:51,630 --> 00:01:53,650
So without talking too much
more, Vojta, why don't you

49
00:01:53,650 --> 00:01:54,930
take us through the
app itself.

50
00:01:54,930 --> 00:01:57,310
VOJTA JINA: Oh, sure.

51
00:01:57,310 --> 00:01:59,190
As we said, it's just
a text editor.

52
00:01:59,190 --> 00:02:06,010
So you can open files, you
can create new files--

53
00:02:06,010 --> 00:02:08,310
PETE LEPAGE: Now, I just want to
interject here for one sec.

54
00:02:08,310 --> 00:02:11,610
You can open files anywhere on
your file system, right?

55
00:02:11,610 --> 00:02:14,670
This is not just a matter of
hey, you're limited to the

56
00:02:14,670 --> 00:02:15,090
normal file system.

57
00:02:15,090 --> 00:02:17,395
No, this is my file system.

58
00:02:17,395 --> 00:02:19,450
BRAD GREEN: And just to mention,
we're using a MacBook

59
00:02:19,450 --> 00:02:21,830
here, but this works on
my Chromebook as well.

60
00:02:21,830 --> 00:02:24,160
PETE LEPAGE: Absolutely, yeah.

61
00:02:24,160 --> 00:02:24,590
VOJTA JINA: Yeah.

62
00:02:24,590 --> 00:02:29,270
So I can create new files.

63
00:02:29,270 --> 00:02:32,370
I think a really cool feature
is the searching.

64
00:02:32,370 --> 00:02:35,920
So the first thing, you
can just search.

65
00:02:35,920 --> 00:02:40,240
I can search for ng-click
or something.

66
00:02:40,240 --> 00:02:45,060
But, more than that, if you
start searching with forward

67
00:02:45,060 --> 00:02:48,900
slash, it does this like
grip-like filtering.

68
00:02:48,900 --> 00:02:52,910
So I can say ng-controller,
for instance.

69
00:02:52,910 --> 00:02:57,600
And you can see how it filters
just the lines that matches

70
00:02:57,600 --> 00:02:58,435
this regular expression.

71
00:02:58,435 --> 00:03:00,980
And I can go edit
the text, or--

72
00:03:00,980 --> 00:03:02,170
BRAD GREEN: So it collapses
all the code.

73
00:03:02,170 --> 00:03:03,395
VOJTA JINA: Yeah, it just
collapsed it, so I can--

74
00:03:03,395 --> 00:03:04,645
[INTERPOSING VOICES]

75
00:03:04,645 --> 00:03:07,030

76
00:03:07,030 --> 00:03:08,940
PETE LEPAGE: And it's
not just text.

77
00:03:08,940 --> 00:03:11,580
But you've also got some
things in there so that

78
00:03:11,580 --> 00:03:13,920
editing code becomes that
much easier as well.

79
00:03:13,920 --> 00:03:14,820
VOJTA JINA: Yes.

80
00:03:14,820 --> 00:03:18,340
I think the main purpose of this
thing is for editing any

81
00:03:18,340 --> 00:03:20,020
sort of source code.

82
00:03:20,020 --> 00:03:21,520
PETE LEPAGE: OK.

83
00:03:21,520 --> 00:03:22,920
BRAD GREEN: So just a
little bit more of

84
00:03:22,920 --> 00:03:24,160
how we put this together.

85
00:03:24,160 --> 00:03:27,850
So we're using the ACE
editor component.

86
00:03:27,850 --> 00:03:28,520
VOJTA JINA: Which is awesome.

87
00:03:28,520 --> 00:03:30,220
BRAD GREEN: It is fantastic.

88
00:03:30,220 --> 00:03:32,010
But that doesn't make
a full app.

89
00:03:32,010 --> 00:03:34,970
So as the wiring bit, we're
using Angular to pull the

90
00:03:34,970 --> 00:03:36,480
whole thing together
into an app.

91
00:03:36,480 --> 00:03:40,590
And then we're using these V2
APIs to be able to access all

92
00:03:40,590 --> 00:03:42,635
the pieces we need to make
it a real application.

93
00:03:42,635 --> 00:03:45,330

94
00:03:45,330 --> 00:03:47,960
VOJTA JINA: Maybe the last thing
I could show is there

95
00:03:47,960 --> 00:03:49,120
are settings, as well.

96
00:03:49,120 --> 00:03:52,910
So you can change the theme--

97
00:03:52,910 --> 00:03:59,050

98
00:03:59,050 --> 00:03:59,995
BRAD GREEN: Fantastic.

99
00:03:59,995 --> 00:04:02,410
If I want to code in the dark.

100
00:04:02,410 --> 00:04:05,280
VOJTA JINA: All these settings
are synchronized through

101
00:04:05,280 --> 00:04:06,870
Chrome sync storage.

102
00:04:06,870 --> 00:04:10,580
PETE LEPAGE: So if I'm logged
into Chrome on one machine,

103
00:04:10,580 --> 00:04:12,850
and then go to a different
machine and start editing

104
00:04:12,850 --> 00:04:14,980
files, I get the
same settings--

105
00:04:14,980 --> 00:04:17,470
VOJTA JINA: Hopefully, you will
get the same settings.

106
00:04:17,470 --> 00:04:18,560
PETE LEPAGE: Very cool.

107
00:04:18,560 --> 00:04:20,730
So that was something we talked
about last week with

108
00:04:20,730 --> 00:04:24,140
the Chrome storage APIs being
able to sync those across

109
00:04:24,140 --> 00:04:25,390
multiple machines.

110
00:04:25,390 --> 00:04:28,120

111
00:04:28,120 --> 00:04:31,730
BRAD GREEN: So it's kind
of a basic text editor.

112
00:04:31,730 --> 00:04:34,120
I think the interesting part is
how this editor works, and

113
00:04:34,120 --> 00:04:35,990
how we built it, and some of
the lessons we learned.

114
00:04:35,990 --> 00:04:37,190
VOJTA JINA: Yeah, I think we
learned a lot of stuff, even

115
00:04:37,190 --> 00:04:38,690
about Angler to about--

116
00:04:38,690 --> 00:04:39,440
[INTERPOSING VOICES]

117
00:04:39,440 --> 00:04:40,400
VOJTA JINA: We are developing
Angular.

118
00:04:40,400 --> 00:04:42,490
But sometimes it's good to
develop something with

119
00:04:42,490 --> 00:04:43,780
Angular, so that you can see--

120
00:04:43,780 --> 00:04:44,590
BRAD GREEN: Absolutely.

121
00:04:44,590 --> 00:04:46,900
VOJTA JINA: I think we learned
a lot of lessons as well.

122
00:04:46,900 --> 00:04:49,060
BRAD GREEN: So just for the
folks who haven't used Angular

123
00:04:49,060 --> 00:04:51,330
before, let me just give
a brief overview.

124
00:04:51,330 --> 00:04:53,670
Angular is a framework for
building web apps.

125
00:04:53,670 --> 00:04:56,260
And it really helps
you build MVC--

126
00:04:56,260 --> 00:04:58,650
model-view-controller
style web apps.

127
00:04:58,650 --> 00:05:01,230
And it does this through
a couple mechanisms.

128
00:05:01,230 --> 00:05:04,580
And you can check this
out at AngularJS.org.

129
00:05:04,580 --> 00:05:06,960
We've got a ton of
code examples.

130
00:05:06,960 --> 00:05:09,400
We support it through something
called data binding,

131
00:05:09,400 --> 00:05:13,620
where we automatically
synchronize elements in your

132
00:05:13,620 --> 00:05:17,740
UI, and the state of them, into
your properties in your

133
00:05:17,740 --> 00:05:20,790
model, into your JavaScript
objects.

134
00:05:20,790 --> 00:05:23,780
We also have something called
directives, which allow you to

135
00:05:23,780 --> 00:05:25,360
extend HTML syntax.

136
00:05:25,360 --> 00:05:28,520
So that instead of having a
whole bunch of divs and spans,

137
00:05:28,520 --> 00:05:30,170
if you want to build
tabs, you can just

138
00:05:30,170 --> 00:05:32,600
say tab, angle bracket.

139
00:05:32,600 --> 00:05:35,670
Or, you can-- if you're not
in an HTML5 browser--

140
00:05:35,670 --> 00:05:37,850
you can still say, color
picker, angle bracket.

141
00:05:37,850 --> 00:05:41,250
You can make that work in
any browser on the web.

142
00:05:41,250 --> 00:05:43,110
And we'll see some of these
features, and how they come

143
00:05:43,110 --> 00:05:47,450
together to build a really
nice MVC-style app.

144
00:05:47,450 --> 00:05:50,450
So, Vojta, can you take us
through some of this?

145
00:05:50,450 --> 00:05:51,850
As a matter of fact, let's
look at the app itself.

146
00:05:51,850 --> 00:05:55,640
So in MVC, the controllers
usually map to certain

147
00:05:55,640 --> 00:05:57,040
parts of the UI.

148
00:05:57,040 --> 00:05:57,660
And Vojta--

149
00:05:57,660 --> 00:05:59,350
VOJTA JINA: And that's exactly
what it does in Angular.

150
00:05:59,350 --> 00:06:00,650
BRAD GREEN: That is what
is does in Angular.

151
00:06:00,650 --> 00:06:03,950
Vojta's cooked this up so that's
we can actually see

152
00:06:03,950 --> 00:06:06,360
which controllers map to
which parts of the UI.

153
00:06:06,360 --> 00:06:06,800
VOJTA JINA: Yeah.

154
00:06:06,800 --> 00:06:09,740
So there is one root
controller,

155
00:06:09,740 --> 00:06:11,900
which is called App.

156
00:06:11,900 --> 00:06:15,790
And that's basically responsible
for stuff like--

157
00:06:15,790 --> 00:06:21,640
it keeps some state, like
the settings, is it

158
00:06:21,640 --> 00:06:23,360
open or is it closed?

159
00:06:23,360 --> 00:06:26,530
Is this search dialogue
open, or is it closed?

160
00:06:26,530 --> 00:06:27,830
And stuff like that.

161
00:06:27,830 --> 00:06:29,900
So that's App controller.

162
00:06:29,900 --> 00:06:34,640
Then we have Tabs controller,
which is right over

163
00:06:34,640 --> 00:06:35,560
there at the top.

164
00:06:35,560 --> 00:06:39,220
And that is responsible for
these buttons over there, in

165
00:06:39,220 --> 00:06:42,140
the right top corner, as
well as all the tabs.

166
00:06:42,140 --> 00:06:46,730
So creating new tab, closing
tab, focusing tabs.

167
00:06:46,730 --> 00:06:49,870
Basically keeping the state of
which tab is selected, and

168
00:06:49,870 --> 00:06:51,560
stuff like that.

169
00:06:51,560 --> 00:06:55,600
Then we have StatusBar
controller, which, again, is

170
00:06:55,600 --> 00:06:57,690
responsible for some
stuff here.

171
00:06:57,690 --> 00:07:01,320
So for instance, you can
manually change the file type,

172
00:07:01,320 --> 00:07:03,420
and stuff like that.

173
00:07:03,420 --> 00:07:06,750
And last piece is Settings
controller, at the bottom.

174
00:07:06,750 --> 00:07:10,870
And that's responsible for
changing the settings.

175
00:07:10,870 --> 00:07:11,670
BRAD GREEN: Great.

176
00:07:11,670 --> 00:07:13,730
VOJTA JINA: I think that's
pretty much the overview.

177
00:07:13,730 --> 00:07:17,430
These are the controllers
that we use.

178
00:07:17,430 --> 00:07:17,560
BRAD GREEN: OK.

179
00:07:17,560 --> 00:07:18,560
Well, let's look at
some of the code.

180
00:07:18,560 --> 00:07:23,120
And let's maybe zoom into
the Tabs controller.

181
00:07:23,120 --> 00:07:25,210
Would you take us through a
little bit of how that works?

182
00:07:25,210 --> 00:07:26,750
Maybe we'll start
on the template.

183
00:07:26,750 --> 00:07:27,160
VOJTA JINA: Yeah.

184
00:07:27,160 --> 00:07:28,870
That's a good idea, actually.

185
00:07:28,870 --> 00:07:33,960
So this is index.html, which
is basically a template of

186
00:07:33,960 --> 00:07:34,860
this whole app.

187
00:07:34,860 --> 00:07:36,810
It's just one template.

188
00:07:36,810 --> 00:07:40,630
And you can see this header
right over there, which is

189
00:07:40,630 --> 00:07:43,000
controlled by Tabs controller.

190
00:07:43,000 --> 00:07:44,960
And the first div--

191
00:07:44,960 --> 00:07:47,220
that's these buttons
right over there.

192
00:07:47,220 --> 00:07:52,450
And then we have these tabs,
which are done just by CSS.

193
00:07:52,450 --> 00:07:55,230
So it's just unordered list.

194
00:07:55,230 --> 00:07:57,410
BRAD GREEN: This is the template
of one tab, that will

195
00:07:57,410 --> 00:07:59,360
get expanded into
multiple tabs.

196
00:07:59,360 --> 00:08:00,390
VOJTA JINA: Exactly.

197
00:08:00,390 --> 00:08:02,580
You can see, there is
this just one item.

198
00:08:02,580 --> 00:08:04,950
And that's one tab.

199
00:08:04,950 --> 00:08:08,620
And this whole code basically
creates one tab.

200
00:08:08,620 --> 00:08:13,510
And here is when Angular comes
into play, because it says,

201
00:08:13,510 --> 00:08:17,690
repeat this tab for
every tab in tabs.

202
00:08:17,690 --> 00:08:18,440
Right?

203
00:08:18,440 --> 00:08:22,940
So I think we might go to tabs
controller, which is actually

204
00:08:22,940 --> 00:08:23,770
pretty lightweight.

205
00:08:23,770 --> 00:08:26,080
And most of the stuff
is in tab service.

206
00:08:26,080 --> 00:08:28,410
So let me actually go
to tab service.

207
00:08:28,410 --> 00:08:32,380
And I think we might show people
adding or something.

208
00:08:32,380 --> 00:08:33,039
BRAD GREEN: Yeah, let's
look at Add.

209
00:08:33,039 --> 00:08:36,630
I think Add is the interesting
part of tabs.

210
00:08:36,630 --> 00:08:39,669
VOJTA JINA: So here is
the source code to

211
00:08:39,669 --> 00:08:41,360
actually add a tab.

212
00:08:41,360 --> 00:08:44,920
And I think you can see
the magic of two-way

213
00:08:44,920 --> 00:08:46,150
data binding here.

214
00:08:46,150 --> 00:08:50,390
Because what we do, we
just create a new

215
00:08:50,390 --> 00:08:51,940
instance of tab object.

216
00:08:51,940 --> 00:08:56,670
And then we basically just
push it into an array.

217
00:08:56,670 --> 00:09:04,150
So tabs itself, if I search
for this, tabs is just the

218
00:09:04,150 --> 00:09:05,390
JavaScript array.

219
00:09:05,390 --> 00:09:06,670
Nothing special.

220
00:09:06,670 --> 00:09:10,530
So for me, in order to create
a new tab, I just push a new

221
00:09:10,530 --> 00:09:12,140
tab into this array.

222
00:09:12,140 --> 00:09:14,720
And this two-way data binding
automatically will synchronize

223
00:09:14,720 --> 00:09:18,730
it, so that if I create
a new tab--

224
00:09:18,730 --> 00:09:20,470
BRAD GREEN: Because we have it
bound to the UI, it knows

225
00:09:20,470 --> 00:09:23,720
that, for every item in the
array, I will create this tab

226
00:09:23,720 --> 00:09:25,390
template that you showed off.

227
00:09:25,390 --> 00:09:27,390
PETE LEPAGE: I think one of the
things that I've really

228
00:09:27,390 --> 00:09:30,800
liked when I've played with
Angular is that there's no

229
00:09:30,800 --> 00:09:35,310
really funky data set up or
anything that I need to do.

230
00:09:35,310 --> 00:09:37,810
Those are just an array--

231
00:09:37,810 --> 00:09:38,090
VOJTA JINA: Exactly.

232
00:09:38,090 --> 00:09:39,130
PETE LEPAGE: --of
strings, right?

233
00:09:39,130 --> 00:09:39,640
BRAD GREEN: That's right.

234
00:09:39,640 --> 00:09:40,280
PETE LEPAGE: That I can
just say, hey--

235
00:09:40,280 --> 00:09:41,420
VOJTA JINA: Just needed
the array.

236
00:09:41,420 --> 00:09:42,210
PETE LEPAGE: There you go.

237
00:09:42,210 --> 00:09:42,280
Great.

238
00:09:42,280 --> 00:09:42,350
Done.

239
00:09:42,350 --> 00:09:44,230
VOJTA JINA: Which makes it
really easy to work, for

240
00:09:44,230 --> 00:09:46,460
instance, with some
third-party code.

241
00:09:46,460 --> 00:09:49,590
You don't have to wrap it
with some custom stuff.

242
00:09:49,590 --> 00:09:51,940
PETE LEPAGE: And it makes it
easier, at some point, to

243
00:09:51,940 --> 00:09:53,170
serialize it out, as well.

244
00:09:53,170 --> 00:09:56,210
Because I don't have all this
crazy stuff that's in there.

245
00:09:56,210 --> 00:09:56,790
BRAD GREEN: For sure.

246
00:09:56,790 --> 00:09:57,980
Yeah.

247
00:09:57,980 --> 00:10:04,040
All right so do you want to take
a look at how we maximize

248
00:10:04,040 --> 00:10:04,610
the window?

249
00:10:04,610 --> 00:10:05,375
Do you want to see that?

250
00:10:05,375 --> 00:10:06,400
VOJTA JINA: Yeah, sure.

251
00:10:06,400 --> 00:10:09,130
So that's an Tabs controller
as well.

252
00:10:09,130 --> 00:10:10,430
BRAD GREEN: Let's describe
what you're doing here.

253
00:10:10,430 --> 00:10:10,870
PETE LEPAGE: Yes.

254
00:10:10,870 --> 00:10:14,390
Because the maximize window is
part of the windowing API,

255
00:10:14,390 --> 00:10:16,380
which means that we've got
the ability to be able to

256
00:10:16,380 --> 00:10:19,830
completely change the window and
size, minimize, maximize.

257
00:10:19,830 --> 00:10:20,445
VOJTA JINA: I can show you--

258
00:10:20,445 --> 00:10:22,780
PETE LEPAGE: Stuff we can't do
with normal web apps today.

259
00:10:22,780 --> 00:10:23,170
BRAD GREEN: That's right.

260
00:10:23,170 --> 00:10:26,560
PETE LEPAGE: But we expect to
be able to do with apps that

261
00:10:26,560 --> 00:10:28,055
are installed on our machine.

262
00:10:28,055 --> 00:10:30,560

263
00:10:30,560 --> 00:10:35,950
VOJTA JINA: So this controller
just calls something.

264
00:10:35,950 --> 00:10:37,940
We call it Service.

265
00:10:37,940 --> 00:10:40,530
And we have App Windows
service.

266
00:10:40,530 --> 00:10:43,320
Let me actually show you this.

267
00:10:43,320 --> 00:10:46,110
So this service is really
lightweight.

268
00:10:46,110 --> 00:10:49,750
It's just a tiny wrapper
around this Chrome API.

269
00:10:49,750 --> 00:10:54,940
And I think that was one of the
lessons that I learned.

270
00:10:54,940 --> 00:10:59,330
The reason for doing this tiny
wrapper, which is basically

271
00:10:59,330 --> 00:11:02,810
almost empty service, I
think there are two

272
00:11:02,810 --> 00:11:04,230
advantages of that.

273
00:11:04,230 --> 00:11:10,480
First thing is whenever this API
changes, you have single

274
00:11:10,480 --> 00:11:11,870
place, where to change it.

275
00:11:11,870 --> 00:11:12,970
And for instance, this API--

276
00:11:12,970 --> 00:11:14,990
BRAD GREEN: The importance
of using API.

277
00:11:14,990 --> 00:11:17,420
VOJTA JINA: This API has changed
at least four times.

278
00:11:17,420 --> 00:11:19,350
And then it's easy to
change it, because

279
00:11:19,350 --> 00:11:20,580
there's just one place.

280
00:11:20,580 --> 00:11:22,190
And you change this
single place.

281
00:11:22,190 --> 00:11:24,620
And the rest of the
app doesn't care.

282
00:11:24,620 --> 00:11:25,740
So that's the first thing.

283
00:11:25,740 --> 00:11:29,370
And then the second thing
is testability.

284
00:11:29,370 --> 00:11:32,470
Because most of those things,
like Windows close.

285
00:11:32,470 --> 00:11:33,945
You don't want to do
that in unit test.

286
00:11:33,945 --> 00:11:36,860
You don't want to close the
window doing unit testing.

287
00:11:36,860 --> 00:11:40,040
So once you have this tiny
wrapper, you can just easily

288
00:11:40,040 --> 00:11:42,430
inject different versions
during unit testing.

289
00:11:42,430 --> 00:11:46,890
For instance, empty function,
or some Jasmine spy.

290
00:11:46,890 --> 00:11:49,390
So that you can assert whether
it was code or not.

291
00:11:49,390 --> 00:11:50,520
But that's pretty much it.

292
00:11:50,520 --> 00:11:52,390
It doesn't do anything.

293
00:11:52,390 --> 00:11:55,680
So that's the reason for this
tiny wrapper, which is

294
00:11:55,680 --> 00:11:58,530
something that you can
see multiple times

295
00:11:58,530 --> 00:12:00,000
in this source code.

296
00:12:00,000 --> 00:12:02,800
PETE LEPAGE: Now you guys
saw those change a lot.

297
00:12:02,800 --> 00:12:07,250
At this point, we kind of expect
and hope that we're not

298
00:12:07,250 --> 00:12:10,240
going to see a lot more changes
to the Window API.

299
00:12:10,240 --> 00:12:12,750
Because we are at a point
where things are really

300
00:12:12,750 --> 00:12:17,230
starting to become more stable,
the breaking changes

301
00:12:17,230 --> 00:12:20,250
really are fewer and much
further between.

302
00:12:20,250 --> 00:12:23,630
You guys started on this
two months ago?

303
00:12:23,630 --> 00:12:26,140
VOJTA JINA: This editor was
done couple weeks before

304
00:12:26,140 --> 00:12:30,150
Google I/O. We did that for
Google I/O. So that was a time

305
00:12:30,150 --> 00:12:32,420
when there were many changes.

306
00:12:32,420 --> 00:12:32,830
BRAD GREEN: This is true.

307
00:12:32,830 --> 00:12:37,300
And although this API will not
be changing, I think this

308
00:12:37,300 --> 00:12:38,390
lesson still applies.

309
00:12:38,390 --> 00:12:40,610
Because for me to be able to
change my code, and if I want

310
00:12:40,610 --> 00:12:45,550
to reorganize my code, using
Angular's dependency injection

311
00:12:45,550 --> 00:12:48,140
allows to just have a really
good, flexible code--

312
00:12:48,140 --> 00:12:48,430
VOJTA JINA: Exactly.

313
00:12:48,430 --> 00:12:49,530
BRAD GREEN: --no matter
what I want to do.

314
00:12:49,530 --> 00:12:51,870
PETE LEPAGE: I think that's
really good point.

315
00:12:51,870 --> 00:12:53,150
VOJTA JINA: Yeah.

316
00:12:53,150 --> 00:12:57,280
For me, that was really the
point where I realized, oh,

317
00:12:57,280 --> 00:12:58,680
this dependency injection
style.

318
00:12:58,680 --> 00:12:59,860
That's really amazing.

319
00:12:59,860 --> 00:13:06,870
Because you design something
one day, and it works well.

320
00:13:06,870 --> 00:13:09,510
But then the other day, it's
completely broken because some

321
00:13:09,510 --> 00:13:10,340
API changed.

322
00:13:10,340 --> 00:13:11,270
So you fix it.

323
00:13:11,270 --> 00:13:12,580
And guess what?

324
00:13:12,580 --> 00:13:14,650
The other day, it's
broken again.

325
00:13:14,650 --> 00:13:15,680
BRAD GREEN: And it may
not be an API.

326
00:13:15,680 --> 00:13:17,010
It may be other developers
you're working with.

327
00:13:17,010 --> 00:13:18,460
VOJTA JINA: Sure.

328
00:13:18,460 --> 00:13:21,400
It's the same if you're working
on a product for a

329
00:13:21,400 --> 00:13:23,960
customer and the requirements
keep changing.

330
00:13:23,960 --> 00:13:25,620
That's completely the same.

331
00:13:25,620 --> 00:13:29,250
And so suddenly, the
architecture of the original

332
00:13:29,250 --> 00:13:32,160
design is not that
great as it was.

333
00:13:32,160 --> 00:13:37,370
And I really believe that the
only way to manage and to keep

334
00:13:37,370 --> 00:13:40,810
the code nice and clean, is
just to keep refactoring.

335
00:13:40,810 --> 00:13:43,540
And the point is that, once
you have this dependency

336
00:13:43,540 --> 00:13:46,660
injection that wires all these
pieces together automatically,

337
00:13:46,660 --> 00:13:48,350
it is super easy to refactor.

338
00:13:48,350 --> 00:13:49,450
So you do it.

339
00:13:49,450 --> 00:13:51,115
If it's difficult,
you don't do it.

340
00:13:51,115 --> 00:13:53,800

341
00:13:53,800 --> 00:13:56,160
BRAD GREEN: Let's move on to
the Settings controller.

342
00:13:56,160 --> 00:13:59,980
The settings where we keep track
of all your preferences

343
00:13:59,980 --> 00:14:02,800
and where we synchronize them
across all your devices.

344
00:14:02,800 --> 00:14:04,700
PETE LEPAGE: Before we jump
there, I just want to make one

345
00:14:04,700 --> 00:14:06,820
quick comment to the folks
who are watching.

346
00:14:06,820 --> 00:14:10,060
If you have questions for these
guys as we're going, or

347
00:14:10,060 --> 00:14:13,200
as we're working through some of
these examples and showing

348
00:14:13,200 --> 00:14:15,470
you this stuff, be sure to post
your questions to the

349
00:14:15,470 --> 00:14:16,950
Google Developers Live page.

350
00:14:16,950 --> 00:14:20,870
You can go to
developers.google.com/live,

351
00:14:20,870 --> 00:14:23,930
and click on the Live link, and
post your questions on the

352
00:14:23,930 --> 00:14:27,140
moderator queue just
down below.

353
00:14:27,140 --> 00:14:28,300
Because we want to
take your live

354
00:14:28,300 --> 00:14:29,980
questions as we go through.

355
00:14:29,980 --> 00:14:30,650
So please, post your
questions.

356
00:14:30,650 --> 00:14:32,670
VOJTA JINA: I think that's
what this is about.

357
00:14:32,670 --> 00:14:34,960
PETE LEPAGE: Absolutely.

358
00:14:34,960 --> 00:14:35,310
VOJTA JINA: All right.

359
00:14:35,310 --> 00:14:36,580
So settings.

360
00:14:36,580 --> 00:14:38,910
BRAD GREEN: So yeah, let's
look at the Settings

361
00:14:38,910 --> 00:14:40,080
controller.

362
00:14:40,080 --> 00:14:41,490
Is that what we have up?

363
00:14:41,490 --> 00:14:41,650
VOJTA JINA: Yeah.

364
00:14:41,650 --> 00:14:43,250
Sure.

365
00:14:43,250 --> 00:14:46,240
Again, this controller
is almost empty.

366
00:14:46,240 --> 00:14:49,600
I think that's another lesson
that I learned during

367
00:14:49,600 --> 00:14:50,980
building this app.

368
00:14:50,980 --> 00:14:55,990
Which is, regarding to Angular,
that I think it's

369
00:14:55,990 --> 00:14:59,800
good to keep the controllers
really lightweight, because

370
00:14:59,800 --> 00:15:03,130
then it's way easier to
move things around.

371
00:15:03,130 --> 00:15:07,790
So for instance, I remember
moving this Search dialogue.

372
00:15:07,790 --> 00:15:12,500
And at that time, I had it
inside controller [INAUDIBLE].

373
00:15:12,500 --> 00:15:15,070
And it was kind of difficult
to move it to a different

374
00:15:15,070 --> 00:15:16,380
place on the page.

375
00:15:16,380 --> 00:15:19,530
Because everything that is
inside the controller is tied

376
00:15:19,530 --> 00:15:23,510
to the position of the app,
because the controller has a

377
00:15:23,510 --> 00:15:25,140
specific position.

378
00:15:25,140 --> 00:15:29,410
So my lesson was, put more
stuff into services.

379
00:15:29,410 --> 00:15:32,440

380
00:15:32,440 --> 00:15:35,460
Most of the controllers are
just publishing stuff into

381
00:15:35,460 --> 00:15:38,476
scope, so they are accessible
from templates.

382
00:15:38,476 --> 00:15:40,370
BRAD GREEN: Fantastic.

383
00:15:40,370 --> 00:15:42,260
So walk us through how
this works, though.

384
00:15:42,260 --> 00:15:42,610
VOJTA JINA: All right.

385
00:15:42,610 --> 00:15:44,710
BRAD GREEN: Into the
service itself.

386
00:15:44,710 --> 00:15:46,120
VOJTA JINA: So Settings.

387
00:15:46,120 --> 00:15:49,530
Let's open the Settings
service as well.

388
00:15:49,530 --> 00:15:53,050

389
00:15:53,050 --> 00:15:54,630
PETE LEPAGE: And as you're
opening that up, one of the

390
00:15:54,630 --> 00:15:58,420
other things I'll comment on,
all of this code is available

391
00:15:58,420 --> 00:15:59,470
on GitHub today.

392
00:15:59,470 --> 00:16:03,240
So you can go to the GitHub
URL, which we can, in a

393
00:16:03,240 --> 00:16:04,300
minute, put on screen.

394
00:16:04,300 --> 00:16:06,140
But you can go to GitHub.

395
00:16:06,140 --> 00:16:07,810
You can pull this code down.

396
00:16:07,810 --> 00:16:09,800
And you can play with
this code yourself.

397
00:16:09,800 --> 00:16:12,270
You can go look in and see
how everything works.

398
00:16:12,270 --> 00:16:17,050
You can try seeing how all of
these different services work.

399
00:16:17,050 --> 00:16:19,020
If you want to try and move
something from one place to

400
00:16:19,020 --> 00:16:20,430
another, and see what you
were just talking

401
00:16:20,430 --> 00:16:22,010
about, you can do that.

402
00:16:22,010 --> 00:16:25,160
So all this code is available
for you to go play with.

403
00:16:25,160 --> 00:16:27,210
It will work on Chrome today.

404
00:16:27,210 --> 00:16:30,150

405
00:16:30,150 --> 00:16:30,530
VOJTA JINA: All right.

406
00:16:30,530 --> 00:16:32,720
So the Setting service.

407
00:16:32,720 --> 00:16:36,350
That's the source of
the [INAUDIBLE]

408
00:16:36,350 --> 00:16:39,200
that keeps all the states
about your settings.

409
00:16:39,200 --> 00:16:41,455
And there's a bunch of other
components that communicates

410
00:16:41,455 --> 00:16:42,620
with the service.

411
00:16:42,620 --> 00:16:45,530
So first thing is the view.

412
00:16:45,530 --> 00:16:49,450
That's the part at the
bottom, like here.

413
00:16:49,450 --> 00:16:52,460
And the communication between
the view and the Setting

414
00:16:52,460 --> 00:16:55,340
service is down through
Angular data binding.

415
00:16:55,340 --> 00:16:59,310
So again, whenever a user
changes anything-- like

416
00:16:59,310 --> 00:17:00,770
whenever I change the select--

417
00:17:00,770 --> 00:17:03,320
it immediately changes
the model.

418
00:17:03,320 --> 00:17:05,579
That's Angular business.

419
00:17:05,579 --> 00:17:06,359
BRAD GREEN: We say model.

420
00:17:06,359 --> 00:17:08,680
These are just variables
in your app.

421
00:17:08,680 --> 00:17:09,160
Just properties--

422
00:17:09,160 --> 00:17:12,710
VOJTA JINA: Just objects,
properties.

423
00:17:12,710 --> 00:17:17,210
Another thing that is in the
game is the ACE editor itself.

424
00:17:17,210 --> 00:17:21,010
Because as you can see, most of
these settings are actually

425
00:17:21,010 --> 00:17:24,200
related to ACE editor.

426
00:17:24,200 --> 00:17:26,230
And ACE editor has getters
and setters.

427
00:17:26,230 --> 00:17:29,640
So there is a tiny wrapper
around ACE editor which

428
00:17:29,640 --> 00:17:34,860
translates changes to this
settings model, and calls

429
00:17:34,860 --> 00:17:37,950
proper settings, getters and
setters from ACE editor.

430
00:17:37,950 --> 00:17:40,860
So for instance, if I change
the theme, it will call ACE

431
00:17:40,860 --> 00:17:44,020
editor set theme to something.

432
00:17:44,020 --> 00:17:47,140
And the last piece
is the storage.

433
00:17:47,140 --> 00:17:50,440
Because as we mentioned at the
beginning, all these settings

434
00:17:50,440 --> 00:17:54,600
are synchronized, of course,
across all the devices.

435
00:17:54,600 --> 00:18:01,085
So at the bootstrap, the
settings loads all the data,

436
00:18:01,085 --> 00:18:05,330
all the settings from Chrome
storage, Chrome storage sync.

437
00:18:05,330 --> 00:18:09,260
And when you close the
app, it saves the

438
00:18:09,260 --> 00:18:11,390
settings back to the storage.

439
00:18:11,390 --> 00:18:12,060
PETE LEPAGE: OK.

440
00:18:12,060 --> 00:18:15,380
Now are you listening for
events that may happen?

441
00:18:15,380 --> 00:18:19,750
So if I'm on two computers, and
I make a change on one,

442
00:18:19,750 --> 00:18:23,870
Chrome fires an event
that says, hey, this

443
00:18:23,870 --> 00:18:25,000
data has been updated.

444
00:18:25,000 --> 00:18:26,480
Are you guys listening
for that today?

445
00:18:26,480 --> 00:18:26,880
VOJTA JINA: No.

446
00:18:26,880 --> 00:18:27,680
We don't.

447
00:18:27,680 --> 00:18:31,850
But you are welcome to send
us a pull request.

448
00:18:31,850 --> 00:18:33,310
PETE LEPAGE: So that's
one of the other cool

449
00:18:33,310 --> 00:18:33,900
things you can do.

450
00:18:33,900 --> 00:18:35,260
And we talked about
this last week.

451
00:18:35,260 --> 00:18:38,560
That you can say, hey, I want
to go listen for events.

452
00:18:38,560 --> 00:18:42,700
So that if you go update it on
one computer, you get that

453
00:18:42,700 --> 00:18:45,620
live update on the
second computer.

454
00:18:45,620 --> 00:18:47,080
VOJTA JINA: You could do that.

455
00:18:47,080 --> 00:18:49,070
We did not, but you could.

456
00:18:49,070 --> 00:18:51,700
PETE LEPAGE: And config settings
for an editor, you're

457
00:18:51,700 --> 00:18:54,160
usually not editing
on two computers.

458
00:18:54,160 --> 00:18:54,320
BRAD GREEN: Unlikely.

459
00:18:54,320 --> 00:18:55,870
But I think it would
be a cool demo.

460
00:18:55,870 --> 00:18:58,380
It would be a great
part of TextDrive.

461
00:18:58,380 --> 00:19:01,100
And like you say, this
is on GitHub.

462
00:19:01,100 --> 00:19:02,970
We'd like to see everybody
add to it.

463
00:19:02,970 --> 00:19:05,460
How cool is it that there's
a text editor that

464
00:19:05,460 --> 00:19:06,550
anybody can play with?

465
00:19:06,550 --> 00:19:08,390
You can add to your favorite
feature to it.

466
00:19:08,390 --> 00:19:08,840
PETE LEPAGE: Yeah.

467
00:19:08,840 --> 00:19:10,392
That's pretty neat.

468
00:19:10,392 --> 00:19:13,820
VOJTA JINA: So I think we
might actually show the

469
00:19:13,820 --> 00:19:15,120
dependency injection.

470
00:19:15,120 --> 00:19:16,510
At least a little
bit display--

471
00:19:16,510 --> 00:19:17,380
BRAD GREEN: Yeah,
we were talking

472
00:19:17,380 --> 00:19:18,400
about dependency injection.

473
00:19:18,400 --> 00:19:20,800
Maybe let's dive just a
little deeper into it.

474
00:19:20,800 --> 00:19:23,750
VOJTA JINA: Because what
dependency injection does,

475
00:19:23,750 --> 00:19:26,910
even this is a simple app.

476
00:19:26,910 --> 00:19:29,530
The hard work is done
by ACE editor.

477
00:19:29,530 --> 00:19:29,875
BRAD GREEN: For sure.

478
00:19:29,875 --> 00:19:32,090
VOJTA JINA: Let's be honest.

479
00:19:32,090 --> 00:19:37,950
And still, we have about 12
services and four controllers.

480
00:19:37,950 --> 00:19:41,270
The so that's a lot of
components playing together.

481
00:19:41,270 --> 00:19:44,510
And then, you need to wire all
these components together to

482
00:19:44,510 --> 00:19:47,010
actually get your app.

483
00:19:47,010 --> 00:19:49,860
And that's exactly what
dependency injection does.

484
00:19:49,860 --> 00:19:54,060
So if you look into this
concrete example.

485
00:19:54,060 --> 00:19:56,580
So let's look into Settings
controller.

486
00:19:56,580 --> 00:20:00,550
So when Angular sees Settings
controller, which is at the

487
00:20:00,550 --> 00:20:03,560
bottom of the page, it says, ah,
I need to instantiate this

488
00:20:03,560 --> 00:20:04,380
controller.

489
00:20:04,380 --> 00:20:06,500
So here is the constructor.

490
00:20:06,500 --> 00:20:10,110
And it first looks into the
constructor arguments, and it

491
00:20:10,110 --> 00:20:13,350
sees, ah, I need Settings
service first.

492
00:20:13,350 --> 00:20:16,295
So it goes to instantiate
Setting service first.

493
00:20:16,295 --> 00:20:17,772
BRAD GREEN: And it knows this
by the name "Settings." And

494
00:20:17,772 --> 00:20:21,220
you're going to show us how
we've told Angular, that when

495
00:20:21,220 --> 00:20:25,520
you see Settings, create
the service first.

496
00:20:25,520 --> 00:20:29,790
VOJTA JINA: So the dependency
injection, or Angular, goes to

497
00:20:29,790 --> 00:20:32,210
settings, construct,
and see, OK.

498
00:20:32,210 --> 00:20:35,410
But in order to instantiate
Settings service, I need to

499
00:20:35,410 --> 00:20:38,200
create storage first, and
et cetera and et cetera.

500
00:20:38,200 --> 00:20:43,390
So this is the way dependency
injection resolves all the

501
00:20:43,390 --> 00:20:46,590
dependencies doing runtime.

502
00:20:46,590 --> 00:20:48,110
And you don't have to
worry about it.

503
00:20:48,110 --> 00:20:51,930
Every component just declares,
defines, its

504
00:20:51,930 --> 00:20:54,060
dependencies, and that's it.

505
00:20:54,060 --> 00:20:57,350
And this makes it super
easy to refactor code.

506
00:20:57,350 --> 00:21:01,090
Because anything like adding
new stuff, like adding new

507
00:21:01,090 --> 00:21:04,650
service, like maybe adding new
features, or even extracting

508
00:21:04,650 --> 00:21:08,430
stuff from existing service
into new service--

509
00:21:08,430 --> 00:21:09,240
refactoring--

510
00:21:09,240 --> 00:21:10,650
it's super easy.

511
00:21:10,650 --> 00:21:12,760
BRAD GREEN: And it makes your
code very short, too.

512
00:21:12,760 --> 00:21:15,790
Because normally, in your code,
either you've got this

513
00:21:15,790 --> 00:21:18,780
big, main method, where you're
kind of wiring stuff together,

514
00:21:18,780 --> 00:21:20,550
where you create something that
it needs something else,

515
00:21:20,550 --> 00:21:22,344
or you create that, or you
ask for it, or you

516
00:21:22,344 --> 00:21:23,740
have to locate it.

517
00:21:23,740 --> 00:21:25,540
And here, you just ask
for these things.

518
00:21:25,540 --> 00:21:29,020
And they get automatically
passed to your function.

519
00:21:29,020 --> 00:21:33,770
VOJTA JINA: I think it really
enables you to do refactoring

520
00:21:33,770 --> 00:21:35,870
so you actually do it.

521
00:21:35,870 --> 00:21:36,690
Because it's easy.

522
00:21:36,690 --> 00:21:39,660
So why not?

523
00:21:39,660 --> 00:21:41,440
PETE LEPAGE: All right.

524
00:21:41,440 --> 00:21:43,700
So let's maybe let's review
some of the APIs

525
00:21:43,700 --> 00:21:45,510
that we used for this.

526
00:21:45,510 --> 00:21:49,790
Do you want to take us
through some of that?

527
00:21:49,790 --> 00:21:53,000
VOJTA JINA: I think the most
important API that we used was

528
00:21:53,000 --> 00:21:55,490
a file system API.

529
00:21:55,490 --> 00:21:59,290
So basically, reading all the
files, and writing to files,

530
00:21:59,290 --> 00:22:02,010
is done through
chrome.fileSystem.

531
00:22:02,010 --> 00:22:05,170
I think we can send links
to docs afterwards.

532
00:22:05,170 --> 00:22:05,410
BRAD GREEN: Yeah.

533
00:22:05,410 --> 00:22:06,920
So we've got the links
to the docs.

534
00:22:06,920 --> 00:22:09,460
But one of the things that's, I
think, interesting about the

535
00:22:09,460 --> 00:22:13,350
Chrome File System APIs that's
different from the HTML5 File

536
00:22:13,350 --> 00:22:17,050
System APIs, is that it allows
you to open files anywhere on

537
00:22:17,050 --> 00:22:17,830
your computer, right?

538
00:22:17,830 --> 00:22:21,640
So that I can go edit that
document that's sitting in My

539
00:22:21,640 --> 00:22:24,720
Documents folder, or
something else.

540
00:22:24,720 --> 00:22:27,380
I'm not limited that
specific set.

541
00:22:27,380 --> 00:22:27,810
VOJTA JINA: Exactly.

542
00:22:27,810 --> 00:22:30,820
PETE LEPAGE: I can also save
anywhere across my computer.

543
00:22:30,820 --> 00:22:33,880
So if I want to save it to the
My Documents folder, or--

544
00:22:33,880 --> 00:22:37,010
VOJTA JINA: And there are
still a lot of security

545
00:22:37,010 --> 00:22:37,720
restrictions.

546
00:22:37,720 --> 00:22:41,420
So it should be secure for
the user at first.

547
00:22:41,420 --> 00:22:42,330
PETE LEPAGE: Right.

548
00:22:42,330 --> 00:22:45,390
It's not going to let me just
go randomly open a file and

549
00:22:45,390 --> 00:22:47,120
not tell the user.

550
00:22:47,120 --> 00:22:49,970
VOJTA JINA: So for instance, at
this point TextDrive can't

551
00:22:49,970 --> 00:22:56,280
re-open previously opened files,
because there is no way

552
00:22:56,280 --> 00:23:00,370
to open files without actually
bringing up the pop-up.

553
00:23:00,370 --> 00:23:04,210
So the user has to explicitly
say, yes, I'm fine if

554
00:23:04,210 --> 00:23:05,470
you open this file.

555
00:23:05,470 --> 00:23:06,715
And you have writing
permissions

556
00:23:06,715 --> 00:23:08,100
to the file as well.

557
00:23:08,100 --> 00:23:11,840
So File System is definitely
the most important.

558
00:23:11,840 --> 00:23:15,280
Then we use the Chrome
Storage.

559
00:23:15,280 --> 00:23:18,770
We are using Chrome Storage Sync
so that it's synchronized

560
00:23:18,770 --> 00:23:19,960
in between devices.

561
00:23:19,960 --> 00:23:23,740
Again, the cool thing is that
you have just the storage that

562
00:23:23,740 --> 00:23:25,540
you write to and read from.

563
00:23:25,540 --> 00:23:29,355
And it's synchronized
across the devices.

564
00:23:29,355 --> 00:23:30,835
You don't worry about that.

565
00:23:30,835 --> 00:23:36,625

566
00:23:36,625 --> 00:23:37,410
BRAD GREEN: There's one more.

567
00:23:37,410 --> 00:23:38,870
So you want to talk
a little bit about

568
00:23:38,870 --> 00:23:40,450
Content Security Policy--

569
00:23:40,450 --> 00:23:42,310
CSP?

570
00:23:42,310 --> 00:23:43,340
VOJTA JINA: Sure.

571
00:23:43,340 --> 00:23:46,010
BRAD GREEN: So the
Chrome apps.

572
00:23:46,010 --> 00:23:47,300
We want them to run.

573
00:23:47,300 --> 00:23:49,800
And users want to know that
they're not going to do

574
00:23:49,800 --> 00:23:52,490
nefarious things to
their machine.

575
00:23:52,490 --> 00:23:55,410
And so we need to comply with
the Content Security Policy.

576
00:23:55,410 --> 00:23:58,160
And Angular will implement
this for you.

577
00:23:58,160 --> 00:24:02,120
It'll set Angular into
a CSP-compliant mode.

578
00:24:02,120 --> 00:24:04,530
On Chrome, we can actually
auto-detect this.

579
00:24:04,530 --> 00:24:06,690
There's nothing for you to do.

580
00:24:06,690 --> 00:24:09,260
On other platforms, we've
got a tag you can use.

581
00:24:09,260 --> 00:24:12,050
VOJTA JINA: There's a directive
that you put onto

582
00:24:12,050 --> 00:24:14,060
body, or an HTML tag.

583
00:24:14,060 --> 00:24:16,910
You put NG-CSP.

584
00:24:16,910 --> 00:24:19,670
And that would enable CSP.

585
00:24:19,670 --> 00:24:22,460
Angular itself is pretty
fine with that.

586
00:24:22,460 --> 00:24:26,600
There is just one thing
that we do.

587
00:24:26,600 --> 00:24:29,180
When we instantiate a new
function, which is something

588
00:24:29,180 --> 00:24:34,546
that is not secure, so you're
not allowed to do that.

589
00:24:34,546 --> 00:24:36,320
Sorry.

590
00:24:36,320 --> 00:24:36,540
BRAD GREEN: Good.

591
00:24:36,540 --> 00:24:37,410
Good, good, good.

592
00:24:37,410 --> 00:24:37,940
PETE LEPAGE: Yeah.

593
00:24:37,940 --> 00:24:40,550
So that's actually a change
recently in Angular.

594
00:24:40,550 --> 00:24:45,140
Because it used to be that, if
I wanted Angular to go into

595
00:24:45,140 --> 00:24:50,450
it's CSP safe mode, I had to go
and put that into my head,

596
00:24:50,450 --> 00:24:54,140
or into my body, off the
bat, every single time.

597
00:24:54,140 --> 00:24:56,210
But now, I don't have
to do that.

598
00:24:56,210 --> 00:24:59,100
So it makes my development
a lot easier.

599
00:24:59,100 --> 00:25:00,110
BRAD GREEN: Well, we worked
together I this.

600
00:25:00,110 --> 00:25:01,160
PETE LEPAGE: Absolutely

601
00:25:01,160 --> 00:25:02,200
BRAD GREEN: This was something
we explored

602
00:25:02,200 --> 00:25:03,330
together, which was great.

603
00:25:03,330 --> 00:25:05,440
PETE LEPAGE: This has been a
really great learning project

604
00:25:05,440 --> 00:25:08,930
for all of us, because we've
been able to really go, oh,

605
00:25:08,930 --> 00:25:10,270
building a real app?

606
00:25:10,270 --> 00:25:13,380
Here's a problem that
we've run into,

607
00:25:13,380 --> 00:25:16,000
and a concrete example.

608
00:25:16,000 --> 00:25:17,120
How do we fix this?

609
00:25:17,120 --> 00:25:19,340
We found one, earlier
today, where we were

610
00:25:19,340 --> 00:25:21,720
talking about zooming.

611
00:25:21,720 --> 00:25:25,430
On Chrome, you can do controls
shift plus, and zoom in.

612
00:25:25,430 --> 00:25:28,410
But if you're running a Chrome
app, controls shift plus

613
00:25:28,410 --> 00:25:30,220
doesn't zoom in on
the Chrome app.

614
00:25:30,220 --> 00:25:34,530
So as we are starting to do
these demos, we went, oh.

615
00:25:34,530 --> 00:25:35,420
Oh.

616
00:25:35,420 --> 00:25:36,320
OK.

617
00:25:36,320 --> 00:25:38,230
Well, we're going to go
file a bug on that.

618
00:25:38,230 --> 00:25:43,900
So after our office hours
today, go have a peek.

619
00:25:43,900 --> 00:25:46,690
You'll probably see a bug in
there, filed by one of us, to

620
00:25:46,690 --> 00:25:49,290
say, we need to be able
to support zooming

621
00:25:49,290 --> 00:25:50,320
on our Chrome apps.

622
00:25:50,320 --> 00:25:51,430
VOJTA JINA: Yes.

623
00:25:51,430 --> 00:25:52,966
BRAD GREEN: Yes, for sure.

624
00:25:52,966 --> 00:25:55,400
Well, fantastic.

625
00:25:55,400 --> 00:25:58,080
So we've got URLs.

626
00:25:58,080 --> 00:26:01,510
AngularJS is just at
angularjs.org.

627
00:26:01,510 --> 00:26:04,480
For the V2 APIs--

628
00:26:04,480 --> 00:26:06,600
we have a URL for that.

629
00:26:06,600 --> 00:26:08,770
We can toss that up in a sec.

630
00:26:08,770 --> 00:26:11,988
But you can also get to that
always by going to

631
00:26:11,988 --> 00:26:17,120
developes.chrome.com, and
clicking on the Chrome apps

632
00:26:17,120 --> 00:26:18,030
link there.

633
00:26:18,030 --> 00:26:22,140
You can get to all of
the documentation

634
00:26:22,140 --> 00:26:24,160
for the special APIs.

635
00:26:24,160 --> 00:26:26,170
You can get to the documentation
for just

636
00:26:26,170 --> 00:26:27,800
generally the Hello World.

637
00:26:27,800 --> 00:26:31,000
And you can also get to all of
the samples that we have.

638
00:26:31,000 --> 00:26:34,370
So beyond the TextDrive app that
you guys have, we have an

639
00:26:34,370 --> 00:26:39,240
entire GitHub repo, where we
have probably about two dozen

640
00:26:39,240 --> 00:26:41,420
different Chrome apps.

641
00:26:41,420 --> 00:26:45,540
If you had a look at our Google+
developer page last

642
00:26:45,540 --> 00:26:51,390
week, we showed controlling
an AR Parrot Drone using a

643
00:26:51,390 --> 00:26:56,370
gamepad controller through
a Chrome app.

644
00:26:56,370 --> 00:26:58,360
We filmed some more footage
of it last night.

645
00:26:58,360 --> 00:27:00,200
I tried to get the
video together.

646
00:27:00,200 --> 00:27:01,270
And I didn't get it.

647
00:27:01,270 --> 00:27:05,190
But keep an eye on the
Chrome developers

648
00:27:05,190 --> 00:27:06,860
page today or tomorrow.

649
00:27:06,860 --> 00:27:08,380
And we'll get that up.

650
00:27:08,380 --> 00:27:14,290
It's pretty cool to be able to
control a helicopter through a

651
00:27:14,290 --> 00:27:17,760
Chrome app using a gamepad
controller.

652
00:27:17,760 --> 00:27:20,070
We're just going completely
out of the box.

653
00:27:20,070 --> 00:27:23,310
We want to make it possible
for developers to write

654
00:27:23,310 --> 00:27:27,080
applications that they just
haven't been able to write on

655
00:27:27,080 --> 00:27:28,530
the web before.

656
00:27:28,530 --> 00:27:30,590
BRAD GREEN: And then the last
thing, of course, is the URL

657
00:27:30,590 --> 00:27:33,480
to GitHub for the TextDrive
app itself.

658
00:27:33,480 --> 00:27:36,450
We'd love to see some
crazy pull requests

659
00:27:36,450 --> 00:27:37,360
coming for that app.

660
00:27:37,360 --> 00:27:38,210
PETE LEPAGE: That would
be really cool.

661
00:27:38,210 --> 00:27:41,430
BRAD GREEN: Please use it,
and please add to it.

662
00:27:41,430 --> 00:27:42,200
PETE LEPAGE: Awesome.

663
00:27:42,200 --> 00:27:44,520
VOJTA JINA: I think we have
a YouTube question?

664
00:27:44,520 --> 00:27:46,190
PETE LEPAGE: Yeah.

665
00:27:46,190 --> 00:27:47,830
Why don't we start jumping
into the questions?

666
00:27:47,830 --> 00:27:51,510
We've had a whole bunch come
in in the meantime.

667
00:27:51,510 --> 00:27:57,520
So the first question is,
"Updating or rewriting jQuery

668
00:27:57,520 --> 00:28:00,990
plugins using directives still
feels a little bit foreign,

669
00:28:00,990 --> 00:28:03,920
and could use some more
real-world examples.

670
00:28:03,920 --> 00:28:08,620
It would be great to have a
commented version of some real

671
00:28:08,620 --> 00:28:11,740
directives done correctly,
such as the Angular

672
00:28:11,740 --> 00:28:13,770
Bootstrap." Do you guys
have plans to do

673
00:28:13,770 --> 00:28:15,830
some more of those?

674
00:28:15,830 --> 00:28:17,290
BRAD GREEN: Yeah absolutely.

675
00:28:17,290 --> 00:28:18,210
Good question.

676
00:28:18,210 --> 00:28:21,130
So there are a couple projects
that do this.

677
00:28:21,130 --> 00:28:22,560
One of them is called
Angular UI.

678
00:28:22,560 --> 00:28:26,050
It's not something we do, but
part of the community of

679
00:28:26,050 --> 00:28:28,800
Angular is building it.

680
00:28:28,800 --> 00:28:31,060
Just go on GitHub and search
for Angular-UI.

681
00:28:31,060 --> 00:28:34,610
You can see a bunch of
great examples there.

682
00:28:34,610 --> 00:28:37,160
VOJTA JINA: This question is
really related to Angular, but

683
00:28:37,160 --> 00:28:40,320
it pops up very often.

684
00:28:40,320 --> 00:28:42,220
And it really depends.

685
00:28:42,220 --> 00:28:45,780
There are jQuery plugins that
are, actually, easy to wrap.

686
00:28:45,780 --> 00:28:48,030
And there are jQuery plugins
that are not

687
00:28:48,030 --> 00:28:48,930
that easy to wrap.

688
00:28:48,930 --> 00:28:50,180
It depends.

689
00:28:50,180 --> 00:28:52,240

690
00:28:52,240 --> 00:28:54,410
To be fair, I think this is
some place that we could

691
00:28:54,410 --> 00:28:54,980
improve Angular.

692
00:28:54,980 --> 00:29:00,310
We could make it easier to work
with some of the really

693
00:29:00,310 --> 00:29:01,730
key components.

694
00:29:01,730 --> 00:29:05,330
And maybe we need to go talk
to the jQuery guys.

695
00:29:05,330 --> 00:29:06,110
PETE LEPAGE: Cool.

696
00:29:06,110 --> 00:29:08,170
So the next question
is actually a

697
00:29:08,170 --> 00:29:11,620
really interesting one.

698
00:29:11,620 --> 00:29:14,810
From somebody in New
Haven, Connecticut.

699
00:29:14,810 --> 00:29:17,310
His comment was, "This makes
me a little bit nervous,

700
00:29:17,310 --> 00:29:21,510
because part of this page seem
to have gone dangerously close

701
00:29:21,510 --> 00:29:25,570
to inline JavaScript, in the
style onclick and friends.

702
00:29:25,570 --> 00:29:27,970
Do you have thoughts
on this matter?"

703
00:29:27,970 --> 00:29:28,520
BRAD GREEN: Yes.

704
00:29:28,520 --> 00:29:31,350
So you're seeing a bunch of
attributes inside the tags,

705
00:29:31,350 --> 00:29:33,290
now, that we've added
in Angular.

706
00:29:33,290 --> 00:29:36,260
And this feels like, OK, that's
just like onclick.

707
00:29:36,260 --> 00:29:38,300
Why is that not just onclick?

708
00:29:38,300 --> 00:29:39,670
And maybe, Vojta, you've
got some comments.

709
00:29:39,670 --> 00:29:46,290
But one of the key differences
is that onclick is a global

710
00:29:46,290 --> 00:29:51,670
name space entity, and it has
all of the problems of

711
00:29:51,670 --> 00:29:56,340
testability and leakage into
the rest of your app.

712
00:29:56,340 --> 00:29:59,265
VOJTA JINA: In general, you can
say, I think pretty much--

713
00:29:59,265 --> 00:30:00,240
BRAD GREEN: The Angular
version does

714
00:30:00,240 --> 00:30:01,080
not have this problem.

715
00:30:01,080 --> 00:30:01,260
VOJTA JINA: Yeah.

716
00:30:01,260 --> 00:30:04,550
I think pretty much all the
problems that this onclick

717
00:30:04,550 --> 00:30:08,750
handlers suffers from,
Angular does not.

718
00:30:08,750 --> 00:30:13,280
BRAD GREEN: So it is
a good question.

719
00:30:13,280 --> 00:30:16,920
I think we've got a presentation
tonight at our

720
00:30:16,920 --> 00:30:18,790
meet up on Angular.

721
00:30:18,790 --> 00:30:22,350
If you can join us for that or
see the video afterwards,

722
00:30:22,350 --> 00:30:24,050
we'll go into that in
a lot more depth.

723
00:30:24,050 --> 00:30:26,360
VOJTA JINA: It's going to
be about directives.

724
00:30:26,360 --> 00:30:30,290
PETE LEPAGE: So where can they
find the video afterwards?

725
00:30:30,290 --> 00:30:35,760
BRAD GREEN: If you go to our
blog, just at angularjs.org,

726
00:30:35,760 --> 00:30:36,590
and click on blog.

727
00:30:36,590 --> 00:30:39,536
Or if you just go to
blog.angularjs.org, you'll be

728
00:30:39,536 --> 00:30:40,940
able to find that.

729
00:30:40,940 --> 00:30:42,530
PETE LEPAGE: So that'll
be later tonight?

730
00:30:42,530 --> 00:30:43,030
BRAD GREEN: That's right.

731
00:30:43,030 --> 00:30:43,510
PETE LEPAGE: OK.

732
00:30:43,510 --> 00:30:45,630
VOJTA JINA: Or there is a
YouTube channel, I think.

733
00:30:45,630 --> 00:30:46,640
BRAD GREEN: And there's
a YouTube channel.

734
00:30:46,640 --> 00:30:47,360
That's right.

735
00:30:47,360 --> 00:30:48,034
Just AngularJS.

736
00:30:48,034 --> 00:30:50,010
PETE LEPAGE: Cool.

737
00:30:50,010 --> 00:30:53,370
So Dennis wants to know why
TextDrive isn't on the Chrome

738
00:30:53,370 --> 00:30:54,820
Web Store yet.

739
00:30:54,820 --> 00:30:56,310
And I think there's
a good answer, but

740
00:30:56,310 --> 00:30:58,030
I'll let you guys--

741
00:30:58,030 --> 00:31:03,230
VOJTA JINA: I think the first
answer is that it doesn't run

742
00:31:03,230 --> 00:31:04,950
on stable Chrome.

743
00:31:04,950 --> 00:31:06,040
PETE LEPAGE: Yes.

744
00:31:06,040 --> 00:31:07,310
BRAD GREEN: And as soon
as it does, we'd love

745
00:31:07,310 --> 00:31:08,170
to put it up there.

746
00:31:08,170 --> 00:31:09,040
VOJTA JINA: Yeah, for sure.

747
00:31:09,040 --> 00:31:10,960
PETE LEPAGE: So the big thing
right now is for web

748
00:31:10,960 --> 00:31:16,170
developers who are building
Chrome apps, you can't upload

749
00:31:16,170 --> 00:31:17,510
them to he Chrome
Web Store yet.

750
00:31:17,510 --> 00:31:19,590
We're still really working
through and making sure that

751
00:31:19,590 --> 00:31:23,100
we get everything stable,
we get everything right.

752
00:31:23,100 --> 00:31:25,690
We're not 100% positive
that there will be no

753
00:31:25,690 --> 00:31:26,590
more breaking changes.

754
00:31:26,590 --> 00:31:27,830
We think we're there.

755
00:31:27,830 --> 00:31:29,920
But we're not positive yet.

756
00:31:29,920 --> 00:31:34,280
So we don't want to allow
developers to upload code only

757
00:31:34,280 --> 00:31:38,090
to find that, oh, we just made
that one last breaking change

758
00:31:38,090 --> 00:31:39,830
that we had to do and
all of a sudden,

759
00:31:39,830 --> 00:31:41,690
everybody's app stops working.

760
00:31:41,690 --> 00:31:45,310
So we'll make some pretty big
announcements, and do a

761
00:31:45,310 --> 00:31:48,730
Hangout here when developers
can start uploading those.

762
00:31:48,730 --> 00:31:52,050
And we'll work with you guys to
make sure that yours is one

763
00:31:52,050 --> 00:31:56,350
of the first to get uploaded
and available to folks.

764
00:31:56,350 --> 00:31:59,630
So the next question is from
Martin in Denmark.

765
00:31:59,630 --> 00:32:03,350
But he says, "I love AngularJS,"
but he's not so

766
00:32:03,350 --> 00:32:06,050
fond of JavaScript in general.

767
00:32:06,050 --> 00:32:08,830
"Will we see Angular in some
form of Dart?" And he's got a

768
00:32:08,830 --> 00:32:10,480
little smiley face afterwards.

769
00:32:10,480 --> 00:32:11,850
BRAD GREEN: That's
a great idea.

770
00:32:11,850 --> 00:32:13,840
I don't see any reason not to.

771
00:32:13,840 --> 00:32:16,530
We've talked to the
Dart team a bit.

772
00:32:16,530 --> 00:32:18,910
We haven't started working
on it, but yeah.

773
00:32:18,910 --> 00:32:20,060
Sounds great to me.

774
00:32:20,060 --> 00:32:20,940
PETE LEPAGE: Cool.

775
00:32:20,940 --> 00:32:21,930
Awesome.

776
00:32:21,930 --> 00:32:24,140
VOJTA JINA: Angular is ideas.

777
00:32:24,140 --> 00:32:26,040
It's not coupled to--

778
00:32:26,040 --> 00:32:26,410
BRAD GREEN: That's right.

779
00:32:26,410 --> 00:32:27,120
It's an--

780
00:32:27,120 --> 00:32:27,570
VOJTA JINA: --a language.

781
00:32:27,570 --> 00:32:28,410
BRAD GREEN: --idiom
for developing.

782
00:32:28,410 --> 00:32:30,310
And we're not tied
to JavaScript.

783
00:32:30,310 --> 00:32:31,250
Though we like JavaScript.

784
00:32:31,250 --> 00:32:33,100
Though we like Dart, too.

785
00:32:33,100 --> 00:32:35,040
PETE LEPAGE: Awesome.

786
00:32:35,040 --> 00:32:40,150
So we did mention that the code
is available on GitHub.

787
00:32:40,150 --> 00:32:41,760
Denis did have a comment.

788
00:32:41,760 --> 00:32:42,900
Not so much a question.

789
00:32:42,900 --> 00:32:47,620
But GitHub is, apparently,
not so happy right now.

790
00:32:47,620 --> 00:32:48,930
You will be able
to go grab it.

791
00:32:48,930 --> 00:32:51,990
The URL that we provided
will still work.

792
00:32:51,990 --> 00:32:55,250
So you can go to that URL
for the code, and

793
00:32:55,250 --> 00:32:57,271
pull it down later.

794
00:32:57,271 --> 00:32:58,180
VOJTA JINA: GitHub is awesome.

795
00:32:58,180 --> 00:33:00,530
I'm pretty sure it's going to
be OK in a couple of hours.

796
00:33:00,530 --> 00:33:01,030
PETE LEPAGE: Exactly.

797
00:33:01,030 --> 00:33:04,240
Hopefully it'll just be
a couple more minutes.

798
00:33:04,240 --> 00:33:08,020
I'm sure they're working
pretty hard right now.

799
00:33:08,020 --> 00:33:12,380
So this is a little bit of
an in-depth questions.

800
00:33:12,380 --> 00:33:16,250
So I'm going to try and read it
as best I can, and not mess

801
00:33:16,250 --> 00:33:17,760
it up too much.

802
00:33:17,760 --> 00:33:20,890
So Project in subdirectory.

803
00:33:20,890 --> 00:33:27,730
And they they added a base
source tag that says

804
00:33:27,730 --> 00:33:32,140
subdirectory, thinking the
HTML5 URL would be

805
00:33:32,140 --> 00:33:38,380
sudir/route1 and subdir/route2,
and for older

806
00:33:38,380 --> 00:33:44,830
browsers it would be
subdir/#!route1, #!route2.

807
00:33:44,830 --> 00:33:47,060
But instead, it came out
as subdir/#!/route1.

808
00:33:47,060 --> 00:33:53,670

809
00:33:53,670 --> 00:33:54,210
Is that--

810
00:33:54,210 --> 00:33:56,000
VOJTA JINA: I got lost.

811
00:33:56,000 --> 00:33:58,280
PETE LEPAGE: Well let me
show you this code.

812
00:33:58,280 --> 00:34:02,750
It's the one highlighted
in blue there.

813
00:34:02,750 --> 00:34:06,620
And he's trying to figure out,
is that probably a code bug

814
00:34:06,620 --> 00:34:08,770
for him, or is that
a config thing?

815
00:34:08,770 --> 00:34:10,010
BRAD GREEN: It's probably
a config thing.

816
00:34:10,010 --> 00:34:15,530
But if you would post to the
AngularJS mailing list, with a

817
00:34:15,530 --> 00:34:19,130
snippet of your code, or a
jsFiddle example, we'd love to

818
00:34:19,130 --> 00:34:19,909
look at it for you.

819
00:34:19,909 --> 00:34:20,320
PETE LEPAGE: Perfect.

820
00:34:20,320 --> 00:34:23,150
And where can they go for
the mailing list?

821
00:34:23,150 --> 00:34:24,940
BRAD GREEN: So again,
go to AngularJS.org.

822
00:34:24,940 --> 00:34:27,030
And there's a menu
called Discuss.

823
00:34:27,030 --> 00:34:27,860
Go to Discuss.

824
00:34:27,860 --> 00:34:30,790
And then the mailing
list is there.

825
00:34:30,790 --> 00:34:31,370
PETE LEPAGE: Excellent.

826
00:34:31,370 --> 00:34:35,380
So for some of these things,
it's a little hard for us to

827
00:34:35,380 --> 00:34:37,159
really be able to
dig into these.

828
00:34:37,159 --> 00:34:38,110
BRAD GREEN: Could be a bug.

829
00:34:38,110 --> 00:34:39,110
We'd love that, too.

830
00:34:39,110 --> 00:34:42,739
VOJTA JINA: I think it's more
likely about configuration.

831
00:34:42,739 --> 00:34:44,699
PETE LEPAGE: All right.

832
00:34:44,699 --> 00:34:48,409
So, "How do you determine if a
jQuery plugin can be easily

833
00:34:48,409 --> 00:34:52,650
incorporated using directives or
not?" And this is from Vij

834
00:34:52,650 --> 00:34:55,000
in New Jersey.

835
00:34:55,000 --> 00:34:58,180
VOJTA JINA: I would say it
depends how much stuff this

836
00:34:58,180 --> 00:35:01,710
jQuery plugin does, with
regards to dome.

837
00:35:01,710 --> 00:35:06,160
As long as it can live inside a
div or something, and there

838
00:35:06,160 --> 00:35:08,750
do whatever it wants,
it's fine.

839
00:35:08,750 --> 00:35:11,760
But as long as it starts doing
things like, very often, these

840
00:35:11,760 --> 00:35:15,160
model windows and stuff, it does
stuff like, oh, I'm going

841
00:35:15,160 --> 00:35:16,770
to remove this is dome.

842
00:35:16,770 --> 00:35:18,580
And I'm going to put
it somewhere else.

843
00:35:18,580 --> 00:35:20,210
And then I'm going
to delete this.

844
00:35:20,210 --> 00:35:22,000
And I'm going to
create a clone.

845
00:35:22,000 --> 00:35:25,210
And this is something that
angular compile doesn't like.

846
00:35:25,210 --> 00:35:29,140
Because once you change
the structure, it's--

847
00:35:29,140 --> 00:35:30,472
BRAD GREEN: Yeah.

848
00:35:30,472 --> 00:35:34,270
If they're very invasive to
the entire page, it can be

849
00:35:34,270 --> 00:35:35,240
problematic.

850
00:35:35,240 --> 00:35:38,200
VOJTA JINA: Especially if you
need angular binding inside

851
00:35:38,200 --> 00:35:40,380
this component.

852
00:35:40,380 --> 00:35:45,370
BRAD GREEN: Though in the
angular-UI project, I know

853
00:35:45,370 --> 00:35:47,650
that there are some examples of
those type of things, like

854
00:35:47,650 --> 00:35:48,930
the modal dialogues.

855
00:35:48,930 --> 00:35:49,740
So go take a look.

856
00:35:49,740 --> 00:35:53,540
And I know some of them use the
Bootstrap code for that

857
00:35:53,540 --> 00:35:54,280
instead of jQuery UI.

858
00:35:54,280 --> 00:35:57,490
But I think you can get the
same effect you want.

859
00:35:57,490 --> 00:35:59,370
VOJTA JINA: Yeah, but I think,
actually, Twitter Bootstrap

860
00:35:59,370 --> 00:36:01,770
might be, in most of
the cases, easier.

861
00:36:01,770 --> 00:36:04,240
Because you can just
take the CSS--

862
00:36:04,240 --> 00:36:04,600
BRAD GREEN: That's right.

863
00:36:04,600 --> 00:36:06,390
VOJTA JINA: --and do the
JavaScript part with Angular,

864
00:36:06,390 --> 00:36:09,430
which is actually way
easier and faster.

865
00:36:09,430 --> 00:36:10,400
So I think that--

866
00:36:10,400 --> 00:36:10,520
BRAD GREEN: Yeah.

867
00:36:10,520 --> 00:36:12,770
We are big fans of Twitter
Bootstrap for that reason.

868
00:36:12,770 --> 00:36:14,940
And it looks great.

869
00:36:14,940 --> 00:36:17,480
PETE LEPAGE: It is
very pretty.

870
00:36:17,480 --> 00:36:18,650
We're almost out of time.

871
00:36:18,650 --> 00:36:21,460
I want to encourage anybody to
add any other questions they

872
00:36:21,460 --> 00:36:23,530
have to our moderator page.

873
00:36:23,530 --> 00:36:27,800
But one of the things that I
wanted to say is, in the

874
00:36:27,800 --> 00:36:32,670
learning that you guys have been
doing building Angular,

875
00:36:32,670 --> 00:36:35,770
and building Chrome apps, what's
the biggest learning

876
00:36:35,770 --> 00:36:39,600
thing that you guys have taken
away in terms of building a

877
00:36:39,600 --> 00:36:42,770
Chrome app that you think
our viewers would

878
00:36:42,770 --> 00:36:43,960
learn the most from?

879
00:36:43,960 --> 00:36:45,065
BRAD GREEN: Vojta, you
did all the work.

880
00:36:45,065 --> 00:36:46,520
So maybe you should answer.

881
00:36:46,520 --> 00:36:48,420
VOJTA JINA: Well, I think
we mentioned pretty

882
00:36:48,420 --> 00:36:49,170
much all the stuff.

883
00:36:49,170 --> 00:36:53,080
So with regards to Angular,
definitely keeping controllers

884
00:36:53,080 --> 00:36:55,460
light, and putting more
stuff into services.

885
00:36:55,460 --> 00:36:56,710
That's one thing I learned.

886
00:36:56,710 --> 00:36:59,630

887
00:36:59,630 --> 00:37:00,040
I learned--

888
00:37:00,040 --> 00:37:01,440
BRAD GREEN: What do you think
about building an app

889
00:37:01,440 --> 00:37:03,315
versus a web app?

890
00:37:03,315 --> 00:37:04,565
Anything specific there?

891
00:37:04,565 --> 00:37:08,330

892
00:37:08,330 --> 00:37:10,140
VOJTA JINA: I don't know.

893
00:37:10,140 --> 00:37:15,290
I ended up wrapping all the APIs
into services very often,

894
00:37:15,290 --> 00:37:18,800
so that I have just really
tiny wrapper around the

895
00:37:18,800 --> 00:37:22,020
service that I can mock
up around the service.

896
00:37:22,020 --> 00:37:24,530
BRAD GREEN: This was good,
because sometimes there is a

897
00:37:24,530 --> 00:37:29,380
difference between running it as
a web app and running it as

898
00:37:29,380 --> 00:37:31,600
an app on Chrome OS.

899
00:37:31,600 --> 00:37:32,410
VOJTA JINA: Good point.

900
00:37:32,410 --> 00:37:34,990
BRAD GREEN: And this dependency
injection will

901
00:37:34,990 --> 00:37:38,850
allow you to switch it in a
very, very transparent way.

902
00:37:38,850 --> 00:37:40,260
VOJTA JINA: I think we have
a good example of that.

903
00:37:40,260 --> 00:37:42,150
And that's actually
the storage.

904
00:37:42,150 --> 00:37:46,460
Because we said we are using
Chrome Storage Sync.

905
00:37:46,460 --> 00:37:51,470
But if you ran this code just in
regular Chrome, there is no

906
00:37:51,470 --> 00:37:52,800
Chrome Storage.

907
00:37:52,800 --> 00:37:57,960
So we fall back, and we
use local storage.

908
00:37:57,960 --> 00:38:01,940
Let me actually open this up.

909
00:38:01,940 --> 00:38:04,840
The local storage is completely
synchronous.

910
00:38:04,840 --> 00:38:08,910
But Chrome Storage Sync is
completely asynchronous.

911
00:38:08,910 --> 00:38:11,760
And you don't want to have
service that is sometimes

912
00:38:11,760 --> 00:38:13,500
synchronous and sometimes
asynchronous.

913
00:38:13,500 --> 00:38:14,050
PETE LEPAGE: Right.

914
00:38:14,050 --> 00:38:14,630
VOJTA JINA: That
kind of sucks.

915
00:38:14,630 --> 00:38:16,580
And it's difficult to
work with that.

916
00:38:16,580 --> 00:38:23,210
So what I did is just wrapping
this service, and basically

917
00:38:23,210 --> 00:38:24,490
creating wrapper.

918
00:38:24,490 --> 00:38:27,280
So that even the local storage
is asynchronous.

919
00:38:27,280 --> 00:38:28,870
And the rest of your
app doesn't have

920
00:38:28,870 --> 00:38:29,620
to worry about that.

921
00:38:29,620 --> 00:38:31,620
It's just asynchronous
all the time.

922
00:38:31,620 --> 00:38:34,670
BRAD GREEN: We did an impedance
matching exercise,

923
00:38:34,670 --> 00:38:37,745
so that you can run as
an app or on the web

924
00:38:37,745 --> 00:38:38,710
with the same code.

925
00:38:38,710 --> 00:38:41,730
VOJTA JINA: And again, with
dependency injection, you have

926
00:38:41,730 --> 00:38:43,780
these two versions
of this service.

927
00:38:43,780 --> 00:38:47,740
And you just inject whatever
version you need, depending on

928
00:38:47,740 --> 00:38:48,450
the platform.

929
00:38:48,450 --> 00:38:50,160
BRAD GREEN: It's a lot cleaner
than having a big switch

930
00:38:50,160 --> 00:38:52,530
statement, or a whole bunch
of ifs all over your code.

931
00:38:52,530 --> 00:38:55,670
VOJTA JINA: Better than having
one storage with a lot of ifs.

932
00:38:55,670 --> 00:38:57,270
I think it's easier to read.

933
00:38:57,270 --> 00:38:57,980
PETE LEPAGE: Cool.

934
00:38:57,980 --> 00:38:59,190
Well, I want to thank
you guys.

935
00:38:59,190 --> 00:39:01,510
We're pretty much out of
time at this point.

936
00:39:01,510 --> 00:39:04,260
And you guys have done, I think,
a really great job of

937
00:39:04,260 --> 00:39:07,650
introducing our viewers to
Angular, and talking about

938
00:39:07,650 --> 00:39:09,020
some of the learnings
that you've had

939
00:39:09,020 --> 00:39:11,020
building Chrome apps.

940
00:39:11,020 --> 00:39:14,880
As well as where they can go
learn more information about

941
00:39:14,880 --> 00:39:18,330
taking TextDrive apart and
using it themselves,

942
00:39:18,330 --> 00:39:22,010
understanding how it works, and
some of the best practices

943
00:39:22,010 --> 00:39:23,810
for building Chrome apps.

944
00:39:23,810 --> 00:39:27,860
We're going back again next
week, next Tuesday, same time.

945
00:39:27,860 --> 00:39:30,470
We're just figuring out
what our plan for next

946
00:39:30,470 --> 00:39:31,780
week is right now.

947
00:39:31,780 --> 00:39:35,500
But today, most of the other
guys who you're used to seeing

948
00:39:35,500 --> 00:39:38,060
aren't here, because we're
doing a hackathon.

949
00:39:38,060 --> 00:39:41,120
And we've got a whole bunch of
people who are sitting down,

950
00:39:41,120 --> 00:39:43,430
building apps, doing some
really cool stuff.

951
00:39:43,430 --> 00:39:46,400
So I think, probably next week,
we'll spend a little bit

952
00:39:46,400 --> 00:39:50,210
of time talking about the cool
stuff that everybody built,

953
00:39:50,210 --> 00:39:53,210
some of the lessons learned,
and giving you some of the

954
00:39:53,210 --> 00:39:57,030
great lessons, and showing off
some really cool things.

955
00:39:57,030 --> 00:40:00,030
So with that, I want to say
thank you to Brad and Vojta.

956
00:40:00,030 --> 00:40:02,320
And thank you for tuning
in and watching.

957
00:40:02,320 --> 00:40:04,000
And we'll join you next week.

958
00:40:04,000 --> 00:40:04,720
BRAD GREEN: Thanks
for having us.

959
00:40:04,720 --> 00:40:05,690
This was fun.

960
00:40:05,690 --> 00:40:06,500
VOJTA JINA: Thanks
for having us.

961
00:40:06,500 --> 00:40:07,470
PETE LEPAGE: Thanks,
everybody.

962
00:40:07,470 --> 00:40:08,720
Bye-bye.

963
00:40:08,720 --> 00:40:39,467

