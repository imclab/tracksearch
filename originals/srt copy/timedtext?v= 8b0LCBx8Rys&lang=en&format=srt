1
00:00:00,000 --> 00:00:01,690

2
00:00:01,690 --> 00:00:02,820
PAUL KINLAN: Hi, everyone.

3
00:00:02,820 --> 00:00:03,700
I'm Paul Kinlan.

4
00:00:03,700 --> 00:00:05,960
And I'm with Paul Lewis today.

5
00:00:05,960 --> 00:00:06,500
PAUL LEWIS: Hello.

6
00:00:06,500 --> 00:00:07,220
PAUL KINLAN: Hello.

7
00:00:07,220 --> 00:00:09,150
And we're here from
sunny London?

8
00:00:09,150 --> 00:00:10,040
Rainy London?

9
00:00:10,040 --> 00:00:11,080
PAUL LEWIS: Miserable London,
to be honest.

10
00:00:11,080 --> 00:00:12,370
PAUL KINLAN: Yes, it's
a little bit crazy.

11
00:00:12,370 --> 00:00:17,200
And today we are talking about
Chrome Apps and Web Intents.

12
00:00:17,200 --> 00:00:18,890
Our normal producer, Peter--

13
00:00:18,890 --> 00:00:20,170
Paul, I was going to say.

14
00:00:20,170 --> 00:00:21,070
PAUL LEWIS: Another Paul.

15
00:00:21,070 --> 00:00:23,040
Let's be honest, it's easier
if everybody's called Paul.

16
00:00:23,040 --> 00:00:25,685
We say this every week and it's
actually true, easier if

17
00:00:25,685 --> 00:00:26,110
everybody's a Paul.

18
00:00:26,110 --> 00:00:27,790
So let's just call
him Paul LePage.

19
00:00:27,790 --> 00:00:28,740
PAUL KINLAN: Paul LePage?

20
00:00:28,740 --> 00:00:29,330
Peter LePage.

21
00:00:29,330 --> 00:00:29,750
PAUL LEWIS: Peter LePage,
all right.

22
00:00:29,750 --> 00:00:30,920
PAUL KINLAN: So anyway,
we're in our

23
00:00:30,920 --> 00:00:32,350
brand New London studio.

24
00:00:32,350 --> 00:00:33,320
It's pretty cool.

25
00:00:33,320 --> 00:00:34,050
We pretty like it.

26
00:00:34,050 --> 00:00:35,580
It's like a little pod.

27
00:00:35,580 --> 00:00:37,630
And we're two Pauls, so
it's like two peas.

28
00:00:37,630 --> 00:00:38,480
PAUL LEWIS: Two Pauls
in a pod?

29
00:00:38,480 --> 00:00:38,800
PAUL KINLAN: Yes.

30
00:00:38,800 --> 00:00:39,470
PAUL LEWIS: Yes.

31
00:00:39,470 --> 00:00:41,060
PAUL KINLAN: I've been planning
that joke all day,

32
00:00:41,060 --> 00:00:42,290
not telling anyone about this.

33
00:00:42,290 --> 00:00:44,540
PAUL LEWIS: And you've just
dropped it, boom.

34
00:00:44,540 --> 00:00:45,160
PAUL KINLAN: Yes.

35
00:00:45,160 --> 00:00:48,820
So anyway, yes, let's get
started properly.

36
00:00:48,820 --> 00:00:49,330
PAUL LEWIS: Absolutely.

37
00:00:49,330 --> 00:00:51,380
PAUL KINLAN: We're going to talk
about Web Intents and how

38
00:00:51,380 --> 00:00:53,265
Web Intents is a core
integral part of

39
00:00:53,265 --> 00:00:55,320
the Chrome Apps ecosystem.

40
00:00:55,320 --> 00:00:58,150
So over the last couple of
weeks we've been running

41
00:00:58,150 --> 00:00:59,440
Chrome App sessions.

42
00:00:59,440 --> 00:01:01,710
Chrome Apps are a way that we're
trying to make these web

43
00:01:01,710 --> 00:01:02,380
applications--

44
00:01:02,380 --> 00:01:05,030
applications that you develop
normally [? with ?]

45
00:01:05,030 --> 00:01:07,050
HTML, JavaScript, and CSS--

46
00:01:07,050 --> 00:01:09,350
look and feel native on
the user's system.

47
00:01:09,350 --> 00:01:11,130
And one of the things that
we've been pushing inside

48
00:01:11,130 --> 00:01:14,750
Chrome at least is the
idea of Web Intents.

49
00:01:14,750 --> 00:01:16,400
So what are Web Intents?

50
00:01:16,400 --> 00:01:17,060
PAUL LEWIS: That's
a good question.

51
00:01:17,060 --> 00:01:18,030
What are Web Intents?

52
00:01:18,030 --> 00:01:19,030
PAUL KINLAN: Yes.

53
00:01:19,030 --> 00:01:20,070
PAUL LEWIS: They sort
of fall into two

54
00:01:20,070 --> 00:01:20,860
categories, don't they?

55
00:01:20,860 --> 00:01:23,350
Like inter-application
communication is one of things

56
00:01:23,350 --> 00:01:26,090
that you use it for, and
application discovery.

57
00:01:26,090 --> 00:01:26,410
PAUL KINLAN: Yes.

58
00:01:26,410 --> 00:01:28,170
PAUL LEWIS: Shall we nail
each one in turn?

59
00:01:28,170 --> 00:01:29,540
PAUL KINLAN: Yes, shall
we do that?

60
00:01:29,540 --> 00:01:31,790
So we'll start off with
a little quick demo.

61
00:01:31,790 --> 00:01:33,830
We have a nice little video
transition effect as well,

62
00:01:33,830 --> 00:01:35,840
which is going to be pretty cool
if we do it correctly.

63
00:01:35,840 --> 00:01:36,315
Look at that.

64
00:01:36,315 --> 00:01:37,210
PAUL LEWIS: Nice.

65
00:01:37,210 --> 00:01:38,500
PAUL KINLAN: That
was pretty cool.

66
00:01:38,500 --> 00:01:39,570
So this is my screen.

67
00:01:39,570 --> 00:01:42,410
And I'm going to show you some
stuff about Web Intents.

68
00:01:42,410 --> 00:01:44,910
So we have a basic application
called Imagemator.

69
00:01:44,910 --> 00:01:46,350
And it's a simple application.

70
00:01:46,350 --> 00:01:48,210
It doesn't do much other
than trying to

71
00:01:48,210 --> 00:01:50,180
orchestrate actions on images.

72
00:01:50,180 --> 00:01:52,550
Now with a traditional
application, when you build

73
00:01:52,550 --> 00:01:54,970
integrations to third-party
systems like, say, Google

74
00:01:54,970 --> 00:01:58,880
Drive, you have to do a deep
JavaScript-based or maybe a

75
00:01:58,880 --> 00:02:00,990
server-side-based integration
with the service.

76
00:02:00,990 --> 00:02:01,164
PAUL LEWIS: Right.

77
00:02:01,164 --> 00:02:04,050
So you've got like tokens, and
all these API requests, and

78
00:02:04,050 --> 00:02:05,470
there's just tons of work.

79
00:02:05,470 --> 00:02:07,720
And this is like per service
or per application that you

80
00:02:07,720 --> 00:02:09,020
want to integrate with, right?

81
00:02:09,020 --> 00:02:09,270
PAUL KINLAN: Yeah.

82
00:02:09,270 --> 00:02:10,100
So hopefully this will work.

83
00:02:10,100 --> 00:02:12,320
I just realized I've deleted
all my extensions.

84
00:02:12,320 --> 00:02:13,080
So this might work.

85
00:02:13,080 --> 00:02:14,980
So Cloud File Picker,
this is an

86
00:02:14,980 --> 00:02:15,790
application that we've installed.

87
00:02:15,790 --> 00:02:17,590
PAUL LEWIS: So all you did there
was you just clicked on

88
00:02:17,590 --> 00:02:20,726
the box and Chrome's
taken over.

89
00:02:20,726 --> 00:02:23,060
PAUL KINLAN: So basically our
application has asked Chrome

90
00:02:23,060 --> 00:02:25,060
for a list of applications that
support the ability to

91
00:02:25,060 --> 00:02:25,950
pick an image from somewhere.

92
00:02:25,950 --> 00:02:26,780
PAUL LEWIS: Ah-ha, OK.

93
00:02:26,780 --> 00:02:28,120
PAUL KINLAN: So it's
pretty cool.

94
00:02:28,120 --> 00:02:31,260
And as you can see we hactually
have-- actually?

95
00:02:31,260 --> 00:02:32,400
PAUL LEWIS: Hactually.

96
00:02:32,400 --> 00:02:34,580
PAUL KINLAN: We have no
applications installed, so

97
00:02:34,580 --> 00:02:35,860
we'll go and install one.

98
00:02:35,860 --> 00:02:37,850
This list comes from the
Chrome Web Store.

99
00:02:37,850 --> 00:02:40,290
Applications in the Chrome Web
Store can declare their

100
00:02:40,290 --> 00:02:43,420
intent, what they can support,
actions that they can support.

101
00:02:43,420 --> 00:02:45,800
So this application is saying
that I can support the ability

102
00:02:45,800 --> 00:02:47,890
to pick an image
from somewhere.

103
00:02:47,890 --> 00:02:48,790
So I'll add it in.

104
00:02:48,790 --> 00:02:50,080
We'll launch our application.

105
00:02:50,080 --> 00:02:52,960
And if I'm all logged in, oh,
here we go, this is awesome.

106
00:02:52,960 --> 00:02:54,696
Let's pick that image.

107
00:02:54,696 --> 00:02:57,870
I believe I have copyright
to that image.

108
00:02:57,870 --> 00:02:59,625
So we brought our image
into our application.

109
00:02:59,625 --> 00:03:00,570
It's pretty cool.

110
00:03:00,570 --> 00:03:01,490
We can do some of this stuff.

111
00:03:01,490 --> 00:03:03,880
So we can say, I'm going
to edit this image.

112
00:03:03,880 --> 00:03:06,520
So we ask again, the browser,
to say are there a list of

113
00:03:06,520 --> 00:03:09,610
applications that I can
use to edit images.

114
00:03:09,610 --> 00:03:11,360
And again, in this case,
there aren't any.

115
00:03:11,360 --> 00:03:12,610
But we can install one.

116
00:03:12,610 --> 00:03:15,930

117
00:03:15,930 --> 00:03:16,625
And then we go.

118
00:03:16,625 --> 00:03:20,590
So, Hello.

119
00:03:20,590 --> 00:03:21,310
You can see it's
updated there.

120
00:03:21,310 --> 00:03:24,025
We're just going to send it
back to our application.

121
00:03:24,025 --> 00:03:25,330
Hello.

122
00:03:25,330 --> 00:03:27,300
PAUL LEWIS: So that happened
really quickly.

123
00:03:27,300 --> 00:03:30,390
So what happened was, you
dispatched an intent.

124
00:03:30,390 --> 00:03:32,290
The first intent was like,
hey, are there any

125
00:03:32,290 --> 00:03:35,270
applications that can
pick images for me?

126
00:03:35,270 --> 00:03:37,360
And then the second thing, once
you've got the image data

127
00:03:37,360 --> 00:03:39,620
back is you said, is there
anything out there that can

128
00:03:39,620 --> 00:03:40,870
also edit images for me?

129
00:03:40,870 --> 00:03:41,150
PAUL KINLAN: Yes.

130
00:03:41,150 --> 00:03:41,850
PAUL LEWIS: Right.

131
00:03:41,850 --> 00:03:45,440
And so then when it sent it off
to Mememator, it made the

132
00:03:45,440 --> 00:03:48,120
changes, and it sent the data
back, the updated image back

133
00:03:48,120 --> 00:03:49,720
to your Imagemator application,
right?

134
00:03:49,720 --> 00:03:49,960
PAUL KINLAN: Yes.

135
00:03:49,960 --> 00:03:52,150
PAUL LEWIS: And all the
communication there, the

136
00:03:52,150 --> 00:03:53,890
inter-application communication,
was done with

137
00:03:53,890 --> 00:03:54,460
Web Intents.

138
00:03:54,460 --> 00:03:56,640
PAUL KINLAN: Web Intents or
JavaScript inside the client.

139
00:03:56,640 --> 00:03:59,420
PAUL LEWIS: Wait, if only, is
the code simple to use?

140
00:03:59,420 --> 00:04:01,300
PAUL KINLAN: The code is
very simple, my friend.

141
00:04:01,300 --> 00:04:02,690
PAUL LEWIS: Oh, it's
a dream come true.

142
00:04:02,690 --> 00:04:04,470
PAUL KINLAN: So let's
have a quick look.

143
00:04:04,470 --> 00:04:08,330
So index.js, there's about
30 lines of code in this

144
00:04:08,330 --> 00:04:09,350
application.

145
00:04:09,350 --> 00:04:12,340
And all we really have to do is
ignore the fact that I've

146
00:04:12,340 --> 00:04:13,690
called startActivity.call.

147
00:04:13,690 --> 00:04:16,420
I've just been playing around
with different syntax methods.

148
00:04:16,420 --> 00:04:19,060
But essentially, we just called
startActivity on an

149
00:04:19,060 --> 00:04:21,940
object, or on the
window.navigator object.

150
00:04:21,940 --> 00:04:24,490
PAUL LEWIS: So we call
window.navigator.startActivity,

151
00:04:24,490 --> 00:04:26,320
and it looks like the second
parameter that you've got

152
00:04:26,320 --> 00:04:27,720
there is the intent itself.

153
00:04:27,720 --> 00:04:29,320
PAUL KINLAN: Yes, so we've
defined the intent here.

154
00:04:29,320 --> 00:04:30,400
This is the old syntax.

155
00:04:30,400 --> 00:04:32,830
And we're going to show you
today building a proper

156
00:04:32,830 --> 00:04:36,350
Chrome, not a normal web app,
a Chrome App, exactly what's

157
00:04:36,350 --> 00:04:38,170
going to happen and the way that
we're kind of pushing the

158
00:04:38,170 --> 00:04:39,160
spec forward.

159
00:04:39,160 --> 00:04:44,130
But we have an intent object
with the type pick of image.

160
00:04:44,130 --> 00:04:46,190
So we've basically asked the
browser, is there a service

161
00:04:46,190 --> 00:04:47,690
out there that can
pick images?

162
00:04:47,690 --> 00:04:49,740
PAUL LEWIS: Huh, so really we're
talking about two lines

163
00:04:49,740 --> 00:04:50,650
of code here, right?

164
00:04:50,650 --> 00:04:52,500
We've got this create an intent,
which we sort of

165
00:04:52,500 --> 00:04:55,380
define these things, and I
guess we're going to talk

166
00:04:55,380 --> 00:04:56,570
about what those are.

167
00:04:56,570 --> 00:04:59,350
And then the next things to say
to navigator.startActivity

168
00:04:59,350 --> 00:05:02,015
with that intent, and it goes
off and does the thing.

169
00:05:02,015 --> 00:05:03,860
That looks pretty easy
to me, mate.

170
00:05:03,860 --> 00:05:04,190
PAUL KINLAN: It is.

171
00:05:04,190 --> 00:05:06,010
It is pretty easy.

172
00:05:06,010 --> 00:05:09,990
The interesting thing is that
the way that we've been kind

173
00:05:09,990 --> 00:05:12,480
of pushing Web Intents
is that actually this

174
00:05:12,480 --> 00:05:13,680
is all on the web.

175
00:05:13,680 --> 00:05:16,830
So it's like HTML-based web
applications are HTML-based

176
00:05:16,830 --> 00:05:17,960
applications.

177
00:05:17,960 --> 00:05:20,170
And a lot of people asked for
the ability to bridge to

178
00:05:20,170 --> 00:05:21,930
native applications.

179
00:05:21,930 --> 00:05:25,480
So they want to kind of talk
to their Photoshop, those

180
00:05:25,480 --> 00:05:26,230
types of apps.

181
00:05:26,230 --> 00:05:29,140
And whilst we don't have that
direct bridge right now,

182
00:05:29,140 --> 00:05:31,790
Chrome Applications is like
the next step along where

183
00:05:31,790 --> 00:05:34,250
Chrome applications look and
feel like they're installed,

184
00:05:34,250 --> 00:05:36,530
or they will do, not right now
on the Mac, but we're going to

185
00:05:36,530 --> 00:05:38,130
go through this in
a bit as well.

186
00:05:38,130 --> 00:05:39,400
But they'll look like
they're native

187
00:05:39,400 --> 00:05:40,890
applications on the system.

188
00:05:40,890 --> 00:05:43,620
So you could launch an
application from your browser

189
00:05:43,620 --> 00:05:45,470
and it would look like it's
just talking to a normal

190
00:05:45,470 --> 00:05:46,420
native app and it's

191
00:05:46,420 --> 00:05:48,520
communicating over Web Intents.

192
00:05:48,520 --> 00:05:48,980
PAUL LEWIS: Nice.

193
00:05:48,980 --> 00:05:52,250
PAUL KINLAN: So it's
pretty cool.

194
00:05:52,250 --> 00:05:53,610
I think we should start with
the demo though, shall we?

195
00:05:53,610 --> 00:05:55,480
PAUL LEWIS: Oh yeah, actually
show how to do this?

196
00:05:55,480 --> 00:05:56,120
Yeah.

197
00:05:56,120 --> 00:05:57,280
PAUL KINLAN: So the first
thing that most

198
00:05:57,280 --> 00:05:58,580
people want to do is--

199
00:05:58,580 --> 00:06:00,060
Well, I'll back up
a little bit.

200
00:06:00,060 --> 00:06:01,700
There are two things that
normally happen.

201
00:06:01,700 --> 00:06:05,400
One, an application broadcasts
like a request out, say, hey,

202
00:06:05,400 --> 00:06:06,850
I need to share this link.

203
00:06:06,850 --> 00:06:08,410
And then there's another
application on the other side

204
00:06:08,410 --> 00:06:11,210
which says, I can receive links
that are sent to me.

205
00:06:11,210 --> 00:06:13,670
And we're going to start with
the first one, basically.

206
00:06:13,670 --> 00:06:15,945
We're going to start with the
ability to actually share a

207
00:06:15,945 --> 00:06:18,410
link out to another
application.

208
00:06:18,410 --> 00:06:20,510
And this application could be
a website or it could be a

209
00:06:20,510 --> 00:06:23,260
native or, say, a Chrome
App at least.

210
00:06:23,260 --> 00:06:24,600
So we'll start.

211
00:06:24,600 --> 00:06:28,470
Hopefully everyone can
see my screen OK.

212
00:06:28,470 --> 00:06:29,580
I'm going to jump down a little
bit because I think

213
00:06:29,580 --> 00:06:31,335
we've got my face in the way.

214
00:06:31,335 --> 00:06:33,640
But we'll start off
with yeoman.

215
00:06:33,640 --> 00:06:34,720
Actually, we won't start
with yeoman.

216
00:06:34,720 --> 00:06:39,550
We'll make a directory
called invoke.

217
00:06:39,550 --> 00:06:41,760
You need to tell me if I make
any spelling mistakes.

218
00:06:41,760 --> 00:06:42,200
PAUL LEWIS: I'm watching.

219
00:06:42,200 --> 00:06:43,370
All eyes on you, mate.

220
00:06:43,370 --> 00:06:44,043
PAUL KINLAN: Like a hawk.

221
00:06:44,043 --> 00:06:44,830
PAUL LEWIS: All right.

222
00:06:44,830 --> 00:06:47,180
PAUL KINLAN: So invoke, so we're
now in that directory.

223
00:06:47,180 --> 00:06:49,660
We'll use a tool that Addy
Osmani and Paul Irish built

224
00:06:49,660 --> 00:06:50,680
through the [? Wii ?]
called Yeoman.

225
00:06:50,680 --> 00:06:53,080
PAUL LEWIS: Yeoman.io, if you
have not come across it, it's

226
00:06:53,080 --> 00:06:55,890
a brilliant way of creating
your apps.

227
00:06:55,890 --> 00:06:57,400
So you should definitely
check that out.

228
00:06:57,400 --> 00:06:57,640
PAUL KINLAN: Yes.

229
00:06:57,640 --> 00:07:00,780
So basically, we're using Yeoman
to bootstrap all the

230
00:07:00,780 --> 00:07:03,720
kind of legwork that you need
to make your Chrome App.

231
00:07:03,720 --> 00:07:06,480
So we'll start off with
this, yeoman init.

232
00:07:06,480 --> 00:07:08,390
And what should we call
the application?

233
00:07:08,390 --> 00:07:09,360
PAUL LEWIS: Invoke.

234
00:07:09,360 --> 00:07:11,144
PAUL KINLAN: Invoke?

235
00:07:11,144 --> 00:07:14,840
Yeah, that's it, Invoke.

236
00:07:14,840 --> 00:07:16,430
App is the description.

237
00:07:16,430 --> 00:07:18,160
And then it's going to ask me
about the different types of

238
00:07:18,160 --> 00:07:19,260
API I want to use.

239
00:07:19,260 --> 00:07:21,430
PAUL LEWIS: So would this create
the manifest for you?

240
00:07:21,430 --> 00:07:21,770
PAUL KINLAN: Yes.

241
00:07:21,770 --> 00:07:25,150
So Chrome Applications come with
a manifest, some icons,

242
00:07:25,150 --> 00:07:27,240
some localized descriptions.

243
00:07:27,240 --> 00:07:29,350
If we look at this now, so we'll
just go into the app

244
00:07:29,350 --> 00:07:31,230
directory and clear
the screen.

245
00:07:31,230 --> 00:07:32,510
We'll do ls.

246
00:07:32,510 --> 00:07:33,765
We have the locals directory.

247
00:07:33,765 --> 00:07:35,896
The two icons we need
are a 16 pixel icon

248
00:07:35,896 --> 00:07:38,060
and a 128 pixel icon.

249
00:07:38,060 --> 00:07:41,420
The index file and some of the
kind of bootstrap code.

250
00:07:41,420 --> 00:07:41,880
PAUL LEWIS: Cool.

251
00:07:41,880 --> 00:07:44,820
So if you've been watching over
the past few weeks, one

252
00:07:44,820 --> 00:07:48,440
of the first ones we did, first
sessions, we created a

253
00:07:48,440 --> 00:07:49,880
Hello World application.

254
00:07:49,880 --> 00:07:53,680
And we've just done pretty much
the same deal in one line

255
00:07:53,680 --> 00:07:55,160
on the command line, which
is pretty neat.

256
00:07:55,160 --> 00:07:55,525
PAUL KINLAN: So we
should probably

257
00:07:55,525 --> 00:07:56,775
load this up, I think.

258
00:07:56,775 --> 00:07:59,810

259
00:07:59,810 --> 00:08:03,530
Desktop, WebIntentsLiveDemos,
Intents this is my little

260
00:08:03,530 --> 00:08:07,680
folder for doing all
things live.

261
00:08:07,680 --> 00:08:09,540
There we are, Invoke.

262
00:08:09,540 --> 00:08:12,040
We'll see the application
called Invoke here.

263
00:08:12,040 --> 00:08:14,310
We invoke it and it doesn't
do much at all, right?

264
00:08:14,310 --> 00:08:15,940
It's just a screen.

265
00:08:15,940 --> 00:08:18,850
It's a window screen
that looks--

266
00:08:18,850 --> 00:08:19,870
PAUL LEWIS: Pretty blank,
to be honest.

267
00:08:19,870 --> 00:08:21,160
PAUL KINLAN: --pretty blank,
pretty boring.

268
00:08:21,160 --> 00:08:21,750
PAUL LEWIS: Like your face.

269
00:08:21,750 --> 00:08:22,860
PAUL KINLAN: Should we
make it was cool?

270
00:08:22,860 --> 00:08:23,220
Like my face?

271
00:08:23,220 --> 00:08:24,280
PAUL LEWIS: Like your
face most days.

272
00:08:24,280 --> 00:08:24,670
PAUL KINLAN: Nice.

273
00:08:24,670 --> 00:08:25,390
Thanks, man.

274
00:08:25,390 --> 00:08:26,230
PAUL LEWIS: No worry, bro.

275
00:08:26,230 --> 00:08:29,212
PAUL KINLAN: Burn me live in
front of millions of people,

276
00:08:29,212 --> 00:08:32,409
thousands of people, I don't
know how many we got.

277
00:08:32,409 --> 00:08:34,330
Anyway, let's get going
with the code right.

278
00:08:34,330 --> 00:08:37,309
So essentially, this
is our application.

279
00:08:37,309 --> 00:08:40,720
We want to add a button which
shares, invokes the intent.

280
00:08:40,720 --> 00:08:42,210
But we want to kind of share
some data with it.

281
00:08:42,210 --> 00:08:47,290
So we'll have an input type
equals URL, call URL, and then

282
00:08:47,290 --> 00:08:49,820
we'll just share the out.

283
00:08:49,820 --> 00:08:51,610
I'll say up front, some of this
code is not going to be

284
00:08:51,610 --> 00:08:52,740
the sexiest code.

285
00:08:52,740 --> 00:08:55,561
We're not going to use
addEventListener, and all that

286
00:08:55,561 --> 00:08:56,410
type of stuff.

287
00:08:56,410 --> 00:08:59,190
We're just going to kind of do
it as quickly as possible.

288
00:08:59,190 --> 00:09:03,400
So let's view the index file.

289
00:09:03,400 --> 00:09:06,000
As we can see, we just
have an Invoke.

290
00:09:06,000 --> 00:09:08,940
It looks like what we saw on
the screen a minute ago.

291
00:09:08,940 --> 00:09:16,680
So let's add this in, script
source="index.js." I'm doing

292
00:09:16,680 --> 00:09:18,386
this for a very special
reason.

293
00:09:18,386 --> 00:09:20,610
PAUL LEWIS: Which would be
presumably Content Security

294
00:09:20,610 --> 00:09:21,420
Policy, my friend.

295
00:09:21,420 --> 00:09:23,330
PAUL KINLAN: Indeed, Content
Security Policy.

296
00:09:23,330 --> 00:09:25,890
So Content Security Policy
means you can't inline

297
00:09:25,890 --> 00:09:26,950
JavaScript.

298
00:09:26,950 --> 00:09:29,025
We have this in Chrome
applications because Chrome

299
00:09:29,025 --> 00:09:31,970
Apps have elevated access to
APIs which we would never

300
00:09:31,970 --> 00:09:33,490
normally have on a webpage.

301
00:09:33,490 --> 00:09:35,620
And we don't want people
to do script injection.

302
00:09:35,620 --> 00:09:37,880
So you have to hide everything
in your own script.

303
00:09:37,880 --> 00:09:39,130
So let's, index.js.

304
00:09:39,130 --> 00:09:43,690

305
00:09:43,690 --> 00:09:44,500
Now, what was the code?

306
00:09:44,500 --> 00:09:45,750
So that's our JavaScript code.

307
00:09:45,750 --> 00:09:48,520

308
00:09:48,520 --> 00:09:51,370
Make sure the file is made.

309
00:09:51,370 --> 00:10:00,240
Let's put input type="url,"
id="url." There we are.

310
00:10:00,240 --> 00:10:03,280
So that's our input type.

311
00:10:03,280 --> 00:10:08,470
Let's save that, go back,
standards HTML kind of things

312
00:10:08,470 --> 00:10:10,160
that you'd expect.

313
00:10:10,160 --> 00:10:16,570
Let's make a button, id="share,"
call it share, its

314
00:10:16,570 --> 00:10:17,860
original name again.

315
00:10:17,860 --> 00:10:19,630
PAUL LEWIS: That's what it
says on the tin though.

316
00:10:19,630 --> 00:10:21,190
PAUL KINLAN: Yeah, it does
what it says on the tin.

317
00:10:21,190 --> 00:10:23,860
So it's pretty bland,
pretty boring.

318
00:10:23,860 --> 00:10:24,840
But you'll see what happens.

319
00:10:24,840 --> 00:10:26,335
So let's onload.

320
00:10:26,335 --> 00:10:29,640

321
00:10:29,640 --> 00:10:32,180
So we're basically doing the
window dot onload event here.

322
00:10:32,180 --> 00:10:33,830
And all we're going to do
is hook up the events.

323
00:10:33,830 --> 00:10:36,450
PAUL LEWIS: So we're going
to capture the URL.

324
00:10:36,450 --> 00:10:40,780
And then we're going to say,
when you click on the share

325
00:10:40,780 --> 00:10:43,440
button, we'd now actually like
to invoke an intent to

326
00:10:43,440 --> 00:10:44,370
actually share.

327
00:10:44,370 --> 00:10:45,600
PAUL KINLAN: Yes,
exactly right.

328
00:10:45,600 --> 00:10:46,490
It's all pretty simple stuff.

329
00:10:46,490 --> 00:10:49,906
So var share equals.

330
00:10:49,906 --> 00:10:52,740
This is like when I write with
a pen and a piece of paper, I

331
00:10:52,740 --> 00:10:54,870
have to speak out every
single word.

332
00:10:54,870 --> 00:10:56,830
PAUL LEWIS: If I'm honest, I'm
terrified of paper nowadays

333
00:10:56,830 --> 00:10:59,050
because I can't Command
Z or Control Z

334
00:10:59,050 --> 00:11:00,085
when I write something.

335
00:11:00,085 --> 00:11:02,046
PAUL KINLAN: You ever get that
thing where your hand kind of

336
00:11:02,046 --> 00:11:03,530
like cramps up when you're
writing and you can't use it?

337
00:11:03,530 --> 00:11:04,830
PAUL LEWIS: I don't
write anymore.

338
00:11:04,830 --> 00:11:06,910
I haven't done this for years.

339
00:11:06,910 --> 00:11:10,770
PAUL KINLAN: Share.onclick, so
when the user clicks the share

340
00:11:10,770 --> 00:11:13,115
button, we'll call this
function, again, it's not the

341
00:11:13,115 --> 00:11:15,070
sexiest code in the world, but
var i = new WebKitIntent.

342
00:11:15,070 --> 00:11:18,150

343
00:11:18,150 --> 00:11:21,130
PAUL LEWIS: So why are
we prefixing that?

344
00:11:21,130 --> 00:11:23,660
PAUL KINLAN: So right now,
although we're working through

345
00:11:23,660 --> 00:11:26,296
the standardization process,
the thing that we do to be

346
00:11:26,296 --> 00:11:29,110
kind of good web citizens is we
prefix all the objects that

347
00:11:29,110 --> 00:11:30,980
we create from the spec.

348
00:11:30,980 --> 00:11:33,970
Just so that if the spec changes
and another browser

349
00:11:33,970 --> 00:11:37,080
vendor who's implemented the
specification updates theirs,

350
00:11:37,080 --> 00:11:38,690
then they're not relying
on what kind of

351
00:11:38,690 --> 00:11:39,640
this one intent object.

352
00:11:39,640 --> 00:11:42,780
They know that the WebKit intent
will be potentially to

353
00:11:42,780 --> 00:11:44,040
XYZ intent.

354
00:11:44,040 --> 00:11:46,170
PAUL LEWIS: So this is actually
like a spec piece of

355
00:11:46,170 --> 00:11:48,170
functionality that we're working
through right now.

356
00:11:48,170 --> 00:11:50,560
It's not like Chrome specific
or anything like that.

357
00:11:50,560 --> 00:11:52,585
It's just that we've
implemented

358
00:11:52,585 --> 00:11:53,420
it with Chrome Apps.

359
00:11:53,420 --> 00:11:55,050
PAUL KINLAN: Yes, exactly.

360
00:11:55,050 --> 00:12:00,450
So what I'm doing now is I'm
passing in a special object

361
00:12:00,450 --> 00:12:03,450
into the WebKit intent
constructor.

362
00:12:03,450 --> 00:12:05,740
And basically, this object
just describes some basic

363
00:12:05,740 --> 00:12:09,150
information about what we're
looking for on the system.

364
00:12:09,150 --> 00:12:10,800
So we're going to look
for an action of

365
00:12:10,800 --> 00:12:16,005
webintents.org/share.

366
00:12:16,005 --> 00:12:19,770
PAUL LEWIS: So the question I
was going to ask is the fact

367
00:12:19,770 --> 00:12:22,950
that you've used webintents.org
as the action.

368
00:12:22,950 --> 00:12:25,110
So first of all, why is it
a URL in the action?

369
00:12:25,110 --> 00:12:26,600
And second of all, does
it have to be a

370
00:12:26,600 --> 00:12:28,740
webintent.org URL.

371
00:12:28,740 --> 00:12:29,430
PAUL KINLAN: Yeah,
good question.

372
00:12:29,430 --> 00:12:31,500
So the answer is, well,
no, it doesn't.

373
00:12:31,500 --> 00:12:32,930
I'll start off the end, it
doesn't have to be just

374
00:12:32,930 --> 00:12:34,000
webintents.org.

375
00:12:34,000 --> 00:12:36,180
But essentially what happens is
when we ask the browser for

376
00:12:36,180 --> 00:12:39,815
a list of services, it does just
pure string match on all

377
00:12:39,815 --> 00:12:42,120
the services that have the
exact same action.

378
00:12:42,120 --> 00:12:44,940
So if nothing supports
webintents.org/share, then we

379
00:12:44,940 --> 00:12:46,760
won't find it in that list.

380
00:12:46,760 --> 00:12:49,630
The reason why we're using a
domain is because we think

381
00:12:49,630 --> 00:12:51,690
documentation is key
to the spec.

382
00:12:51,690 --> 00:12:55,850
So the idea is that the share
intent might live outside the

383
00:12:55,850 --> 00:12:59,990
W3C process defined in the
specification about how to

384
00:12:59,990 --> 00:13:02,950
transfer data across share, how
you should share images,

385
00:13:02,950 --> 00:13:05,740
how you should share video, and
all that type of stuff.

386
00:13:05,740 --> 00:13:08,820
So webintents.org/share
documents the best practices

387
00:13:08,820 --> 00:13:11,520
for sharing data.

388
00:13:11,520 --> 00:13:13,500
If another service provider
wants to do their own version

389
00:13:13,500 --> 00:13:14,880
of share, then that's fine.

390
00:13:14,880 --> 00:13:18,730
They could do like
XYZservice.com/share.

391
00:13:18,730 --> 00:13:21,930
The thing is that if someone
invokes webintents.org/share,

392
00:13:21,930 --> 00:13:24,120
any application that
has to do with XYZ

393
00:13:24,120 --> 00:13:26,350
won't be in that list.

394
00:13:26,350 --> 00:13:27,600
So that's all we're doing.

395
00:13:27,600 --> 00:13:29,490
We're basically just
prefixing it.

396
00:13:29,490 --> 00:13:32,520
It's kind of like in Android--

397
00:13:32,520 --> 00:13:36,500
or in Java, sorry, where you
have reverse domain notation,

398
00:13:36,500 --> 00:13:37,880
com. whatever it is.

399
00:13:37,880 --> 00:13:41,320
We're kind of trying to be webby
behind this whole fact.

400
00:13:41,320 --> 00:13:43,730
So text/html.

401
00:13:43,730 --> 00:13:46,920
So we're just going to assume
that it's like a URL to a HTML

402
00:13:46,920 --> 00:13:48,200
page that we're sharing
at the moment.

403
00:13:48,200 --> 00:13:49,540
PAUL LEWIS: So this is the MIME
type of the data that

404
00:13:49,540 --> 00:13:50,150
we're going to be sending out?

405
00:13:50,150 --> 00:13:50,630
PAUL KINLAN: Yes.

406
00:13:50,630 --> 00:13:52,140
And it doesn't have to
be a pure MIME type.

407
00:13:52,140 --> 00:13:53,560
It could be the word person.

408
00:13:53,560 --> 00:13:56,010
But again, what happens is we
find a list of services that

409
00:13:56,010 --> 00:13:59,030
support the action for share and
then we filter that list.

410
00:13:59,030 --> 00:14:01,100
Because there might be like 10,
20, 30 different services

411
00:14:01,100 --> 00:14:04,050
the user's got installed
for sharing data.

412
00:14:04,050 --> 00:14:05,280
But we want to be
quite specific.

413
00:14:05,280 --> 00:14:08,480
We want to find the services
that support this like sharing

414
00:14:08,480 --> 00:14:12,610
of links essentially, text/html,
HTML webpages.

415
00:14:12,610 --> 00:14:14,730
And the final thing is the
payload, is the actual piece

416
00:14:14,730 --> 00:14:16,500
of data that we want to share.

417
00:14:16,500 --> 00:14:20,720
So in this case, it's just
url.value, which, in theory,

418
00:14:20,720 --> 00:14:23,150
if all goes well, should
be the value

419
00:14:23,150 --> 00:14:25,012
that we put into the--

420
00:14:25,012 --> 00:14:27,980
PAUL LEWIS: Do you need
to actually start

421
00:14:27,980 --> 00:14:28,910
the activity on that?

422
00:14:28,910 --> 00:14:30,680
PAUL KINLAN: You're right.

423
00:14:30,680 --> 00:14:33,080
I would like to say I
purposefully left that out,

424
00:14:33,080 --> 00:14:33,540
but, no, I didn't.

425
00:14:33,540 --> 00:14:35,050
I forgot.

426
00:14:35,050 --> 00:14:37,170
So we have our WebKit
intent object.

427
00:14:37,170 --> 00:14:39,000
It's not actually doing a single
thing at the moment.

428
00:14:39,000 --> 00:14:41,510
It's just sitting there
being quiet.

429
00:14:41,510 --> 00:14:45,720
So what we want to try and do is
we want to ask the browser

430
00:14:45,720 --> 00:14:47,790
for a list of services.

431
00:14:47,790 --> 00:14:49,040
So
navigator.webkitStartActivity.

432
00:14:49,040 --> 00:14:54,080

433
00:14:54,080 --> 00:14:56,550
There we go.

434
00:14:56,550 --> 00:14:58,340
We'll start the activity.

435
00:14:58,340 --> 00:15:00,360
PAUL LEWIS: So that's
16 lines of code.

436
00:15:00,360 --> 00:15:03,380
That's pretty simple stuff for
actually sharing a URL.

437
00:15:03,380 --> 00:15:06,220
PAUL KINLAN: And most of it is
just to make it look pretty.

438
00:15:06,220 --> 00:15:07,230
PAUL LEWIS: And you did.

439
00:15:07,230 --> 00:15:07,500
PAUL KINLAN: I did.

440
00:15:07,500 --> 00:15:08,240
PAUL LEWIS: Well done.

441
00:15:08,240 --> 00:15:09,550
PAUL KINLAN: Thank
you very much.

442
00:15:09,550 --> 00:15:15,600
So if all goes well, test.com,
we press Share.

443
00:15:15,600 --> 00:15:19,160
PAUL LEWIS: So you now got a
number of services that take

444
00:15:19,160 --> 00:15:21,592
text HTML links.

445
00:15:21,592 --> 00:15:23,780
And they've registered
their intent against

446
00:15:23,780 --> 00:15:25,650
webintents.org/share.

447
00:15:25,650 --> 00:15:26,260
PAUL KINLAN: Yes.

448
00:15:26,260 --> 00:15:28,120
So these three services here
have said that they support

449
00:15:28,120 --> 00:15:30,710
the ability to share
text/html.

450
00:15:30,710 --> 00:15:32,780
We have two installed.

451
00:15:32,780 --> 00:15:36,140
These two ones here are local
to my machine at the moment.

452
00:15:36,140 --> 00:15:37,610
The share link to Twitter is
actually in the Chrome Web

453
00:15:37,610 --> 00:15:40,570
Store, but it wouldn't
work with this demo.

454
00:15:40,570 --> 00:15:42,600
And then we have wordpress.com,
which I haven't

455
00:15:42,600 --> 00:15:44,860
installed and we have the
ability to add to Chrome.

456
00:15:44,860 --> 00:15:47,090
I'm going to share a
link to Twitter.

457
00:15:47,090 --> 00:15:49,046
PAUL LEWIS: So that was
great example of

458
00:15:49,046 --> 00:15:50,450
app discovery there.

459
00:15:50,450 --> 00:15:53,410
Because you haven't got the
Wordpress one installed, but

460
00:15:53,410 --> 00:15:55,990
it said, well, I know for a fact
that this application can

461
00:15:55,990 --> 00:15:58,700
deal with that, it's told me
that when the app was uploaded

462
00:15:58,700 --> 00:16:01,140
to the Chrome Web Store, so
it will offer that to you.

463
00:16:01,140 --> 00:16:03,340
So even if you haven't got an
application installed, it's

464
00:16:03,340 --> 00:16:05,820
worth remembering that the
Chrome Web Store can actually

465
00:16:05,820 --> 00:16:08,030
say, here's a number of services
that can actually

466
00:16:08,030 --> 00:16:09,910
solve this particular issue.

467
00:16:09,910 --> 00:16:12,030
This is also good for you
as a developer as well.

468
00:16:12,030 --> 00:16:15,510
Because you don't need to
necessarily worry too much

469
00:16:15,510 --> 00:16:17,190
ahead of time.

470
00:16:17,190 --> 00:16:19,070
As long as you've tagged these
things correctly with the

471
00:16:19,070 --> 00:16:23,280
correct types and so forth, that
services will be matched

472
00:16:23,280 --> 00:16:24,610
up for you by the browser.

473
00:16:24,610 --> 00:16:25,310
PAUL KINLAN: Yes, exactly.

474
00:16:25,310 --> 00:16:29,860
So as you can see the URL, has
been embedded with the URL

475
00:16:29,860 --> 00:16:31,230
that we've shared.

476
00:16:31,230 --> 00:16:33,070
I've actually put it in and I've
also embellished it with

477
00:16:33,070 --> 00:16:34,575
a little bit of my own text.

478
00:16:34,575 --> 00:16:36,130
PAUL LEWIS: That is
beautifully done.

479
00:16:36,130 --> 00:16:36,960
PAUL KINLAN: And I'm going
to share it out.

480
00:16:36,960 --> 00:16:39,920
So now we've shared out to
the world wide web--

481
00:16:39,920 --> 00:16:40,740
PAUL LEWIS: That was
pretty easy.

482
00:16:40,740 --> 00:16:41,980
PAUL KINLAN: --test.com.

483
00:16:41,980 --> 00:16:44,070
It's probably going to be the
least useful tweet you'll

484
00:16:44,070 --> 00:16:45,265
probably see in a while.

485
00:16:45,265 --> 00:16:46,380
But it's pretty cool.

486
00:16:46,380 --> 00:16:47,640
I like the whole idea.

487
00:16:47,640 --> 00:16:50,420
So that's pretty interesting,
right?

488
00:16:50,420 --> 00:16:52,670
We've been able to build
an application.

489
00:16:52,670 --> 00:16:54,600
Let's go to here.

490
00:16:54,600 --> 00:16:57,380
Oops, I apologize.

491
00:16:57,380 --> 00:16:59,630
That has been able to invoke
in, let's say, 16 lines of

492
00:16:59,630 --> 00:17:02,910
nicely formatted code, the
ability to basically

493
00:17:02,910 --> 00:17:04,579
interconnect with another
application.

494
00:17:04,579 --> 00:17:06,740
That's pretty cool, right?

495
00:17:06,740 --> 00:17:09,330
It's really hard to actually
say how easy it is.

496
00:17:09,330 --> 00:17:10,839
Although, I could say
how easy it is.

497
00:17:10,839 --> 00:17:11,349
PAUL LEWIS: It is easy.

498
00:17:11,349 --> 00:17:11,990
PAUL KINLAN: Yes.

499
00:17:11,990 --> 00:17:14,465
You know what sometimes
we sound like?

500
00:17:14,465 --> 00:17:15,990
Have you seen those
infomercials?

501
00:17:15,990 --> 00:17:16,290
PAUL LEWIS: No.

502
00:17:16,290 --> 00:17:18,210
Oh, yeah.

503
00:17:18,210 --> 00:17:19,900
I know where you're
going with this.

504
00:17:19,900 --> 00:17:21,490
This doesn't come out well
for me, does it?

505
00:17:21,490 --> 00:17:23,020
PAUL KINLAN: No.

506
00:17:23,020 --> 00:17:25,280
PAUL LEWIS: Excellent.

507
00:17:25,280 --> 00:17:26,810
PAUL KINLAN: But essentially so,
we've got the ability to

508
00:17:26,810 --> 00:17:28,680
share images, edit images.

509
00:17:28,680 --> 00:17:31,150
If you want to integrate with an
image editing application,

510
00:17:31,150 --> 00:17:34,580
all you do is [INAUDIBLE] say
share, you say edit, and then

511
00:17:34,580 --> 00:17:38,780
you give the data that you want
to edit to the browser,

512
00:17:38,780 --> 00:17:40,635
which will then delegate it
across to another application.

513
00:17:40,635 --> 00:17:42,510
PAUL LEWIS: So can you
can send BLOBs?

514
00:17:42,510 --> 00:17:43,880
PAUL KINLAN: Yes, so
you can send BLOBs.

515
00:17:43,880 --> 00:17:46,510
We had a bug a while ago where
if you sent a BLOB it would

516
00:17:46,510 --> 00:17:48,550
get garbage collected, which
meant on the other side you

517
00:17:48,550 --> 00:17:50,770
couldn't read it, read the
BLOB out properly.

518
00:17:50,770 --> 00:17:51,710
But I believe that's
fixed now.

519
00:17:51,710 --> 00:17:54,720
So you could basically
say, well, I have a

520
00:17:54,720 --> 00:17:57,550
500 megabyte file.

521
00:17:57,550 --> 00:18:00,050
It's in my browser, it's in my
tab, it's on my local system.

522
00:18:00,050 --> 00:18:03,160
And I want to deliver it
to, say, I don't know,

523
00:18:03,160 --> 00:18:05,740
photoshop.com, if they
supported intents.

524
00:18:05,740 --> 00:18:07,880
They don't at the moment,
but if you want to.

525
00:18:07,880 --> 00:18:10,550

526
00:18:10,550 --> 00:18:13,820
If they did, then rather than
actually passing the data

527
00:18:13,820 --> 00:18:16,750
through the web, you'd pass it
like from browser tab to

528
00:18:16,750 --> 00:18:17,320
browser tab.

529
00:18:17,320 --> 00:18:19,680
So these two applications can
be made to work completely

530
00:18:19,680 --> 00:18:21,380
offline and talk together.

531
00:18:21,380 --> 00:18:21,650
PAUL LEWIS: Brilliant.

532
00:18:21,650 --> 00:18:22,630
PAUL KINLAN: Which I think
is pretty cool.

533
00:18:22,630 --> 00:18:23,444
PAUL LEWIS: Yeah, especially
if you're

534
00:18:23,444 --> 00:18:25,510
talking about large files.

535
00:18:25,510 --> 00:18:26,550
PAUL KINLAN: Yeah, exactly.

536
00:18:26,550 --> 00:18:28,240
So that was pretty simple.

537
00:18:28,240 --> 00:18:30,545
That was just the application
that invokes an intent.

538
00:18:30,545 --> 00:18:31,920
PAUL LEWIS: So now we need to
talk about the other side of

539
00:18:31,920 --> 00:18:32,360
this, right?

540
00:18:32,360 --> 00:18:34,630
Like what if I'm making an app
today, and I want to be able

541
00:18:34,630 --> 00:18:39,970
to say, OK, I can deal with,
say, this share stuff or

542
00:18:39,970 --> 00:18:40,590
something else.

543
00:18:40,590 --> 00:18:43,830
How do I say, OK, I'm ready
to receive intents?

544
00:18:43,830 --> 00:18:46,750
PAUL KINLAN: I before
E, except after--

545
00:18:46,750 --> 00:18:49,210
I did a presentation the other
day and I'd spelled receive

546
00:18:49,210 --> 00:18:49,960
incorrectly.

547
00:18:49,960 --> 00:18:51,020
PAUL LEWIS: Across
all of them?

548
00:18:51,020 --> 00:18:51,750
PAUL KINLAN: Across every
single slide.

549
00:18:51,750 --> 00:18:53,390
So at least I was consistent.

550
00:18:53,390 --> 00:18:54,480
PAUL LEWIS: Consistently
incorrect.

551
00:18:54,480 --> 00:18:54,950
PAUL KINLAN: Yes.

552
00:18:54,950 --> 00:18:57,040
PAUL LEWIS: Could be
a strapline, that.

553
00:18:57,040 --> 00:19:00,380
PAUL KINLAN: So let's build an
application which receives

554
00:19:00,380 --> 00:19:01,340
intent data.

555
00:19:01,340 --> 00:19:03,090
PAUL LEWIS: You might need to
come down on the screen.

556
00:19:03,090 --> 00:19:03,790
PAUL KINLAN: Yeah, sure thing.

557
00:19:03,790 --> 00:19:11,210
That's a very good point
Yeoman init chromeapp.

558
00:19:11,210 --> 00:19:13,810
So you actually built the
original Chome App generator.

559
00:19:13,810 --> 00:19:14,300
PAUL LEWIS: Certainly did.

560
00:19:14,300 --> 00:19:15,010
PAUL KINLAN: So now
it's pretty cool.

561
00:19:15,010 --> 00:19:16,540
PAUL LEWIS: You bolted some
stuff on, didn't you?

562
00:19:16,540 --> 00:19:18,300
PAUL KINLAN: Yes,
I made it work.

563
00:19:18,300 --> 00:19:19,150
PAUL LEWIS: Harsh.

564
00:19:19,150 --> 00:19:22,746
It worked great, but then
Chrome Apps changed.

565
00:19:22,746 --> 00:19:24,860
PAUL KINLAN: You can say
Chrome Apps changed 16

566
00:19:24,860 --> 00:19:25,440
versions ago.

567
00:19:25,440 --> 00:19:27,700
PAUL LEWIS: Well, yes,
that's true.

568
00:19:27,700 --> 00:19:28,110
PAUL KINLAN: Sorry.

569
00:19:28,110 --> 00:19:30,010
PAUL LEWIS: It is worth
mentioning, as we always do

570
00:19:30,010 --> 00:19:32,130
actually, that some of this
stuff is experimental and it

571
00:19:32,130 --> 00:19:32,920
does change.

572
00:19:32,920 --> 00:19:36,650
So it is worth keeping
an eye on that.

573
00:19:36,650 --> 00:19:39,000
PAUL KINLAN: So like the Web
Intent spec is still being

574
00:19:39,000 --> 00:19:41,070
worked on and will change
in response to developer

575
00:19:41,070 --> 00:19:45,500
feedback, likewise the
Chrome Apps APIs.

576
00:19:45,500 --> 00:19:46,750
So here we go.

577
00:19:46,750 --> 00:19:47,590
Wow.

578
00:19:47,590 --> 00:19:50,520
I'm doing it again, ls la.

579
00:19:50,520 --> 00:19:52,880
So we'll start off with
the manifest, right?

580
00:19:52,880 --> 00:19:56,950
The reason why we start off with
the manifest is you have

581
00:19:56,950 --> 00:20:00,070
to be able to tell the system
what you support.

582
00:20:00,070 --> 00:20:02,820
So your application needs to
declare to the browser, I can

583
00:20:02,820 --> 00:20:04,650
share links.

584
00:20:04,650 --> 00:20:05,820
So we'll start with this.

585
00:20:05,820 --> 00:20:12,792
We'll do an intents
declaration.

586
00:20:12,792 --> 00:20:14,430
It is an object [? to ?]

587
00:20:14,430 --> 00:20:16,490
[? write, ?]

588
00:20:16,490 --> 00:20:22,270
which means it's keyed off the
actual type of intent.

589
00:20:22,270 --> 00:20:24,400
So share.

590
00:20:24,400 --> 00:20:27,090
So basically what we've said
here is my application will be

591
00:20:27,090 --> 00:20:28,840
able to share.

592
00:20:28,840 --> 00:20:32,320
We haven't actually provided
any extra information.

593
00:20:32,320 --> 00:20:34,010
But we can.

594
00:20:34,010 --> 00:20:38,820
It's an array because your
application could, in theory,

595
00:20:38,820 --> 00:20:41,160
support the same action, but
deliver the data to multiple

596
00:20:41,160 --> 00:20:42,740
different places.

597
00:20:42,740 --> 00:20:43,830
PAUL LEWIS: Crazy.

598
00:20:43,830 --> 00:20:46,480
PAUL KINLAN: Yeah, it doesn't
really affect the Chrome Apps

599
00:20:46,480 --> 00:20:48,315
so much because everything
technically gets delivered to

600
00:20:48,315 --> 00:20:49,160
the background page.

601
00:20:49,160 --> 00:20:52,170
But for a hosted app or an
extension, you can actually

602
00:20:52,170 --> 00:20:54,650
choose the very specific page
that you want the intent data

603
00:20:54,650 --> 00:20:57,800
to be delivered to.

604
00:20:57,800 --> 00:21:00,810
So here we go, type.

605
00:21:00,810 --> 00:21:02,590
So you don't have to repeat
yourself multiple times.

606
00:21:02,590 --> 00:21:07,600
You can actually say,
[? text/*. ?]

607
00:21:07,600 --> 00:21:09,790
So if anyone shares anything
that is text-based.

608
00:21:09,790 --> 00:21:10,680
PAUL LEWIS: All the texts.

609
00:21:10,680 --> 00:21:13,630
PAUL KINLAN: All the texts, so
text plain, text uri-list,

610
00:21:13,630 --> 00:21:16,741
text HTML, text JPEG.

611
00:21:16,741 --> 00:21:18,080
I was checking to see if
you were listening.

612
00:21:18,080 --> 00:21:20,690

613
00:21:20,690 --> 00:21:22,295
So type, text, title.

614
00:21:22,295 --> 00:21:26,526

615
00:21:26,526 --> 00:21:29,372
Oh man, I can't spell,
RECEIVE TEST.

616
00:21:29,372 --> 00:21:32,410
Do you want to say a random word
just to prove it's live?

617
00:21:32,410 --> 00:21:34,620
PAUL LEWIS: Truth.

618
00:21:34,620 --> 00:21:35,410
PAUL KINLAN: TRUTH.

619
00:21:35,410 --> 00:21:36,050
Is that OK?

620
00:21:36,050 --> 00:21:36,770
PAUL LEWIS: Yeah.

621
00:21:36,770 --> 00:21:37,660
PAUL KINLAN: For reals.

622
00:21:37,660 --> 00:21:39,130
PAUL LEWIS: Yes.

623
00:21:39,130 --> 00:21:41,860
PAUL KINLAN: So in the normal
Web Intents world, inside

624
00:21:41,860 --> 00:21:46,040
Chrome hosted apps at least, you
normally specify a href.

625
00:21:46,040 --> 00:21:48,450
You don't with Chrome Apps
because everything gets

626
00:21:48,450 --> 00:21:49,590
delivered to the background
page.

627
00:21:49,590 --> 00:21:51,650
And we're going to cover that
in a little minute.

628
00:21:51,650 --> 00:21:53,670
So that's our application.

629
00:21:53,670 --> 00:21:56,040
It has declared its intent.

630
00:21:56,040 --> 00:21:58,030
So, I'll tell you way, you
might as well load it in.

631
00:21:58,030 --> 00:22:00,450
PAUL LEWIS: So the Chrome Web
Store, if you were to push

632
00:22:00,450 --> 00:22:03,550
that app live to the Chrome
Web Store, the Chrome Web

633
00:22:03,550 --> 00:22:07,600
Store would look at the intent
and sort of keep a track on

634
00:22:07,600 --> 00:22:10,220
that and say, OK, so if somebody
then dispatches an

635
00:22:10,220 --> 00:22:13,020
intent with that type, I know
that this application

636
00:22:13,020 --> 00:22:13,690
can now handle it.

637
00:22:13,690 --> 00:22:15,110
PAUL KINLAN: Yes,
exactly right.

638
00:22:15,110 --> 00:22:15,240
PAUL LEWIS: Cool.

639
00:22:15,240 --> 00:22:15,970
So that's all you have to do.

640
00:22:15,970 --> 00:22:16,950
PAUL KINLAN: So this
is our Receive app.

641
00:22:16,950 --> 00:22:20,770
It is very much like the Invoke
app when it first came

642
00:22:20,770 --> 00:22:21,220
into fruition.

643
00:22:21,220 --> 00:22:22,120
PAUL LEWIS: It is gorgeous.

644
00:22:22,120 --> 00:22:23,395
PAUL KINLAN: It is beautiful,
isn't it?

645
00:22:23,395 --> 00:22:23,820
PAUL LEWIS: It is.

646
00:22:23,820 --> 00:22:24,640
It's your finest work.

647
00:22:24,640 --> 00:22:26,167
PAUL KINLAN: And that's the end
of our presentation there.

648
00:22:26,167 --> 00:22:27,061
PAUL LEWIS: Excellent,
thank you.

649
00:22:27,061 --> 00:22:27,510
PAUL KINLAN: No, cool.

650
00:22:27,510 --> 00:22:31,790
So let's actually put some
implementation into this.

651
00:22:31,790 --> 00:22:34,430
Main.js, we didn't touch
main.js before

652
00:22:34,430 --> 00:22:36,430
in the Invoke app.

653
00:22:36,430 --> 00:22:40,690
So main.js, it's not like main
function in C and other

654
00:22:40,690 --> 00:22:41,650
programming languages.

655
00:22:41,650 --> 00:22:44,860
We've just arbitrarily called
main.js as the file that's

656
00:22:44,860 --> 00:22:47,980
going to be run on first run.

657
00:22:47,980 --> 00:22:49,580
PAUL LEWIS: So this is the
JavaScript that's running as

658
00:22:49,580 --> 00:22:50,220
our background page.

659
00:22:50,220 --> 00:22:50,600
PAUL KINLAN: Yeah.

660
00:22:50,600 --> 00:22:51,790
PAUL LEWIS: We call it
background page, but really

661
00:22:51,790 --> 00:22:52,770
it's like a background script.

662
00:22:52,770 --> 00:22:54,460
PAUL KINLAN: Yeah, so kind of
Chrome goes through the list

663
00:22:54,460 --> 00:22:56,940
of scripts, injects them into
a background page, and runs

664
00:22:56,940 --> 00:22:58,950
them so they can be sequentially
laid out.

665
00:22:58,950 --> 00:23:03,490
Now, this is our declaration
of saying what happens when

666
00:23:03,490 --> 00:23:06,220
the user clicks the button to
launch that application.

667
00:23:06,220 --> 00:23:08,050
Well in our case, it's
pretty simple.

668
00:23:08,050 --> 00:23:11,537
The user will see the
window here open.

669
00:23:11,537 --> 00:23:14,670

670
00:23:14,670 --> 00:23:18,140
We want to do some with the
data that comes in.

671
00:23:18,140 --> 00:23:21,960
And where that happens is
right at the end here,

672
00:23:21,960 --> 00:23:23,180
intentData.

673
00:23:23,180 --> 00:23:26,660
So the callback that you attach
to addListener for the

674
00:23:26,660 --> 00:23:29,560
onLaunched actually has a
parameter called intentData.

675
00:23:29,560 --> 00:23:31,770
That's data that's been injected
into your application

676
00:23:31,770 --> 00:23:34,670
from either another website or
another Chrome Application.

677
00:23:34,670 --> 00:23:36,890
So let's get into this now.

678
00:23:36,890 --> 00:23:38,410
We'll create a window.

679
00:23:38,410 --> 00:23:42,170

680
00:23:42,170 --> 00:23:45,370
Oh, I can spell function,
appWindow.

681
00:23:45,370 --> 00:23:49,340
We can get a callback from
Chrome when the window is

682
00:23:49,340 --> 00:23:50,100
being created.

683
00:23:50,100 --> 00:23:52,310
PAUL LEWIS: OK, so that Receive
window that we just

684
00:23:52,310 --> 00:23:57,510
saw a moment ago, when that gets
fired up, we call this

685
00:23:57,510 --> 00:23:59,170
anonymous function that
you're declaring now.

686
00:23:59,170 --> 00:24:00,150
PAUL KINLAN: Yes.

687
00:24:00,150 --> 00:24:01,500
So the anonymous function
allows us to

688
00:24:01,500 --> 00:24:02,650
do a couple of things.

689
00:24:02,650 --> 00:24:05,440
We could manipulate the window,
make it large, make it

690
00:24:05,440 --> 00:24:07,770
small, minimize, maximize
if we wanted to,

691
00:24:07,770 --> 00:24:09,520
when it's been created.

692
00:24:09,520 --> 00:24:12,390
But in this case, we actually
get access to the DOM.

693
00:24:12,390 --> 00:24:14,080
PAUL LEWIS: One thing that's
worth pointing out here is

694
00:24:14,080 --> 00:24:18,140
you're accessing contentWindow,
which is a

695
00:24:18,140 --> 00:24:19,720
recent change that we made.

696
00:24:19,720 --> 00:24:22,990
So the app window that comes
back is a Chrome App window.

697
00:24:22,990 --> 00:24:24,760
It's not necessarily
what you'd expect.

698
00:24:24,760 --> 00:24:27,870
It's not the DOM window that
we, as web developers,

699
00:24:27,870 --> 00:24:29,090
will be used to.

700
00:24:29,090 --> 00:24:31,380
So what we do is we are
accessing the DOM window

701
00:24:31,380 --> 00:24:32,080
element through this

702
00:24:32,080 --> 00:24:33,830
contentWindow property on appWindow.

703
00:24:33,830 --> 00:24:34,910
OK, cool.

704
00:24:34,910 --> 00:24:39,520
PAUL KINLAN: Yes, which allows
us to inject methods, new

705
00:24:39,520 --> 00:24:41,790
functions, new data
into a window

706
00:24:41,790 --> 00:24:43,150
that's just been opened.

707
00:24:43,150 --> 00:24:45,570
It's a little bit atypical when
you think about the way

708
00:24:45,570 --> 00:24:47,180
that you develop applications
on the web.

709
00:24:47,180 --> 00:24:49,310
You very rarely get access,
especially when you open

710
00:24:49,310 --> 00:24:51,730
another remote window, you
can't inject data in.

711
00:24:51,730 --> 00:24:53,810
But because everything's kind
of like tightly contained

712
00:24:53,810 --> 00:24:56,630
inside this app, we give you
that ability to do that.

713
00:24:56,630 --> 00:24:59,020
Which is kind of cool because it
allows us to deliver intent

714
00:24:59,020 --> 00:25:01,200
data to another window.

715
00:25:01,200 --> 00:25:04,010
So let me just, what is it?

716
00:25:04,010 --> 00:25:08,000
Index.html, right?

717
00:25:08,000 --> 00:25:19,925
We will simply put in a
paragraph id="result." And we

718
00:25:19,925 --> 00:25:22,560
will then create a
script, scropt.

719
00:25:22,560 --> 00:25:23,110
Oh, wow.

720
00:25:23,110 --> 00:25:23,910
PAUL LEWIS: Or scriopt.

721
00:25:23,910 --> 00:25:25,206
PAUL KINLAN: A scriopt.

722
00:25:25,206 --> 00:25:26,800
I like inventing new tags.

723
00:25:26,800 --> 00:25:28,030
This should be good, right?

724
00:25:28,030 --> 00:25:35,460
Source="index.js," script,
brilliant, we don't have

725
00:25:35,460 --> 00:25:39,670
index.js made, so let's
go and make it.

726
00:25:39,670 --> 00:25:41,700
And using Vim, we always get a
lot of questions about what

727
00:25:41,700 --> 00:25:42,630
text editors.

728
00:25:42,630 --> 00:25:44,020
You always use Sublime.

729
00:25:44,020 --> 00:25:44,640
PAUL LEWIS: I do.

730
00:25:44,640 --> 00:25:49,050
PAUL KINLAN: I'm using Vim,
which is vi improved.

731
00:25:49,050 --> 00:25:51,715
I actually find that I only
use like 1% of the whole.

732
00:25:51,715 --> 00:25:53,810
I usually like insert and
delete, and that's about it,

733
00:25:53,810 --> 00:25:55,840
and split window,
as we can tell.

734
00:25:55,840 --> 00:26:00,282
So anyway, I get distracted
really easily, don't I?

735
00:26:00,282 --> 00:26:02,144
PAUL LEWIS: I wasn't going to
say anything, but yeah.

736
00:26:02,144 --> 00:26:05,280

737
00:26:05,280 --> 00:26:08,050
PAUL KINLAN: Onload, so the
window's been loaded.

738
00:26:08,050 --> 00:26:12,540
So what we should do is we
should, first off, get a

739
00:26:12,540 --> 00:26:19,910
reference by ID result.

740
00:26:19,910 --> 00:26:21,642
It's a result,
result.textContent =

741
00:26:21,642 --> 00:26:22,892
window.intentData.intent.data.

742
00:26:22,892 --> 00:26:36,140

743
00:26:36,140 --> 00:26:39,310
PAUL LEWIS: So you're grabbing
hold of that intent data that

744
00:26:39,310 --> 00:26:41,600
we injected into the page.

745
00:26:41,600 --> 00:26:44,720
You're grabbing the intent
and then the data

746
00:26:44,720 --> 00:26:45,505
properties of that.

747
00:26:45,505 --> 00:26:47,810
And then we're going to set that
as the actual value that

748
00:26:47,810 --> 00:26:48,620
we'll send out to the page.

749
00:26:48,620 --> 00:26:49,800
PAUL KINLAN: Yeah, and all this
is just proving is that

750
00:26:49,800 --> 00:26:53,250
we can share data to the Chome
App from our existing Chrome

751
00:26:53,250 --> 00:26:54,430
Application.

752
00:26:54,430 --> 00:26:59,090
So if this works, cool.

753
00:26:59,090 --> 00:27:00,360
So it looks like
it didn't work.

754
00:27:00,360 --> 00:27:01,680
But that's because I just
refreshed the page.

755
00:27:01,680 --> 00:27:04,560
And I actually was a
little bit silly.

756
00:27:04,560 --> 00:27:05,810
Invoke.

757
00:27:05,810 --> 00:27:08,090

758
00:27:08,090 --> 00:27:10,235
I just need to remove
Twitter for now.

759
00:27:10,235 --> 00:27:14,510

760
00:27:14,510 --> 00:27:16,580
We found a bug about 15
minutes before this

761
00:27:16,580 --> 00:27:17,974
presentation.

762
00:27:17,974 --> 00:27:18,860
Here we go.

763
00:27:18,860 --> 00:27:23,780
So test.com and truth.

764
00:27:23,780 --> 00:27:27,370
It's not a proper URL, but we'll
hopefully get the idea.

765
00:27:27,370 --> 00:27:29,270
RECEIVE TEST TRUTH is in
there because we've

766
00:27:29,270 --> 00:27:30,260
added it into Chrome.

767
00:27:30,260 --> 00:27:35,130
It says it supports the share,
to share text/HTML links at

768
00:27:35,130 --> 00:27:36,890
least, Select.

769
00:27:36,890 --> 00:27:37,970
PAUL LEWIS: And there we go.

770
00:27:37,970 --> 00:27:39,210
PAUL KINLAN: Yes, awesome.

771
00:27:39,210 --> 00:27:40,210
PAUL LEWIS: Well done, sir.

772
00:27:40,210 --> 00:27:41,020
PAUL KINLAN: Cool.

773
00:27:41,020 --> 00:27:42,380
And there's a couple of
other things that

774
00:27:42,380 --> 00:27:43,100
you can do as well.

775
00:27:43,100 --> 00:27:45,580
If you want to post data back,
you can just basically take

776
00:27:45,580 --> 00:27:48,540
the intent object can call post
result, and it will tend

777
00:27:48,540 --> 00:27:49,870
data back to the calling
application.

778
00:27:49,870 --> 00:27:54,110
So we have a bidirectional
communication channel.

779
00:27:54,110 --> 00:27:56,590
Yeah, I mean that's pretty
much it, right?

780
00:27:56,590 --> 00:27:58,980
Let me just uninstall
this application.

781
00:27:58,980 --> 00:28:00,070
No, I won't uninstall it.

782
00:28:00,070 --> 00:28:07,510
I will go to paul.kinlan.me
because I know there's not

783
00:28:07,510 --> 00:28:08,760
going to be anything
contentious on it.

784
00:28:08,760 --> 00:28:11,330

785
00:28:11,330 --> 00:28:14,070
We can share directly
from Chrome, RECEIVE

786
00:28:14,070 --> 00:28:16,170
TEST, if this all works.

787
00:28:16,170 --> 00:28:17,120
There we go.

788
00:28:17,120 --> 00:28:17,970
PAUL LEWIS: My goodness, mate.

789
00:28:17,970 --> 00:28:20,760
PAUL KINLAN: So we have Chrome
App talking to Chrome App,

790
00:28:20,760 --> 00:28:23,140
Chrome Web Browser Applications
on the open web

791
00:28:23,140 --> 00:28:25,230
talking to application that
are installed inside the

792
00:28:25,230 --> 00:28:26,330
user's machine.

793
00:28:26,330 --> 00:28:27,550
So we've got multiple different
ways that we can

794
00:28:27,550 --> 00:28:29,380
pass data across and
it's all using the

795
00:28:29,380 --> 00:28:30,660
same intents mechanism.

796
00:28:30,660 --> 00:28:31,610
It's pretty cool.

797
00:28:31,610 --> 00:28:33,680
I think it's pretty powerful.

798
00:28:33,680 --> 00:28:36,660
There's one last thing
I want to talk about.

799
00:28:36,660 --> 00:28:40,820
And we're going to show
a little bit of code.

800
00:28:40,820 --> 00:28:42,070
So here we go.

801
00:28:42,070 --> 00:28:44,826

802
00:28:44,826 --> 00:28:46,076
I apologize about this.

803
00:28:46,076 --> 00:28:50,790

804
00:28:50,790 --> 00:28:51,250
There we go.

805
00:28:51,250 --> 00:28:53,120
So this is the code I
prepared earlier.

806
00:28:53,120 --> 00:28:58,550
Just in case anything ever goes
wrong, I had backups.

807
00:28:58,550 --> 00:29:04,332
So window.js, there we go.

808
00:29:04,332 --> 00:29:10,050

809
00:29:10,050 --> 00:29:12,570
Do you remember Blue Peter when
they had "This is one I

810
00:29:12,570 --> 00:29:13,030
prepared earlier?"

811
00:29:13,030 --> 00:29:15,280
PAUL LEWIS: Yes, this is one
you prepared earlier.

812
00:29:15,280 --> 00:29:15,690
PAUL KINLAN: This is
one [INAUDIBLE]

813
00:29:15,690 --> 00:29:17,930
actually developed.

814
00:29:17,930 --> 00:29:20,760
And it's in our Chrome Apps
samples on GitHub.

815
00:29:20,760 --> 00:29:22,460
The reason why I want
to show you this is

816
00:29:22,460 --> 00:29:24,590
because a couple of things.

817
00:29:24,590 --> 00:29:29,560
The first is that the action
here is not a normal action.

818
00:29:29,560 --> 00:29:32,470
It's not http/webintents.org.

819
00:29:32,470 --> 00:29:35,070
It's an action that is very
specific to his application.

820
00:29:35,070 --> 00:29:36,980
So he's developed these two
applications and he wants to

821
00:29:36,980 --> 00:29:38,210
talk between them.

822
00:29:38,210 --> 00:29:40,900
And he's basically said, well,
in this remote application,

823
00:29:40,900 --> 00:29:43,460
I've isolated a piece of
functionality which doesn't

824
00:29:43,460 --> 00:29:45,290
fit into share, edit,
pick, it's just very

825
00:29:45,290 --> 00:29:46,820
specific to my app.

826
00:29:46,820 --> 00:29:48,070
I just want to target that.

827
00:29:48,070 --> 00:29:50,920

828
00:29:50,920 --> 00:29:54,130
I'll tell you what, if I get
rid of this line, in the

829
00:29:54,130 --> 00:29:55,960
normal Web Intents world, what
would happen then is the

830
00:29:55,960 --> 00:29:58,450
picker would appear looking
for applications that are

831
00:29:58,450 --> 00:29:59,700
installed that says
chrome-extension/app/op.

832
00:29:59,700 --> 00:30:03,220

833
00:30:03,220 --> 00:30:07,520
It's very specific to
his own use case.

834
00:30:07,520 --> 00:30:09,120
But you still get this
picker, right?

835
00:30:09,120 --> 00:30:11,870
And actually what he has
basically said is that I don't

836
00:30:11,870 --> 00:30:14,260
want the picker, I know I'm
talking to my application or

837
00:30:14,260 --> 00:30:15,220
another application.

838
00:30:15,220 --> 00:30:18,210
There should be no kind of
resolution of services in

839
00:30:18,210 --> 00:30:20,550
between and selection
for the user.

840
00:30:20,550 --> 00:30:22,810
So he's using a thing called
explicit intents.

841
00:30:22,810 --> 00:30:25,650
And explicit intents is
this little bit here.

842
00:30:25,650 --> 00:30:28,510
So when you build up your WebKit
Intent, if you include

843
00:30:28,510 --> 00:30:34,370
the word service, in theory it
could be http:// a public URL

844
00:30:34,370 --> 00:30:37,000
which supports intents.

845
00:30:37,000 --> 00:30:39,380
But right now, it's just locked
down to the Chrome

846
00:30:39,380 --> 00:30:40,830
extension namespace.

847
00:30:40,830 --> 00:30:45,900
And this code is basically
saying that I'll use the Web

848
00:30:45,900 --> 00:30:48,630
Intents infrastructure to
deliver data, but I will call

849
00:30:48,630 --> 00:30:52,320
that action up there, app2/op,
directly on the

850
00:30:52,320 --> 00:30:53,570
chrome-extension/GUID/generated
background.

851
00:30:53,570 --> 00:30:57,352

852
00:30:57,352 --> 00:31:00,070
PAUL LEWIS: So this seems like
a way of shortcutting that

853
00:31:00,070 --> 00:31:02,450
normal process that we were
saying where you sort of say,

854
00:31:02,450 --> 00:31:05,310
well, I want an application
that can deal with this.

855
00:31:05,310 --> 00:31:07,200
You're now saying, I know
specifically which application

856
00:31:07,200 --> 00:31:10,010
I want to deal with this, and
I'm going to tell you upfront

857
00:31:10,010 --> 00:31:11,370
this is the application that
can deal with this.

858
00:31:11,370 --> 00:31:13,000
PAUL KINLAN: Yeah, so the way
that we positioned this when

859
00:31:13,000 --> 00:31:15,630
we first designed the Web
Intents spec was to say, well,

860
00:31:15,630 --> 00:31:19,125
I could design multiple kind of
inputs into my application

861
00:31:19,125 --> 00:31:21,640
for external developers
to call into.

862
00:31:21,640 --> 00:31:23,860
But at the same time, if I've
got this way of taking the

863
00:31:23,860 --> 00:31:26,990
data from the browser and
bringing it into the app, why

864
00:31:26,990 --> 00:31:29,760
can't I just have my own
application's components

865
00:31:29,760 --> 00:31:31,380
orchestrate and talk
to each other.

866
00:31:31,380 --> 00:31:33,500
So you might have like an image
picker, and an image

867
00:31:33,500 --> 00:31:37,770
editor, and like an image
saver all in one app.

868
00:31:37,770 --> 00:31:40,580
But you can talk to them
yourself over intents, which

869
00:31:40,580 --> 00:31:44,170
means that you don't have to
kind of reimplement your own

870
00:31:44,170 --> 00:31:45,395
page to page.

871
00:31:45,395 --> 00:31:47,170
PAUL LEWIS: Yeah, it seems
like a really nice way of

872
00:31:47,170 --> 00:31:50,580
decoupling that communication
that you're planning on doing

873
00:31:50,580 --> 00:31:52,240
anyway, so that you can just--

874
00:31:52,240 --> 00:31:53,960
PAUL KINLAN: Yeah, you can
basically just reuse all the

875
00:31:53,960 --> 00:31:56,220
same existing architecture that
you have for external

876
00:31:56,220 --> 00:31:58,340
parties internally inside
your own app.

877
00:31:58,340 --> 00:31:59,910
PAUL LEWIS: I like it, sold.

878
00:31:59,910 --> 00:32:01,160
PAUL KINLAN: Sold.

879
00:32:01,160 --> 00:32:03,796

880
00:32:03,796 --> 00:32:05,945
I was going to do a really
bad joke then.

881
00:32:05,945 --> 00:32:06,390
PAUL LEWIS: Really?

882
00:32:06,390 --> 00:32:07,370
That's unusual for you.

883
00:32:07,370 --> 00:32:08,630
PAUL KINLAN: Infomercials
and everything.

884
00:32:08,630 --> 00:32:09,450
PAUL LEWIS: Yeah, great.

885
00:32:09,450 --> 00:32:11,750
PAUL KINLAN: Like available in
14 days, just give my your

886
00:32:11,750 --> 00:32:12,450
Visa, doesn't matter.

887
00:32:12,450 --> 00:32:13,420
PAUL LEWIS: Don't go there.

888
00:32:13,420 --> 00:32:16,550
PAUL KINLAN: So I think we
finished with the whole

889
00:32:16,550 --> 00:32:17,140
presentation.

890
00:32:17,140 --> 00:32:19,790
Obviously this is my blog,
which we don't

891
00:32:19,790 --> 00:32:22,896
need to look at anymore.

892
00:32:22,896 --> 00:32:24,870
Should we switch back
to the camera?

893
00:32:24,870 --> 00:32:26,230
PAUL LEWIS: So we've got
some questions that

894
00:32:26,230 --> 00:32:27,550
have been coming in.

895
00:32:27,550 --> 00:32:28,440
Should we go through those?

896
00:32:28,440 --> 00:32:29,390
PAUL KINLAN: Yes, questions.

897
00:32:29,390 --> 00:32:30,800
PAUL LEWIS: OK.

898
00:32:30,800 --> 00:32:33,460
So where to find out about
different kinds on Web

899
00:32:33,460 --> 00:32:34,710
Intents, e.g. share.

900
00:32:34,710 --> 00:32:39,340
So right now, webintents.org
would be the place to go.

901
00:32:39,340 --> 00:32:42,000
So there's the specification
which says how the browser is

902
00:32:42,000 --> 00:32:45,620
actually supposed to implement
Web Intents in themselves, but

903
00:32:45,620 --> 00:32:48,480
the actual webintents.org right
now is acting as that

904
00:32:48,480 --> 00:32:50,570
kind of point of reference
for a number of

905
00:32:50,570 --> 00:32:51,690
specific intents, right?

906
00:32:51,690 --> 00:32:54,860
So like there's share,
pick, edit, view--

907
00:32:54,860 --> 00:32:55,320
PAUL KINLAN: Save.

908
00:32:55,320 --> 00:32:57,730
PAUL LEWIS: --save.

909
00:32:57,730 --> 00:32:58,830
Oo.

910
00:32:58,830 --> 00:32:59,630
PAUL KINLAN: Subscribe.

911
00:32:59,630 --> 00:33:00,210
PAUL LEWIS: Subscribe.

912
00:33:00,210 --> 00:33:00,575
PAUL KINLAN: Subscribe.

913
00:33:00,575 --> 00:33:01,600
PAUL LEWIS: I always
forget subscribe.

914
00:33:01,600 --> 00:33:04,750
PAUL KINLAN: Yes, Julien
Genestoux really likes the

915
00:33:04,750 --> 00:33:07,360
idea of subscribe, so we
implemented it for him.

916
00:33:07,360 --> 00:33:08,150
But it's kind of cool, right?

917
00:33:08,150 --> 00:33:11,410
So we have those, I think,
six core actions.

918
00:33:11,410 --> 00:33:12,825
They're all documented
on webintents.org.

919
00:33:12,825 --> 00:33:16,390

920
00:33:16,390 --> 00:33:18,690
Yeah, we'll see how that
generally goes.

921
00:33:18,690 --> 00:33:20,230
Just to let everyone know,
we're going to move

922
00:33:20,230 --> 00:33:23,940
webintents.org to more of a
wiki-based architecture.

923
00:33:23,940 --> 00:33:27,210
Just because it's open source
now, but it's on GitHub, it's

924
00:33:27,210 --> 00:33:30,290
under some obscure directory
inside GitHub, which kind of

925
00:33:30,290 --> 00:33:33,740
means that people aren't willing
to check it out and

926
00:33:33,740 --> 00:33:35,810
manipulate the code, manipulate
the documentation.

927
00:33:35,810 --> 00:33:37,190
So we're going to try a move
it to a wiki-based

928
00:33:37,190 --> 00:33:40,310
architecture so that we can
iterate on the best practices

929
00:33:40,310 --> 00:33:43,880
for each of the actions, and
also best guidance for how to

930
00:33:43,880 --> 00:33:44,230
contribute.

931
00:33:44,230 --> 00:33:45,170
PAUL LEWIS: It's a good point.

932
00:33:45,170 --> 00:33:48,950
Because at this stage, it's
there in Chrome Apps, you can

933
00:33:48,950 --> 00:33:52,830
use it, we want people to be
using it alongside their

934
00:33:52,830 --> 00:33:55,200
existing integrations that
they're already doing, and

935
00:33:55,200 --> 00:33:57,920
giving actual developer feedback
on how is this API to

936
00:33:57,920 --> 00:34:00,840
use, what would be really
helpful, and all

937
00:34:00,840 --> 00:34:01,530
these kinds of things.

938
00:34:01,530 --> 00:34:04,900
And the same goes for the
documentation, and wikis, get

939
00:34:04,900 --> 00:34:05,900
that feedback in.

940
00:34:05,900 --> 00:34:08,915
And obviously, now is the time
to put it in, while the spec

941
00:34:08,915 --> 00:34:12,330
is still being formed and the
documentation can be updated.

942
00:34:12,330 --> 00:34:13,090
All right.

943
00:34:13,090 --> 00:34:14,920
So webintents.org for that.

944
00:34:14,920 --> 00:34:17,429

945
00:34:17,429 --> 00:34:20,120
So being a provider requires
having an installed app.

946
00:34:20,120 --> 00:34:22,800
How do you see Web Intents
working for browsers without

947
00:34:22,800 --> 00:34:26,360
the concept of an installed
web app?

948
00:34:26,360 --> 00:34:27,219
PAUL KINLAN: Hey, sweet.

949
00:34:27,219 --> 00:34:28,050
So who's that from?

950
00:34:28,050 --> 00:34:29,094
[? Mr. Mehamov? ?]

951
00:34:29,094 --> 00:34:31,179
Ah, Mike.

952
00:34:31,179 --> 00:34:31,800
Cool.

953
00:34:31,800 --> 00:34:35,340
So the question is basically
saying, well--

954
00:34:35,340 --> 00:34:36,719
PAUL LEWIS: Today it works
in the Chrome ecosystem.

955
00:34:36,719 --> 00:34:39,310
PAUL KINLAN: Today it's all in
the Chrome ecosystem, all the

956
00:34:39,310 --> 00:34:42,230
applications are delivered
by the Chrome Web Store.

957
00:34:42,230 --> 00:34:45,450
Now the specification itself
on what we tried to do from

958
00:34:45,450 --> 00:34:48,110
the start is basically
say, this idea of its

959
00:34:48,110 --> 00:34:49,739
inter-application communication
shouldn't really

960
00:34:49,739 --> 00:34:52,830
be tied down to kind
of one vendor.

961
00:34:52,830 --> 00:34:56,040
It shouldn't be tied
down to one store.

962
00:34:56,040 --> 00:34:58,420
So the idea behind intents was
that we were going to have a

963
00:34:58,420 --> 00:35:01,890
tag inside HTML, which basically
says, well, any user

964
00:35:01,890 --> 00:35:04,680
agent, whether it's a search
engine, or whether it's a

965
00:35:04,680 --> 00:35:06,340
customer at the Chrome Web
Store, or just a someone

966
00:35:06,340 --> 00:35:08,780
else's browser can crawl the
web and understand the

967
00:35:08,780 --> 00:35:11,260
capabilities of different
websites.

968
00:35:11,260 --> 00:35:17,480
So hypothetically google.com
crawls Imagemator.

969
00:35:17,480 --> 00:35:19,500
Well, Imagemator is a bad
example because it doesn't

970
00:35:19,500 --> 00:35:20,370
receive any data.

971
00:35:20,370 --> 00:35:25,080
But Mememator receives images
via the edit intent.

972
00:35:25,080 --> 00:35:27,140
Any search engine will go along,
understand that that

973
00:35:27,140 --> 00:35:29,640
application supports the
ability to edit images.

974
00:35:29,640 --> 00:35:32,570
And then when someone searches
for image editing software,

975
00:35:32,570 --> 00:35:36,140
you can kind of go, well we know
what they're looking for,

976
00:35:36,140 --> 00:35:36,980
let's give them the
app instead.

977
00:35:36,980 --> 00:35:38,610
And then you'll click
on the link.

978
00:35:38,610 --> 00:35:41,680
The browser, in that case,
should then register the fact

979
00:35:41,680 --> 00:35:44,080
that that application can
support those actions

980
00:35:44,080 --> 00:35:46,070
regardless of it being
installed or not.

981
00:35:46,070 --> 00:35:49,770
So when the user then says,
well, I need to edit an image,

982
00:35:49,770 --> 00:35:52,200
your web application will
appear in that list.

983
00:35:52,200 --> 00:35:53,420
So there's a couple
ways of doing it.

984
00:35:53,420 --> 00:35:55,100
And we're trying to do it via
the intent tag so that can

985
00:35:55,100 --> 00:35:58,180
have a concise way of describing
the functionality

986
00:35:58,180 --> 00:35:59,170
inside your application.

987
00:35:59,170 --> 00:36:00,775
PAUL LEWIS: So the context
we're talking about Web

988
00:36:00,775 --> 00:36:02,010
Intents today is Chrome Apps.

989
00:36:02,010 --> 00:36:07,090
But it does have this sort of
broader use on the web.

990
00:36:07,090 --> 00:36:09,850
Are there any shims or
anything like that?

991
00:36:09,850 --> 00:36:13,590
PAUL KINLAN: Yeah, there's
webintents.org/webintents.

992
00:36:13,590 --> 00:36:16,470
It's almost as if you kind of
set that one up for me to--

993
00:36:16,470 --> 00:36:17,880
PAUL LEWIS: You know, I'm
the gift that keeps

994
00:36:17,880 --> 00:36:18,880
on giving, my friend.

995
00:36:18,880 --> 00:36:19,740
PAUL KINLAN: So we
have a shim.

996
00:36:19,740 --> 00:36:21,720
I got a message today
though that the shim

997
00:36:21,720 --> 00:36:22,810
doesn't work in Firefox.

998
00:36:22,810 --> 00:36:24,830
I know about this.

999
00:36:24,830 --> 00:36:27,100
I really need help, actually,
maintaining the shim.

1000
00:36:27,100 --> 00:36:29,180
It doesn't work in Firefox
because I enabled Content

1001
00:36:29,180 --> 00:36:32,950
Security Policy so people
couldn't inject code or

1002
00:36:32,950 --> 00:36:37,940
basically inject anything bad
into webintents.org domains if

1003
00:36:37,940 --> 00:36:40,170
they're shared across
sites essentially.

1004
00:36:40,170 --> 00:36:44,530
But it works in a really nice
way, it creates an iframe.

1005
00:36:44,530 --> 00:36:46,670
The parent page will talk to
webintents.org, which will

1006
00:36:46,670 --> 00:36:48,170
then proxy the data
across to other

1007
00:36:48,170 --> 00:36:51,580
applications in other tabs.

1008
00:36:51,580 --> 00:36:55,290
But, yeah, it needs some work,
it needs some love.

1009
00:36:55,290 --> 00:36:58,580
And if anyone wants to help make
webintents.org especially

1010
00:36:58,580 --> 00:37:02,020
the shim, better, and work
better on Firefox,

1011
00:37:02,020 --> 00:37:02,640
please let me know.

1012
00:37:02,640 --> 00:37:05,055
I'm also told it has some
issues with IE 9.

1013
00:37:05,055 --> 00:37:08,160
But I actually believe that was
because the user hadn't

1014
00:37:08,160 --> 00:37:11,000
actually registered any
external applications.

1015
00:37:11,000 --> 00:37:15,250
PAUL LEWIS: Juan asks, what's
the best way to start?

1016
00:37:15,250 --> 00:37:17,540
Are you asking the best way to
start with Chrome Apps or the

1017
00:37:17,540 --> 00:37:20,230
best way to start with
Web Intents?

1018
00:37:20,230 --> 00:37:25,830
PAUL KINLAN: Can we flick
back to our code?

1019
00:37:25,830 --> 00:37:27,080
Google Chrome.

1020
00:37:27,080 --> 00:37:30,800

1021
00:37:30,800 --> 00:37:34,440
So the best way to actually
start with Chrome Apps is

1022
00:37:34,440 --> 00:37:36,520
Chrome App samples on GitHub.

1023
00:37:36,520 --> 00:37:39,640
So if we can zoom in.

1024
00:37:39,640 --> 00:37:40,740
There is a way of zooming in.

1025
00:37:40,740 --> 00:37:43,234
Here we are.

1026
00:37:43,234 --> 00:37:46,170
There we are, github.com/Googl
eChrome/chrome-app-samples.

1027
00:37:46,170 --> 00:37:51,880

1028
00:37:51,880 --> 00:37:54,810
That will give you a list of
samples, which we're working

1029
00:37:54,810 --> 00:37:58,040
on to make a lot better, and
structured a lot nicer, make

1030
00:37:58,040 --> 00:37:59,710
it more friendly to
read through.

1031
00:37:59,710 --> 00:38:01,670
But that will give you at
least, I think, 20 or 30

1032
00:38:01,670 --> 00:38:03,490
different examples of
the APIs that are

1033
00:38:03,490 --> 00:38:05,150
available in Chrome Apps.

1034
00:38:05,150 --> 00:38:08,090
There's an explicit
Web Intents demo.

1035
00:38:08,090 --> 00:38:09,020
There's loads, there's loads.

1036
00:38:09,020 --> 00:38:10,750
There's even a Parrot AR.Drone
demo that we

1037
00:38:10,750 --> 00:38:12,130
made the other day.

1038
00:38:12,130 --> 00:38:15,030
So if you were available for
last week and you watched the

1039
00:38:15,030 --> 00:38:18,750
presentation that we had, we
basically showed you how to

1040
00:38:18,750 --> 00:38:21,450
build or interact with
an AR.Drone using

1041
00:38:21,450 --> 00:38:22,450
normal network sockets.

1042
00:38:22,450 --> 00:38:24,820
PAUL LEWIS: In this case, the
one you probably want is the

1043
00:38:24,820 --> 00:38:27,620
Hello World sample, which
will actually

1044
00:38:27,620 --> 00:38:28,570
go through the process.

1045
00:38:28,570 --> 00:38:32,950
Also, as we said before, if you
look at yeoman.io, you can

1046
00:38:32,950 --> 00:38:34,730
also install that.

1047
00:38:34,730 --> 00:38:37,100
That has a Chrome App generator
which you can then

1048
00:38:37,100 --> 00:38:40,580
use to actually create
effectively a Hello World

1049
00:38:40,580 --> 00:38:41,210
application.

1050
00:38:41,210 --> 00:38:43,030
It'll do all that
work for you.

1051
00:38:43,030 --> 00:38:45,570
And then you could actually look
at what it writes out and

1052
00:38:45,570 --> 00:38:46,710
just kind of dissect
that yourself.

1053
00:38:46,710 --> 00:38:47,880
So there are a couple
ways that you can

1054
00:38:47,880 --> 00:38:48,870
actually get that code.

1055
00:38:48,870 --> 00:38:49,120
PAUL KINLAN: Yeah.

1056
00:38:49,120 --> 00:38:52,500
And if you want to get started
on Web Intents, webintents.org

1057
00:38:52,500 --> 00:38:54,700
should get you started.

1058
00:38:54,700 --> 00:38:57,430
If you have any problems with
the documentation, it's a bug,

1059
00:38:57,430 --> 00:38:59,840
we need to fix that,
please let us know,

1060
00:38:59,840 --> 00:39:03,400
paulkinlan@google.com, or on
any of the GitHub issues.

1061
00:39:03,400 --> 00:39:05,550
We want to make that
documentation better, so you

1062
00:39:05,550 --> 00:39:08,860
can just get started
like that.

1063
00:39:08,860 --> 00:39:10,110
And is that the last question?

1064
00:39:10,110 --> 00:39:14,170

1065
00:39:14,170 --> 00:39:16,480
Should we do this one from
Anon at the end?

1066
00:39:16,480 --> 00:39:17,790
PAUL LEWIS: Yeah, I guess.

1067
00:39:17,790 --> 00:39:19,320
Could you go into a
big of detail on

1068
00:39:19,320 --> 00:39:20,340
why extras were removed?

1069
00:39:20,340 --> 00:39:23,010
How much would you say the
intents concept diverges from

1070
00:39:23,010 --> 00:39:24,630
the Android original now?

1071
00:39:24,630 --> 00:39:25,770
And what are the key
distinctions

1072
00:39:25,770 --> 00:39:27,815
between the two presently?

1073
00:39:27,815 --> 00:39:29,310
And are there any other
chances of them

1074
00:39:29,310 --> 00:39:32,490
diverging even further?

1075
00:39:32,490 --> 00:39:37,510
PAUL KINLAN: So to deal with the
first one, a bit of detail

1076
00:39:37,510 --> 00:39:39,030
why extras were removed.

1077
00:39:39,030 --> 00:39:41,700
We found the API really
cumbersome.

1078
00:39:41,700 --> 00:39:44,250
So when you made an intent
object, then you would call

1079
00:39:44,250 --> 00:39:46,220
getExtra or setExtra.

1080
00:39:46,220 --> 00:39:48,740
And we were talking about
having, say, a dictionary of

1081
00:39:48,740 --> 00:39:51,410
extra pieces of metadata that
you would pass on instead.

1082
00:39:51,410 --> 00:39:54,495
So make it from like 10 API
calls to set 10 variables to

1083
00:39:54,495 --> 00:39:56,660
be one API call with
the dictionary.

1084
00:39:56,660 --> 00:39:59,675
But even that, people wanted
to pass extra data.

1085
00:39:59,675 --> 00:40:01,910
And this has all kind of come
back from developer feedback,

1086
00:40:01,910 --> 00:40:05,130
especially on the specification
group, is that

1087
00:40:05,130 --> 00:40:07,600
developers just wanted to
package that up into one

1088
00:40:07,600 --> 00:40:08,830
payload right at the start.

1089
00:40:08,830 --> 00:40:12,250
So when you declare your action
and type, you also

1090
00:40:12,250 --> 00:40:14,950
declare your data.

1091
00:40:14,950 --> 00:40:16,840
And we only use a string
today, which was

1092
00:40:16,840 --> 00:40:18,090
incorrect of me.

1093
00:40:18,090 --> 00:40:22,050
But it was for more of kind
of rapid prototyping.

1094
00:40:22,050 --> 00:40:23,550
It will turn into an object.

1095
00:40:23,550 --> 00:40:25,747
And the object will then
include, if you're saving a

1096
00:40:25,747 --> 00:40:27,960
file, would include
file name, size.

1097
00:40:27,960 --> 00:40:31,270
If you want to share and image,
it might include width

1098
00:40:31,270 --> 00:40:32,990
and height dimensions
at least.

1099
00:40:32,990 --> 00:40:36,590
The point being though is that
all of this should be

1100
00:40:36,590 --> 00:40:38,300
documented in best practices.

1101
00:40:38,300 --> 00:40:39,843
And this will come through the
wiki that we're hopefully

1102
00:40:39,843 --> 00:40:42,970
going to launch in the
near future at least.

1103
00:40:42,970 --> 00:40:44,980
So that's why we did extras.

1104
00:40:44,980 --> 00:40:47,230
The API, we didn't
like the API.

1105
00:40:47,230 --> 00:40:48,230
It didn't feel natural.

1106
00:40:48,230 --> 00:40:50,100
And we just wanted it to be one
object that you pass into

1107
00:40:50,100 --> 00:40:51,690
your WebKit Intent object.

1108
00:40:51,690 --> 00:40:53,560
Likewise, for the second
question, how much would you

1109
00:40:53,560 --> 00:40:54,860
say the intent--

1110
00:40:54,860 --> 00:40:55,940
It's diverged a little bit.

1111
00:40:55,940 --> 00:40:58,120
I mean, we have a similar
concept from Android Intents

1112
00:40:58,120 --> 00:40:59,850
at least where we have
the action, which

1113
00:40:59,850 --> 00:41:00,595
essentially is a string.

1114
00:41:00,595 --> 00:41:03,810
On Android it's reversed
domain notation, our is

1115
00:41:03,810 --> 00:41:04,780
obviously a normal domain.

1116
00:41:04,780 --> 00:41:07,340
PAUL LEWIS: Conceptually,
though, they're the same.

1117
00:41:07,340 --> 00:41:09,740
Your app says, look, I want to
do this thing, and another app

1118
00:41:09,740 --> 00:41:11,280
basically says, oh, I
could do that thing.

1119
00:41:11,280 --> 00:41:13,860
PAUL KINLAN: Yeah, so
conceptually it's the same.

1120
00:41:13,860 --> 00:41:16,940
If you look at how you pass
extra data, Android does

1121
00:41:16,940 --> 00:41:20,010
differ from Chrome right now.

1122
00:41:20,010 --> 00:41:22,490
And we're not at the point where
we're going to have the

1123
00:41:22,490 --> 00:41:24,090
two systems interact
and operate just

1124
00:41:24,090 --> 00:41:27,140
yet, I don't think.

1125
00:41:27,140 --> 00:41:29,430
We want to make the best
experience for web developers.

1126
00:41:29,430 --> 00:41:34,420
And not all Java-based APIs fit
into the web ecosystem.

1127
00:41:34,420 --> 00:41:38,170
So we want to make the best API
for web developers to get

1128
00:41:38,170 --> 00:41:40,760
their applications
talking together.

1129
00:41:40,760 --> 00:41:41,860
And I'll just kind
of mention this.

1130
00:41:41,860 --> 00:41:43,140
A lot of people want to
talk to native apps.

1131
00:41:43,140 --> 00:41:45,240
They want to talk to the network
via Web Intents.

1132
00:41:45,240 --> 00:41:49,000
And they want to talk to like
Android apps or something from

1133
00:41:49,000 --> 00:41:51,820
the say the Chrome browser
or on Android itself.

1134
00:41:51,820 --> 00:41:54,680
The main goal of Web Intents
is to get web developers

1135
00:41:54,680 --> 00:41:56,620
making applications which
are more connected

1136
00:41:56,620 --> 00:41:58,140
than they are now.

1137
00:41:58,140 --> 00:42:00,460
So we're trying to solve that
problem to start off with.

1138
00:42:00,460 --> 00:42:01,810
And then we'll get to
the problems at some

1139
00:42:01,810 --> 00:42:02,900
point in the future.

1140
00:42:02,900 --> 00:42:03,520
PAUL LEWIS: OK, cool.

1141
00:42:03,520 --> 00:42:04,530
There's just one final question

1142
00:42:04,530 --> 00:42:05,480
that's just popped in.

1143
00:42:05,480 --> 00:42:07,450
Any plans to add quick links
to disable or remove

1144
00:42:07,450 --> 00:42:10,100
extensions, I guess apps
as well, directly

1145
00:42:10,100 --> 00:42:10,940
on the intent picker?

1146
00:42:10,940 --> 00:42:14,280
I found myself wanting to do so
after installing several at

1147
00:42:14,280 --> 00:42:17,000
a time to try, and it's a bit
unwieldy jumping to the

1148
00:42:17,000 --> 00:42:18,520
extension page, since you
forget which one.

1149
00:42:18,520 --> 00:42:20,890
Well first of all, this
is really good

1150
00:42:20,890 --> 00:42:22,300
actual real world feedback.

1151
00:42:22,300 --> 00:42:23,590
So thank you for that.

1152
00:42:23,590 --> 00:42:25,010
That's the first thing.

1153
00:42:25,010 --> 00:42:26,250
PAUL KINLAN: So we've got
defaulting in place.

1154
00:42:26,250 --> 00:42:29,380
How annoying.

1155
00:42:29,380 --> 00:42:32,390
So we've got defaulting.

1156
00:42:32,390 --> 00:42:34,290
So defaulting is basically
so you don't have to keep

1157
00:42:34,290 --> 00:42:35,820
selecting the same intent.

1158
00:42:35,820 --> 00:42:39,080
PAUL LEWIS: But at the moment,
am I right, if you select a

1159
00:42:39,080 --> 00:42:40,970
service, it's going to
automatically use that the

1160
00:42:40,970 --> 00:42:41,700
second time?

1161
00:42:41,700 --> 00:42:42,900
PAUL KINLAN: Yeah, the
second time around.

1162
00:42:42,900 --> 00:42:44,300
But the thing that happens, and
we'll show you in a second

1163
00:42:44,300 --> 00:42:45,010
when we do this.

1164
00:42:45,010 --> 00:42:46,440
We've only got like
a minute left.

1165
00:42:46,440 --> 00:42:47,100
We share a page.

1166
00:42:47,100 --> 00:42:49,740
So ideally we want to be able
to manage the list of

1167
00:42:49,740 --> 00:42:52,330
applications that appear
here from here.

1168
00:42:52,330 --> 00:42:53,595
It's a really great
piece of feedback.

1169
00:42:53,595 --> 00:42:55,710
I'll pass it to the
engineering team.

1170
00:42:55,710 --> 00:42:58,010
If I don't do it any time
soon, crbook.com is

1171
00:42:58,010 --> 00:42:59,260
the place to go.

1172
00:42:59,260 --> 00:43:03,600

1173
00:43:03,600 --> 00:43:05,450
Let me share to Gmail.

1174
00:43:05,450 --> 00:43:07,640
This is an extension
that we've written.

1175
00:43:07,640 --> 00:43:11,470
There's a little nib up here
called Use Another App.

1176
00:43:11,470 --> 00:43:14,790
So what happens with defaulting
is that defaulting

1177
00:43:14,790 --> 00:43:18,450
always calls the one that you
last used, which is always the

1178
00:43:18,450 --> 00:43:20,460
same one if don't use
a different app.

1179
00:43:20,460 --> 00:43:22,900
So Use Another App will
basically say, well, I'm going

1180
00:43:22,900 --> 00:43:26,635
to go back to the picker and
then let you reselect another

1181
00:43:26,635 --> 00:43:32,770
app And there's a bug in the
packaged app stuff where it

1182
00:43:32,770 --> 00:43:35,160
doesn't actually have that
little nib to say I want to

1183
00:43:35,160 --> 00:43:35,840
use a different application.

1184
00:43:35,840 --> 00:43:38,970
So if you actually use the
application that we had today,

1185
00:43:38,970 --> 00:43:40,950
it will keep going into it until
you uninstall it, which

1186
00:43:40,950 --> 00:43:44,040
is a known bug, and hopefully
it should be fixed.

1187
00:43:44,040 --> 00:43:45,440
PAUL LEWIS: OK, awesome.

1188
00:43:45,440 --> 00:43:46,770
PAUL KINLAN: I think
that was it.

1189
00:43:46,770 --> 00:43:49,450
I think we're done,
45 minutes.

1190
00:43:49,450 --> 00:43:50,810
Thank you for your questions.

1191
00:43:50,810 --> 00:43:52,930
We're going to be here
again next week.

1192
00:43:52,930 --> 00:43:55,610
The way that these work is we
are trying to get as much

1193
00:43:55,610 --> 00:44:00,020
feedback as possible about
what you want to hear.

1194
00:44:00,020 --> 00:44:02,090
Because we have a whole series
of talks that we want to talk

1195
00:44:02,090 --> 00:44:04,910
about, but if you want to know
how to build applications

1196
00:44:04,910 --> 00:44:07,950
which do networking, and I know
Paul did one last week,

1197
00:44:07,950 --> 00:44:10,260
but if you want to learn more
about networking, please let

1198
00:44:10,260 --> 00:44:14,630
us know because we will tailor
our presentations and kind of

1199
00:44:14,630 --> 00:44:16,360
this to suit your needs.

1200
00:44:16,360 --> 00:44:20,110
So if you want to know how to do
Hello World again, we could

1201
00:44:20,110 --> 00:44:21,330
do that one and then kind
of go into some

1202
00:44:21,330 --> 00:44:22,630
more advanced stuff.

1203
00:44:22,630 --> 00:44:24,250
PAUL LEWIS: Let us know
what you want.

1204
00:44:24,250 --> 00:44:26,560
Certainly now is the time to
give us that feedback.

1205
00:44:26,560 --> 00:44:28,740
We can tailor accordingly,
as Paul said.

1206
00:44:28,740 --> 00:44:30,880
But in the meantime, thank you
very much for joining us.

1207
00:44:30,880 --> 00:44:31,910
And we'll see you next time.

1208
00:44:31,910 --> 00:44:33,070
PAUL KINLAN: Yes, thank
you very much.

1209
00:44:33,070 --> 00:44:34,320
Bye.

1210
00:44:34,320 --> 00:44:40,700

