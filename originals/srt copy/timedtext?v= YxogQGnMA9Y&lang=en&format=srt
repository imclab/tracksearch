1
00:00:00,000 --> 00:00:14,310

2
00:00:14,310 --> 00:00:16,980
VIJAY MENON: Thanks
for coming.

3
00:00:16,980 --> 00:00:20,580
We're talking about Putting the
App Back Into Web App--

4
00:00:20,580 --> 00:00:22,150
Web Programming With Dart.

5
00:00:22,150 --> 00:00:24,880
How many of you just attended
the last talk by Lars and

6
00:00:24,880 --> 00:00:26,895
Kasper on Dart?

7
00:00:26,895 --> 00:00:27,390
Great.

8
00:00:27,390 --> 00:00:28,570
I think that was most of you.

9
00:00:28,570 --> 00:00:30,440
If you haven't, you should
be able to pick it up.

10
00:00:30,440 --> 00:00:32,080
Dart's a very familiar
language.

11
00:00:32,080 --> 00:00:34,690
We're excited about the Dart
programming language for its

12
00:00:34,690 --> 00:00:37,760
potential for creating web apps,
particularly apps code

13
00:00:37,760 --> 00:00:39,035
that runs in the browser.

14
00:00:39,035 --> 00:00:40,110
I'm Vijay Menon.

15
00:00:40,110 --> 00:00:41,520
DAN GROVE: And I'm Dan Grove.

16
00:00:41,520 --> 00:00:45,310
We're here from Google's
Seattle Team.

17
00:00:45,310 --> 00:00:49,490
So how many of you have
used web apps before?

18
00:00:49,490 --> 00:00:53,108
It looks something like this.

19
00:00:53,108 --> 00:00:53,596
All right.

20
00:00:53,596 --> 00:00:57,012
How many of you are
happy with this?

21
00:00:57,012 --> 00:00:57,500
Beautiful.

22
00:00:57,500 --> 00:00:59,460
I had to ask.

23
00:00:59,460 --> 00:01:00,670
VIJAY MENON: This talk
is not for you.

24
00:01:00,670 --> 00:01:02,852
Sorry.

25
00:01:02,852 --> 00:01:06,310
DAN GROVE: When I got to Google
back in late 2007,

26
00:01:06,310 --> 00:01:10,262
there was a lot of talk about
developing [INAUDIBLE].

27
00:01:10,262 --> 00:01:12,050
But they're really ugly.

28
00:01:12,050 --> 00:01:14,375
But that's OK because they
all [INAUDIBLE].

29
00:01:14,375 --> 00:01:15,770
AUDIENCE: Your mic's
not working.

30
00:01:15,770 --> 00:01:17,202
VIJAY MENON: Oh, your
mic is off.

31
00:01:17,202 --> 00:01:20,034
DAN GROVE: It says it's on.

32
00:01:20,034 --> 00:01:20,978
I'll try it again.

33
00:01:20,978 --> 00:01:22,394
Let's see.

34
00:01:22,394 --> 00:01:23,935
VIJAY MENON: You got it?

35
00:01:23,935 --> 00:01:25,420
DAN GROVE: It's not working.

36
00:01:25,420 --> 00:01:26,410
How about now?

37
00:01:26,410 --> 00:01:27,660
No?

38
00:01:27,660 --> 00:01:30,640

39
00:01:30,640 --> 00:01:32,570
VIJAY MENON: Why don't I take
over for a little bit while we

40
00:01:32,570 --> 00:01:34,070
get Dan miced up properly.

41
00:01:34,070 --> 00:01:41,120
So yeah, now it's 2012, and our
expectations have changed.

42
00:01:41,120 --> 00:01:44,760
And one big thing that's changed
in the past five

43
00:01:44,760 --> 00:01:46,880
years-- you've seen it here at
Google I/O. We have these

44
00:01:46,880 --> 00:01:49,840
things now like tablets
and mobile devices.

45
00:01:49,840 --> 00:01:55,790
And that's really changed
our expectations of

46
00:01:55,790 --> 00:01:57,540
what a nice app is.

47
00:01:57,540 --> 00:02:03,040
And this is an app that we wrote
to specifically run well

48
00:02:03,040 --> 00:02:04,200
on a tablet.

49
00:02:04,200 --> 00:02:05,940
And we had quite a few
aims with this.

50
00:02:05,940 --> 00:02:08,000
One is that we wanted to
make it beautiful.

51
00:02:08,000 --> 00:02:10,800
And to do that, we really wanted
precise control over

52
00:02:10,800 --> 00:02:14,620
how the app looked on the screen
and on a variety of

53
00:02:14,620 --> 00:02:16,120
different form factors.

54
00:02:16,120 --> 00:02:19,220
We wanted it to be very nice to
interact with, particularly

55
00:02:19,220 --> 00:02:22,000
with the latest and
greatest devices.

56
00:02:22,000 --> 00:02:23,800
Touch.

57
00:02:23,800 --> 00:02:25,300
We wanted rich animation.

58
00:02:25,300 --> 00:02:28,930
So we want the illusion
of infinite scroll.

59
00:02:28,930 --> 00:02:33,470
We want 60 frames per
second interaction.

60
00:02:33,470 --> 00:02:36,800
We just want this thing to be
able to respond to us very

61
00:02:36,800 --> 00:02:39,330
quickly in, again, a variety
of form factors.

62
00:02:39,330 --> 00:02:42,320
So what we were interested in
figuring out is whether we

63
00:02:42,320 --> 00:02:45,780
could build this sort of
an app in the browser.

64
00:02:45,780 --> 00:02:48,630
So basically our experiences
were validated.

65
00:02:48,630 --> 00:02:56,130
And this is the same exact app
running on Chrome with pretty

66
00:02:56,130 --> 00:02:58,900
much the same sort of interface
capabilities and

67
00:02:58,900 --> 00:03:01,270
interactivity with it.

68
00:03:01,270 --> 00:03:05,140

69
00:03:05,140 --> 00:03:06,520
DAN GROVE: Yeah, so users
really wanted to have

70
00:03:06,520 --> 00:03:08,810
something that was a lot better
than what we were

71
00:03:08,810 --> 00:03:10,320
giving them back in 2007.

72
00:03:10,320 --> 00:03:13,120
And when we designed Swarm, we
really wanted to make this

73
00:03:13,120 --> 00:03:13,670
thing beautiful.

74
00:03:13,670 --> 00:03:18,110
And we think that the mobile
space really has driven the

75
00:03:18,110 --> 00:03:19,690
beauty requirements
for apps quite a

76
00:03:19,690 --> 00:03:20,980
long way at this point.

77
00:03:20,980 --> 00:03:22,580
We also wanted the app
to be really fast.

78
00:03:22,580 --> 00:03:24,450
We wanted it to start
up instantly.

79
00:03:24,450 --> 00:03:25,810
And we also wanted
it to be super

80
00:03:25,810 --> 00:03:27,800
responsive to user actions.

81
00:03:27,800 --> 00:03:29,090
And there are a bunch of
good reasons for that.

82
00:03:29,090 --> 00:03:31,120
One of them is how many of you
guys have had Wi-Fi problems

83
00:03:31,120 --> 00:03:32,670
here today?

84
00:03:32,670 --> 00:03:33,700
Anyone?

85
00:03:33,700 --> 00:03:35,030
So that sucks, right?

86
00:03:35,030 --> 00:03:36,900
You're trying to use
your application.

87
00:03:36,900 --> 00:03:38,960
You're waiting for the
web to respond.

88
00:03:38,960 --> 00:03:40,700
It's terrible.

89
00:03:40,700 --> 00:03:43,250
We were told this morning that
no Wi-Fi was working at all

90
00:03:43,250 --> 00:03:44,720
for speaker talks.

91
00:03:44,720 --> 00:03:46,950
And so we were happy that our
app actually works offline.

92
00:03:46,950 --> 00:03:48,600
So that was great.

93
00:03:48,600 --> 00:03:50,060
We really wanted an app
that works offline.

94
00:03:50,060 --> 00:03:51,970
But we also wanted one that
would leverage the cloud when

95
00:03:51,970 --> 00:03:53,110
the cloud was available.

96
00:03:53,110 --> 00:03:54,800
VIJAY MENON: Yeah,
Lars and Kasper

97
00:03:54,800 --> 00:03:55,510
talked about this theme.

98
00:03:55,510 --> 00:03:56,820
It's been hit a few times.

99
00:03:56,820 --> 00:03:59,860
One of the reasons we did it,
the news app as our test

100
00:03:59,860 --> 00:04:01,970
application in Dart, well
one, we're news junkies.

101
00:04:01,970 --> 00:04:04,440
And we knew it was an app we'd
use, which is always good.

102
00:04:04,440 --> 00:04:07,100
But the other is that, that
was a fairly common

103
00:04:07,100 --> 00:04:08,860
experience.

104
00:04:08,860 --> 00:04:11,390
With the web, you don't
have to install.

105
00:04:11,390 --> 00:04:14,300
Probably, most of you've
gotten this experience,

106
00:04:14,300 --> 00:04:16,350
particularly on a mobile device,
where you get a link

107
00:04:16,350 --> 00:04:18,950
to a news story, you click on
it, and then you get this

108
00:04:18,950 --> 00:04:22,440
message that says, please
install this app for

109
00:04:22,440 --> 00:04:25,430
such-and-such newspaper you've
never heard of to get the best

110
00:04:25,430 --> 00:04:26,760
viewing experience.

111
00:04:26,760 --> 00:04:28,450
And there's many cases
where it makes

112
00:04:28,450 --> 00:04:29,400
sense to install apps.

113
00:04:29,400 --> 00:04:31,520
But that's one where at
least we think it

114
00:04:31,520 --> 00:04:33,310
made no sense at all.

115
00:04:33,310 --> 00:04:35,420
We just want the system to get
out of our way and be able to

116
00:04:35,420 --> 00:04:38,670
just get to our content in
the browser on the web.

117
00:04:38,670 --> 00:04:40,660
DAN GROVE: Yeah, so we wanted
to build a web application

118
00:04:40,660 --> 00:04:43,360
that was really first
class in every way.

119
00:04:43,360 --> 00:04:46,100
The good thing was that the web
had actually changed a ton

120
00:04:46,100 --> 00:04:47,350
in the last five years.

121
00:04:47,350 --> 00:04:49,680
So one thing that's happened is
that web capabilities have

122
00:04:49,680 --> 00:04:51,260
improved radically.

123
00:04:51,260 --> 00:04:53,160
So you've gotten things
like animation

124
00:04:53,160 --> 00:04:55,780
and Canvas and WebGL.

125
00:04:55,780 --> 00:04:56,420
I'll tell you a story.

126
00:04:56,420 --> 00:04:59,570
I was incredibly disappointed
when I first arrived at Google

127
00:04:59,570 --> 00:05:01,660
back coming up on
five years ago.

128
00:05:01,660 --> 00:05:04,340
Because I thought, the web can
do all this cool stuff.

129
00:05:04,340 --> 00:05:05,640
There's all this great stuff.

130
00:05:05,640 --> 00:05:07,630
And I went out, and I met with
a bunch of teams to find out

131
00:05:07,630 --> 00:05:08,130
what they're doing.

132
00:05:08,130 --> 00:05:12,260
They said, well Web 2.0, it's
string concatenation,

133
00:05:12,260 --> 00:05:13,620
essentially.

134
00:05:13,620 --> 00:05:14,610
That was basically it.

135
00:05:14,610 --> 00:05:16,880
There was nothing more
to it than that.

136
00:05:16,880 --> 00:05:18,230
And we've moved way past that.

137
00:05:18,230 --> 00:05:20,830
You can actually do these kinds
of cool animations and

138
00:05:20,830 --> 00:05:23,870
3D graphics on the web,
which is fantastic.

139
00:05:23,870 --> 00:05:25,350
We've also gotten rid of
a lot of plug-ins.

140
00:05:25,350 --> 00:05:27,970
So you can actually build audio
that competes with the

141
00:05:27,970 --> 00:05:29,520
best native audio.

142
00:05:29,520 --> 00:05:30,840
You don't need plug-ins
for video.

143
00:05:30,840 --> 00:05:33,880
That's another fantastic
thing.

144
00:05:33,880 --> 00:05:35,850
And then there are really crazy
things that have been

145
00:05:35,850 --> 00:05:38,300
developed, like sockets.

146
00:05:38,300 --> 00:05:40,156
You could actually have a socket
between the client and

147
00:05:40,156 --> 00:05:40,620
the server.

148
00:05:40,620 --> 00:05:41,580
I mean, it's 2012.

149
00:05:41,580 --> 00:05:44,420
It's about time, but you
can actually do it.

150
00:05:44,420 --> 00:05:46,920
One nice thing I'd point out
here is that this is code for

151
00:05:46,920 --> 00:05:50,080
creating a web socket in Dart,
and it's actually very pretty.

152
00:05:50,080 --> 00:05:51,160
It's actually typed.

153
00:05:51,160 --> 00:05:52,750
It's very easy to
reason about it.

154
00:05:52,750 --> 00:05:54,450
It has nice closures.

155
00:05:54,450 --> 00:05:55,810
When I first put up the
code for this--

156
00:05:55,810 --> 00:05:57,400
I actually put up the
JavaScript code for

157
00:05:57,400 --> 00:05:58,060
WebSockets--

158
00:05:58,060 --> 00:06:01,430
and frankly, it was a lot uglier
than the Dart code.

159
00:06:01,430 --> 00:06:02,980
So we'll be talking a
lot more about this.

160
00:06:02,980 --> 00:06:05,430
But I think it's really
fantastic.

161
00:06:05,430 --> 00:06:07,500
And there are a lot of other
really cool features that are

162
00:06:07,500 --> 00:06:08,140
coming on the web.

163
00:06:08,140 --> 00:06:09,150
And there are more coming
all the time.

164
00:06:09,150 --> 00:06:12,170
There are all kinds of talks
here about doing new P2P

165
00:06:12,170 --> 00:06:17,630
real-time video and audio and
all kinds of other neat stuff.

166
00:06:17,630 --> 00:06:21,260
VIJAY MENON: The other axis, big
axis, that's changed over

167
00:06:21,260 --> 00:06:22,940
time is JavaScript
performance.

168
00:06:22,940 --> 00:06:24,250
And this is a really
interesting graph.

169
00:06:24,250 --> 00:06:28,630
Because for a very, very long
period of time, up to 2007,

170
00:06:28,630 --> 00:06:30,740
performance of code running
in the browser

171
00:06:30,740 --> 00:06:32,250
didn't really change.

172
00:06:32,250 --> 00:06:35,210
And then in 2008, something
happened.

173
00:06:35,210 --> 00:06:37,700
One of those things, at least,
was that Chrome was released

174
00:06:37,700 --> 00:06:39,670
with V8, its JavaScript
engine.

175
00:06:39,670 --> 00:06:42,560
And performance suddenly
got a lot better.

176
00:06:42,560 --> 00:06:45,190
And then over the past five
years, it's really gotten

177
00:06:45,190 --> 00:06:48,010
much, much better, not
just on Chrome but on

178
00:06:48,010 --> 00:06:49,520
other browsers as well.

179
00:06:49,520 --> 00:06:53,080
In fact, even your mobile
devices today run JavaScript

180
00:06:53,080 --> 00:06:57,690
far faster than what a desktop
did five years ago.

181
00:06:57,690 --> 00:07:00,250
And what's interesting about
this is that a lot of the apps

182
00:07:00,250 --> 00:07:04,290
that we interact with were
designed in this old world,

183
00:07:04,290 --> 00:07:06,650
where you really had no ability
to do any interesting

184
00:07:06,650 --> 00:07:08,430
compute on the browser itself.

185
00:07:08,430 --> 00:07:10,170
It was just way too slow.

186
00:07:10,170 --> 00:07:12,750
And this is going to be kind of
a running theme here that

187
00:07:12,750 --> 00:07:16,550
we'll get to later, that we
can rethink apps today.

188
00:07:16,550 --> 00:07:17,690
This is not Moore's Law.

189
00:07:17,690 --> 00:07:23,000
This is Moore's Law on steroids
if you look at the

190
00:07:23,000 --> 00:07:24,570
gains that we've seen
in performance

191
00:07:24,570 --> 00:07:26,030
in just five years.

192
00:07:26,030 --> 00:07:31,250
And that lets us dramatically
rethink how we design apps.

193
00:07:31,250 --> 00:07:31,510
DAN GROVE: Right.

194
00:07:31,510 --> 00:07:33,530
So the bottom line here is that
the browser has really

195
00:07:33,530 --> 00:07:34,880
changed across two axes.

196
00:07:34,880 --> 00:07:37,110
It's gotten far more
capabilities, and the

197
00:07:37,110 --> 00:07:39,470
performance has increased so
much that we can start doing

198
00:07:39,470 --> 00:07:41,590
things radically differently
from the way we were doing

199
00:07:41,590 --> 00:07:44,570
them in the past.

200
00:07:44,570 --> 00:07:45,910
So we talked about the web.

201
00:07:45,910 --> 00:07:48,060
But why are we here talking
about Dart?

202
00:07:48,060 --> 00:07:53,540
Well, programs don't just
get better magically.

203
00:07:53,540 --> 00:07:55,390
They get better because
programmers develop them.

204
00:07:55,390 --> 00:07:57,830
And developing these better
apps often requires bigger

205
00:07:57,830 --> 00:07:59,800
apps that are made out
of building blocks.

206
00:07:59,800 --> 00:08:02,760
And that requires actually
programming at scale.

207
00:08:02,760 --> 00:08:05,900
And when we talk about
programming in scale on Dart,

208
00:08:05,900 --> 00:08:08,500
we're talking about things
like 100,000-line or a

209
00:08:08,500 --> 00:08:10,720
million-line application.

210
00:08:10,720 --> 00:08:12,550
You're unlikely to build
that yourself.

211
00:08:12,550 --> 00:08:14,100
In fact, you're unlikely to
have two or three people

212
00:08:14,100 --> 00:08:16,060
building that in
a small group.

213
00:08:16,060 --> 00:08:17,570
What you're likely to
have are actual

214
00:08:17,570 --> 00:08:19,790
composable building blocks.

215
00:08:19,790 --> 00:08:21,250
You're going to need
to reuse code.

216
00:08:21,250 --> 00:08:24,420
And we're not talking about
copying and pasting code or

217
00:08:24,420 --> 00:08:26,460
downloading a little
piece of JavaScript

218
00:08:26,460 --> 00:08:28,240
and pasting it together.

219
00:08:28,240 --> 00:08:29,956
We're talking about something
where you actually want to be

220
00:08:29,956 --> 00:08:33,039
able to build libraries and
reuse those libraries.

221
00:08:33,039 --> 00:08:36,250
In order to do that, you
actually want structure.

222
00:08:36,250 --> 00:08:38,820
So structure is great, because
it actually lets you start

223
00:08:38,820 --> 00:08:40,850
reasoning about your
application.

224
00:08:40,850 --> 00:08:43,750
All those things you learned
back in Computer Science 101

225
00:08:43,750 --> 00:08:45,100
are actually very relevant
in Dart.

226
00:08:45,100 --> 00:08:47,580
You have classes, and you have
interface, and you have all

227
00:08:47,580 --> 00:08:49,780
these nice things.

228
00:08:49,780 --> 00:08:51,230
You also want to have
static checking.

229
00:08:51,230 --> 00:08:56,030
So grep works great when you
have 1,000 lines of code or

230
00:08:56,030 --> 00:08:57,410
something like that.

231
00:08:57,410 --> 00:08:58,800
Grep doesn't work great
when you have a

232
00:08:58,800 --> 00:08:59,680
million lines of code.

233
00:08:59,680 --> 00:09:01,420
And at Google, we actually have
a number of people who

234
00:09:01,420 --> 00:09:04,070
spend their time thinking about
tools to go and search

235
00:09:04,070 --> 00:09:06,460
over your code and reason
about your code.

236
00:09:06,460 --> 00:09:09,390
Static checking and static
checkability of a language

237
00:09:09,390 --> 00:09:10,600
really assist this.

238
00:09:10,600 --> 00:09:12,870
You also want it
to be toolable.

239
00:09:12,870 --> 00:09:15,800
vi or TextMate probably start
breaking down when your

240
00:09:15,800 --> 00:09:17,590
application gets to
be 100,000 lines.

241
00:09:17,590 --> 00:09:20,120
You actually want to be able
to jump to definition.

242
00:09:20,120 --> 00:09:22,660
You want to be able to find out
if a type exists, or you

243
00:09:22,660 --> 00:09:24,830
want to be able to find out
if a method exists.

244
00:09:24,830 --> 00:09:27,510
All these things are really
important, and one of the

245
00:09:27,510 --> 00:09:29,990
things we'll be talking about
in this talk is the Dart

246
00:09:29,990 --> 00:09:33,730
Editor and how it helps
you with these things.

247
00:09:33,730 --> 00:09:37,290
So we have a bunch of tools to
make Dart easier to program.

248
00:09:37,290 --> 00:09:38,840
And the first of these
is the Dart Editor.

249
00:09:38,840 --> 00:09:42,010
This is an Eclipse-based editor
that Kasper showed off

250
00:09:42,010 --> 00:09:42,840
in the last talk.

251
00:09:42,840 --> 00:09:45,630
And it provides a lot of very
nice features, which Vijay

252
00:09:45,630 --> 00:09:47,820
will be popping into
in a minute.

253
00:09:47,820 --> 00:09:49,590
We also have something
that we call Dartium.

254
00:09:49,590 --> 00:09:51,900
And Dartium is our own
home-brewed version of

255
00:09:51,900 --> 00:09:54,730
Chromium with the Dart
VM embedded in it.

256
00:09:54,730 --> 00:09:56,985
And this is really fantastic
because it gives you that

257
00:09:56,985 --> 00:09:59,790
instant edit refresh cycle
that everyone likes.

258
00:09:59,790 --> 00:10:02,860
When it's time to actually
deploy your app, Kasper talked

259
00:10:02,860 --> 00:10:05,690
at length about the Dart2JS
Compiler in the last talk.

260
00:10:05,690 --> 00:10:08,030
The goal here is that Dart
does not break the web.

261
00:10:08,030 --> 00:10:11,320
We compiled Dart to the tip of
all the major browsers that

262
00:10:11,320 --> 00:10:12,590
are auto updated.

263
00:10:12,590 --> 00:10:16,260
And we also compile
it to run on IE9+.

264
00:10:16,260 --> 00:10:18,800
VIJAY MENON: So rather than
just tell you about this,

265
00:10:18,800 --> 00:10:20,730
let's dive in and show.

266
00:10:20,730 --> 00:10:23,850
And one of things we're going to
show later in this talk is

267
00:10:23,850 --> 00:10:26,930
we're going to go into detail
on the Swarm newsreader.

268
00:10:26,930 --> 00:10:30,670
But before I dive into that,
let's start with something

269
00:10:30,670 --> 00:10:31,290
really simple.

270
00:10:31,290 --> 00:10:34,370
Let's just go into the Dart
Editor here and create a new

271
00:10:34,370 --> 00:10:34,850
application.

272
00:10:34,850 --> 00:10:38,060
Let's just create a "Hello
World!" application here.

273
00:10:38,060 --> 00:10:41,100
So it's a nice wizard to just
get me bootstrapped.

274
00:10:41,100 --> 00:10:42,700
But it's really quite
simple here.

275
00:10:42,700 --> 00:10:43,370
There's just--

276
00:10:43,370 --> 00:10:47,240
If you look at what this
created, I have an HTML file.

277
00:10:47,240 --> 00:10:48,530
Let's go there first.

278
00:10:48,530 --> 00:10:50,890
That's, of course,
where you land.

279
00:10:50,890 --> 00:10:54,790
And it's HTML.

280
00:10:54,790 --> 00:10:57,460
The things I really want to call
out to you here are some

281
00:10:57,460 --> 00:11:00,870
things that we've done to help
you debug your application on

282
00:11:00,870 --> 00:11:02,940
Dartium and also deploy
it on any browser with

283
00:11:02,940 --> 00:11:05,890
the same HTML file.

284
00:11:05,890 --> 00:11:07,630
So first you'll notice two
script tags at the bottom.

285
00:11:07,630 --> 00:11:10,110
The first one has a type you
may not have seen before,

286
00:11:10,110 --> 00:11:11,390
application slash dart.

287
00:11:11,390 --> 00:11:14,600
That's a new type that is
intended for browsers that

288
00:11:14,600 --> 00:11:16,300
support Dart natively.

289
00:11:16,300 --> 00:11:19,050
And in our case,
that's Dartium.

290
00:11:19,050 --> 00:11:22,910
And so Dartium will be able to
just run hello.dart directly

291
00:11:22,910 --> 00:11:23,995
with no tools involved.

292
00:11:23,995 --> 00:11:26,410
You just change your
app, reload it in

293
00:11:26,410 --> 00:11:28,210
Dartium, and it works.

294
00:11:28,210 --> 00:11:31,110
Of course, you want your app
to run on all browsers.

295
00:11:31,110 --> 00:11:34,280
And to make that easy, at least
for the development

296
00:11:34,280 --> 00:11:37,110
perspective, we have this little
script called dart.js,

297
00:11:37,110 --> 00:11:38,400
which just bootstraps.

298
00:11:38,400 --> 00:11:41,330
It detects if you've got
Dart loaded or not--

299
00:11:41,330 --> 00:11:42,960
or Dart supported
natively or not.

300
00:11:42,960 --> 00:11:46,780
And if you don't have Dart
supported natively, it will

301
00:11:46,780 --> 00:11:51,420
replace it with a JS version
instead that you've generated.

302
00:11:51,420 --> 00:11:54,050
And of course, if you're
deploying this, you don't

303
00:11:54,050 --> 00:11:56,400
necessarily want to do this
stuff, you could just deploy

304
00:11:56,400 --> 00:12:00,880
directly with the JavaScript
that you generate

305
00:12:00,880 --> 00:12:02,640
out of Dart to JS.

306
00:12:02,640 --> 00:12:06,390
So let's take a look
at hello.dart.

307
00:12:06,390 --> 00:12:08,390
We're importing a library.

308
00:12:08,390 --> 00:12:09,450
I'll get to that in a moment.

309
00:12:09,450 --> 00:12:14,535
The main entry point of any
Dart application is Main.

310
00:12:14,535 --> 00:12:18,420
And it's calling a method called
showMessage here, which

311
00:12:18,420 --> 00:12:24,120
is taking a string and doing an
operation on it to show the

312
00:12:24,120 --> 00:12:26,620
message "Welcome to Dart"
on a web page.

313
00:12:26,620 --> 00:12:28,210
So let's just fire that up.

314
00:12:28,210 --> 00:12:30,090
This is running in Dartium.

315
00:12:30,090 --> 00:12:33,610
And you can see it's just
loaded up right here.

316
00:12:33,610 --> 00:12:34,730
So let's take a look at this.

317
00:12:34,730 --> 00:12:39,080
So first of all, dart:HTML is
the way you interact with the

318
00:12:39,080 --> 00:12:42,560
browser at the lowest
level in Dart.

319
00:12:42,560 --> 00:12:44,670
And we had a few things that we
were trying to do when we

320
00:12:44,670 --> 00:12:45,710
created this library.

321
00:12:45,710 --> 00:12:48,770
First, we wanted to basically
give you all the capabilities

322
00:12:48,770 --> 00:12:52,800
that you have in JavaScript for
interacting with the DOM.

323
00:12:52,800 --> 00:12:56,140
So anything you can pretty much
do in JavaScript you can

324
00:12:56,140 --> 00:12:57,510
do in Dart as well.

325
00:12:57,510 --> 00:12:59,900
But we also wanted to take
the opportunity to

326
00:12:59,900 --> 00:13:01,370
clean up the API.

327
00:13:01,370 --> 00:13:05,410
A lot of times, people will use
frameworks, like jQuery,

328
00:13:05,410 --> 00:13:10,270
for example, just because the
raw DOM API is kind of clumsy

329
00:13:10,270 --> 00:13:12,830
to use and shows its age.

330
00:13:12,830 --> 00:13:15,750
So we definitely took
inspiration from some of these

331
00:13:15,750 --> 00:13:19,000
frameworks and tried to just
clean up the raw DOM.

332
00:13:19,000 --> 00:13:24,060
So just accessing the DOM
directly was nice.

333
00:13:24,060 --> 00:13:28,370
And then finally, this library
was really codesigned as the

334
00:13:28,370 --> 00:13:29,970
Dart language itself evolved.

335
00:13:29,970 --> 00:13:34,670
And we tried to make the API
take advantage of all the

336
00:13:34,670 --> 00:13:35,920
features of Dart.

337
00:13:35,920 --> 00:13:39,550
So for example, this query API
here is-- it's kind of

338
00:13:39,550 --> 00:13:42,950
analogous to the dollar-sign
operation in jQuery if you're

339
00:13:42,950 --> 00:13:43,230
used to that.

340
00:13:43,230 --> 00:13:47,010
It's basically a querySelector
on the DOM looking for an

341
00:13:47,010 --> 00:13:51,160
element of ID text and
then setting its Text

342
00:13:51,160 --> 00:13:52,650
field to the message.

343
00:13:52,650 --> 00:13:55,550
And the nice thing about this
is that it's typed.

344
00:13:55,550 --> 00:13:58,150
So let's take a look at this.

345
00:13:58,150 --> 00:14:03,610
So suppose we just want to
go to the declaration.

346
00:14:03,610 --> 00:14:05,860
We've got the tooling to
go ahead and do that.

347
00:14:05,860 --> 00:14:07,820
So we can just see, what
is this query method?

348
00:14:07,820 --> 00:14:10,260
Well, we have this comment here
that tells us that it's

349
00:14:10,260 --> 00:14:13,070
returns the first element in
some traversal of the document

350
00:14:13,070 --> 00:14:14,810
given a string.

351
00:14:14,810 --> 00:14:16,290
What is an element?

352
00:14:16,290 --> 00:14:18,750
Well, we can do that too.

353
00:14:18,750 --> 00:14:20,640
Just chase that down, and we
see it's an interface.

354
00:14:20,640 --> 00:14:24,030
This ends up actually being one
of the basic interfaces in

355
00:14:24,030 --> 00:14:29,410
the HTML DOM that we can
go ahead and work with.

356
00:14:29,410 --> 00:14:32,790
So a nice thing also about using
the Dart Editor is that

357
00:14:32,790 --> 00:14:34,080
it's doing some analysis here.

358
00:14:34,080 --> 00:14:35,190
So it knows the type.

359
00:14:35,190 --> 00:14:37,140
So remember, query returns
an element.

360
00:14:37,140 --> 00:14:40,780
And so you're able to use that
information and get auto

361
00:14:40,780 --> 00:14:41,580
completion here.

362
00:14:41,580 --> 00:14:43,480
And we know what
the fields are.

363
00:14:43,480 --> 00:14:46,800
And so, as a programmer,
you can quickly search.

364
00:14:46,800 --> 00:14:48,230
You don't have to look
up documentation.

365
00:14:48,230 --> 00:14:52,940
You have at your fingertips
what you can do.

366
00:14:52,940 --> 00:14:56,760
Another nice thing is if
you do make typos,

367
00:14:56,760 --> 00:14:57,770
the editor can tell.

368
00:14:57,770 --> 00:15:01,000
It'll look at the type
information, and show you that

369
00:15:01,000 --> 00:15:04,110
you did something wrong.

370
00:15:04,110 --> 00:15:05,355
DAN GROVE: There's a red
line under there, for

371
00:15:05,355 --> 00:15:06,230
those in the back.

372
00:15:06,230 --> 00:15:08,050
VIJAY MENON: The yellow line or
problem, and if we look at

373
00:15:08,050 --> 00:15:10,300
the list of problems
here, we see, hey,

374
00:15:10,300 --> 00:15:11,190
there's something wrong.

375
00:15:11,190 --> 00:15:13,730
Text is not a member
of element.

376
00:15:13,730 --> 00:15:17,260
If you were at the last talk,
one of the things that Kasper

377
00:15:17,260 --> 00:15:19,800
talked about in terms of
JavaScript is that it had this

378
00:15:19,800 --> 00:15:21,640
just trucking mentality.

379
00:15:21,640 --> 00:15:24,800
And this is a case where, if
you do this kind of code in

380
00:15:24,800 --> 00:15:27,030
JavaScript and you misspell
the field, it will happily

381
00:15:27,030 --> 00:15:30,630
just create a new property
called txt on your element.

382
00:15:30,630 --> 00:15:31,560
And it won't show up.

383
00:15:31,560 --> 00:15:33,010
And you'll just be wondering
what happened.

384
00:15:33,010 --> 00:15:35,480
And you'll have to dig
that out yourself.

385
00:15:35,480 --> 00:15:38,980
Here, we get that information
right away.

386
00:15:38,980 --> 00:15:41,920
And that's, again, the
philosophy of early error

387
00:15:41,920 --> 00:15:44,360
information in Dart, which we
think is going to be very

388
00:15:44,360 --> 00:15:46,880
important as we go
to larger apps.

389
00:15:46,880 --> 00:15:51,080
So let's show more about Dart
HTML before we move on.

390
00:15:51,080 --> 00:15:53,925
One of the fundamental things
you want to do with DOM is

391
00:15:53,925 --> 00:15:54,710
create elements.

392
00:15:54,710 --> 00:15:57,910
And we have a nice way
of doing that.

393
00:15:57,910 --> 00:16:00,020
In JavaScript you
need a factory.

394
00:16:00,020 --> 00:16:01,740
In Dart you just call
a constructor.

395
00:16:01,740 --> 00:16:03,960
So we can call new
CanvasElement

396
00:16:03,960 --> 00:16:06,120
to create the Canvas.

397
00:16:06,120 --> 00:16:10,450
And the constructor for Canvas
takes height and width.

398
00:16:10,450 --> 00:16:13,800
It uses a feature called
Optional Named Parameters.

399
00:16:13,800 --> 00:16:19,820
So I don't have to remember
the order in which it's--

400
00:16:19,820 --> 00:16:20,920
whether it's height or width.

401
00:16:20,920 --> 00:16:23,550
I can just go ahead
and invoke that.

402
00:16:23,550 --> 00:16:27,215
And this typo, at least,
was on purpose.

403
00:16:27,215 --> 00:16:29,420
It shows that, hey,
I got it wrong.

404
00:16:29,420 --> 00:16:31,680
That was the wrong name
of the field.

405
00:16:31,680 --> 00:16:33,740
Every time I give this talk
I have different typos.

406
00:16:33,740 --> 00:16:35,910
So you can guess which ones--

407
00:16:35,910 --> 00:16:37,460
They're all on purpose.

408
00:16:37,460 --> 00:16:39,840
It's all right.

409
00:16:39,840 --> 00:16:42,310
So yeah, I could tell right away
that there's a problem.

410
00:16:42,310 --> 00:16:44,620
And I can go ahead
and fix that.

411
00:16:44,620 --> 00:16:50,520
And again, I get cool type
completion from here.

412
00:16:50,520 --> 00:16:54,040
So again, I know what's
on the Canvas.

413
00:16:54,040 --> 00:16:56,840
I know that it's got a context,
a 2D context, in

414
00:16:56,840 --> 00:16:57,450
particular.

415
00:16:57,450 --> 00:17:01,140
Usually want to get at the
context to be able to do

416
00:17:01,140 --> 00:17:02,620
interesting things.

417
00:17:02,620 --> 00:17:08,372
And then if I want to set the
fill style in the context, not

418
00:17:08,372 --> 00:17:13,930
the Context 2D, again, I
can see what's there.

419
00:17:13,930 --> 00:17:15,180
Let's make this one red.

420
00:17:15,180 --> 00:17:17,930

421
00:17:17,930 --> 00:17:19,216
Let's also fill a rectangle.

422
00:17:19,216 --> 00:17:24,190

423
00:17:24,190 --> 00:17:26,130
Go with something very
simple here.

424
00:17:26,130 --> 00:17:29,340
But again, I see, as I'm typing
in, what the signature

425
00:17:29,340 --> 00:17:30,370
of this method is.

426
00:17:30,370 --> 00:17:31,990
So I don't have to really guess
at what the parameters

427
00:17:31,990 --> 00:17:34,820
are or have to look up
things on the side.

428
00:17:34,820 --> 00:17:36,370
It just sort of works for me.

429
00:17:36,370 --> 00:17:39,890
And let's go ahead and add this
to the document and see

430
00:17:39,890 --> 00:17:41,870
how that looks.

431
00:17:41,870 --> 00:17:44,575
So I'm just going to get the
nodes of the document's body.

432
00:17:44,575 --> 00:17:47,310
And I'm going to go ahead
and add the Canvas.

433
00:17:47,310 --> 00:17:50,410

434
00:17:50,410 --> 00:17:53,290
And let's load that
up in Dartium.

435
00:17:53,290 --> 00:17:55,340
And now you can see our "hello"
app with just a little

436
00:17:55,340 --> 00:17:57,840
Canvas at the bottom.

437
00:17:57,840 --> 00:17:58,330
All right.

438
00:17:58,330 --> 00:18:00,600
So let's make this a little
bit more interesting.

439
00:18:00,600 --> 00:18:03,250
First of all let's just--

440
00:18:03,250 --> 00:18:05,140
Because I don't type too fast,
let me just do some cut and

441
00:18:05,140 --> 00:18:07,500
paste and create a second
Canvas here,

442
00:18:07,500 --> 00:18:09,060
and save this off.

443
00:18:09,060 --> 00:18:12,810
And as I do this, one nice thing
I get is, hey there's

444
00:18:12,810 --> 00:18:13,630
some errors.

445
00:18:13,630 --> 00:18:15,730
You can't just do it
the way you did.

446
00:18:15,730 --> 00:18:20,290
The editor shows me right away
that Canvas and context are

447
00:18:20,290 --> 00:18:21,360
duplicate definitions.

448
00:18:21,360 --> 00:18:23,870
And in this case, I can look at
my code and know that these

449
00:18:23,870 --> 00:18:26,200
two definitions don't conflict
with each other.

450
00:18:26,200 --> 00:18:29,520
And I can make sure that I'm
doing the right thing here.

451
00:18:29,520 --> 00:18:33,870
And let's make this one a little
bit different for fun.

452
00:18:33,870 --> 00:18:35,380
Give it a different width.

453
00:18:35,380 --> 00:18:42,230
Let's make it blue, and
just load it back up.

454
00:18:42,230 --> 00:18:44,740
And again, I'm just
reloading--

455
00:18:44,740 --> 00:18:46,660
I'm restarting the browser,
because it's so fast.

456
00:18:46,660 --> 00:18:48,370
But you don't have to do that.

457
00:18:48,370 --> 00:18:51,140
I can just go change it here.

458
00:18:51,140 --> 00:18:52,220
I do have to save my file.

459
00:18:52,220 --> 00:18:56,000
But then I can just go
back into Dartium

460
00:18:56,000 --> 00:18:57,720
here and reload it.

461
00:18:57,720 --> 00:19:00,030
And everything just works.

462
00:19:00,030 --> 00:19:02,140
So that's how you
create elements.

463
00:19:02,140 --> 00:19:04,110
You've got nice constructors
in Dart that you

464
00:19:04,110 --> 00:19:05,210
can use to do it.

465
00:19:05,210 --> 00:19:07,700
You've got named optional
parameters to make it easy to

466
00:19:07,700 --> 00:19:09,440
set things up.

467
00:19:09,440 --> 00:19:10,450
Let's say you want a query.

468
00:19:10,450 --> 00:19:12,320
That's a fundamental
operation.

469
00:19:12,320 --> 00:19:14,400
And we showed one example
right here where we're

470
00:19:14,400 --> 00:19:19,230
querying for text, for the
element with the text ID.

471
00:19:19,230 --> 00:19:28,070
Let's do another one where we
get a list of all of the

472
00:19:28,070 --> 00:19:30,800
Canvas objects.

473
00:19:30,800 --> 00:19:34,270
So Query All is another
operation like query, but this

474
00:19:34,270 --> 00:19:35,150
returns a list.

475
00:19:35,150 --> 00:19:37,770
So now you get nice typing
information.

476
00:19:37,770 --> 00:19:41,480
List is a fundamental data
structure in Dart.

477
00:19:41,480 --> 00:19:43,250
And there's nice language
support for it.

478
00:19:43,250 --> 00:19:49,750
So I get this list, and it's
really easy to just iterate

479
00:19:49,750 --> 00:19:51,950
over all the elements
in the list.

480
00:19:51,950 --> 00:19:54,840
So this will give me each
Canvas, and I can do something

481
00:19:54,840 --> 00:19:55,620
interesting with it.

482
00:19:55,620 --> 00:20:02,010
So in this case, let's go ahead
and set the context.

483
00:20:02,010 --> 00:20:03,940
And note that this
is pretty cool.

484
00:20:03,940 --> 00:20:07,850
The editor is still able to
reason about this and do some

485
00:20:07,850 --> 00:20:09,450
nice auto complete for me.

486
00:20:09,450 --> 00:20:14,660
So let's fill in another
rectangle, slightly different,

487
00:20:14,660 --> 00:20:15,910
so we can actually
see something.

488
00:20:15,910 --> 00:20:18,530

489
00:20:18,530 --> 00:20:21,300
So this should go through the
two Canvases on my page and

490
00:20:21,300 --> 00:20:23,740
draw an existing rectangle.

491
00:20:23,740 --> 00:20:25,500
So let's see if I
did this right.

492
00:20:25,500 --> 00:20:27,500
And yes, you can see that
here is the second

493
00:20:27,500 --> 00:20:30,390
rectangle on both.

494
00:20:30,390 --> 00:20:32,160
Iterating over properties,
this is kind of a

495
00:20:32,160 --> 00:20:33,930
cool, subtle thing.

496
00:20:33,930 --> 00:20:36,950
You can write this code
in JavaScript and

497
00:20:36,950 --> 00:20:37,840
iterate over the list.

498
00:20:37,840 --> 00:20:39,320
But it doesn't do exactly
what you want.

499
00:20:39,320 --> 00:20:41,750
It will not only give you the
Canvas objects, it will also

500
00:20:41,750 --> 00:20:43,760
give you the length property
and so on.

501
00:20:43,760 --> 00:20:46,670
So it's not as nicely integrated
as it is in Dart.

502
00:20:46,670 --> 00:20:48,790
And that makes for a pretty
cool experience.

503
00:20:48,790 --> 00:20:51,430

504
00:20:51,430 --> 00:20:53,570
One of the things we liked
a lot about jQuery is the

505
00:20:53,570 --> 00:20:55,010
ability to chain things
together.

506
00:20:55,010 --> 00:20:58,190
And you can do that in pretty
cool ways in Dart, too.

507
00:20:58,190 --> 00:21:03,030
So let's do another operation
on the Canvas here.

508
00:21:03,030 --> 00:21:05,150
And again, this is going
to give me a

509
00:21:05,150 --> 00:21:07,830
list of all the Canvases.

510
00:21:07,830 --> 00:21:11,790
And the list object in Dart has
a lot of nice functional

511
00:21:11,790 --> 00:21:12,460
style methods.

512
00:21:12,460 --> 00:21:15,980
So one of the things we
can do is filter.

513
00:21:15,980 --> 00:21:18,020
And that takes a closure.

514
00:21:18,020 --> 00:21:22,540
So we can basically say, well
let's get all of the elements

515
00:21:22,540 --> 00:21:27,650
where the width is
equal to 100.

516
00:21:27,650 --> 00:21:32,840
So that should give me
the second Canvas.

517
00:21:32,840 --> 00:21:34,640
A lot of times--

518
00:21:34,640 --> 00:21:37,390
And again, I get the nice
auto complete as I go.

519
00:21:37,390 --> 00:21:43,350
A lot of times, again, when
you're working with a Canvas,

520
00:21:43,350 --> 00:21:45,140
you really just want to
work with its context.

521
00:21:45,140 --> 00:21:50,780
So we can go ahead and pull
out the context 2D.

522
00:21:50,780 --> 00:21:54,860
So now instead of a list of
Canvas elements, we have a

523
00:21:54,860 --> 00:21:57,020
list of Canvas rendering
context 2D.

524
00:21:57,020 --> 00:21:59,515
That's a bit of a mouthful, but
we haven't actually had to

525
00:21:59,515 --> 00:21:59,930
type that in.

526
00:21:59,930 --> 00:22:02,920
So it's not so bad.

527
00:22:02,920 --> 00:22:11,360
And then finally, once we have
that context that we want,

528
00:22:11,360 --> 00:22:16,110
let's go ahead and, since I'm
having so much fun with

529
00:22:16,110 --> 00:22:19,330
rectangles, fill another
rectangle this time.

530
00:22:19,330 --> 00:22:22,550

531
00:22:22,550 --> 00:22:25,465
And let's make this kind of
long, just so it shows up.

532
00:22:25,465 --> 00:22:30,150

533
00:22:30,150 --> 00:22:33,914
And I need to close that off.

534
00:22:33,914 --> 00:22:36,150
Oh, don't have a semicolon
there.

535
00:22:36,150 --> 00:22:38,980
It's awfully nice having an
editor that tells you what you

536
00:22:38,980 --> 00:22:42,370
did wrong when you're giving
a live demo, by the way.

537
00:22:42,370 --> 00:22:42,730
So yeah.

538
00:22:42,730 --> 00:22:44,040
I save that.

539
00:22:44,040 --> 00:22:45,790
Let me go ahead and
load that up.

540
00:22:45,790 --> 00:22:48,340
If I did this right, yes, you
see a difference only on the

541
00:22:48,340 --> 00:22:49,070
second Canvas.

542
00:22:49,070 --> 00:22:51,410
So again, you've got this nice
way of just chaining things

543
00:22:51,410 --> 00:22:54,640
together in Dart that you just
get for free, because we're

544
00:22:54,640 --> 00:22:57,930
able to leverage the core
Dart data structures.

545
00:22:57,930 --> 00:23:01,100
And one final thing I want
to get to in dart:HTML.

546
00:23:01,100 --> 00:23:04,200
Fundamental thing with UIs, of
course, and web UIs, is you

547
00:23:04,200 --> 00:23:07,080
want to be able to
add listeners.

548
00:23:07,080 --> 00:23:08,810
So you can do that.

549
00:23:08,810 --> 00:23:10,980
And that's another thing that
we've changed a bit.

550
00:23:10,980 --> 00:23:15,140
Let me just go ahead and use
this text element here.

551
00:23:15,140 --> 00:23:16,390
This is an element.

552
00:23:16,390 --> 00:23:19,230
We can listen to all of the
events on it by just looking

553
00:23:19,230 --> 00:23:22,080
at this On field, which gives us
a list of all the things we

554
00:23:22,080 --> 00:23:22,910
can listen on to.

555
00:23:22,910 --> 00:23:25,730
So we can easily see
what's there.

556
00:23:25,730 --> 00:23:29,160
And of course, one of the more
interesting ones is click.

557
00:23:29,160 --> 00:23:32,120
We can go ahead and add
our own handler that

558
00:23:32,120 --> 00:23:33,150
listens to an event.

559
00:23:33,150 --> 00:23:34,470
And in this case, we're
not going to do

560
00:23:34,470 --> 00:23:35,280
anything with that event.

561
00:23:35,280 --> 00:23:36,530
We're just going to show
a new message.

562
00:23:36,530 --> 00:23:48,390

563
00:23:48,390 --> 00:23:52,030
And if I did this right,
I have the event here.

564
00:23:52,030 --> 00:23:52,400
OK.

565
00:23:52,400 --> 00:23:54,460
So that's all running
in Dartium.

566
00:23:54,460 --> 00:23:58,950
Of course, you're going to want
to be able to run your

567
00:23:58,950 --> 00:24:00,810
stuff as JavaScript, and
that's easy to do.

568
00:24:00,810 --> 00:24:03,200
You can just generate
JavaScript here.

569
00:24:03,200 --> 00:24:08,570
And let's go there, grab that
same URL, go to another

570
00:24:08,570 --> 00:24:10,260
browser, Firefox--

571
00:24:10,260 --> 00:24:13,980
we haven't actually put
the Dart VM in there.

572
00:24:13,980 --> 00:24:20,350
And OK.

573
00:24:20,350 --> 00:24:21,175
Thank you.

574
00:24:21,175 --> 00:24:23,490
Hey, it's great having an
audience that knows

575
00:24:23,490 --> 00:24:24,220
what I should do.

576
00:24:24,220 --> 00:24:25,010
So Firefox running.

577
00:24:25,010 --> 00:24:26,090
Thank you very much.

578
00:24:26,090 --> 00:24:27,050
And here's the same code.

579
00:24:27,050 --> 00:24:30,800
And glad you're paying attention
and helping me out.

580
00:24:30,800 --> 00:24:37,190
And it's running the same
as it ran in Chrome.

581
00:24:37,190 --> 00:24:40,550
So all this tooling really
helps us out, we believe.

582
00:24:40,550 --> 00:24:44,730
But you don't have to use the
tooling if you don't want to.

583
00:24:44,730 --> 00:24:47,660
All of the stuff is available
there to use

584
00:24:47,660 --> 00:24:49,720
at the command line.

585
00:24:49,720 --> 00:24:50,360
DAN GROVE: Yeah, exactly.

586
00:24:50,360 --> 00:24:53,690
So we certainly have people on
our team that will never use

587
00:24:53,690 --> 00:24:54,950
an IDE ever.

588
00:24:54,950 --> 00:24:58,650
And they're actually perfectly
happy writing Dart code.

589
00:24:58,650 --> 00:25:00,510
These are the same people,
they use vi.

590
00:25:00,510 --> 00:25:01,930
They're really addicted to it.

591
00:25:01,930 --> 00:25:02,940
They're not going to switch.

592
00:25:02,940 --> 00:25:04,510
But all the tools
work fine there.

593
00:25:04,510 --> 00:25:06,660
So you can run the Dart VM
on the command line.

594
00:25:06,660 --> 00:25:09,115
You can run the Dart Compiler
on the command line, produce

595
00:25:09,115 --> 00:25:10,870
your JavaScript for your
web application.

596
00:25:10,870 --> 00:25:11,640
You can use Dartium.

597
00:25:11,640 --> 00:25:12,720
You can use everything.

598
00:25:12,720 --> 00:25:14,890
So you don't have to buy into
all of the tools in order to

599
00:25:14,890 --> 00:25:16,660
make this work.

600
00:25:16,660 --> 00:25:19,040
So let's get back to Swarm and
talk about the design choices

601
00:25:19,040 --> 00:25:20,720
we made and how we
think modern apps

602
00:25:20,720 --> 00:25:23,430
should be built in Dart.

603
00:25:23,430 --> 00:25:26,290
So going back to the goals here,
we really wanted Swarm

604
00:25:26,290 --> 00:25:29,140
to be a great news reader that
was written in Dart.

605
00:25:29,140 --> 00:25:30,890
Why written in Dart?

606
00:25:30,890 --> 00:25:32,720
Because we care a ton about
Dart, and we actually wanted

607
00:25:32,720 --> 00:25:33,880
to learn about the language.

608
00:25:33,880 --> 00:25:36,100
And we wanted to iterate on
the language with a real

609
00:25:36,100 --> 00:25:37,640
application.

610
00:25:37,640 --> 00:25:39,810
Speed is critical.

611
00:25:39,810 --> 00:25:43,570
If you work on the Dart Team,
you have to care about speed.

612
00:25:43,570 --> 00:25:44,820
There's just no way around it.

613
00:25:44,820 --> 00:25:48,990
So 60 frames per second is the
requirement these days.

614
00:25:48,990 --> 00:25:50,900
We needed an application that
could be customized to

615
00:25:50,900 --> 00:25:51,830
different form factors.

616
00:25:51,830 --> 00:25:53,290
I remember the first time
we showed it to someone.

617
00:25:53,290 --> 00:25:55,500
The first question we got was,
so if you want to run this on

618
00:25:55,500 --> 00:25:57,180
a phone, do you have to
rewrite the entire

619
00:25:57,180 --> 00:25:57,840
application?

620
00:25:57,840 --> 00:25:58,970
And the answer is no.

621
00:25:58,970 --> 00:26:01,030
We tried to design it in such
a way that we could actually

622
00:26:01,030 --> 00:26:04,490
build customized UIs relatively
straightforwardly.

623
00:26:04,490 --> 00:26:07,290
And finally, we wanted it
to be offline capable.

624
00:26:07,290 --> 00:26:09,120
And not just so that the demo
would work when we were

625
00:26:09,120 --> 00:26:10,610
talking at Google I/O.
But there are a

626
00:26:10,610 --> 00:26:12,580
lot of other reasons.

627
00:26:12,580 --> 00:26:15,710
Most of you, I guess all of us,
will wind up with these

628
00:26:15,710 --> 00:26:19,550
Wi-Fi-enabled tablets that
have no connectivity when

629
00:26:19,550 --> 00:26:22,780
they're outside a Wi-Fi zone or
when they're at Google I/O.

630
00:26:22,780 --> 00:26:25,240
So people that have those are
going to care a ton about

631
00:26:25,240 --> 00:26:26,430
being offline.

632
00:26:26,430 --> 00:26:28,290
People that live in the US care
a lot about this too.

633
00:26:28,290 --> 00:26:31,060
Because the mobile networks here
are pretty lousy, and you

634
00:26:31,060 --> 00:26:34,030
often wind up without
connectivity.

635
00:26:34,030 --> 00:26:39,210
So we needed to meet all these
goals to make Swarm work well.

636
00:26:39,210 --> 00:26:40,390
So we started with the UI.

637
00:26:40,390 --> 00:26:42,570
And we wanted to build
a great layout.

638
00:26:42,570 --> 00:26:45,050
And we wanted to build a system
that would work nicely

639
00:26:45,050 --> 00:26:48,550
on phones, on tablets,
and on the desktop.

640
00:26:48,550 --> 00:26:50,190
We really liked what we saw
when we went out and

641
00:26:50,190 --> 00:26:51,365
looked at CS's grid.

642
00:26:51,365 --> 00:26:54,120
We thought, that's super cool.

643
00:26:54,120 --> 00:26:55,890
Unfortunately, it's
not everywhere we

644
00:26:55,890 --> 00:26:56,900
needed it to be yet.

645
00:26:56,900 --> 00:26:59,220
It's critical to us that we not
break the web and that we

646
00:26:59,220 --> 00:27:01,320
actually build Dart applications
that work across

647
00:27:01,320 --> 00:27:03,430
all the browsers that
we're targeting.

648
00:27:03,430 --> 00:27:05,350
We also looked at CS's
flex box, which is

649
00:27:05,350 --> 00:27:08,080
also kind of cool.

650
00:27:08,080 --> 00:27:09,340
But it has some problems.

651
00:27:09,340 --> 00:27:10,930
One is that it doesn't
support animation.

652
00:27:10,930 --> 00:27:13,430
And animation is really critical
if we're going to

653
00:27:13,430 --> 00:27:15,290
build really great apps.

654
00:27:15,290 --> 00:27:17,000
It's also not identical
cross browser.

655
00:27:17,000 --> 00:27:18,570
And we didn't really
want to do a lot of

656
00:27:18,570 --> 00:27:20,690
tweaking across browsers.

657
00:27:20,690 --> 00:27:22,770
And then we had a revelation.

658
00:27:22,770 --> 00:27:25,580
We thought about building this
and doing layout in code.

659
00:27:25,580 --> 00:27:27,360
And that's kind of nice.

660
00:27:27,360 --> 00:27:29,550
Because layout in code could
be the same everywhere.

661
00:27:29,550 --> 00:27:32,450
And you can actually get
animations that work.

662
00:27:32,450 --> 00:27:35,340
And we can build on all this
awesome VM speed that has been

663
00:27:35,340 --> 00:27:37,900
developed over the
last five years.

664
00:27:37,900 --> 00:27:41,110
We don't have to rely on only
the browser primitives.

665
00:27:41,110 --> 00:27:43,240
We can actually do interesting
stuff in code.

666
00:27:43,240 --> 00:27:44,590
And that was what we decided
to do for the

667
00:27:44,590 --> 00:27:47,630
layout engine here.

668
00:27:47,630 --> 00:27:50,310
Underneath the layout, we
thought that we would actually

669
00:27:50,310 --> 00:27:52,330
try to take a fairly structured
approach to

670
00:27:52,330 --> 00:27:53,470
building the application.

671
00:27:53,470 --> 00:27:56,120
And it's kind of a mouthful,
like the

672
00:27:56,120 --> 00:27:57,580
Model-View-ViewModel Approach.

673
00:27:57,580 --> 00:28:01,530
And this has been an approach
that's been taken, basically,

674
00:28:01,530 --> 00:28:05,790
since the mid-2000s for rich
client applications.

675
00:28:05,790 --> 00:28:08,570
And the general idea here
is that you have Views.

676
00:28:08,570 --> 00:28:11,020
And each of those Views is
coupled to its own ViewModel.

677
00:28:11,020 --> 00:28:13,800
And the ViewModel essentially
maintains state that is

678
00:28:13,800 --> 00:28:18,460
related to the View but that
isn't the same as the true

679
00:28:18,460 --> 00:28:20,100
model that stores the data.

680
00:28:20,100 --> 00:28:22,330
So ViewModels often have
transient state.

681
00:28:22,330 --> 00:28:23,950
They often interact
with each other.

682
00:28:23,950 --> 00:28:27,430
And they essentially mediate
between the core data model

683
00:28:27,430 --> 00:28:28,880
and the UI.

684
00:28:28,880 --> 00:28:30,510
Underneath the data layer,
we can actually

685
00:28:30,510 --> 00:28:31,240
connect to the cloud.

686
00:28:31,240 --> 00:28:33,480
And the nice thing is, if we
build our application this

687
00:28:33,480 --> 00:28:36,400
way, we can actually deal with
lack of connectivity to the

688
00:28:36,400 --> 00:28:37,880
cloud, which is important.

689
00:28:37,880 --> 00:28:40,410

690
00:28:40,410 --> 00:28:43,580
So let's walk through Swarm
and take a look at these

691
00:28:43,580 --> 00:28:44,320
different parts.

692
00:28:44,320 --> 00:28:46,430
So first of all, the model.

693
00:28:46,430 --> 00:28:49,380
The model is the true
application state, and by that

694
00:28:49,380 --> 00:28:51,860
I mean that all of the data
that we need to be able to

695
00:28:51,860 --> 00:28:54,280
build the application
lives in the model.

696
00:28:54,280 --> 00:28:56,860
One of the important things for
us is that, in order to

697
00:28:56,860 --> 00:28:59,890
have things like offline and
local acceleration where

698
00:28:59,890 --> 00:29:02,650
you're actually responding to
results on the client, you

699
00:29:02,650 --> 00:29:03,980
actually need to be
able to construct

700
00:29:03,980 --> 00:29:05,100
the UI on the client.

701
00:29:05,100 --> 00:29:08,960
And we can do that, because we
have these powerful VMs now.

702
00:29:08,960 --> 00:29:10,770
There are a lot of other neat
things that you can get if you

703
00:29:10,770 --> 00:29:13,120
actually build a model
correctly.

704
00:29:13,120 --> 00:29:14,720
One is tab consistency.

705
00:29:14,720 --> 00:29:17,940
This is something that annoys me
constantly as I have Gmail

706
00:29:17,940 --> 00:29:19,420
open on a couple of
different tabs.

707
00:29:19,420 --> 00:29:22,810
And one tab says I have 20,000
unread messages, and the other

708
00:29:22,810 --> 00:29:24,960
one says I have 20,001
unread messages.

709
00:29:24,960 --> 00:29:26,440
It's really irritating.

710
00:29:26,440 --> 00:29:29,650
We can actually use things like
shared workers on the web

711
00:29:29,650 --> 00:29:32,670
to have a shared model between
different tabs and start

712
00:29:32,670 --> 00:29:34,290
getting tabs that are
actually consistent.

713
00:29:34,290 --> 00:29:38,420
And when that day comes, it
will be a fantastic thing.

714
00:29:38,420 --> 00:29:40,550
We can also get strong data
and View separation.

715
00:29:40,550 --> 00:29:42,470
And that's really nice, because
then we can actually

716
00:29:42,470 --> 00:29:45,010
build different Views and
different UIs without

717
00:29:45,010 --> 00:29:47,320
rebuilding the entire
application.

718
00:29:47,320 --> 00:29:51,930
So let's look at what the pieces
of the Swarm model are.

719
00:29:51,930 --> 00:29:53,850
So first of all, we
have the sections.

720
00:29:53,850 --> 00:29:56,260
And these are the sections of
news that I've decided to

721
00:29:56,260 --> 00:29:56,970
subscribe to.

722
00:29:56,970 --> 00:30:02,840
So no surprise, Google is one of
them, Geek is one of them,

723
00:30:02,840 --> 00:30:04,100
all the usual things.

724
00:30:04,100 --> 00:30:04,950
And then we have feeds.

725
00:30:04,950 --> 00:30:07,620
And the feeds are essentially
RSS feeds that

726
00:30:07,620 --> 00:30:09,670
are stored per section.

727
00:30:09,670 --> 00:30:12,740
And then in the model, we
have articles per feed.

728
00:30:12,740 --> 00:30:14,260
And these articles are
not what you're

729
00:30:14,260 --> 00:30:14,960
seeing on the screen.

730
00:30:14,960 --> 00:30:20,030
These articles are the actual
full text of the articles.

731
00:30:20,030 --> 00:30:21,790
We'll turn that into
UI in a little bit.

732
00:30:21,790 --> 00:30:25,870
But the entire content of the
article is stored here.

733
00:30:25,870 --> 00:30:28,930
Once we have the model, we can
pop up the stack a little bit

734
00:30:28,930 --> 00:30:30,450
into the ViewModel.

735
00:30:30,450 --> 00:30:32,930
And the ViewModel is essentially
responsible for

736
00:30:32,930 --> 00:30:35,030
transforming the model
for the View.

737
00:30:35,030 --> 00:30:37,850
It also performs all the
interactions between the View

738
00:30:37,850 --> 00:30:39,430
and the actual application.

739
00:30:39,430 --> 00:30:41,410
You can think of the View as
really being the UI side of

740
00:30:41,410 --> 00:30:44,180
things and the ViewModel being
where those UI events get

741
00:30:44,180 --> 00:30:47,320
modeled into something that
deals with the rest of the

742
00:30:47,320 --> 00:30:48,570
application.

743
00:30:48,570 --> 00:30:49,600
You can also have Events here.

744
00:30:49,600 --> 00:30:51,590
You might have data that's
changing on the cloud and

745
00:30:51,590 --> 00:30:54,240
popping up through the model, or
changing in some other tab

746
00:30:54,240 --> 00:30:56,350
and then popping up
through the model.

747
00:30:56,350 --> 00:30:58,330
All these things happen
in the ViewModel.

748
00:30:58,330 --> 00:31:02,560
And we build one ViewModel for
each View in the system.

749
00:31:02,560 --> 00:31:03,890
There's also a lot of
transient state

750
00:31:03,890 --> 00:31:05,070
that's stored here.

751
00:31:05,070 --> 00:31:08,020
For instance, in the Swarm
ViewModel, you'd have things

752
00:31:08,020 --> 00:31:09,480
like the Current Section.

753
00:31:09,480 --> 00:31:12,350
And you can see if you're really
close, that there's a

754
00:31:12,350 --> 00:31:13,920
little carrot up underneath
the top.

755
00:31:13,920 --> 00:31:17,260
And you can see the top is
actually written in red.

756
00:31:17,260 --> 00:31:19,230
Current Feed so that you know
what feeds you should be

757
00:31:19,230 --> 00:31:21,010
displaying on the screen.

758
00:31:21,010 --> 00:31:25,130
The Current Article so that you
know where in the where in

759
00:31:25,130 --> 00:31:27,860
the list your cursor is, and
then the Article Tiles.

760
00:31:27,860 --> 00:31:29,820
And the Article Tiles are
things like the title, a

761
00:31:29,820 --> 00:31:33,160
thumbnail for the article, an
abstract for the article, that

762
00:31:33,160 --> 00:31:35,250
sort of thing.

763
00:31:35,250 --> 00:31:39,030
And then, as we rise up the
stack, it's time to get into

764
00:31:39,030 --> 00:31:40,000
the View itself.

765
00:31:40,000 --> 00:31:42,910
And we think of Views as being
composable UI units that are

766
00:31:42,910 --> 00:31:46,320
responsible for handling
all UI interaction.

767
00:31:46,320 --> 00:31:50,320
We build these out of Dart
and HTML and CSS.

768
00:31:50,320 --> 00:31:52,680
We looked at a number of other
options, but in the end, HTML

769
00:31:52,680 --> 00:31:55,870
and CSS are actually a really
good story for the web.

770
00:31:55,870 --> 00:31:57,910
If you need to, you can always
build a Custom View that

771
00:31:57,910 --> 00:32:00,750
decides to render itself in
WebGL or Canvas, but we expect

772
00:32:00,750 --> 00:32:03,890
that most Views will actually
get rendered with HTML.

773
00:32:03,890 --> 00:32:05,850
Views are actual Dart objects.

774
00:32:05,850 --> 00:32:08,340
So this is fantastic, because
you can start doing things

775
00:32:08,340 --> 00:32:09,850
like deriving them
from each other.

776
00:32:09,850 --> 00:32:11,600
So you can build a menu, and
then you could build a

777
00:32:11,600 --> 00:32:15,590
specialized kind of menu and
actually take advantage of the

778
00:32:15,590 --> 00:32:17,770
object-oriented nature
of Dart.

779
00:32:17,770 --> 00:32:19,740
Views are also responsible
for handling events.

780
00:32:19,740 --> 00:32:21,750
And they're responsible for
handling events that come in,

781
00:32:21,750 --> 00:32:22,490
in two directions.

782
00:32:22,490 --> 00:32:24,840
One is they need to handle
UI events that are

783
00:32:24,840 --> 00:32:25,800
coming in from the users.

784
00:32:25,800 --> 00:32:29,510
These might be clicks, or
scrolls, or keyboard events.

785
00:32:29,510 --> 00:32:31,670
The View is also responsible
for handling events that

786
00:32:31,670 --> 00:32:33,130
bubble up from the ViewModels.

787
00:32:33,130 --> 00:32:35,690
So these could be events that
come in from another View and

788
00:32:35,690 --> 00:32:37,450
get mediated through
ViewModels.

789
00:32:37,450 --> 00:32:39,610
Or they could be data that's
changing out in the cloud and

790
00:32:39,610 --> 00:32:42,680
gets pushed up to
the application.

791
00:32:42,680 --> 00:32:45,850
So let's go take a look at
Swarm in the Editor.

792
00:32:45,850 --> 00:32:48,435
VIJAY MENON: So yeah, let's do
a deep dive on Swarm now.

793
00:32:48,435 --> 00:32:50,390
And this is a much bigger
application.

794
00:32:50,390 --> 00:32:54,190
So let's also come at this from
the mindset that we're

795
00:32:54,190 --> 00:32:56,500
actually trying to tackle
here, which is large

796
00:32:56,500 --> 00:32:59,510
applications in a production
environment.

797
00:32:59,510 --> 00:33:03,630
Imagine you are a new team
member on a team that's

798
00:33:03,630 --> 00:33:04,570
writing Swarm.

799
00:33:04,570 --> 00:33:06,880
And you're looking at this
code for the first time.

800
00:33:06,880 --> 00:33:08,850
Can you just jump in
and be productive?

801
00:33:08,850 --> 00:33:11,480
That's the thing that we're
trying to measure.

802
00:33:11,480 --> 00:33:17,400
So let's take a look at Swarm
and find, basically, the main

803
00:33:17,400 --> 00:33:19,510
HTML page here.

804
00:33:19,510 --> 00:33:23,430
It looks a lot like "hello." If
we look down at the bottom,

805
00:33:23,430 --> 00:33:24,820
it's a bit more complicated,
obviously.

806
00:33:24,820 --> 00:33:29,010
But we, again, see the
application Dart, with

807
00:33:29,010 --> 00:33:31,260
swarm.dart, the main
entry point.

808
00:33:31,260 --> 00:33:33,320
And also, this Dart to
JS that will let us

809
00:33:33,320 --> 00:33:34,970
boot-strap and test out.

810
00:33:34,970 --> 00:33:37,120
We have this nice application
View.

811
00:33:37,120 --> 00:33:39,710
So instead of looking at a long
laundry list, you can

812
00:33:39,710 --> 00:33:43,770
actually see the different
libraries that we used to

813
00:33:43,770 --> 00:33:45,910
compose together and
create Swarm.

814
00:33:45,910 --> 00:33:48,250
So we have this entry point.

815
00:33:48,250 --> 00:33:50,670
We've actually put most of the
application itself in a

816
00:33:50,670 --> 00:33:54,850
separate library that we import,
create a new Swarm app

817
00:33:54,850 --> 00:33:56,380
instance, and run.

818
00:33:56,380 --> 00:33:57,950
And you don't have to
go searching for

819
00:33:57,950 --> 00:33:59,010
this again using grep.

820
00:33:59,010 --> 00:34:02,480
You can just dive in and see
what's going on here.

821
00:34:02,480 --> 00:34:06,060
So this gets us to
the Swarm app.

822
00:34:06,060 --> 00:34:09,679
We can take a look at that.

823
00:34:09,679 --> 00:34:11,639
This is the Swarm class.

824
00:34:11,639 --> 00:34:15,489
And the main elements that Dan
talked about are here.

825
00:34:15,489 --> 00:34:19,460
Sections is, essentially, the
model, the data model.

826
00:34:19,460 --> 00:34:21,520
FrontView is the
top-level View.

827
00:34:21,520 --> 00:34:22,880
We'll get to that in a moment.

828
00:34:22,880 --> 00:34:26,270
And Swarm state corresponds
to the ViewModel or the

829
00:34:26,270 --> 00:34:28,600
transient UI state.

830
00:34:28,600 --> 00:34:30,159
Let's take a look at what this
constructor's doing.

831
00:34:30,159 --> 00:34:33,340
The first thing it's doing
is initializing from URL.

832
00:34:33,340 --> 00:34:34,790
Let's take a look at
what that does.

833
00:34:34,790 --> 00:34:36,630
We can just dive in here.

834
00:34:36,630 --> 00:34:38,449
And we can see that,
OK, there's--

835
00:34:38,449 --> 00:34:39,870
Again, you can notice
to-dos here.

836
00:34:39,870 --> 00:34:40,760
This is, again, an app.

837
00:34:40,760 --> 00:34:43,190
You're just diving into any
production app, it's probably

838
00:34:43,190 --> 00:34:44,080
going to have some
to-dos in it.

839
00:34:44,080 --> 00:34:45,940
It's always evolving, right?

840
00:34:45,940 --> 00:34:47,750
And you want to find
out, which path is

841
00:34:47,750 --> 00:34:48,630
this thing going on.

842
00:34:48,630 --> 00:34:50,570
Well, again, we want
to be able to

843
00:34:50,570 --> 00:34:52,070
just set a break point.

844
00:34:52,070 --> 00:34:55,770
So let's run this, and we can
see right away that, hey, it

845
00:34:55,770 --> 00:34:56,730
went down this path.

846
00:34:56,730 --> 00:35:00,210
So we've got an idea, at least
in this mode, of which way

847
00:35:00,210 --> 00:35:01,120
it's going.

848
00:35:01,120 --> 00:35:06,520
So we can follow
the execution.

849
00:35:06,520 --> 00:35:10,940
And let's go ahead and run
that to completion.

850
00:35:10,940 --> 00:35:12,080
And we can see--

851
00:35:12,080 --> 00:35:13,890
Oh, this is running in Chrome.

852
00:35:13,890 --> 00:35:18,680
Let's get the version
here in Dartium.

853
00:35:18,680 --> 00:35:22,280
And you can see that here's the
app running in Dartium.

854
00:35:22,280 --> 00:35:29,390
And if you are used to Chrome
Developer Tools, you can just

855
00:35:29,390 --> 00:35:30,710
load that up as well.

856
00:35:30,710 --> 00:35:32,730
And you can see that all of that
is actually starting to

857
00:35:32,730 --> 00:35:37,150
get pretty nicely integrated,
as well, in Dartium.

858
00:35:37,150 --> 00:35:40,090
So just as a quick thing, let's
just try loading this

859
00:35:40,090 --> 00:35:42,700
application and seeing what's
actually coming across.

860
00:35:42,700 --> 00:35:44,740
And this is all being served
from the local file

861
00:35:44,740 --> 00:35:46,510
system, in this case.

862
00:35:46,510 --> 00:35:47,920
One thing you'll notice
is that there's

863
00:35:47,920 --> 00:35:49,350
lots of Dart files.

864
00:35:49,350 --> 00:35:51,630
If you include transitively all
the libraries that we're

865
00:35:51,630 --> 00:35:53,910
pulling through together
here, there's about

866
00:35:53,910 --> 00:35:55,100
60-some Dart files.

867
00:35:55,100 --> 00:35:58,740
So as you're just editing and
debugging, this is great.

868
00:35:58,740 --> 00:36:01,740
Because I just change one of
those files, I reload, and I

869
00:36:01,740 --> 00:36:03,520
get the new effect right here.

870
00:36:03,520 --> 00:36:06,170
And of course, as you compile
this to JavaScript, it's going

871
00:36:06,170 --> 00:36:09,300
to do the smart thing and
create one or very few

872
00:36:09,300 --> 00:36:11,770
JavaScript files that
you deploy.

873
00:36:11,770 --> 00:36:13,790
And when you eventually deploy,
Dart will do similar

874
00:36:13,790 --> 00:36:15,040
things there as well.

875
00:36:15,040 --> 00:36:18,820

876
00:36:18,820 --> 00:36:21,840
So now you've kind of gotten
familiar with the app.

877
00:36:21,840 --> 00:36:24,390
Let's suppose you have
an initial task.

878
00:36:24,390 --> 00:36:30,560
And the task we have is, as you
dive into a news article,

879
00:36:30,560 --> 00:36:33,250
we want to show the author
as well as the feed name.

880
00:36:33,250 --> 00:36:37,100
So let's say that we want to go
ahead and make that change.

881
00:36:37,100 --> 00:36:37,390
All right.

882
00:36:37,390 --> 00:36:40,160
Let's go back to Swarm.

883
00:36:40,160 --> 00:36:42,160
We saw where the top-level
View is.

884
00:36:42,160 --> 00:36:46,110
We can go in and dive
into there.

885
00:36:46,110 --> 00:36:51,210
The top-level View is
essentially a compositional

886
00:36:51,210 --> 00:36:51,950
set of Views.

887
00:36:51,950 --> 00:36:54,640
So if we look at the different
pieces in this class, we can

888
00:36:54,640 --> 00:36:59,210
see here's a topView, the
headerView, the sliderMenu

889
00:36:59,210 --> 00:37:02,190
Menu that goes across the top.

890
00:37:02,190 --> 00:37:07,160
And again, a lot of other
different names of Views.

891
00:37:07,160 --> 00:37:10,130
If we just click on something,
we can kind of get a sense of

892
00:37:10,130 --> 00:37:12,550
what's what by it, because the
comments just show up at--

893
00:37:12,550 --> 00:37:15,920
The editor's able to see where
the definitions are, embed the

894
00:37:15,920 --> 00:37:18,220
documentation, and pull
it as needed.

895
00:37:18,220 --> 00:37:21,880
And it turns out that
StoryContentView, reading

896
00:37:21,880 --> 00:37:24,580
around a little bit, is the
one we want to modify.

897
00:37:24,580 --> 00:37:26,990
So let's take a look at that.

898
00:37:26,990 --> 00:37:29,000
So the first complaint we
might have is, well,

899
00:37:29,000 --> 00:37:30,560
StoryContentView, that
was a little bit

900
00:37:30,560 --> 00:37:32,420
hard for me to find.

901
00:37:32,420 --> 00:37:35,080
Gee, it would be nice if I could
change that name so the

902
00:37:35,080 --> 00:37:38,520
next person that has
to dive into it can

903
00:37:38,520 --> 00:37:39,600
find it more easily.

904
00:37:39,600 --> 00:37:43,070
So it turns out that that's
a pretty easy thing

905
00:37:43,070 --> 00:37:44,450
to do here in Dart.

906
00:37:44,450 --> 00:37:46,180
We can just go ahead
and rename it.

907
00:37:46,180 --> 00:37:54,140
And we can call it
ExpandedStoryView.

908
00:37:54,140 --> 00:37:56,540
And the editor's able to do the
right thing here, and just

909
00:37:56,540 --> 00:37:57,420
go ahead and change.

910
00:37:57,420 --> 00:38:00,360
And you could see that this
constructor here magically

911
00:38:00,360 --> 00:38:01,820
changed as well.

912
00:38:01,820 --> 00:38:05,020
And if we go to a terminal--

913
00:38:05,020 --> 00:38:08,540

914
00:38:08,540 --> 00:38:10,440
Dan mentioned grep.

915
00:38:10,440 --> 00:38:15,280
Sometimes we like to do tools
like grep or diff.

916
00:38:15,280 --> 00:38:17,730
And we can see that a number
of changes have been made

917
00:38:17,730 --> 00:38:19,450
throughout the code base,
in this case.

918
00:38:19,450 --> 00:38:20,520
Not too many.

919
00:38:20,520 --> 00:38:25,180
This particular View isn't
accessed very many places.

920
00:38:25,180 --> 00:38:27,060
Let's do something maybe a
little bit more risky.

921
00:38:27,060 --> 00:38:31,570
The item shows up all over the
place in our core code.

922
00:38:31,570 --> 00:38:36,150
So that's a case where you don't
want to just do Search

923
00:38:36,150 --> 00:38:39,130
and Replace, because you'll
probably end up changing a lot

924
00:38:39,130 --> 00:38:41,430
of things you didn't
mean to change.

925
00:38:41,430 --> 00:38:43,500
And again, the Rename
facility here is

926
00:38:43,500 --> 00:38:44,420
actually, it's quite nice.

927
00:38:44,420 --> 00:38:47,580
It's able to just use the
structure and the types to

928
00:38:47,580 --> 00:38:49,050
know what the right
thing to do is.

929
00:38:49,050 --> 00:38:54,540
And let's go ahead and Name
Item Article here.

930
00:38:54,540 --> 00:38:57,080
And you can see it
does that live.

931
00:38:57,080 --> 00:39:01,690
And if we go back and grep
again for "item," there's

932
00:39:01,690 --> 00:39:02,800
still a bunch of
"items" there.

933
00:39:02,800 --> 00:39:05,610
So it did the right thing.

934
00:39:05,610 --> 00:39:07,310
Of course, we should actually
make sure that

935
00:39:07,310 --> 00:39:08,795
it runs still, right?

936
00:39:08,795 --> 00:39:10,810
Because otherwise,
it's no good.

937
00:39:10,810 --> 00:39:12,900
And sure enough,
it still runs.

938
00:39:12,900 --> 00:39:13,560
It does the right thing.

939
00:39:13,560 --> 00:39:15,490
It's able to reason
about the code.

940
00:39:15,490 --> 00:39:17,950
The tools help you out, which
is the goal here.

941
00:39:17,950 --> 00:39:20,240
So again, we said we wanted to
actually make a change here.

942
00:39:20,240 --> 00:39:22,420
So we ran into a few things we
wanted to fix just to make the

943
00:39:22,420 --> 00:39:25,670
code a little bit more
understandable.

944
00:39:25,670 --> 00:39:26,410
Let's take a look.

945
00:39:26,410 --> 00:39:30,260
So the main thing that any View
in this app is doing is

946
00:39:30,260 --> 00:39:31,240
it's rendering.

947
00:39:31,240 --> 00:39:33,640
And it's an abstraction over
HTML, but it's not a huge

948
00:39:33,640 --> 00:39:34,200
abstraction.

949
00:39:34,200 --> 00:39:36,920
Every time we render, we produce
a new HTML element

950
00:39:36,920 --> 00:39:38,640
that goes into the app.

951
00:39:38,640 --> 00:39:42,540
And in this case, it's taking
the contents of that article.

952
00:39:42,540 --> 00:39:44,100
It's doing some scrubbing.

953
00:39:44,100 --> 00:39:47,790
And we showed how to build
the DOM elements

954
00:39:47,790 --> 00:39:49,460
compositionally by code.

955
00:39:49,460 --> 00:39:52,300
Sometimes it's convenient
to use a large template.

956
00:39:52,300 --> 00:39:55,560
And Dart makes that easy with
the string interpolation, it's

957
00:39:55,560 --> 00:39:56,270
a nice feature.

958
00:39:56,270 --> 00:39:59,630
You can take a big string, a
multiline string, and you'll

959
00:39:59,630 --> 00:40:01,660
notice these little dollar-sign
operations where

960
00:40:01,660 --> 00:40:06,830
we can just call in to code and
embed data from the code

961
00:40:06,830 --> 00:40:08,210
right into the string.

962
00:40:08,210 --> 00:40:10,810

963
00:40:10,810 --> 00:40:12,140
So the Feed Title is here.

964
00:40:12,140 --> 00:40:17,680
Let's go in and add the
author of the article.

965
00:40:17,680 --> 00:40:21,080

966
00:40:21,080 --> 00:40:25,980
So even though we're inside of
a string here, the editor is

967
00:40:25,980 --> 00:40:28,550
able to understand the context,
see that there's this

968
00:40:28,550 --> 00:40:31,840
article in Scope, and tell
you what the fields are.

969
00:40:31,840 --> 00:40:32,870
It knows the Type of that.

970
00:40:32,870 --> 00:40:35,480
And I can just see, hey, there's
an Author Field here

971
00:40:35,480 --> 00:40:37,490
and go ahead and use it.

972
00:40:37,490 --> 00:40:40,120
And Save.

973
00:40:40,120 --> 00:40:44,720
And let's reload and see if
it did the right thing.

974
00:40:44,720 --> 00:40:45,430
Oh, this is--

975
00:40:45,430 --> 00:40:46,040
Sorry.

976
00:40:46,040 --> 00:40:48,520
I keep going to Chrome.

977
00:40:48,520 --> 00:40:49,440
I haven't compiled yet.

978
00:40:49,440 --> 00:40:51,780
So I need to go to Dartium,
because I haven't actually

979
00:40:51,780 --> 00:40:52,640
recompiled.

980
00:40:52,640 --> 00:40:55,190
So Dartium gives me the nice
experience of just being able

981
00:40:55,190 --> 00:40:57,340
to reload, because it's
this native support.

982
00:40:57,340 --> 00:41:01,620
And I can see right here that
next to the Feed Title I have

983
00:41:01,620 --> 00:41:02,130
the author.

984
00:41:02,130 --> 00:41:03,860
So everything just worked.

985
00:41:03,860 --> 00:41:06,060
I'm done with my first change.

986
00:41:06,060 --> 00:41:10,275
So our experience with this
has been really positive.

987
00:41:10,275 --> 00:41:13,090

988
00:41:13,090 --> 00:41:16,650
The goals that we set out really
seem to be working.

989
00:41:16,650 --> 00:41:19,360
We have a language here that's
much more toolable, easy for

990
00:41:19,360 --> 00:41:20,800
us to jump in and use.

991
00:41:20,800 --> 00:41:24,500
And we feel that we're on the
right path for a whole

992
00:41:24,500 --> 00:41:28,960
platform that makes it easier
to write large applications.

993
00:41:28,960 --> 00:41:31,630
You can take everything we've
shown here and download it

994
00:41:31,630 --> 00:41:33,140
yourself and play with it.

995
00:41:33,140 --> 00:41:36,420
This is an early version
of the Dart platform.

996
00:41:36,420 --> 00:41:39,600
The interesting starting
point is dartlang.org.

997
00:41:39,600 --> 00:41:41,000
There's a lot to read there.

998
00:41:41,000 --> 00:41:44,090
The language specification
is pretty stable.

999
00:41:44,090 --> 00:41:46,110
It's not quite yet at 1.0.

1000
00:41:46,110 --> 00:41:49,275
You can see the API
documentation for Dart:HTML,

1001
00:41:49,275 --> 00:41:51,750
the other core libraries.

1002
00:41:51,750 --> 00:41:55,860
You can download the latest
versions of the Dart Editor,

1003
00:41:55,860 --> 00:41:58,230
Dartium, all our Command
Line Tools.

1004
00:41:58,230 --> 00:42:00,560
And there's a mailing list there
that you can join-- it's

1005
00:42:00,560 --> 00:42:01,410
very active--

1006
00:42:01,410 --> 00:42:04,270
to join the community,
give us feedback.

1007
00:42:04,270 --> 00:42:06,950
A lot of changes have been made
just based on feedback

1008
00:42:06,950 --> 00:42:07,590
from the community.

1009
00:42:07,590 --> 00:42:09,100
It's been great.

1010
00:42:09,100 --> 00:42:11,500
All the code, if you want to
build it yourself, or just

1011
00:42:11,500 --> 00:42:14,380
look at how it's implemented,
it's all there at

1012
00:42:14,380 --> 00:42:15,970
dart.googlecode.com.

1013
00:42:15,970 --> 00:42:19,880
That includes Dartium, the
Dart2JS, Compiler, the Virtual

1014
00:42:19,880 --> 00:42:24,420
Machine, the Editor, all the
libraries, and Swarm, the

1015
00:42:24,420 --> 00:42:25,330
sample app there.

1016
00:42:25,330 --> 00:42:28,190
So you can basically look at
all the code you want, muck

1017
00:42:28,190 --> 00:42:32,340
with it, tell us what you
learn, play with it.

1018
00:42:32,340 --> 00:42:33,840
It's all there.

1019
00:42:33,840 --> 00:42:36,360
You can learn a lot more at
Google I/O. If you didn't make

1020
00:42:36,360 --> 00:42:38,320
it to Lars' and Kasper's
talk, it's recorded.

1021
00:42:38,320 --> 00:42:40,500
So you can find out more about
the Dart language.

1022
00:42:40,500 --> 00:42:42,190
It's a great starting point.

1023
00:42:42,190 --> 00:42:45,660
In this very room, there'll be
another talk in just a few

1024
00:42:45,660 --> 00:42:49,930
minutes on migrating code from
GWT to Dart, where Ray will

1025
00:42:49,930 --> 00:42:51,190
talk about that.

1026
00:42:51,190 --> 00:42:53,450
And you can learn about
both of those.

1027
00:42:53,450 --> 00:42:56,190
And then all afternoon, we
have Dart Office Hours.

1028
00:42:56,190 --> 00:42:59,500
So you can find us, ask us
questions, and just get your

1029
00:42:59,500 --> 00:43:00,810
hands dirty with some
of the stuff.

1030
00:43:00,810 --> 00:43:04,240
If you really want to get your
hands dirty, come to the Code

1031
00:43:04,240 --> 00:43:06,560
Lab tomorrow that Seth and
Jamie will be running.

1032
00:43:06,560 --> 00:43:07,970
A lot of us will be there.

1033
00:43:07,970 --> 00:43:11,840
It's your chance to write
your first Dart app.

1034
00:43:11,840 --> 00:43:13,000
DAN GROVE: Yeah,
so summing up.

1035
00:43:13,000 --> 00:43:15,180
If you only remember three
things coming out of this

1036
00:43:15,180 --> 00:43:17,310
talk, first of all,
remember that the

1037
00:43:17,310 --> 00:43:18,830
web has changed hugely.

1038
00:43:18,830 --> 00:43:21,950
The last five years have really
delivered a whole lot

1039
00:43:21,950 --> 00:43:24,670
of changes in capabilities
and in speed.

1040
00:43:24,670 --> 00:43:26,730
Secondly, in order to take
advantage of this, you've got

1041
00:43:26,730 --> 00:43:28,480
to be able to program
at scale, and Dart

1042
00:43:28,480 --> 00:43:29,850
enables you to do this.

1043
00:43:29,850 --> 00:43:32,750
And finally, over the next year,
Dart will enable modern

1044
00:43:32,750 --> 00:43:35,530
web apps by providing a large
set of libraries to really

1045
00:43:35,530 --> 00:43:38,020
make this a straightforward
procedure.

1046
00:43:38,020 --> 00:43:40,150
Thanks, and if you have
questions, the

1047
00:43:40,150 --> 00:43:41,930
mic is there, I believe.

1048
00:43:41,930 --> 00:43:48,040
[APPLAUSE]

1049
00:43:48,040 --> 00:43:48,660
AUDIENCE: OK.

1050
00:43:48,660 --> 00:43:55,420
I wondered, our search engines
were indexing dot application.

1051
00:43:55,420 --> 00:44:01,550
Do you have a way to build
static versions to

1052
00:44:01,550 --> 00:44:06,175
be crawled by robots?

1053
00:44:06,175 --> 00:44:08,430
DAN GROVE: To allow it to
be crawled by robots.

1054
00:44:08,430 --> 00:44:11,010
We haven't done anything in
particular on this yet, but

1055
00:44:11,010 --> 00:44:12,650
I'm sure we will.

1056
00:44:12,650 --> 00:44:17,070
AUDIENCE: So basically when you
write a dot application,

1057
00:44:17,070 --> 00:44:20,852
it won't appear in
Google Results.

1058
00:44:20,852 --> 00:44:22,760
VIJAY MENON: So we expect
when people deploy Dart

1059
00:44:22,760 --> 00:44:25,440
applications that you'll
be able to--

1060
00:44:25,440 --> 00:44:28,680
And you can do server-side
detection to check whether the

1061
00:44:28,680 --> 00:44:32,870
browser that's hitting your site
has native Dart support

1062
00:44:32,870 --> 00:44:34,890
and serve accordingly
Dart or JavaScript.

1063
00:44:34,890 --> 00:44:37,340
So I haven't thought
very deeply about

1064
00:44:37,340 --> 00:44:38,140
your specific case.

1065
00:44:38,140 --> 00:44:39,950
But that should be a case where,
again, you can take

1066
00:44:39,950 --> 00:44:40,880
advantage of the fact that this

1067
00:44:40,880 --> 00:44:42,460
just runs on all browsers.

1068
00:44:42,460 --> 00:44:44,740
DAN GROVE: Yeah, it should be
no different from running a

1069
00:44:44,740 --> 00:44:45,990
JavaScript application.

1070
00:44:45,990 --> 00:44:49,080

1071
00:44:49,080 --> 00:44:49,970
AUDIENCE: Hey.

1072
00:44:49,970 --> 00:44:53,300
So I realize you're going to
have a talk next about the

1073
00:44:53,300 --> 00:44:55,980
transition from GWT to Dart.

1074
00:44:55,980 --> 00:44:59,290
But I was wondering if you could
just mention briefly

1075
00:44:59,290 --> 00:45:00,820
what the differences
are between the

1076
00:45:00,820 --> 00:45:02,020
goals of the two projects?

1077
00:45:02,020 --> 00:45:04,780
They seem to have a
lot of overlap.

1078
00:45:04,780 --> 00:45:05,270
DAN GROVE: Yeah.

1079
00:45:05,270 --> 00:45:07,690
So I think there's actually--

1080
00:45:07,690 --> 00:45:10,900
So first of all, there's both
the talk today, and then

1081
00:45:10,900 --> 00:45:14,770
there's a talk later this week
about the future of GWT.

1082
00:45:14,770 --> 00:45:18,200
So we have not actually paid a
ton of attention to GWT on the

1083
00:45:18,200 --> 00:45:18,890
Dart project.

1084
00:45:18,890 --> 00:45:20,960
We're really trying to build
a whole new platform.

1085
00:45:20,960 --> 00:45:23,250
And the goals may be similar.

1086
00:45:23,250 --> 00:45:26,120
But we also think that we can
do much better than Java in

1087
00:45:26,120 --> 00:45:28,500
terms of the developer
workflow.

1088
00:45:28,500 --> 00:45:30,460
VIJAY MENON: If you went to Lars
and Kaspar's talk, you

1089
00:45:30,460 --> 00:45:33,390
can see that when they created
the language, it borrowed a

1090
00:45:33,390 --> 00:45:36,510
lot of elements from different
languages, including Java.

1091
00:45:36,510 --> 00:45:40,350
So Dart really tries to hit the
space between JavaScript

1092
00:45:40,350 --> 00:45:43,180
and Java and get a lot of
the best of both worlds.

1093
00:45:43,180 --> 00:45:46,190
You get the checking and
toolability from Java but also

1094
00:45:46,190 --> 00:45:49,250
some of the terseness and
simplicity from JavaScript.

1095
00:45:49,250 --> 00:45:52,550
Ray's going to go into detail
on some side-by-side

1096
00:45:52,550 --> 00:45:55,070
comparisons of how the things
really compare.

1097
00:45:55,070 --> 00:45:57,480
So I highly recommend that if
you're interested in that, you

1098
00:45:57,480 --> 00:46:01,420
stick around for that talk.

1099
00:46:01,420 --> 00:46:05,850
AUDIENCE: I was just curious
how the performance of Dart

1100
00:46:05,850 --> 00:46:09,100
code running in the VM compares
to V8 optimized

1101
00:46:09,100 --> 00:46:10,520
JavaScript.

1102
00:46:10,520 --> 00:46:12,670
DAN GROVE: Where's Lars?

1103
00:46:12,670 --> 00:46:15,730
I think the answer is that
it's not there yet.

1104
00:46:15,730 --> 00:46:19,390
If you looked at the VM today,
it exceeds where Chrome was

1105
00:46:19,390 --> 00:46:21,890
when Chrome launched
by a decent amount.

1106
00:46:21,890 --> 00:46:25,470
But there is still
a long way to go.

1107
00:46:25,470 --> 00:46:27,280
VIJAY MENON: Yeah, I mean
performance is something

1108
00:46:27,280 --> 00:46:30,380
that's being actively
worked on.

1109
00:46:30,380 --> 00:46:33,800
It's a big theme, so definitely
at release point,

1110
00:46:33,800 --> 00:46:36,290
it will get to better than V8.

1111
00:46:36,290 --> 00:46:40,030
If you run natively it should
be pretty much close to

1112
00:46:40,030 --> 00:46:43,110
hand-optimized code
if you compile.

1113
00:46:43,110 --> 00:46:45,890
For us it's nice because it's
already pretty fast.

1114
00:46:45,890 --> 00:46:49,450
And it's getting faster
underneath us every day.

1115
00:46:49,450 --> 00:46:50,530
So that's pretty cool.

1116
00:46:50,530 --> 00:46:52,310
DAN GROVE: Yeah we have the
advantage of working on a

1117
00:46:52,310 --> 00:46:56,810
project that has among the best
VM performance people in

1118
00:46:56,810 --> 00:46:57,790
the world working on it.

1119
00:46:57,790 --> 00:47:00,330
And they're unbelievably driven
to make this faster.

1120
00:47:00,330 --> 00:47:02,940
VIJAY MENON: One great thing of
this being very open too,

1121
00:47:02,940 --> 00:47:05,470
is that if you complain about
performance on a certain thing

1122
00:47:05,470 --> 00:47:08,410
on the mailing list, it tends to
get a lot of attention too.

1123
00:47:08,410 --> 00:47:12,420
So the things we care about,
again, performance wasn't so

1124
00:47:12,420 --> 00:47:13,850
much of an issue when
we did Swarm.

1125
00:47:13,850 --> 00:47:16,700
So we were able to get the
performance we wanted, and we

1126
00:47:16,700 --> 00:47:18,686
were able to--

1127
00:47:18,686 --> 00:47:20,730
AUDIENCE: Is that a milestone
that you have for like--

1128
00:47:20,730 --> 00:47:24,120
I know the Dart release is
coming up in fall 2012.

1129
00:47:24,120 --> 00:47:26,240
Is that something you
have in a miles--

1130
00:47:26,240 --> 00:47:27,830
DAN GROVE: You know, I don't
know that we've published an

1131
00:47:27,830 --> 00:47:29,965
official goal for that,
but I suspect one

1132
00:47:29,965 --> 00:47:31,215
will be coming soon.

1133
00:47:31,215 --> 00:47:34,670

1134
00:47:34,670 --> 00:47:36,370
AUDIENCE: Thank you, guys,
for a great talk.

1135
00:47:36,370 --> 00:47:41,750
The question is, obviously,
people have quite a large code

1136
00:47:41,750 --> 00:47:45,030
base over existing JavaScript.

1137
00:47:45,030 --> 00:47:47,650
Do you consider implementing
any way to call

1138
00:47:47,650 --> 00:47:49,700
JavaScript from Dart?

1139
00:47:49,700 --> 00:47:50,190
DAN GROVE: That's a
great question.

1140
00:47:50,190 --> 00:47:51,370
VIJAY MENON: That's a
fantastic question.

1141
00:47:51,370 --> 00:47:52,850
That's something that we're
actually actively

1142
00:47:52,850 --> 00:47:54,170
looking at right now.

1143
00:47:54,170 --> 00:47:57,310
And we do want to have a good
solution for that in place in

1144
00:47:57,310 --> 00:47:58,040
the next few months.

1145
00:47:58,040 --> 00:48:01,050
DAN GROVE: In fact, that's
something that you're going to

1146
00:48:01,050 --> 00:48:02,520
be working on, I believe.

1147
00:48:02,520 --> 00:48:04,260
VIJAY MENON: I think I
signed up for that.

1148
00:48:04,260 --> 00:48:06,440
So look for something.

1149
00:48:06,440 --> 00:48:08,450
We're looking at a few
different solutions.

1150
00:48:08,450 --> 00:48:11,580
If you keep an eye on the
mailing list, you can actually

1151
00:48:11,580 --> 00:48:13,660
look at the details of the code
reviews of the different

1152
00:48:13,660 --> 00:48:16,710
things that we're playing
around with there.

1153
00:48:16,710 --> 00:48:18,840
We're trying to do it in a way
that you get a good experience

1154
00:48:18,840 --> 00:48:21,020
when you're running Dart
natively, as well as when

1155
00:48:21,020 --> 00:48:22,820
you're compiling Dart
to JavaScript.

1156
00:48:22,820 --> 00:48:25,380
And we're trying to make a very
nice interop layer that

1157
00:48:25,380 --> 00:48:27,560
performs pretty well.

1158
00:48:27,560 --> 00:48:28,310
AUDIENCE: Thank you.

1159
00:48:28,310 --> 00:48:29,560
DAN GROVE: Thanks.

1160
00:48:29,560 --> 00:48:32,810

1161
00:48:32,810 --> 00:48:34,930
AUDIENCE: So my question
is, how does Dart--

1162
00:48:34,930 --> 00:48:37,635
All these presentations that I
see, they all compare to the

1163
00:48:37,635 --> 00:48:40,200
current version of JavaScript,
whereas the next version,

1164
00:48:40,200 --> 00:48:42,735
Harmony, has got a lot of the
same things I'm seeing.

1165
00:48:42,735 --> 00:48:44,140
It's got modules, string

1166
00:48:44,140 --> 00:48:47,940
interpolation, lexical scoping.

1167
00:48:47,940 --> 00:48:49,280
It's got a lot of
things that--

1168
00:48:49,280 --> 00:48:53,680
So I'm wondering, I guess, how
does Dart stack up to the next

1169
00:48:53,680 --> 00:48:54,690
version of JavaScript?

1170
00:48:54,690 --> 00:48:56,740
And are you worried
about adoption?

1171
00:48:56,740 --> 00:48:58,770
Is that your biggest
thing, or--

1172
00:48:58,770 --> 00:49:00,690
DAN GROVE: Well, we care hugely

1173
00:49:00,690 --> 00:49:01,910
about adoption, obviously.

1174
00:49:01,910 --> 00:49:02,760
VIJAY MENON: Yeah.

1175
00:49:02,760 --> 00:49:05,140
But ultimately, this is about
making web apps great.

1176
00:49:05,140 --> 00:49:10,020
And if JavaScript gets
better and better,

1177
00:49:10,020 --> 00:49:11,770
that's a good thing.

1178
00:49:11,770 --> 00:49:14,650
And it is getting better
and better.

1179
00:49:14,650 --> 00:49:16,350
Lars and Kasper can
go into a lot of

1180
00:49:16,350 --> 00:49:19,270
detail there where they've--

1181
00:49:19,270 --> 00:49:20,780
You can't always
just add to the

1182
00:49:20,780 --> 00:49:22,210
language and make it better.

1183
00:49:22,210 --> 00:49:23,620
There are challenges,
particularly at the

1184
00:49:23,620 --> 00:49:27,080
implementation level, and also
holes in the semantics that

1185
00:49:27,080 --> 00:49:28,260
are hard to get around.

1186
00:49:28,260 --> 00:49:30,120
So there is an advantage,
at some point--

1187
00:49:30,120 --> 00:49:31,780
And JavaScript's been around
for a long time.

1188
00:49:31,780 --> 00:49:34,940
There are advantages that we can
get from starting anew and

1189
00:49:34,940 --> 00:49:37,460
taking a lot of the lessons
from JavaScript.

1190
00:49:37,460 --> 00:49:40,830
You might still be able to get
a lot of what you want coding

1191
00:49:40,830 --> 00:49:41,580
in JavaScript.

1192
00:49:41,580 --> 00:49:43,270
I think everyone's experience
will vary.

1193
00:49:43,270 --> 00:49:46,520
So what we would say is to try
out these different things and

1194
00:49:46,520 --> 00:49:47,920
see what works best for you.

1195
00:49:47,920 --> 00:49:49,710
DAN GROVE: Yeah, and I think
Lars and Kasper would tell you

1196
00:49:49,710 --> 00:49:53,360
that, on a fundamental basis,
you can make Dart

1197
00:49:53,360 --> 00:49:56,350
significantly faster
than JavaScript.

1198
00:49:56,350 --> 00:49:59,690
They're probably the best
qualified people in the world

1199
00:49:59,690 --> 00:50:00,540
to make that statement.

1200
00:50:00,540 --> 00:50:01,993
And they're very
clear about it.

1201
00:50:01,993 --> 00:50:02,680
AUDIENCE: Right.

1202
00:50:02,680 --> 00:50:06,630
And as far as adoption, do you
ever see it landing in Firefox

1203
00:50:06,630 --> 00:50:10,040
or other browsers,
the native VM?

1204
00:50:10,040 --> 00:50:12,830
DAN GROVE: That is so far away
that we can't even consider it

1205
00:50:12,830 --> 00:50:14,620
right now, which is why we
have to have a great

1206
00:50:14,620 --> 00:50:15,360
compilation story.

1207
00:50:15,360 --> 00:50:17,630
VIJAY MENON: Yeah, Dart2JS is
really the deployment story,

1208
00:50:17,630 --> 00:50:19,300
even now for Chrome as well.

1209
00:50:19,300 --> 00:50:22,580
And we've got to make that
really, really good.

1210
00:50:22,580 --> 00:50:24,680
And Dart's been designed so
it can compile well to

1211
00:50:24,680 --> 00:50:26,340
JavaScript.

1212
00:50:26,340 --> 00:50:27,040
AUDIENCE: Cool.

1213
00:50:27,040 --> 00:50:29,350
Thanks.

1214
00:50:29,350 --> 00:50:29,690
AUDIENCE: Hi.

1215
00:50:29,690 --> 00:50:31,500
I'm curious about debugging.

1216
00:50:31,500 --> 00:50:34,560
You showed how you set a
breakpoint in the IDE.

1217
00:50:34,560 --> 00:50:36,720
Is this a browser plug-in,
or how does it work?

1218
00:50:36,720 --> 00:50:38,950
And does it mean that you
only can debug in

1219
00:50:38,950 --> 00:50:41,070
Dartium right now?

1220
00:50:41,070 --> 00:50:42,380
I can say a little
bit about that.

1221
00:50:42,380 --> 00:50:47,510
So Chrome has support for
external debuggers.

1222
00:50:47,510 --> 00:50:49,550
And I don't think we had to--

1223
00:50:49,550 --> 00:50:52,380
We had to do the hook-up
for the Dart VM.

1224
00:50:52,380 --> 00:50:55,890
But otherwise, you can do
similar things with V8 and

1225
00:50:55,890 --> 00:50:57,210
external debuggers.

1226
00:50:57,210 --> 00:51:00,690
And there's also the internal
dev tools in Chrome that you

1227
00:51:00,690 --> 00:51:04,940
can use as a debugger as well,
with V8 and JavaScript on

1228
00:51:04,940 --> 00:51:07,110
regular Chrome, and on
Dartium, that as

1229
00:51:07,110 --> 00:51:09,080
well as Dart code.

1230
00:51:09,080 --> 00:51:11,260
So really, just using the
existing plumbing that's there

1231
00:51:11,260 --> 00:51:11,810
in the browser.

1232
00:51:11,810 --> 00:51:13,620
DAN GROVE: Yeah, and the other
approach you can use, of

1233
00:51:13,620 --> 00:51:15,850
course, is debugging the
JavaScript code that's

1234
00:51:15,850 --> 00:51:19,530
produced by the Compiler, which
is a pretty reasonable

1235
00:51:19,530 --> 00:51:19,830
experience.

1236
00:51:19,830 --> 00:51:22,660
VIJAY MENON: There's actually
work going on right now in

1237
00:51:22,660 --> 00:51:23,830
using Source Maps.

1238
00:51:23,830 --> 00:51:25,480
Chrome has Source Maps.

1239
00:51:25,480 --> 00:51:28,310
So if you're compiling from any
language to JavaScript,

1240
00:51:28,310 --> 00:51:31,600
you can get a better debugging
experience and look at your

1241
00:51:31,600 --> 00:51:34,180
original source and see
how that [INAUDIBLE].

1242
00:51:34,180 --> 00:51:37,030

1243
00:51:37,030 --> 00:51:40,060
AUDIENCE: You probably can't
debug in IE or Firefox?

1244
00:51:40,060 --> 00:51:42,120
DAN GROVE: You would debug the
generated JavaScript code.

1245
00:51:42,120 --> 00:51:43,130
AUDIENCE: All right.

1246
00:51:43,130 --> 00:51:46,580
DAN GROVE: And that's a pretty
decent experience.

1247
00:51:46,580 --> 00:51:49,370
We have a lot of experience
doing that, and it's not bad.

1248
00:51:49,370 --> 00:51:50,970
AUDIENCE: And second question.

1249
00:51:50,970 --> 00:51:53,560
You said the IDE is
built on Eclipse.

1250
00:51:53,560 --> 00:51:56,465
Is it an Eclipse plug-in,
or is it stand-alone?

1251
00:51:56,465 --> 00:51:58,790
VIJAY MENON: It's stand-alone
right now, but

1252
00:51:58,790 --> 00:52:00,130
I think Lars actually--

1253
00:52:00,130 --> 00:52:01,830
DAN GROVE: I think he answered
this in the last one.

1254
00:52:01,830 --> 00:52:02,280
VIJAY MENON: Answered
this question.

1255
00:52:02,280 --> 00:52:04,300
So I'll just repeat what
he said, which is

1256
00:52:04,300 --> 00:52:05,330
that it will come.

1257
00:52:05,330 --> 00:52:06,690
There will be an Eclipse
plug-in.

1258
00:52:06,690 --> 00:52:07,260
AUDIENCE: All right.

1259
00:52:07,260 --> 00:52:08,198
Thank you.

1260
00:52:08,198 --> 00:52:09,448
VIJAY MENON: Yep.

1261
00:52:09,448 --> 00:52:11,410

1262
00:52:11,410 --> 00:52:14,420
AUDIENCE: I was curious about
unit test support.

1263
00:52:14,420 --> 00:52:15,860
DAN GROVE: Yeah.

1264
00:52:15,860 --> 00:52:17,920
VIJAY MENON: Yeah, we care
a lot about unit test.

1265
00:52:17,920 --> 00:52:20,960
There is a unit test library
that's been in Dart for a

1266
00:52:20,960 --> 00:52:21,900
long, long time.

1267
00:52:21,900 --> 00:52:23,690
And we use it pretty heavily.

1268
00:52:23,690 --> 00:52:26,600
DAN GROVE: Yeah, and there's--

1269
00:52:26,600 --> 00:52:28,060
We're always adding new
testing support.

1270
00:52:28,060 --> 00:52:30,680
So there's a new mocking
library that's going in

1271
00:52:30,680 --> 00:52:31,930
nowadays, for instance.

1272
00:52:31,930 --> 00:52:36,020

1273
00:52:36,020 --> 00:52:36,300
AUDIENCE: Hi.

1274
00:52:36,300 --> 00:52:40,490
I wonder about the commitment
that Google has to Dart.

1275
00:52:40,490 --> 00:52:44,210
Is it just a playground where
you evaluate what's possible

1276
00:52:44,210 --> 00:52:45,380
and what's nice?

1277
00:52:45,380 --> 00:52:51,300
Or is Google actually putting
critical applications from

1278
00:52:51,300 --> 00:52:54,420
Google [INAUDIBLE]?

1279
00:52:54,420 --> 00:52:57,040
DAN GROVE: Dart has started
being used inside Google to

1280
00:52:57,040 --> 00:53:00,920
build critical applications
at this point.

1281
00:53:00,920 --> 00:53:01,760
I would tell you, in terms of

1282
00:53:01,760 --> 00:53:03,840
commitment, I'm pretty committed.

1283
00:53:03,840 --> 00:53:04,300
VIJAY MENON: Yeah.

1284
00:53:04,300 --> 00:53:07,340
DAN GROVE: We have a very large
team, and we're spending

1285
00:53:07,340 --> 00:53:09,860
a huge number of resources
to make Dart successful.

1286
00:53:09,860 --> 00:53:11,760
VIJAY MENON: And we're working
pretty closely with those

1287
00:53:11,760 --> 00:53:13,460
teams to make it a success.

1288
00:53:13,460 --> 00:53:14,410
DAN GROVE: Yeah.

1289
00:53:14,410 --> 00:53:17,242
AUDIENCE: OK.

1290
00:53:17,242 --> 00:53:21,120
AUDIENCE: Do you have time for
one more fast question?

1291
00:53:21,120 --> 00:53:24,970
Is there any plans like to
support or maybe solely be

1292
00:53:24,970 --> 00:53:25,830
supported--

1293
00:53:25,830 --> 00:53:31,390
Can I run my Dart apps like
stand-alone on any V8

1294
00:53:31,390 --> 00:53:35,200
implementation outside of the
browser, just throwing away

1295
00:53:35,200 --> 00:53:38,490
the HTML part with
DOM and stuff.

1296
00:53:38,490 --> 00:53:39,420
VIJAY MENON: Absolutely.

1297
00:53:39,420 --> 00:53:41,750
AUDIENCE: Yeah like,
I mean, basically,

1298
00:53:41,750 --> 00:53:43,860
will it run on nojs?

1299
00:53:43,860 --> 00:53:46,395
Like if I just compile
and run it?

1300
00:53:46,395 --> 00:53:49,570
VIJAY MENON: So nojs has been
a big source of inspiration.

1301
00:53:49,570 --> 00:53:53,150
And I think as Kasper mentioned
in the last talk,

1302
00:53:53,150 --> 00:53:56,680
the Compiler is self-hosting
as well, right?

1303
00:53:56,680 --> 00:54:01,920
And it's a standalone app
written in Dart that reads

1304
00:54:01,920 --> 00:54:04,810
from the file system using
server-side APIs that we don't

1305
00:54:04,810 --> 00:54:06,360
make available in the browser.

1306
00:54:06,360 --> 00:54:08,760
That is part of the long-term
version of Dart, to actually

1307
00:54:08,760 --> 00:54:10,380
have code that you can share.

1308
00:54:10,380 --> 00:54:14,410
AUDIENCE: Yeah, but basically
the standard API should work,

1309
00:54:14,410 --> 00:54:14,890
[INAUDIBLE].

1310
00:54:14,890 --> 00:54:16,840
VIJAY MENON: Yeah, the core
libraries will work

1311
00:54:16,840 --> 00:54:17,570
everywhere.

1312
00:54:17,570 --> 00:54:18,460
We want to make that--

1313
00:54:18,460 --> 00:54:22,120
We want to make it as easy as
possible to take code from the

1314
00:54:22,120 --> 00:54:25,050
server and put it in the
client, and vice versa.

1315
00:54:25,050 --> 00:54:28,040
AUDIENCE: Thank you, guys.

1316
00:54:28,040 --> 00:54:28,620
AUDIENCE: Quick question.

1317
00:54:28,620 --> 00:54:34,350
In one of your demos you did a
query of Canvas elements, put

1318
00:54:34,350 --> 00:54:38,380
them into a non-generified
list, and then iterated

1319
00:54:38,380 --> 00:54:39,740
through those and was able to

1320
00:54:39,740 --> 00:54:43,650
context-assist out the 2D context.

1321
00:54:43,650 --> 00:54:44,170
VIJAY MENON: Yeah.

1322
00:54:44,170 --> 00:54:45,140
AUDIENCE: How did you do that?

1323
00:54:45,140 --> 00:54:46,690
VIJAY MENON: That's
really cool.

1324
00:54:46,690 --> 00:54:48,770
Actually, I only discovered
that this week.

1325
00:54:48,770 --> 00:54:51,530
Like I said, the great thing
about having this active team

1326
00:54:51,530 --> 00:54:54,050
is that stuff just improves
under the hood.

1327
00:54:54,050 --> 00:54:56,455
And that was a new feature that
just started working, I

1328
00:54:56,455 --> 00:54:57,590
think, in the last week.

1329
00:54:57,590 --> 00:55:00,830
So the Dart Editor is
smart enough to do a

1330
00:55:00,830 --> 00:55:01,675
class hierarchy analysis.

1331
00:55:01,675 --> 00:55:04,870
It essentially knows the base
type of what you've got.

1332
00:55:04,870 --> 00:55:09,050
And it's able to look at the
sub-types and give you a list

1333
00:55:09,050 --> 00:55:12,430
of all the possibilities that
you could want to do.

1334
00:55:12,430 --> 00:55:16,340
Now if I had put list bracket
Canvas element, I would have

1335
00:55:16,340 --> 00:55:19,530
gotten a shorter list of
completion, potentially, when

1336
00:55:19,530 --> 00:55:20,340
I pulled stuff out.

1337
00:55:20,340 --> 00:55:22,070
So it can still be sort
of advantageous.

1338
00:55:22,070 --> 00:55:23,950
And we're still trying to figure
out what the right

1339
00:55:23,950 --> 00:55:25,950
balance of that is.

1340
00:55:25,950 --> 00:55:29,070
Being able to put that type
information is useful, because

1341
00:55:29,070 --> 00:55:30,590
we do-- and I didn't show
an example of this.

1342
00:55:30,590 --> 00:55:34,010
But you do have the opportunity
to validate that

1343
00:55:34,010 --> 00:55:36,510
at run time and get some
early error checking.

1344
00:55:36,510 --> 00:55:38,600
You can kind of think of it
as assertions in the code.

1345
00:55:38,600 --> 00:55:42,280
But yeah, the tooling is able to
actually reason a lot about

1346
00:55:42,280 --> 00:55:46,520
the code because it knows
the structure.

1347
00:55:46,520 --> 00:55:47,550
AUDIENCE: OK.

1348
00:55:47,550 --> 00:55:50,830
So it grabbed all of the
attributes of anything that

1349
00:55:50,830 --> 00:55:52,400
extended, element or whatever.

1350
00:55:52,400 --> 00:55:52,690
And--

1351
00:55:52,690 --> 00:55:54,230
VIJAY MENON: Yeah, so if it
knows that the base type is

1352
00:55:54,230 --> 00:55:57,551
element, it's able
to show you--

1353
00:55:57,551 --> 00:56:00,390
I don't know if this showed up
this time, but if I start

1354
00:56:00,390 --> 00:56:02,970
typing "context," I can see the
context field that's on

1355
00:56:02,970 --> 00:56:05,580
the audio element as well as the
context 2D that's on the

1356
00:56:05,580 --> 00:56:06,620
Canvas element.

1357
00:56:06,620 --> 00:56:10,440
And if I put the more specific
type in there, I would see a

1358
00:56:10,440 --> 00:56:12,150
more filtered list.

1359
00:56:12,150 --> 00:56:14,990
AUDIENCE: And I assume if you
were to put an attribute that

1360
00:56:14,990 --> 00:56:16,240
didn't exist, you'd
get some type of

1361
00:56:16,240 --> 00:56:18,240
runtime error or something?

1362
00:56:18,240 --> 00:56:19,610
VIJAY MENON: If you put
an attribute that

1363
00:56:19,610 --> 00:56:22,150
doesn't exist, the--

1364
00:56:22,150 --> 00:56:23,520
DAN GROVE: Yeah, you'll actually
get a runtime--

1365
00:56:23,520 --> 00:56:24,195
It's a run--

1366
00:56:24,195 --> 00:56:26,485
VIJAY MENON: First of all, if it
can tell it statically, it

1367
00:56:26,485 --> 00:56:28,760
will tell you a warning
right there.

1368
00:56:28,760 --> 00:56:31,020
DAN GROVE: But it'll still
let you compile it.

1369
00:56:31,020 --> 00:56:31,910
VIJAY MENON: It would still
let you compile it.

1370
00:56:31,910 --> 00:56:35,660
But the more common case is that
you actually try to get

1371
00:56:35,660 --> 00:56:39,095
the context 2D, but you have an
audio element or a div or

1372
00:56:39,095 --> 00:56:40,020
something like that, right.

1373
00:56:40,020 --> 00:56:41,860
And there, you will
fail at runtime.

1374
00:56:41,860 --> 00:56:43,075
And you will get an error,
an exception.

1375
00:56:43,075 --> 00:56:45,390
And if you're running in the
debugger, it will stop right

1376
00:56:45,390 --> 00:56:49,320
there at the point at which
it made that call.

1377
00:56:49,320 --> 00:56:49,390
AUDIENCE: OK.

1378
00:56:49,390 --> 00:56:49,890
Cool.

1379
00:56:49,890 --> 00:56:51,140
Thanks.

1380
00:56:51,140 --> 00:56:53,600

1381
00:56:53,600 --> 00:56:56,590
AUDIENCE: When will I be able to
deploy my server-side Dart

1382
00:56:56,590 --> 00:56:59,330
code to Google App Engine?

1383
00:56:59,330 --> 00:57:00,990
DAN GROVE: I don't know.

1384
00:57:00,990 --> 00:57:04,680
We haven't made any announcement
about that yet.

1385
00:57:04,680 --> 00:57:05,420
VIJAY MENON: Good question,
though.

1386
00:57:05,420 --> 00:57:07,590
DAN GROVE: It's a
good question.

1387
00:57:07,590 --> 00:57:09,000
OK, so I guess that's it.

1388
00:57:09,000 --> 00:57:09,510
VIJAY MENON: Thanks
for coming.

1389
00:57:09,510 --> 00:57:10,760
DAN GROVE: Thanks.

1390
00:57:10,760 --> 00:57:15,033

