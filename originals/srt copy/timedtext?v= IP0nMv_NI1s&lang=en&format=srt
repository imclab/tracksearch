1
00:00:04,160 --> 00:00:07,830
Hi, I'm Finnur and I work on the Google Chrome
extension system.

2
00:00:07,830 --> 00:00:11,330
I'd like to tell you how to debug extensions
for Google Chrome.

3
00:00:11,330 --> 00:00:15,799
Extensions in Google Chrome are just like
web pages that you can debug using the built-in

4
00:00:15,799 --> 00:00:19,300
tools of Google Chrome.
Let me show you how it works:

5
00:00:19,300 --> 00:00:24,060
In this folder, I have a simple extension
I wrote, called "Email this page" that allows

6
00:00:24,060 --> 00:00:26,599
you to send the current web page address as
an email.

7
00:00:26,599 --> 00:00:30,429
It also contains a bug, which we'll track
down, together.

8
00:00:30,429 --> 00:00:35,980
I’ll start by loading the extension. One
option is to use a command line argument but

9
00:00:35,980 --> 00:00:41,489
we'll use the Extensions Management UI page.
The management page shows that no extensions

10
00:00:41,489 --> 00:00:46,489
are currently loaded so I’ll expand this
section to get to the developer tools and

11
00:00:46,489 --> 00:00:51,710
click on Load Unpacked Extension.
Then, I'll specify the extension and load

12
00:00:51,710 --> 00:00:54,949
it.
Notice that our extension shows up in the

13
00:00:54,949 --> 00:00:59,960
list and a new icon has been added to the
toolbar representing the extension.

14
00:00:59,960 --> 00:01:05,180
When I click on the button, nothing happens.
In the details section for the extension,

15
00:01:05,180 --> 00:01:09,440
there is a list of active views.
I ‘ll click on the name of the active view,

16
00:01:09,440 --> 00:01:14,520
in this case background.html, to inspect the
background page of the extension.

17
00:01:14,520 --> 00:01:19,780
This brings up Google Chrome’s developer
tools, showing the code for the extension.

18
00:01:19,780 --> 00:01:24,270
I am now going to switch to the Scripts view
and put a breakpoint where we receive the

19
00:01:24,270 --> 00:01:29,450
mouse click event from the user.
If I try the extension again, I'll break into

20
00:01:29,450 --> 00:01:33,880
the JavaScript debugger.
With the panel on the right, I can watch certain

21
00:01:33,880 --> 00:01:40,860
expressions, look at the call stack and check
what values the variables contain.

22
00:01:40,860 --> 00:01:47,259
Now I am going to use F10 to step over this
line and F11 to step into this function, until

23
00:01:47,259 --> 00:01:52,910
I get to console.log statement.
This statement will output debug information

24
00:01:52,910 --> 00:01:57,360
to the console window.
I am now going to clear it.

25
00:01:57,360 --> 00:02:01,050
When I execute this line we'll see the console
message.

26
00:02:01,050 --> 00:02:04,800
And if you look closely at the current line,
you'll see that I misspelled the variable

27
00:02:04,800 --> 00:02:08,030
name url.
There’s our bug!

28
00:02:08,030 --> 00:02:13,310
If I press F10 again, we’ll see an error
in red and execution stops.

29
00:02:13,310 --> 00:02:16,930
Let me go ahead and fix this.
I'll use this opportunity to show that you

30
00:02:16,930 --> 00:02:20,570
can also use alerts, even from background
pages.

31
00:02:20,570 --> 00:02:25,110
Now, let’s switch back to the Management
UI page and reload the extension.

32
00:02:25,110 --> 00:02:31,230
When I click the button, I get our alert and
the extension works as expected.

33
00:02:31,230 --> 00:02:36,080
For views that are not active such as pop
ups and options pages, I can load the page

34
00:02:36,080 --> 00:02:42,200
directly and inspect it.
For example, my extension contains options.html.

35
00:02:42,200 --> 00:02:49,200
If I copy the extension ID, type in chrome-extensions://<paste
the id>/options.html I can inspect this page.

36
00:02:54,070 --> 00:02:57,620
I can even change the in-memory style sheet
on the fly.

37
00:02:57,620 --> 00:03:02,620
When you do this, just make sure to also update
the style sheet on disk, because if you reload

38
00:03:02,620 --> 00:03:06,370
the page, the style sheet changes will be
discarded.

39
00:03:06,370 --> 00:03:11,040
And that's the basics of debugging extensions.
To find out more about Google Chrome’s developer

40
00:03:11,040 --> 00:03:16,950
tools visit www.chromium.org/devtools.
For more information on extensions check out

41
00:03:16,950 --> 00:03:21,130
our website at code.google.com/chrome/extensions

