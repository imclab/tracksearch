1
00:00:00,000 --> 00:00:05,800

2
00:00:05,800 --> 00:00:07,910
BRAD ABRAMS: Good afternoon, and
thank you for coming back

3
00:00:07,910 --> 00:00:08,640
from lunch.

4
00:00:08,640 --> 00:00:11,610
You know, whenever I speak at a
big conference like this, I

5
00:00:11,610 --> 00:00:14,770
always ask them to put me
right after lunch, when

6
00:00:14,770 --> 00:00:18,230
everybody's a little bit tired,
because what I find is

7
00:00:18,230 --> 00:00:21,240
the people that come to the
session right after lunch are

8
00:00:21,240 --> 00:00:26,190
the most interesting, engaged,
smartest, best-looking

9
00:00:26,190 --> 00:00:29,040
audiences, don't you think?

10
00:00:29,040 --> 00:00:31,120
I think so.

11
00:00:31,120 --> 00:00:33,440
So we're really excited
about this talk.

12
00:00:33,440 --> 00:00:37,200
Ido and I are going to go
through how to use HTML5 and

13
00:00:37,200 --> 00:00:40,830
App Engine to build modern
web applications.

14
00:00:40,830 --> 00:00:43,260
So I'm Brad Abrams, and I'm a
product manager on the cloud

15
00:00:43,260 --> 00:00:44,520
platform team.

16
00:00:44,520 --> 00:00:45,820
IDO GREEN: And I'm Ido Green,
and I'm a developer advocate

17
00:00:45,820 --> 00:00:47,250
for Chrome.

18
00:00:47,250 --> 00:00:50,100
BRAD ABRAMS: So Ido, if we're
going to talk about HTML5 and

19
00:00:50,100 --> 00:00:53,220
App Engine and building great
modern web apps, maybe we

20
00:00:53,220 --> 00:00:55,810
should define for the audience
what a modern

21
00:00:55,810 --> 00:00:57,030
web app really is.

22
00:00:57,030 --> 00:00:57,780
IDO GREEN: Absolutely.

23
00:00:57,780 --> 00:01:01,000
So the web is changing so
quickly that it's really hard

24
00:01:01,000 --> 00:01:03,810
to keep up with all the new
capabilities and rich APIs

25
00:01:03,810 --> 00:01:07,200
that we're getting every
six weeks, actually.

26
00:01:07,200 --> 00:01:11,880
Things that we weren't able to
do, like, 6 or 12 months ago,

27
00:01:11,880 --> 00:01:13,740
we're now able to
do on the web.

28
00:01:13,740 --> 00:01:15,760
And we saw in the keynote some
really, really impressive

29
00:01:15,760 --> 00:01:17,370
demos for that.

30
00:01:17,370 --> 00:01:19,700
So when we come to define web
apps, it's actually quite

31
00:01:19,700 --> 00:01:22,910
hard, because we see lots of
fragmentation on the web.

32
00:01:22,910 --> 00:01:25,580
But however, there's a few
things that we've found that

33
00:01:25,580 --> 00:01:28,810
are quite common in all of the
great web apps that are out

34
00:01:28,810 --> 00:01:30,090
there today.

35
00:01:30,090 --> 00:01:34,070
One, and foremost, the first
goal for all those web apps is

36
00:01:34,070 --> 00:01:37,950
to be as easy as possible
for the user to use.

37
00:01:37,950 --> 00:01:41,440
They want to let the user
achieve their goals with as

38
00:01:41,440 --> 00:01:43,700
much efficiency as possible.

39
00:01:43,700 --> 00:01:46,460
Some of them are built in
offline first methodology.

40
00:01:46,460 --> 00:01:48,520
And what that means is that
you're thinking from the

41
00:01:48,520 --> 00:01:51,930
ground up how the app will look
like and how the app will

42
00:01:51,930 --> 00:01:54,060
react when there's no
connection, and then building

43
00:01:54,060 --> 00:01:54,820
on top of it.

44
00:01:54,820 --> 00:01:57,720
So it's not like any other edit
feature that you want to

45
00:01:57,720 --> 00:01:58,920
add to an existing app.

46
00:01:58,920 --> 00:02:02,320
It's more of, let's think how
this app will work when

47
00:02:02,320 --> 00:02:05,210
there's no connection, and
build on top of it.

48
00:02:05,210 --> 00:02:08,180
When we're moving more and more
logic to the client side,

49
00:02:08,180 --> 00:02:09,900
we're dealing with more code.

50
00:02:09,900 --> 00:02:10,639
And that's--

51
00:02:10,639 --> 00:02:12,840
I'm sure some of you
are smiling--

52
00:02:12,840 --> 00:02:14,570
causing lots of spaghetti
code.

53
00:02:14,570 --> 00:02:17,800
And I think that's one of the
main reasons why we see a huge

54
00:02:17,800 --> 00:02:21,000
movement and flourishing in MVC,
or actually I should say

55
00:02:21,000 --> 00:02:25,920
MV*, because we have MVP and
VVM, and lots of others, that

56
00:02:25,920 --> 00:02:28,630
are basically coming to make a
clear separation between our

57
00:02:28,630 --> 00:02:33,000
data models and our UI, and
make our code much more

58
00:02:33,000 --> 00:02:35,020
readable and maintainable.

59
00:02:35,020 --> 00:02:38,770
The last part is that we want
those web apps to feel as

60
00:02:38,770 --> 00:02:42,050
native as possible, and we have
today with HTML5 all the

61
00:02:42,050 --> 00:02:46,390
great APIs to do drag and drop
transition, 3D, and others.

62
00:02:46,390 --> 00:02:48,740
We want to reach 60
frames per second.

63
00:02:48,740 --> 00:02:49,040
Why?

64
00:02:49,040 --> 00:02:51,660
Because above it, the
eye couldn't tell.

65
00:02:51,660 --> 00:02:55,650
And we want to save some CPU
cycles, and make ourselves,

66
00:02:55,650 --> 00:02:57,380
our users, and Al Gore happy.

67
00:02:57,380 --> 00:03:00,370
So those two parts are extremely
important when

68
00:03:00,370 --> 00:03:03,510
you're thinking about
your great web app.

69
00:03:03,510 --> 00:03:05,930
Here is a great example,
Hipmunk.

70
00:03:05,930 --> 00:03:09,120
They are basically letting you
do one thing and one thing

71
00:03:09,120 --> 00:03:11,410
only, find the best flight
for your needs.

72
00:03:11,410 --> 00:03:14,730
You could see how immersive it
is, how functional it is, and

73
00:03:14,730 --> 00:03:17,400
if you're setting new
parameters, or you just want

74
00:03:17,400 --> 00:03:19,790
to start a new search, you don't
need to shift focus.

75
00:03:19,790 --> 00:03:22,060
You are all in that app.

76
00:03:22,060 --> 00:03:25,100
Another great app that I had the
pleasure to work with is

77
00:03:25,100 --> 00:03:26,250
My Chrome Theme.

78
00:03:26,250 --> 00:03:28,570
It's basically letting you
create your own personal

79
00:03:28,570 --> 00:03:31,930
Chrome theme and share with
friends and family, and I

80
00:03:31,930 --> 00:03:33,800
highly encourage you
to check it out.

81
00:03:33,800 --> 00:03:36,860
It's using all the best
technology, CSS3 and HTML5 in

82
00:03:36,860 --> 00:03:39,440
order to achieve this goal.

83
00:03:39,440 --> 00:03:42,750
When we're coming to speak about
client-side architecture

84
00:03:42,750 --> 00:03:45,160
and technology, there's
a huge amount of

85
00:03:45,160 --> 00:03:47,020
different options out there.

86
00:03:47,020 --> 00:03:49,800
And since we don't have time to
get deeper, we just choose

87
00:03:49,800 --> 00:03:52,320
here three great examples
to choose from.

88
00:03:52,320 --> 00:03:55,920
And if you have a bit more time,
my colleague and great

89
00:03:55,920 --> 00:03:56,740
mentor [INAUDIBLE]

90
00:03:56,740 --> 00:03:59,700
did a great job in terms of
letting you know how all the

91
00:03:59,700 --> 00:04:04,000
different MV* framework will
work in different use cases on

92
00:04:04,000 --> 00:04:06,560
a Hello World of the MVC
framework, which

93
00:04:06,560 --> 00:04:08,940
is the to-do list.

94
00:04:08,940 --> 00:04:10,170
Why we do we need offline?

95
00:04:10,170 --> 00:04:13,440
It's a question that's coming
again and again, and I would

96
00:04:13,440 --> 00:04:16,769
just point out that I think the
best answer for that would

97
00:04:16,769 --> 00:04:21,870
be faster is better, and it's
making your app much smoother,

98
00:04:21,870 --> 00:04:22,790
much snappier.

99
00:04:22,790 --> 00:04:24,810
Users will enjoy it
and appreciate it.

100
00:04:24,810 --> 00:04:27,300
And of course, you get the
benefit that your app will

101
00:04:27,300 --> 00:04:30,140
work perfectly when there's no
connection or when there is a

102
00:04:30,140 --> 00:04:31,660
flaky connection.

103
00:04:31,660 --> 00:04:34,400
In our demo later, we'll use
Lawnchair, which is a library

104
00:04:34,400 --> 00:04:37,560
that lets us actually work in
an API that is above the

105
00:04:37,560 --> 00:04:39,620
normal APIs that
HTML5 lets us.

106
00:04:39,620 --> 00:04:41,970
And that's another benefit that
we wanted to show you,

107
00:04:41,970 --> 00:04:44,690
because then later on if you
want to move from, let's say,

108
00:04:44,690 --> 00:04:47,150
local storage or web storage
to IndexedDB,

109
00:04:47,150 --> 00:04:49,144
it's very, very smoothly.

110
00:04:49,144 --> 00:04:53,575
Other APIs that are under our
hands today, and actually in

111
00:04:53,575 --> 00:04:55,450
our toolbox, it's of
course AppCache.

112
00:04:55,450 --> 00:04:58,460
AppCache is letting you save
all the static information

113
00:04:58,460 --> 00:04:59,230
that you need.

114
00:04:59,230 --> 00:05:02,320
So first of all, and foremost,
it would be the HTML,

115
00:05:02,320 --> 00:05:04,350
JavaScript and CSS file
that we need.

116
00:05:04,350 --> 00:05:06,340
Usually it will be one
single-page app.

117
00:05:06,340 --> 00:05:09,890
So it's one HTML file, and
then a bunch of CSS and

118
00:05:09,890 --> 00:05:12,880
JavaScript, but also sound
files and images.

119
00:05:12,880 --> 00:05:16,400
And then for saving our
persistent [? end ?] data, we

120
00:05:16,400 --> 00:05:18,430
could use local storage,
which is a simple key

121
00:05:18,430 --> 00:05:21,470
value API, or IndexedDB.

122
00:05:21,470 --> 00:05:24,210
And today with HTML5 file
API, we could save

123
00:05:24,210 --> 00:05:26,210
binary does as well.

124
00:05:26,210 --> 00:05:28,200
So offline, we touch about it.

125
00:05:28,200 --> 00:05:30,580
I think the main challenge with
offline is to write the

126
00:05:30,580 --> 00:05:31,960
right sync layer.

127
00:05:31,960 --> 00:05:34,200
Because to save the data, we'll
show you it's quite easy

128
00:05:34,200 --> 00:05:35,200
and inefficient.

129
00:05:35,200 --> 00:05:37,250
The sync is the most
problematic way.

130
00:05:37,250 --> 00:05:40,400
How it will work best in your
use case, and how your user

131
00:05:40,400 --> 00:05:43,250
will appreciate the fact, like
we saw in the demo today of

132
00:05:43,250 --> 00:05:46,110
Google Docs, how easy is it to
just notify the user slightly.

133
00:05:46,110 --> 00:05:48,090
They could still be productive,
they could still

134
00:05:48,090 --> 00:05:51,820
work and write their manifesto,
but then when we

135
00:05:51,820 --> 00:05:54,080
have the connection, we're doing
the right thing in terms

136
00:05:54,080 --> 00:05:56,760
of syncing it immediately
to the cloud.

137
00:05:56,760 --> 00:06:00,260
I choose here to show you with
one line of code we could

138
00:06:00,260 --> 00:06:01,860
check exactly, what
is the status?

139
00:06:01,860 --> 00:06:03,260
Do we have connection or not?

140
00:06:03,260 --> 00:06:05,250
And based on that information,
we could

141
00:06:05,250 --> 00:06:07,500
make the right decision.

142
00:06:07,500 --> 00:06:10,340
Another great feature that
[? Paul Kelly and I ?]

143
00:06:10,340 --> 00:06:11,940
work on is Web Intents.

144
00:06:11,940 --> 00:06:15,420
Web Intents basically lets you
have the Intents system that

145
00:06:15,420 --> 00:06:17,910
we saw in Android, and
have it on the web.

146
00:06:17,910 --> 00:06:20,180
And that's, in my humble
opinion, going to change the

147
00:06:20,180 --> 00:06:22,810
world of web apps, and we're
going to see more and more web

148
00:06:22,810 --> 00:06:25,800
apps harnessing their users
with more functionality

149
00:06:25,800 --> 00:06:29,530
without the pain on you, the
developers, to code it against

150
00:06:29,530 --> 00:06:32,560
the vast majority of API that
we see on the web today.

151
00:06:32,560 --> 00:06:36,810
Just imagine the power of
allowing your users to share

152
00:06:36,810 --> 00:06:41,390
anything on their favorite
social networks.

153
00:06:41,390 --> 00:06:43,190
I know that some of you are
thinking, OK Ido, you're

154
00:06:43,190 --> 00:06:47,860
speaking about things 3,000 feet
above, but we have lots

155
00:06:47,860 --> 00:06:51,370
of users that are still using
older browsers that don't have

156
00:06:51,370 --> 00:06:52,880
all the capabilities
and features that

157
00:06:52,880 --> 00:06:54,210
you are talking about.

158
00:06:54,210 --> 00:06:56,550
And just to mention here,
because I know that some of

159
00:06:56,550 --> 00:06:58,830
the guys are more through the
app engine side, and are

160
00:06:58,830 --> 00:07:01,220
working in big organizations
and big enterprises,

161
00:07:01,220 --> 00:07:06,370
organizations, for people that
still have older browsers

162
00:07:06,370 --> 00:07:09,300
under their hands and heads,
they could use

163
00:07:09,300 --> 00:07:10,290
Google Chrome Frame.

164
00:07:10,290 --> 00:07:12,630
It doesn't need any
administrative rights, and

165
00:07:12,630 --> 00:07:15,590
once you install it, you get
every six weeks the greatest

166
00:07:15,590 --> 00:07:18,380
and latest of Chrome, meaning
security, speed, and

167
00:07:18,380 --> 00:07:20,482
simplicity inside IE.

168
00:07:20,482 --> 00:07:25,140
So CSS transition, WebGL, drag
and drop, all the great things

169
00:07:25,140 --> 00:07:28,330
that you want to accomplish in
your web app are there, and

170
00:07:28,330 --> 00:07:29,250
they will stay there.

171
00:07:29,250 --> 00:07:32,360
All you need is one line of
code, one line of meta header,

172
00:07:32,360 --> 00:07:33,280
like it is here.

173
00:07:33,280 --> 00:07:36,970
Or even better, if you have
control of your server, just

174
00:07:36,970 --> 00:07:38,490
change the HTTP header.

175
00:07:38,490 --> 00:07:41,170
And you can choose and play
and tune it to your needs.

176
00:07:41,170 --> 00:07:43,090
If you want just certain
versions of IE,

177
00:07:43,090 --> 00:07:44,600
it will work perfectly.

178
00:07:44,600 --> 00:07:47,960
Now any modern web app--
great web app-- needs

179
00:07:47,960 --> 00:07:49,280
a very strong server.

180
00:07:49,280 --> 00:07:51,840
I guess it's just the right time
to ask Brad what's new in

181
00:07:51,840 --> 00:07:52,620
that kingdom.

182
00:07:52,620 --> 00:07:53,960
BRAD ABRAMS: Absolutely,
thanks Ido.

183
00:07:53,960 --> 00:07:57,490
When I talk to web developers,
most of them are very

184
00:07:57,490 --> 00:07:59,900
interested in a lot of the
client-side functionality that

185
00:07:59,900 --> 00:08:01,270
Ido just talked about.

186
00:08:01,270 --> 00:08:05,400
Building rich, interactive
experiences on the client is

187
00:08:05,400 --> 00:08:07,950
the way to sort of focus on your
users and make sure those

188
00:08:07,950 --> 00:08:09,640
needs are met.

189
00:08:09,640 --> 00:08:11,900
And so the last thing you want
to have to worry about is

190
00:08:11,900 --> 00:08:13,930
complexities related
to the server.

191
00:08:13,930 --> 00:08:17,250
You'd like to just have that
taken care for you, but we do

192
00:08:17,250 --> 00:08:18,450
need server environments.

193
00:08:18,450 --> 00:08:21,630
You have to serve the HTML,
CSS and JavaScript.

194
00:08:21,630 --> 00:08:25,350
You, a lot of times, can offload
expensive computations

195
00:08:25,350 --> 00:08:27,390
to the server and
do those there.

196
00:08:27,390 --> 00:08:30,440
You can do sharing and
collaboration on the server.

197
00:08:30,440 --> 00:08:32,929
But then there's a bunch of
problems that you have as a

198
00:08:32,929 --> 00:08:35,080
web developer when you're
dealing with the server

199
00:08:35,080 --> 00:08:35,850
environment.

200
00:08:35,850 --> 00:08:37,789
Where are you going
to host that?

201
00:08:37,789 --> 00:08:41,010
Are you going to maintain
your own machine images?

202
00:08:41,010 --> 00:08:43,450
What if Linux has
a security hole?

203
00:08:43,450 --> 00:08:44,540
Are you going to patch that?

204
00:08:44,540 --> 00:08:46,460
Are you going to keep up with
all that infrastructure that

205
00:08:46,460 --> 00:08:48,220
needs to be done?

206
00:08:48,220 --> 00:08:50,830
And then specifically, when
you're talking about the new

207
00:08:50,830 --> 00:08:53,670
sort of architecture, when using
an MVC pattern on the

208
00:08:53,670 --> 00:08:57,240
client, communicating to the
server via rest APIs, well,

209
00:08:57,240 --> 00:08:59,510
how are you going to do
that serialization?

210
00:08:59,510 --> 00:09:01,620
How are you going to
do authentication?

211
00:09:01,620 --> 00:09:04,700
How are you going to do the
things we call the OAuth dance

212
00:09:04,700 --> 00:09:08,300
to get users' credentials
and permissions?

213
00:09:08,300 --> 00:09:12,790
So as you might guess, I have an
answer for you, and that's

214
00:09:12,790 --> 00:09:13,460
App Engine.

215
00:09:13,460 --> 00:09:15,660
So App Engine's been around
for several years now.

216
00:09:15,660 --> 00:09:19,280
It's a proven technology for
building web apps and these

217
00:09:19,280 --> 00:09:20,650
modern web apps.

218
00:09:20,650 --> 00:09:23,250
With App Engine, it's very easy
to build and manage and

219
00:09:23,250 --> 00:09:24,780
run your applications.

220
00:09:24,780 --> 00:09:28,550
You write code in Java or Python
or Go and upload it

221
00:09:28,550 --> 00:09:31,340
into our data centers, and
Google runs it in our large

222
00:09:31,340 --> 00:09:33,630
distributed data centers
all over the world.

223
00:09:33,630 --> 00:09:39,320
Our SRE team keeps your
applications up.

224
00:09:39,320 --> 00:09:43,500
Earlier today, we launched
Google Cloud Endpoints.

225
00:09:43,500 --> 00:09:47,130
And Google Cloud Endpoints makes
it significantly easier

226
00:09:47,130 --> 00:09:51,860
to build web APIs, to build
REST-based endpoints that you

227
00:09:51,860 --> 00:09:54,230
expose from your App
Engine app and

228
00:09:54,230 --> 00:09:56,580
consume that in clients.

229
00:09:56,580 --> 00:10:00,980
So you can write your
application in App Engine,

230
00:10:00,980 --> 00:10:04,780
expose these endpoints via
standard REST-based

231
00:10:04,780 --> 00:10:05,700
interfaces.

232
00:10:05,700 --> 00:10:09,350
We handle the serialization and
the authentication, and we

233
00:10:09,350 --> 00:10:14,180
give you strongly typed clients
for Java, for Android,

234
00:10:14,180 --> 00:10:18,430
Objective C, for iOS, and what
we'll be talking about here is

235
00:10:18,430 --> 00:10:22,230
a modern JavaScript client
library that you can go use.

236
00:10:22,230 --> 00:10:24,830
And what's great is that all
this technology that we're

237
00:10:24,830 --> 00:10:28,290
using here with for cloud
endpoints is built on the same

238
00:10:28,290 --> 00:10:29,070
technology.

239
00:10:29,070 --> 00:10:32,910
It's the same stack that Google
uses to do billions of

240
00:10:32,910 --> 00:10:38,010
transactions with our Google
APIs, like the Google+ APIs or

241
00:10:38,010 --> 00:10:40,870
many of the other Google APIs
that are out there.

242
00:10:40,870 --> 00:10:42,990
So you're using the exact
same infrastructure and

243
00:10:42,990 --> 00:10:44,240
tools, as we'll see.

244
00:10:44,240 --> 00:10:46,510

245
00:10:46,510 --> 00:10:50,210
Ido and I were sort of
thinking about what--

246
00:10:50,210 --> 00:10:51,040
I don't want to give it away.

247
00:10:51,040 --> 00:10:54,800
We were thinking about what we
had in common, what sort of

248
00:10:54,800 --> 00:10:55,860
demo we should do.

249
00:10:55,860 --> 00:10:57,490
We thought the best way to
explain this to you would be

250
00:10:57,490 --> 00:10:58,140
to do a demo.

251
00:10:58,140 --> 00:10:59,995
So we thought about what we
would have in common, and we

252
00:10:59,995 --> 00:11:02,770
thought what you in the audience
might appreciate.

253
00:11:02,770 --> 00:11:05,650
So we sort of look at the
demographics of I/O, and we

254
00:11:05,650 --> 00:11:06,540
came up with a plan.

255
00:11:06,540 --> 00:11:08,790
And we decided we would
write an app to

256
00:11:08,790 --> 00:11:10,870
rate and review beers.

257
00:11:10,870 --> 00:11:15,470
So this is the Birra
sample application.

258
00:11:15,470 --> 00:11:17,370
Actually, if it takes off,
you won't Ido and

259
00:11:17,370 --> 00:11:18,930
I at I/O next year.

260
00:11:18,930 --> 00:11:20,750
So we'll do our own little
start up for

261
00:11:20,750 --> 00:11:23,370
beer rating and reviewing.

262
00:11:23,370 --> 00:11:26,910
So it lets you enter beers
from all over the world.

263
00:11:26,910 --> 00:11:29,290
You can review those beers,
you can comment on them.

264
00:11:29,290 --> 00:11:32,000
And what we're going to for the
next, say, 45 minutes or

265
00:11:32,000 --> 00:11:35,520
so is build out this application
right here in

266
00:11:35,520 --> 00:11:37,120
front of you, so you can
see how it goes.

267
00:11:37,120 --> 00:11:40,820
So let's make sure we
understand, before we get

268
00:11:40,820 --> 00:11:43,130
started, the architecture
of this app.

269
00:11:43,130 --> 00:11:46,710
So the beer application,
start with beer.

270
00:11:46,710 --> 00:11:49,310
We're going to store the
beers, or at least the

271
00:11:49,310 --> 00:11:53,480
metadata about the beers, in the
largest NoSQL data store

272
00:11:53,480 --> 00:11:56,850
in production in the world,
and that's in App Engine's

273
00:11:56,850 --> 00:11:59,140
NoSQL data store.

274
00:11:59,140 --> 00:12:02,720
And then we're going to do some
application logic in App

275
00:12:02,720 --> 00:12:05,930
Engine to do things like
sorting, filtering of those

276
00:12:05,930 --> 00:12:08,600
beers, and we'll show you
about how that works.

277
00:12:08,600 --> 00:12:11,640
And then we're going to expose
that over endpoints so that

278
00:12:11,640 --> 00:12:14,340
there's a REST-based
interface for that.

279
00:12:14,340 --> 00:12:18,330
And then Ido's going to consume
that in a modern

280
00:12:18,330 --> 00:12:20,550
JavaScript client
using offline,

281
00:12:20,550 --> 00:12:22,790
using the MVC framework.

282
00:12:22,790 --> 00:12:23,860
OK so it sounds good?

283
00:12:23,860 --> 00:12:25,410
Should we get started?

284
00:12:25,410 --> 00:12:28,090
OK, so let's get started here.

285
00:12:28,090 --> 00:12:30,130
I'm going to start by building
out the server side of the

286
00:12:30,130 --> 00:12:32,090
application.

287
00:12:32,090 --> 00:12:35,170
And what I have installed on
my Mac here is the standard

288
00:12:35,170 --> 00:12:38,470
version of Eclipse, and then I
have the version of Google

289
00:12:38,470 --> 00:12:42,040
Plug-in for Eclipse that just
shipped yesterday, so brand

290
00:12:42,040 --> 00:12:44,840
new bits, and we're going to
use that to start out.

291
00:12:44,840 --> 00:12:47,680
So I'll just say New
Application.

292
00:12:47,680 --> 00:12:49,730
We're going to call
this Birra.

293
00:12:49,730 --> 00:12:51,600
Anybody know why it's
called Birra?

294
00:12:51,600 --> 00:12:52,360
AUDIENCE: It's Hebrew.

295
00:12:52,360 --> 00:12:53,620
BRAD ABRAMS: Hebrew.

296
00:12:53,620 --> 00:12:55,490
Hebrew for beer, yep.

297
00:12:55,490 --> 00:12:58,180
And we're not to use GWT for
this, but we are going to use

298
00:12:58,180 --> 00:12:59,880
App Engine.

299
00:12:59,880 --> 00:13:03,450
And this will create a
scaffolding application for us

300
00:13:03,450 --> 00:13:06,060
to have us get started.

301
00:13:06,060 --> 00:13:06,680
And here it is.

302
00:13:06,680 --> 00:13:09,120
Again, this is the server
side of the code.

303
00:13:09,120 --> 00:13:11,020
And what we're going to
do is come in here

304
00:13:11,020 --> 00:13:12,940
and add a new class.

305
00:13:12,940 --> 00:13:15,900
And as I mentioned, whenever you
start with a beer review

306
00:13:15,900 --> 00:13:18,690
class application, you've
gotta start with beer.

307
00:13:18,690 --> 00:13:21,730
It's central to our application,
and it was

308
00:13:21,730 --> 00:13:25,180
central to the development
of this demo as well.

309
00:13:25,180 --> 00:13:27,530
So we have this beer class,
and this is a

310
00:13:27,530 --> 00:13:29,580
plain old Java object.

311
00:13:29,580 --> 00:13:31,950
Now we need to think, what
is the data about

312
00:13:31,950 --> 00:13:33,960
beer we want to store?

313
00:13:33,960 --> 00:13:36,640
So what do you want to
store about beer?

314
00:13:36,640 --> 00:13:38,020
Any thoughts from the
audience here?

315
00:13:38,020 --> 00:13:39,361
AUDIENCE: [INAUDIBLE].

316
00:13:39,361 --> 00:13:41,370
BRAD ABRAMS: Oh, the
alcohol content.

317
00:13:41,370 --> 00:13:42,620
That's good.

318
00:13:42,620 --> 00:13:44,510

319
00:13:44,510 --> 00:13:45,990
Alcohol content.

320
00:13:45,990 --> 00:13:46,980
IDO GREEN: Maybe name.

321
00:13:46,980 --> 00:13:48,560
BRAD ABRAMS: The name.

322
00:13:48,560 --> 00:13:49,320
That's good.

323
00:13:49,320 --> 00:13:50,110
AUDIENCE: Color.

324
00:13:50,110 --> 00:13:53,020
BRAD ABRAMS: The color
of the beer.

325
00:13:53,020 --> 00:13:54,802
That's pretty good.

326
00:13:54,802 --> 00:13:55,634
AUDIENCE: [INAUDIBLE].

327
00:13:55,634 --> 00:14:01,130
BRAD ABRAMS: OK, yeah, we need
a double for the price.

328
00:14:01,130 --> 00:14:05,290
So I cheated, and ahead of time,
I had a version of the

329
00:14:05,290 --> 00:14:07,790
beer that actually works
with the rest the demo.

330
00:14:07,790 --> 00:14:10,580

331
00:14:10,580 --> 00:14:14,240
But it is still a plain
old Java object.

332
00:14:14,240 --> 00:14:18,340
So what I've defined is just
a set of properties that we

333
00:14:18,340 --> 00:14:21,760
have, a set of regular fields,
and then just getters and

334
00:14:21,760 --> 00:14:22,470
setters for that.

335
00:14:22,470 --> 00:14:25,650
So there's nothing funny here.

336
00:14:25,650 --> 00:14:28,560
Now what we need to do is teach
App Engine how to store

337
00:14:28,560 --> 00:14:29,230
this object.

338
00:14:29,230 --> 00:14:31,220
Right now, it's just a
plain Java object.

339
00:14:31,220 --> 00:14:33,910
We need to teach App Engine how
to store that, and to do

340
00:14:33,910 --> 00:14:39,730
that we're going to use the
old tried and true JDO.

341
00:14:39,730 --> 00:14:42,810
It's been around forever,
but it's effective.

342
00:14:42,810 --> 00:14:44,910
Everything I'm going to show
you, though, works with any

343
00:14:44,910 --> 00:14:46,550
persistence layer you'd
like to use.

344
00:14:46,550 --> 00:14:48,920
You can use cloud endpoints,
however you want.

345
00:14:48,920 --> 00:14:53,090
This just happens to work
well for the tool.

346
00:14:53,090 --> 00:14:56,310
So we've made it available
with JDO, and

347
00:14:56,310 --> 00:14:57,960
now we have our object.

348
00:14:57,960 --> 00:15:01,540
Now what we need to do is expose
this in a way that Ido

349
00:15:01,540 --> 00:15:03,880
can consume from his client.

350
00:15:03,880 --> 00:15:06,980
So to do that, we'll show off
our first new feature of this,

351
00:15:06,980 --> 00:15:10,310
which is Generate Cloud
Endpoint Class.

352
00:15:10,310 --> 00:15:13,030
So we'll click on that,
and hopefully--

353
00:15:13,030 --> 00:15:13,650
yeah, there it goes--

354
00:15:13,650 --> 00:15:18,420
we'll generate a beer
endpoints class.

355
00:15:18,420 --> 00:15:22,620
And in this class, we have this
@API attribute on it.

356
00:15:22,620 --> 00:15:26,830
The @API attribute indicates
that all the public methods on

357
00:15:26,830 --> 00:15:30,220
this class will be exposed
as REST endpoints.

358
00:15:30,220 --> 00:15:33,600
And we'll see how the URL for
that looks in a second.

359
00:15:33,600 --> 00:15:35,850
And we can change the name of
that, which will show up on

360
00:15:35,850 --> 00:15:38,250
the URL, to Birra,
so it matches.

361
00:15:38,250 --> 00:15:41,690
And let's just take a brief
look at what we have here.

362
00:15:41,690 --> 00:15:44,090
We have a method to list
all the beers that

363
00:15:44,090 --> 00:15:45,260
are in the data store.

364
00:15:45,260 --> 00:15:47,840
Now we've given you some
scaffolding code just to get

365
00:15:47,840 --> 00:15:49,210
started with that.

366
00:15:49,210 --> 00:15:51,410
And over the course of this
demo, we'll go through and

367
00:15:51,410 --> 00:15:52,250
modify that.

368
00:15:52,250 --> 00:15:55,360
And then when you write your
real apps later tonight, or

369
00:15:55,360 --> 00:15:59,240
maybe next week, you'll be
modifying it even more.

370
00:15:59,240 --> 00:16:01,795
So it basically just iterates
through the data store and

371
00:16:01,795 --> 00:16:03,110
returns all the results.

372
00:16:03,110 --> 00:16:05,600
Notice I don't have to deal with
any serialization logic

373
00:16:05,600 --> 00:16:06,730
or authentication logic.

374
00:16:06,730 --> 00:16:08,210
All of that is going
to be taken care of

375
00:16:08,210 --> 00:16:10,580
for us by the framework.

376
00:16:10,580 --> 00:16:14,920
Then, same thing, I can get a
particular beer by its ID.

377
00:16:14,920 --> 00:16:16,630
That code is generated for us.

378
00:16:16,630 --> 00:16:18,310
I can insert a beer.

379
00:16:18,310 --> 00:16:21,160
And notice this is an
HTTP POST method.

380
00:16:21,160 --> 00:16:24,130
For you people that are REST
heads, and you're kind of into

381
00:16:24,130 --> 00:16:27,100
the REST pattern and making sure
that works, we've tried

382
00:16:27,100 --> 00:16:30,030
to adhere to it nicely here, and
you'll see you have a lot

383
00:16:30,030 --> 00:16:31,430
of control as we go through.

384
00:16:31,430 --> 00:16:33,760
But one of the things we've done
is expose this as a POST

385
00:16:33,760 --> 00:16:35,530
method because it's insert.

386
00:16:35,530 --> 00:16:38,310
And then UPDATE is a put,
same sort of thing.

387
00:16:38,310 --> 00:16:41,170
And then of course we have
this DELETE method here.

388
00:16:41,170 --> 00:16:42,010
IDO GREEN: Remove.

389
00:16:42,010 --> 00:16:43,450
BRAD ABRAMS: Remove, ah, yes.

390
00:16:43,450 --> 00:16:45,190
IDO GREEN: I would really,
really encourage you to put it

391
00:16:45,190 --> 00:16:47,350
as a DELETE, because it's not
only me, but the community

392
00:16:47,350 --> 00:16:49,350
would love to have
DELETE here.

393
00:16:49,350 --> 00:16:50,780
It will fit perfectly.

394
00:16:50,780 --> 00:16:53,640
BRAD ABRAMS: Yes, so the problem
is this looks so nice

395
00:16:53,640 --> 00:16:56,250
in my Java code, I don't want
to mess with my Java code.

396
00:16:56,250 --> 00:16:59,180
But I want to change what it
looks like for him on the

397
00:16:59,180 --> 00:17:00,440
JavaScript side.

398
00:17:00,440 --> 00:17:03,370
And so what we have, I'm going
to introduce you to this

399
00:17:03,370 --> 00:17:05,079
attribute we'll become
very familiar

400
00:17:05,079 --> 00:17:07,460
with, the @API attribute.

401
00:17:07,460 --> 00:17:11,690
And what it does is it gives us
a way to customize the REST

402
00:17:11,690 --> 00:17:13,990
endpoint that's generated
from this method.

403
00:17:13,990 --> 00:17:18,119
So in this case, I can change
the name to be beers.delete,

404
00:17:18,119 --> 00:17:22,339
and that'll give us a nice
experience in the Java, IOS,

405
00:17:22,339 --> 00:17:25,520
or in our case, JavaScript
client that this generates.

406
00:17:25,520 --> 00:17:28,060
OK, so I think we have a
basic interface here.

407
00:17:28,060 --> 00:17:30,210
Let's just do some
testing of it.

408
00:17:30,210 --> 00:17:33,380
So I spun up the local
development time server, so

409
00:17:33,380 --> 00:17:35,650
it's essentially a baby version
of App Engine running

410
00:17:35,650 --> 00:17:37,550
on my laptop here.

411
00:17:37,550 --> 00:17:41,500
And then what I'm going to do
is use every web developer's

412
00:17:41,500 --> 00:17:44,220
favorite tool, Curl.

413
00:17:44,220 --> 00:17:46,640
We're going to test this with
plain old Curl, just to make

414
00:17:46,640 --> 00:17:49,100
sure everything is working
nicely before we

415
00:17:49,100 --> 00:17:50,760
hand it off to Ido.

416
00:17:50,760 --> 00:17:53,060
So the first thing you'll
notice, if you're an App

417
00:17:53,060 --> 00:17:57,320
Engine geek, you'll notice that
_ah, that's the reserve

418
00:17:57,320 --> 00:17:58,930
namespace in App Engine.

419
00:17:58,930 --> 00:18:02,020
So none of the APIs you're
defining here will interfere

420
00:18:02,020 --> 00:18:04,110
with the rest of your web
applications, because we've

421
00:18:04,110 --> 00:18:06,360
put them in the reserve
namespace.

422
00:18:06,360 --> 00:18:08,790
Then we put them in
APIs and Birra.

423
00:18:08,790 --> 00:18:11,990
If you recall, Birra was the
attribute that I put on

424
00:18:11,990 --> 00:18:13,240
earlier, was there.

425
00:18:13,240 --> 00:18:16,310
And then the name of
the object is beer.

426
00:18:16,310 --> 00:18:19,630
And we just do an HTTP get to
it, and it returns all the

427
00:18:19,630 --> 00:18:22,250
beers in the data store,
which is none.

428
00:18:22,250 --> 00:18:25,370
And notice that the return
is a nicely formatted

429
00:18:25,370 --> 00:18:27,260
JSON object for us.

430
00:18:27,260 --> 00:18:31,800
So let's look at what it would
take to add something to that.

431
00:18:31,800 --> 00:18:36,280
So let me grab this Curl.

432
00:18:36,280 --> 00:18:40,220
So we'll do HTTP post, and
put a new beer in here.

433
00:18:40,220 --> 00:18:41,950
And the beer name will be Bud.

434
00:18:41,950 --> 00:18:44,320
That's my brother's favorite
beer, so I'm trying not to

435
00:18:44,320 --> 00:18:45,010
give him a hard time.

436
00:18:45,010 --> 00:18:46,020
IDO GREEN: Be patient.

437
00:18:46,020 --> 00:18:47,560
BRAD ABRAMS: Patient
with him, yes.

438
00:18:47,560 --> 00:18:51,860
So what we've seen now is we did
a put, HTTP put, got that

439
00:18:51,860 --> 00:18:53,100
beer in the database.

440
00:18:53,100 --> 00:18:56,880
We got an ID for it, ID 1, and
of course all the other fields

441
00:18:56,880 --> 00:18:58,150
are null, but we get a

442
00:18:58,150 --> 00:19:00,650
well-formatted JSON object here.

443
00:19:00,650 --> 00:19:04,820
Now what we can do is go back
and look, and the data story

444
00:19:04,820 --> 00:19:07,050
isn't quite refreshed yet,
but there it is.

445
00:19:07,050 --> 00:19:09,910

446
00:19:09,910 --> 00:19:13,800
It returns as a list, and then
in true REST style, I can just

447
00:19:13,800 --> 00:19:17,690
put a URL parameter passing the
beer ID, and of course,

448
00:19:17,690 --> 00:19:18,320
there it is.

449
00:19:18,320 --> 00:19:19,830
So no surprises there.

450
00:19:19,830 --> 00:19:22,800
So that looks pretty good, I
think we're almost ready to

451
00:19:22,800 --> 00:19:23,490
hand it off.

452
00:19:23,490 --> 00:19:27,400
But I thought what I'd show
is a little bit more--

453
00:19:27,400 --> 00:19:30,970
right before this talk, I went
and deployed one of these to

454
00:19:30,970 --> 00:19:32,560
an endpoint.

455
00:19:32,560 --> 00:19:34,720
And I just wanted to show you a
little bit about some of the

456
00:19:34,720 --> 00:19:36,420
infrastructure that's
there for you.

457
00:19:36,420 --> 00:19:42,380
So if you go to _ah API, and
then hit the discovery point,

458
00:19:42,380 --> 00:19:46,200
for any of your App Engine apps
that are using endpoints,

459
00:19:46,200 --> 00:19:48,920
we provide a discovery
endpoint for that.

460
00:19:48,920 --> 00:19:52,350
And that discovery endpoint
gives you metadata about, in

461
00:19:52,350 --> 00:19:55,180
this case, all of the APIs that
are available on that App

462
00:19:55,180 --> 00:19:56,310
Engine app.

463
00:19:56,310 --> 00:19:57,660
So we have two.

464
00:19:57,660 --> 00:20:00,130
We have the discovery one, and
of course we ate our own dog

465
00:20:00,130 --> 00:20:03,050
food and used cloud endpoints
to serve the discovery.

466
00:20:03,050 --> 00:20:04,820
And then we have
our Birra one.

467
00:20:04,820 --> 00:20:07,640
So let's take a look at Birra,
and we bring that up.

468
00:20:07,640 --> 00:20:12,726
And if you look at this
endpoint, you'll see a full

469
00:20:12,726 --> 00:20:16,780
description of all the types,
of all the methods and

470
00:20:16,780 --> 00:20:19,070
operations that are
part of this.

471
00:20:19,070 --> 00:20:24,190
So this is a handy tool to debug
and use, but it's also

472
00:20:24,190 --> 00:20:26,460
what we use to create the
strongly typed client

473
00:20:26,460 --> 00:20:29,380
libraries in all the different
languages.

474
00:20:29,380 --> 00:20:33,620
In fact, as I mentioned, this
uses the same infrastructure

475
00:20:33,620 --> 00:20:37,110
that the rest of Google's
APIs use.

476
00:20:37,110 --> 00:20:39,830
And because we use that same
infrastructure, we're able to

477
00:20:39,830 --> 00:20:42,020
use tools like API Explorer.

478
00:20:42,020 --> 00:20:45,720
So if you do slash APIs
Explorer, it'll give you a

479
00:20:45,720 --> 00:20:48,030
nice interactive view
of your API.

480
00:20:48,030 --> 00:20:51,350
So those are all the
APIs, nicely named.

481
00:20:51,350 --> 00:20:54,390
And then I can click on them,
and I can execute that API

482
00:20:54,390 --> 00:20:56,600
right here from this interactive
experience right

483
00:20:56,600 --> 00:20:58,930
in the browser, without having
to write a client.

484
00:20:58,930 --> 00:21:01,815
So in this case, this App Engine
app has to spin up.

485
00:21:01,815 --> 00:21:03,400
But there it is.

486
00:21:03,400 --> 00:21:07,140
And you see a well-formatted get
request and exactly what

487
00:21:07,140 --> 00:21:09,250
the response is supposed
to be.

488
00:21:09,250 --> 00:21:12,030
So as Ido and I were building
out this application, we found

489
00:21:12,030 --> 00:21:15,550
this invaluable tool
we could use.

490
00:21:15,550 --> 00:21:18,240
Because I could deploy an
application, I could test it

491
00:21:18,240 --> 00:21:20,190
independent of his client.

492
00:21:20,190 --> 00:21:20,840
He could work.

493
00:21:20,840 --> 00:21:23,590
When he built his client, he
could play with it, figure out

494
00:21:23,590 --> 00:21:26,550
what exactly the payloads were
supposed to be, and it was

495
00:21:26,550 --> 00:21:27,210
really nice.

496
00:21:27,210 --> 00:21:30,760
It was also nice-- so we could
shift blame between us.

497
00:21:30,760 --> 00:21:33,660
He would often claim it to be
a bug, and I would show that

498
00:21:33,660 --> 00:21:36,470
it works nicely in Explorer,
so we knew

499
00:21:36,470 --> 00:21:37,830
where to put the problem.

500
00:21:37,830 --> 00:21:40,950
And it was equally the other
way, I'll mention.

501
00:21:40,950 --> 00:21:43,200
OK, so that's the
basic Explorer.

502
00:21:43,200 --> 00:21:45,180
I think we're ready for you to
start building our client.

503
00:21:45,180 --> 00:21:48,160
IDO GREEN: Absolutely so as
we all know, in software

504
00:21:48,160 --> 00:21:50,830
development we want to take
small steps and see that we

505
00:21:50,830 --> 00:21:53,430
are on a good path.

506
00:21:53,430 --> 00:21:56,700
So first, there's a very, very
simple, just plain vanilla

507
00:21:56,700 --> 00:21:57,670
JavaScript example.

508
00:21:57,670 --> 00:22:01,270
So as you can see here, I'm
having this URL, and as Brad

509
00:22:01,270 --> 00:22:06,400
mentioned, on our new service,
I want a certain version.

510
00:22:06,400 --> 00:22:10,310
And here, this simple AJAX, you
see, I just get a payload

511
00:22:10,310 --> 00:22:11,870
of the list of beers.

512
00:22:11,870 --> 00:22:14,550
Let's see how does it look.

513
00:22:14,550 --> 00:22:15,160
Oops.

514
00:22:15,160 --> 00:22:16,250
BRAD ABRAMS: Oh, did
I not switch you?

515
00:22:16,250 --> 00:22:17,460
I'm sorry.

516
00:22:17,460 --> 00:22:18,970
Failing on my Java already.

517
00:22:18,970 --> 00:22:22,760
IDO GREEN: Let's see again,
how does it look?

518
00:22:22,760 --> 00:22:24,320
Yeah, so we got the
list of beers.

519
00:22:24,320 --> 00:22:27,250
What I said before, and you
couldn't see, this is the

520
00:22:27,250 --> 00:22:29,120
simple endpoint that I'm
calling, and it's plain

521
00:22:29,120 --> 00:22:33,410
vanilla JavaScript, so it's
simple AJAX code.

522
00:22:33,410 --> 00:22:36,420
So as you can see and imagine,
you could consume it and walk

523
00:22:36,420 --> 00:22:38,480
with it, and it's
good and simple.

524
00:22:38,480 --> 00:22:41,870
However, we have another, even
better thing, and that's

525
00:22:41,870 --> 00:22:45,080
Google API JavaScript library,
which actually takes some of

526
00:22:45,080 --> 00:22:47,830
the load and gives you a better
API to work with when

527
00:22:47,830 --> 00:22:49,350
you're working in the client.

528
00:22:49,350 --> 00:22:52,090
And here all we need to do, as
you can see, is put the script

529
00:22:52,090 --> 00:22:54,790
tag and load it asynchronously,
and of course

530
00:22:54,790 --> 00:22:57,530
giving it a call back, so when
it will be loaded, it will run

531
00:22:57,530 --> 00:23:00,890
our case of load API.

532
00:23:00,890 --> 00:23:05,040
We could set client ID, API
ID, et cetera, and load

533
00:23:05,040 --> 00:23:05,950
several APIs.

534
00:23:05,950 --> 00:23:08,250
In our case, we'll keep it
simple, but you can imagine

535
00:23:08,250 --> 00:23:10,520
how you could extend
it and build a big

536
00:23:10,520 --> 00:23:11,720
application with it.

537
00:23:11,720 --> 00:23:14,650
When we're getting the beers, we
have this nice API, and if

538
00:23:14,650 --> 00:23:17,820
you remember before, when Brad
was making those little

539
00:23:17,820 --> 00:23:21,070
changes that make our life
easier and more readable, here

540
00:23:21,070 --> 00:23:23,300
we're just calling the
exact same endpoints.

541
00:23:23,300 --> 00:23:26,070
And we're getting the
same results.

542
00:23:26,070 --> 00:23:30,180
Now, we've built this small test
page just so you'll have

543
00:23:30,180 --> 00:23:32,100
a sense of how the code
looks like, and you

544
00:23:32,100 --> 00:23:33,040
can play with it.

545
00:23:33,040 --> 00:23:35,480
I will just mention that all the
code and all the examples

546
00:23:35,480 --> 00:23:38,020
that we're showing you are on
GitHub, and we'll put the

547
00:23:38,020 --> 00:23:41,000
links after the talk so you
could take it, fork it, work

548
00:23:41,000 --> 00:23:44,050
with it, and join our startup
later, right?

549
00:23:44,050 --> 00:23:46,170
So just feel free, if we're
running really fast on

550
00:23:46,170 --> 00:23:49,210
examples, you'll be able to tap
into them later and just

551
00:23:49,210 --> 00:23:52,100
work with them more
thoroughly.

552
00:23:52,100 --> 00:23:55,230
So let's see the example of
just showing the list of

553
00:23:55,230 --> 00:23:57,210
beers, so let's work
here as well.

554
00:23:57,210 --> 00:24:00,040
The code of it is extremely
simple.

555
00:24:00,040 --> 00:24:05,980
As we saw before, we we're just
running this entry point,

556
00:24:05,980 --> 00:24:07,590
and we're showing the
list of beer.

557
00:24:07,590 --> 00:24:09,290
Let's see how we could--

558
00:24:09,290 --> 00:24:12,980

559
00:24:12,980 --> 00:24:14,640
What we're doing when we're
saving, when we're adding a

560
00:24:14,640 --> 00:24:17,910
new beer, Basically it's just
boilerplate code to fetch the

561
00:24:17,910 --> 00:24:20,210
information from the dialog
that will pop up

562
00:24:20,210 --> 00:24:21,710
and call the insert.

563
00:24:21,710 --> 00:24:24,760
In our case, we know it's an
insert when we don't have any

564
00:24:24,760 --> 00:24:27,300
beer ID, because we want the
server to make a unique ID for

565
00:24:27,300 --> 00:24:28,390
each and every beer.

566
00:24:28,390 --> 00:24:31,420
If we got a beer ID, we're just
calling it an update.

567
00:24:31,420 --> 00:24:34,585
Let's see how does it look like
on the amazing test page

568
00:24:34,585 --> 00:24:35,830
that we did.

569
00:24:35,830 --> 00:24:39,200
We'll close it so we'll have
a bit of real estate.

570
00:24:39,200 --> 00:24:42,990
Let's try to add the new beer,
maybe because I have a good

571
00:24:42,990 --> 00:24:44,240
friend from Australia.

572
00:24:44,240 --> 00:24:46,940

573
00:24:46,940 --> 00:24:49,510
And another nice functionality
that we'll look at in the code

574
00:24:49,510 --> 00:24:58,820
in a second is the ability to
take the little image here and

575
00:24:58,820 --> 00:25:00,480
just drag and drop it.

576
00:25:00,480 --> 00:25:03,090
And of course you can see the
geo information that we just

577
00:25:03,090 --> 00:25:06,000
got the information
from our browser.

578
00:25:06,000 --> 00:25:07,065
Let's save it.

579
00:25:07,065 --> 00:25:08,890
We got the confirmation.

580
00:25:08,890 --> 00:25:12,940
Now we could take this just to
make sure it's been saved in

581
00:25:12,940 --> 00:25:14,820
our production.

582
00:25:14,820 --> 00:25:16,920
And sure enough, it is.

583
00:25:16,920 --> 00:25:20,020
And of course, we
could remove it.

584
00:25:20,020 --> 00:25:22,340
We're getting the answer that is
was removed, and now if we

585
00:25:22,340 --> 00:25:24,620
try to fetch it, we're
getting nothing.

586
00:25:24,620 --> 00:25:29,060
So we saw, basically, the crude
operations that any app

587
00:25:29,060 --> 00:25:30,990
will have to deal with.

588
00:25:30,990 --> 00:25:33,810
It's very, very simple and
very easy to achieve.

589
00:25:33,810 --> 00:25:39,200
I will just show you
real quick how.

590
00:25:39,200 --> 00:25:42,300
So we saw the insert, we saw the
update, and this is what

591
00:25:42,300 --> 00:25:44,790
we're doing when we get
the response back.

592
00:25:44,790 --> 00:25:47,300
We'll get the response back in
a JSON format, so if we'll

593
00:25:47,300 --> 00:25:49,410
have arrows, we'll know how to
handle them and notify the

594
00:25:49,410 --> 00:25:52,690
user what we need to
do in that case.

595
00:25:52,690 --> 00:25:55,600
I think that we have the basic
operations, but with all these

596
00:25:55,600 --> 00:25:58,100
social movements, maybe we'll
let our friends have some

597
00:25:58,100 --> 00:25:59,140
comments on the Birra ranking.

598
00:25:59,140 --> 00:26:00,990
BRAD ABRAMS: Yes, comments.

599
00:26:00,990 --> 00:26:01,590
Awesome.

600
00:26:01,590 --> 00:26:03,980
You know, client guys always
want more features.

601
00:26:03,980 --> 00:26:04,920
Have you noticed that?

602
00:26:04,920 --> 00:26:06,480
IDO GREEN: Trying.

603
00:26:06,480 --> 00:26:07,240
BRAD ABRAMS: OK, I'm up.

604
00:26:07,240 --> 00:26:10,850
So let's go through and
see how you would add

605
00:26:10,850 --> 00:26:12,050
comments to this app.

606
00:26:12,050 --> 00:26:13,390
So we've got beers.

607
00:26:13,390 --> 00:26:15,670
I think we should start with
comments exactly where we did

608
00:26:15,670 --> 00:26:16,550
with beers.

609
00:26:16,550 --> 00:26:20,540
We'll just add a new class
called comment, and then it's

610
00:26:20,540 --> 00:26:23,140
the same story we saw before.

611
00:26:23,140 --> 00:26:27,500
We'll go ahead and define a
plain old Java object and then

612
00:26:27,500 --> 00:26:29,790
annotate it with the
JDO attributes.

613
00:26:29,790 --> 00:26:32,620
And here I just have an ID for
this, the user that made the

614
00:26:32,620 --> 00:26:36,250
comment, when they made it,
the comment itself.

615
00:26:36,250 --> 00:26:39,530
And I'm using the beer ID.

616
00:26:39,530 --> 00:26:41,450
So this is effectively
a foreign key.

617
00:26:41,450 --> 00:26:44,140
It's which beer is
this comment for?

618
00:26:44,140 --> 00:26:46,270
And we'll look at that
a little bit later.

619
00:26:46,270 --> 00:26:49,880
OK, so I take this comment,
and I do the same thing.

620
00:26:49,880 --> 00:26:51,410
I generate a cloud
endpoint for it.

621
00:26:51,410 --> 00:26:53,990
So we're going to expose the
same sort of rest interface

622
00:26:53,990 --> 00:26:55,510
here for comments.

623
00:26:55,510 --> 00:26:56,780
So there it is.

624
00:26:56,780 --> 00:26:59,980
And now we're going to change
the name of that to be Birra

625
00:26:59,980 --> 00:27:03,610
so that these sort of are merged
into the same API.

626
00:27:03,610 --> 00:27:06,620
And now, when we look at this
list comments method, well

627
00:27:06,620 --> 00:27:10,210
it's going to list all the
comments in the data store.

628
00:27:10,210 --> 00:27:12,600
But that may not be
what Ido wants.

629
00:27:12,600 --> 00:27:14,790
Ido's probably going to
want a comment for a

630
00:27:14,790 --> 00:27:16,640
particular beer ID, right?

631
00:27:16,640 --> 00:27:21,450
So what we probably want to do
is pass in a beer ID here and

632
00:27:21,450 --> 00:27:24,380
have that beer ID return
the comments only

633
00:27:24,380 --> 00:27:25,720
associated with that.

634
00:27:25,720 --> 00:27:28,040
But we have to figure out how
to make that work for us in

635
00:27:28,040 --> 00:27:29,030
the REST world.

636
00:27:29,030 --> 00:27:33,210
So again, our API method
attribute is

637
00:27:33,210 --> 00:27:33,990
going to be our friend.

638
00:27:33,990 --> 00:27:38,945
So let me just import that
and grab this code.

639
00:27:38,945 --> 00:27:42,640

640
00:27:42,640 --> 00:27:45,660
So what we're going to do here
is we change list comments to

641
00:27:45,660 --> 00:27:47,840
have a parameter
called beer ID.

642
00:27:47,840 --> 00:27:50,220
And notice we customize
the path here.

643
00:27:50,220 --> 00:27:52,850
So I imagine a few of you saw
the path earlier and thought,

644
00:27:52,850 --> 00:27:56,720
oh, no, I hope they're not auto
generating that path.

645
00:27:56,720 --> 00:27:59,940
You have a lot of control over
exactly what the REST

646
00:27:59,940 --> 00:28:02,240
interface looks like, so you can
make it look like the way

647
00:28:02,240 --> 00:28:03,200
you need to.

648
00:28:03,200 --> 00:28:06,060
So in this case, I thought it
made more sense to put the

649
00:28:06,060 --> 00:28:08,590
comments logically
underneath beers.

650
00:28:08,590 --> 00:28:12,080
So beers, the beer ID, and
then show me all the

651
00:28:12,080 --> 00:28:12,900
comments for that.

652
00:28:12,900 --> 00:28:14,960
So that's what I've modeled
for you there.

653
00:28:14,960 --> 00:28:16,970
So we've done that for list.

654
00:28:16,970 --> 00:28:20,060
And then, of course, we need to
change the data store code.

655
00:28:20,060 --> 00:28:21,390
So luckily it's very easy.

656
00:28:21,390 --> 00:28:25,350
We just say beer ID equals and
then the beer ID, and that

657
00:28:25,350 --> 00:28:26,760
will do the filtering for us.

658
00:28:26,760 --> 00:28:29,890
You could imagine lots more rich
logic you could do here.

659
00:28:29,890 --> 00:28:33,770
We need to do a similar thing
for get, so let's go

660
00:28:33,770 --> 00:28:37,670
ahead and do that.

661
00:28:37,670 --> 00:28:40,300
And notice here we're passing
beer ID and the

662
00:28:40,300 --> 00:28:44,830
ID on the REST call.

663
00:28:44,830 --> 00:28:48,470
And then we need to do something
for insert as well.

664
00:28:48,470 --> 00:28:52,970
And then I'll leave the others
to do offline, but there's

665
00:28:52,970 --> 00:28:55,900
just a few just to show you
what it looks like.

666
00:28:55,900 --> 00:28:58,900
So now we'll run it in the debug
server, and we'll take a

667
00:28:58,900 --> 00:29:01,140
look at how we test this.

668
00:29:01,140 --> 00:29:06,400
So I will test it in Curl
as we saw before.

669
00:29:06,400 --> 00:29:08,360
Go ahead and try that, and
again, the data store has to

670
00:29:08,360 --> 00:29:10,110
spin up, so it takes
just a second.

671
00:29:10,110 --> 00:29:12,800
OK, so there are no items,
no comments.

672
00:29:12,800 --> 00:29:14,510
That's what we expected.

673
00:29:14,510 --> 00:29:19,300
And then what I'm going to do
now is add a new comment here

674
00:29:19,300 --> 00:29:20,780
for that beer.

675
00:29:20,780 --> 00:29:25,860
And then we can go back and look
at comments for beer one

676
00:29:25,860 --> 00:29:27,000
and see if there's
any comments.

677
00:29:27,000 --> 00:29:27,920
And there, there is.

678
00:29:27,920 --> 00:29:30,720
And then again in the
REST style I can

679
00:29:30,720 --> 00:29:32,270
do for comment two.

680
00:29:32,270 --> 00:29:33,560
So that looks pretty
good, Ido.

681
00:29:33,560 --> 00:29:34,790
I think you're ready
add comments.

682
00:29:34,790 --> 00:29:37,550
IDO GREEN: Oh yeah, beautiful.

683
00:29:37,550 --> 00:29:40,300
So first, let's see how it looks
when we're trying just

684
00:29:40,300 --> 00:29:48,150
to add a simple comment to a
beer for I/O. And then we're

685
00:29:48,150 --> 00:29:49,720
doing a simple get.

686
00:29:49,720 --> 00:29:51,730
We see all the comments
that we had.

687
00:29:51,730 --> 00:29:54,070
Let's look at the simple
code that does it.

688
00:29:54,070 --> 00:30:03,120

689
00:30:03,120 --> 00:30:05,020
So basically, you could see here
when I'm clicking on the

690
00:30:05,020 --> 00:30:07,630
Save button of the dialog that
I just showed you, I'm

691
00:30:07,630 --> 00:30:10,250
gathering some information from
the user, and I'm getting

692
00:30:10,250 --> 00:30:12,980
some information behind the
scene, like in the case of the

693
00:30:12,980 --> 00:30:14,510
beers, I got the geolocation
here.

694
00:30:14,510 --> 00:30:17,950
I just want to take the exact
time that the user entered,

695
00:30:17,950 --> 00:30:20,470
and you could think about
lots of other use cases.

696
00:30:20,470 --> 00:30:22,040
And then I'm just calling
the endpoint.

697
00:30:22,040 --> 00:30:25,100
Before that, I'm making sure
that I have some nice spinner

698
00:30:25,100 --> 00:30:28,660
to show the users that some
work is being done.

699
00:30:28,660 --> 00:30:32,510
And I'm inserting the beer into
the App Engine, and when

700
00:30:32,510 --> 00:30:35,510
I'm returning the call, I'll
just show, in case of an

701
00:30:35,510 --> 00:30:36,555
error, some alert.

702
00:30:36,555 --> 00:30:38,020
And if everything is
fine, I'm just

703
00:30:38,020 --> 00:30:39,870
showing the list of comments.

704
00:30:39,870 --> 00:30:41,600
So we have comments,
and it's pretty

705
00:30:41,600 --> 00:30:42,840
straightforward, of the beers.

706
00:30:42,840 --> 00:30:46,650
All the heavy handling has been
done for us for free in

707
00:30:46,650 --> 00:30:48,020
the server side.

708
00:30:48,020 --> 00:30:50,430
One thing that I want to show
you, we spoke about offline

709
00:30:50,430 --> 00:30:51,120
capabilities.

710
00:30:51,120 --> 00:30:53,720
How easy is it to achieve,
today, an offline capability

711
00:30:53,720 --> 00:30:57,570
in terms of doing the initial
loading of, let's say, the top

712
00:30:57,570 --> 00:31:01,860
15 beers, and saving them
locally in our browser?

713
00:31:01,860 --> 00:31:04,430
So you can see here that when
I'm loading the API, I had

714
00:31:04,430 --> 00:31:08,650
this commented.

715
00:31:08,650 --> 00:31:10,000
Now I've uncommented it.

716
00:31:10,000 --> 00:31:13,010
Let's try and go over
it real quickly.

717
00:31:13,010 --> 00:31:14,480
Basically, I'm getting
a payload of data,

718
00:31:14,480 --> 00:31:15,980
of items, of beers.

719
00:31:15,980 --> 00:31:18,670
And I'm going on each and every
one of them, and I'm

720
00:31:18,670 --> 00:31:23,670
calling this object that
I defined Birra.db.

721
00:31:23,670 --> 00:31:27,510
What it basically does, it's
extending Lawnchair and giving

722
00:31:27,510 --> 00:31:31,060
us the basic operation that you
will expect any layer, any

723
00:31:31,060 --> 00:31:32,180
DB layer to do.

724
00:31:32,180 --> 00:31:34,180
In our case, it saves beer.

725
00:31:34,180 --> 00:31:39,580
Let's try now to run this
code from scratch.

726
00:31:39,580 --> 00:31:42,770

727
00:31:42,770 --> 00:31:45,230
We'll open the Dev Tools just
to see what's going on,

728
00:31:45,230 --> 00:31:47,340
because there are some really
nice capabilities in Dev Tools

729
00:31:47,340 --> 00:31:51,910
that let you see what's going
on with your app.

730
00:31:51,910 --> 00:31:53,160
Let's load it again.

731
00:31:53,160 --> 00:31:56,480

732
00:31:56,480 --> 00:31:57,920
OK, we've got the beers.

733
00:31:57,920 --> 00:32:00,890
Now what you could do in Dev
Tools, which is pretty cool,

734
00:32:00,890 --> 00:32:02,110
is go to Resources.

735
00:32:02,110 --> 00:32:05,240
And in Resources, you can go to
Local Host, and basically

736
00:32:05,240 --> 00:32:08,790
you can see here that I got all
the beers with the keys.

737
00:32:08,790 --> 00:32:11,390
And Lawnchair actually did the
extra work for me and made

738
00:32:11,390 --> 00:32:13,170
sure that I'll have
indexes here.

739
00:32:13,170 --> 00:32:15,780
So if I want to fetch
a range of beers, it

740
00:32:15,780 --> 00:32:17,490
will be quite quickly.

741
00:32:17,490 --> 00:32:19,580
Another nice thing that you
could see here is that I'm

742
00:32:19,580 --> 00:32:22,060
having a global beer ID in
my test page, and that's

743
00:32:22,060 --> 00:32:24,390
something really useful when
you're doing-- because even

744
00:32:24,390 --> 00:32:26,450
when I'm loading and I'm
wanting to work with a

745
00:32:26,450 --> 00:32:28,910
specific beer, I could do it
quite efficiently, and I don't

746
00:32:28,910 --> 00:32:31,950
need to remember what was the
last ID that I worked with.

747
00:32:31,950 --> 00:32:35,120
So we have the offline
capabilities.

748
00:32:35,120 --> 00:32:37,820
The sync layer will be in the
GitHub repository, so you

749
00:32:37,820 --> 00:32:39,930
could check it out later.

750
00:32:39,930 --> 00:32:43,060
And let's have a quick look
about how the simple code of

751
00:32:43,060 --> 00:32:44,740
Lawnchair looks like.

752
00:32:44,740 --> 00:32:47,610
Basically, we're extending it,
giving it to our own name.

753
00:32:47,610 --> 00:32:50,540
And now you can see that, for
instance, saving, all we need

754
00:32:50,540 --> 00:32:54,740
to do is take the object,
stringify it, because local

755
00:32:54,740 --> 00:32:58,320
search will work with key
value of strings.

756
00:32:58,320 --> 00:33:04,740
And then just run it, and have
in the call back the response

757
00:33:04,740 --> 00:33:05,590
that everything is OK.

758
00:33:05,590 --> 00:33:09,080
If not, of course, we need
to inform it to the user.

759
00:33:09,080 --> 00:33:12,660
What we did with that is that
you all know that the best

760
00:33:12,660 --> 00:33:15,740
practices of software
development told us to have

761
00:33:15,740 --> 00:33:18,460
continuous integration
and unit testing.

762
00:33:18,460 --> 00:33:21,860
And I want to show you a small
example of how we did it in

763
00:33:21,860 --> 00:33:25,510
our small use case of saving
locally the beers.

764
00:33:25,510 --> 00:33:26,600
We created a [? Qedit ?]

765
00:33:26,600 --> 00:33:27,450
page.

766
00:33:27,450 --> 00:33:28,980
It is done for you.

767
00:33:28,980 --> 00:33:31,090
It's letting us know that for
each and every change that

768
00:33:31,090 --> 00:33:34,960
we're doing, which tests are
passing and which are failing.

769
00:33:34,960 --> 00:33:36,750
You'll have it in the GitHub
repository to look at it

770
00:33:36,750 --> 00:33:39,490
later, more thoroughly, but it's
just one of those things

771
00:33:39,490 --> 00:33:42,130
that, up to now, we didn't have
on the client, and now we

772
00:33:42,130 --> 00:33:45,430
could run with all the best
practices on the client, as

773
00:33:45,430 --> 00:33:47,780
well as on the server.

774
00:33:47,780 --> 00:33:49,110
We have offline capabilities.

775
00:33:49,110 --> 00:33:50,780
We spoke about syncing.

776
00:33:50,780 --> 00:33:54,470
In that example I gave-- and I
spoke about 15, 20 beers--

777
00:33:54,470 --> 00:33:56,590
I have a good friend that
drinks quite a bit.

778
00:33:56,590 --> 00:33:59,290
I think if we'll have maybe
pagination, it will be--

779
00:33:59,290 --> 00:34:00,030
BRAD ABRAMS: Yes.

780
00:34:00,030 --> 00:34:00,530
Yes.

781
00:34:00,530 --> 00:34:04,140
See again, these client guys
with their features.

782
00:34:04,140 --> 00:34:06,590
Yeah, so what I showed you
before with the beers.

783
00:34:06,590 --> 00:34:08,780
So we're back on the
server, looking at

784
00:34:08,780 --> 00:34:10,929
the list beers method.

785
00:34:10,929 --> 00:34:14,040
It returns all the beers
in our data store.

786
00:34:14,040 --> 00:34:15,966
Well that might work fine for
this demo, but we're going to

787
00:34:15,966 --> 00:34:17,880
have a wildly successful
startup, right?

788
00:34:17,880 --> 00:34:20,590
So we're going to have hundreds,
thousands, millions

789
00:34:20,590 --> 00:34:22,150
of beers in data store.

790
00:34:22,150 --> 00:34:24,540
So we want to support
paging of that.

791
00:34:24,540 --> 00:34:27,610
And to do that, I also want to
show you a few of the other

792
00:34:27,610 --> 00:34:30,460
cool capabilities
of endpoints.

793
00:34:30,460 --> 00:34:34,460
So what I've done is, off stage,
while Ido was working

794
00:34:34,460 --> 00:34:36,880
there, I wrote this
list beers method.

795
00:34:36,880 --> 00:34:39,000
I updated it a little bit.

796
00:34:39,000 --> 00:34:41,360
And I added a couple of
nullable parameters.

797
00:34:41,360 --> 00:34:45,969
So in endpoints, nullable
parameters are optional, so

798
00:34:45,969 --> 00:34:47,790
you don't have to
pass those in.

799
00:34:47,790 --> 00:34:50,920
And so they show up as query
string parameters on the URL,

800
00:34:50,920 --> 00:34:52,850
so anything you mark
nullable will be a

801
00:34:52,850 --> 00:34:53,940
query string parameter.

802
00:34:53,940 --> 00:34:56,046
You can have any combination
of nullable and required as

803
00:34:56,046 --> 00:34:56,989
you'd like.

804
00:34:56,989 --> 00:34:59,700
So in this case, I'm going to
take two nullable parameters.

805
00:34:59,700 --> 00:35:01,080
One is going to be the limit.

806
00:35:01,080 --> 00:35:05,050
That is, how many beers do you
want to return at this time?

807
00:35:05,050 --> 00:35:08,860
And the other is the cursor
string, or the cursor.

808
00:35:08,860 --> 00:35:12,380
That is, where were you
last time you asked?

809
00:35:12,380 --> 00:35:14,050
So the first time, obviously
you don't pass

810
00:35:14,050 --> 00:35:15,040
anything in for that.

811
00:35:15,040 --> 00:35:17,490
The second time, you pass
in the result I

812
00:35:17,490 --> 00:35:18,930
passed you last time.

813
00:35:18,930 --> 00:35:23,270
And so luckily for us, App
Engine's data store has some

814
00:35:23,270 --> 00:35:26,360
very nice support for that,
which we'll see.

815
00:35:26,360 --> 00:35:29,000
So that's the declaration.

816
00:35:29,000 --> 00:35:32,610
And then you can see if they
pass in a cursor string, then

817
00:35:32,610 --> 00:35:35,730
we go ahead and set
that in the query.

818
00:35:35,730 --> 00:35:37,950
We set the cursor
they passed in.

819
00:35:37,950 --> 00:35:42,380
If they passed in a limit,
we set that as a range.

820
00:35:42,380 --> 00:35:46,820
And then what we do is we go
ahead and do our execute and

821
00:35:46,820 --> 00:35:49,200
get all the results back
from data store.

822
00:35:49,200 --> 00:35:51,060
And then we save
off the cursor.

823
00:35:51,060 --> 00:35:54,160
So wherever you were, give
me a cursor for that.

824
00:35:54,160 --> 00:35:57,290
And then we get a web save
string, so that's effectively

825
00:35:57,290 --> 00:36:01,790
a base 64 encoded string that's
unique for where this

826
00:36:01,790 --> 00:36:05,670
user was, so that you can pass
it back at any time and get

827
00:36:05,670 --> 00:36:07,230
back the next set of results.

828
00:36:07,230 --> 00:36:09,290
So that's really
handy to have.

829
00:36:09,290 --> 00:36:12,400
And then what we do is we return
that, and notice we're

830
00:36:12,400 --> 00:36:14,670
returning a complex
object this time.

831
00:36:14,670 --> 00:36:17,610
We're returning all of those
elements as we were before,

832
00:36:17,610 --> 00:36:21,640
but we're also returning
that cursor string.

833
00:36:21,640 --> 00:36:23,070
Yep, so we go ahead
and save that.

834
00:36:23,070 --> 00:36:26,640
We want to run this in our local
development time server.

835
00:36:26,640 --> 00:36:30,160
And then to do a test of paging,
we need to go ahead

836
00:36:30,160 --> 00:36:33,670
and add a couple of items
to our data store.

837
00:36:33,670 --> 00:36:38,250
So I'll add Mom's Home Brew and
Bob's Indian Pale Ale so

838
00:36:38,250 --> 00:36:41,690
you can see all those
are there.

839
00:36:41,690 --> 00:36:46,070
And then let's look at all the
items in our data store.

840
00:36:46,070 --> 00:36:50,560

841
00:36:50,560 --> 00:36:52,210
OK, so there we go.

842
00:36:52,210 --> 00:36:55,780
That's two of them, so
that's pretty good.

843
00:36:55,780 --> 00:36:58,510
Maybe it'll wake
up in a second.

844
00:36:58,510 --> 00:36:59,330
OK, so [? great. ?]

845
00:36:59,330 --> 00:37:00,050
We have all three of them.

846
00:37:00,050 --> 00:37:02,510
We have ID 1, ID 3, and ID 4.

847
00:37:02,510 --> 00:37:05,830
For those playing at home,
where was ID 2?

848
00:37:05,830 --> 00:37:06,190
Where was ID 2?

849
00:37:06,190 --> 00:37:07,482
AUDIENCE: [INAUDIBLE]

850
00:37:07,482 --> 00:37:10,010
BRAD ABRAMS: No, it was the
comment that we did.

851
00:37:10,010 --> 00:37:11,230
The comment we put in.

852
00:37:11,230 --> 00:37:12,150
Anyway, OK.

853
00:37:12,150 --> 00:37:14,530
Data store trivia for you.

854
00:37:14,530 --> 00:37:19,850
OK, so there's all those, and
now let's test out limit.

855
00:37:19,850 --> 00:37:21,910
So we'll do that.

856
00:37:21,910 --> 00:37:26,910
We'll pass a query string
parameter for limit, and you

857
00:37:26,910 --> 00:37:28,670
see we just use the
query string.

858
00:37:28,670 --> 00:37:31,510
And notice now we're getting
this next page token.

859
00:37:31,510 --> 00:37:36,290
That tells us what to pass in
to get the next one, and I

860
00:37:36,290 --> 00:37:41,330
have already got one of those as
well, just to save you from

861
00:37:41,330 --> 00:37:43,720
watching me try to type that.

862
00:37:43,720 --> 00:37:48,530
And so we pass in the limit and
the cursor string, and we

863
00:37:48,530 --> 00:37:49,660
get the next one.

864
00:37:49,660 --> 00:37:51,500
So Ido, you want to add paging
to the app there?

865
00:37:51,500 --> 00:37:54,130
IDO GREEN: Yeah, it's
looking good.

866
00:37:54,130 --> 00:37:56,060
The client life is good.

867
00:37:56,060 --> 00:37:58,300
Now all we need to do is
to take these two extra

868
00:37:58,300 --> 00:38:01,180
parameters that Brad just
mentioned, limit and cursor,

869
00:38:01,180 --> 00:38:01,860
and just use them.

870
00:38:01,860 --> 00:38:04,290
So if you remember at the
beginning when I was calling

871
00:38:04,290 --> 00:38:08,130
this endpoint, I was calling
just list with none of the

872
00:38:08,130 --> 00:38:08,780
parameters.

873
00:38:08,780 --> 00:38:10,310
Now I'll use both of them.

874
00:38:10,310 --> 00:38:12,050
And basically what we'll
do, we'll save the

875
00:38:12,050 --> 00:38:14,260
cursor as our pointer.

876
00:38:14,260 --> 00:38:17,590
And if we want, we'll know to
call it later and just make

877
00:38:17,590 --> 00:38:20,380
sure that we're fetching the
extra amount of beers.

878
00:38:20,380 --> 00:38:23,330
Let's see how it looks like.

879
00:38:23,330 --> 00:38:27,140
Let's try to fetch one by one.

880
00:38:27,140 --> 00:38:29,560
So we're getting the beer, and
then we get the button More,

881
00:38:29,560 --> 00:38:31,830
because we know that now we've
got the cursor back, the next

882
00:38:31,830 --> 00:38:36,550
token, and if we click, you see
here that it's Bud, it's

883
00:38:36,550 --> 00:38:37,350
[? VB Gold, ?]

884
00:38:37,350 --> 00:38:38,780
and we have more and more.

885
00:38:38,780 --> 00:38:41,790
So pagination is working
quite perfectly.

886
00:38:41,790 --> 00:38:43,960
What I'm thinking is that, after
all, we are a search

887
00:38:43,960 --> 00:38:47,020
company, and maybe we'll
have search in our app.

888
00:38:47,020 --> 00:38:47,990
BRAD ABRAMS: Search, search.

889
00:38:47,990 --> 00:38:50,040
Do you see these features?

890
00:38:50,040 --> 00:38:52,050
Yes, let's switch over
and see how we would

891
00:38:52,050 --> 00:38:53,170
add search to this.

892
00:38:53,170 --> 00:38:54,770
And in the process, we'll learn

893
00:38:54,770 --> 00:38:56,480
more about cloud endpoints.

894
00:38:56,480 --> 00:38:59,410
So App Engine, as you might be
aware, recently launched

895
00:38:59,410 --> 00:39:00,280
support for search.

896
00:39:00,280 --> 00:39:02,990
It actually uses some of the
same underlying infrastructure

897
00:39:02,990 --> 00:39:05,250
that we use for Google search.

898
00:39:05,250 --> 00:39:09,350
And so if you've studied the
search problem, the way search

899
00:39:09,350 --> 00:39:11,670
starts is with an index.

900
00:39:11,670 --> 00:39:15,630
So we want to create an index of
all the items that we want

901
00:39:15,630 --> 00:39:16,480
searchable.

902
00:39:16,480 --> 00:39:20,100
So here's the basic code
to do that index.

903
00:39:20,100 --> 00:39:21,940
And we're going to call
it beerindex.

904
00:39:21,940 --> 00:39:25,710
We can set some constraints on
it that controls how fast

905
00:39:25,710 --> 00:39:28,360
queries go based
on consistency,

906
00:39:28,360 --> 00:39:30,040
guarantees, and whatnot.

907
00:39:30,040 --> 00:39:33,070
But we've done that
initialization.

908
00:39:33,070 --> 00:39:36,970
Now what we need to do is
populate our index.

909
00:39:36,970 --> 00:39:40,860
So what we'll do is add a new
method here, and we want to

910
00:39:40,860 --> 00:39:42,880
customize what goes
in the index.

911
00:39:42,880 --> 00:39:46,150
For example, we may not want to
put the image in the index.

912
00:39:46,150 --> 00:39:47,930
That'll just bloat
up our index.

913
00:39:47,930 --> 00:39:51,780
So we want to have a little bit
of customization, which I

914
00:39:51,780 --> 00:39:53,785
have written for you
ahead of time.

915
00:39:53,785 --> 00:39:56,950

916
00:39:56,950 --> 00:39:58,630
So there we are.

917
00:39:58,630 --> 00:40:01,870
This is an add to search index
method, and what we're doing

918
00:40:01,870 --> 00:40:04,700
is just creating a new
search document.

919
00:40:04,700 --> 00:40:06,820
We're Google, so everything's
a document, even if you're

920
00:40:06,820 --> 00:40:08,650
talking about beers.

921
00:40:08,650 --> 00:40:13,360
So we add a document,
and we set its name.

922
00:40:13,360 --> 00:40:17,470
And notice we're just pulling
these properties right out of

923
00:40:17,470 --> 00:40:18,990
the beer objects.

924
00:40:18,990 --> 00:40:21,790
And notice sometimes, like
name, we're using text.

925
00:40:21,790 --> 00:40:24,290
And other times, when
we do score, we're

926
00:40:24,290 --> 00:40:25,780
setting it as a number.

927
00:40:25,780 --> 00:40:28,780
So we're actually telling our
search index which things are

928
00:40:28,780 --> 00:40:30,890
text, which things
are numbers.

929
00:40:30,890 --> 00:40:33,480
And that's going to give
us some strong query

930
00:40:33,480 --> 00:40:35,770
capabilities, which we'll
see in just a minute.

931
00:40:35,770 --> 00:40:38,030
OK, so that's that
basic thing.

932
00:40:38,030 --> 00:40:40,890
Now all we need to do is
actually add the beers to the

933
00:40:40,890 --> 00:40:41,840
data store.

934
00:40:41,840 --> 00:40:43,610
So we need to call
this method.

935
00:40:43,610 --> 00:40:47,330
So let's start up
here at the top.

936
00:40:47,330 --> 00:40:50,930
Let's see, list is fine,
get is fine.

937
00:40:50,930 --> 00:40:54,750
Insert, when they add a new
item to the data store, we

938
00:40:54,750 --> 00:40:58,390
need to go ahead and add that
to our search index.

939
00:40:58,390 --> 00:41:01,780
Update, when they update that
beer, we're just going to add

940
00:41:01,780 --> 00:41:05,010
it to the data store, and as
long as the IDs match--

941
00:41:05,010 --> 00:41:06,640
we need to add it
to our index--

942
00:41:06,640 --> 00:41:09,350
and as long as the IDs
match, we'll be OK.

943
00:41:09,350 --> 00:41:10,980
It'll update.

944
00:41:10,980 --> 00:41:15,730
So that way our index will stay
fresh, and then in remove

945
00:41:15,730 --> 00:41:19,170
we had a bug earlier that Ido
so skillfully found at the

946
00:41:19,170 --> 00:41:20,310
last minute.

947
00:41:20,310 --> 00:41:23,240
And in remove we need to go
ahead and make sure we remove

948
00:41:23,240 --> 00:41:26,500
that beer from our
index as well.

949
00:41:26,500 --> 00:41:28,670
So that's that basic thing.

950
00:41:28,670 --> 00:41:31,140
I think we're ready to test
that, so I'll just spin up the

951
00:41:31,140 --> 00:41:34,930
development time server again
as our pattern is,

952
00:41:34,930 --> 00:41:36,340
and then do a search.

953
00:41:36,340 --> 00:41:39,590
So we actually need to add a new
beer to the data store so

954
00:41:39,590 --> 00:41:41,570
that it actually gets indexed.

955
00:41:41,570 --> 00:41:44,080
And notice when I add this, look
down here at the bottom

956
00:41:44,080 --> 00:41:47,820
of the console, you'll see the
search engine actually spin up

957
00:41:47,820 --> 00:41:51,150
because now we're adding it to
an index, so we have to have

958
00:41:51,150 --> 00:41:53,140
that service up and
running as well.

959
00:41:53,140 --> 00:41:56,530
So that search started, so
hopefully that means we should

960
00:41:56,530 --> 00:41:59,670
be able to query for
this and find it.

961
00:41:59,670 --> 00:42:03,080
Oh, actually, we can't query
for it because I didn't add

962
00:42:03,080 --> 00:42:05,940
the query method.

963
00:42:05,940 --> 00:42:07,190
Let's go back.

964
00:42:07,190 --> 00:42:09,560

965
00:42:09,560 --> 00:42:14,960
The whole point of that bit was
to add this search method,

966
00:42:14,960 --> 00:42:20,770
to show you doing custom
methods in endpoints.

967
00:42:20,770 --> 00:42:24,570
So we'll add this, and notice
this is a list method that's

968
00:42:24,570 --> 00:42:27,840
similar, but we're exposing
it as an HTTP get.

969
00:42:27,840 --> 00:42:30,220
So you get to customize the
verb, just like you get to

970
00:42:30,220 --> 00:42:32,290
customize the path.

971
00:42:32,290 --> 00:42:36,010
We pass in a required argument
for the query string, and then

972
00:42:36,010 --> 00:42:38,400
all we're doing, really, is
passing that query string to

973
00:42:38,400 --> 00:42:39,980
our search index.

974
00:42:39,980 --> 00:42:41,950
The search results come back.

975
00:42:41,950 --> 00:42:46,820
And we pull out the index from
the search results and call

976
00:42:46,820 --> 00:42:49,800
that getBeer method that we
defined before, that will call

977
00:42:49,800 --> 00:42:51,490
data store, get our beer.

978
00:42:51,490 --> 00:42:54,310
And then we return the
whole list of those.

979
00:42:54,310 --> 00:42:58,920
OK, so with that we should
be able to--

980
00:42:58,920 --> 00:43:01,950
so we've added that item
to the data store.

981
00:43:01,950 --> 00:43:06,370
Now we need to search for it.

982
00:43:06,370 --> 00:43:10,160
So we'll search for that cool
beer, and search engine will

983
00:43:10,160 --> 00:43:11,860
start again.

984
00:43:11,860 --> 00:43:12,850
Oh, yeah.

985
00:43:12,850 --> 00:43:14,100
OK, tell you what.

986
00:43:14,100 --> 00:43:16,460

987
00:43:16,460 --> 00:43:19,520
Because I had to start and
re-stop, let's skip

988
00:43:19,520 --> 00:43:22,000
ahead to this part.

989
00:43:22,000 --> 00:43:24,640
So we added a couple of
different beers with score ID

990
00:43:24,640 --> 00:43:31,340
11, with a score of 9, so with
various different scores.

991
00:43:31,340 --> 00:43:35,020
And I'll show you searching
for those.

992
00:43:35,020 --> 00:43:38,750
So notice that the search can
be pretty powerful here.

993
00:43:38,750 --> 00:43:41,510
We can say the score
equals something.

994
00:43:41,510 --> 00:43:43,810
So we actually can
do math here.

995
00:43:43,810 --> 00:43:47,030
So I could actually say where
the score is less than this.

996
00:43:47,030 --> 00:43:50,000
So you see this, coupled with
the fact that it actually does

997
00:43:50,000 --> 00:43:53,170
Boolean operators as well, gives
you some really powerful

998
00:43:53,170 --> 00:43:55,890
query capability for
the service.

999
00:43:55,890 --> 00:43:58,080
So with this done, Ido, I think
we're ready for you to

1000
00:43:58,080 --> 00:43:59,170
take it off.

1001
00:43:59,170 --> 00:44:01,150
IDO GREEN: Perfect.

1002
00:44:01,150 --> 00:44:02,140
Excellent.

1003
00:44:02,140 --> 00:44:05,860
So they say that simplicity is
the ultimate sophistication.

1004
00:44:05,860 --> 00:44:08,450
And I think in that case, you
must agree with me that it's

1005
00:44:08,450 --> 00:44:10,405
pretty simple, that
piece of code that

1006
00:44:10,405 --> 00:44:11,580
we have in the client.

1007
00:44:11,580 --> 00:44:14,380
Basically what we're doing here,
you can all see it good?

1008
00:44:14,380 --> 00:44:15,840
I could make it larger.

1009
00:44:15,840 --> 00:44:18,580
You see it well?

1010
00:44:18,580 --> 00:44:20,910
Maybe even larger.

1011
00:44:20,910 --> 00:44:23,030
Basically, we're listening
to the keydown event.

1012
00:44:23,030 --> 00:44:25,890
In our case, we want to catch
the Enter when the user is

1013
00:44:25,890 --> 00:44:28,220
finishing to click
the term in.

1014
00:44:28,220 --> 00:44:31,040
And then we're just taking the
payload, the search term,

1015
00:44:31,040 --> 00:44:34,290
passing it to the search
endpoint, and let's see what's

1016
00:44:34,290 --> 00:44:37,090
going on here when we are
doing it for real.

1017
00:44:37,090 --> 00:44:42,820
So you saw here that
I just put a break

1018
00:44:42,820 --> 00:44:43,700
point in Dev Tools.

1019
00:44:43,700 --> 00:44:46,955
That allows it to now inspect
and see what's going on and

1020
00:44:46,955 --> 00:44:49,420
what we got back from
the server.

1021
00:44:49,420 --> 00:44:52,530
If you hover, you'll see that
we got an array of items.

1022
00:44:52,530 --> 00:44:55,840
We could dive into them, see
exactly what's going on.

1023
00:44:55,840 --> 00:44:58,240
And when we are happy, we could
just release it and see

1024
00:44:58,240 --> 00:45:00,680
that we got the list of
beers that we wanted.

1025
00:45:00,680 --> 00:45:03,560
As Brad mentioned, it's much
more powerful than just that.

1026
00:45:03,560 --> 00:45:06,440
You could do things like that,
and then let's leave it so we

1027
00:45:06,440 --> 00:45:09,630
could run properly, and get all
the beers that are from

1028
00:45:09,630 --> 00:45:12,770
score 3 and above.

1029
00:45:12,770 --> 00:45:16,950
We could do even better than
that and go and play with some

1030
00:45:16,950 --> 00:45:22,210
geo queries, like this one,
which basically will give us a

1031
00:45:22,210 --> 00:45:28,030
view of beers around us, so
around the user of our app.

1032
00:45:28,030 --> 00:45:31,870
Here I cheated a bit, and I just
gave a map that mimics

1033
00:45:31,870 --> 00:45:33,660
what the functionality
will be like.

1034
00:45:33,660 --> 00:45:37,320
But you can how easy it is to
use the search from the client

1035
00:45:37,320 --> 00:45:39,770
and get some sophisticated
queries that you don't need to

1036
00:45:39,770 --> 00:45:42,360
code anything in order to
achieve them, and slice and

1037
00:45:42,360 --> 00:45:46,170
dice the data that you have in
your app in some clever ways,

1038
00:45:46,170 --> 00:45:49,140
thanks to the search
capabilities.

1039
00:45:49,140 --> 00:45:53,590
Now I don't know, I have a few
more requests, but I think

1040
00:45:53,590 --> 00:45:55,360
it's maybe time for
production.

1041
00:45:55,360 --> 00:45:56,460
Maybe we could deploy it.

1042
00:45:56,460 --> 00:45:57,890
BRAD ABRAMS: OK, ready to
deploy to production.

1043
00:45:57,890 --> 00:45:59,270
OK, great.

1044
00:45:59,270 --> 00:46:01,590
So it's very easy to do this.

1045
00:46:01,590 --> 00:46:03,480
We have a set of command line
tools and stuff so you can

1046
00:46:03,480 --> 00:46:04,280
script them.

1047
00:46:04,280 --> 00:46:07,180
But as a developer, it's nice
that right from Eclipse, you

1048
00:46:07,180 --> 00:46:09,330
can go ahead and deploy this.

1049
00:46:09,330 --> 00:46:12,960
So while Ido was talking, I went
and set the application

1050
00:46:12,960 --> 00:46:14,510
ID for this.

1051
00:46:14,510 --> 00:46:17,570
So if you just go to
appengine.com, everybody can

1052
00:46:17,570 --> 00:46:21,405
get 10 free apps that have a
pretty generous free quota,

1053
00:46:21,405 --> 00:46:24,990
and it's free and always
free for that tier.

1054
00:46:24,990 --> 00:46:26,330
So you can go get your ID.

1055
00:46:26,330 --> 00:46:29,570
I got Birra I/O 2012.

1056
00:46:29,570 --> 00:46:31,870
And then you just
click Deploy.

1057
00:46:31,870 --> 00:46:34,230
And what's going to happen
now is it packages your

1058
00:46:34,230 --> 00:46:38,270
application locally and sends
it up to the server for

1059
00:46:38,270 --> 00:46:38,770
deployment.

1060
00:46:38,770 --> 00:46:42,020
And this only takes a max of
two or three minutes over

1061
00:46:42,020 --> 00:46:43,270
normal Wi-Fi.

1062
00:46:43,270 --> 00:46:45,650

1063
00:46:45,650 --> 00:46:46,540
Let's let that go.

1064
00:46:46,540 --> 00:46:47,880
IDO GREEN: Maybe I'll just
show them the Web

1065
00:46:47,880 --> 00:46:48,890
Intents that I forgot.

1066
00:46:48,890 --> 00:46:49,860
BRAD ABRAMS: Oh, sure,
you want to

1067
00:46:49,860 --> 00:46:50,860
switch back to Web Intents?

1068
00:46:50,860 --> 00:46:51,300
OK.

1069
00:46:51,300 --> 00:46:52,580
And by then, this
will be done.

1070
00:46:52,580 --> 00:46:54,460
IDO GREEN: I'm really passionate
about this small

1071
00:46:54,460 --> 00:46:57,935
operation, and I just wanted to
show you how easy it is to

1072
00:46:57,935 --> 00:46:59,130
hook it up to your apps.

1073
00:46:59,130 --> 00:47:02,620
So basically with Web Intent,
we're letting the user choose

1074
00:47:02,620 --> 00:47:05,340
how they want to achieve
an intent in action.

1075
00:47:05,340 --> 00:47:07,720
In our case, let's try
and share our beer.

1076
00:47:07,720 --> 00:47:10,450
So as you can see here, from
Chrome 19 and above it's

1077
00:47:10,450 --> 00:47:12,220
natively in the browser.

1078
00:47:12,220 --> 00:47:16,340
When I'm clicking Share Beer,
I'm getting a few options here

1079
00:47:16,340 --> 00:47:19,560
that I found myself using a lot,
but you could add, and

1080
00:47:19,560 --> 00:47:21,340
there's plenty more
in the Chrome Web

1081
00:47:21,340 --> 00:47:23,000
Store to check around.

1082
00:47:23,000 --> 00:47:26,890
And in my case, let's
see how it's done.

1083
00:47:26,890 --> 00:47:30,460
I just want to send
it through Gmail.

1084
00:47:30,460 --> 00:47:32,490
So you can see the payload, in
my case, it's just the beer

1085
00:47:32,490 --> 00:47:35,910
name, the score, and maybe some
link back to the app.

1086
00:47:35,910 --> 00:47:36,890
Very simple.

1087
00:47:36,890 --> 00:47:41,510
And the power of it is that,
check this set of lines that

1088
00:47:41,510 --> 00:47:43,950
makes our life so much easier.

1089
00:47:43,950 --> 00:47:46,850
So we're gathering in beer
details there, payload that we

1090
00:47:46,850 --> 00:47:48,840
want to send the intent.

1091
00:47:48,840 --> 00:47:52,670
Then we're constructing a new
intent, and it could be share,

1092
00:47:52,670 --> 00:47:53,800
it could be edit a photo.

1093
00:47:53,800 --> 00:47:57,260
So let's say that you want to
let your users edit a photo.

1094
00:47:57,260 --> 00:47:59,060
You don't need to code this
again and again and

1095
00:47:59,060 --> 00:48:00,160
reinvent the wheel.

1096
00:48:00,160 --> 00:48:03,400
You could use other services out
there that are focusing on

1097
00:48:03,400 --> 00:48:06,780
doing this work and excel in
it, and just let the users

1098
00:48:06,780 --> 00:48:07,650
talk to them.

1099
00:48:07,650 --> 00:48:09,410
And then we passing
the beer details.

1100
00:48:09,410 --> 00:48:13,730
And when we're starting the
window.navigator object, we're

1101
00:48:13,730 --> 00:48:16,750
passing the intent, starting the
activity, and the user is

1102
00:48:16,750 --> 00:48:18,580
taking it from there.

1103
00:48:18,580 --> 00:48:22,180
Very simple, very smooth, and of
course, we have JavaScript

1104
00:48:22,180 --> 00:48:23,560
chains to all the
other browsers.

1105
00:48:23,560 --> 00:48:25,490
So in Chrome, it's
coming natively.

1106
00:48:25,490 --> 00:48:27,820
In other browsers, the user
could achieve it with the

1107
00:48:27,820 --> 00:48:29,890
JavaScript chains
that we have.

1108
00:48:29,890 --> 00:48:30,340
BRAD ABRAMS: All right.

1109
00:48:30,340 --> 00:48:31,110
Awesome.

1110
00:48:31,110 --> 00:48:34,680
So that gave me plenty of time
to deploy the application to

1111
00:48:34,680 --> 00:48:37,270
production, just to give you a
sense of what it does, some

1112
00:48:37,270 --> 00:48:38,550
client-side stuff.

1113
00:48:38,550 --> 00:48:41,840
It uploads all the files and
then verifies that it's

1114
00:48:41,840 --> 00:48:45,870
available, updates all the
index, and it's deployed.

1115
00:48:45,870 --> 00:48:48,420
So as soon as it's deployed, the
next thing we wanted to do

1116
00:48:48,420 --> 00:48:49,985
is actually go do some
scalability--

1117
00:48:49,985 --> 00:48:52,780
IDO GREEN: Whoa, don't
do it yet.

1118
00:48:52,780 --> 00:48:53,550
BRAD ABRAMS: Well, whatever.

1119
00:48:53,550 --> 00:48:54,610
What we wanted to do is do some

1120
00:48:54,610 --> 00:48:56,500
scalability testing of it.

1121
00:48:56,500 --> 00:49:00,820
So we used ApacheBench, and this
is just very basic, off

1122
00:49:00,820 --> 00:49:04,560
the cuff scalability to give you
a sense of how this works.

1123
00:49:04,560 --> 00:49:07,710
ApacheBench is a widely
used open source

1124
00:49:07,710 --> 00:49:08,800
tool for doing this.

1125
00:49:08,800 --> 00:49:10,140
So we did 9,000.

1126
00:49:10,140 --> 00:49:16,610
This was on my laptop on our
Wi-Fi network at work, so we

1127
00:49:16,610 --> 00:49:21,610
did 9,000 connections,
100 at a time.

1128
00:49:21,610 --> 00:49:24,720
And you see the results we
got in percentile here.

1129
00:49:24,720 --> 00:49:27,500
So 90% of the requests
came back in

1130
00:49:27,500 --> 00:49:28,590
less than half a second.

1131
00:49:28,590 --> 00:49:29,580
IDO GREEN: It's not showing.

1132
00:49:29,580 --> 00:49:30,080
BRAD ABRAMS: Oh, it's not?

1133
00:49:30,080 --> 00:49:32,010
I'm sorry.

1134
00:49:32,010 --> 00:49:33,230
Great, thank you.

1135
00:49:33,230 --> 00:49:36,840
So now you see that we
used ApacheBench.

1136
00:49:36,840 --> 00:49:40,170
We got 90% of the requests came
back in half a second.

1137
00:49:40,170 --> 00:49:41,830
So that's pretty decent.

1138
00:49:41,830 --> 00:49:44,930
That's pretty good for a sort
of in-the-wild deployment.

1139
00:49:44,930 --> 00:49:47,450
And again, we didn't have to
do anything to make our app

1140
00:49:47,450 --> 00:49:49,000
actually scale that way.

1141
00:49:49,000 --> 00:49:50,910
So the next thing to do, I don't
know if you caught in

1142
00:49:50,910 --> 00:49:54,170
the keynote, we launched a new
sister project to App Engine.

1143
00:49:54,170 --> 00:49:56,180
Does anybody remember
what that's called?

1144
00:49:56,180 --> 00:49:57,180
Compute Engine?

1145
00:49:57,180 --> 00:49:59,260
I don't know if anybody
knows anything

1146
00:49:59,260 --> 00:50:00,630
about our data centers.

1147
00:50:00,630 --> 00:50:02,960
One of the things Google does
pretty well with the data

1148
00:50:02,960 --> 00:50:05,000
centers is networking logic.

1149
00:50:05,000 --> 00:50:07,340
So I thought it would be fun to
get a Compute Engine into

1150
00:50:07,340 --> 00:50:11,080
this and just see how quick that
would be to hit the App

1151
00:50:11,080 --> 00:50:14,750
Engine app from a Compute
Engine instance.

1152
00:50:14,750 --> 00:50:18,300
It turns out they're actually
in different data centers.

1153
00:50:18,300 --> 00:50:20,950
The App Engine app was running
in one data center, and the

1154
00:50:20,950 --> 00:50:22,910
Compute Engine was running
in another one.

1155
00:50:22,910 --> 00:50:26,690
But anyway, it's fun,
nonetheless, to see that 95%

1156
00:50:26,690 --> 00:50:30,860
of the requests came back in
less than seven milliseconds.

1157
00:50:30,860 --> 00:50:32,730
So it's actually pretty fast.

1158
00:50:32,730 --> 00:50:36,270
So if you're doing something,
you want to access your App

1159
00:50:36,270 --> 00:50:38,350
Engine app quickly, this
is the way to do it.

1160
00:50:38,350 --> 00:50:40,435
IDO GREEN: Rank a
lot of beers.

1161
00:50:40,435 --> 00:50:43,370
BRAD ABRAMS: It turns out that
the way this actually works

1162
00:50:43,370 --> 00:50:47,020
with App Engine is a lot of this
is static content coming

1163
00:50:47,020 --> 00:50:51,700
from the HTML app, and that
gets stored in Google's

1164
00:50:51,700 --> 00:50:53,480
distributed cache.

1165
00:50:53,480 --> 00:50:56,110
So it turns out it wasn't
actually hitting my App Engine

1166
00:50:56,110 --> 00:50:57,020
app at all.

1167
00:50:57,020 --> 00:51:00,340
It hits it one time to get the
HTML, and then after that, it

1168
00:51:00,340 --> 00:51:02,380
serves it out of the cache,
and those caches are

1169
00:51:02,380 --> 00:51:04,140
distributed globally.

1170
00:51:04,140 --> 00:51:06,480
And that's available for
all App Engine Apps.

1171
00:51:06,480 --> 00:51:08,170
You sort of get that for free.

1172
00:51:08,170 --> 00:51:10,590
So once we've figured that out,
we were actually playing

1173
00:51:10,590 --> 00:51:12,540
around with this, with different
arguments, had a

1174
00:51:12,540 --> 00:51:14,790
couple of machines playing
around with it just to see

1175
00:51:14,790 --> 00:51:19,440
sort of where we could get
the queries per second.

1176
00:51:19,440 --> 00:51:21,000
Have you seen the App
Engine graphs?

1177
00:51:21,000 --> 00:51:23,460
Like how many simultaneous
requests could we get?

1178
00:51:23,460 --> 00:51:27,950
We got a little crazy with the
ApacheBench tool, and we got

1179
00:51:27,950 --> 00:51:31,670
to 6,000 QPS just
playing around

1180
00:51:31,670 --> 00:51:33,630
with a couple of machines.

1181
00:51:33,630 --> 00:51:36,050
So that's pretty good, and
it's literally the

1182
00:51:36,050 --> 00:51:38,020
code you saw today.

1183
00:51:38,020 --> 00:51:40,980
Again, a lot of the QPS is
actually hitting the HTML

1184
00:51:40,980 --> 00:51:44,840
page, but it's really nice to
be able to know that you're

1185
00:51:44,840 --> 00:51:47,880
working on infrastructure that
you can just play around with

1186
00:51:47,880 --> 00:51:49,920
and get to 6,000 QPS.

1187
00:51:49,920 --> 00:51:53,660
To give you an idea, 6,000 QPS
is like a quarter of a million

1188
00:51:53,660 --> 00:51:55,570
requests a minute.

1189
00:51:55,570 --> 00:51:58,200
So what is that, maybe
a few hundred

1190
00:51:58,200 --> 00:52:00,010
thousand concurrent users?

1191
00:52:00,010 --> 00:52:02,060
So just think about if you're
going to stand up your own

1192
00:52:02,060 --> 00:52:07,550
machine to go serve 100,000
concurrent users, that might

1193
00:52:07,550 --> 00:52:08,190
take you a little while.

1194
00:52:08,190 --> 00:52:10,420
You might have to think about
some sharding and whatever,

1195
00:52:10,420 --> 00:52:14,175
and we've done all that work
for you with App Engine.

1196
00:52:14,175 --> 00:52:15,340
IDO GREEN: So main take aways.

1197
00:52:15,340 --> 00:52:18,935
I think we saw that it's pretty
nice today to be a

1198
00:52:18,935 --> 00:52:21,400
developer in terms of the
development experience.

1199
00:52:21,400 --> 00:52:24,600
With Google App Engine, you can
leverage and tap into the

1200
00:52:24,600 --> 00:52:29,050
infrastructure and write your
own RESTful APIs quite easily.

1201
00:52:29,050 --> 00:52:31,580
One of the nice things is that
not only do you not need to

1202
00:52:31,580 --> 00:52:34,920
think about scalability, you
could focus really on the API.

1203
00:52:34,920 --> 00:52:37,480
The API is, in most of the
cases, the most challenging

1204
00:52:37,480 --> 00:52:39,540
aspect of the system itself.

1205
00:52:39,540 --> 00:52:41,930
So now you could just devote the
vast majority of your time

1206
00:52:41,930 --> 00:52:45,400
to that critical section, and
of course, code it from the

1207
00:52:45,400 --> 00:52:48,730
client side with all the best
practices of HTML5 and the

1208
00:52:48,730 --> 00:52:52,190
newest APIs that are
under your hands.

1209
00:52:52,190 --> 00:52:54,910
And I think we mentioned a few
very important points that I

1210
00:52:54,910 --> 00:52:57,670
would ask people just to keep in
mind when they're building

1211
00:52:57,670 --> 00:53:01,700
their next modern web apps,
mobile or desktop.

1212
00:53:01,700 --> 00:53:03,970
One of the most important
features is, of course, the 60

1213
00:53:03,970 --> 00:53:06,480
frames per second and the
smoothness, and that's coming

1214
00:53:06,480 --> 00:53:09,970
with the option to make
the app work offline.

1215
00:53:09,970 --> 00:53:13,580
And lots of users and lots of
great apps like the Financial

1216
00:53:13,580 --> 00:53:16,770
Times, the New York Times,
Google Docs, Gmail, and so on

1217
00:53:16,770 --> 00:53:18,600
are enjoying it today.

1218
00:53:18,600 --> 00:53:20,740
And in the near future, we'll
see more and more users

1219
00:53:20,740 --> 00:53:21,840
expecting it.

1220
00:53:21,840 --> 00:53:23,540
So that's something
to keep in mind.

1221
00:53:23,540 --> 00:53:25,160
Web Intents, we showed you.

1222
00:53:25,160 --> 00:53:26,570
You have no excuse
not to use it.

1223
00:53:26,570 --> 00:53:28,190
It's so simple and trivial.

1224
00:53:28,190 --> 00:53:31,870
And I would really like to thank
you for coming to hear

1225
00:53:31,870 --> 00:53:35,030
us after the heavy lunch
that we had.

1226
00:53:35,030 --> 00:53:39,810
Both Brad and I will be in the
Sandbox if anyone has more

1227
00:53:39,810 --> 00:53:41,230
questions after we
have, of course,

1228
00:53:41,230 --> 00:53:43,030
the section for questions.

1229
00:53:43,030 --> 00:53:46,590
And as I mentioned before, you
could have all the source code

1230
00:53:46,590 --> 00:53:49,070
of all the examples, just to
play with them and see exactly

1231
00:53:49,070 --> 00:53:53,570
how it's working for you in
this GitHub repository.

1232
00:53:53,570 --> 00:53:55,440
We'll put the slides once--

1233
00:53:55,440 --> 00:53:56,020
BRAD ABRAMS: Oh, goodness.

1234
00:53:56,020 --> 00:53:56,470
I'm sorry.

1235
00:53:56,470 --> 00:53:59,260
You guys gotta help
me with this.

1236
00:53:59,260 --> 00:53:59,570
IDO GREEN: Yeah.

1237
00:53:59,570 --> 00:54:02,090
So you have the link to
the GitHub repository.

1238
00:54:02,090 --> 00:54:03,340
The code is actually there.

1239
00:54:03,340 --> 00:54:07,140

1240
00:54:07,140 --> 00:54:09,710
We'll have all the slides
and the other

1241
00:54:09,710 --> 00:54:12,240
documentation below it.

1242
00:54:12,240 --> 00:54:15,250
And of course, you could try
and test the app itself and

1243
00:54:15,250 --> 00:54:19,930
the endpoint itself
in birra-io2012.

1244
00:54:19,930 --> 00:54:21,590
Hit it as hard as you want.

1245
00:54:21,590 --> 00:54:24,905
We would love to see some
nice graphs on it.

1246
00:54:24,905 --> 00:54:28,550
And of course, check out
the new Endpoint API.

1247
00:54:28,550 --> 00:54:30,210
It's pretty powerful.

1248
00:54:30,210 --> 00:54:33,930
If, by any chance, you didn't
reach to Brad or myself after

1249
00:54:33,930 --> 00:54:36,130
the talk or in the Sandbox,
please feel

1250
00:54:36,130 --> 00:54:38,350
free to use our G+.

1251
00:54:38,350 --> 00:54:40,700
We both would be happy to answer
any questions that you

1252
00:54:40,700 --> 00:54:44,070
might have, or challenges or
problems that you might have

1253
00:54:44,070 --> 00:54:45,220
in the near future.

1254
00:54:45,220 --> 00:54:47,610
So thank you very much, and if
we have questions, we'd be

1255
00:54:47,610 --> 00:54:49,630
happy to take them.

1256
00:54:49,630 --> 00:54:52,240
BRAD ABRAMS: If you enjoyed the
show, we'd love for you to

1257
00:54:52,240 --> 00:54:54,210
vote with your little +1s.

1258
00:54:54,210 --> 00:54:56,050
Ido and I are always looking to
get better, so if you have

1259
00:54:56,050 --> 00:54:58,400
comments, there's the
URL on the back.

1260
00:54:58,400 --> 00:54:58,920
IDO GREEN: Absolutely.

1261
00:54:58,920 --> 00:55:00,010
BRAD ABRAMS: Thank
you very much.

1262
00:55:00,010 --> 00:55:01,260
IDO GREEN: Thank you.

1263
00:55:01,260 --> 00:55:05,050

1264
00:55:05,050 --> 00:55:08,070
BRAD ABRAMS: Should we just
do questions here?

1265
00:55:08,070 --> 00:55:10,460
Any questions?

1266
00:55:10,460 --> 00:55:11,670
IDO GREEN: If you ask
an easy question,

1267
00:55:11,670 --> 00:55:12,480
you're getting a sticker.

1268
00:55:12,480 --> 00:55:14,840
If it's a hard one,
no sticker.

1269
00:55:14,840 --> 00:55:17,410
AUDIENCE: I was wondering if
there's any plans on bringing

1270
00:55:17,410 --> 00:55:21,500
client-side adaptive images
into App Engine?

1271
00:55:21,500 --> 00:55:23,490
IDO GREEN: Do you
want to take it?

1272
00:55:23,490 --> 00:55:25,770
BRAD ABRAMS: What do you mean
by adaptive images?

1273
00:55:25,770 --> 00:55:29,060
AUDIENCE: Serving up different
resolutions for the multitude

1274
00:55:29,060 --> 00:55:30,830
of devices we have.

1275
00:55:30,830 --> 00:55:31,180
BRAD ABRAMS: Yep.

1276
00:55:31,180 --> 00:55:31,510
Yep.

1277
00:55:31,510 --> 00:55:32,690
We have heard that.

1278
00:55:32,690 --> 00:55:34,810
There's nothing that I have
right now for you.

1279
00:55:34,810 --> 00:55:38,370
IDO GREEN: What you can
use today is just--

1280
00:55:38,370 --> 00:55:41,210
you need to do the leg work,
but we have, of course, the

1281
00:55:41,210 --> 00:55:44,165
API to use it, but you need
to do the leg work for it.

1282
00:55:44,165 --> 00:55:44,640
AUDIENCE: OK.

1283
00:55:44,640 --> 00:55:45,590
Thanks.

1284
00:55:45,590 --> 00:55:46,660
IDO GREEN: And now you
could get a sticker.

1285
00:55:46,660 --> 00:55:47,100
BRAD ABRAMS: Yes.

1286
00:55:47,100 --> 00:55:47,570
Please.

1287
00:55:47,570 --> 00:55:49,740
IDO GREEN: It wasn't hard.

1288
00:55:49,740 --> 00:55:50,310
Yes, please?

1289
00:55:50,310 --> 00:55:53,400
AUDIENCE: Do you guys have any
best practice recommendations?

1290
00:55:53,400 --> 00:55:55,860
I saw you get bit by it a few
times where when you're in an

1291
00:55:55,860 --> 00:56:00,370
application going page by page,
wizardy style things,

1292
00:56:00,370 --> 00:56:04,510
you have to wait until the
data store has your data

1293
00:56:04,510 --> 00:56:07,850
before you can then re-query
it back in page two.

1294
00:56:07,850 --> 00:56:09,660
And like you said, oh,
it's not there yet.

1295
00:56:09,660 --> 00:56:11,850
You have to wait a second
and try it again.

1296
00:56:11,850 --> 00:56:13,990
When you're in an application,
is there a better way or a

1297
00:56:13,990 --> 00:56:18,060
notifying way to then be told
my data's there, now I can

1298
00:56:18,060 --> 00:56:18,510
move forward?

1299
00:56:18,510 --> 00:56:19,100
IDO GREEN: Yeah, absolutely.

1300
00:56:19,100 --> 00:56:22,670
And actually, that's one of the
benefits of building your

1301
00:56:22,670 --> 00:56:25,340
app from the ground up
with offlink in mind.

1302
00:56:25,340 --> 00:56:28,875
Because then you'll know that
you have the most common data

1303
00:56:28,875 --> 00:56:31,390
that the user is using, and
you could make a nice

1304
00:56:31,390 --> 00:56:34,760
heuristic about what you will
want next and just fetch it

1305
00:56:34,760 --> 00:56:36,500
immediately from the
local storage.

1306
00:56:36,500 --> 00:56:39,200
And that's actually why we see
lots of apps that are really

1307
00:56:39,200 --> 00:56:41,820
snappy and really fast, because
they don't need to do

1308
00:56:41,820 --> 00:56:44,460
the round trip to the server and
fetch the information in

1309
00:56:44,460 --> 00:56:45,195
order to show it.

1310
00:56:45,195 --> 00:56:46,720
They already have it locally.

1311
00:56:46,720 --> 00:56:48,300
AUDIENCE: So you're saying that
you just keep it locally

1312
00:56:48,300 --> 00:56:51,560
and don't actually put it in
the data store until later?

1313
00:56:51,560 --> 00:56:51,930
IDO GREEN: Yeah.

1314
00:56:51,930 --> 00:56:54,760
So do everything locally first,
and then sync it when

1315
00:56:54,760 --> 00:56:56,340
you have time for it.

1316
00:56:56,340 --> 00:56:57,780
And when you have the right
connection, the right

1317
00:56:57,780 --> 00:56:58,320
bandwidth--

1318
00:56:58,320 --> 00:57:02,270
I saw some modern web apps
actually checking how good the

1319
00:57:02,270 --> 00:57:03,240
connection is.

1320
00:57:03,240 --> 00:57:05,540
There are a few JavaScript
libraries that let you do that

1321
00:57:05,540 --> 00:57:08,130
and then doing the syncing
just in the right time.

1322
00:57:08,130 --> 00:57:09,620
So that's one thing.

1323
00:57:09,620 --> 00:57:13,170
The other thing is that with
Google JavaScript API library,

1324
00:57:13,170 --> 00:57:15,210
you could tap and do
batch requests.

1325
00:57:15,210 --> 00:57:19,190
So you, using a leveraging one
connection with multiple

1326
00:57:19,190 --> 00:57:20,820
requests on top of it,
and that's of course

1327
00:57:20,820 --> 00:57:22,070
working much better.

1328
00:57:22,070 --> 00:57:24,360

1329
00:57:24,360 --> 00:57:26,020
You can have a sticker.

1330
00:57:26,020 --> 00:57:27,930
It was hard, but we made it.

1331
00:57:27,930 --> 00:57:31,020
AUDIENCE: How do you handle
security and privacy, in

1332
00:57:31,020 --> 00:57:33,030
particular, like in a health
care setting, if you're

1333
00:57:33,030 --> 00:57:34,695
writing a health care app,
keeping with regulations and

1334
00:57:34,695 --> 00:57:35,350
all that sort of stuff?

1335
00:57:35,350 --> 00:57:36,910
IDO GREEN: That's a great
question, so you'll definitely

1336
00:57:36,910 --> 00:57:38,310
get a sticker.

1337
00:57:38,310 --> 00:57:40,560
We haven't shown it, because
we didn't have time, but

1338
00:57:40,560 --> 00:57:42,500
authentication is coming
out of the box.

1339
00:57:42,500 --> 00:57:45,200
So it's perfect, and the
question is actually amazingly

1340
00:57:45,200 --> 00:57:48,610
good, because in other cases you
need to work pretty hard

1341
00:57:48,610 --> 00:57:50,370
to make your app secure.

1342
00:57:50,370 --> 00:57:54,950
And in our case, both the
endpoint is supporting the

1343
00:57:54,950 --> 00:57:58,770
cross-region sharing resources
and authentication

1344
00:57:58,770 --> 00:57:59,520
just out of the box.

1345
00:57:59,520 --> 00:58:02,240
So we'll have in the code,
actually, in GitHub, and you

1346
00:58:02,240 --> 00:58:06,290
could see how easy it is to
have, let's say, authenticated

1347
00:58:06,290 --> 00:58:07,720
comments or beers.

1348
00:58:07,720 --> 00:58:10,290
So only users that are
authenticated could actually

1349
00:58:10,290 --> 00:58:11,340
work with the app.

1350
00:58:11,340 --> 00:58:14,200
So in terms of security, you're
getting quite nice

1351
00:58:14,200 --> 00:58:16,020
things that have already
been done for you.

1352
00:58:16,020 --> 00:58:19,050
So you don't need to work
for them yourself.

1353
00:58:19,050 --> 00:58:20,880
BRAD ABRAMS: I can show
you an example.

1354
00:58:20,880 --> 00:58:26,670
AUDIENCE: So behind the scenes,
is Google indexing

1355
00:58:26,670 --> 00:58:29,490
patient data or whatever
information I'm storing?

1356
00:58:29,490 --> 00:58:30,090
BRAD ABRAMS: No.

1357
00:58:30,090 --> 00:58:30,550
No.

1358
00:58:30,550 --> 00:58:32,390
Let me do this one.

1359
00:58:32,390 --> 00:58:35,600
It's very clear in the App
Engine terms of service, we

1360
00:58:35,600 --> 00:58:38,180
can't even see the data that
you're putting in App Engine.

1361
00:58:38,180 --> 00:58:40,880
The only thing we can do with
the data that you're putting

1362
00:58:40,880 --> 00:58:43,620
in App Engine is serve
it back to you.

1363
00:58:43,620 --> 00:58:46,600
So we're not indexing
it in any way.

1364
00:58:46,600 --> 00:58:48,230
It is completely your data.

1365
00:58:48,230 --> 00:58:48,750
AUDIENCE: OK.

1366
00:58:48,750 --> 00:58:49,360
Thanks.

1367
00:58:49,360 --> 00:58:50,720
IDO GREEN: Sure.

1368
00:58:50,720 --> 00:58:52,170
BRAD ABRAMS:OK, one
more, probably.

1369
00:58:52,170 --> 00:58:53,300
Yeah.

1370
00:58:53,300 --> 00:58:54,720
You get to be the
last question.

1371
00:58:54,720 --> 00:58:55,110
AUDIENCE: Right on.

1372
00:58:55,110 --> 00:58:57,310
Hopefully it's an easy one,
and I'll get a sticker.

1373
00:58:57,310 --> 00:58:58,130
IDO GREEN: I hope so

1374
00:58:58,130 --> 00:59:00,660
AUDIENCE: Web sockets
on App Engine.

1375
00:59:00,660 --> 00:59:02,840
When is that gonna
be available?

1376
00:59:02,840 --> 00:59:04,980
BRAD ABRAMS: Stay tuned.

1377
00:59:04,980 --> 00:59:06,690
IDO GREEN: I'm holding
my fingers as well.

1378
00:59:06,690 --> 00:59:09,370
BRAD ABRAMS: Nothing's
due out right now.

1379
00:59:09,370 --> 00:59:10,680
That was so easy.

1380
00:59:10,680 --> 00:59:12,730
AUDIENCE: That was
a short one.

1381
00:59:12,730 --> 00:59:16,510
There are a few annotation
APIs like JAX-RS or

1382
00:59:16,510 --> 00:59:17,140
something like that.

1383
00:59:17,140 --> 00:59:22,990
I wanted to ask you what is @API
method, and what about

1384
00:59:22,990 --> 00:59:24,400
existing standards?

1385
00:59:24,400 --> 00:59:25,480
BRAD ABRAMS: So we
discussed this.

1386
00:59:25,480 --> 00:59:30,760
We decided @API, @API methods
are ones that we created for

1387
00:59:30,760 --> 00:59:33,350
our cloud endpoint, because
there's a lot of things that's

1388
00:59:33,350 --> 00:59:34,700
very custom to that.

1389
00:59:34,700 --> 00:59:37,650
We definitely think it's
possible to layer on top of

1390
00:59:37,650 --> 00:59:40,110
that a standards-based
approach.

1391
00:59:40,110 --> 00:59:42,170
If somebody's interested in
doing an open source project

1392
00:59:42,170 --> 00:59:44,640
around that or what not, I'd
be happy to discuss some of

1393
00:59:44,640 --> 00:59:46,260
the details with you.

1394
00:59:46,260 --> 00:59:47,380
AUDIENCE: Thank you.

1395
00:59:47,380 --> 00:59:48,010
IDO GREEN: Thank
you very much.

1396
00:59:48,010 --> 00:59:48,260
BRAD ABRAMS: Cool.

1397
00:59:48,260 --> 00:59:48,470
Great.

1398
00:59:48,470 --> 00:59:49,720
Thank you, guys.

1399
00:59:49,720 --> 00:59:50,230

