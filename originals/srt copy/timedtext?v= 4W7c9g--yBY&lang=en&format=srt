1
00:00:00,000 --> 00:00:04,690
>> KAY: So, I've talked a little bit before
about UIs. So, let's talk about--back a little

2
00:00:04,690 --> 00:00:09,370
bit about the UI philosophy behind Chrome
and how it applies to extensions. So, as I

3
00:00:09,370 --> 00:00:14,150
said, we're aiming for a very streamlined
and integrated user experience. The phrase

4
00:00:14,150 --> 00:00:19,330
that Brian mentioned earlier is that we use
a lot inside the team is “Content, not Chrome,”

5
00:00:19,330 --> 00:00:23,620
what that means is that we want people to
be able to focus on the content of the Web.

6
00:00:23,620 --> 00:00:27,580
I mean, when people use a Web browser they
are interested in getting to the Web. They

7
00:00:27,580 --> 00:00:31,480
don't care about the Web browser; really that's
just window dressing. And so, we'd like that

8
00:00:31,480 --> 00:00:37,359
to disappear in to the background as much
as possible. So, these also apply--this philosophy

9
00:00:37,359 --> 00:00:42,609
also applies the types of extensions that
we think about that we want to enable. Chrome

10
00:00:42,609 --> 00:00:47,280
Extension should be more about helping you
discover content on the Web, or helping integrate

11
00:00:47,280 --> 00:00:54,280
content in with the browser better and that
sort of thing. So, let's see, let's talk about

12
00:00:57,019 --> 00:01:01,819
the some of the surfaces--we already talked
about the browser action a little bit, but

13
00:01:01,819 --> 00:01:05,659
we only touched on one of the basic features,
which is just having an icon that you click

14
00:01:05,659 --> 00:01:09,270
on and an action happens. We actually packed
a bunch of other little features here. If

15
00:01:09,270 --> 00:01:13,920
you look at the Gmail Icon he’s got there,
you can see there's a little counter in the

16
00:01:13,920 --> 00:01:18,659
corner. That's dynamic. It's overlaid on top
of the icons that we compute, so you can set

17
00:01:18,659 --> 00:01:23,149
the color and put some text in there and rotate
through. So, in this case, it's really useful

18
00:01:23,149 --> 00:01:28,990
for showing the number of unread messages.
Also, that image that the icon itself is totally

19
00:01:28,990 --> 00:01:34,180
dynamic. So, you can, you know, animate through
a sequence of images if you'd like. And you

20
00:01:34,180 --> 00:01:41,180
can even do that completely well and continuously
in some cases. In this case, actually, this

21
00:01:42,210 --> 00:01:48,130
isn't like a pre-computed set of static images.
These are done generated on the fly dynamically

22
00:01:48,130 --> 00:01:52,780
with the Canvas object from the background
page. So, we have a single bitmap and it's

23
00:01:52,780 --> 00:01:59,780
rotating it through and setting it down. In
addition, browser actions can have a pop-up.

24
00:02:00,070 --> 00:02:05,340
What a pop-up is it’s just an HTML content
that is sized dynamically or automatically

25
00:02:05,340 --> 00:02:08,780
in this little bubble that’s attached in
the bottom. So, you could see when he clicks

26
00:02:08,780 --> 00:02:12,730
on one of the stories and then it expands,
the bubble expands with it. We dynamically

27
00:02:12,730 --> 00:02:18,709
sized it based on the content and in Real-Time.
Now, this is useful for more than just wheezy

28
00:02:18,709 --> 00:02:23,599
animation. This is also really useful for
things like localization. You know, you might

29
00:02:23,599 --> 00:02:27,890
have a word that in Chinese only two characters
and in German are fifty characters. I'm trying

30
00:02:27,890 --> 00:02:32,629
to design a UI, a size, and all that layout
that works well in all those environments

31
00:02:32,629 --> 00:02:37,780
is pretty hard. So, having to size it dynamically
for you is going to be a real time saver for

32
00:02:37,780 --> 00:02:42,950
the developers. Another surface we have is
similar to a browser action. We call it a

33
00:02:42,950 --> 00:02:48,870
“Page Action.” Page Actions appear instead
in the omnibox rather than in the toolbar

34
00:02:48,870 --> 00:02:54,590
there. They have allotted the same features,
the dynamic icon, they have pop-ups. But the

35
00:02:54,590 --> 00:02:59,950
thing that's different about them is that
they come and go based on the content of the

36
00:02:59,950 --> 00:03:03,840
page. A browser action is meant to be a permanent
part of the browser UI, something that’s

37
00:03:03,840 --> 00:03:07,750
always balanced, and something that will work
all the time. Whereas the Page Action says,

38
00:03:07,750 --> 00:03:11,030
“Well, let me look at the content of the
page. And if it's appropriate, I'll show it

39
00:03:11,030 --> 00:03:17,950
myself.” In this case, this Netvibes extension
detects RSS feeds on the page and only if

40
00:03:17,950 --> 00:03:24,950
there's an RSS feed does it show the icon.
There's one more surface that is I sometimes

41
00:03:26,430 --> 00:03:33,430
forget because it's so--it's sort of the ideal
minimalist surface, which is the page itself.

42
00:03:33,900 --> 00:03:39,120
So, we have a functionality called Content
Scripts, which allows you to inject JavaScript

43
00:03:39,120 --> 00:03:44,360
and CSS into the page itself and modify its
contents, maybe doing overlays or highlighting

44
00:03:44,360 --> 00:03:50,590
stuff. And this is an incredibly powerful
feature and allows you to add UIs. So, let's

45
00:03:50,590 --> 00:03:53,939
take a look at a simple example, something
you may have seen before. Here's Google Image

46
00:03:53,939 --> 00:03:59,549
Search and this is just it with no extension
hooked in, but I'd like--I got an idea for

47
00:03:59,549 --> 00:04:03,700
an extension that will take all of these images
and turn it into a nice pretty slide show

48
00:04:03,700 --> 00:04:06,739
for me, so...
>> BOODMAN: That is a good idea.

49
00:04:06,739 --> 00:04:09,060
>> KAY: Yeah, let's--well, good thing we have
thought about it before and I already have

50
00:04:09,060 --> 00:04:12,209
it. So, let's just enable that one and reload
the page.

51
00:04:12,209 --> 00:04:17,630
>> BOODMAN: Boom.
>> KAY: Okay. So, you see at the bottom here

52
00:04:17,630 --> 00:04:21,359
a little sliding scroll view appears and there
are some nice little animations that you hover

53
00:04:21,359 --> 00:04:25,130
over the individual images. And now, if you
click on the one that you want, you see it

54
00:04:25,130 --> 00:04:31,710
as a nice fade in transition of the martial
arts kittens there. And as it goes pages between

55
00:04:31,710 --> 00:04:38,710
them, it shows your nice animated slide show.
And the--can never go wrong with kittens.

56
00:04:39,500 --> 00:04:46,500
So, okay. So, those are the UI surfaces that
we have exposed. We did spend a fair amount

57
00:04:52,360 --> 00:04:59,300
of time as well on the management and administrative
UI of the extension system as well. We wanted

58
00:04:59,300 --> 00:05:04,190
it to be as frictionless and out of the way
as it could be. So, install, uninstall, auto

59
00:05:04,190 --> 00:05:08,130
update, we don't want to barrage you with
a bunch of dialogues, a bunch of questions

60
00:05:08,130 --> 00:05:14,020
as you're going along. So, basically, it's
one or two clicks to install, the browser

61
00:05:14,020 --> 00:05:20,520
doesn’t have to restart, you don't have
to, you know, God forbid, restart your computer,

62
00:05:20,520 --> 00:05:27,500
you know, it just works for both uninstall
and install. And update is totally silent;

63
00:05:27,500 --> 00:05:32,520
it uses the same technology that we use for
Chrome to keep itself up-to-date and can happen

64
00:05:32,520 --> 00:05:35,560
live and in place while you're using the browser
even.

65
00:05:35,560 --> 00:05:39,180
>> BOODMAN: So, you wanted to show a demo?
>> KAY: Yeah, yeah, why don't we install one

66
00:05:39,180 --> 00:05:46,180
of those and check it out. So, here's one
of our samples that we had from way back when,

67
00:05:49,580 --> 00:05:54,069
little Page--a Page Action that shows the
map. And it tells you in the dialogue what

68
00:05:54,069 --> 00:05:57,940
this extension can do. And this one, it's
injecting Content Script in the page, so it

69
00:05:57,940 --> 00:06:04,410
tells you it has access to the pages that
you're surfing to, so you install. And as

70
00:06:04,410 --> 00:06:07,979
the Page Action, remember I said that the
Page Actions come and go. This one is based

71
00:06:07,979 --> 00:06:11,889
on whether there's an address on the page
or not, this page doesn't have an address

72
00:06:11,889 --> 00:06:18,130
on it. So, we actually at install time, always
show the icon briefly, so you know where the

73
00:06:18,130 --> 00:06:21,830
UI is going to appear. So, it's not a mystery,
so you don’t--so you know what to expect,

74
00:06:21,830 --> 00:06:26,509
and a little explanation about which extension
just got installed and how to get back and

75
00:06:26,509 --> 00:06:33,509
how to uninstall if you'd like. So then it
disappears and we're done. Okay. So, as I

76
00:06:35,880 --> 00:06:42,090
mentioned before, speed is really important
to the Chrome team. It's something that we

77
00:06:42,090 --> 00:06:46,680
think about in almost everything we do. We've
got performance tests for most of the code

78
00:06:46,680 --> 00:06:52,050
in the project. And the idea is that every
time that the developer checks in code, these

79
00:06:52,050 --> 00:06:56,780
performance tests run and we can catch when
things slow down as a result and fix them

80
00:06:56,780 --> 00:07:02,970
before they get released to the public. Extensions
are no different. Basically, we wrote some

81
00:07:02,970 --> 00:07:08,789
tests that installed 50 little extensions
and SAJA that affected startup time and page

82
00:07:08,789 --> 00:07:13,629
load time as we cycle through a whole bunch
of different pages from our sample set. And

83
00:07:13,629 --> 00:07:19,280
when--so, we can catch these things when it
regresses, but it--in addition to catching

84
00:07:19,280 --> 00:07:23,979
regressions, it also allows us to measure
experiments. Things what we think will improve

85
00:07:23,979 --> 00:07:30,979
things. So, for awhile while we're developing,
Content Scripts did slow down page load time

86
00:07:31,629 --> 00:07:35,530
a little bit, especially if you have a lot
of them. And one of our engineers, Anthony,

87
00:07:35,530 --> 00:07:40,550
had a great idea for how to make that faster
and Aaron knocked out a quick test for it.

88
00:07:40,550 --> 00:07:46,210
And this is actually a real graph from our
test when that happened. And you can see that

89
00:07:46,210 --> 00:07:51,860
prior to this, the green line was much slower
than the blue one, which is with the--just

90
00:07:51,860 --> 00:07:56,539
one Content Script installed and--but after
the fix, it went down to, basically, being

91
00:07:56,539 --> 00:08:01,960
about the same. So, it's--this sort of Real-Time,
very fast turn around in performance testing

92
00:08:01,960 --> 00:08:07,930
is really important to us. The other reason
why extensions perform really well in Chrome

93
00:08:07,930 --> 00:08:14,909
it's because of our multiprocessor architecture.
So, if you're looking in Chrome’s Task Manager,

94
00:08:14,909 --> 00:08:20,400
this shows you what all the processes are
that in use by Chrome. In addition to every

95
00:08:20,400 --> 00:08:24,949
Tab being a process, every extension is also
a process. So, it's isolated from the browser

96
00:08:24,949 --> 00:08:30,569
and isolated from each other. But this means
is that one poorly behaving extension doesn't

97
00:08:30,569 --> 00:08:34,690
slow down the browser. The browser can run
independently. It doesn't slow down other

98
00:08:34,690 --> 00:08:39,700
pages. It doesn't slow down other extensions.
So, the demo of this, we're going to install

99
00:08:39,700 --> 00:08:43,800
or enable them, a badly behaving extension.
This extension is just going to spin the CPU

100
00:08:43,800 --> 00:08:49,440
as fast as it can. And try to suck up all
the resources, this would normally, you know,

101
00:08:49,440 --> 00:08:56,070
bring, you know, bring your system to a halt,
but let's see what it does to Chrome. Now,

102
00:08:56,070 --> 00:09:00,420
he has enabled it. It's there. But you could
see that he can drag the tabs around. Everything

103
00:09:00,420 --> 00:09:04,410
is still animating very smoothly. He can pull
out the tab. He can scroll around and read,

104
00:09:04,410 --> 00:09:07,760
and do what he needs to do. And it doesn't
look like anything is going on. But let's

105
00:09:07,760 --> 00:09:12,190
take a look and see what's happening. So,
if he brings out the task manager again, you

106
00:09:12,190 --> 00:09:17,470
can see there's just one extension there that's
taking up 50% of the CPU. It's only 50% not

107
00:09:17,470 --> 00:09:21,250
100 because I think his laptop is dual core.
So it's hitting one of his cores completely.

108
00:09:21,250 --> 00:09:22,930
>> BOODMAN: I should use Web Workers then
I could use both.

109
00:09:22,930 --> 00:09:29,930
>> KAY: Yeah, it's true. I should have thought
of that, man. So anyway, it sounds great.

110
00:09:30,420 --> 00:09:34,000
The browser is still interactive but he is
on a laptop and it's probably getting warm

111
00:09:34,000 --> 00:09:38,220
about now. You can hear his fan turning on.
So it'd be good if he could stop the offending

112
00:09:38,220 --> 00:09:43,060
extension. So, one way you can do it is in
the task manager, you can just kill it. You

113
00:09:43,060 --> 00:09:47,070
see something that's, you know, acting badly.
You can always just kill it in Chrome and

114
00:09:47,070 --> 00:09:50,200
the browser will keep going, that's fine.
But in this case, I think it’s better for

115
00:09:50,200 --> 00:09:55,930
us to just uninstall it and get rid of the
bad actor. So, let's just get rid of it, and

116
00:09:55,930 --> 00:10:02,930
there it goes. It’s all done. Okay. So,
let's talk a little bit about security. Extensions

117
00:10:07,920 --> 00:10:11,560
have access to what you're doing with the
browser. So, it's really important that we

118
00:10:11,560 --> 00:10:16,330
build security in from the beginning. Really
think this through. We worked pretty closely

119
00:10:16,330 --> 00:10:19,600
with the Security Researcher for Berkeley
named Adam Barth, who works with us on and

120
00:10:19,600 --> 00:10:25,900
off in the Chrome project to help really build
something robust. And we're really proud that

121
00:10:25,900 --> 00:10:30,750
he just published a paper recently about our
security model. And we think it's going to

122
00:10:30,750 --> 00:10:36,920
be received pretty well. When we were thinking
about the model, we really thought about two

123
00:10:36,920 --> 00:10:41,360
different use--two different threats that
we were trying to deal with. So, there's one

124
00:10:41,360 --> 00:10:45,720
threat, which is if there are buggy extensions
out there. They are written by well-intentioned

125
00:10:45,720 --> 00:10:51,030
people. They're not trying to do harm to you,
but they have bugs. And because of those bugs,

126
00:10:51,030 --> 00:10:55,860
maybe they could be exploited by the attacker.
The other case is that you are an actively

127
00:10:55,860 --> 00:10:59,700
hostile attacker, somebody who is really trying
to do harm and trick you into downloading

128
00:10:59,700 --> 00:11:04,610
a bad code. Now, we spent more of our time
on the first case. The reason we did this

129
00:11:04,610 --> 00:11:09,450
is because far and away, this is the most
common problem in security on the net right

130
00:11:09,450 --> 00:11:14,050
now. Is that, you have people who write, you
know, they're writing code as a hobby, you

131
00:11:14,050 --> 00:11:18,300
know, or it's--they're not security experts
to begin with, but they wrote something that

132
00:11:18,300 --> 00:11:24,380
got really popular. And somebody comes along
and exploits the security holes that it has.

133
00:11:24,380 --> 00:11:28,890
Security is really hard, so, you know, we
all write bugs. Software isn't perfect. Although,

134
00:11:28,890 --> 00:11:35,250
I should say I'm sure nobody in this room
writes bugs but, you know, but it does happen.

135
00:11:35,250 --> 00:11:40,390
So, how do we deal with those bugs? Well,
we got a few strategies for how to prevent

136
00:11:40,390 --> 00:11:45,770
problems from happening. First, we use the
principle of least privileged. What this means

137
00:11:45,770 --> 00:11:50,390
is that extensions only can do the minimum
that they need to do in order to do their

138
00:11:50,390 --> 00:11:55,380
job. They declare upfront what permissions
they need, what host they need to talk to,

139
00:11:55,380 --> 00:11:59,950
which browser APIs they want to use, and they
have to put that in their manifest. Uninstall

140
00:11:59,950 --> 00:12:05,860
time as a user you can see what does this
extension do and know that it should never

141
00:12:05,860 --> 00:12:09,990
be able to do more than that. That even if
it has a bug that an attacker won't be able

142
00:12:09,990 --> 00:12:14,650
to trick it into doing something else. We
also used a console called privilege separation.

143
00:12:14,650 --> 00:12:19,770
This is taking advantage of our multi-process
architecture and saying that the lower privileged

144
00:12:19,770 --> 00:12:24,060
extension processes are separate from the
higher privileged browser process. So, that

145
00:12:24,060 --> 00:12:28,360
means that those higher privileges can't leak
down into the extension, that even if, again,

146
00:12:28,360 --> 00:12:35,360
if it has a hole, it can't get access to these
extra things. So, I talked a little bit before

147
00:12:35,580 --> 00:12:42,210
about Content Scripts. Now, Content Scripts
are--as those of you who are familiar with

148
00:12:42,210 --> 00:12:46,570
Greasemonkey and the related feature user
scripts are aware of are very powerful things.

149
00:12:46,570 --> 00:12:50,790
And they have the potential of being kind
of dangerous as well. They can potentially

150
00:12:50,790 --> 00:12:56,450
break the page that they're injecting into,
or they can actually accidentally grant the

151
00:12:56,450 --> 00:13:02,510
page more privileges than the page originally
should have had. So, we protect against this

152
00:13:02,510 --> 00:13:06,820
using a new technology what we call “isolated
worlds.” What an isolated world is, is a

153
00:13:06,820 --> 00:13:11,490
way of separating the two things. We have
a separate context that the JavaScript from

154
00:13:11,490 --> 00:13:15,100
the Content Script runs in and it keeps it
separate from other Content Scripts and from

155
00:13:15,100 --> 00:13:20,110
the page itself. So, the variable names and
the functions, they don't interfere with each

156
00:13:20,110 --> 00:13:24,510
other. And the page can't even find or get
access to the variables and the functions

157
00:13:24,510 --> 00:13:31,510
inside the Content Script. Finally, when those
bugs do happen, it's important that the developer

158
00:13:32,370 --> 00:13:38,110
be able to push out auto-updates as quickly
as they can. As I said before, extensions

159
00:13:38,110 --> 00:13:42,560
use exactly the same auto-update mechanism
that Chrome uses itself. It's been hugely

160
00:13:42,560 --> 00:13:46,690
successful in helping us mitigate problem,
you know, fix security problem very quickly

161
00:13:46,690 --> 00:13:51,700
for Chrome. And when they've come up, we push
out results and get people updated within

162
00:13:51,700 --> 00:13:56,190
hours or days. And the same thing is available
now to all extension developers and that's

163
00:13:56,190 --> 00:14:01,680
built into the product. Also, the extensions
are all signed with public photography (ph).

164
00:14:01,680 --> 00:14:07,480
So, that ensures that only the author of the
extension can push out updates to it. So,

165
00:14:07,480 --> 00:14:11,020
let's talk a little bit about the hostile
case again. As I've said, we're more concerned

166
00:14:11,020 --> 00:14:17,770
about the--about the buggy case but--because
in the end, extensions are going to be powerful

167
00:14:17,770 --> 00:14:24,600
software, and you should only install them
from people you trust. Somebody could install

168
00:14:24,600 --> 00:14:27,020
something, it does something. You couldn’t
install something that would do something

169
00:14:27,020 --> 00:14:33,420
bad, but we do protect you from a certain
level of these problems. One way is using

170
00:14:33,420 --> 00:14:39,650
the Sandbox. So, take our multi-process architecture.
So, each extension has its own process and

171
00:14:39,650 --> 00:14:44,610
just like normal Chrome tabs, these processes
are Sandboxed. This means we're using the

172
00:14:44,610 --> 00:14:49,480
operating--underlying operating system functionality
to limit its functionality. So, an extension

173
00:14:49,480 --> 00:14:54,540
process can really only do what the browser
gave it permission to do to begin with. And

174
00:14:54,540 --> 00:14:57,800
this means it can't talk to the network. It
can't talk to the file. It can't talk to the

175
00:14:57,800 --> 00:15:03,080
registry. It can't do any of the things which
would let it be become really bad and persistent

176
00:15:03,080 --> 00:15:08,370
in your machine after the fact. You can always
uninstall an extension when it’s misbehaving.

177
00:15:08,370 --> 00:15:11,980
Finally, if a bad extension does make it down
for a while and somebody reports it to us,

178
00:15:11,980 --> 00:15:17,570
we have the ability to blacklist that extension
and disable it after the fact. So, when that

179
00:15:17,570 --> 00:15:23,120
happens, people who mistakenly installed this
bad extension will have it disabled and few

180
00:15:23,120 --> 00:15:30,120
people in the future won't be able to install
it. So we have a pretty small set of designed

181
00:15:31,550 --> 00:15:36,130
principles but we think about them in everything
we do in the Chrome Team. And when you applied

182
00:15:36,130 --> 00:15:40,940
them to the extensions project, I think we
were able to build a pretty robust, easy to

183
00:15:40,940 --> 00:15:43,310
use platform that--it's a lot of fun to use.

