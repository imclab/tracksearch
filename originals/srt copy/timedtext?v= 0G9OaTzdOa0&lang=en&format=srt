1
00:00:04,299 --> 00:00:05,109
>>Akshay Kannan: Hi, everyone.
Cool, the mic works.

2
00:00:05,109 --> 00:00:07,839
Good afternoon, everyone. Are you guys excited
for the last session of the day?

3
00:00:07,839 --> 00:00:12,619
[ Cheering ].
>>Akshay Kannan: All right. My name is Akshay

4
00:00:12,619 --> 00:00:15,869
Kannan, and I'm a PM on the project.
>>Yuri Dolgov: And I'm Yuri Dolgov, and I'm

5
00:00:15,869 --> 00:00:18,890
software engineer on the project.
>>Akshay Kannan: And today we're going to

6
00:00:18,890 --> 00:00:23,130
talking to you about Google Cloud Print and
the future of printing. So real quick just

7
00:00:23,130 --> 00:00:26,890
to give you an outline of the presentation,
we'll start with an introduction, explain

8
00:00:26,890 --> 00:00:30,560
what Google Cloud Print is. We'll talk about
how you can integrate with our application

9
00:00:30,560 --> 00:00:35,050
both to print from as well as receive print
jobs. We'll talk about some of the formats

10
00:00:35,050 --> 00:00:40,000
we support and finally we'll talk about our
future plans and where we're heading going

11
00:00:40,000 --> 00:00:43,480
forward.
So real quick just to get a show of hands,

12
00:00:43,480 --> 00:00:47,390
how many of you guys in the audience have
heard of Google Cloud Print prior to Google

13
00:00:47,390 --> 00:00:51,969
I/O?
Awesome. Pretty much everyone. Cool.

14
00:00:51,969 --> 00:00:55,660
And how many of you guys have ever printed
something using Google Cloud Print before

15
00:00:55,660 --> 00:00:59,280
coming here?
Awesome. Most of you guys.

16
00:00:59,280 --> 00:01:03,010
And how many of you have ever used our API
before?

17
00:01:03,010 --> 00:01:07,740
All right. A significantly smaller number
of you.

18
00:01:07,740 --> 00:01:11,570
So hopefully this talk will change that and
will give you a better idea of our API as

19
00:01:11,570 --> 00:01:17,580
well as the platform as a whole.
So let's quick things off. So at a very high

20
00:01:17,580 --> 00:01:22,650
level, Google Cloud Print was a Web service
that we at Google created to take the pain

21
00:01:22,650 --> 00:01:26,720
out of printing. We know that setting up a
printer and printing to a printer are some

22
00:01:26,720 --> 00:01:30,100
of the most troublesome things that people
have to deal with everyday with computing,

23
00:01:30,100 --> 00:01:35,050
and we really wanted to make that experience
better. So our high level goal with Cloud

24
00:01:35,050 --> 00:01:38,910
Print was to provide a seamless, driverless
printing experience that worked regardless

25
00:01:38,910 --> 00:01:42,640
of what platform you were on.
Pretty much as long as your device can connect

26
00:01:42,640 --> 00:01:49,640
to the cloud you should be able to print without
running a full driver stack.

27
00:01:49,640 --> 00:01:54,300
So in terms of our motivations and what drove
this, I'm going to take a trip back in time

28
00:01:54,300 --> 00:01:58,820
to 2010, way back in the day when we were
designing Chrome OS and trying to find out

29
00:01:58,820 --> 00:02:05,200
how to solve printing on that platform.
So printing is obviously really, really important

30
00:02:05,200 --> 00:02:10,090
use case on the Chromebook. It's a device
that's designed for content creation, and

31
00:02:10,090 --> 00:02:15,650
people need to print. And so we were considering
different models for how to do this. On one

32
00:02:15,650 --> 00:02:20,450
hand you have your traditional driver model
which you're accustomed to on your Windows,

33
00:02:20,450 --> 00:02:25,070
Mac and Linux machine. This was great because
it was tried and true, but there were a lot

34
00:02:25,070 --> 00:02:28,890
of trade-offs with this.
One major problem we saw is that we'd have

35
00:02:28,890 --> 00:02:33,470
to package every single Chrome OS device that
we sold with a whole bunch of printer drivers

36
00:02:33,470 --> 00:02:39,030
that you may or may not even use. Especially
for an action you perform not too frequently,

37
00:02:39,030 --> 00:02:42,970
it doesn't make sense to have this code sitting
on every single device out there.

38
00:02:42,970 --> 00:02:46,590
I think another problem that we ran into with
drivers is just the fact that we would have

39
00:02:46,590 --> 00:02:50,810
to keep them continuously updated. If you
got a new printer and it didn't have the drivers

40
00:02:50,810 --> 00:02:54,280
that you needed on that device, you would
be dependent on Google or on your printer

41
00:02:54,280 --> 00:02:58,720
manufacturer to release drivers that were
specific to your model, and that was just

42
00:02:58,720 --> 00:03:02,770
a huge pain point and we didn't want to deal
with having this constant baggage on every

43
00:03:02,770 --> 00:03:08,069
Chromebook that we'd have to keep updated.
I think third of all, and most importantly,

44
00:03:08,069 --> 00:03:11,750
Google has a lot of platforms that are important
on the cloud. We have Chrome, we have Chrome

45
00:03:11,750 --> 00:03:16,319
OS, we have Android. And we didn't want to
just come up with a solution for one platform.

46
00:03:16,319 --> 00:03:19,900
We wanted to come up with a solution that
would scale to a whole bunch of platforms.

47
00:03:19,900 --> 00:03:24,380
And that was the beauty with Cloud Print is
because what we had was a Web service, we

48
00:03:24,380 --> 00:03:27,540
were able to build something server side which
supported all the different platforms that

49
00:03:27,540 --> 00:03:31,580
Google has.
And this is a comic I like. It's an excerpt

50
00:03:31,580 --> 00:03:35,970
from The Oatmeal, which sort of gives you
an idea of some of the pain points you run

51
00:03:35,970 --> 00:03:41,060
into with traditional driver installations,
and this is exactly what we want to avoid

52
00:03:41,060 --> 00:03:46,840
with Google Cloud Print.
So this cool 3D diagram gives you sort of

53
00:03:46,840 --> 00:03:51,590
a high level overview of how our system works
and what exactly it does.

54
00:03:51,590 --> 00:03:57,239
There are a variety of devices you can print
from. Some examples just given here are your

55
00:03:57,239 --> 00:04:01,989
tablet, your Chromebook, your Android phone,
your iPhone, your -- or even your traditional

56
00:04:01,989 --> 00:04:06,180
Mac or PC.
Your print jobs are sent to Google Cloud Print.

57
00:04:06,180 --> 00:04:10,099
You can and them over any format and then
we convert them into the format they need

58
00:04:10,099 --> 00:04:15,180
to be in for the destination printer.
So here are three examples of devices we can

59
00:04:15,180 --> 00:04:20,299
send print jobs to. Arrow A is pointing to
a printer that is shared through Google Cloud

60
00:04:20,299 --> 00:04:26,629
Print through an intermediary laptop acting
as a connector. We'll explain more of that

61
00:04:26,629 --> 00:04:28,979
later.
Arrow B is pointing to a cloud-ready printer.

62
00:04:28,979 --> 00:04:33,229
These are printers that talk directly to the
Google Cloud Print service from within their

63
00:04:33,229 --> 00:04:36,349
firmware. We have one of these printers up
front and will actually be doing some live

64
00:04:36,349 --> 00:04:41,749
printing for you later.
And then Arrow C, which is basically you're

65
00:04:41,749 --> 00:04:45,349
printing to an enterprise server, which could
be managing thousands of printers. And we

66
00:04:45,349 --> 00:04:49,939
actually use a server very much like this
inside of Google to manage all of our printers

67
00:04:49,939 --> 00:04:55,620
with employees.
So the great thing with Google Cloud Print,

68
00:04:55,620 --> 00:04:59,020
and one of the reasons that -- I guess the
beauty of the platform and why we find it

69
00:04:59,020 --> 00:05:04,539
so powerful is it allows you to do all kinds
of things that you could never really imagine

70
00:05:04,539 --> 00:05:10,279
doing before with local printing.
So for one thing as an application developer,

71
00:05:10,279 --> 00:05:14,889
to add printing functionality with your app
is as easy as three lines of code. Yuri is

72
00:05:14,889 --> 00:05:18,669
going to be guiding you through that at a
later portion of the presentation. But we've

73
00:05:18,669 --> 00:05:23,050
really made it really, really easy for you
as developers to plug into the platform and

74
00:05:23,050 --> 00:05:27,870
integrate with Google Cloud Print.
Another advantage you have is because with

75
00:05:27,870 --> 00:05:33,099
Cloud Print all your print jobs go through
the cloud, you can print not just to printers,

76
00:05:33,099 --> 00:05:36,900
but actually to any device or application
which is connected to the cloud.

77
00:05:36,900 --> 00:05:40,999
And we've built a lot of really interesting
products around this, which we'll be explaining

78
00:05:40,999 --> 00:05:46,219
more later in the presentation as well.
Finally -- and this feature is something we

79
00:05:46,219 --> 00:05:51,020
feel that is really powerful is that we've
made it dirt simple to share printers with

80
00:05:51,020 --> 00:05:55,059
people. I don't know how many of you guys
have ever tried to share a local printer with

81
00:05:55,059 --> 00:06:00,580
someone, but it's not exactly a really fun
process. You can either do it through network

82
00:06:00,580 --> 00:06:05,400
sharing and set up your computer as a server
or you can pass someone a USB cable in which

83
00:06:05,400 --> 00:06:09,270
case they have to plug it in, go through a
bunch of driver installs and by the time they'll

84
00:06:09,270 --> 00:06:14,759
get printing it will take forever.
So we've made sharing ridiculously easy, and

85
00:06:14,759 --> 00:06:18,749
I'm actually going to show you a demo of that
real quick.

86
00:06:18,749 --> 00:06:22,469
So the great thing with Cloud Print is we've
made sharing a printer as easy as sharing

87
00:06:22,469 --> 00:06:25,430
a doc.
So here you can see the Cloud Print management

88
00:06:25,430 --> 00:06:31,589
page in Google Chrome. This is just google.com/cloudprint.
You can see I have three printers. The printer

89
00:06:31,589 --> 00:06:34,789
that I have selected is actually the printer
in the front of the room. This is our demo

90
00:06:34,789 --> 00:06:40,129
printer. And if I want to share this printer
with Yuri, all I have to do is click the green

91
00:06:40,129 --> 00:06:45,240
share button and you see a sharing dialogue
just like the one in Docs. I type in Yuri's

92
00:06:45,240 --> 00:06:52,240
Gmail account, I hit enter and I hit share
and that's it. I've just shared this printer

93
00:06:53,939 --> 00:06:57,319
with Yuri and it was as easy as sharing a
doc with him.

94
00:06:57,319 --> 00:07:02,159
So because your printers are associated with
your Google account it allows us to make sharing

95
00:07:02,159 --> 00:07:07,869
really simple and seamless.
And I guess as a fourth point also with Google

96
00:07:07,869 --> 00:07:13,300
Cloud Print, because all your print jobs go
through the cloud, we're completely OS, device

97
00:07:13,300 --> 00:07:18,339
and browser agnostic, so your printing experience
is going to be virtually identical whether

98
00:07:18,339 --> 00:07:23,439
you're on your Android phone or whether you're
on your Windows PC. You're gonna see the same

99
00:07:23,439 --> 00:07:28,349
print options, see more or less the same dialogue,
and we've done this to provide a consistent

100
00:07:28,349 --> 00:07:32,069
experience regardless of what platform you're
on.

101
00:07:32,069 --> 00:07:34,899
So I've given you a high level overview of
the platform and now I'm going to hand it

102
00:07:34,899 --> 00:07:39,680
out to Yuri and he will explain how to integrate
with Cloud Print from within your apps.

103
00:07:39,680 --> 00:07:45,089
>>Yuri Dolgov: Hey, guys. I'm going to guide
you through engineering part of our presentation.

104
00:07:45,089 --> 00:07:51,300
And I want to start with the limitations of
existing printing solutions on different platforms.

105
00:07:51,300 --> 00:07:55,830
With Web platform nowadays you can pretty
much build whatever application you can think

106
00:07:55,830 --> 00:08:01,509
of, but when it comes to something as printing,
and still there are many people who care about

107
00:08:01,509 --> 00:08:07,330
getting their document printed, you are faced
with a whole bunch of different problems.

108
00:08:07,330 --> 00:08:12,129
Pages look different on different Web browsers,
so you have to worry about making them look

109
00:08:12,129 --> 00:08:16,379
the same on every single browser you basically
create your application for.

110
00:08:16,379 --> 00:08:20,779
If you have mobile version of your Web application,
it's even worse because usually the mobile

111
00:08:20,779 --> 00:08:25,819
version is different from desktop and you
might want to have printed version looks the

112
00:08:25,819 --> 00:08:30,899
same as on desktop.
With mobile devices it's even worse. For every

113
00:08:30,899 --> 00:08:35,039
single new platform you put your variation
to, you have to come up with different printing

114
00:08:35,039 --> 00:08:38,120
solution.
And for some platforms you don't even have

115
00:08:38,120 --> 00:08:43,810
standard solutions, you have to invent them
on your own, and that's what we are trying

116
00:08:43,810 --> 00:08:50,790
to solve with Cloud Print.
With Cloud Print we want to provide you with

117
00:08:50,790 --> 00:08:57,790
the same seamless printing experience on every
single platform. Same API, same content type

118
00:08:58,790 --> 00:09:03,319
of the documents, everything is the same on
every single platform.

119
00:09:03,319 --> 00:09:10,319
I want to start to use example of Web integration,
how you integrate Cloud Print in your existing

120
00:09:11,930 --> 00:09:15,870
Web application.
For Web we have very simple, yet very powerful

121
00:09:15,870 --> 00:09:20,310
way. It's gadget based.
So basically first thing you need to do is

122
00:09:20,310 --> 00:09:27,310
just load gadget code from this URL on to
your page. And gadget cross-name is called

123
00:09:28,300 --> 00:09:34,750
print gadget. It has only one static method,
which is create default print button, which

124
00:09:34,750 --> 00:09:41,649
creates default button, which looks like this.
And if you create instance of this gadget

125
00:09:41,649 --> 00:09:47,300
you can also use those methods listed before.
First of them is set on close callback, which

126
00:09:47,300 --> 00:09:50,300
is pretty trivial, allows you to set on close
callback.

127
00:09:50,300 --> 00:09:55,060
You can set any function that is going to
be called when print dialogue is closed.

128
00:09:55,060 --> 00:09:59,240
The next one is set print button. There it
is.

129
00:09:59,240 --> 00:10:04,569
And that one allows you to set whatever HTML
element you want to attach to bring the gadget

130
00:10:04,569 --> 00:10:07,519
to.
You can use either button generated by this

131
00:10:07,519 --> 00:10:14,370
method or you can use your own DOM, it doesn't
matter. Whenever a user clicks on the DOM

132
00:10:14,370 --> 00:10:18,339
element, a print dialogue is going to pop
out.

133
00:10:18,339 --> 00:10:23,899
Next -- and the main method of this gadget
is set print document, which allows you to

134
00:10:23,899 --> 00:10:30,310
set documents that is going to be printed.
First parameter of that is content type, content

135
00:10:30,310 --> 00:10:35,550
type of document you want to print. Second
one is title of the print job. Third one is

136
00:10:35,550 --> 00:10:42,170
going to be used to identify the job by the
user in print queue.

137
00:10:42,170 --> 00:10:49,170
Third one, and the main, is content of the
document. And content can be both binary or

138
00:10:49,860 --> 00:10:55,920
Base64 encoded. Though Base64 encoded version
is a little bit larger than binary version,

139
00:10:55,920 --> 00:10:59,220
you might still want to prefer that in some
cases, especially if you have some kind of

140
00:10:59,220 --> 00:11:05,800
Native-to-JavaScript breach, and in this case
you might face jobs of early string terminations

141
00:11:05,800 --> 00:11:12,579
or stuff like that. So you might sacrifice
a slice and still use Base64 encoded version

142
00:11:12,579 --> 00:11:15,740
of the document.
And if you decide to use Base64 encoded version

143
00:11:15,740 --> 00:11:21,019
of the document you will need to set force
parameter, which is optional content in the

144
00:11:21,019 --> 00:11:26,889
colon. And in this case you will need to parse
Base64 string.

145
00:11:26,889 --> 00:11:30,250
If you want to have more control on opening
and closing print dialogue, you might want

146
00:11:30,250 --> 00:11:36,149
to use two other -- two methods below. It's
open print dialogue and close print dialogue

147
00:11:36,149 --> 00:11:43,149
which allows you to open and close print dialogue.
And you might want to use it if you want to

148
00:11:43,240 --> 00:11:48,839
open print dialogue on some custom action
like print -- document was uploaded or -- and

149
00:11:48,839 --> 00:11:55,660
conversion was done or registration finished,
stuff like that, so any custom events.

150
00:11:55,660 --> 00:12:02,660
I want to go and show you how you do it in
an existing application. This is just fragment

151
00:12:04,110 --> 00:12:10,019
of code.
Let's say (indiscernible). It goes like here.

152
00:12:10,019 --> 00:12:15,360
So the first thing you need to do is load
gadget code, as I said. The next thing, in

153
00:12:15,360 --> 00:12:19,149
this example we use on print function, which
is going to be called whenever a user wants

154
00:12:19,149 --> 00:12:24,220
to print a document. The third thing we do
in this function is create a Cloud Print gadget

155
00:12:24,220 --> 00:12:27,250
instance.
The next thing we set print document you want

156
00:12:27,250 --> 00:12:32,589
to print. In this case we use the application
PDF content type, but we can use many others

157
00:12:32,589 --> 00:12:39,069
and we will tell you more about that later.
And we said print job title, like my print

158
00:12:39,069 --> 00:12:44,310
job title, something.
And this is Base64 encoded content of PDF.

159
00:12:44,310 --> 00:12:49,870
And since this is Base64 encoded, we need
to set force parameter to Base64.

160
00:12:49,870 --> 00:12:56,610
And then we just open print dialogue, and
that's it, we are done.

161
00:12:56,610 --> 00:13:02,129
And one more thing I want to mention is that
this code you'll work exactly the same way

162
00:13:02,129 --> 00:13:08,170
on any browser, including mobile browsers.
So you only implement it once and -- well,

163
00:13:08,170 --> 00:13:14,069
we'll do everything for you. We'll open different
type of dialogues on different browsers, depending

164
00:13:14,069 --> 00:13:21,069
on -- well, optimize them for those.
Yeah. And we want to show you how Box integrated

165
00:13:25,339 --> 00:13:32,339
with us. They basically took almost no time
to do that. I hope you know what Box is, all

166
00:13:33,370 --> 00:13:40,370
right? It's file sharing, file storing service.
I have my Box account opened here and I have

167
00:13:44,720 --> 00:13:51,720
only one document and I want to print it with
Cloud Print. So I see it send to Google Cloud

168
00:13:51,819 --> 00:13:58,620
Print and here I see print dialogue. As you
can see I have invitation to accept a new

169
00:13:58,620 --> 00:14:02,910
printer. The printer is actually shared with
me a few minutes ago. I will go ahead and

170
00:14:02,910 --> 00:14:08,420
accept this printer.
There we go, printer is accepted, and now

171
00:14:08,420 --> 00:14:15,420
we're going to use it to print this document.
You see the document was immediately sent

172
00:14:17,829 --> 00:14:23,230
to the printer and it's going to be printed
like in a few seconds.

173
00:14:23,230 --> 00:14:30,139
So it's super easy to integrate Web application
on Cloud Print and it's even easier to integrate

174
00:14:30,139 --> 00:14:35,399
Android application with Cloud Print.
In order to do that you will need to include

175
00:14:35,399 --> 00:14:42,399
Cloud Print intent code into your application,
and you can get this code on this URL --

176
00:14:44,629 --> 00:14:49,860
[ Applause ].
>>Akshay Kannan: Sorry to interrupt. To make

177
00:14:49,860 --> 00:14:55,009
matters even more interesting, this printer
is connected using a mobile network, so -- yeah,

178
00:14:55,009 --> 00:14:57,410
everything seems to be connected.
[Laughter].

179
00:14:57,410 --> 00:15:02,420
>>Yuri Dolgov: Okay. I will continue this
Android integration.

180
00:15:02,420 --> 00:15:07,709
On Android, the integration is even simpler
than on the Web. All we need to do is just

181
00:15:07,709 --> 00:15:13,769
add Cloud Print intent into your application,
and you can get a code of this intent on this

182
00:15:13,769 --> 00:15:18,829
URL.
And the intent class name is cloud print dialogue.

183
00:15:18,829 --> 00:15:24,149
And all we need to do is just illustrate this
intent, subdate it and type up the documents

184
00:15:24,149 --> 00:15:30,249
you want to print, set titles of the document
you want to print and start the intent.

185
00:15:30,249 --> 00:15:35,329
Since it's so that simple I want to go ahead
and show you how to do it in a real application.

186
00:15:35,329 --> 00:15:42,329
In my case application is not that real. This
is Danny Web browser. Thank you.

187
00:15:42,649 --> 00:15:48,370
So it's Danny Web browser, and there is only
three URL elements, URL box, which is basically

188
00:15:48,370 --> 00:15:52,379
a box where you can type URL you want to go
to. Go button, which you need to click in

189
00:15:52,379 --> 00:15:59,379
order to go to this URL. And Web view, which
is -- well, which contains content of the

190
00:16:00,199 --> 00:16:05,079
Web page.
So you will see codes there. It's very simple.

191
00:16:05,079 --> 00:16:12,079
I don't want to spend too much time on that.
The only non-trivial part here is that we

192
00:16:12,379 --> 00:16:16,410
have functionality to get HTML content on
the Web page, and in order to do that we need

193
00:16:16,410 --> 00:16:21,209
to have JavaScript-to-Java bridge because
-- well, this is the only way you can access

194
00:16:21,209 --> 00:16:27,480
Web view content.
Anyways, I'm going to compile and start this

195
00:16:27,480 --> 00:16:34,480
application.
There we go. So this is, as I said, very simple

196
00:16:38,519 --> 00:16:43,329
browser. You can open the page, you can navigate,
do stuff like that.

197
00:16:43,329 --> 00:16:49,160
Let's go ahead and integrate this Cloud Print.
What we need to do is just add the URL element.

198
00:16:49,160 --> 00:16:56,160
You can click in order to open print dialogue.
In this case it's a button and I have it already

199
00:17:00,339 --> 00:17:07,339
in my layout XML file, so I don't want to
spend time implementing, write it once again.

200
00:17:08,150 --> 00:17:15,100
And they have (indiscernible) already. I will
go ahead and explain line by line what we

201
00:17:15,100 --> 00:17:18,080
have here.
First thing we do is create print intent.

202
00:17:18,080 --> 00:17:25,080
Then we find print button in the UI and set
on click listener.

203
00:17:26,130 --> 00:17:32,620
So in on click listener what we do is just
get content of the Web page, set it as document

204
00:17:32,620 --> 00:17:39,170
to be printed, along with content type, which
in this case that's HTML, set title of the

205
00:17:39,170 --> 00:17:43,250
print job and start the activity. That's pretty
much it.

206
00:17:43,250 --> 00:17:50,250
Let's look how it works.
So it should start in a second. Here we go.

207
00:17:57,250 --> 00:18:04,250
The connection is a bit slow. Here you see
a new button print. We'll go ahead and click

208
00:18:11,710 --> 00:18:18,490
this button.
This will open print dialogue and you can

209
00:18:18,490 --> 00:18:25,490
select printer you want to print to. Let's
use the same printer again.

210
00:18:25,710 --> 00:18:29,100
Print. And it should be instantly sent to
printer.

211
00:18:29,100 --> 00:18:32,250
No?
>>Akshay Kannan: There we go.

212
00:18:32,250 --> 00:18:39,250
>>Yuri Dolgov: Okay. Worked this time again.
Okay. It's going to be printed in a few seconds,

213
00:18:42,310 --> 00:18:47,830
so I'm going to continue with -- yeah, with
my presentation.

214
00:18:47,830 --> 00:18:54,830
In some cases those two integrations might
not -- oh, by the way, yeah, you can get the

215
00:18:55,300 --> 00:19:01,430
code of this presentation from here. It's
completely open. You can check how it looks

216
00:19:01,430 --> 00:19:06,610
in details.
So in some cases those two integrations might

217
00:19:06,610 --> 00:19:09,970
not be enough for you. For example, you are
working with some other platform or you want

218
00:19:09,970 --> 00:19:15,660
to have some more flexibility, doesn't matter.
We still have open APIs that you can use.

219
00:19:15,660 --> 00:19:20,610
And there are three main API codes that you
need to know if you want to send a job to

220
00:19:20,610 --> 00:19:24,420
Cloud Print. First one is search. It allows
you to search for all the printers available

221
00:19:24,420 --> 00:19:30,030
for the user. You can do some filter and some
searches, like some filter -- like filter

222
00:19:30,030 --> 00:19:36,060
in by (indiscernible) or by status for those
printers, but after all the goal is to provide

223
00:19:36,060 --> 00:19:41,210
user a list of printers available for them.
Once user selects the printer they want to

224
00:19:41,210 --> 00:19:46,050
print to, you need to do another code, printer
code, which will return capabilities of the

225
00:19:46,050 --> 00:19:51,290
printer. And you will need to show those capabilities
to the users so that they could select how

226
00:19:51,290 --> 00:19:56,010
they want to print the job. Once capabilities
are selected, you would need to do the third

227
00:19:56,010 --> 00:20:02,680
one, third call, which is the certainly the
main one. That will submit a print job to

228
00:20:02,680 --> 00:20:09,680
printer, printer is given printer ID, title
of the job, capabilities, content type, if

229
00:20:14,450 --> 00:20:18,820
-- if content of the job is Base 64 encoder,
so you will need to set up a content task

230
00:20:18,820 --> 00:20:25,370
for encoding as well and content itself. So
it's super easy again and with that I'm going

231
00:20:25,370 --> 00:20:29,930
to hand it back to Akshay.
>>Akshay Kannan: Sounds good.

232
00:20:29,930 --> 00:20:32,740
So we have showed how you can integrate with
that --

233
00:20:32,740 --> 00:20:35,790
[ Applause ]
>>Yuri Dolgov: Thank you.

234
00:20:35,790 --> 00:20:41,440
>>Akshay Kannan: So we have showed you how
we can integrate with Cloud Print, you can

235
00:20:41,440 --> 00:20:47,610
use our Web widget, Android widget, or HTTP
API directly, we have really tried to make

236
00:20:47,610 --> 00:20:53,970
it easy to bring that functionality into your
app. That's printing from a lot of places,

237
00:20:53,970 --> 00:20:58,940
but we actually also support printing to a
lot of places, printing to anywhere. We have

238
00:20:58,940 --> 00:21:03,270
over 20 million printers that are registered
with Google Cloud Print as of today and that

239
00:21:03,270 --> 00:21:10,270
number is continuing to grow, so our main
type of printers are -- at least for the best

240
00:21:10,750 --> 00:21:15,740
user experience, we recommend what we call
cloud ready printers. These are printers that

241
00:21:15,740 --> 00:21:21,520
connect directly to the Web from within the
firmware themselves. We have over 70 cloud

242
00:21:21,520 --> 00:21:27,120
ready printer models that are available from
a wide variety of retailers and manufacturers,

243
00:21:27,120 --> 00:21:31,630
and we've -- in particular printers the list
that we have here on our slide deck of HP,

244
00:21:31,630 --> 00:21:37,490
Canon, Kodak, Epson, Fuji Xerox and Samsung,
are just the manufacturers who have printers

245
00:21:37,490 --> 00:21:42,520
that are currently available. We are working
with a much larger list of manufacturers over

246
00:21:42,520 --> 00:21:47,760
time to expand this out. So basically it will
be hard at some point to buy a printer that's

247
00:21:47,760 --> 00:21:51,670
not cloud ready.
We also have a full list of printers on our

248
00:21:51,670 --> 00:21:58,420
Web site, g.co/cloudprint where you can check
out what printers are available. And which

249
00:21:58,420 --> 00:22:03,790
ones are cloud ready. I know a lot of you
also probably don't want to buy a new printer.

250
00:22:03,790 --> 00:22:08,200
You just use Google Cloud Print, and the good
news is that you don't have to. We support

251
00:22:08,200 --> 00:22:12,300
what's called the Chrome connector, which
allows you to take any local printer that's

252
00:22:12,300 --> 00:22:16,470
connected to your printer running Chrome and
use that printer as a print server.

253
00:22:16,470 --> 00:22:20,270
So how this works it's let's say that you
have Google Chrome running on your Windows

254
00:22:20,270 --> 00:22:24,650
PC at home. You can USB your printer into
there, set it up as a local printer. And then

255
00:22:24,650 --> 00:22:29,530
from within Chrome settings, you can register
-- in fact here's a screen shot from the settings

256
00:22:29,530 --> 00:22:33,890
dialogue, you just click the add printers
button right there, and it's simply a one-click

257
00:22:33,890 --> 00:22:36,150
process.
Your local printers will automatically get

258
00:22:36,150 --> 00:22:40,850
added to your Google Cloud Print account with
the account that you are logged in with. So

259
00:22:40,850 --> 00:22:45,390
we do make it easy to set up printers that
are not cloud ready. The only caveat here

260
00:22:45,390 --> 00:22:49,730
is that you do need to keep your computer
running in order for jobs to be printed out.

261
00:22:49,730 --> 00:22:54,720
That being said, if you submit a print job
to a computer that's turned off, it gets queued,

262
00:22:54,720 --> 00:22:58,000
so next time you turn it on your job will
get released and printed out from the printer

263
00:22:58,000 --> 00:23:02,360
that's connected to it.
Also we don't just support printer to printers,

264
00:23:02,360 --> 00:23:07,470
as I mentioned earlier. But we really support
printing to anywhere. You can print to -- currently

265
00:23:07,470 --> 00:23:11,960
every Google Cloud Print dialogue has the
option save to Google drive, which will take

266
00:23:11,960 --> 00:23:15,660
whatever you are printing, convert it to a
PDF, and save it in your Google drive account

267
00:23:15,660 --> 00:23:19,560
or you can even print to a FedEx office, which
is a partnership we recently launched this

268
00:23:19,560 --> 00:23:24,680
year which allows you to print your document
and get a retrieval code, which you can use

269
00:23:24,680 --> 00:23:29,570
to basically print out and pay for your job
at any local Fed-Ex office location within

270
00:23:29,570 --> 00:23:33,000
the U.S.
Finally, another little exciting feature that

271
00:23:33,000 --> 00:23:38,020
we have is the ability to print to your mobile
phone. So if you have Chrome for mobile installed

272
00:23:38,020 --> 00:23:43,390
on Android or iOS and you are signed into
sync, what we do is we actually register your

273
00:23:43,390 --> 00:23:48,340
phone as a Google Cloud Print device in your
dialogue. So what you will be able to do -- whenever

274
00:23:48,340 --> 00:23:51,990
you are printing from Cloud Print, if you
are using the same account that you have set

275
00:23:51,990 --> 00:23:56,520
up your phone with, you will see your phone
as a destination that you can print to. And

276
00:23:56,520 --> 00:24:00,690
what we do is we just push an Android push
notification that the job is available and

277
00:24:00,690 --> 00:24:05,240
it gets downloaded to your phone.
So this is already available today and you

278
00:24:05,240 --> 00:24:11,320
guys can try it out.
Finally, in terms of printing to anywhere,

279
00:24:11,320 --> 00:24:16,210
we also -- like most of our product -- have
a fully open API that you can use as developers

280
00:24:16,210 --> 00:24:21,760
to receive print jobs. So we have an XMPP
interface, which you can connect to in order

281
00:24:21,760 --> 00:24:27,610
to receive print job notifications. And we
also have a full set of HTTPS interfaces that

282
00:24:27,610 --> 00:24:32,370
you can connect to to basically fetch the
job, set job status. And I'll delve into the

283
00:24:32,370 --> 00:24:35,670
details in the next slide.
Cloud ready printers such as the one you can

284
00:24:35,670 --> 00:24:40,690
see on stage have already implemented this
in firmware. So it's real easy to implement

285
00:24:40,690 --> 00:24:45,390
whether you are working with low-level hardware
or building an application. Yeah, really,

286
00:24:45,390 --> 00:24:52,390
any application or device can implement this.
And so we leave the possibilities of integration

287
00:24:52,510 --> 00:24:56,780
up to the developer. And a lot of this really
allows you to use your imagination for what

288
00:24:56,780 --> 00:25:01,740
you can print to. Some examples we just thought
of are you could print to your Kindle. You

289
00:25:01,740 --> 00:25:04,900
could build an application that would allow
you to print documents for reading on the

290
00:25:04,900 --> 00:25:09,010
go. You could technically build an application
that would even allow you to print to a smart

291
00:25:09,010 --> 00:25:16,010
Web connected TV. And if monkeys were cloud
connected, then you could even print to a

292
00:25:16,270 --> 00:25:22,880
monkey with a typewriter. That one might require
more imagination than the others.

293
00:25:22,880 --> 00:25:27,850
So just to go into the details of our API,
there's two API calls you really call about

294
00:25:27,850 --> 00:25:33,370
with our job retrieval. There's our fetch
API, which takes in a printer ID as an argument,

295
00:25:33,370 --> 00:25:38,040
so you would call to fetch API when you receive
an XMPP ping that a job is available. And

296
00:25:38,040 --> 00:25:42,630
what the fetch API does is it returns a JSON
list of the jobs that are available to be

297
00:25:42,630 --> 00:25:49,630
printed. In this JSON object for each job,
we have two parameters that are important,

298
00:25:50,160 --> 00:25:54,350
the fie URL parameter and the ticketURL parameter.
The fileURL parameter, which is the one right

299
00:25:54,350 --> 00:26:01,170
here, is basically a URL that you can use
to download the file. So the cool thing about

300
00:26:01,170 --> 00:26:06,590
this URL is that -- you can -- you can dynamically
change the format of the file by specifying

301
00:26:06,590 --> 00:26:11,190
a different accept header when you are fetching
this URL. So for example, if you want to fetch

302
00:26:11,190 --> 00:26:17,150
the job as a PDF, you set your accept header
to be application PDF, then we will convert

303
00:26:17,150 --> 00:26:19,900
the document to a PDF server site and send
it to your printer.

304
00:26:19,900 --> 00:26:25,950
If you want to fetch it -- the other main
format is PWG Raster, which is a simple Raster

305
00:26:25,950 --> 00:26:30,740
based image format. If you want to fetch that,
you just set your accept header to PWG Raster

306
00:26:30,740 --> 00:26:34,760
and we will stream the file to you in that
format.

307
00:26:34,760 --> 00:26:40,640
And then finally ticketURL is basically your
print ticket that contains a list of the filled

308
00:26:40,640 --> 00:26:46,330
options of exactly what the user specified.
For example, portrait or landscape or whatever

309
00:26:46,330 --> 00:26:52,160
other capabilities you have exposed from your
printer that are configurable.

310
00:26:52,160 --> 00:26:56,080
Our second API, which is important is our
control API, which allows you to basically

311
00:26:56,080 --> 00:27:01,410
update the status of the job as you're printing
it. So by default, whenever you print a job,

312
00:27:01,410 --> 00:27:05,920
we set the status of that job to be queued.
And over time as you are printing that -- so

313
00:27:05,920 --> 00:27:09,360
for example, when you start to fetch, you
can set the job, move the status from queued

314
00:27:09,360 --> 00:27:12,480
to be in progress, and then when you are done
printing the job, you can move the status

315
00:27:12,480 --> 00:27:15,220
to done.
If something goes wrong, you can also set

316
00:27:15,220 --> 00:27:22,220
the status to error, and specify an error
of coded message string. Finally we do take

317
00:27:22,730 --> 00:27:28,380
security and privacy really seriously with
Google Cloud Print and one example of how

318
00:27:28,380 --> 00:27:33,890
we do this is we have a secure data access
model, such that every item within our system,

319
00:27:33,890 --> 00:27:37,300
whether it's a printer, whether it's a print
job is (indiscernible), so that you can only

320
00:27:37,300 --> 00:27:43,260
print to that if you have explicit permissions
as your account to send a print job there.

321
00:27:43,260 --> 00:27:47,720
So all of the APIs that we mentioned earlier
are authenticated so you have to be logged

322
00:27:47,720 --> 00:27:52,380
in as a user who has explicit privileges to
access that. So we earlier said that you could

323
00:27:52,380 --> 00:27:56,910
print to anything, but that was a lie because
we have security restrictions in place.

324
00:27:56,910 --> 00:28:02,950
Finally, we also support so -- so this is
actually I'll start with the problem here

325
00:28:02,950 --> 00:28:08,730
is when you are dealing with printer registrations,
registration is an API that's difficult to

326
00:28:08,730 --> 00:28:14,330
make an authenticated call because it requires
the printer to somehow authenticate as you

327
00:28:14,330 --> 00:28:20,130
before it can register itself with the system.
That's a hard problem, because -- the biggest

328
00:28:20,130 --> 00:28:24,600
concern for is it's a security issue because
you could have printers when you are typing

329
00:28:24,600 --> 00:28:28,660
credentials into the printer that could store
them locally unencrypted on the device, make

330
00:28:28,660 --> 00:28:33,230
it vulnerable to attackers who could steal
your Google account from the printer. And

331
00:28:33,230 --> 00:28:37,090
then also I think on another folder also the
UI problem of not all printers -- not all

332
00:28:37,090 --> 00:28:40,950
printers support text entry on their device.
So we've solved this using what we call the

333
00:28:40,950 --> 00:28:45,390
anonymous registration flow. This allows the
printer to basically make an unauthenticated

334
00:28:45,390 --> 00:28:51,540
registration call to our servers, which anonymously
registers the printer to Google Cloud Print.

335
00:28:51,540 --> 00:28:56,850
In order to actually complete the registration
process, we have returned a URL to the printer,

336
00:28:56,850 --> 00:29:00,350
which the printer can then print out and give
to the user and the user can visit that URL

337
00:29:00,350 --> 00:29:04,750
on their Web browser and complete the registration
process from there. We know that this is secure

338
00:29:04,750 --> 00:29:10,140
because you are only entering your credentials
into a Google log-in page and not into a third

339
00:29:10,140 --> 00:29:15,180
party interface. And then finally there's
also robot accounts, which are special accounts

340
00:29:15,180 --> 00:29:19,890
that we create just for printers in our system
when the registration happens. The nice thing

341
00:29:19,890 --> 00:29:25,310
with robot accounts is that they are sandboxed,
so they are only given restricted access to

342
00:29:25,310 --> 00:29:28,350
Google Cloud Print and can't access other
things in your Google account that you wouldn't

343
00:29:28,350 --> 00:29:35,350
want them to. Finally, all of our interfaces
use HTTPS and we strongly encourage you as

344
00:29:35,390 --> 00:29:39,960
developers to also use the HTTPS versions
of our API.

345
00:29:39,960 --> 00:29:46,960
Finally, regarding privacy, another problem
that we've dealt with is spam invitations.

346
00:29:46,970 --> 00:29:52,320
So, for example, if I shared -- I could technically
share 100 printers with Yuri and completely

347
00:29:52,320 --> 00:29:57,040
spam his account. Another possible attack
is that I could share a printer, which looks

348
00:29:57,040 --> 00:30:00,620
like one of Yuri's printers to him, and he
could end up printing to that and I could

349
00:30:00,620 --> 00:30:04,620
steal all of his data as a result. So one
thing to prevent this is we have implemented

350
00:30:04,620 --> 00:30:09,120
printer sharing invitations.
So this, as you saw earlier, requires Yuri

351
00:30:09,120 --> 00:30:14,470
to explicitly accept my printer sharing invitation
before he can print to a printer. As part

352
00:30:14,470 --> 00:30:17,720
of that invite process, he sees exactly who
I am and the name of the printer that I'm

353
00:30:17,720 --> 00:30:22,470
sharing with him, so this prevents you from
getting spammed with printers and also prevents

354
00:30:22,470 --> 00:30:26,360
you from printing to printers unless you are
absolutely sure that you have accepted an

355
00:30:26,360 --> 00:30:32,230
invitation and that you know who sent you
that invite. And then finally regarding print

356
00:30:32,230 --> 00:30:37,610
job content retention, we delete for jobs
as soon as the status is set to done. If the

357
00:30:37,610 --> 00:30:42,250
status is never set to done, then after 30
days, we delete print job content from our

358
00:30:42,250 --> 00:30:48,640
servers. We don't store them long term.
Finally, we've talked about how you can print

359
00:30:48,640 --> 00:30:53,220
from anywhere, how you can print to pretty
much anywhere, and I'm going to go into another

360
00:30:53,220 --> 00:30:56,860
part of our presentation which is how you
can print anything.

361
00:30:56,860 --> 00:31:01,680
We do support a very, you know, Google Cloud
Print was developed with sort of developers

362
00:31:01,680 --> 00:31:06,330
in mind. And client platforms in mind. And
we realized that when you are generating documents

363
00:31:06,330 --> 00:31:10,290
client side, you don't want to be bound to
a particular format that you have to generate.

364
00:31:10,290 --> 00:31:14,130
You want to have the flexibility to generate
your content in whatever formant you want

365
00:31:14,130 --> 00:31:17,780
and then send it server side where we can
do the necessary conversion.

366
00:31:17,780 --> 00:31:21,740
So for this reason, our API accepts virtually
any format as input for your print job. So

367
00:31:21,740 --> 00:31:28,740
you can send us pdfs, stand image formats,
most standard document formats, Google docs,

368
00:31:28,930 --> 00:31:34,060
Microsoft Office documents, HTML documents
or even URLs which we can fetch server side

369
00:31:34,060 --> 00:31:40,210
and NET Frame. On our side, we make our best
effort to convert this document into either

370
00:31:40,210 --> 00:31:47,210
PDF or PWG Raster. Another thing that's interesting,
if you don't care about conversion, then our

371
00:31:48,030 --> 00:31:52,380
platform -- if the input and output formats
are identical, we will actually do no conversion

372
00:31:52,380 --> 00:31:54,730
whatsoever and simply pass the file through
our system.

373
00:31:54,730 --> 00:31:58,890
This could be really useful if you wanted
to do something like make a 3D Cloud Printer

374
00:31:58,890 --> 00:32:02,750
that used a special format, as long as the
format that you in which you are submitting

375
00:32:02,750 --> 00:32:06,800
the job and receiving the job in are the same,
our system will just pass the job content

376
00:32:06,800 --> 00:32:09,860
right through.
It's also particularly useful for sending

377
00:32:09,860 --> 00:32:13,810
-- if you want to encrypt content and before
you send it to us, decrypt it after you receive

378
00:32:13,810 --> 00:32:18,400
it, you could send us a custom encrypted format,
which we would pass directly through without

379
00:32:18,400 --> 00:32:25,220
doing any conversion on whatsoever.
Then, finally, one format that I wanted to

380
00:32:25,220 --> 00:32:30,570
focus on that I think is particularly powerful
is HTML. It's a format that's easy to create

381
00:32:30,570 --> 00:32:37,190
client side and sent to us on the server side.
The other great thing about HTML is there's

382
00:32:37,190 --> 00:32:42,660
no direct page content that's here or I guess
page layout information. So it allows us server

383
00:32:42,660 --> 00:32:48,370
side to intelligently flow the HTML, depending
on what media size of paper that you are printing

384
00:32:48,370 --> 00:32:51,600
to. So, for example, if you are in the U.S.
and you are printing to an 8 and a half by

385
00:32:51,600 --> 00:32:57,110
11 page, we will flow the HTML text and images
for an 8 and a half by 11 paper and generate

386
00:32:57,110 --> 00:33:02,590
the appropriate PDF server side. If you are
in some other and country and using A4, then

387
00:33:02,590 --> 00:33:06,460
we would flow the HTML content for an A4 and
send that to you, so as an application you

388
00:33:06,460 --> 00:33:11,630
wouldn't even have to worry about the media
size of the destination printer that you are

389
00:33:11,630 --> 00:33:17,310
sending content to.
So I'm now going to just spend a little bit

390
00:33:17,310 --> 00:33:21,740
of time talking about our future work and
where we're heading going forward with Google

391
00:33:21,740 --> 00:33:26,300
Cloud Print.
So -- so one huge challenge for us has been

392
00:33:26,300 --> 00:33:31,040
handling printer capabilities. There's -- they
can be kind of a nightmare to deal with. There's

393
00:33:31,040 --> 00:33:38,040
a lot -- basically with printer capabilities,
the two main formats are XPS and PPD. And

394
00:33:38,960 --> 00:33:43,000
the thing that makes them interesting as well,
there are standards. Printer manufacturers

395
00:33:43,000 --> 00:33:47,950
only have to write capabilities such that
they'll work with their particular driver.

396
00:33:47,950 --> 00:33:52,180
So for this reason, there can be a lot of
ways to specify the same option. Even an option

397
00:33:52,180 --> 00:33:58,000
as simple as portrait or landscape specified
differently on different platforms. So we

398
00:33:58,000 --> 00:34:01,880
really -- what we want to do is rather than
just reading strings, we want to be a able

399
00:34:01,880 --> 00:34:06,980
to intelligently understand these capabilities,
make sense of them, produce good options UI

400
00:34:06,980 --> 00:34:12,210
around them, and also even surface some of
this functionality to developers. So that

401
00:34:12,210 --> 00:34:15,060
as an application developer, you can know
about the printer that you are sending jobs

402
00:34:15,060 --> 00:34:20,070
to at a high level without having to parse
these capabilities yourself. So that's one

403
00:34:20,070 --> 00:34:25,080
of our big goals going forward is to more
intelligently understand these different capabilities

404
00:34:25,080 --> 00:34:28,850
and be able to semantically parse them on
our side.

405
00:34:28,850 --> 00:34:34,210
Real quick here, you can see our server's
JSON representation or an excerpt from our

406
00:34:34,210 --> 00:34:41,210
server's JSON representation of an XPS capability,
we will see an idea of what that's like. Another

407
00:34:43,690 --> 00:34:48,870
big goal that we're working towards are making
public and commercial printers that you can

408
00:34:48,870 --> 00:34:53,540
print to ubiquitous. We really like the concept
of being able to print even without owning

409
00:34:53,540 --> 00:35:00,440
a printer, no matter where you are. We did
launch a partnership with the Fed-Ex office,

410
00:35:00,440 --> 00:35:05,190
as I mentioned earlier, which makes this possible.
Another thing, if you guys are on the first

411
00:35:05,190 --> 00:35:09,690
floor of Moscone, we do have a Cloud Print
station, which we have set up, to allow you

412
00:35:09,690 --> 00:35:14,130
to print to public printers. You can print
to these printers simply by tapping an NFC

413
00:35:14,130 --> 00:35:20,030
tag or scanning a QR code, it gives you -- instantly
adds the printer to your Google account and

414
00:35:20,030 --> 00:35:24,560
allows you to start sending print jobs to
it.

415
00:35:24,560 --> 00:35:29,970
And then, finally, one of our biggest and
most exciting goals and moving forward is

416
00:35:29,970 --> 00:35:35,400
we want Cloud Print to be tightly integrated
with other Google properties. So you can come

417
00:35:35,400 --> 00:35:40,340
to expect the same consistent printing experience,
regardless of what Google platform you are

418
00:35:40,340 --> 00:35:42,520
using.
One feature that I'm about to give you a sneak

419
00:35:42,520 --> 00:35:47,330
preview of is some of the work that we've
been doing in Google Chrome to tightly integrate

420
00:35:47,330 --> 00:35:51,870
Cloud Print with the local printing experience
in Chrome and just make that seamless. So

421
00:35:51,870 --> 00:35:58,380
real quick, I'm going to grab the laptop and
open up the -- this is the Canary channel

422
00:35:58,380 --> 00:36:05,250
of Chrome, it's updated nightly. This is a
pretty risky demonstration. So what we're

423
00:36:05,250 --> 00:36:10,360
going to do is we're going to try printing
our own API documentation using the new Cloud

424
00:36:10,360 --> 00:36:14,710
Print dialogue that we're working on. So I'm
just going to hit command P. It's going to

425
00:36:14,710 --> 00:36:19,940
open the dialogue that you all know and love,
except there's a slight difference. And that

426
00:36:19,940 --> 00:36:23,380
is -- I don't know if you guys can notice,
the destination pane is slightly different

427
00:36:23,380 --> 00:36:27,750
from what you are used to. And by the way,
this is all available on dev channel today,

428
00:36:27,750 --> 00:36:32,020
so you guys can check this out for yourselves.
So what's going to happen here is I'm going

429
00:36:32,020 --> 00:36:37,940
to click change, this pops up something different
from the usual drop-down. It actually pops

430
00:36:37,940 --> 00:36:42,350
down a screen where your local printers and
your Cloud Printers are integrated side by

431
00:36:42,350 --> 00:36:44,940
side.
What's happened is because I'm signed into

432
00:36:44,940 --> 00:36:50,540
Chrome as cloudprint.user@gmail.com, I'm able
to see my Google Cloud Print printers.

433
00:36:50,540 --> 00:36:54,130
You with see from within the Chrome dialogue,
I can see save to Google drive, I can see

434
00:36:54,130 --> 00:36:58,870
print to Fed-Ex office and I can see the printer
that's been shared with me, which is the Cloud

435
00:36:58,870 --> 00:37:02,440
Print demo printer. This guy up front. So
what I'm going to do is for the sake of this

436
00:37:02,440 --> 00:37:06,440
demo, I'm going to choose the Cloud Print
demo printer. I'm going to hit print. And

437
00:37:06,440 --> 00:37:10,660
what happens is this document is posted to
the Cloud Print service and then sent to the

438
00:37:10,660 --> 00:37:15,440
printer, which should be printing it out any
second. So this is our integration in Chrome

439
00:37:15,440 --> 00:37:20,070
and it's -- you know, we've tried to make
it as seamless as possible, basically as easy

440
00:37:20,070 --> 00:37:24,100
to print to Cloud Print as it is to print
to a local printer. And this is just one of

441
00:37:24,100 --> 00:37:28,160
the many integrations that you will see across
Google properties going forward, so we are

442
00:37:28,160 --> 00:37:34,280
really excited for that. So actually, once
this prints out, that concludes the end of

443
00:37:34,280 --> 00:37:40,380
our presentation. Thank you so much for coming.
We're going to leave the remaining 20 minutes

444
00:37:40,380 --> 00:37:47,380
for Q and A. So -- so -- so fire away.
[ Applause ]

445
00:37:48,440 --> 00:37:55,440
>>Akshay Kannan: All right. We will start
the right side of the room.

446
00:37:57,170 --> 00:38:04,170
>>> Hi. I had one question. On the Android
apps and on the Web. Is there a way to -- to

447
00:38:05,230 --> 00:38:09,530
take away some of the options in the printing,
especially the number of copies that are printed?

448
00:38:09,530 --> 00:38:14,220
My app requires that the user be able to print
something only once. So is there a way to

449
00:38:14,220 --> 00:38:16,940
suppress the number of copies that you can
print?

450
00:38:16,940 --> 00:38:21,990
>>Akshay Kannan: So the question was whether
it's possible to restrict certain options

451
00:38:21,990 --> 00:38:28,210
within the Android dialogue and within other
dialogues to not show options such as copies.

452
00:38:28,210 --> 00:38:33,310
Actually --
>>Yuri Dolgov: No, there is not such a way.

453
00:38:33,310 --> 00:38:37,710
But, yeah, this is nice suggestion. We'll
-- we'll discuss it.

454
00:38:37,710 --> 00:38:43,770
>>> Is there a way to actually suppress it
using the HTTPS protocols? I mean, I don't

455
00:38:43,770 --> 00:38:45,970
--
>>Yuri Dolgov: If you create your own, your

456
00:38:45,970 --> 00:38:50,100
custom print dialogue, you can suppress whatever
you want. But in this case, you have to parse

457
00:38:50,100 --> 00:38:52,140
capabilities yourself.
>>> Yeah, that's fine.

458
00:38:52,140 --> 00:38:57,920
>>Akshay Kannan: So you can do it using the
HTTPS API and basically not show certain options

459
00:38:57,920 --> 00:39:02,100
in your UI.
>>> Thanks.

460
00:39:02,100 --> 00:39:06,210
>>> You mentioned that you have millions of
Cloud Print printers on your system now. Can

461
00:39:06,210 --> 00:39:10,350
you speak a little bit about the infrastructure
required for that? Do you have millions of

462
00:39:10,350 --> 00:39:15,520
TCP connections that are open, using UDP or
how does that work?

463
00:39:15,520 --> 00:39:21,730
>>Akshay Kannan: For our cloud ready printers
we are using XMPP to handle the notifications

464
00:39:21,730 --> 00:39:26,040
between us and those printers.
There isn't necessarily a one-to-one correspondence

465
00:39:26,040 --> 00:39:30,280
of XMPP connections to printers. Because a
lot of times with the Chrome connector, with

466
00:39:30,280 --> 00:39:34,860
Cloud Print servers, you have multiple printers
which can be associated with a single connection.

467
00:39:34,860 --> 00:39:40,340
So -- so what it is, for cloud ready printers,
we have one XMPP connection for each of those

468
00:39:40,340 --> 00:39:44,320
printers. And for printers that are connected
to the server or a different Chrome connector,

469
00:39:44,320 --> 00:39:50,100
it's an XMPP connection per machine.
So -- so, for example, if I'm sharing five

470
00:39:50,100 --> 00:39:55,730
printers with my MacBook, I'd have five XMPP
open or, I'm sorry, one XMPP connection controlling

471
00:39:55,730 --> 00:40:00,890
all five of those printers.
>>> But just short questions -- the short

472
00:40:00,890 --> 00:40:05,600
answer to your question is we keep millions
connected, connections open on our site, for

473
00:40:05,600 --> 00:40:12,600
every single printer, and we rely on your
infrastructure for that. So, yes.

474
00:40:13,190 --> 00:40:18,980
>>> So if my office just lost its internet
connection because a cable chewed on the wire,

475
00:40:18,980 --> 00:40:22,080
all I can do is stare at my Cloud Printers,
correct.

476
00:40:22,080 --> 00:40:27,450
>>Akshay Kannan: What happens is when your
printers are offline, any job goes into a

477
00:40:27,450 --> 00:40:31,619
queued state, so everyone would still be able
to print, but then once the internet comes

478
00:40:31,619 --> 00:40:34,410
back on, all the jobs would come back out
of the printer.

479
00:40:34,410 --> 00:40:40,369
>>> I cannot send jobs directly to the print,
they have to go through Google. No connection

480
00:40:40,369 --> 00:40:44,319
to Google, no printing.
>>Akshay Kannan: Yeah.

481
00:40:44,319 --> 00:40:50,030
>>> Got it. Thank you.
>>> Is there a Linux print server for this,

482
00:40:50,030 --> 00:40:53,050
or windows print server, short of leaving
Chrome open on the server?

483
00:40:53,050 --> 00:41:00,050
>>Akshay Kannan: There is, actually, so on
Linux, how it works is you can start the Chrome

484
00:41:00,220 --> 00:41:05,900
connector, but actually you can run Chrome
in -- this is actually -- it's in the chromium

485
00:41:05,900 --> 00:41:11,930
source. I'm not sure how much of this is documented.
We'll probably be documenting over time. But

486
00:41:11,930 --> 00:41:16,119
you can run Chrome in a headless mode with
a certain command line flag, which will start

487
00:41:16,119 --> 00:41:20,450
the Cloud Print service up in the background,
and it's what we do internally at Google to

488
00:41:20,450 --> 00:41:24,430
get all of our thousands of printers online.
So it doesn't require you to keep Chrome running;

489
00:41:24,430 --> 00:41:28,260
it just requires you to have Chrome installed,
and you launch it with the flag which starts

490
00:41:28,260 --> 00:41:35,260
up the Cloud Print service in the background.
>>> I've noticed that sometimes the office

491
00:41:35,830 --> 00:41:42,000
printer that I Cloud Print to doesn't appear
in the dialogue box. I assume that's because

492
00:41:42,000 --> 00:41:45,980
it's kind of a flakey printer and sometimes
it's offline or broken or something, but I

493
00:41:45,980 --> 00:41:52,720
didn't see in your API that there was a way
for a printer to report its status, or how

494
00:41:52,720 --> 00:41:56,240
does that -- how does Google know that that
printer is not available?

495
00:41:56,240 --> 00:42:01,800
>>Akshay Kannan: So what we do is for status,
we actually determine that using your XMPP

496
00:42:01,800 --> 00:42:06,810
status. So if the printer doesn't have an
active connection, in fact you could see this,

497
00:42:06,810 --> 00:42:11,100
if I turn the printer off right now, it will
show up as offline in the dialogue. We basically

498
00:42:11,100 --> 00:42:14,730
use the XMPP status of the printer to determine
whether it's online or offline.

499
00:42:14,730 --> 00:42:17,450
>>> So that doesn't remove from the list,
though? Is there some --

500
00:42:17,450 --> 00:42:21,040
>>Akshay Kannan: It doesn't remove from the
list. What it does is it grays it out and

501
00:42:21,040 --> 00:42:25,890
it moves it to the bottom of the list, so
your online printers show up above your offline

502
00:42:25,890 --> 00:42:29,710
printers, but you'll still be able to see
your offline printers at any time. If you're

503
00:42:29,710 --> 00:42:33,330
actually not seeing the printer, then it might
be that you're logged in with a different

504
00:42:33,330 --> 00:42:38,250
account. You have to be logged in with the
same account that you used to set up the printer,

505
00:42:38,250 --> 00:42:45,250
or you can share the printer with your other
account. But, yeah, we don't -- the printer,

506
00:42:45,530 --> 00:42:50,480
if you set it up once, it will always be part
of your account so...

507
00:42:50,480 --> 00:42:57,480
>>> So you mentioned for security, once a
job is complete, you delete it. Is there any

508
00:42:58,010 --> 00:43:03,040
ability to retain that for at least a short
period so that you could reprint successful

509
00:43:03,040 --> 00:43:05,010
jobs?
>>Akshay Kannan: So one thing you can do is

510
00:43:05,010 --> 00:43:10,000
if you are the printer receiving the jobs,
if you want to reprint successful jobs, we

511
00:43:10,000 --> 00:43:15,760
only delete the job content when the status
gets set to done, so if you're the developer,

512
00:43:15,760 --> 00:43:21,060
you could just set the status to be "in progress",
or move it from "in progress" back into queued,

513
00:43:21,060 --> 00:43:24,470
and with all of these different states we
would retain the job on our side.

514
00:43:24,470 --> 00:43:29,260
>>> I guess what I would like to see is -- is
that ability when you're using the connector,

515
00:43:29,260 --> 00:43:36,200
so you've got an existing printer, but that
capability magically from your end.

516
00:43:36,200 --> 00:43:41,210
>>Akshay Kannan: Sorry, I didn't catch exactly
that.

517
00:43:41,210 --> 00:43:46,060
>>> So maybe just the ability to automatically
keep a copy of everything you print in the

518
00:43:46,060 --> 00:43:49,850
drive, so not choosing one or the other, but
archive.

519
00:43:49,850 --> 00:43:53,960
>>Akshay Kannan: I see. I see. That would
definitely be interesting looking into. I

520
00:43:53,960 --> 00:43:58,020
know there's definitely document retention
and privacy implications around that as well,

521
00:43:58,020 --> 00:44:02,450
because not everyone wants all their print
jobs saved, but it's definitely something

522
00:44:02,450 --> 00:44:05,000
worth looking into.
>>> Thanks.

523
00:44:05,000 --> 00:44:11,470
>>> I love Google Cloud Print by the way,
but my question is say you're in Google Drive,

524
00:44:11,470 --> 00:44:17,280
and you have a picture file, I think if you
print it now, it like -- it just comes out

525
00:44:17,280 --> 00:44:22,840
in a standard way. Are you guys like thinking
of any options -- like if you wanted a full

526
00:44:22,840 --> 00:44:26,220
page photo or like half page or like -- is
there a way to format it?

527
00:44:26,220 --> 00:44:30,910
>>Akshay Kannan: So currently your formatting
options are limited to what the printer service

528
00:44:30,910 --> 00:44:35,800
is and the capabilities. Definitely over time
we'll be expanding what those capabilities

529
00:44:35,800 --> 00:44:40,960
are. Some things like scaling would be options
that are -- that are part of the dialogue,

530
00:44:40,960 --> 00:44:45,880
but I think for now the best approach is to
client side just generate the PDF how you

531
00:44:45,880 --> 00:44:50,890
want it to look or just flow the image how
you want it to look and then send it to our

532
00:44:50,890 --> 00:44:57,890
service, but, yeah, definitely it's future
work for us, but not currently there.

533
00:44:58,839 --> 00:45:03,220
>>> At -- on my home system if I'm not logged
in, and I see my son is logged in on the computer,

534
00:45:03,220 --> 00:45:10,220
I can't print. Is there any work to have like
an appliance that could just sit on the network,

535
00:45:10,540 --> 00:45:16,690
you know, a tiny little box that would prevent
-- or provide the cloud services so that I

536
00:45:16,690 --> 00:45:21,270
don't have to worry about being logged in?
>>Akshay Kannan: There's -- that's definitely

537
00:45:21,270 --> 00:45:26,140
a -- something that's -- a developer could
technically build. We currently don't have

538
00:45:26,140 --> 00:45:29,170
anything like that.
>>Yuri Dolgov: We have source implementation

539
00:45:29,170 --> 00:45:34,980
for WRT support, in just -- it's in early
stage, but (indiscernible) we implemented

540
00:45:34,980 --> 00:45:40,760
this, and the problem he faced is basically
a drivers problem. This implementation supports

541
00:45:40,760 --> 00:45:47,680
pretty much every file as I remember, and,
well, maybe something else, but it won't support

542
00:45:47,680 --> 00:45:52,130
like every single printer. And it's hard to
implement one that will support every single

543
00:45:52,130 --> 00:45:53,690
printer.
>>> Where would I find that?

544
00:45:53,690 --> 00:45:57,290
>>Akshay Kannan: Currently we don't link to
it from anywhere, but we can talk to you after

545
00:45:57,290 --> 00:46:01,330
the presentation. It's currently a project
that's just on Google code that was published

546
00:46:01,330 --> 00:46:08,330
by another Google engineer who built this
as an enthusiastic side project.

547
00:46:10,240 --> 00:46:14,230
>>> So kind of back to the scaling.
Say you have a printer that doesn't print

548
00:46:14,230 --> 00:46:19,790
8.5 x 11, and you print an image or a PDF,
what happens?

549
00:46:19,790 --> 00:46:25,350
Does that get scaled down up to the media,
or does it print at some, you know, fixed

550
00:46:25,350 --> 00:46:29,390
resolution conversion?
>>Akshay Kannan: I believe some of that depends

551
00:46:29,390 --> 00:46:34,040
on the printer you're printing to. If there's
a fit-to-page option, then we currently service

552
00:46:34,040 --> 00:46:38,869
that and allow you to scale it down to whatever
the output format is. Otherwise, I think the

553
00:46:38,869 --> 00:46:44,490
default behavior is just to print it out exactly
how it is, so it might not be perfectly aligned

554
00:46:44,490 --> 00:46:51,330
when you're trying to print and 8.5 x 11 PDF
on your A4 paper. That is the current behavior.

555
00:46:51,330 --> 00:46:55,970
I think going forward we'll be working on
expanding fit-to-page capabilities. But that's

556
00:46:55,970 --> 00:47:00,950
why we were also mentioning the ideal experience
rather than scaling is you want your document

557
00:47:00,950 --> 00:47:06,590
to be reflowed which is why we do recommend
HTML for document submissions because we can

558
00:47:06,590 --> 00:47:10,630
intelligently flow that for whatever printer
it's ending up on.

559
00:47:10,630 --> 00:47:17,630
>>> But you don't necessarily have control
over what that source content is, if you want

560
00:47:17,970 --> 00:47:22,030
to print some third party content that you
were just browsing to, say?

561
00:47:22,030 --> 00:47:26,900
>>Akshay Kannan: Yes, if it's -- if it's,
for example, a PDF that's 8.5 x 11 that you

562
00:47:26,900 --> 00:47:32,940
want to print to A4 paper, then our best options
there are fitting to page or printing it out

563
00:47:32,940 --> 00:47:38,670
as it is, so we won't be able to intelligently
reflow that in that case.

564
00:47:38,670 --> 00:47:42,680
>>> Okay, thanks.
>>> Can you please talk a bit more about the

565
00:47:42,680 --> 00:47:47,430
setup you had on the first floor?
Can I make one of my printers public?

566
00:47:47,430 --> 00:47:51,960
>>Akshay Kannan: Currently the setup we have
on our first floor is actually just part of

567
00:47:51,960 --> 00:47:57,070
a pilot that we're running to try and make
printers public, so none of this UI is currently

568
00:47:57,070 --> 00:48:02,330
available. That being said, depending on the
-- we're basically trying this out as a pilot

569
00:48:02,330 --> 00:48:06,609
to see how people interact with it. I think
moving forward it might be something that

570
00:48:06,609 --> 00:48:12,960
we pursue more seriously and open up to developers
and to users.

571
00:48:12,960 --> 00:48:18,050
>>> If my printer is not cloud ready, how
do I print to it?

572
00:48:18,050 --> 00:48:23,740
>>Akshay Kannan: So if your printer is not
cloud-ready, you can set up the Chrome connector,

573
00:48:23,740 --> 00:48:28,240
so this is -- or there's a slide earlier.
Basically from within the -- if your printer

574
00:48:28,240 --> 00:48:34,140
is connected to a desktop or a laptop at home,
you can go to Chrome settings and enable from

575
00:48:34,140 --> 00:48:38,410
advanced options, Google cloud print connector,
which will take that printer and then share

576
00:48:38,410 --> 00:48:45,160
it with your Google account using that local
machine as a print server.

577
00:48:45,160 --> 00:48:49,240
>>> The printer cannot be a network printer?
>>Akshay Kannan: It could be a network printer,

578
00:48:49,240 --> 00:48:53,330
as long as -- the only restriction is that
the laptop or the computer that you're using

579
00:48:53,330 --> 00:48:59,310
as the Cloud Print connector has to be able
to see that printer locally or over the network.

580
00:48:59,310 --> 00:49:03,780
It has to be part of the OS print dialogue.
>>> Okay, thanks.

581
00:49:03,780 --> 00:49:10,780
>>> If the page has a specific CSS layout
for print media, will the print Cloud Print

582
00:49:13,289 --> 00:49:19,460
--
>>Yuri Dolgov: Specific print and layout so,

583
00:49:19,460 --> 00:49:26,460
yes.
>>> And also your https rasts API, can I set

584
00:49:28,060 --> 00:49:35,060
the orientation program -- like orientation
equals landscape or --

585
00:49:35,890 --> 00:49:39,540
>>Yuri Dolgov: Oh, yeah, it depends on the
printer. If printer supports orientation,

586
00:49:39,540 --> 00:49:44,370
we'll show orientation. If printer doesn't
support orientation, we don't do anything.

587
00:49:44,370 --> 00:49:50,890
>>> No, no, I mean, I guess certain printers
-- for some reason it has to do with drivers

588
00:49:50,890 --> 00:49:57,890
that's not -- exposed the API for software
to control whether it always asks the user

589
00:50:06,050 --> 00:50:13,050
what orientation, but were you able to experiment?
Have you done it to programmatically set the

590
00:50:13,780 --> 00:50:18,330
--
>>> With most printers you are able to programmatically

591
00:50:18,330 --> 00:50:23,720
set the orientation using the capabilities,
basically when you get your -- when you fetch

592
00:50:23,720 --> 00:50:29,080
the capabilities for that printer, you can
find the ones which correspond to orientation,

593
00:50:29,080 --> 00:50:32,530
set them in your print ticket, and then when
you do your submit call, you can specify that

594
00:50:32,530 --> 00:50:37,680
print ticket with the orientation specified.
>>> Thanks.

595
00:50:37,680 --> 00:50:44,660
>>> So you mentioned some esoteric encryption
solutions where I would implement my -- a

596
00:50:44,660 --> 00:50:51,660
shared key or something with my clients. If
I need an end-to-end security where Google

597
00:50:53,180 --> 00:50:56,980
never sees my content, would I have to do
that, or is there another option?

598
00:50:56,980 --> 00:51:01,260
>>Akshay Kannan: Yeah. So, as I mentioned
earlier, you can -- yeah, with end-to-end

599
00:51:01,260 --> 00:51:06,140
security such that we never see your content,
the best solution currently that we have is

600
00:51:06,140 --> 00:51:10,710
for you to encrypt it client side and decrypt
after receiving it. The disadvantage there

601
00:51:10,710 --> 00:51:16,050
is you lose the functionality for us to convert
the document because we can't read it, but

602
00:51:16,050 --> 00:51:23,050
it would be completely invisible to us in
that case.

603
00:51:24,010 --> 00:51:30,530
>>> Thanks.
>>> Hi, you said raster data is either PDF,

604
00:51:30,530 --> 00:51:36,359
is there any plan to support XPSS or --
>>Akshay Kannan: The question was is there

605
00:51:36,359 --> 00:51:43,359
plans to support XPS as an output format.
The answer is currently no. We're always looking

606
00:51:45,640 --> 00:51:52,070
into new formats to explore, but for the -- for
the foreseeable future, PDF and PW Raster

607
00:51:52,070 --> 00:51:57,710
are our primary formats going forward.
>>> Is it because XPS is from Microsoft?

608
00:51:57,710 --> 00:52:03,010
[ Laughter ]
>>Akshay Kannan: I'm not going to comment

609
00:52:03,010 --> 00:52:08,640
on that.
>>> So kudos on Cloud Print. It's a very useful

610
00:52:08,640 --> 00:52:14,760
facility. We have a network, a guest network
that we let people connect in on, and we have

611
00:52:14,760 --> 00:52:21,090
our printers on our private network. So Cloud
Print helps with that, being able to not have

612
00:52:21,090 --> 00:52:25,590
them on the same network, but one of the issues
is is being able to print from Word or other

613
00:52:25,590 --> 00:52:31,530
OS-level type printers. There's an open source
piece of software that lets you do that, but

614
00:52:31,530 --> 00:52:35,890
apparently with that piece of software it
only lets you print one copy at a time. Is

615
00:52:35,890 --> 00:52:40,119
there going to be anything supported by Google
that would allow, you know, printing from

616
00:52:40,119 --> 00:52:45,840
OSB first class, first class printing, like
from Mac OS or --

617
00:52:45,840 --> 00:52:49,950
>>Akshay Kannan: We -- yeah, we currently
don't have any plans to announce in that direction,

618
00:52:49,950 --> 00:52:56,050
but that's definitely something that -- that
we're looking into going forward, and currently

619
00:52:56,050 --> 00:53:00,590
I guess the one way to get around the fact
that that isn't currently there is to save

620
00:53:00,590 --> 00:53:05,980
it as a PDF and then print it through Cloud
Print in Chrome, but, yeah, there's -- we

621
00:53:05,980 --> 00:53:07,380
currently don't have stuff to announce but
--

622
00:53:07,380 --> 00:53:12,140
>>> It makes the -- the wife acceptance factor
pretty low when you have to go through and

623
00:53:12,140 --> 00:53:14,260
do those kind of gyrations.
>>Akshay Kannan: Absolutely.

624
00:53:14,260 --> 00:53:19,960
>>> The second thing is is someone had mentioned
about a device like one of the things I toyed

625
00:53:19,960 --> 00:53:26,170
around with is using raspberry pie and putting
Google Cloud Print on something like that.

626
00:53:26,170 --> 00:53:30,980
Is anyone at Google or on your team interested
in doing something like that, or would they

627
00:53:30,980 --> 00:53:35,850
support developers that were interested in
doing a project like that?

628
00:53:35,850 --> 00:53:40,240
Because that seems like that would be an ideal
solution to provide printers, especially if

629
00:53:40,240 --> 00:53:46,570
you have a large investment in Legacy printers
that you don't want to replace with Google

630
00:53:46,570 --> 00:53:50,420
Cloud Printers.
>>Akshay Kannan: Yeah. Absolutely. As I mentioned,

631
00:53:50,420 --> 00:53:54,800
we did have an engineer who put together a
reference implementation of a Cloud Print

632
00:53:54,800 --> 00:53:59,960
server on a router, and that is all open source
on Google code, so I can hand you my contact

633
00:53:59,960 --> 00:54:04,090
information or you can message the Google
groups and we'll be happy to point you to

634
00:54:04,090 --> 00:54:06,930
the code, and also put you in touch with the
guy who wrote it so --

635
00:54:06,930 --> 00:54:10,400
>>> Okay. Cool. Thanks.
>>> On that side.

636
00:54:10,400 --> 00:54:16,460
>>> I think he was before me.
>>> All right. I have two questions. First

637
00:54:16,460 --> 00:54:23,460
question is how do you handle updates to capabilities?
For example, you know, you have a server that

638
00:54:24,270 --> 00:54:29,880
got upgraded to handle duplex printing or
the toners are completely out, you can't print

639
00:54:29,880 --> 00:54:33,970
anymore. Is it over XMPP?
>>Akshay Kannan: So actually, we have an up

640
00:54:33,970 --> 00:54:38,210
-- I didn't mention this API, but we do have
an update API which allows you to do exactly

641
00:54:38,210 --> 00:54:44,230
that. It's basically an https call that the
printer makes. You specify new capabilities,

642
00:54:44,230 --> 00:54:48,110
what's changed since last time, and we'll
automatically update all of that server side.

643
00:54:48,110 --> 00:54:52,190
>>> That's over the tags, then?
>>Akshay Kannan: That's over https.

644
00:54:52,190 --> 00:54:58,040
>>> And the second question is -- I forgot.
All right, I'll come back.

645
00:54:58,040 --> 00:55:05,000
>>> Okay, so my questions are that when you
have multiple printers it's -- it gets quite

646
00:55:05,000 --> 00:55:11,160
hard to determine if they are -- you have
the three different connectivity options,

647
00:55:11,160 --> 00:55:18,050
and it's very hard to determine which of them
are connected in which ways, or at least used

648
00:55:18,050 --> 00:55:25,050
to be. So what's your opinion on that, and
in windows environments, in -- at least in

649
00:55:27,150 --> 00:55:33,140
Windows 7, you can get an image of the printer
so you can see, oh, that's -- that's one.

650
00:55:33,140 --> 00:55:38,690
Are there any developments in that direction?
>>Akshay Kannan: So I guess a couple of different

651
00:55:38,690 --> 00:55:43,700
approaches we have are we do in our dialogue
use iconography to distinguish different types

652
00:55:43,700 --> 00:55:50,040
of printers. We also have a rename functionality
that users can use on their side to name the

653
00:55:50,040 --> 00:55:54,840
printer such that you can differentiate between
different printers. I don't know if there's

654
00:55:54,840 --> 00:56:00,050
anything else I'm forgetting that kind of
helps along these lines, but we have a couple

655
00:56:00,050 --> 00:56:04,880
of solutions in place. I know there's also
a description field that you can specify as

656
00:56:04,880 --> 00:56:08,940
part of the printer which will show up in
the print dialogue which you can use to differentiate

657
00:56:08,940 --> 00:56:15,650
different printers.
>>> Okay. Thank you. Would it be possible

658
00:56:15,650 --> 00:56:22,650
to group printers like on departments on functionality-wise,
or it could also be -- say if you have a mobile

659
00:56:25,460 --> 00:56:32,180
device or it feels that, okay, you're in this
city or in this office, then these are the

660
00:56:32,180 --> 00:56:36,970
available printers from the ones that are
close nearby?

661
00:56:36,970 --> 00:56:41,490
>>Akshay Kannan: So currently the answer to
that is no, but we do sort of have a solution

662
00:56:41,490 --> 00:56:46,230
in place which is our search, our search in
our Cloud Print Web dialogue search is not

663
00:56:46,230 --> 00:56:50,619
only over printer names but over capabilities
and description fields. So one thing we do

664
00:56:50,619 --> 00:56:54,780
for example in Google is every printer has
a description field for the building that

665
00:56:54,780 --> 00:56:58,420
it's in, so all I have to do is type my building
name into the search dialogue and I'll see

666
00:56:58,420 --> 00:57:02,690
all the printers that are near me. Another
thing is we also do -- I think you mentioned

667
00:57:02,690 --> 00:57:06,840
grouping by capabilities, or what options
a printer can do, we do search over those

668
00:57:06,840 --> 00:57:11,060
as well, so if you search for I only want
to see color printers, you can type in color

669
00:57:11,060 --> 00:57:15,130
and just get a list of printers which can
print to color.

670
00:57:15,130 --> 00:57:21,099
>>> Okay, so new employees at Google, you
have like a thousand printers in your dialogues.

671
00:57:21,099 --> 00:57:24,570
>>Akshay Kannan: Uh-huh.
>>> Okay. Then you search for nearby --

672
00:57:24,570 --> 00:57:26,130
>>Akshay Kannan: Exactly.
>>> Okay.

673
00:57:26,130 --> 00:57:32,690
>>Yuri Dolgov: You usually only use a couple
of them, and once you use printer, they will

674
00:57:32,690 --> 00:57:39,690
be on top basically. So you only need to do
search once or twice.

675
00:57:40,900 --> 00:57:44,760
>>> Thank you.
>>> When you submit print jobs, you have to

676
00:57:44,760 --> 00:57:50,859
be locked in in the browser or in Android.
Is there any way that a server application

677
00:57:50,859 --> 00:57:57,859
might be able to submit print jobs?
The case I have, all the use case where we

678
00:57:57,880 --> 00:58:02,750
might be able to use this is one of our clients
runs a E commerce site, and they would love

679
00:58:02,750 --> 00:58:08,300
to be able to use Cloud Print to print older
notifications as they come in.

680
00:58:08,300 --> 00:58:14,290
>>Yuri Dolgov: You can do that. You can create
any account that you can share the printer

681
00:58:14,290 --> 00:58:21,290
with, and then just using AUTH, you can authenticate
server with this account and totally submit

682
00:58:24,369 --> 00:58:25,430
this account.
>>> Okay.

683
00:58:25,430 --> 00:58:30,380
>>Akshay Kannan: Yeah, we support both AUTH
and client login for authentication, so you

684
00:58:30,380 --> 00:58:35,320
could use that server side to authenticate
into our API with a dummy Google account and

685
00:58:35,320 --> 00:58:40,590
then use that to submit print jobs.
>>> Excellent. Thank you.

686
00:58:40,590 --> 00:58:45,790
>>Akshay Kannan: Sure.
>>> Okay. I'm wondering what kind of data

687
00:58:45,790 --> 00:58:51,680
has Google extract from my print jobs? Because
privacy (indiscernible) but there must be

688
00:58:51,680 --> 00:58:57,000
some other reasons to process data.
>>Akshay Kannan: If the source and destination

689
00:58:57,000 --> 00:59:00,660
formats of your print job are the same, so
let's say you're printing a PDF to a PDF,

690
00:59:00,660 --> 00:59:06,109
absolutely nothing. We just send the document
over to the printer without any conversion

691
00:59:06,109 --> 00:59:13,109
on our side. In terms of -- so in terms of
conversion, we do use a conversion service

692
00:59:13,869 --> 00:59:18,220
to convert your document to the format it
needs to be in, but, yeah, as I mentioned

693
00:59:18,220 --> 00:59:23,390
before, the converted document will not persist
on our server for more than 30 days. The only

694
00:59:23,390 --> 00:59:30,240
thing I guess that stays left over are standard
http logs, and also I guess the fact that

695
00:59:30,240 --> 00:59:33,340
within your account you'll see these -- you'll
see your print job history.

696
00:59:33,340 --> 00:59:39,930
>>> So Google has no content extraction kind
of -- if I print my bank account statements

697
00:59:39,930 --> 00:59:42,510
it's not --
>>Akshay Kannan: Not at all. We don't use

698
00:59:42,510 --> 00:59:45,299
your print jobs to serve ads.
[ Laughter ]

699
00:59:45,299 --> 00:59:52,299
>>> Is there any update on the Android as
an official Cloud Print, because as I recall,

700
00:59:56,570 --> 01:00:03,170
it was still something that was semi unofficial.
>>Akshay Kannan: So, yeah, we are working

701
01:00:03,170 --> 01:00:09,490
on integrating with the Android properties
of Google Apps going forward, but as far as

702
01:00:09,490 --> 01:00:13,099
platform integration goes, we don't have anything
to announce at the moment.

703
01:00:13,099 --> 01:00:16,190
>>> And then secondly, I think this has been
asked about three or four different ways,

704
01:00:16,190 --> 01:00:23,190
at least, but I'm not sure that I got it completely
straight. In our office, for instance, we

705
01:00:23,820 --> 01:00:30,820
have a large group of people that come in
and out, and we have Legacy printers, and

706
01:00:31,670 --> 01:00:37,940
I didn't really want to leave the Legacy printer
connected to a machine on my account, since

707
01:00:37,940 --> 01:00:43,730
I'm not there all the time, amongst other
things, but also the machines themselves are

708
01:00:43,730 --> 01:00:46,730
generally public, so I ended up putting it
on one of the administrator's -- one of the

709
01:00:46,730 --> 01:00:51,680
administrator's accounts and leaving it there,
but it doesn't seem to be any way to have

710
01:00:51,680 --> 01:00:58,090
that done without having a specific account
which you then can delegate out of. That's,

711
01:00:58,090 --> 01:01:00,900
I think, the summarization of everything that
I've heard.

712
01:01:00,900 --> 01:01:06,279
>>Akshay Kannan: In terms of accounts are
you referring to like log-in accounts?

713
01:01:06,279 --> 01:01:12,930
>>> They have to have a Gmail account in order
to be able to have a printer -- in order to

714
01:01:12,930 --> 01:01:18,000
be able to attach it to a legacy printer,
which they can then share. And there's no

715
01:01:18,000 --> 01:01:22,010
other way around that that I can figure.
>>> Just in general, enterprise printing I

716
01:01:22,010 --> 01:01:27,609
guess would be the question and how do you
take a set of enterprise printers and let

717
01:01:27,609 --> 01:01:33,330
a specific set of people or even make it public,
which is kind of what you're doing downstairs.

718
01:01:33,330 --> 01:01:36,550
Is that going to be available soon or when
is that going to be available?

719
01:01:36,550 --> 01:01:41,240
>>Akshay Kannan: I guess in terms of both
questions, with having an account in order

720
01:01:41,240 --> 01:01:46,130
to register a printer, you do need a Google
account in order to register your printer

721
01:01:46,130 --> 01:01:49,510
with Cloud Print. That being said, it doesn't
have to be your Google account or someone

722
01:01:49,510 --> 01:01:52,180
else's.
A lot of the enterprises that we work with,

723
01:01:52,180 --> 01:01:57,940
to answer your question, use what they call
a roll account, which is just a dedicated

724
01:01:57,940 --> 01:02:02,930
Google account that they set up for the express
purpose of printing that they can share access

725
01:02:02,930 --> 01:02:07,440
to, and they'll use that to run the print
server so that way no one has to use their

726
01:02:07,440 --> 01:02:11,210
personal account to --
>>> Is there a way to -- so if you have a

727
01:02:11,210 --> 01:02:16,270
set of employees, is there a way to share
the printer with them or basically make it

728
01:02:16,270 --> 01:02:20,720
available in their preferences so they don't
have to be accepting invitations for this?

729
01:02:20,720 --> 01:02:25,520
>>Akshay Kannan: Absolutely. So we're working
on expanding more of that going forward, but

730
01:02:25,520 --> 01:02:29,119
what you can already currently do is share
it with a group.

731
01:02:29,119 --> 01:02:31,910
So for example, let's say you have a Google
group that encompasses everyone within your

732
01:02:31,910 --> 01:02:36,250
domain. You can from within the share interface
that we demoed earlier, just type in that

733
01:02:36,250 --> 01:02:39,420
group.
And all that needs to happen is the owner

734
01:02:39,420 --> 01:02:46,420
of that group can accept the invitation on
behalf of people in the organization.

735
01:02:46,610 --> 01:02:52,050
>>> Okay. Thanks.
>>> I develop an application that actually

736
01:02:52,050 --> 01:02:58,410
works like print server, and the printer is
a terminal printer, and I control the printer

737
01:02:58,410 --> 01:03:05,410
by escape comments. So I open the LPT port
and send comments. How about in that case?

738
01:03:06,900 --> 01:03:12,670
>>Akshay Kannan: So this is with a terminal
printer that you account to over LPR?

739
01:03:12,670 --> 01:03:17,250
>>> Yes, but it's connected to my applications.
There is no drivers, there is no --

740
01:03:17,250 --> 01:03:22,400
>>Akshay Kannan: I see. If there's no standard
print drivers, we won't be able to integrate

741
01:03:22,400 --> 01:03:25,680
that with Cloud Print.
So currently -- I'm assuming you want to set

742
01:03:25,680 --> 01:03:30,220
up the Cloud Print connector from within Chrome
to share it with your Cloud Print account?

743
01:03:30,220 --> 01:03:35,140
In that case we only take the local printers
which are actually in your OS print dialogue

744
01:03:35,140 --> 01:03:40,450
to share. So we won't be sharing it unless
it's -- unless it uses the standard OS print

745
01:03:40,450 --> 01:03:47,130
mechanism to receive print jobs.
>>> Okay. But is it -- can I make a connector

746
01:03:47,130 --> 01:03:50,190
to the Google server? Okay.
>>Akshay Kannan: Yeah.

747
01:03:50,190 --> 01:03:57,190
>>> I remembered the question now.
So you mentioned you can print to your mobile

748
01:04:00,040 --> 01:04:06,109
Nexus, right? What does that mean? Like it's
just PDF on the flash drive?

749
01:04:06,109 --> 01:04:10,570
>>Akshay Kannan: Exactly. What we do is we
take the job, we convert it to a PDF and then

750
01:04:10,570 --> 01:04:16,530
we push a notification to your device that
starts a download of that PDF. So you don't

751
01:04:16,530 --> 01:04:20,570
even have to be running Chrome as Android.
It runs as a background service using Android

752
01:04:20,570 --> 01:04:27,570
push. So you can print anything to your phone
and it just shows up as a PDF on 
the device.

753
01:04:30,190 --> 01:04:32,000
Next questions.
>>> Getting back to the non-cloud-ready printer.

754
01:04:32,000 --> 01:04:35,540
You said you simply do this from a PC or something
like that. Is there some software you have

755
01:04:35,540 --> 01:04:40,420
to load on to the PC in order for it to act
as the server? I assume it's acting as a cloud-ready

756
01:04:40,420 --> 01:04:42,780
server.
>>Akshay Kannan: So currently it works within

757
01:04:42,780 --> 01:04:46,630
Google Chrome. You have to have Chrome installed
on that PC.

758
01:04:46,630 --> 01:04:50,510
>>> Chrome OS?
>>Akshay Kannan: No, just the Chrome browser.

759
01:04:50,510 --> 01:04:54,849
So from within the settings on Google Chrome
you can configure your local printers to be

760
01:04:54,849 --> 01:04:57,740
cloud ready. And there's no additional software
apart from Google Chrome required.

761
01:04:57,740 --> 01:05:04,740
>>> So then it acts as a cloud-ready server.
>>Akshay Kannan: Exactly.

762
01:05:05,540 --> 01:05:07,450
>>> Okay.
>>> One more.

763
01:05:07,450 --> 01:05:14,450
Can you tell us about Cloud Print integration
with Google Apps, like sharing to groups,

764
01:05:14,700 --> 01:05:19,080
et cetera?
>>Akshay Kannan: Yeah. In terms of apps integration,

765
01:05:19,080 --> 01:05:21,660
we do support -- is this for enterprise in
particular?

766
01:05:21,660 --> 01:05:25,220
>>> Yeah.
>>Akshay Kannan: Yeah. For enterprise integration

767
01:05:25,220 --> 01:05:30,980
we have -- currently our consumer solution
for most part is our enterprise solution.

768
01:05:30,980 --> 01:05:36,150
There are plans to move that into a more custom
enterprise solution going forward.

769
01:05:36,150 --> 01:05:43,150
But yeah, for now integration we offer at
a basic level is -- as we mentioned you can

770
01:05:43,880 --> 01:05:49,940
configure Chrome to run as a headless server
on Linux and then also with group sharing

771
01:05:49,940 --> 01:05:54,140
you can easily share printers with groups
of people.

772
01:05:54,140 --> 01:06:01,140
>>> So if that's -- if you add a new user
to a group, if we have a group called printers

773
01:06:02,060 --> 01:06:08,580
and we have five or ten printers connected
to that group and you add a new user to that

774
01:06:08,580 --> 01:06:14,500
group, would he automatically have the print
when he log on to his new account?

775
01:06:14,500 --> 01:06:18,230
>>Yuri Dolgov: Yes.
>>> Okay. Excellent, thanks.

776
01:06:18,230 --> 01:06:24,720
>>Akshay Kannan: Cool. Do we have one more?
All right. Last question.

777
01:06:24,720 --> 01:06:31,099
>>> Normally the driverless printing is a
myth, used to be, but you guys has really

778
01:06:31,099 --> 01:06:37,150
done a good job that it can be a reality.
I really appreciate that.

779
01:06:37,150 --> 01:06:38,280
>>Akshay Kannan: Thank you.
>>Yuri Dolgov: Thank you.

780
01:06:38,280 --> 01:06:40,020
>>Akshay Kannan: Thank you so much. Thanks
a lot, everyone.

781
01:06:40,020 --> 01:06:40,270
[ Applause ]

