1
00:00:03,501 --> 00:00:05,167
Irish: We're here.

2
00:00:05,167 --> 00:00:07,334
We're gonna be talking about
the Chrome Developer Tools.

3
00:00:07,334 --> 00:00:09,334
Uh, my name is Paul Irish.

4
00:00:09,334 --> 00:00:11,667
I am a developer advocate
on the Google Chrome team.

5
00:00:11,667 --> 00:00:13,501
Feldman: And I'm Pavel Feldman,

6
00:00:13,501 --> 00:00:15,501
software engineer working on
Chrome Dev Tools

7
00:00:15,501 --> 00:00:17,200
and WebKit Web Inspector.

8
00:00:17,200 --> 00:00:19,334
Irish: So we're gonna be talking
about, uh,

9
00:00:19,334 --> 00:00:21,167
what's inside the dev tools,

10
00:00:21,167 --> 00:00:23,501
a lot of features
that you might not be aware of,

11
00:00:23,501 --> 00:00:25,834
a lot of features
that are brand-new to it, uh,

12
00:00:25,834 --> 00:00:27,834
and landed within
the past 12 months.

13
00:00:27,834 --> 00:00:30,000
So hopefully you'll--the things
you'll learn in this session

14
00:00:30,000 --> 00:00:32,000
will make you
a more productive developer.

15
00:00:32,000 --> 00:00:34,334
I should point out, if you want
to follow along to the slides,

16
00:00:34,334 --> 00:00:36,334
there's a few links
inside of them.

17
00:00:36,334 --> 00:00:38,667
The short link is right there,
speaker feedback beneath that,

18
00:00:38,667 --> 00:00:41,000
and if you feel like tweeting,
the hash tag's below.

19
00:00:41,000 --> 00:00:42,834
Feldman: But before we start,

20
00:00:42,834 --> 00:00:45,000
Paul, can I ask a couple
of questions here?

21
00:00:45,000 --> 00:00:46,667
Irish: Please.

22
00:00:46,667 --> 00:00:49,000
Feldman: Please raise your hand
if you know what Firebug is,

23
00:00:49,000 --> 00:00:50,667
just to calibrate.

24
00:00:50,667 --> 00:00:52,667
Irish: Hmm.
Feldman: Okay, that's a lot.

25
00:00:52,667 --> 00:00:54,834
Now who uses Firebug
on a regular basis?

26
00:00:54,834 --> 00:00:56,501
Oh, that's a lot.

27
00:00:56,501 --> 00:00:58,667
Now who knows
what Chrome Dev Tools is?

28
00:00:58,667 --> 00:01:00,434
Oh, that's good.

29
00:01:00,434 --> 00:01:02,667
And who uses it
on a regular basis?

30
00:01:02,667 --> 00:01:04,667
That's a fair share.
Irish: Yeah.

31
00:01:04,667 --> 00:01:07,000
Feldman: Should we just skip it
all and go straight to the Q&A?

32
00:01:07,000 --> 00:01:09,334
Irish: Yeah, yeah, yeah.
A lot of you guys know this.

33
00:01:09,334 --> 00:01:11,667
All right, well, the first thing
that I wanted to point out

34
00:01:11,667 --> 00:01:14,167
is that the Chrome Dev Tools

35
00:01:14,167 --> 00:01:16,501
is--is a web app.

36
00:01:16,501 --> 00:01:19,667
And to show this, let me--
let me just show you this.

37
00:01:19,667 --> 00:01:22,167
So this slide deck here
is also a web app,

38
00:01:22,167 --> 00:01:25,000
and I'm gonna bring up
the dev tools on the Inspector.

39
00:01:25,000 --> 00:01:27,000
Let me dock this down here.

40
00:01:27,000 --> 00:01:29,834
Now can you guys in the back
see this text down here?

41
00:01:29,834 --> 00:01:32,501
No, probably not.

42
00:01:32,501 --> 00:01:35,834
Let me, uh, let me bump
that up for you guys.

43
00:01:35,834 --> 00:01:38,167
Go over here. Scroll down.

44
00:01:38,167 --> 00:01:40,000
Do, do, do.

45
00:01:40,000 --> 00:01:42,000
Yeah, there we go.

46
00:01:42,000 --> 00:01:44,334
Better for you guys?
Feldman: [laughs]

47
00:01:44,334 --> 00:01:48,000
Irish: Good. Okay. I think we'll
leave it about there. Yeah.

48
00:01:48,000 --> 00:01:50,167
So, uh, yeah,
what I want to point out

49
00:01:50,167 --> 00:01:52,167
is that the dev tools,

50
00:01:52,167 --> 00:01:54,501
it's just made out
of HTML, CSS, and JavaScript,

51
00:01:54,501 --> 00:01:56,501
all these panes,
all these views.

52
00:01:56,501 --> 00:01:58,934
It's not a lot of C++
black magic voodoo going on.

53
00:01:58,934 --> 00:02:01,334
It's just--the things
that you're familiar with

54
00:02:01,334 --> 00:02:03,234
are the same things
that built this.

55
00:02:03,234 --> 00:02:06,667
[clears throat] So, um, now that
we got that out of the way,

56
00:02:06,667 --> 00:02:08,667
this is what
we're gonna talk about.

57
00:02:08,667 --> 00:02:12,000
Uh, we're gonna talk a little
bit about styling and CSS,

58
00:02:12,000 --> 00:02:14,167
go into the network layer side
of things.

59
00:02:14,167 --> 00:02:16,167
We're gonna cover a few tricks

60
00:02:16,167 --> 00:02:18,334
to make you more productive
inside the console,

61
00:02:18,334 --> 00:02:20,667
Um, dig into script debugging.

62
00:02:20,667 --> 00:02:22,667
And then we're gonna cover

63
00:02:22,667 --> 00:02:24,667
a brand--a couple
brand-new features, uh,

64
00:02:24,667 --> 00:02:26,667
that we're unveiling today.

65
00:02:26,667 --> 00:02:28,501
Um, yeah.

66
00:02:28,501 --> 00:02:31,701
But for those of you that, uh,
that didn't raise your hand, uh,

67
00:02:31,701 --> 00:02:35,000
when we asked who's familiar
with the Chrome Dev Tools,

68
00:02:35,000 --> 00:02:37,501
I'm gonna briefly summarize
what it is.

69
00:02:37,501 --> 00:02:39,334
Uh, the developer tools

70
00:02:39,334 --> 00:02:41,334
are a set
of integrated browser tools

71
00:02:41,334 --> 00:02:43,334
available right inside
the browser.

72
00:02:43,334 --> 00:02:45,334
There's no extra add-on,
no extension needed.

73
00:02:45,334 --> 00:02:47,667
Um, the whole goal of them

74
00:02:47,667 --> 00:02:49,834
is to make you
a more productive developer.

75
00:02:49,834 --> 00:02:52,000
If you're using them
as effectively as you can,

76
00:02:52,000 --> 00:02:55,000
uh, you're able to do a lot
of manipulation to the page,

77
00:02:55,000 --> 00:02:56,667
iterate really quickly,

78
00:02:56,667 --> 00:02:58,667
um, and--and make
your changes right here

79
00:02:58,667 --> 00:03:00,834
in-line in the--in the browser.

80
00:03:00,834 --> 00:03:02,834
You don't have to do that

81
00:03:02,834 --> 00:03:04,834
"go back to the file,
save, refresh,"

82
00:03:04,834 --> 00:03:06,501
kind of trial-and-error dance.

83
00:03:06,501 --> 00:03:08,501
You can make it
all happen iteratively

84
00:03:08,501 --> 00:03:10,167
right inside the browser.

85
00:03:10,167 --> 00:03:12,167
Um, there's a lot
of functionality

86
00:03:12,167 --> 00:03:14,501
regarding DOM, styles,
um, script debugging.

87
00:03:14,501 --> 00:03:16,167
Uh, there's a console.

88
00:03:16,167 --> 00:03:18,334
There's audits so you can get
performance data.

89
00:03:18,334 --> 00:03:20,501
There's, um, even you can get
the--the rendering...

90
00:03:20,501 --> 00:03:22,501
[laughter]
Irish: Thanks very much--

91
00:03:22,501 --> 00:03:24,667
the rendering, like, data
in the timeline view

92
00:03:24,667 --> 00:03:26,667
and then the network layer.

93
00:03:26,667 --> 00:03:29,000
And, well, um, there's a lot
of really good stuff.

94
00:03:29,000 --> 00:03:31,167
Feldman: Okay, that's good.
Irish: Thanks for that.

95
00:03:31,167 --> 00:03:35,000
Feldman: [laughs]
[applause]

96
00:03:35,000 --> 00:03:37,701
Irish: Okay. [clears throat]
Feldman: [laughs]

97
00:03:37,701 --> 00:03:39,834
Irish: So what
we're gonna do first

98
00:03:39,834 --> 00:03:43,167
is we're gonna talk
a little bit about styling.

99
00:03:43,167 --> 00:03:45,334
Start off kind of
with the basics--

100
00:03:45,334 --> 00:03:47,334
So let's see.

101
00:03:47,334 --> 00:03:50,501
I have a, uh, I'm using
command Alt--command Alt + I

102
00:03:50,501 --> 00:03:52,501
to, uh, toggle up and down,

103
00:03:52,501 --> 00:03:55,167
but I could also just right
click and hit "Inspect" here

104
00:03:55,167 --> 00:03:57,167
to select these <li>s.

105
00:03:57,167 --> 00:03:59,167
So I got these <li>s.

106
00:03:59,167 --> 00:04:01,100
They're, uh,
they're looking okay,

107
00:04:01,100 --> 00:04:03,334
but I think they need
a little bit of love,

108
00:04:03,334 --> 00:04:05,501
so I'm just gonna add
some style to them.

109
00:04:05,501 --> 00:04:08,000
Uh, I'm gonna double click in
this empty area right down here,

110
00:04:08,000 --> 00:04:10,000
and we can add a new style.

111
00:04:10,000 --> 00:04:14,000
And so, I don't know, I'm gonna
try out "background red." Yeah.

112
00:04:14,000 --> 00:04:15,667
So I'm tabbing.

113
00:04:15,667 --> 00:04:17,501
You'll notice
I'm tabbing between

114
00:04:17,501 --> 00:04:19,334
the property and the value here.

115
00:04:19,334 --> 00:04:21,667
You don't have to type a colon.
It's nice and easy.

116
00:04:21,667 --> 00:04:24,000
I can tab down
and set up a new one.

117
00:04:24,000 --> 00:04:25,834
That's all well and good.

118
00:04:25,834 --> 00:04:27,834
I also notice that I do have

119
00:04:27,834 --> 00:04:29,834
auto completion
here on the property, right?

120
00:04:29,834 --> 00:04:32,000
So you can save
a little bit of time.

121
00:04:32,000 --> 00:04:34,334
You can just type "back,"
hit tab, go over to the value.

122
00:04:34,334 --> 00:04:36,334
But now we also have
auto completion

123
00:04:36,334 --> 00:04:38,167
on the value names, too.

124
00:04:38,167 --> 00:04:40,501
So this is good especially
with longer, uh, color names

125
00:04:40,501 --> 00:04:42,667
like, um, one of the most
delicious colors--

126
00:04:42,667 --> 00:04:44,701
papaya whip.
[laughter]

127
00:04:44,701 --> 00:04:46,834
If I was making
a smoothie web site,

128
00:04:46,834 --> 00:04:49,000
I would put papaya whip
all over it.

129
00:04:49,000 --> 00:04:51,167
Also really helpful,
um, with colors

130
00:04:51,167 --> 00:04:54,334
that you just kind of forget
the name of sometimes.

131
00:04:54,334 --> 00:04:56,834
It's like, uh, fuchsia is--

132
00:04:56,834 --> 00:04:59,834
fuchsia--fuch--fuch--

133
00:04:59,834 --> 00:05:02,167
oh! fuchsia.

134
00:05:02,167 --> 00:05:04,501
Oh, magenta. [laughs]
[laughter]

135
00:05:04,501 --> 00:05:07,000
Irish: Yes, in fact,
fuchsia and magenta

136
00:05:07,000 --> 00:05:09,000
are the exact same color.

137
00:05:09,000 --> 00:05:11,000
Fuchsia's kind of tough
to remember sometimes.

138
00:05:11,000 --> 00:05:13,000
But, um, I don't know.

139
00:05:13,000 --> 00:05:15,167
You probably don't use
named colors a whole lot,

140
00:05:15,167 --> 00:05:17,667
and the cool thing here is that
you can click this little, uh,

141
00:05:17,667 --> 00:05:19,501
the color swatch

142
00:05:19,501 --> 00:05:21,834
and just iterate through
the different color formats.

143
00:05:21,834 --> 00:05:25,334
So I can toggle over
to RGB or HSL.

144
00:05:25,334 --> 00:05:27,501
How many people familiar
with, uh, HSL,

145
00:05:27,501 --> 00:05:29,501
hue, saturation, and lightness?

146
00:05:29,501 --> 00:05:31,667
One of my favorite ways
to manipulate color.

147
00:05:31,667 --> 00:05:33,667
So now I can go over here.

148
00:05:33,667 --> 00:05:35,667
I'm gonna go
into the saturation.

149
00:05:35,667 --> 00:05:37,834
I'm just gonna hit "down"
on my keyboard,

150
00:05:37,834 --> 00:05:39,834
bring down the saturation.

151
00:05:39,834 --> 00:05:42,000
I could hold down Shift
and jump by 10s.

152
00:05:42,000 --> 00:05:43,667
There we go.

153
00:05:43,667 --> 00:05:45,834
Bring down the brightness,
the--the lightness.

154
00:05:45,834 --> 00:05:48,000
Get a nice deep purple here.

155
00:05:48,000 --> 00:05:49,834
It's pretty good.

156
00:05:49,834 --> 00:05:52,667
So I can use that and kind of
tweak it as I like in HSL,

157
00:05:52,667 --> 00:05:54,834
and then maybe
I'll go back to HEX

158
00:05:54,834 --> 00:05:57,000
and then copy this
into my style sheet,

159
00:05:57,000 --> 00:05:59,167
'cause that's what
I need to be using.

160
00:05:59,167 --> 00:06:01,667
So you could be doing a lot
of manipulation right in here.

161
00:06:01,667 --> 00:06:03,834
Now other times

162
00:06:03,834 --> 00:06:06,667
you're--you're adding styles
in here,

163
00:06:06,667 --> 00:06:08,834
but there might be a case

164
00:06:08,834 --> 00:06:12,501
where you just don't have
a style in here to tack onto.

165
00:06:12,501 --> 00:06:15,167
So right now I'm selecting

166
00:06:15,167 --> 00:06:17,334
the current slide that we're on,

167
00:06:17,334 --> 00:06:20,667
and I might just not have
any hook to add on--on--

168
00:06:20,667 --> 00:06:22,667
add on my style to.

169
00:06:22,667 --> 00:06:25,834
So up here in the top right
I can hit this little gear icon,

170
00:06:25,834 --> 00:06:28,501
and here's "New Style Rule."

171
00:06:28,501 --> 00:06:30,334
And the cool thing

172
00:06:30,334 --> 00:06:32,501
is that the--that the Dev Tools
automatically guesses

173
00:06:32,501 --> 00:06:34,667
at what would be the most
appropriate selector

174
00:06:34,667 --> 00:06:36,667
for what I currently
have selected,

175
00:06:36,667 --> 00:06:38,667
and it's got "Current,"
current class,

176
00:06:38,667 --> 00:06:40,667
and that works for me.

177
00:06:40,667 --> 00:06:42,834
So I'll add a little style
to that.

178
00:06:42,834 --> 00:06:45,000
I like this slide.
I feel good about it.

179
00:06:45,000 --> 00:06:47,000
We're gonna add an outline.

180
00:06:47,000 --> 00:06:50,000
I'm gonna make it 15 pixels,
solid, and, um,

181
00:06:50,000 --> 00:06:52,501
one of my favorite colors--

182
00:06:52,501 --> 00:06:54,667
yeah...
[laughter]

183
00:06:54,667 --> 00:06:56,667
Irish: Pretty dope color.

184
00:06:56,667 --> 00:06:59,167
Yeah, I think that--
that works out well for me.

185
00:06:59,167 --> 00:07:01,334
Yeah, so, uh,

186
00:07:01,334 --> 00:07:05,000
so we're adding styles
completely, uh, on the fly

187
00:07:05,000 --> 00:07:07,000
with brand-new selectors.

188
00:07:07,000 --> 00:07:09,000
So that's pretty nice.

189
00:07:09,000 --> 00:07:11,334
Um, I'm gonna move forward.

190
00:07:11,334 --> 00:07:14,167
Now the thing is is that
I just made all these changes

191
00:07:14,167 --> 00:07:16,501
live inside the elements field.

192
00:07:16,501 --> 00:07:19,501
Now if I look over
at these changes,

193
00:07:19,501 --> 00:07:22,000
I'm gonna click over
to "Resources,"

194
00:07:22,000 --> 00:07:24,501
and you'll see right here

195
00:07:24,501 --> 00:07:26,834
the changes that I just made
over in "Elements"

196
00:07:26,834 --> 00:07:29,000
I'm now seeing here
on "Resources"

197
00:07:29,000 --> 00:07:30,667
highlighted in purple

198
00:07:30,667 --> 00:07:33,000
to let me know that
this stuff has now changed.

199
00:07:33,000 --> 00:07:34,667
Um, so what's happening

200
00:07:34,667 --> 00:07:37,000
is all the changes that you make
over in "Elements"

201
00:07:37,000 --> 00:07:40,167
we keep track of them now,
um, which is really cool.

202
00:07:40,167 --> 00:07:42,334
So you have your full
style sheet view

203
00:07:42,334 --> 00:07:44,334
plus the changes
that I was making,

204
00:07:44,334 --> 00:07:46,501
like iteratively on the fly,
kind of bite-size changes,

205
00:07:46,501 --> 00:07:48,834
but now I get it
at the style sheet level.

206
00:07:48,834 --> 00:07:50,834
And then you'll see down here,

207
00:07:50,834 --> 00:07:53,834
this little arrow next
to "styles.css."

208
00:07:53,834 --> 00:07:56,167
We're actually keeping
revision history

209
00:07:56,167 --> 00:07:58,501
of all the changes
that you're making.

210
00:07:58,501 --> 00:08:00,434
Pretty rad, right?

211
00:08:00,434 --> 00:08:03,000
So I could right click,
actually, and be like,

212
00:08:03,000 --> 00:08:06,334
you know what, I'm just gonna go
back to how things were,

213
00:08:06,334 --> 00:08:08,334
revert back to that.

214
00:08:08,334 --> 00:08:10,834
Or you know what, I was kind of
liking what I was doing.

215
00:08:10,834 --> 00:08:12,834
We'll stick with that.

216
00:08:12,834 --> 00:08:14,834
And you have full
revision history, too.

217
00:08:14,834 --> 00:08:16,667
That's pretty cool.

218
00:08:16,667 --> 00:08:18,834
And this means
that you can be doing

219
00:08:18,834 --> 00:08:21,000
a lot of your development
inside the browser.

220
00:08:21,000 --> 00:08:23,334
But then you get the problem,
"Okay, I made the changes.

221
00:08:23,334 --> 00:08:25,334
"I like where it's at.

222
00:08:25,334 --> 00:08:27,667
"Now do I go over here
and kind of select these

223
00:08:27,667 --> 00:08:30,000
and copy and paste it back
into my style sheet?"

224
00:08:30,000 --> 00:08:32,334
You know, I've done this a lot.
There's a better way.

225
00:08:32,334 --> 00:08:34,667
So you can actually
just right click here

226
00:08:34,667 --> 00:08:36,501
and click "Save As"

227
00:08:36,501 --> 00:08:39,000
and so immediately saved that
file back to the file system,

228
00:08:39,000 --> 00:08:41,000
overriding your old style sheet.

229
00:08:41,000 --> 00:08:43,334
So you can just do
a nice quick area loop

230
00:08:43,334 --> 00:08:45,334
without even going back
to your editor.

231
00:08:45,334 --> 00:08:48,167
[applause]

232
00:08:48,167 --> 00:08:51,501
Irish: Yes.

233
00:08:51,501 --> 00:08:53,501
So that's pretty cool,

234
00:08:53,501 --> 00:08:55,400
but, um, right now--
I don't know.

235
00:08:55,400 --> 00:08:58,334
I'm looking at this page.
It still looks a little drab.

236
00:08:58,334 --> 00:09:00,601
I-I think it needs
something else.

237
00:09:00,601 --> 00:09:03,667
So I'm gonna open up, uh,

238
00:09:03,667 --> 00:09:05,834
this pattern gallery here.

239
00:09:05,834 --> 00:09:08,667
Yeah, so this is actually, um,

240
00:09:08,667 --> 00:09:11,200
a collection of CSS gradients

241
00:09:11,200 --> 00:09:13,334
made by...
who's a friend and developer

242
00:09:13,334 --> 00:09:15,501
and a few other people.

243
00:09:15,501 --> 00:09:17,667
These are just made out
of CSS gradients.

244
00:09:17,667 --> 00:09:19,667
Um, and she's making these--

245
00:09:19,667 --> 00:09:21,667
these really impressive
patterns, really cool.

246
00:09:21,667 --> 00:09:23,667
So I'm gonna click
into this one.

247
00:09:23,667 --> 00:09:25,667
I like this one a lot.

248
00:09:25,667 --> 00:09:27,834
And, uh, you'll see this is
actually the gradient

249
00:09:27,834 --> 00:09:29,834
that constructs this pattern.

250
00:09:29,834 --> 00:09:32,000
Now I'm gonna select this

251
00:09:32,000 --> 00:09:34,868
and go back to my slides,

252
00:09:34,868 --> 00:09:38,501
go up here and select the body.

253
00:09:38,501 --> 00:09:40,834
Um, this looks good.

254
00:09:40,834 --> 00:09:44,200
I think I'll just
double click here, paste,

255
00:09:44,200 --> 00:09:46,167
add that in.

256
00:09:46,167 --> 00:09:48,167
Looks pretty sharp to me.

257
00:09:48,167 --> 00:09:50,167
Um, I could also, you know,

258
00:09:50,167 --> 00:09:52,501
the--the thing that
we're really excited about now

259
00:09:52,501 --> 00:09:54,501
is that while I have

260
00:09:54,501 --> 00:09:56,834
the new changes right here
over in the style sheet

261
00:09:56,834 --> 00:09:58,834
I can now actually double click,

262
00:09:58,834 --> 00:10:02,000
and I have free full--

263
00:10:02,000 --> 00:10:04,000
freeform style sheet editing.

264
00:10:04,000 --> 00:10:07,334
So I can just add--manipulate
this style sheet

265
00:10:07,334 --> 00:10:09,334
just like as in an editor,

266
00:10:09,334 --> 00:10:12,167
so, you know, adding line--
white space to just make sure

267
00:10:12,167 --> 00:10:14,834
that this stuff looks
the way that I want it to,

268
00:10:14,834 --> 00:10:17,834
or perhaps I'm just gonna
get rid of this completely

269
00:10:17,834 --> 00:10:21,667
and go back to a background

270
00:10:21,667 --> 00:10:24,000
all of--I don't know.

271
00:10:24,000 --> 00:10:26,667
Any--any color recommendations?

272
00:10:26,667 --> 00:10:28,334
woman: Purple.

273
00:10:28,334 --> 00:10:30,501
Irish: Purple. Like it.

274
00:10:30,501 --> 00:10:33,501
Yeah, so I can do all my editing
right here

275
00:10:33,501 --> 00:10:35,667
without even having to go back
to the browser,

276
00:10:35,667 --> 00:10:38,334
and all those changes as well
are kept in revision history.

277
00:10:38,334 --> 00:10:42,167
So I can kind of stick around
right inside this UI.

278
00:10:42,167 --> 00:10:44,000
Pretty dope.

279
00:10:44,000 --> 00:10:46,000
So I'll revert back here.

280
00:10:46,000 --> 00:10:48,000
Don't need to use this
going forward.

281
00:10:48,000 --> 00:10:50,834
All right, so I've covered
a little bit of styles.

282
00:10:50,834 --> 00:10:52,834
Uh, we're gonna transition

283
00:10:52,834 --> 00:10:55,334
into a little bit of looking at
things from the network layer.

284
00:10:55,334 --> 00:10:57,334
Feldman: Right. Thank you, Paul.

285
00:10:57,334 --> 00:10:59,334
So we've been looking at
the styles,

286
00:10:59,334 --> 00:11:02,167
and styles is when you're
visually designing your page.

287
00:11:02,167 --> 00:11:04,667
So you're spending your time
in the elements panel here.

288
00:11:04,667 --> 00:11:08,334
Now, uh, imagine that
we have designed our page,

289
00:11:08,334 --> 00:11:11,000
and, uh, we are happy
with the--how it looks like.

290
00:11:11,000 --> 00:11:13,167
Now we need to deliver it
to our client,

291
00:11:13,167 --> 00:11:15,334
and when we're saying
"delivering to a client,"

292
00:11:15,334 --> 00:11:17,000
we mean network,

293
00:11:17,000 --> 00:11:19,000
and when we're saying "network,"

294
00:11:19,000 --> 00:11:21,000
we always care
about the latency.

295
00:11:21,000 --> 00:11:23,167
Now let me show you what
developer tools

296
00:11:23,167 --> 00:11:26,167
has to say about the network,
uh, on a demo.

297
00:11:26,167 --> 00:11:30,234
For that, uh, let me open

298
00:11:30,234 --> 00:11:32,167
the new tab in here.

299
00:11:32,167 --> 00:11:35,501
I'm opening dev tools using
command option I as Paul did

300
00:11:35,501 --> 00:11:38,000
and navigating
to the network tab.

301
00:11:38,000 --> 00:11:40,834
Now let me jump to gmail.com,

302
00:11:40,834 --> 00:11:44,667
and let's focus on
the network panel in here.

303
00:11:44,667 --> 00:11:48,000
Now the network panel, uh,
highlights, uh,

304
00:11:48,000 --> 00:11:49,834
the network and direction.

305
00:11:49,834 --> 00:11:52,167
For each request that was issued
against the server

306
00:11:52,167 --> 00:11:54,167
we have an entry in here,

307
00:11:54,167 --> 00:11:56,167
and these entries have
a nice timeline.

308
00:11:56,167 --> 00:11:58,200
This is information

309
00:11:58,200 --> 00:12:00,100
about the timing
for particular requests.

310
00:12:00,100 --> 00:12:02,167
Uh, we can get a bird's view

311
00:12:02,167 --> 00:12:04,834
on the network interaction in
here and see the status codes.

312
00:12:04,834 --> 00:12:06,834
And for example in this case

313
00:12:06,834 --> 00:12:10,000
we can see that it took us,
uh, two redirects

314
00:12:10,000 --> 00:12:12,000
to get to the page

315
00:12:12,000 --> 00:12:14,167
that actually was served
with the content.

316
00:12:14,167 --> 00:12:17,334
So GMAIL was moved permanently,

317
00:12:17,334 --> 00:12:20,334
and it moved us
to the mail.google.com,

318
00:12:20,334 --> 00:12:24,000
and mail.google.com
said it moved temporarily

319
00:12:24,000 --> 00:12:26,000
to the following location.

320
00:12:26,000 --> 00:12:27,834
And the first location

321
00:12:27,834 --> 00:12:30,167
that has actually been served
with us with the content

322
00:12:30,167 --> 00:12:32,200
is the service log in,

323
00:12:32,200 --> 00:12:34,501
And the reason for that was
that I was not logged in.

324
00:12:34,501 --> 00:12:36,334
I was not authenticated.

325
00:12:36,334 --> 00:12:39,667
Now we can see that
each of these entries have tabs

326
00:12:39,667 --> 00:12:41,667
with the content for them--

327
00:12:41,667 --> 00:12:43,834
Headers, Content,
Cookies, and Timing--

328
00:12:43,834 --> 00:12:46,334
and let us go through them
real quick.

329
00:12:46,334 --> 00:12:49,000
Now the "Headers" tab shows
the real information

330
00:12:49,000 --> 00:12:52,334
about the HTTP headers
that were sent to the server--

331
00:12:52,334 --> 00:12:55,334
[speaking indistinctly]
query parameters,

332
00:12:55,334 --> 00:12:57,667
either for form
or get parameters,

333
00:12:57,667 --> 00:13:01,167
response also available
in the raw format,

334
00:13:01,167 --> 00:13:03,167
and cookies information.

335
00:13:03,167 --> 00:13:05,834
So that's kind of
a raw HTTP headers,

336
00:13:05,834 --> 00:13:07,834
as raw as you can get.

337
00:13:07,834 --> 00:13:09,667
Now the "Content"

338
00:13:09,667 --> 00:13:11,667
is a syntax-highlighted
content preview

339
00:13:11,667 --> 00:13:13,834
of the resource
that has been loaded.

340
00:13:13,834 --> 00:13:16,000
And we syntax-ly highlight, uh,

341
00:13:16,000 --> 00:13:18,334
HTML, JavaScript, CSS.

342
00:13:18,334 --> 00:13:21,834
"Cookies" is
the cookie information

343
00:13:21,834 --> 00:13:24,334
about this particular request
to the network.

344
00:13:24,334 --> 00:13:26,334
So in case of service log in,

345
00:13:26,334 --> 00:13:29,167
we have sent a number of cookies
to the server,

346
00:13:29,167 --> 00:13:31,167
and it actually sent us

347
00:13:31,167 --> 00:13:33,334
a couple of cookies
to send back.

348
00:13:33,334 --> 00:13:37,334
And you can see that these
cookies are HTTP and secure,

349
00:13:37,334 --> 00:13:39,334
and HTTP and secure cookies

350
00:13:39,334 --> 00:13:41,667
are the ones that are not
available to JavaScript,

351
00:13:41,667 --> 00:13:43,834
and it means that
with the developer tools

352
00:13:43,834 --> 00:13:45,834
you can see everything
about cookies

353
00:13:45,834 --> 00:13:47,834
including things
that are not visible

354
00:13:47,834 --> 00:13:49,834
with a document
that cookie object.

355
00:13:49,834 --> 00:13:53,000
And "Timing" is the information,
detailed information,

356
00:13:53,000 --> 00:13:55,834
about the timing involved
with this particular request.

357
00:13:55,834 --> 00:13:58,834
And we can tell you the timers
for DNS, proxy, SSL,

358
00:13:58,834 --> 00:14:01,334
request, response,
connecting, blocking,

359
00:14:01,334 --> 00:14:03,334
pretty much everything.

360
00:14:03,334 --> 00:14:05,501
And if we go back
to this timeline view,

361
00:14:05,501 --> 00:14:07,501
you can hover over the elements

362
00:14:07,501 --> 00:14:10,000
to see what are the timers
for the particular request.

363
00:14:10,000 --> 00:14:12,000
Like for this, in this case,

364
00:14:12,000 --> 00:14:14,167
we were waiting
for 36 milliseconds

365
00:14:14,167 --> 00:14:17,000
before we actually started
receiving a response.

366
00:14:17,000 --> 00:14:20,667
And pictures are similar
in other cases as well.

367
00:14:20,667 --> 00:14:24,167
Now that's, um, pretty, um,
pretty different.

368
00:14:24,167 --> 00:14:26,167
That's pretty simple
functionality.

369
00:14:26,167 --> 00:14:28,501
The important thing about it
is that the information

370
00:14:28,501 --> 00:14:31,501
that is highlighted in here
is taken from the network stack.

371
00:14:31,501 --> 00:14:34,334
And as you might know, Chrome
has its own network stack,

372
00:14:34,334 --> 00:14:37,167
Chrome's platform unique
to all the platforms.

373
00:14:37,167 --> 00:14:39,334
And thanks to that network stack

374
00:14:39,334 --> 00:14:41,667
we can get a very precise
timing information

375
00:14:41,667 --> 00:14:43,667
and data information,

376
00:14:43,667 --> 00:14:46,000
take it right from the network
stack and bring it to you,

377
00:14:46,000 --> 00:14:48,000
and the data is accurate
in nanoseconds.

378
00:14:48,000 --> 00:14:50,000
Now that's very important

379
00:14:50,000 --> 00:14:52,167
when you are dealing
with a page load.

380
00:14:52,167 --> 00:14:54,667
Like in this case, this page was
loaded within 500 milliseconds.

381
00:14:54,667 --> 00:14:56,667
But as web evolves,

382
00:14:56,667 --> 00:14:58,667
we see more and more
AJAX applications,

383
00:14:58,667 --> 00:15:02,334
more and more, um,
JavaScript-enabled active apps,

384
00:15:02,334 --> 00:15:06,167
and in those cases, um,
load time is also important,

385
00:15:06,167 --> 00:15:08,334
but there are other pieces
of runtime

386
00:15:08,334 --> 00:15:10,834
that are all equally important
from the latency standpoint.

387
00:15:10,834 --> 00:15:13,000
And when we're interested

388
00:15:13,000 --> 00:15:15,334
in what's happening
after the page load,

389
00:15:15,334 --> 00:15:18,701
uh, we can look at the timeline.

390
00:15:18,701 --> 00:15:21,000
Now let me show it to you
by example.

391
00:15:21,000 --> 00:15:25,000
I am starting to record
whatever is happening in here,

392
00:15:25,000 --> 00:15:28,334
Uh, and I'm looking
for purple flowers at Google,

393
00:15:28,334 --> 00:15:30,334
and I stop recording

394
00:15:30,334 --> 00:15:33,334
and zooming into
an area of interest.

395
00:15:33,334 --> 00:15:35,334
Now that's a timeline panel,

396
00:15:35,334 --> 00:15:37,334
and the timeline is recording

397
00:15:37,334 --> 00:15:39,501
whatever is happening on
your web page,

398
00:15:39,501 --> 00:15:42,834
all the events, native events,
that are happening there.

399
00:15:42,834 --> 00:15:45,000
And we have three categories
for these events--

400
00:15:45,000 --> 00:15:47,834
Loading--blue,
scripting--yellow,

401
00:15:47,834 --> 00:15:51,834
and rendering--pink or purple,
depending on the projection.

402
00:15:51,834 --> 00:15:53,834
It's more of a bluish in here.

403
00:15:53,834 --> 00:15:57,834
Now, um, you can see all of
these records here on the left

404
00:15:57,834 --> 00:16:01,501
along with their detailed
information about timers.

405
00:16:01,501 --> 00:16:04,000
Stack trace is involved,

406
00:16:04,000 --> 00:16:06,334
um, memory information,

407
00:16:06,334 --> 00:16:08,334
uh, position on the screen

408
00:16:08,334 --> 00:16:10,501
when it's associated
with a Paint event,

409
00:16:10,501 --> 00:16:14,167
Um, stack traces for loading
and, um,

410
00:16:14,167 --> 00:16:17,334
for sending res--requests
and receiving responses.

411
00:16:17,334 --> 00:16:19,501
So a lot of information
about these events

412
00:16:19,501 --> 00:16:21,501
is highlighted in here.

413
00:16:21,501 --> 00:16:23,834
So what you do
is you find a long bar

414
00:16:23,834 --> 00:16:25,868
that is taking a lot of time.

415
00:16:25,868 --> 00:16:28,167
For example in this case,
the send request,

416
00:16:28,167 --> 00:16:30,334
the solid part
is a synchronous time

417
00:16:30,334 --> 00:16:34,167
that was actually spent while we
were waiting for the response,

418
00:16:34,167 --> 00:16:38,000
and the semitransparent part
is the time that has been taken

419
00:16:38,000 --> 00:16:40,000
by the implications
of this call.

420
00:16:40,000 --> 00:16:42,000
For instance,
request has been served,

421
00:16:42,000 --> 00:16:44,167
and it led to some layouts,

422
00:16:44,167 --> 00:16:46,334
some subsequent
resource requests,

423
00:16:46,334 --> 00:16:48,501
some JavaScript executions.

424
00:16:48,501 --> 00:16:50,501
So it's fairly interesting.

425
00:16:50,501 --> 00:16:52,834
Oh, and in this case
we have evaluated a script.

426
00:16:52,834 --> 00:16:55,167
We can jump to script and back

427
00:16:55,167 --> 00:16:58,367
and see what was happening
while the script was evaluating.

428
00:16:58,367 --> 00:17:00,767
We can see garbage collection,
timers install.

429
00:17:00,767 --> 00:17:03,334
A lot of information
about what's happening

430
00:17:03,334 --> 00:17:05,334
on a single timeline.

431
00:17:05,334 --> 00:17:08,334
So now you can measure not only
your initial page load time

432
00:17:08,334 --> 00:17:10,501
but also the different actions,

433
00:17:10,501 --> 00:17:13,834
the user interaction details,
etcetera.

434
00:17:13,834 --> 00:17:17,667
So that's our network story
and our latency story.

435
00:17:17,667 --> 00:17:20,667
And with that, I'll hand it over
back to Paul.

436
00:17:20,667 --> 00:17:22,667
Irish: Great.
Feldman: Okay.

437
00:17:22,667 --> 00:17:25,000
Irish: So I think
it's about time to transition

438
00:17:25,000 --> 00:17:27,000
into a bit of JavaScript.

439
00:17:27,000 --> 00:17:30,000
So I want to talk a little bit
about the console.

440
00:17:30,000 --> 00:17:32,033
So you're probably familiar

441
00:17:32,033 --> 00:17:35,000
with our good old friend
console.log.

442
00:17:35,000 --> 00:17:38,667
But I do want to point out
that console.log

443
00:17:38,667 --> 00:17:41,334
actually has, you know,

444
00:17:41,334 --> 00:17:43,501
it can accept more
than just one argument.

445
00:17:43,501 --> 00:17:45,834
So you might be
"im in this function."

446
00:17:45,834 --> 00:17:48,000
But you know,
feel free to pass it,

447
00:17:48,000 --> 00:17:51,501
you know, document, uh,
nodes on the document,

448
00:17:51,501 --> 00:17:54,667
uh, booleans and numbers
and arrays.

449
00:17:54,667 --> 00:17:56,667
All these things work.

450
00:17:56,667 --> 00:17:59,667
So console.log is a lot more
friendly than you might think.

451
00:17:59,667 --> 00:18:03,501
But in addition to the console
logging functionality,

452
00:18:03,501 --> 00:18:05,534
there's a bit going on that--

453
00:18:05,534 --> 00:18:07,501
functions that
are available to you

454
00:18:07,501 --> 00:18:09,501
right within the console,

455
00:18:09,501 --> 00:18:11,501
and that's called
the Command Line API.

456
00:18:11,501 --> 00:18:14,000
So this is documented
over on Firebug's wiki.

457
00:18:14,000 --> 00:18:16,000
Firebug introduced
a lot of these,

458
00:18:16,000 --> 00:18:18,000
but now, uh,
the Chrome Dev Tools,

459
00:18:18,000 --> 00:18:20,000
Opera Dragonfly, IE dev tools

460
00:18:20,000 --> 00:18:22,000
support a good number of these.

461
00:18:22,000 --> 00:18:24,000
So there's things like, um,

462
00:18:24,000 --> 00:18:26,000
well, there's "clear(),"

463
00:18:26,000 --> 00:18:28,000
and there's other things
like "dir()."

464
00:18:28,000 --> 00:18:31,334
So sometimes I might have
a node element here,

465
00:18:31,334 --> 00:18:33,667
and if I log on an element
to the console,

466
00:18:33,667 --> 00:18:36,167
I can kind of explore the tree
right inside in-line here,

467
00:18:36,167 --> 00:18:37,834
kind of nice.

468
00:18:37,834 --> 00:18:40,000
But sometimes you want
kind of a different view

469
00:18:40,000 --> 00:18:41,667
of that information,

470
00:18:41,667 --> 00:18:43,834
So the dir() method
can give you that.

471
00:18:43,834 --> 00:18:46,467
So with the case of an element,
it'll give you the DOM view,

472
00:18:46,467 --> 00:18:48,334
so the DOM properties
of that node.

473
00:18:48,334 --> 00:18:50,334
So that's dir().

474
00:18:50,334 --> 00:18:53,167
Now you might also have
this node here

475
00:18:53,167 --> 00:18:55,501
that you're working with in
the console inside the script,

476
00:18:55,501 --> 00:18:57,667
and you actually now need
to go view that

477
00:18:57,667 --> 00:19:00,000
over in the elements panel,
right?

478
00:19:00,000 --> 00:19:03,501
So you can just use
the "inspect()" function,

479
00:19:03,501 --> 00:19:05,834
and then you just hop over

480
00:19:05,834 --> 00:19:08,000
immediately over
to the elements view

481
00:19:08,000 --> 00:19:10,000
with that element selected.

482
00:19:10,000 --> 00:19:13,334
Now sometimes you have
kind of the reverse situation

483
00:19:13,334 --> 00:19:16,667
where you have an element
selected in "Elements,"

484
00:19:16,667 --> 00:19:19,000
but then you want
to access that via "Script."

485
00:19:19,000 --> 00:19:21,334
So I'm gonna bring up
the console right here.

486
00:19:21,334 --> 00:19:23,501
I actually can just hit
the Escape button.

487
00:19:23,501 --> 00:19:27,000
Escape toggles on and off
the console on all of these.

488
00:19:27,000 --> 00:19:29,000
Um, so I'm gonna bring that up,

489
00:19:29,000 --> 00:19:31,501
and I'm gonna type "$0."

490
00:19:31,501 --> 00:19:34,501
So $0 refers to whatever element

491
00:19:34,501 --> 00:19:36,834
I have selected, uh,

492
00:19:36,834 --> 00:19:39,334
up in the "Element" DOM view.

493
00:19:39,334 --> 00:19:42,501
So it works just like
a regular reference,

494
00:19:42,501 --> 00:19:45,200
so I could do, let's say, um,

495
00:19:45,200 --> 00:19:49,000
maybe "$0.outerHTML."

496
00:19:49,000 --> 00:19:50,667
Sure.

497
00:19:50,667 --> 00:19:52,667
And we just get that.

498
00:19:52,667 --> 00:19:55,000
Sometimes you get a message
logged out to the console,

499
00:19:55,000 --> 00:19:57,334
and then you actually want
to take that output,

500
00:19:57,334 --> 00:19:59,667
and you need to go, you know,
paste that somewhere else

501
00:19:59,667 --> 00:20:01,667
in your editor
or something like that.

502
00:20:01,667 --> 00:20:04,667
So while you can, you know,
try and make sure that you get,

503
00:20:04,667 --> 00:20:06,834
you know, select all this--

504
00:20:06,834 --> 00:20:08,834
it can be a little awkward,

505
00:20:08,834 --> 00:20:11,334
so there's a nice little handy
convenience function for you,

506
00:20:11,334 --> 00:20:13,501
which is the copy() method,
right?

507
00:20:13,501 --> 00:20:16,334
And so you can just type
"copy()," pass it a string,

508
00:20:16,334 --> 00:20:20,167
and, uh, go over to your editor
and just paste it.

509
00:20:20,167 --> 00:20:23,000
And so you can immediately just
throw things in your Clipboard,

510
00:20:23,000 --> 00:20:25,501
save it--save yourself
a little bit of time.

511
00:20:25,501 --> 00:20:29,000
So there's a few cool things
inside the console.

512
00:20:29,000 --> 00:20:31,000
But while we're dealing
with JavaScript,

513
00:20:31,000 --> 00:20:33,000
let's talk a little bit--

514
00:20:33,000 --> 00:20:35,000
a little bit
about script debugging.

515
00:20:35,000 --> 00:20:37,000
So Pavel's gonna
take care of this.

516
00:20:37,000 --> 00:20:38,834
Feldman: Yes. Thanks, Paul.

517
00:20:38,834 --> 00:20:40,834
So we've discussed
visually designing a page

518
00:20:40,834 --> 00:20:42,501
with the styles.

519
00:20:42,501 --> 00:20:44,834
We were talking about delivering
the page to the client.

520
00:20:44,834 --> 00:20:47,000
Now Paul was talking
about the console interaction,

521
00:20:47,000 --> 00:20:49,334
which is actually an interaction
with a page at runtime

522
00:20:49,334 --> 00:20:51,501
while evaluating expressions
against running page.

523
00:20:51,501 --> 00:20:53,501
Now when you're debugging
your page,

524
00:20:53,501 --> 00:20:55,501
um, it's not always enough.

525
00:20:55,501 --> 00:20:57,501
You want to post
the JavaScript execution

526
00:20:57,501 --> 00:20:59,667
to see what's happening
within the virtual machine,

527
00:20:59,667 --> 00:21:02,000
what are the object's states
at the moment,

528
00:21:02,000 --> 00:21:04,834
and for that we have
the debugging capabilities

529
00:21:04,834 --> 00:21:07,334
in the Chrome Developer Tools.

530
00:21:07,334 --> 00:21:09,334
Let me open this demo page

531
00:21:09,334 --> 00:21:11,501
where I'll be demo'ing
the debugger.

532
00:21:11,501 --> 00:21:15,000
This is a closure component
that is called HoverCard.

533
00:21:15,000 --> 00:21:17,167
Uh, it is showing
nice pop-up messages

534
00:21:17,167 --> 00:21:20,167
when I'm moving my mouse over
the objects, over the elements.

535
00:21:20,167 --> 00:21:22,167
You might find it familiar

536
00:21:22,167 --> 00:21:24,667
because the one is used, um,
in GMAIL.

537
00:21:24,667 --> 00:21:27,000
Now I'm opening the dev tools

538
00:21:27,000 --> 00:21:29,334
and switching
to the Script step.

539
00:21:29,334 --> 00:21:31,501
Now I happen to know, uh,

540
00:21:31,501 --> 00:21:33,834
that the particular file name

541
00:21:33,834 --> 00:21:36,501
and the line number of the code
that gets executed

542
00:21:36,501 --> 00:21:38,834
when I'm moving my mouse
over the elements,

543
00:21:38,834 --> 00:21:41,000
so let me quickly jump there.

544
00:21:41,000 --> 00:21:43,501
I'm selecting
the "Select File" drop,

545
00:21:43,501 --> 00:21:46,834
and I start typing HoverCard,
so it quickly brings me there.

546
00:21:46,834 --> 00:21:50,000
Now I'm pressing "Command + L"
on the Mac

547
00:21:50,000 --> 00:21:52,334
or "Control + G"
on Windows and Linux

548
00:21:52,334 --> 00:21:54,501
to jump to a particular line.

549
00:21:54,501 --> 00:21:56,834
Now let me quickly set
a breakpoint in here

550
00:21:56,834 --> 00:21:58,834
and hover my mouse over.

551
00:21:58,834 --> 00:22:01,334
Now the dev tools are saying

552
00:22:01,334 --> 00:22:04,501
that we are paused
on a JavaScript breakpoint.

553
00:22:04,501 --> 00:22:06,501
And on this breakpoint

554
00:22:06,501 --> 00:22:10,000
we can see this tag
with the stack frames.

555
00:22:10,000 --> 00:22:12,000
For each of the stack frames

556
00:22:12,000 --> 00:22:14,334
we can see local closure
and global scopes.

557
00:22:14,334 --> 00:22:17,000
We can explore objects in here.

558
00:22:17,000 --> 00:22:20,834
We can also hover over elements
to see their values

559
00:22:20,834 --> 00:22:24,000
at this particular time
while JavaScript is stopped

560
00:22:24,000 --> 00:22:26,334
and explore them in here.

561
00:22:26,334 --> 00:22:29,334
Now you can also
use console together

562
00:22:29,334 --> 00:22:31,834
with the, uh...

563
00:22:31,834 --> 00:22:34,334
um... [speaking indistinctly]

564
00:22:34,334 --> 00:22:36,667
to dump the values
in here in-line.

565
00:22:36,667 --> 00:22:39,501
Now, um, we have
conditional breakpoints.

566
00:22:39,501 --> 00:22:41,334
We have stepping,

567
00:22:41,334 --> 00:22:43,834
all standard stuff that IEDs
and debugging tools have.

568
00:22:43,834 --> 00:22:47,000
But, um, breakpoints
is not always enough.

569
00:22:47,000 --> 00:22:50,334
Let's say that you're looking
at this page for the first time,

570
00:22:50,334 --> 00:22:53,334
and you don't know the file name
and the line number

571
00:22:53,334 --> 00:22:55,334
that I've been using.

572
00:22:55,334 --> 00:22:57,667
Let's say you want to learn how
this event log

573
00:22:57,667 --> 00:23:00,601
is getting populated
as I move my mouse around.

574
00:23:00,601 --> 00:23:04,000
For that, let me reveal
this element

575
00:23:04,000 --> 00:23:06,000
in the "Elements" panel

576
00:23:06,000 --> 00:23:08,834
And no context menu on it

577
00:23:08,834 --> 00:23:12,000
and choose "Break on
Subtree Modifications."

578
00:23:12,000 --> 00:23:14,167
Now what I've done,
I added a breakpoint

579
00:23:14,167 --> 00:23:16,000
on a DOM node,

580
00:23:16,000 --> 00:23:18,334
and I said, "I want to stop
whenever this DOM node cha--

581
00:23:18,334 --> 00:23:20,501
or any of these standards
change.

582
00:23:20,501 --> 00:23:23,000
Now let me hover my mouse
over an element,

583
00:23:23,000 --> 00:23:24,834
and we stopped again.

584
00:23:24,834 --> 00:23:28,000
In this case, we have
a different stack,

585
00:23:28,000 --> 00:23:31,667
and we can explore all the path
that our code has done

586
00:23:31,667 --> 00:23:33,667
to get to that condition,

587
00:23:33,667 --> 00:23:35,834
and we can see
that the selected line

588
00:23:35,834 --> 00:23:38,834
is trying to appendChild
to an element.

589
00:23:38,834 --> 00:23:42,501
So that's the exact place
where something is changing,

590
00:23:42,501 --> 00:23:44,501
uh, with our DOM.

591
00:23:44,501 --> 00:23:49,000
Now, um, I'm scrolling to this
user-friendly message in here,

592
00:23:49,000 --> 00:23:52,000
and it says it "paused on
a 'Subtree Modified' breakpoint

593
00:23:52,000 --> 00:23:54,501
set on" a particular element
"because a new child was added."

594
00:23:54,501 --> 00:23:56,667
So you have detailed information

595
00:23:56,667 --> 00:23:59,501
of what node
was breakpoint added upon

596
00:23:59,501 --> 00:24:01,501
and what node has changed.

597
00:24:01,501 --> 00:24:03,501
I can release the execution,

598
00:24:03,501 --> 00:24:06,167
and I can see that the DOM
is being modified twice

599
00:24:06,167 --> 00:24:08,501
while I'm moving my mouse
over an element.

600
00:24:08,501 --> 00:24:11,501
Now that's--we call this
functionality DOM breakpoints.

601
00:24:11,501 --> 00:24:13,834
It allows you stopping
whenever DOM changes

602
00:24:13,834 --> 00:24:15,834
or nodes are added or removed,

603
00:24:15,834 --> 00:24:17,834
and it's very handy
when you know

604
00:24:17,834 --> 00:24:20,000
the port in the UI
that is getting changed

605
00:24:20,000 --> 00:24:22,000
that you'd like to explore.

606
00:24:22,000 --> 00:24:24,000
Now we've talked
about regular breakpoints,

607
00:24:24,000 --> 00:24:26,834
where you can set a breakpoint
on a line, the DOM breakpoints,

608
00:24:26,834 --> 00:24:28,834
where we can set a breakpoint
in a node.

609
00:24:28,834 --> 00:24:31,834
Sometimes you don't have a place
in the UI that gets modified.

610
00:24:31,834 --> 00:24:34,167
Still, you have some clue
on what's happening on a page,

611
00:24:34,167 --> 00:24:36,167
and you'd like to explore it.

612
00:24:36,167 --> 00:24:38,834
Like in this case I'm hovering
my mouse over an element,

613
00:24:38,834 --> 00:24:41,167
and it takes, like,
a second or half

614
00:24:41,167 --> 00:24:43,334
for this pop-up to show,

615
00:24:43,334 --> 00:24:46,667
so I think there must be
some timer involved.

616
00:24:46,667 --> 00:24:50,167
So what I do is I expand
this event list

617
00:24:50,167 --> 00:24:53,167
or breakpoint sidebar
in the "Scripts" panel,

618
00:24:53,167 --> 00:24:57,167
and under "Timer"
I click "Set Timer."

619
00:24:57,167 --> 00:24:59,501
Paul, you made
these fonts really big.

620
00:24:59,501 --> 00:25:02,334
Now dev tools does not look
that pretty.

621
00:25:02,334 --> 00:25:06,334
Anyways, so I'd like it to stop
whenever the timer is installed.

622
00:25:06,334 --> 00:25:09,834
And you can see that there are
different kinds of events,

623
00:25:09,834 --> 00:25:12,334
uh, browser events, page events,
that are happening

624
00:25:12,334 --> 00:25:15,167
and that can be--that can have

625
00:25:15,167 --> 00:25:17,334
a JavaScript execution
stopped upon.

626
00:25:17,334 --> 00:25:19,868
But we're interested
in the timer at this moment.

627
00:25:19,868 --> 00:25:22,000
So I'm hovering my mouse
over it again,

628
00:25:22,000 --> 00:25:25,834
and in this case I stopped
on a timer installation.

629
00:25:25,834 --> 00:25:28,834
So you can see that the object
got a timeout installed,

630
00:25:28,834 --> 00:25:32,000
and that's a global default
timer object.

631
00:25:32,000 --> 00:25:34,000
It's a global object
in our case.

632
00:25:34,000 --> 00:25:36,501
Now I can again explore
the stack trace

633
00:25:36,501 --> 00:25:38,667
and learn what
has happened in here,

634
00:25:38,667 --> 00:25:41,334
look at my, uh, local closure

635
00:25:41,334 --> 00:25:44,000
and, uh, global variables
in here.

636
00:25:44,000 --> 00:25:46,000
Now that's pretty cool,

637
00:25:46,000 --> 00:25:48,000
'cause even if you only
to know

638
00:25:48,000 --> 00:25:50,000
the type of event
that's happening,

639
00:25:50,000 --> 00:25:52,033
like a keyboard
or a mouse event,

640
00:25:52,033 --> 00:25:54,334
you can jump straight
into the line of the code

641
00:25:54,334 --> 00:25:56,501
that is doing something
associated with that event.

642
00:25:56,501 --> 00:25:58,334
But that's not everything.

643
00:25:58,334 --> 00:26:00,601
Now we mentioned you don't
even know the event name.

644
00:26:00,601 --> 00:26:03,000
You have no clue on how
your page is working.

645
00:26:03,000 --> 00:26:05,000
Still, you'd like to explore it.

646
00:26:05,000 --> 00:26:07,000
Still, you'd like
to have breakpoints

647
00:26:07,000 --> 00:26:09,000
and put pointers
to the source code.

648
00:26:09,000 --> 00:26:11,000
And we're using timeline
for that.

649
00:26:11,000 --> 00:26:12,968
Again, I star recording
my scenario.

650
00:26:12,968 --> 00:26:16,100
I move--oh, I should have
removed this breakpoint in here.

651
00:26:18,667 --> 00:26:22,167
So back to timeline--
clearing it

652
00:26:22,167 --> 00:26:24,501
and repeating my scenario

653
00:26:24,501 --> 00:26:26,667
and stopping recording.

654
00:26:26,667 --> 00:26:30,167
Now these are events, mostly
mouse move events in here,

655
00:26:30,167 --> 00:26:32,334
but I can see one large thing.

656
00:26:32,334 --> 00:26:34,501
So there has been
a mouse over event

657
00:26:34,501 --> 00:26:36,501
that has a 0 self time

658
00:26:36,501 --> 00:26:38,501
so it immediately
released the control,

659
00:26:38,501 --> 00:26:40,501
but it has implications

660
00:26:40,501 --> 00:26:42,501
that were taking
about half a second.

661
00:26:42,501 --> 00:26:44,667
Let's, uh, explore it.

662
00:26:44,667 --> 00:26:48,667
So what happens is there is
some parsing involved

663
00:26:48,667 --> 00:26:50,834
when I am assigning
to inner HTML.

664
00:26:50,834 --> 00:26:53,000
It turns out to be
an expensive operation

665
00:26:53,000 --> 00:26:55,000
because it showed up in here.

666
00:26:55,000 --> 00:26:57,501
Then there are
styles recalculated.

667
00:26:57,501 --> 00:27:00,934
That's because I am using
scroll top and scroll height

668
00:27:00,934 --> 00:27:03,000
that are actually
kicking the layout.

669
00:27:03,000 --> 00:27:05,934
And then I can see that
the timer has been installed,

670
00:27:05,934 --> 00:27:07,934
and that's the same line

671
00:27:07,934 --> 00:27:10,000
that we were stopping it on
on a breakpoint.

672
00:27:10,000 --> 00:27:12,000
And then what I can see

673
00:27:12,000 --> 00:27:15,501
is that the timer has been
installed for 500 milliseconds.

674
00:27:15,501 --> 00:27:17,501
It has ID 80.

675
00:27:17,501 --> 00:27:19,834
And, uh, when I trigger it,

676
00:27:19,834 --> 00:27:23,000
it did some parsing again.

677
00:27:23,000 --> 00:27:25,167
It did style recalculation.

678
00:27:25,167 --> 00:27:27,501
It removed itself
from the timer.

679
00:27:27,501 --> 00:27:29,667
So that's kind of
pretty much everything

680
00:27:29,667 --> 00:27:31,667
that this scenario was doing.

681
00:27:31,667 --> 00:27:34,667
Now imagine, I had no clue
on how this page was working,

682
00:27:34,667 --> 00:27:37,167
and now I have a bird's view
on a sequence of events,

683
00:27:37,167 --> 00:27:39,834
synchronous and asynchronous
bound together,

684
00:27:39,834 --> 00:27:42,000
that show me
the complete picture

685
00:27:42,000 --> 00:27:44,000
of the page runtime

686
00:27:44,000 --> 00:27:47,000
together with the timers,
resources,

687
00:27:47,000 --> 00:27:49,000
style--styles, etcetera.

688
00:27:49,000 --> 00:27:51,667
So that's our debugging story,

689
00:27:51,667 --> 00:27:55,667
but debugging story is not only
about the exploring a code.

690
00:27:55,667 --> 00:27:58,667
It is sometimes
about fixing bugs.

691
00:27:58,667 --> 00:28:02,501
So let's go back
to the line we started.

692
00:28:02,501 --> 00:28:04,667
It was HoverCard,

693
00:28:04,667 --> 00:28:07,000
uh, 208.

694
00:28:07,000 --> 00:28:09,501
And let's say I found
a bug in here,

695
00:28:09,501 --> 00:28:11,501
and I'd like to fix it.

696
00:28:11,501 --> 00:28:14,834
Now what happens, uh, usually
you need to edit a script,

697
00:28:14,834 --> 00:28:16,834
deploy to a server,
reload the page,

698
00:28:16,834 --> 00:28:19,000
go to the same place in the UI,

699
00:28:19,000 --> 00:28:20,834
do your action again,

700
00:28:20,834 --> 00:28:23,000
and see whether
you'd fixed it or not.

701
00:28:23,000 --> 00:28:25,000
Now we have something better
for you.

702
00:28:25,000 --> 00:28:27,334
Uh, just as with the CSS,
you double click in here,

703
00:28:27,334 --> 00:28:29,334
and you start editing
your source code.

704
00:28:29,334 --> 00:28:32,000
In this case, I'll be, uh,

705
00:28:32,000 --> 00:28:35,000
adding my microelement
to the console.

706
00:28:35,000 --> 00:28:37,000
I press "Command + S"

707
00:28:37,000 --> 00:28:39,033
to commit changes
into the virtual machine

708
00:28:39,033 --> 00:28:41,000
and hovering my mouse
over elements.

709
00:28:41,000 --> 00:28:44,000
And you can see the console gets
populated with the values.

710
00:28:44,000 --> 00:28:46,501
Now console is not
very interesting.

711
00:28:46,501 --> 00:28:48,667
Let's try changing something,

712
00:28:48,667 --> 00:28:51,834
and in this case
I'd like this element

713
00:28:51,834 --> 00:28:55,667
to get a new background color.

714
00:28:55,667 --> 00:28:58,501
I'm gonna use
Paul's favorite one.

715
00:28:58,501 --> 00:29:00,501
I don't really know
what it means.

716
00:29:00,501 --> 00:29:03,000
It's called BADA55 or something.
I'm not local.

717
00:29:03,000 --> 00:29:05,000
So committing it again

718
00:29:05,000 --> 00:29:07,501
and now as I hover
my mouse over elements,

719
00:29:07,501 --> 00:29:09,501
they get painted.

720
00:29:09,501 --> 00:29:11,501
So what happened under the hood

721
00:29:11,501 --> 00:29:13,667
as I was editing
my function body,

722
00:29:13,667 --> 00:29:15,667
uh, the highly optimized
feed code

723
00:29:15,667 --> 00:29:18,834
in the Chrome browser
was de-optimized

724
00:29:18,834 --> 00:29:21,501
and got into the runtime.

725
00:29:21,501 --> 00:29:23,501
So all the instances
of this function

726
00:29:23,501 --> 00:29:27,501
were modified instantly
and stepped in place as I typed.

727
00:29:27,501 --> 00:29:30,667
And that's very useful
when you're deep in the context,

728
00:29:30,667 --> 00:29:32,834
and you don't want
to reload a page

729
00:29:32,834 --> 00:29:35,501
just to repeat something
or change the behavior slightly.

730
00:29:35,501 --> 00:29:38,834
So that's pretty much it,
uh, for the debugging.

731
00:29:38,834 --> 00:29:40,667
And with that, I'll--

732
00:29:40,667 --> 00:29:42,834
Irish: Actually, um,
you have one more thing.

733
00:29:42,834 --> 00:29:45,167
Feldman: Oh. Oh, sorry. Yeah.
I have one more thing.

734
00:29:45,167 --> 00:29:48,667
And, um, that's about
the google.com, right.

735
00:29:48,667 --> 00:29:51,000
So I always wanted to know
how it works,

736
00:29:51,000 --> 00:29:53,000
but I couldn't
really read it through.

737
00:29:53,000 --> 00:29:55,000
Irish: That's a cool dance
up there.

738
00:29:55,000 --> 00:29:57,334
Feldman: Right. But do you know
how it's implemented, though?

739
00:29:57,334 --> 00:29:59,334
Irish: No, I don't. It's...

740
00:29:59,334 --> 00:30:01,667
Feldman: It's window Google
static something.

741
00:30:01,667 --> 00:30:03,334
Irish: Mm.

742
00:30:03,334 --> 00:30:05,167
Feldman: Okay, so anyways,

743
00:30:05,167 --> 00:30:07,501
now we have this small button
in the status bar,

744
00:30:07,501 --> 00:30:09,667
and I click it,
and I see a nice...

745
00:30:09,667 --> 00:30:12,601
[applause]

746
00:30:14,667 --> 00:30:16,667
Feldman: Um, what's cool
about it is

747
00:30:16,667 --> 00:30:19,534
that breakpoints are also going
to work as I reload the page,

748
00:30:19,534 --> 00:30:23,167
and I can step through the nice
pretty printed Google code,

749
00:30:23,167 --> 00:30:25,501
and we can finally know
how it works.

750
00:30:25,501 --> 00:30:27,501
Okay, well, that--back to Paul.

751
00:30:27,501 --> 00:30:29,667
Irish: Great. Thanks, Pavel.

752
00:30:29,667 --> 00:30:33,667
All right, so let's go
back to here.

753
00:30:33,667 --> 00:30:35,667
[clears throat]

754
00:30:35,667 --> 00:30:37,667
Another thing
that we're really excited

755
00:30:37,667 --> 00:30:40,000
to share with you guys today is
remote debugging functionality.

756
00:30:40,000 --> 00:30:42,334
So the easiest way for me
to show this to you

757
00:30:42,334 --> 00:30:45,501
is, um, just show you the demo,
I guess.

758
00:30:45,501 --> 00:30:49,167
So I'm gonna bring up
the HoverCard over here.

759
00:30:49,167 --> 00:30:51,167
That works.

760
00:30:51,167 --> 00:30:54,000
But you'll notice we're running
Chrome Canary right here,

761
00:30:54,000 --> 00:30:56,000
and when we launched
Chrome Canary,

762
00:30:56,000 --> 00:30:58,667
we actually launched it
from the command line,

763
00:30:58,667 --> 00:31:01,834
and we use this little guy
right here--

764
00:31:01,834 --> 00:31:03,834
"remote-debugging-port"--

765
00:31:03,834 --> 00:31:05,834
and we specified that as 1337.

766
00:31:05,834 --> 00:31:07,834
And so what that lets us do

767
00:31:07,834 --> 00:31:09,834
is say that, you know what,

768
00:31:09,834 --> 00:31:11,834
this, uh, the dev tools,

769
00:31:11,834 --> 00:31:14,334
we're gonna, you know,
turn that into a web server.

770
00:31:14,334 --> 00:31:16,834
Um, we're gonna
kind of expose that

771
00:31:16,834 --> 00:31:19,667
so that we can log into that
from another place.

772
00:31:19,667 --> 00:31:22,501
So I'm going to, I think,

773
00:31:22,501 --> 00:31:25,000
launch, uh, Chrome.

774
00:31:25,000 --> 00:31:27,834
Stable release.

775
00:31:27,834 --> 00:31:31,834
And I will load up port 1337.

776
00:31:31,834 --> 00:31:35,167
Okay, so you're seeing
over here two items,

777
00:31:35,167 --> 00:31:37,334
and they should be
familiar to you.

778
00:31:37,334 --> 00:31:39,667
They're the two tabs
that I currently have open.

779
00:31:39,667 --> 00:31:42,334
So I'm gonna open up this tab.

780
00:31:42,334 --> 00:31:45,167
And remember--
remember before when I said

781
00:31:45,167 --> 00:31:47,334
that the dev tools
is just a web app?

782
00:31:47,334 --> 00:31:49,834
I mean, I'm just viewing it
in Chrome right here.

783
00:31:49,834 --> 00:31:51,834
It's--it's a web app.

784
00:31:51,834 --> 00:31:54,667
But the cool thing is that
these are the dev tools

785
00:31:54,667 --> 00:31:58,000
of this browser,
two separate browsers.

786
00:31:58,000 --> 00:32:00,267
And you'll notice it just works,
you know.

787
00:32:00,267 --> 00:32:02,667
I have full control
over this browser.

788
00:32:02,667 --> 00:32:06,167
So this is something
that's really exciting to us.

789
00:32:06,167 --> 00:32:09,334
The--the cool thing about this
is that this has been--

790
00:32:09,334 --> 00:32:11,834
all this work has been happening
at the WebKit level,

791
00:32:11,834 --> 00:32:15,000
which means that all mobile
WebKit browsers going forward

792
00:32:15,000 --> 00:32:17,000
now have the ability to--

793
00:32:17,000 --> 00:32:19,000
for you to control
their developer tools

794
00:32:19,000 --> 00:32:21,000
from your desktop browser.

795
00:32:21,000 --> 00:32:23,000
Pretty cool.

796
00:32:23,000 --> 00:32:25,133
[applause]
Irish: Agreed.

797
00:32:27,934 --> 00:32:30,133
So we're really excited
about this.

798
00:32:30,133 --> 00:32:32,234
You can actually
test it out today.

799
00:32:32,234 --> 00:32:34,200
It's available
in the RIM PlayBook.

800
00:32:34,200 --> 00:32:36,200
Uh, but we're excited because
there's a lot of things

801
00:32:36,200 --> 00:32:38,200
in the mobile situation
where there's, like,

802
00:32:38,200 --> 00:32:41,133
network information that's just
so difficult to get a hold of,

803
00:32:41,133 --> 00:32:43,501
and all the network timing
information that you saw

804
00:32:43,501 --> 00:32:45,834
from Pavel earlier
you have available.

805
00:32:45,834 --> 00:32:48,167
You have the full functionality,
all the debugging, everything.

806
00:32:48,167 --> 00:32:50,667
So we're really excited
in moving forward from that.

807
00:32:50,667 --> 00:32:52,667
Feldman: Okay, thanks.

808
00:32:52,667 --> 00:32:54,667
Now that we are
announcing things,

809
00:32:54,667 --> 00:32:56,667
uh, we have something else
to announce.

810
00:32:56,667 --> 00:32:59,000
And we are trying to do our best

811
00:32:59,000 --> 00:33:02,000
to support every feature
in the Chrome Developer Tools,

812
00:33:02,000 --> 00:33:04,000
but sometimes it's just not...
[speaking indistinctly]

813
00:33:04,000 --> 00:33:06,200
and sometimes there's just
too many good ideas

814
00:33:06,200 --> 00:33:08,167
to put into the product.

815
00:33:08,167 --> 00:33:09,834
And to address that,

816
00:33:09,834 --> 00:33:11,834
we are introducing
an extensibility API.

817
00:33:11,834 --> 00:33:14,501
So it's a Chrome extension API
that allows you, um,

818
00:33:14,501 --> 00:33:16,334
extending Chrome,

819
00:33:16,334 --> 00:33:18,667
and we have three types of APIs
that we're revealing today.

820
00:33:18,667 --> 00:33:20,501
First is panels.

821
00:33:20,501 --> 00:33:22,667
Uh, with that API
you can add a panel

822
00:33:22,667 --> 00:33:24,667
to the developer tools window.

823
00:33:24,667 --> 00:33:27,167
With your own I-frame content
that is going to, uh,

824
00:33:27,167 --> 00:33:29,667
be talking through the page
and instrument it.

825
00:33:29,667 --> 00:33:32,334
Uh, you can also add sidebars
to the "Elements" panel

826
00:33:32,334 --> 00:33:34,167
with that API.

827
00:33:34,167 --> 00:33:37,501
There's an audit API
where you can implement the, uh,

828
00:33:37,501 --> 00:33:40,000
audit suite
that we were not talking about,

829
00:33:40,000 --> 00:33:42,000
but you can add the audit suite

830
00:33:42,000 --> 00:33:44,167
for, like, model readiness
or readability

831
00:33:44,167 --> 00:33:48,000
and make it a part of the, um,
Chrome Developer Tools.

832
00:33:48,000 --> 00:33:51,334
And the third one
is the resources.

833
00:33:51,334 --> 00:33:54,167
Uh, we all are interested
in the latency

834
00:33:54,167 --> 00:33:56,167
and everything that
work related,

835
00:33:56,167 --> 00:33:58,167
so you're exposing
all the network information

836
00:33:58,167 --> 00:34:01,167
by means of HAR format
in these resources APIs

837
00:34:01,167 --> 00:34:03,167
so that you can
analyze resources,

838
00:34:03,167 --> 00:34:05,000
load time, and latency

839
00:34:05,000 --> 00:34:07,334
and express some information
to the user in the panel

840
00:34:07,334 --> 00:34:10,501
that you're adding
to the developer tools.

841
00:34:10,501 --> 00:34:14,033
Now these APIs
are Chrome extensions APIs.

842
00:34:14,033 --> 00:34:16,501
Uh, they are currently
in the experimental phase.

843
00:34:16,501 --> 00:34:19,000
It means that we are looking
forward for your feedback,

844
00:34:19,000 --> 00:34:21,033
and we are going to process it

845
00:34:21,033 --> 00:34:23,167
for a couple of Chrome
iterations.

846
00:34:23,167 --> 00:34:26,000
Um, it is now
six weeks per iteration.

847
00:34:26,000 --> 00:34:28,000
And then we'll make them stable.

848
00:34:28,000 --> 00:34:30,000
So we want your feedback,

849
00:34:30,000 --> 00:34:32,167
and here's the way
to provide it.

850
00:34:32,167 --> 00:34:34,667
Irish: So we've been showing
a few features here today,

851
00:34:34,667 --> 00:34:37,000
and a lot of them
are pretty new features.

852
00:34:37,000 --> 00:34:39,334
So if you want to play around
with this stuff,

853
00:34:39,334 --> 00:34:42,000
um, we really recommend
trying out

854
00:34:42,000 --> 00:34:44,167
the Chrome developer channel
or the Canary build.

855
00:34:44,167 --> 00:34:46,367
The dev channel updates
about once a week,

856
00:34:46,367 --> 00:34:48,334
The dev channel about daily.

857
00:34:48,334 --> 00:34:50,667
Uh, but you can be getting
the latest and greatest stuff.

858
00:34:50,667 --> 00:34:53,167
The pace of development on
the dev tools is extremely fast,

859
00:34:53,167 --> 00:34:55,334
so, like, every week
you're seeing new features

860
00:34:55,334 --> 00:34:57,501
landing inside your browser,
which is really exciting.

861
00:34:57,501 --> 00:35:00,100
If you are doing that
and you find a bug,

862
00:35:00,100 --> 00:35:02,501
you know, we definitely
want to hear about that.

863
00:35:02,501 --> 00:35:04,834
We also really, really want
to hear your feature requests

864
00:35:04,834 --> 00:35:08,000
so please just head on over
to new.crbug.com.

865
00:35:08,000 --> 00:35:10,000
File a bug against Chromium.

866
00:35:10,000 --> 00:35:12,334
Just mention dev tools,
and we'll get right on it

867
00:35:12,334 --> 00:35:14,667
and see if we can
make it happen for you.

868
00:35:14,667 --> 00:35:17,167
Now we've been using a few
keyboard shortcuts in here.

869
00:35:17,167 --> 00:35:20,000
Pavel was showing
a go-to-line down here.

870
00:35:20,000 --> 00:35:22,000
There's a few, uh,
different ones,

871
00:35:22,000 --> 00:35:24,000
and you might forget them.

872
00:35:24,000 --> 00:35:26,167
You can actually just type
a question mark

873
00:35:26,167 --> 00:35:28,000
when you're in the dev tools,

874
00:35:28,000 --> 00:35:30,167
and it pops open a nice
little heads-up display

875
00:35:30,167 --> 00:35:32,334
to remind you of some
of the keyboard shortcuts.

876
00:35:32,334 --> 00:35:34,167
But there's--there's a few more

877
00:35:34,167 --> 00:35:36,167
than the ones
that are shown there,

878
00:35:36,167 --> 00:35:38,000
and we recommend you check out

879
00:35:38,000 --> 00:35:40,000
the Chrome Developer Tools
documentation site.

880
00:35:40,000 --> 00:35:42,167
So here there's full docs
on nearly every feature

881
00:35:42,167 --> 00:35:44,834
including a full listing
of the shortcuts.

882
00:35:44,834 --> 00:35:47,834
Uh, we talk about the brand-new
remote debugging capabilities,

883
00:35:47,834 --> 00:35:50,000
and we have a lot of videos
as well

884
00:35:50,000 --> 00:35:52,000
to go deep dive
into the functionality

885
00:35:52,000 --> 00:35:53,868
within the dev tools.

886
00:35:53,868 --> 00:35:56,000
So definitely recommend
you guys check that out.

887
00:35:56,000 --> 00:35:58,167
Other than that,
I think that's it for us.

888
00:35:58,167 --> 00:36:00,100
Thank you guys very much
for coming.

889
00:36:00,100 --> 00:36:03,100
[applause]

890
00:36:06,834 --> 00:36:09,000
Irish: We'll be doing
a little bit of Q&A.

891
00:36:09,000 --> 00:36:11,000
Uh, we have microphones
here and here.

892
00:36:11,000 --> 00:36:13,167
Um, so if you have
any questions for us

893
00:36:13,167 --> 00:36:15,167
about the Chrome
Developer Tools,

894
00:36:15,167 --> 00:36:17,601
uh, we would love
to answer them for you.

895
00:36:19,834 --> 00:36:21,501
Yes, sir.

896
00:36:21,501 --> 00:36:24,000
man: So when I get
a 500 level response,

897
00:36:24,000 --> 00:36:26,534
uh, in the network monitor,

898
00:36:26,534 --> 00:36:30,501
but it's giving me content
that describes the error,

899
00:36:30,501 --> 00:36:32,501
when I click on
the "Content" tab

900
00:36:32,501 --> 00:36:34,501
it--it's always blank.

901
00:36:34,501 --> 00:36:36,834
But if I go and just type
that URL in my browser,

902
00:36:36,834 --> 00:36:39,000
I will see that content.

903
00:36:39,000 --> 00:36:41,000
Feldman: Yeah, so--
man: Is--

904
00:36:41,000 --> 00:36:43,000
Feldman: Yeah, we're currently
working on it.

905
00:36:43,000 --> 00:36:45,167
There's a new feature called,
uh, JSON Pretty Print

906
00:36:45,167 --> 00:36:47,701
so for all XD charts
you're going to get

907
00:36:47,701 --> 00:36:50,667
a printed JSON content with
[speaking indistinctly] tree,

908
00:36:50,667 --> 00:36:53,167
the same thing we're doing
for all the error messages

909
00:36:53,167 --> 00:36:55,167
so that for all 500s and such

910
00:36:55,167 --> 00:36:58,000
we are going to render HTML
in a separate tab.

911
00:36:58,000 --> 00:37:00,434
I think we'll have it, like,
in a couple of weeks,

912
00:37:00,434 --> 00:37:03,167
so check out the dev channel,
and you'll have it there.

913
00:37:03,167 --> 00:37:06,834
man: Okay. Thanks.

914
00:37:06,834 --> 00:37:09,501
man: Uh, the time limit,
the tab,

915
00:37:09,501 --> 00:37:13,000
is it possible to replay
those timeline events?

916
00:37:13,000 --> 00:37:15,000
Feldman: Is it possible...

917
00:37:15,000 --> 00:37:17,334
Irish: To replay, uh,
the timeline data as it...

918
00:37:17,334 --> 00:37:19,667
Feldman: Uh, no, you can't
replay it at the moment,

919
00:37:19,667 --> 00:37:22,501
and you can't, uh, save it yet.

920
00:37:22,501 --> 00:37:24,501
We're working on saving first.

921
00:37:24,501 --> 00:37:27,000
And, uh, but you could process
that data

922
00:37:27,000 --> 00:37:30,334
with the, um, remote debugging
API that we have now

923
00:37:30,334 --> 00:37:32,501
so that you can attach to Chrome

924
00:37:32,501 --> 00:37:35,000
and on the low level,
on the JSON level,

925
00:37:35,000 --> 00:37:37,000
you can record all the actions

926
00:37:37,000 --> 00:37:39,000
that are taking place
on the page,

927
00:37:39,000 --> 00:37:42,167
analyze them, and use them for
for your continuous integration

928
00:37:42,167 --> 00:37:45,667
compared to the later builds,
execution and such.

929
00:37:45,667 --> 00:37:48,167
And for that you should check
out the remote debugging page

930
00:37:48,167 --> 00:37:50,501
where were are revealing
the remote debugging protocol

931
00:37:50,501 --> 00:37:52,501
that you could connect
to Chrome with.

932
00:37:52,501 --> 00:37:54,601
man: Oh, thanks.

933
00:37:57,167 --> 00:37:59,334
man: Hi, yeah,
thanks a lot for that.

934
00:37:59,334 --> 00:38:01,400
That's really awesome stuff.
Irish: Thank you.

935
00:38:01,400 --> 00:38:03,501
man: Uh, this "Save As,"
I saw that.

936
00:38:03,501 --> 00:38:06,033
Um, do you, like,
an automatic save,

937
00:38:06,033 --> 00:38:08,000
um, where you can just, like,

938
00:38:08,000 --> 00:38:10,501
save to the same file
so it remembers it, basically,

939
00:38:10,501 --> 00:38:12,667
for CSS and JavaScript?

940
00:38:12,667 --> 00:38:15,000
Feldman: So it's kind of
the first time we are

941
00:38:15,000 --> 00:38:18,000
entering the IED space in here,

942
00:38:18,000 --> 00:38:21,334
and we don't go to--we don't
want to go too far there.

943
00:38:21,334 --> 00:38:23,334
We are a debugging tool.

944
00:38:23,334 --> 00:38:25,000
Uh, what we--

945
00:38:25,000 --> 00:38:27,667
and it is also kind of
a privacy--security concern,

946
00:38:27,667 --> 00:38:29,667
uh, to write to your hard drive

947
00:38:29,667 --> 00:38:31,834
from within
the sandbox environment,

948
00:38:31,834 --> 00:38:34,000
so we want it to be
very explicit.

949
00:38:34,000 --> 00:38:36,334
And, uh, but talking about
the saving as you go,

950
00:38:36,334 --> 00:38:39,033
uh, we are exposing the remote
debugging protocol now,

951
00:38:39,033 --> 00:38:43,000
and we expect, uh, web IEDs
or Cloud IEDs

952
00:38:43,000 --> 00:38:45,167
to talk to Chrome by means
of that protocol

953
00:38:45,167 --> 00:38:47,667
and allow you
editing things live

954
00:38:47,667 --> 00:38:49,834
so that you will be
in the environment,

955
00:38:49,834 --> 00:38:51,501
in the IED environment,

956
00:38:51,501 --> 00:38:53,167
still talking to Chrome

957
00:38:53,167 --> 00:38:55,167
and having
all these capabilities.

958
00:38:55,167 --> 00:38:57,501
But there are no plans
of silently saving to disk

959
00:38:57,501 --> 00:38:59,501
from within browser yet.

960
00:38:59,501 --> 00:39:03,000
man: Okay, thank you.
[laughs]

961
00:39:03,000 --> 00:39:05,834
man: Do you have any plans
for any, uh,

962
00:39:05,834 --> 00:39:09,667
tight integration with
GWT-built applications?

963
00:39:09,667 --> 00:39:13,701
Feldman: So we've shown you
the Pretty Print functionality.

964
00:39:13,701 --> 00:39:16,000
Now the way it works,
it pretty prints

965
00:39:16,000 --> 00:39:18,000
the JavaScript source code.

966
00:39:18,000 --> 00:39:20,000
It parses it
and pretty prints it.

967
00:39:20,000 --> 00:39:23,167
And then as it pretty prints it,
it creates a mapping,

968
00:39:23,167 --> 00:39:25,000
but in the old one,

969
00:39:25,000 --> 00:39:27,334
the [speaking indistinctly] one
and the pretty printed one,

970
00:39:27,334 --> 00:39:29,334
and as you debug it,

971
00:39:29,334 --> 00:39:31,334
we kind of use this mapping

972
00:39:31,334 --> 00:39:33,501
to show you breakpoints on
the pretty printed locations

973
00:39:33,501 --> 00:39:35,501
but set them in the [speaking
indistinctly] locations

974
00:39:35,501 --> 00:39:37,501
in the virtual machine.

975
00:39:37,501 --> 00:39:39,501
Now we can use
the same machinery

976
00:39:39,501 --> 00:39:41,834
to work with the translated
languages such as GWT.

977
00:39:41,834 --> 00:39:44,000
So we are going
to support mappings

978
00:39:44,000 --> 00:39:46,367
for the compiled languages
into JavaScript.

979
00:39:46,367 --> 00:39:48,501
It's just not in the build yet.

980
00:39:48,501 --> 00:39:51,667
But the Pretty Print is a very
solid step in that direction,

981
00:39:51,667 --> 00:39:53,667
and it is in our plans.

982
00:39:53,667 --> 00:39:55,767
man: Thanks.

983
00:39:59,834 --> 00:40:01,667
Feldman: Yeah, please.

984
00:40:01,667 --> 00:40:03,667
man: You mentioned that, uh,

985
00:40:03,667 --> 00:40:06,334
it's available for the RIM
PlayBook to be able to, um,

986
00:40:06,334 --> 00:40:10,167
play with the DOM over here
from my MacBook over here.

987
00:40:10,167 --> 00:40:13,334
So but is that a feature
that's rolling out later

988
00:40:13,334 --> 00:40:15,334
on other devices,

989
00:40:15,334 --> 00:40:17,834
or is it something that
I could also play with on this?

990
00:40:17,834 --> 00:40:21,000
Irish: Uh, that's the new
Samsung, the one that you got?

991
00:40:21,000 --> 00:40:22,834
man: Samsung, yeah.

992
00:40:22,834 --> 00:40:24,834
Irish: Currently, uh,
that's not available,

993
00:40:24,834 --> 00:40:26,834
uh, on the Honeycomb builds.

994
00:40:26,834 --> 00:40:30,667
Um, and, uh, so right now
it's available on PlayBook,

995
00:40:30,667 --> 00:40:32,667
but we expect, you know,
future iterations

996
00:40:32,667 --> 00:40:35,501
of all--everything
that uses mobile WebKit

997
00:40:35,501 --> 00:40:37,501
to be able to have that feature.

998
00:40:37,501 --> 00:40:41,000
man: Great. Great.
That's very exciting.

999
00:40:41,000 --> 00:40:43,000
man: The one feature

1000
00:40:43,000 --> 00:40:45,334
I've always missed
in the Chrome Developer Tools

1001
00:40:45,334 --> 00:40:47,334
is when you do a search

1002
00:40:47,334 --> 00:40:49,501
it only searches
the current file you're in.

1003
00:40:49,501 --> 00:40:51,501
It does not search
every single file,

1004
00:40:51,501 --> 00:40:53,868
which is a feature
in Firebug I love,

1005
00:40:53,868 --> 00:40:57,834
and I-I have a really hard time
using Chrome Developer Tools

1006
00:40:57,834 --> 00:40:59,834
because of that one feature.

1007
00:40:59,834 --> 00:41:02,501
Feldman: Yeah, so, uh,
that's a popular thing.

1008
00:41:02,501 --> 00:41:04,501
man: I'm sure it was.

1009
00:41:04,501 --> 00:41:07,000
Feldman: You can
search everything

1010
00:41:07,000 --> 00:41:09,000
with the "Resources" panel.

1011
00:41:09,000 --> 00:41:12,501
So it'll search every resource
including JavaScript and CSS

1012
00:41:12,501 --> 00:41:14,501
and bring you multiple results.

1013
00:41:14,501 --> 00:41:16,501
So kind of technically
it is possible.

1014
00:41:16,501 --> 00:41:18,501
Not too useful, I agree.

1015
00:41:18,501 --> 00:41:20,501
Now we are not--

1016
00:41:20,501 --> 00:41:22,501
so the feature that
we're missing, really,

1017
00:41:22,501 --> 00:41:24,501
is a search results pane

1018
00:41:24,501 --> 00:41:26,701
so that you could search
like in the ID

1019
00:41:26,701 --> 00:41:29,167
and get a lot of a list
of results you could jump in,

1020
00:41:29,167 --> 00:41:31,000
uh, in the bottom.

1021
00:41:31,000 --> 00:41:33,334
The thing is that the doc mode
that we're using

1022
00:41:33,334 --> 00:41:35,334
that is very popular, it is--

1023
00:41:35,334 --> 00:41:38,334
we don't have too much
real estate vertically already,

1024
00:41:38,334 --> 00:41:40,834
so a search pane
does not work that well.

1025
00:41:40,834 --> 00:41:43,334
So we are looking
for the solution for that,

1026
00:41:43,334 --> 00:41:45,501
and we know that it is
a popular request,

1027
00:41:45,501 --> 00:41:47,501
but before that we just say

1028
00:41:47,501 --> 00:41:49,501
please search in
the "Resources" panel.

1029
00:41:49,501 --> 00:41:51,501
You'll find it there.

1030
00:41:51,501 --> 00:41:54,000
And then go to any other
resource or other panel

1031
00:41:54,000 --> 00:41:56,000
where you can use it.

1032
00:41:56,000 --> 00:41:58,501
man: The way that--the way
it works in--in--

1033
00:41:58,501 --> 00:42:00,968
in other choices
that if you just do a search

1034
00:42:00,968 --> 00:42:03,167
you just start going through
each file individually.

1035
00:42:03,167 --> 00:42:05,000
So you start in the one file

1036
00:42:05,000 --> 00:42:07,000
and just keep on going through
each--each--

1037
00:42:07,000 --> 00:42:09,167
you have to hit "Enter"
a lot of times,

1038
00:42:09,167 --> 00:42:11,334
but you eventually do get to it,
you know.

1039
00:42:11,334 --> 00:42:13,501
Feldman: Right. Right.
Except for in this page...

1040
00:42:13,501 --> 00:42:15,501
man: Right.
Feldman: There's just

1041
00:42:15,501 --> 00:42:17,667
too much of them, so when we
want search results pane.

1042
00:42:17,667 --> 00:42:19,501
man: Okay.
Feldman: Web is moving

1043
00:42:19,501 --> 00:42:21,834
so we need kind of more
real estate for search results.

1044
00:42:21,834 --> 00:42:23,667
man: All right, thanks.

1045
00:42:23,667 --> 00:42:26,000
man: Is there any way in
the Chrome Developer Tools

1046
00:42:26,000 --> 00:42:28,000
to remove all breakpoints
at once

1047
00:42:28,000 --> 00:42:29,667
instead of going through

1048
00:42:29,667 --> 00:42:31,667
and manually removing
one at a time?

1049
00:42:31,667 --> 00:42:33,701
Irish: Yeah.
Feldman: I think so.

1050
00:42:33,701 --> 00:42:35,834
Irish: This guy right here.
Feldman: That deactivates them.

1051
00:42:35,834 --> 00:42:37,667
You want to remove them.

1052
00:42:37,667 --> 00:42:40,000
man: 'Cause a lot of times
the guys on the team

1053
00:42:40,000 --> 00:42:42,167
will actually set up, like,
ten breakpoints for something

1054
00:42:42,167 --> 00:42:44,501
and finally fix a bug
and then have to go

1055
00:42:44,501 --> 00:42:46,501
and manually click and remove
every single breakpoint.

1056
00:42:46,501 --> 00:42:48,501
I know it's trite, but...
[laughs]

1057
00:42:48,501 --> 00:42:50,667
Feldman: So let me, yeah,
so, um, interesting fact.

1058
00:42:50,667 --> 00:42:52,834
Uh, we're working on
Chrome Developer Tools upstream.

1059
00:42:52,834 --> 00:42:55,000
It means that
we are committing our code

1060
00:42:55,000 --> 00:42:57,000
into the WebKit repository.

1061
00:42:57,000 --> 00:42:59,667
And, uh, you can add a file bug
into the crbug.com

1062
00:42:59,667 --> 00:43:01,834
or into the WebKit.org.

1063
00:43:01,834 --> 00:43:03,834
And you'll find
all the useful shortcuts

1064
00:43:03,834 --> 00:43:05,834
on our documentation page,

1065
00:43:05,834 --> 00:43:08,000
and we encourage you to file
the bug there

1066
00:43:08,000 --> 00:43:10,334
or file a bug on the crbug.com
and star it.

1067
00:43:10,334 --> 00:43:12,501
Because the way
we are fixing the bugs

1068
00:43:12,501 --> 00:43:15,133
and feature requests is
we sort by number of stars,

1069
00:43:15,133 --> 00:43:17,167
and if the request
has a lot of stars,

1070
00:43:17,167 --> 00:43:19,167
and I would foresee
that this one would,

1071
00:43:19,167 --> 00:43:21,167
as well as
the search one before,

1072
00:43:21,167 --> 00:43:23,167
we'll just fix it.
man: Cool.

1073
00:43:23,167 --> 00:43:25,167
Thank you.
Feldman: Okay, thanks.

1074
00:43:25,167 --> 00:43:26,834
Okay.
Irish: Cool.

1075
00:43:26,834 --> 00:43:28,834
Feldman: Yeah.
Irish: I guess that's it.

1076
00:43:28,834 --> 00:43:31,000
Well, thank you guys very much
for coming. Appreciate it.

1077
00:43:31,000 --> 00:43:32,868
Feldman: Yeah, thank you.
[applause]

