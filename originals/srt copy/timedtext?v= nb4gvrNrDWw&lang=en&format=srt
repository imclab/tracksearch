1
00:00:00,000 --> 00:00:01,530
BRENDAN KENNY: Hi, this
is Brendan Kenny.

2
00:00:01,530 --> 00:00:03,380
I'm an engineer with the
Google Maps Developer

3
00:00:03,380 --> 00:00:04,540
Relations team.

4
00:00:04,540 --> 00:00:07,070
Today, I wanted to share with
you a few simple tips on how

5
00:00:07,070 --> 00:00:09,640
the Chrome developer tools can
make developing with the

6
00:00:09,640 --> 00:00:12,690
Google Maps APIs a
whole lot easier.

7
00:00:12,690 --> 00:00:15,315
Now, if you've never opened up
the dev tools before, you can

8
00:00:15,315 --> 00:00:17,650
do so by coming up here to the
Wrench menu, dropping down to

9
00:00:17,650 --> 00:00:20,320
Tools, and selecting
Developer Tools.

10
00:00:20,320 --> 00:00:23,350
You can also use the really
handy keyboard shortcuts,

11
00:00:23,350 --> 00:00:26,740
Command Option I on the Mac,
and Control Shift I

12
00:00:26,740 --> 00:00:29,660
on Windows and Linux.

13
00:00:29,660 --> 00:00:32,860
Now, once they're opened up,
you should see something

14
00:00:32,860 --> 00:00:35,370
familiar if you've ever used the
developer tools on a lot

15
00:00:35,370 --> 00:00:36,430
of the major browsers.

16
00:00:36,430 --> 00:00:39,140
Over here on the left, we have
an outline of all the DOM

17
00:00:39,140 --> 00:00:40,120
elements in the page.

18
00:00:40,120 --> 00:00:42,770
And if we select one, on the
right, you'll see the matching

19
00:00:42,770 --> 00:00:46,075
CSS rules and the styles they
apply to that element.

20
00:00:46,075 --> 00:00:47,840
But we're not that interested
in that today.

21
00:00:47,840 --> 00:00:50,950
Instead, I'd like to stop by the
network panel where, if we

22
00:00:50,950 --> 00:00:55,120
load a map, we can see all the
files that had to be loaded in

23
00:00:55,120 --> 00:00:58,570
order to put this page in
a map on the screen.

24
00:00:58,570 --> 00:01:00,200
What's good about this is we
can look at any individual

25
00:01:00,200 --> 00:01:02,690
file and see if there's some
kind of network problem, see

26
00:01:02,690 --> 00:01:04,879
if it's too large or bloated,
and we need

27
00:01:04,879 --> 00:01:06,530
to shrink that image.

28
00:01:06,530 --> 00:01:08,940
We can also see timing
information to see how long it

29
00:01:08,940 --> 00:01:10,490
took for the server
to respond.

30
00:01:10,490 --> 00:01:12,440
And then finally, download
that file.

31
00:01:12,440 --> 00:01:13,190
So that's pretty helpful.

32
00:01:13,190 --> 00:01:16,900
But what we're most interested
in today is here in the

33
00:01:16,900 --> 00:01:18,640
developer console.

34
00:01:18,640 --> 00:01:20,475
Now, what the developer console
gives us is actually

35
00:01:20,475 --> 00:01:23,280
an interactive JavaScript
execution environment.

36
00:01:23,280 --> 00:01:25,340
What's more, it's the same
execution environment that the

37
00:01:25,340 --> 00:01:27,560
page itself is running in.

38
00:01:27,560 --> 00:01:29,540
What this means is that the
code that we write on our

39
00:01:29,540 --> 00:01:32,000
page, and any code that we've
loaded, like the Google Maps

40
00:01:32,000 --> 00:01:34,130
API, is actually code that
we can interact with

41
00:01:34,130 --> 00:01:36,160
right now at runtime.

42
00:01:36,160 --> 00:01:38,180
Now, since maps are such a
visual medium, this provides a

43
00:01:38,180 --> 00:01:40,920
great way to tweak our code
and algorithms and see the

44
00:01:40,920 --> 00:01:44,120
results instantly, as opposed
to going back to our source

45
00:01:44,120 --> 00:01:46,780
code, making an edit, saving,
and then refreshing every time

46
00:01:46,780 --> 00:01:49,320
we want to make a
small change.

47
00:01:49,320 --> 00:01:51,090
Now, in order to take advantage
of this, we have to

48
00:01:51,090 --> 00:01:54,360
make a slight change to our
source code so that everything

49
00:01:54,360 --> 00:01:57,490
that we need is in the global
scope and we can find it right

50
00:01:57,490 --> 00:01:58,760
here in the console.

51
00:01:58,760 --> 00:02:02,280
So if we switch over, we can see
that this map is a pretty

52
00:02:02,280 --> 00:02:05,230
typical "Hello, World" example
of the Maps API.

53
00:02:05,230 --> 00:02:07,740
We start off with an options
object, which gives it a

54
00:02:07,740 --> 00:02:09,539
default view and a map type.

55
00:02:09,539 --> 00:02:12,530
We take that options object and
a DOM element, and we can

56
00:02:12,530 --> 00:02:14,250
create our map itself.

57
00:02:14,250 --> 00:02:15,890
Now, the problem here
is we're keeping a

58
00:02:15,890 --> 00:02:16,740
reference to the map.

59
00:02:16,740 --> 00:02:17,440
But we're declaring that

60
00:02:17,440 --> 00:02:19,220
reference inside this function.

61
00:02:19,220 --> 00:02:22,910
So as soon as this function is
over, this reference is gone.

62
00:02:22,910 --> 00:02:25,290
Now instead, we can take that
reference and declare it

63
00:02:25,290 --> 00:02:28,550
outside in the global scope.

64
00:02:28,550 --> 00:02:31,620
And now, if we save and
return to our page.

65
00:02:31,620 --> 00:02:37,600
Now, if we refresh and write
"map" here, you can actually

66
00:02:37,600 --> 00:02:40,250
see that the console provides
us with an interactive

67
00:02:40,250 --> 00:02:42,220
representation of
the map object.

68
00:02:42,220 --> 00:02:45,410
You might even recognize some
of the Maps API here.

69
00:02:45,410 --> 00:02:49,420
So just as I said, we can now
interact with this just as we

70
00:02:49,420 --> 00:02:50,910
would in the code on the page.

71
00:02:50,910 --> 00:02:56,140
So if I write map.getZoom, I
can see the current zoom.

72
00:02:56,140 --> 00:02:58,200
But I can actually set
things as well.

73
00:02:58,200 --> 00:03:05,200
So just as a really simple
example, map.setZoom5 gives us

74
00:03:05,200 --> 00:03:08,320
a nice, zoomed out
view of Sydney.

75
00:03:08,320 --> 00:03:11,610
Now, this actually brings up
one of the things that is

76
00:03:11,610 --> 00:03:13,790
really handy just for setting
up even a basic map.

77
00:03:13,790 --> 00:03:15,930
You want the perfect
view to start off.

78
00:03:15,930 --> 00:03:19,090
So maybe you want to start
off looking at Japan.

79
00:03:19,090 --> 00:03:21,510
So we find our nice view here.

80
00:03:21,510 --> 00:03:23,130
We come back down
to the console.

81
00:03:23,130 --> 00:03:25,450
And you see that things have
gotten kind of crowded with

82
00:03:25,450 --> 00:03:27,740
these network errors
and warnings.

83
00:03:27,740 --> 00:03:31,645
So one really nice thing you
can write is "clear." And

84
00:03:31,645 --> 00:03:33,720
that'll actually clear
the console.

85
00:03:33,720 --> 00:03:36,570
So I want to look at this
view every time I

86
00:03:36,570 --> 00:03:37,310
want to open the map.

87
00:03:37,310 --> 00:03:39,970
So I can actually ask the map,
what is the current view?

88
00:03:39,970 --> 00:03:45,860
So map.getZoom tells
us level 10.

89
00:03:45,860 --> 00:03:50,600
And I can do map.getCenter
to find out the center.

90
00:03:50,600 --> 00:03:52,270
But that will return
a latlong object.

91
00:03:52,270 --> 00:03:54,980
And I'll have to look at
it and interrogate it.

92
00:03:54,980 --> 00:03:57,770
But what I can do to be extra
sneaky, I know there's a

93
00:03:57,770 --> 00:04:00,740
toString method on here that
will give me a string

94
00:04:00,740 --> 00:04:02,580
representation of the latitude
and longitude of the

95
00:04:02,580 --> 00:04:03,950
center of the map.

96
00:04:03,950 --> 00:04:09,835
So now, I can copy this, go back
to the source code, paste

97
00:04:09,835 --> 00:04:12,450
it into the beginning.

98
00:04:12,450 --> 00:04:16,580
And I know I need to change
my zoom to level 10.

99
00:04:16,580 --> 00:04:22,050
And when I save this and then
refresh the page, you can see

100
00:04:22,050 --> 00:04:25,680
that I'm now starting exactly
where I wanted to.

101
00:04:25,680 --> 00:04:28,040
Let's look at a slightly
more advanced example.

102
00:04:28,040 --> 00:04:31,070
Now here, we have the amazing
wireframe that my designer

103
00:04:31,070 --> 00:04:32,820
gave me for our new site.

104
00:04:32,820 --> 00:04:35,280
So I've taken that wireframe
and dropped it into the

105
00:04:35,280 --> 00:04:36,815
background of this page.

106
00:04:36,815 --> 00:04:39,090
And he's told me that a map
needs to go here in this

107
00:04:39,090 --> 00:04:39,860
center area.

108
00:04:39,860 --> 00:04:43,360
So I've re-structured the page
a bit, put a div there, and

109
00:04:43,360 --> 00:04:44,190
dropped a map in it.

110
00:04:44,190 --> 00:04:47,410
But as you can clearly see,
nothing is there.

111
00:04:47,410 --> 00:04:50,200
So let's open up the dev tools
and try to figure out

112
00:04:50,200 --> 00:04:53,250
what's going on.

113
00:04:53,250 --> 00:04:55,960
The first thing we notice is
this JavaScript error-- cannot

114
00:04:55,960 --> 00:04:58,125
set property position
of undefined.

115
00:04:58,125 --> 00:05:00,840
Now, the problem is I never set
a property named position

116
00:05:00,840 --> 00:05:03,720
at any point in my code, so that
seems a little bit odd.

117
00:05:03,720 --> 00:05:06,000
If I dropped down this arrow
here, I can actually see a

118
00:05:06,000 --> 00:05:07,940
stack trace of all the functions
that were called

119
00:05:07,940 --> 00:05:09,240
that led to this error.

120
00:05:09,240 --> 00:05:11,060
But once again, I see a bunch
of function names

121
00:05:11,060 --> 00:05:12,180
that I don't recognize.

122
00:05:12,180 --> 00:05:13,385
[? Nee ?] and [? To ?]

123
00:05:13,385 --> 00:05:14,700
[? j.O ?] aren't functions
that I ever

124
00:05:14,700 --> 00:05:16,250
wrote in my own code.

125
00:05:16,250 --> 00:05:18,930
And the explanation for this can
be found here on the right

126
00:05:18,930 --> 00:05:20,760
where you can see that
all these errors

127
00:05:20,760 --> 00:05:22,880
took place in main.js.

128
00:05:22,880 --> 00:05:24,520
That's a JavaScript file
that was loaded by the

129
00:05:24,520 --> 00:05:26,745
Maps API, not by me.

130
00:05:26,745 --> 00:05:29,060
Now, my first instinct
might be to go file a

131
00:05:29,060 --> 00:05:30,360
bug on the Maps API.

132
00:05:30,360 --> 00:05:32,980
After all, the error is
happening in their code.

133
00:05:32,980 --> 00:05:35,050
But I have a sneaking suspicion
that the problem

134
00:05:35,050 --> 00:05:36,570
actually lies in my own.

135
00:05:36,570 --> 00:05:39,200
I started with known, good,
working code, the earlier

136
00:05:39,200 --> 00:05:42,760
example, and added to it and
changed it until I could get

137
00:05:42,760 --> 00:05:44,210
it to work in this design.

138
00:05:44,210 --> 00:05:46,710
So it's possible I introduced
a bug somewhere in the steps

139
00:05:46,710 --> 00:05:47,920
in between.

140
00:05:47,920 --> 00:05:50,040
There are few ways we can
track down this problem.

141
00:05:50,040 --> 00:05:52,480
One is the old fashioned brute
force method of starting with

142
00:05:52,480 --> 00:05:55,270
a known, good code, and then
adding the new code line by

143
00:05:55,270 --> 00:05:58,450
line, saving and refreshing
every time, until we finally

144
00:05:58,450 --> 00:05:59,710
encounter the bug.

145
00:05:59,710 --> 00:06:01,025
A somewhat better approach
would be to

146
00:06:01,025 --> 00:06:02,910
use the console object.

147
00:06:02,910 --> 00:06:04,950
Console is an object that lives
on the window in the

148
00:06:04,950 --> 00:06:08,450
global scope and provides an
API so that your JavaScript

149
00:06:08,450 --> 00:06:11,240
code can utilize the developer
console here just as if you

150
00:06:11,240 --> 00:06:13,170
were sitting here
typing on it.

151
00:06:13,170 --> 00:06:15,390
Now, one of the most helpful
methods that it provides is

152
00:06:15,390 --> 00:06:18,560
the log method, which basically
just logs statements

153
00:06:18,560 --> 00:06:20,930
to the developer console.

154
00:06:20,930 --> 00:06:23,390
So it's just console.log
and some value.

155
00:06:23,390 --> 00:06:24,810
So here's a string.

156
00:06:24,810 --> 00:06:26,130
And there you go.

157
00:06:26,130 --> 00:06:29,510
So let's switch over to the
source for this page.

158
00:06:29,510 --> 00:06:31,780
And you can see things are
mostly the same here.

159
00:06:31,780 --> 00:06:34,840
And so I'm going to guess that
maybe I changed something in

160
00:06:34,840 --> 00:06:36,360
my options that caused
a problem.

161
00:06:36,360 --> 00:06:39,026
So I'm just going to
add a console.log

162
00:06:39,026 --> 00:06:42,430
statement here, my options.

163
00:06:42,430 --> 00:06:45,760
And we save it, and come
back here, and refresh.

164
00:06:45,760 --> 00:06:48,530
Now, we can see before this
error statement, I do indeed

165
00:06:48,530 --> 00:06:49,560
have an object here.

166
00:06:49,560 --> 00:06:50,670
And I can look.

167
00:06:50,670 --> 00:06:54,210
And as we did before, we can see
that, well, OK, the center

168
00:06:54,210 --> 00:06:55,140
look rights.

169
00:06:55,140 --> 00:06:56,550
The map ID looks right.

170
00:06:56,550 --> 00:06:57,430
And zoom looks right.

171
00:06:57,430 --> 00:06:59,160
So maybe that's not the issue.

172
00:06:59,160 --> 00:07:01,130
So let's switch back over
to our source code.

173
00:07:01,130 --> 00:07:02,320
And here, we have the
log statement.

174
00:07:02,320 --> 00:07:03,960
And now, we can add one
after map div and

175
00:07:03,960 --> 00:07:04,900
make sure that's OK.

176
00:07:04,900 --> 00:07:07,250
And one after map, and
make sure that's OK.

177
00:07:07,250 --> 00:07:09,480
But you can tell as this
scales to hundreds and

178
00:07:09,480 --> 00:07:12,090
thousands of lines of code,
it's not really feasible

179
00:07:12,090 --> 00:07:14,360
anymore to use console.log.

180
00:07:14,360 --> 00:07:16,290
Log is great for
actual logging.

181
00:07:16,290 --> 00:07:18,560
But if you have hundreds and
thousands of lines to go

182
00:07:18,560 --> 00:07:20,850
through to find out where the
problem occurred, you really

183
00:07:20,850 --> 00:07:22,350
haven't made your problem
any easier.

184
00:07:22,350 --> 00:07:26,180
So let's get rid of this
console.log statement.

185
00:07:26,180 --> 00:07:27,430
Go back to our page.

186
00:07:27,430 --> 00:07:29,730

187
00:07:29,730 --> 00:07:31,810
So the last approach I want to
take to solving this problem

188
00:07:31,810 --> 00:07:34,060
lies in the scripts panel.

189
00:07:34,060 --> 00:07:36,780
Now, the scripts panel has kind
of an intimidating UI.

190
00:07:36,780 --> 00:07:40,310
And I think a common first
reaction to seeing it is, the

191
00:07:40,310 --> 00:07:42,290
JavaScript problem you're
facing today isn't tough

192
00:07:42,290 --> 00:07:44,750
enough to justify the time it'll
take to learn how to use

193
00:07:44,750 --> 00:07:45,870
the scripts panel.

194
00:07:45,870 --> 00:07:48,030
But it turns out the tools
available here are enough to

195
00:07:48,030 --> 00:07:50,000
solve basically any JavaScript
problem.

196
00:07:50,000 --> 00:07:52,620
So it's really worth at
least trying out.

197
00:07:52,620 --> 00:07:54,810
Here on the left, you can see
all the JavaScript files that

198
00:07:54,810 --> 00:07:56,760
were loaded to create
this page.

199
00:07:56,760 --> 00:07:58,880
This can be a little confusing
at first, until you notice

200
00:07:58,880 --> 00:08:02,500
that the top of each tree
has the domain listed.

201
00:08:02,500 --> 00:08:05,040
So here, localhost is where I'm
hosting most of my files.

202
00:08:05,040 --> 00:08:07,550
And mapgrid.html is
my main page.

203
00:08:07,550 --> 00:08:10,080
So when I open it up, you can
see the full source of the

204
00:08:10,080 --> 00:08:11,580
page, and then down
here, the actual

205
00:08:11,580 --> 00:08:13,730
JavaScript that's executing.

206
00:08:13,730 --> 00:08:17,110
Now, like the debuggers in many
languages, the scripts

207
00:08:17,110 --> 00:08:19,200
panel provides a way to
set break points.

208
00:08:19,200 --> 00:08:24,570
So if I click here on a line of
code, the JavaScript engine

209
00:08:24,570 --> 00:08:27,400
will actually pause execution
when it reaches this line and

210
00:08:27,400 --> 00:08:30,620
allow me to inspect the
state interactively.

211
00:08:30,620 --> 00:08:32,840
Now, the problem here is, of
course, that the break point

212
00:08:32,840 --> 00:08:35,450
is in the initialized function,
which is executed

213
00:08:35,450 --> 00:08:37,409
when the page is first loaded.

214
00:08:37,409 --> 00:08:39,950
But as long as we have the
developer tools open, we can

215
00:08:39,950 --> 00:08:43,760
actually refresh the page, and
Chrome will remember our break

216
00:08:43,760 --> 00:08:45,150
point and pause there.

217
00:08:45,150 --> 00:08:49,180
So now, we've paused before
things have even started in

218
00:08:49,180 --> 00:08:50,100
our initialized function.

219
00:08:50,100 --> 00:08:52,750
And so now, we can take a
look at what's going on.

220
00:08:52,750 --> 00:08:55,370
Up here in the top right, we
have the buttons that control

221
00:08:55,370 --> 00:08:57,740
our experience during this
debugging session.

222
00:08:57,740 --> 00:08:59,450
First, we have a
Resume button.

223
00:08:59,450 --> 00:09:01,110
That just resumes execution
as if there

224
00:09:01,110 --> 00:09:02,790
never was a break point.

225
00:09:02,790 --> 00:09:05,190
We have a Step Over button, and
this will let us move from

226
00:09:05,190 --> 00:09:08,000
line to line and actually see
how each line develops within

227
00:09:08,000 --> 00:09:09,190
this function.

228
00:09:09,190 --> 00:09:12,310
And then, we actually have a
Step Into button that will go

229
00:09:12,310 --> 00:09:14,710
and dig down into any functions
that we encounter so

230
00:09:14,710 --> 00:09:17,090
we can see what's going on in
those functions as well.

231
00:09:17,090 --> 00:09:18,960
Now, in this case, we don't
really have any function calls

232
00:09:18,960 --> 00:09:19,900
that we're interested in.

233
00:09:19,900 --> 00:09:22,910
We have a latlong and map
constructors, but that's just

234
00:09:22,910 --> 00:09:23,850
obfuscated code.

235
00:09:23,850 --> 00:09:26,430
And then, we have actually the
selector for the map canvas

236
00:09:26,430 --> 00:09:28,870
div, but that just digs
into jQuery code.

237
00:09:28,870 --> 00:09:30,880
So in this case, we're only
going to be using the Step

238
00:09:30,880 --> 00:09:31,560
Over button.

239
00:09:31,560 --> 00:09:33,720
So below here, you can see all
the variables we're going to

240
00:09:33,720 --> 00:09:35,710
be using within this function.

241
00:09:35,710 --> 00:09:37,890
The map div objects, we're going
to be initializing down

242
00:09:37,890 --> 00:09:39,670
here, and the myOptions
object, we're about to

243
00:09:39,670 --> 00:09:40,810
initialize.

244
00:09:40,810 --> 00:09:42,690
And if you're really brave,
you can see all the global

245
00:09:42,690 --> 00:09:45,040
variables that are available
at this point.

246
00:09:45,040 --> 00:09:47,310
The problem is there's
a whole lot of them.

247
00:09:47,310 --> 00:09:49,480
Everything that's declared in
the window is listed here.

248
00:09:49,480 --> 00:09:51,810
But if you scroll down to "M,"
you can see our lonely, little

249
00:09:51,810 --> 00:09:53,470
map that we're going to
be constructing soon.

250
00:09:53,470 --> 00:09:56,280
And we put it in the
global scope here.

251
00:09:56,280 --> 00:09:57,970
But we're not that interested
in the global variables, so

252
00:09:57,970 --> 00:09:59,185
let's collapse that.

253
00:09:59,185 --> 00:10:01,160
And we can start looking
through this

254
00:10:01,160 --> 00:10:02,500
code step by step.

255
00:10:02,500 --> 00:10:05,300
So if we hit Step Over, we
execute this statement.

256
00:10:05,300 --> 00:10:07,560
And the myOptions object
is now initialized.

257
00:10:07,560 --> 00:10:09,120
And you can see, just as when
we logged it to the

258
00:10:09,120 --> 00:10:10,780
console.log, everything
looks OK.

259
00:10:10,780 --> 00:10:13,712
We have a center, and we have
the correct map type ID, and

260
00:10:13,712 --> 00:10:14,650
the correct zoom.

261
00:10:14,650 --> 00:10:16,030
So let's keep going.

262
00:10:16,030 --> 00:10:19,290
In this next line, we use jQuery
to select the correct

263
00:10:19,290 --> 00:10:21,350
map canvas div that
we're going to use

264
00:10:21,350 --> 00:10:22,270
to create the map.

265
00:10:22,270 --> 00:10:25,260
So if we execute that statement,
we can now see

266
00:10:25,260 --> 00:10:26,530
something strange.

267
00:10:26,530 --> 00:10:30,940
mapdiv is set to
[? e.fn.e.anet1 ?], which is

268
00:10:30,940 --> 00:10:32,310
definitely not what
we'd expect.

269
00:10:32,310 --> 00:10:33,310
We'd expect some kind of

270
00:10:33,310 --> 00:10:35,430
representation of a DOM element.

271
00:10:35,430 --> 00:10:37,520
Once again, our secret weapon
for figuring out what's going

272
00:10:37,520 --> 00:10:39,680
on is the developer console.

273
00:10:39,680 --> 00:10:42,380
Now, I could go over to the
developer console panel.

274
00:10:42,380 --> 00:10:48,320
Or I could hit Escape and get
a mini one right here.

275
00:10:48,320 --> 00:10:50,160
So I want to figure out what's
going on with mapdiv, so I'll

276
00:10:50,160 --> 00:10:52,175
just log that and see
what's going on.

277
00:10:52,175 --> 00:10:54,970
And it looks like I do have
the correct DOM element.

278
00:10:54,970 --> 00:10:57,620
But it's inside of an array
for some reason.

279
00:10:57,620 --> 00:10:59,770
So at this point, I would know
that this came back from the

280
00:10:59,770 --> 00:11:00,400
jQuery function.

281
00:11:00,400 --> 00:11:02,330
So I'd go and check
the jQuery docs.

282
00:11:02,330 --> 00:11:05,230
And I'd remember that the jQuery
function doesn't return

283
00:11:05,230 --> 00:11:06,460
the selected objects directly.

284
00:11:06,460 --> 00:11:09,490
It actually creates a new
jQuery object with those

285
00:11:09,490 --> 00:11:11,760
objects associated with it.

286
00:11:11,760 --> 00:11:13,970
Now, this is great for jQuery
because it allows all the

287
00:11:13,970 --> 00:11:16,530
really fun jQuery function
chaining that

288
00:11:16,530 --> 00:11:17,960
you can do with jQuery.

289
00:11:17,960 --> 00:11:21,080
The problem is the Maps API
expects a DOM element

290
00:11:21,080 --> 00:11:24,380
directly, and not something
wrapped up in another object.

291
00:11:24,380 --> 00:11:28,010
To fix the issue, I want to come
back to my source code.

292
00:11:28,010 --> 00:11:29,270
And there's a couple of
ways you can do this.

293
00:11:29,270 --> 00:11:32,470
But the easiest one, I find,
is just .get(0).

294
00:11:32,470 --> 00:11:34,910
And since I know this is an ID
and there's only one of them,

295
00:11:34,910 --> 00:11:37,220
"0" is the appropriate
index to use.

296
00:11:37,220 --> 00:11:39,190
I save it, come back here.

297
00:11:39,190 --> 00:11:42,160
And I can exit from dev tools.

298
00:11:42,160 --> 00:11:46,030
And when I refresh the
page, there's my map.

299
00:11:46,030 --> 00:11:47,690
And there's the basic
introduction to using the

300
00:11:47,690 --> 00:11:50,380
Chrome developer tools with
the Google Maps APIs.

301
00:11:50,380 --> 00:11:52,780
If you don't use any developer
tools today, you should really

302
00:11:52,780 --> 00:11:53,480
try them out.

303
00:11:53,480 --> 00:11:55,470
And I think you'll find your
life as a developer will

304
00:11:55,470 --> 00:11:57,050
become considerably easier.

305
00:11:57,050 --> 00:11:58,755
And you'll be able to
concentrate on problems that

306
00:11:58,755 --> 00:11:59,870
actually matter.

307
00:11:59,870 --> 00:12:01,530
If you'd like to know more,
you can visit this link.

308
00:12:01,530 --> 00:12:03,760
And you can find a list of
all the commands and APIs

309
00:12:03,760 --> 00:12:06,730
available, as well as further
screencasts that gives more

310
00:12:06,730 --> 00:12:08,260
information into using
developer tools.

311
00:12:08,260 --> 00:12:15,000

