1
00:00:01,334 --> 00:00:04,367
>> Fisher: So this is Chrome
Multi-Process Architecture,

2
00:00:04,367 --> 00:00:05,601
seat of the pants edition,

3
00:00:05,601 --> 00:00:06,601
and, you know,

4
00:00:06,601 --> 00:00:07,968
I just wanna take some time

5
00:00:07,968 --> 00:00:11,567
and give everybody sort of
the lay of the land,

6
00:00:11,567 --> 00:00:15,968
try to explain,
paint the broad picture

7
00:00:15,968 --> 00:00:16,968
of how everything works,

8
00:00:16,968 --> 00:00:18,100
and talk about
some of the things

9
00:00:18,100 --> 00:00:19,434
that we had to do

10
00:00:19,434 --> 00:00:21,100
in order to make

11
00:00:21,100 --> 00:00:22,734
make it all work well.

12
00:00:22,734 --> 00:00:24,501
And then I wanna
try to leave some time--

13
00:00:24,501 --> 00:00:26,267
enough time for people
to ask questions,

14
00:00:26,267 --> 00:00:28,334
and hopefully there will be
some interesting questions,

15
00:00:28,334 --> 00:00:30,767
and we can dive into
some interesting things.

16
00:00:30,767 --> 00:00:32,300
So some of this will be review

17
00:00:32,300 --> 00:00:34,701
if you've read
some of the design docs,

18
00:00:34,701 --> 00:00:36,767
but I'll just
get right into it.

19
00:00:36,767 --> 00:00:38,767
So first of all,

20
00:00:38,767 --> 00:00:40,033
what are some of the goals

21
00:00:40,033 --> 00:00:42,334
of Multi-Process Architecture?

22
00:00:45,334 --> 00:00:47,567
Well,
we wanted to make sure that--

23
00:00:47,567 --> 00:00:49,200
What we were basically
going after is,

24
00:00:49,200 --> 00:00:51,467
we really wanted to make
a very stable browser,

25
00:00:51,467 --> 00:00:54,767
fast and secure,

26
00:00:54,767 --> 00:00:57,501
and we recognized

27
00:00:57,501 --> 00:00:59,968
that one really great way

28
00:00:59,968 --> 00:01:01,534
to improve on all these fronts

29
00:01:01,534 --> 00:01:04,234
was to divide up the browser

30
00:01:04,234 --> 00:01:07,467
into multiple processes.

31
00:01:07,467 --> 00:01:11,501
So when I talk about
stability, though,

32
00:01:11,501 --> 00:01:13,000
there's more than just
dividing the processes up

33
00:01:13,000 --> 00:01:14,000
into multiple processes

34
00:01:14,000 --> 00:01:15,367
in case the renderer crashes.

35
00:01:15,367 --> 00:01:16,634
We also want to make sure
that the renderer

36
00:01:16,634 --> 00:01:17,634
can't do anything

37
00:01:17,634 --> 00:01:20,334
to make your browser hang

38
00:01:20,334 --> 00:01:22,400
or lockup in interesting ways,

39
00:01:22,400 --> 00:01:24,334
and we also wanted to make sure

40
00:01:24,334 --> 00:01:27,968
that essentially
the main process

41
00:01:27,968 --> 00:01:30,701
that was actually driving
the whole user interface

42
00:01:30,701 --> 00:01:32,067
would always be able to show

43
00:01:32,067 --> 00:01:34,868
some recent representation
of the web page

44
00:01:34,868 --> 00:01:37,801
such that even if the renderer
was out to lunch

45
00:01:37,801 --> 00:01:39,267
or running garbage collection

46
00:01:39,267 --> 00:01:40,767
or doing some crazy thing,

47
00:01:40,767 --> 00:01:41,801
we'd be able to show

48
00:01:41,801 --> 00:01:43,434
something meaningful
to the users.

49
00:01:43,434 --> 00:01:45,567
And this was sort of
a guiding principle

50
00:01:45,567 --> 00:01:46,567
for a lot of things,

51
00:01:46,567 --> 00:01:48,133
which I'll get into later.

52
00:01:48,133 --> 00:01:49,167
We wanted to make sure
that all--

53
00:01:49,167 --> 00:01:50,400
Related to this,

54
00:01:50,400 --> 00:01:51,667
we wanted to make sure
all the communication

55
00:01:51,667 --> 00:01:53,067
was very asynchronous,

56
00:01:53,067 --> 00:01:55,200
and not blocking in weird ways

57
00:01:55,200 --> 00:01:56,901
that would cause
the user interface

58
00:01:56,901 --> 00:02:00,033
to--to be janky,

59
00:02:00,033 --> 00:02:02,834
and so that's "stable,"

60
00:02:02,834 --> 00:02:04,334
and "fast," well,

61
00:02:04,334 --> 00:02:06,267
we recognized that
by dividing the browser up

62
00:02:06,267 --> 00:02:07,501
into multiple processes,

63
00:02:07,501 --> 00:02:10,534
we could see benefits
on multi-core systems.

64
00:02:10,534 --> 00:02:12,067
That's one thing.

65
00:02:12,067 --> 00:02:13,234
We saw that, you know,

66
00:02:13,234 --> 00:02:14,667
if you have many
different applications going,

67
00:02:14,667 --> 00:02:16,467
well, they can all
be running independently.

68
00:02:16,467 --> 00:02:17,701
Great.

69
00:02:17,701 --> 00:02:19,534
But what I wanna talk about
here also is that

70
00:02:19,534 --> 00:02:22,667
we found that even in the case
of running a single web page,

71
00:02:22,667 --> 00:02:24,601
we could derive some benefits
from multi-core,

72
00:02:24,601 --> 00:02:27,300
so I'll talk about that
in a bit.

73
00:02:27,300 --> 00:02:28,300
"Secure."

74
00:02:28,300 --> 00:02:29,968
Well, in the very beginning,

75
00:02:29,968 --> 00:02:30,968
we thought, well,

76
00:02:30,968 --> 00:02:32,200
in the very beginning,

77
00:02:32,200 --> 00:02:33,634
we had no idea we'd be so lucky

78
00:02:33,634 --> 00:02:36,901
as to hire a team
of sandboxing experts,

79
00:02:36,901 --> 00:02:38,501
but it seemed reasonable

80
00:02:38,501 --> 00:02:40,167
that if you
had a separate process

81
00:02:40,167 --> 00:02:41,567
for your rendering agent

82
00:02:41,567 --> 00:02:42,634
that you could probably
do something

83
00:02:42,634 --> 00:02:43,901
to limit the harm

84
00:02:43,901 --> 00:02:45,868
if it were ever corrupted.

85
00:02:45,868 --> 00:02:48,367
Turns out that, you know,

86
00:02:48,367 --> 00:02:52,400
we're able to bring on the team
of experts in this area,

87
00:02:52,400 --> 00:02:56,801
and that led to us
pushing really hard

88
00:02:56,801 --> 00:02:58,834
to separate the renderer
as much as possible

89
00:02:58,834 --> 00:02:59,934
from the operating system,

90
00:02:59,934 --> 00:03:01,434
so that it was easy
to sandbox it,

91
00:03:01,434 --> 00:03:03,133
so I'll talk about
some of that.

92
00:03:03,133 --> 00:03:04,567
So here's some of the goals.

93
00:03:04,567 --> 00:03:05,534
First of all, though,

94
00:03:05,534 --> 00:03:06,934
I wanna draw another picture

95
00:03:06,934 --> 00:03:11,934
just to give you a diagram
of sort of some of the terms.

96
00:03:11,934 --> 00:03:15,567
So what we were trying to do
here really

97
00:03:15,567 --> 00:03:19,200
is bring WebKit into the browser

98
00:03:19,200 --> 00:03:20,200
in this multi-process way,

99
00:03:20,200 --> 00:03:23,434
so WebKit represents
a rendering area

100
00:03:23,434 --> 00:03:25,601
using something
called a WebView,

101
00:03:25,601 --> 00:03:29,434
and so we basically
have this thing

102
00:03:29,434 --> 00:03:30,901
that renders a web page

103
00:03:30,901 --> 00:03:31,901
that we need to have running

104
00:03:31,901 --> 00:03:32,901
in the subprocess,

105
00:03:32,901 --> 00:03:34,067
and then get its pixels

106
00:03:34,067 --> 00:03:35,667
and put it on the screen
in the main process,

107
00:03:35,667 --> 00:03:37,100
so we wrap the WebView

108
00:03:37,100 --> 00:03:39,801
with something called
a RenderView,

109
00:03:39,801 --> 00:03:43,234
and then this guy talks,

110
00:03:43,234 --> 00:03:45,434
as I'll talk later
over IPC,

111
00:03:45,434 --> 00:03:49,968
to something called
a RenderView post,

112
00:03:49,968 --> 00:03:53,734
so this is in the browser.

113
00:03:55,934 --> 00:03:58,767
And then here's in
the renderer process.

114
00:03:58,767 --> 00:04:01,167
The renderer.

115
00:04:01,167 --> 00:04:03,767
[man speaks indistinct]

116
00:04:03,767 --> 00:04:04,767
Okay, yeah.

117
00:04:04,767 --> 00:04:05,968
Peter made the comment

118
00:04:05,968 --> 00:04:08,000
that when we say "view" here,

119
00:04:08,000 --> 00:04:09,000
we're not actually
talking at all

120
00:04:09,000 --> 00:04:11,501
about Chrome views,

121
00:04:11,501 --> 00:04:13,367
which was actually
developed much later.

122
00:04:13,367 --> 00:04:15,534
And to add confusion,

123
00:04:15,534 --> 00:04:17,033
there's actually a class
in WebKit

124
00:04:17,033 --> 00:04:18,667
called RenderView,

125
00:04:18,667 --> 00:04:19,901
but we're not--
We don't mean that.

126
00:04:19,901 --> 00:04:21,501
We mean the class in Chrome

127
00:04:21,501 --> 00:04:22,767
called RenderView.

128
00:04:22,767 --> 00:04:23,767
[laughter]

129
00:04:23,767 --> 00:04:29,367
So this is the WebKit side...

130
00:04:29,367 --> 00:04:31,033
over here,

131
00:04:31,033 --> 00:04:33,167
and essentially
what you'll see in the code

132
00:04:33,167 --> 00:04:34,534
is that there's a WebView

133
00:04:34,534 --> 00:04:35,534
contained by RenderView,

134
00:04:35,534 --> 00:04:37,100
which then does IPC plumbing

135
00:04:37,100 --> 00:04:38,100
to something in the browser

136
00:04:38,100 --> 00:04:39,100
called a RenderView host.

137
00:04:39,100 --> 00:04:40,801
So another picture.

138
00:04:40,801 --> 00:04:43,701
Okay.

139
00:04:43,701 --> 00:04:45,767
Stitching it all together,

140
00:04:45,767 --> 00:04:48,434
if you actually get down
and look at the code,

141
00:04:48,434 --> 00:04:50,667
what we have in the browser
as I mentioned here,

142
00:04:50,667 --> 00:04:52,801
we have these things
called RenderView hosts,

143
00:04:52,801 --> 00:04:55,133
which is actually corresponds

144
00:04:55,133 --> 00:04:56,868
to a native widget,

145
00:04:56,868 --> 00:04:59,601
like an hWnd in Windows,

146
00:04:59,601 --> 00:05:01,400
and we can have
multiple of these,

147
00:05:01,400 --> 00:05:03,467
one for every tab,

148
00:05:03,467 --> 00:05:05,634
okay, and then
on the other renderer side,

149
00:05:05,634 --> 00:05:07,634
we have a corresponding
RenderView,

150
00:05:07,634 --> 00:05:10,534
again, one for each tab,

151
00:05:10,534 --> 00:05:11,801
and these guys,

152
00:05:11,801 --> 00:05:13,601
if they're all corr--

153
00:05:13,601 --> 00:05:15,033
As I've drawn it here,

154
00:05:15,033 --> 00:05:16,868
these are all
in one renderer process,

155
00:05:16,868 --> 00:05:19,100
so these are the corresponding
objects in the browser

156
00:05:19,100 --> 00:05:20,801
for those guys.

157
00:05:20,801 --> 00:05:22,834
And they talk to something

158
00:05:22,834 --> 00:05:28,734
called a render process host,

159
00:05:28,734 --> 00:05:31,334
who then over IPC

160
00:05:31,334 --> 00:05:32,400
is communicating

161
00:05:32,400 --> 00:05:37,133
to a corresponding
renderer process.

162
00:05:37,133 --> 00:05:38,667
So this is actually--

163
00:05:38,667 --> 00:05:41,701
This diagram shows the IPC flow.

164
00:05:41,701 --> 00:05:43,367
If a RenderView interview host

165
00:05:43,367 --> 00:05:44,501
wants to talk to his peer,

166
00:05:44,501 --> 00:05:45,834
he has to send a message

167
00:05:45,834 --> 00:05:47,300
through his render process host

168
00:05:47,300 --> 00:05:48,334
over an IPC channel

169
00:05:48,334 --> 00:05:49,601
to that guy,

170
00:05:49,601 --> 00:05:51,100
and so messages between

171
00:05:51,100 --> 00:05:52,467
RenderView hosts
in RenderView,

172
00:05:52,467 --> 00:05:54,300
we call them routed messages.

173
00:05:54,300 --> 00:05:56,834
Just wanna get
all the terminology down.

174
00:05:56,834 --> 00:05:58,767
Routed messages.

175
00:05:58,767 --> 00:06:02,267
And then messages that just
terminate at the process level,

176
00:06:02,267 --> 00:06:03,467
at the render process host

177
00:06:03,467 --> 00:06:04,634
or at the render process,

178
00:06:04,634 --> 00:06:08,434
we call those control messages.

179
00:06:08,434 --> 00:06:11,133
Okay, so as I talk about
some of the other stuff,

180
00:06:11,133 --> 00:06:13,133
this hopefully will help.

181
00:06:13,133 --> 00:06:14,934
One more thing you'll see

182
00:06:14,934 --> 00:06:17,534
if you're in the code,
actually,

183
00:06:17,534 --> 00:06:19,501
is that RenderView
and RenderView host,

184
00:06:19,501 --> 00:06:22,634
they have a base class
called RenderWidget,

185
00:06:22,634 --> 00:06:27,601
RenderWidget host.

186
00:06:27,601 --> 00:06:30,234
I bring that up because

187
00:06:30,234 --> 00:06:32,400
there's also over here

188
00:06:32,400 --> 00:06:35,701
something called a web widget.

189
00:06:35,701 --> 00:06:36,701
And conceptually,

190
00:06:36,701 --> 00:06:38,167
this divide is simply between

191
00:06:38,167 --> 00:06:41,067
things that are purely
just graphics related,

192
00:06:41,067 --> 00:06:43,267
and things that add to that

193
00:06:43,267 --> 00:06:44,901
web page related stuff,

194
00:06:44,901 --> 00:06:47,000
so the concept of loading URLs

195
00:06:47,000 --> 00:06:49,968
is at the RenderView level,
WebView level.

196
00:06:49,968 --> 00:06:51,434
The concept
of just displaying pixels

197
00:06:51,434 --> 00:06:52,567
and dealing with input

198
00:06:52,567 --> 00:06:54,934
and scrolling
and cursors and so on

199
00:06:54,934 --> 00:06:56,667
is at the widget level.

200
00:06:56,667 --> 00:06:58,534
And we also reuse RenderWidget

201
00:06:58,534 --> 00:07:00,133
web widget and so on

202
00:07:00,133 --> 00:07:02,300
for other types of UI elements

203
00:07:02,300 --> 00:07:03,501
that are driven by WebKit

204
00:07:03,501 --> 00:07:04,667
that actually don't
have anything to do

205
00:07:04,667 --> 00:07:05,834
with loading pages,

206
00:07:05,834 --> 00:07:08,434
which are things like
drop-down selects,

207
00:07:08,434 --> 00:07:11,601
so if you have a select menu
in the web page

208
00:07:11,601 --> 00:07:12,634
and you click on it,

209
00:07:12,634 --> 00:07:14,367
it brings down
a little pop-up window.

210
00:07:14,367 --> 00:07:15,868
That pop-up window's contents

211
00:07:15,868 --> 00:07:16,868
are rendered by WebKit,

212
00:07:16,868 --> 00:07:18,501
but it's important to note

213
00:07:18,501 --> 00:07:19,968
that that pop-up content area

214
00:07:19,968 --> 00:07:24,067
isn't contained
by the owning RenderView.

215
00:07:24,067 --> 00:07:27,467
It can actually extend
beyond the bounds of the frame,

216
00:07:27,467 --> 00:07:28,634
so it really needs to be its own

217
00:07:28,634 --> 00:07:29,767
top-level hWnd,

218
00:07:29,767 --> 00:07:31,534
so we reuse the RenderWidget

219
00:07:31,534 --> 00:07:33,968
for that kind of stuff.

220
00:07:33,968 --> 00:07:37,734
Okay.

221
00:07:37,734 --> 00:07:40,067
So then a little bit about IPC.

222
00:07:40,067 --> 00:07:41,801
When we first
started this project,

223
00:07:41,801 --> 00:07:43,100
a lot of people were like,

224
00:07:43,100 --> 00:07:44,734
"We'll just use COM.

225
00:07:44,734 --> 00:07:46,567
"That'll solve
all your IPC problems,

226
00:07:46,567 --> 00:07:48,634
and it kinda gets you
everything for free."

227
00:07:48,634 --> 00:07:50,934
WebKit already at that time

228
00:07:50,934 --> 00:07:53,033
had a COM interface on Windows,

229
00:07:53,033 --> 00:07:55,033
so we tried that a little bit.

230
00:07:55,033 --> 00:07:58,033
COM had this sort of fundamental
limitation, though,

231
00:07:58,033 --> 00:08:00,501
that the IPC was synchronous,

232
00:08:00,501 --> 00:08:02,267
or if you tried to do it
asynchronous,

233
00:08:02,267 --> 00:08:04,033
it's not fully asynchronous,

234
00:08:04,033 --> 00:08:06,701
and so the performance
wasn't there.

235
00:08:06,701 --> 00:08:08,334
The kinds
of stability properties

236
00:08:08,334 --> 00:08:09,334
we were looking for
weren't there

237
00:08:09,334 --> 00:08:10,901
that I talked about earlier.

238
00:08:10,901 --> 00:08:13,300
Essentially, if we were
blocked on a renderer

239
00:08:13,300 --> 00:08:14,300
from the browser side,

240
00:08:14,300 --> 00:08:16,200
if we were blocked
on a renderer,

241
00:08:16,200 --> 00:08:18,133
we were hanging the browser,

242
00:08:18,133 --> 00:08:19,334
and then we were having bad UI,

243
00:08:19,334 --> 00:08:20,501
so we really wanted to make sure

244
00:08:20,501 --> 00:08:23,000
we had a very
asynchronous model for IPC.

245
00:08:23,000 --> 00:08:24,000
So then we went and just said,

246
00:08:24,000 --> 00:08:25,267
"Well, let's just use a pipe,"

247
00:08:25,267 --> 00:08:26,868
and we ended up
using a named pipe,

248
00:08:26,868 --> 00:08:29,100
then we used a synchronous I/O

249
00:08:29,100 --> 00:08:30,100
over a named pipe.

250
00:08:30,100 --> 00:08:31,133
That's great.

251
00:08:31,133 --> 00:08:33,834
Now we can send
asynchronous messages,

252
00:08:33,834 --> 00:08:36,267
and what we ended up doing,
though,

253
00:08:36,267 --> 00:08:40,300
we ended up meeting,
in some cases,

254
00:08:40,300 --> 00:08:41,734
synchronous messages,

255
00:08:41,734 --> 00:08:44,467
and so we--for example,

256
00:08:44,467 --> 00:08:46,834
we found that there are
plenty of times

257
00:08:46,834 --> 00:08:48,567
when WebKit
needs some information,

258
00:08:48,567 --> 00:08:50,501
and we need it now,

259
00:08:50,501 --> 00:08:52,367
and so that's a synchronous IPC,

260
00:08:52,367 --> 00:08:54,367
where he blocks it
till he gets a result.

261
00:08:54,367 --> 00:08:56,767
But we decided
that we will never

262
00:08:56,767 --> 00:08:59,634
do blocking IPCs
from the browser side,

263
00:08:59,634 --> 00:09:00,834
because of this whole problem

264
00:09:00,834 --> 00:09:02,434
of maybe the renderer
won't respond,

265
00:09:02,434 --> 00:09:03,667
and we wanna make sure

266
00:09:03,667 --> 00:09:05,234
the browser's always responsive.

267
00:09:05,234 --> 00:09:06,801
Okay.

268
00:09:06,801 --> 00:09:08,767
So this sort of segues

269
00:09:08,767 --> 00:09:10,601
to talking about threads
a little bit,

270
00:09:10,601 --> 00:09:11,868
so I thought
as part of this talk

271
00:09:11,868 --> 00:09:14,033
I should give
a little bit of description

272
00:09:14,033 --> 00:09:16,734
of the threads in Chrome,

273
00:09:16,734 --> 00:09:20,133
'cause it's not always obvious.

274
00:09:20,133 --> 00:09:21,801
You hear people talk about

275
00:09:21,801 --> 00:09:23,400
the I/O thread, the DB thread,

276
00:09:23,400 --> 00:09:24,467
the file thread,

277
00:09:24,467 --> 00:09:26,434
the, you know,
"What the F" thread,

278
00:09:26,434 --> 00:09:28,267
and maybe it would help

279
00:09:28,267 --> 00:09:30,601
to know why we have
the threads we have.

280
00:09:30,601 --> 00:09:33,400
So in the browser side
over here,

281
00:09:33,400 --> 00:09:36,968
we have something
called a UI thread,

282
00:09:36,968 --> 00:09:40,834
which is where almost all
the native widgetry runs,

283
00:09:40,834 --> 00:09:41,834
okay?

284
00:09:41,834 --> 00:09:44,033
And we have an I/O thread,

285
00:09:44,033 --> 00:09:48,634
which is where we handle
the IPC traffic,

286
00:09:48,634 --> 00:09:51,701
network...

287
00:09:51,701 --> 00:09:55,100
network loading,

288
00:09:55,100 --> 00:09:57,868
and various other kinds of

289
00:09:57,868 --> 00:10:02,734
what I'll call...

290
00:10:02,734 --> 00:10:04,467
routing type events.

291
00:10:04,467 --> 00:10:06,501
So this thread tries really hard

292
00:10:06,501 --> 00:10:08,601
to never be stopped on anything.

293
00:10:08,601 --> 00:10:11,934
It tries to be
purely asynchronous,

294
00:10:11,934 --> 00:10:15,200
so then we necessarily meet
a different thread

295
00:10:15,200 --> 00:10:17,167
for cases when we need
blocking I/O,

296
00:10:17,167 --> 00:10:19,901
and that ended up just
as the evolution of things

297
00:10:19,901 --> 00:10:21,501
being called the file thread,

298
00:10:21,501 --> 00:10:25,534
and this is where we do
blocking I/O

299
00:10:25,534 --> 00:10:27,534
as well as use COM

300
00:10:27,534 --> 00:10:29,300
when we need to talk to the OS,

301
00:10:29,300 --> 00:10:31,367
or Shell32 calls,

302
00:10:31,367 --> 00:10:33,868
because all these things
just are really awful.

303
00:10:33,868 --> 00:10:35,767
They can hang your browser
for a long time,

304
00:10:35,767 --> 00:10:37,634
so we don't want to use them

305
00:10:37,634 --> 00:10:39,300
on the UI thread
if we can help it.

306
00:10:39,300 --> 00:10:40,734
There's some small exceptions,

307
00:10:40,734 --> 00:10:44,133
because we used
a CRichEditCtrl here,

308
00:10:44,133 --> 00:10:46,067
which turns out to use COM,

309
00:10:46,067 --> 00:10:48,000
and is actually
a huge contributor

310
00:10:48,000 --> 00:10:50,033
to why Chrome
might not be as fast

311
00:10:50,033 --> 00:10:51,834
as it could be to start up.

312
00:10:51,834 --> 00:10:54,534
Ask Peter about that one.

313
00:10:54,534 --> 00:10:57,100
Then there's the DB thread

314
00:10:57,100 --> 00:10:59,734
where we used SQLite,

315
00:10:59,734 --> 00:11:03,133
and there's a few other
random threads,

316
00:11:03,133 --> 00:11:04,234
but these are the main ones

317
00:11:04,234 --> 00:11:05,234
you'll hear people talk about.

318
00:11:05,234 --> 00:11:06,534
Now on this side,

319
00:11:06,534 --> 00:11:08,701
on the renderer side,

320
00:11:08,701 --> 00:11:10,667
we also have--

321
00:11:10,667 --> 00:11:13,734
we have an I/O thread as well,

322
00:11:13,734 --> 00:11:16,400
which again, used
the receive IPCs, process IPCs,

323
00:11:16,400 --> 00:11:18,968
and then we have something
called the render thread...

324
00:11:18,968 --> 00:11:21,334
[person sneezes]

325
00:11:21,334 --> 00:11:23,567
...and this is the--

326
00:11:23,567 --> 00:11:30,601
this turns out to be
the WebKit main thread,

327
00:11:30,601 --> 00:11:33,100
so WebKit is a single thread,

328
00:11:33,100 --> 00:11:34,667
except for more recently

329
00:11:34,667 --> 00:11:36,133
where it handles worker threads,

330
00:11:36,133 --> 00:11:38,534
but traditionally
it's always been

331
00:11:38,534 --> 00:11:41,467
a single-threaded
kind of library,

332
00:11:41,467 --> 00:11:43,534
and this is the main thread

333
00:11:43,534 --> 00:11:45,467
where all
the WebKit action happens.

334
00:11:45,467 --> 00:11:48,934
And so to implement things
like synchronous IPCs,

335
00:11:48,934 --> 00:11:51,801
the renderer thread
gets blocked on a me text,

336
00:11:51,801 --> 00:11:53,100
but the I/O thread here

337
00:11:53,100 --> 00:11:54,901
services the IPCs

338
00:11:54,901 --> 00:11:56,367
to this thread here,

339
00:11:56,367 --> 00:11:58,467
where then some answer
is provided

340
00:11:58,467 --> 00:12:03,200
and back to this guy.

341
00:12:03,200 --> 00:12:05,868
There's one thing that I just
really wanna bring up

342
00:12:05,868 --> 00:12:06,901
while we're talking
about threads,

343
00:12:06,901 --> 00:12:08,501
'cause I think it's something

344
00:12:08,501 --> 00:12:11,033
that is really easy
to get bitten by,

345
00:12:11,033 --> 00:12:14,167
which is that when dealing with
synchronous IPCs,

346
00:12:14,167 --> 00:12:16,901
like, say you were implementing
some new web API,

347
00:12:16,901 --> 00:12:19,601
or you, like--local storage
or session storage,

348
00:12:19,601 --> 00:12:20,601
or things of this nature

349
00:12:20,601 --> 00:12:22,167
where you need it now,

350
00:12:22,167 --> 00:12:25,267
'cause the JavaScript
application wants a result.

351
00:12:25,267 --> 00:12:27,033
It's tempting to--

352
00:12:27,033 --> 00:12:29,133
You start out with this
synchronous IPC,

353
00:12:29,133 --> 00:12:30,567
and the traditional way

354
00:12:30,567 --> 00:12:32,901
that one might handle an IPC
coming from a RenderView,

355
00:12:32,901 --> 00:12:34,934
is to handle it
in the RenderView host,

356
00:12:34,934 --> 00:12:38,767
but the RenderView host
is an hWnd,

357
00:12:38,767 --> 00:12:39,968
has an hWnd,

358
00:12:39,968 --> 00:12:41,501
and it's actually
living on the UI thread,

359
00:12:41,501 --> 00:12:43,267
and so if a synchronous IPC

360
00:12:43,267 --> 00:12:45,968
comes from here
all the way to the UI thread,

361
00:12:45,968 --> 00:12:48,901
this actually turns out to be
a huge problem for us,

362
00:12:48,901 --> 00:12:50,334
and it's not obvious

363
00:12:50,334 --> 00:12:51,934
from what I've written
up here why,

364
00:12:51,934 --> 00:12:56,701
but plug-ins
are the source of this problem,

365
00:12:56,701 --> 00:12:58,901
and you can end up
with deadlocks,

366
00:12:58,901 --> 00:13:02,267
and I'll spend a little bit
of time explaining this,

367
00:13:02,267 --> 00:13:05,400
'cause I think it's really
helpful for people to know.

368
00:13:05,400 --> 00:13:07,467
So in Windows,

369
00:13:07,467 --> 00:13:08,734
when you have hWnds--

370
00:13:08,734 --> 00:13:11,334
I'm gonna draw pictures
of hWnds here,

371
00:13:11,334 --> 00:13:16,534
where the green one
is a plug-in.

372
00:13:16,534 --> 00:13:18,567
Like Flash.

373
00:13:18,567 --> 00:13:21,100
Flash allocates its own hWnd,

374
00:13:21,100 --> 00:13:23,834
and Chrome has its outer hWnd.

375
00:13:23,834 --> 00:13:26,033
Well,
when you do this kind of thing,

376
00:13:26,033 --> 00:13:29,167
because we're running plug-ins
out of process,

377
00:13:29,167 --> 00:13:31,234
there's actual
synchronous communication

378
00:13:31,234 --> 00:13:35,400
that Windows does
between parent and child hWnds.

379
00:13:35,400 --> 00:13:39,834
So it's possible
for our browser UI thread

380
00:13:39,834 --> 00:13:41,367
thanks to Windows,

381
00:13:41,367 --> 00:13:43,534
to be blocked, waiting
for Flash to do something,

382
00:13:43,534 --> 00:13:47,000
like paint itself
or service an input event.

383
00:13:47,000 --> 00:13:50,734
And it turns out
that Flash itself

384
00:13:50,734 --> 00:13:53,400
can also do things
like script a page.

385
00:13:53,400 --> 00:13:59,767
He can execute script
in the outer page.

386
00:13:59,767 --> 00:14:02,100
When he executes script
in the outer page,

387
00:14:02,100 --> 00:14:04,167
because we're running Flash
out of process,

388
00:14:04,167 --> 00:14:06,133
what he's really doing is
sending a synchronous IPC

389
00:14:06,133 --> 00:14:07,133
to the renderer,

390
00:14:07,133 --> 00:14:08,701
to the render thread,

391
00:14:08,701 --> 00:14:10,834
saying, "Please execute
this script for me."

392
00:14:10,834 --> 00:14:12,601
Well, while that's happening,

393
00:14:12,601 --> 00:14:15,701
he's not gonna be responsive

394
00:14:15,701 --> 00:14:18,000
to these incoming
Windows events.

395
00:14:18,000 --> 00:14:20,667
And so if the renderer thread

396
00:14:20,667 --> 00:14:22,067
were actually at that time

397
00:14:22,067 --> 00:14:24,667
trying to communicate
over to the browser UI thread,

398
00:14:24,667 --> 00:14:25,667
we could deadlock,

399
00:14:25,667 --> 00:14:26,667
because the browser UI thread

400
00:14:26,667 --> 00:14:27,934
might be blocked on the plug-in,

401
00:14:27,934 --> 00:14:29,701
and you get
these nasty deadlocks,

402
00:14:29,701 --> 00:14:32,100
so we just have this
very simple rule in Chrome.

403
00:14:32,100 --> 00:14:34,467
Any synchronous IPC
coming from the renderer

404
00:14:34,467 --> 00:14:36,400
should terminate
at the I/O thread

405
00:14:36,400 --> 00:14:38,434
or one of these other
background threads,

406
00:14:38,434 --> 00:14:39,634
but it should never be--

407
00:14:39,634 --> 00:14:41,501
never terminate here,

408
00:14:41,501 --> 00:14:43,300
never at the UI thread,

409
00:14:43,300 --> 00:14:44,767
and then we're safe.

410
00:14:44,767 --> 00:14:47,167
We can allow all kinds
of crazy synchronous IPCs

411
00:14:47,167 --> 00:14:48,167
that are doing weird things,

412
00:14:48,167 --> 00:14:53,734
and everything's happy.

413
00:14:53,734 --> 00:14:56,434
So then, okay,
now I really wanna move on

414
00:14:56,434 --> 00:14:58,467
to some more interesting things.

415
00:14:58,467 --> 00:15:00,467
Like painting.

416
00:15:05,133 --> 00:15:06,934
Everybody got this?

417
00:15:14,534 --> 00:15:19,968
So painting...

418
00:15:19,968 --> 00:15:22,567
scrolling...

419
00:15:22,567 --> 00:15:29,234
resizing, restoring tabs.

420
00:15:29,234 --> 00:15:30,834
All of these things,

421
00:15:30,834 --> 00:15:33,167
what they have in common is--

422
00:15:33,167 --> 00:15:36,434
these all have a lot in common
which I wanna talk about.

423
00:15:36,434 --> 00:15:37,434
So when we--

424
00:15:37,434 --> 00:15:39,501
I mentioned very early on,

425
00:15:39,501 --> 00:15:41,501
in order to achieve
these nice stability properties,

426
00:15:41,501 --> 00:15:42,501
where it looks like the browser

427
00:15:42,501 --> 00:15:44,534
can always be responsive
to the user,

428
00:15:44,534 --> 00:15:47,601
we were showing a possibly
old representation

429
00:15:47,601 --> 00:15:48,601
of the pixels for the page.

430
00:15:48,601 --> 00:15:51,367
So every RenderView host

431
00:15:51,367 --> 00:15:55,667
has a backing store,

432
00:15:55,667 --> 00:15:58,033
which is the bitmap

433
00:15:58,033 --> 00:16:00,934
of the last rendered version
of the page,

434
00:16:00,934 --> 00:16:05,601
and the pixels for that
come from the RenderView,

435
00:16:05,601 --> 00:16:09,400
which has functions like paint,

436
00:16:09,400 --> 00:16:13,567
and to produce pixels
and WebKit through this area

437
00:16:13,567 --> 00:16:17,801
will call back and do things
like invalidate...

438
00:16:17,801 --> 00:16:21,567
a Rect.

439
00:16:21,567 --> 00:16:23,133
So we will observe--

440
00:16:23,133 --> 00:16:24,167
the RenderView will be

441
00:16:24,167 --> 00:16:26,501
observing invalidates
from WebKit,

442
00:16:26,501 --> 00:16:28,267
and when he wants to,

443
00:16:28,267 --> 00:16:30,367
he can ask WebKit to paint
and produce pixels,

444
00:16:30,367 --> 00:16:32,434
and then what he does
is shifts those pixels

445
00:16:32,434 --> 00:16:33,434
over to the RenderView host,

446
00:16:33,434 --> 00:16:34,667
and the RenderView host

447
00:16:34,667 --> 00:16:36,968
puts those pixels
into his backing store,

448
00:16:36,968 --> 00:16:40,300
and now we have a representation
stored of the page

449
00:16:40,300 --> 00:16:42,467
that we can always
put on the screen,

450
00:16:42,467 --> 00:16:44,534
and he gets a WM_PAINT.

451
00:16:44,534 --> 00:16:46,934
This is the Windows message
saying,

452
00:16:46,934 --> 00:16:48,400
"Hey, look, you gotta put
something on the screen,

453
00:16:48,400 --> 00:16:50,133
'cause I don't have anything."

454
00:16:50,133 --> 00:16:51,501
And so what we'll do then

455
00:16:51,501 --> 00:16:54,067
is just on the backing store
put it on the screen.

456
00:16:54,067 --> 00:16:56,601
So painting in the browser now

457
00:16:56,601 --> 00:16:58,334
doesn't involve
the renderer at all.

458
00:16:58,334 --> 00:17:00,534
We can always just paint
from the backing store,

459
00:17:00,534 --> 00:17:01,834
and things are fast.

460
00:17:01,834 --> 00:17:03,968
[indistinct] from
the backing store is fast.

461
00:17:03,968 --> 00:17:05,534
Asynchronous to that,

462
00:17:05,534 --> 00:17:07,634
the renderer can update it.

463
00:17:07,634 --> 00:17:11,968
Early on, we built this system
and it was working,

464
00:17:11,968 --> 00:17:13,467
but I noticed some funny things.

465
00:17:13,467 --> 00:17:15,000
Like, if you take Google Maps

466
00:17:15,000 --> 00:17:16,634
and you grab the tile--

467
00:17:16,634 --> 00:17:18,033
grab the Google Map

468
00:17:18,033 --> 00:17:20,200
and you actually try to move it,

469
00:17:20,200 --> 00:17:22,601
sometimes it would never see

470
00:17:22,601 --> 00:17:24,434
the pixels
on the screen changing,

471
00:17:24,434 --> 00:17:26,934
but the CPU usage
would spike way up,

472
00:17:26,934 --> 00:17:28,767
and you're wondering
what's going on.

473
00:17:28,767 --> 00:17:31,801
Turns out that over here

474
00:17:31,801 --> 00:17:35,601
we were doing fun invalidate
paint kinds of operations,

475
00:17:35,601 --> 00:17:37,200
and getting lots of invalidates,

476
00:17:37,200 --> 00:17:38,200
doing lots of painting,

477
00:17:38,200 --> 00:17:40,434
shipping bitmaps over,

478
00:17:40,434 --> 00:17:42,868
and meanwhile
on the RenderView host side,

479
00:17:42,868 --> 00:17:44,667
we were receiving mouse inputs,

480
00:17:44,667 --> 00:17:46,834
sending mouse events over,

481
00:17:46,834 --> 00:17:49,534
and all this was going on,

482
00:17:49,534 --> 00:17:51,200
but we were never
getting a WM_PAINT.

483
00:17:51,200 --> 00:17:52,868
Turns out that input events

484
00:17:52,868 --> 00:17:54,467
on Windows always trump,

485
00:17:54,467 --> 00:17:56,801
always take precedent
over painting,

486
00:17:56,801 --> 00:17:59,033
and so that was fun.

487
00:17:59,033 --> 00:18:00,834
So we had to then add something

488
00:18:00,834 --> 00:18:03,834
to make sure that
we never produced a bitmap

489
00:18:03,834 --> 00:18:05,767
unless we got it on screen,

490
00:18:05,767 --> 00:18:08,467
so that was some interesting
counting that we just had to do,

491
00:18:08,467 --> 00:18:11,000
and then as a result,

492
00:18:11,000 --> 00:18:12,000
we don't have this problem,

493
00:18:12,000 --> 00:18:14,300
so we built
an acknowledgment basis

494
00:18:14,300 --> 00:18:16,033
so there's an IPC that says,

495
00:18:16,033 --> 00:18:18,133
you know, something, like,

496
00:18:18,133 --> 00:18:19,334
I think it's called Paint,

497
00:18:19,334 --> 00:18:21,000
PaintRect or something,

498
00:18:21,000 --> 00:18:22,701
and he carries with it

499
00:18:22,701 --> 00:18:27,300
some shared memory bitmap

500
00:18:27,300 --> 00:18:29,934
containing the data

501
00:18:29,934 --> 00:18:31,767
for the invalid region,

502
00:18:31,767 --> 00:18:33,467
the newly updated region,

503
00:18:33,467 --> 00:18:36,067
and then he has to send back
an acknowledgement.

504
00:18:36,067 --> 00:18:37,601
And then based on that

505
00:18:37,601 --> 00:18:41,434
everything works much better.

506
00:18:41,434 --> 00:18:42,868
Because of most of our--

507
00:18:42,868 --> 00:18:44,534
most everybody
was on dual-core at the time.

508
00:18:44,534 --> 00:18:46,234
No one ever saw that problem
with Google Maps.

509
00:18:46,234 --> 00:18:48,834
It was only when you got on
as the new-core machine.

510
00:18:48,834 --> 00:18:53,801
But an acknowledgement-based
system works great there.

511
00:18:53,801 --> 00:18:54,801
Scrolling.

512
00:18:54,801 --> 00:18:56,634
Scrolling is very similar.

513
00:18:56,634 --> 00:18:59,501
The thing you wanna do
with scrolling

514
00:18:59,501 --> 00:19:00,501
to get very good performance

515
00:19:00,501 --> 00:19:01,734
is you wanna basically--

516
00:19:01,734 --> 00:19:02,767
Suppose you have--

517
00:19:02,767 --> 00:19:04,167
These are all the pixels
on the screen.

518
00:19:04,167 --> 00:19:05,167
What you really wanna do is--

519
00:19:05,167 --> 00:19:06,801
Suppose you're scrolling down.

520
00:19:06,801 --> 00:19:08,734
You wanna take the region

521
00:19:08,734 --> 00:19:10,501
that's still to be
on the screen,

522
00:19:10,501 --> 00:19:13,834
and just shift
all those pixels down to here,

523
00:19:13,834 --> 00:19:16,267
and then back.

524
00:19:16,267 --> 00:19:18,534
Fill the exposed region.

525
00:19:18,534 --> 00:19:19,534
So scrolling--

526
00:19:19,534 --> 00:19:22,234
[man speaks indistinctly]

527
00:19:22,234 --> 00:19:24,901
Yeah, he worked
on the scroll work.

528
00:19:24,901 --> 00:19:26,934
He's right.

529
00:19:26,934 --> 00:19:29,634
But what's going on here

530
00:19:29,634 --> 00:19:32,400
is that an input event
makes its way to WebKit,

531
00:19:32,400 --> 00:19:33,400
WebKit's like, "Hey."

532
00:19:33,400 --> 00:19:34,968
That hit a scrollbar.

533
00:19:34,968 --> 00:19:36,267
Scrollbar did its thing,

534
00:19:36,267 --> 00:19:37,267
said, "Move,"

535
00:19:37,267 --> 00:19:38,601
it scrolled the page,

536
00:19:38,601 --> 00:19:39,734
we get a command here

537
00:19:39,734 --> 00:19:41,667
that looks very different
and invalidated.

538
00:19:41,667 --> 00:19:46,167
It's called something like
ScrollRect.

539
00:19:46,167 --> 00:19:49,601
It gives us the rect
that should be scrolled,

540
00:19:49,601 --> 00:19:51,934
and then DX UI.

541
00:19:51,934 --> 00:19:53,601
Then what we do is,

542
00:19:53,601 --> 00:19:54,968
we set up
the same kind of thing.

543
00:19:54,968 --> 00:19:58,467
We wanna send an IPC
that says, "ScrollRect...

544
00:19:58,467 --> 00:20:00,901
passing the same parameters."

545
00:20:00,901 --> 00:20:03,033
We also called paint

546
00:20:03,033 --> 00:20:05,400
in order
to generate this region,

547
00:20:05,400 --> 00:20:10,334
sending that bitmap
along with the DX UI and so on.

548
00:20:10,334 --> 00:20:12,734
RenderView host then says,

549
00:20:12,734 --> 00:20:14,501
"Well, I need to perform
the same operations

550
00:20:14,501 --> 00:20:15,567
on my backing store."

551
00:20:15,567 --> 00:20:16,567
He takes his backing store,

552
00:20:16,567 --> 00:20:17,901
he shifts the pixels down,

553
00:20:17,901 --> 00:20:19,667
fills in the exposed region,

554
00:20:19,667 --> 00:20:22,367
and now he can, you know,

555
00:20:22,367 --> 00:20:25,334
tell the hWnd, "Hey, look,

556
00:20:25,334 --> 00:20:26,934
we need to do a scroll
operation,"

557
00:20:26,934 --> 00:20:29,634
and then when that
scroll operation happens,

558
00:20:29,634 --> 00:20:31,334
he's reading all the pixels

559
00:20:31,334 --> 00:20:32,801
out of his backing store again,

560
00:20:32,801 --> 00:20:33,801
so they're very decoupled.

561
00:20:33,801 --> 00:20:35,868
The renderers decouple,

562
00:20:35,868 --> 00:20:37,901
painting, actually, the screen,

563
00:20:37,901 --> 00:20:39,567
but because
we were actually getting

564
00:20:39,567 --> 00:20:40,968
DX UI and the bitmap,

565
00:20:40,968 --> 00:20:43,400
we can do things
like use Windows APIs

566
00:20:43,400 --> 00:20:45,133
like ScrollDC and ScrollWindow

567
00:20:45,133 --> 00:20:48,934
to actually do
optimized scrolling on the hWnd

568
00:20:48,934 --> 00:20:51,701
and to give
the graphics system knowledge

569
00:20:51,701 --> 00:20:52,901
that we just want to do

570
00:20:52,901 --> 00:20:54,601
these shift of pixels
and backfill,

571
00:20:54,601 --> 00:20:58,300
which allows scrolling
to be low CPU usage.

572
00:20:58,300 --> 00:21:01,033
It turns out
that some pages have, like,

573
00:21:01,033 --> 00:21:04,300
exposition content
defeat optimized scrolling,

574
00:21:04,300 --> 00:21:07,467
because you can't just
shift pixels down,

575
00:21:07,467 --> 00:21:08,467
you have to re-render stuff

576
00:21:08,467 --> 00:21:10,634
because of overlapping things.

577
00:21:10,634 --> 00:21:12,067
This is a problem in Gmail,

578
00:21:12,067 --> 00:21:13,767
like, with the little
chat windows that come up.

579
00:21:13,767 --> 00:21:15,567
That's why
Gmail scrolling's slow,

580
00:21:15,567 --> 00:21:18,434
because that chat window might--

581
00:21:18,434 --> 00:21:20,000
it's always interfering

582
00:21:20,000 --> 00:21:22,634
with the content below it.

583
00:21:22,634 --> 00:21:24,567
Anyhow.

584
00:21:24,567 --> 00:21:26,267
Resizing.

585
00:21:26,267 --> 00:21:27,901
Resizing is kind of interesting,

586
00:21:27,901 --> 00:21:30,601
because
what's happening there is--

587
00:21:30,601 --> 00:21:33,834
I'll just erase part of this.

588
00:21:33,834 --> 00:21:35,300
With resizing,

589
00:21:35,300 --> 00:21:39,434
what's happening is that
we have the outer hWnd,

590
00:21:39,434 --> 00:21:41,901
user grabs the corner,

591
00:21:41,901 --> 00:21:43,467
Windows tells us,

592
00:21:43,467 --> 00:21:45,234
"Hey, look, your size changed,"

593
00:21:45,234 --> 00:21:47,267
and then right after that
he says, "Now paint."

594
00:21:47,267 --> 00:21:49,267
And this is a case

595
00:21:49,267 --> 00:21:50,501
where the backing store's
not good enough.

596
00:21:50,501 --> 00:21:52,767
Our backing store is small,

597
00:21:52,767 --> 00:21:54,367
and Windows just--

598
00:21:54,367 --> 00:21:56,133
and we we're--
Now I need new pixels,

599
00:21:56,133 --> 00:21:57,133
so what do we do?

600
00:21:57,133 --> 00:21:59,634
This is where we ended up

601
00:21:59,634 --> 00:22:02,868
sending an IPC
down to the renderer

602
00:22:02,868 --> 00:22:04,534
to have him produce
the new pixels

603
00:22:04,534 --> 00:22:05,534
for the whole thing,

604
00:22:05,534 --> 00:22:07,868
and then we do wait.

605
00:22:07,868 --> 00:22:10,400
Then we wait a little bit.

606
00:22:10,400 --> 00:22:12,567
Like, I forget how much.

607
00:22:12,567 --> 00:22:14,033
Maybe up to 40 milliseconds,

608
00:22:14,033 --> 00:22:15,934
or something reasonably small.

609
00:22:15,934 --> 00:22:18,534
We wait for our I/O thread

610
00:22:18,534 --> 00:22:21,000
to receive an IPC
that actually carries with it

611
00:22:21,000 --> 00:22:24,634
the shared memory
for the new rendering,

612
00:22:24,634 --> 00:22:26,601
and so if we get it
in not enough time,

613
00:22:26,601 --> 00:22:28,300
then what we would actually
be able to display is,

614
00:22:28,300 --> 00:22:31,033
unperceptible to the user,

615
00:22:31,033 --> 00:22:32,801
we actually
now got the new pixels,

616
00:22:32,801 --> 00:22:35,801
and they never see
the old representation

617
00:22:35,801 --> 00:22:37,133
at the wrong size.

618
00:22:37,133 --> 00:22:38,567
However, I'm sure
anybody who's used Chrome

619
00:22:38,567 --> 00:22:40,434
knows that often times

620
00:22:40,434 --> 00:22:42,534
you'll get
this little white border here

621
00:22:42,534 --> 00:22:44,801
where we didn't have pixels yet,

622
00:22:44,801 --> 00:22:46,100
and we're just
still catching up.

623
00:22:46,100 --> 00:22:49,701
And mostly that's limited
by how fast WebKit

624
00:22:49,701 --> 00:22:53,534
can relay out the whole page
as a result of a recess.

625
00:22:53,534 --> 00:22:55,667
So, Gmail,
this will always happen.

626
00:22:55,667 --> 00:23:00,434
Google.com,
it'll never happen.

627
00:23:00,434 --> 00:23:05,434
Anyways, Google.com
has a white background.

628
00:23:05,434 --> 00:23:09,033
So turns out that because
we're using these backing stores

629
00:23:09,033 --> 00:23:11,033
to get good performance
of the browser,

630
00:23:11,033 --> 00:23:12,734
we're also
using a lot of memory,

631
00:23:12,734 --> 00:23:15,534
and so if we have
a lot of tabs.

632
00:23:15,534 --> 00:23:17,934
we'll be using a lot of memory

633
00:23:17,934 --> 00:23:19,200
'cause we have
a ton of backing stores,

634
00:23:19,200 --> 00:23:20,200
and that's kinda bad,

635
00:23:20,200 --> 00:23:22,400
so we need a cache, obviously.

636
00:23:22,400 --> 00:23:24,100
We have only
so many backing stores.

637
00:23:24,100 --> 00:23:26,334
So then what about tabs that
you haven't been to in a while,

638
00:23:26,334 --> 00:23:27,367
and you go back to them,

639
00:23:27,367 --> 00:23:28,667
what are you gonna do?

640
00:23:28,667 --> 00:23:30,667
Well, it's kinda similar
to the resize problem.

641
00:23:30,667 --> 00:23:32,234
You don't have a backing store,
but you need it now,

642
00:23:32,234 --> 00:23:33,634
so we used the same trick--

643
00:23:33,634 --> 00:23:36,000
asked the renderer
to produce pixels,

644
00:23:36,000 --> 00:23:37,200
wait just a little bit,

645
00:23:37,200 --> 00:23:39,834
see if he can produce them
in enough time.

646
00:23:39,834 --> 00:23:41,834
If he does,
then it's all seamless,

647
00:23:41,834 --> 00:23:44,701
and we actually
ended up extending this.

648
00:23:44,701 --> 00:23:46,567
We said that
even foreground tabs,

649
00:23:46,567 --> 00:23:47,968
'cause you have
a lot of windows,

650
00:23:47,968 --> 00:23:49,100
even foreground tabs

651
00:23:49,100 --> 00:23:50,901
can potentially lose
their backing store,

652
00:23:50,901 --> 00:23:54,200
and if the user interacts
with that page now,

653
00:23:54,200 --> 00:23:55,367
we have to go get
the backing store

654
00:23:55,367 --> 00:23:56,367
and fill it again,

655
00:23:56,367 --> 00:23:57,868
and the same trick
is used there.

656
00:23:57,868 --> 00:24:02,667
It all kinda works.

657
00:24:02,667 --> 00:24:04,601
I said I would save time
for questions,

658
00:24:04,601 --> 00:24:06,133
so I'm gonna just end there,

659
00:24:06,133 --> 00:24:07,868
and ask if people
have questions.

660
00:24:07,868 --> 00:24:09,701
Is there anything
you want me to talk about,

661
00:24:09,701 --> 00:24:10,934
or should I go on?

662
00:24:13,934 --> 00:24:18,133
Five minutes?
I'll just go on.

663
00:24:18,133 --> 00:24:20,334
Okay, sure.

664
00:24:20,334 --> 00:24:22,501
So I mentioned a little bit

665
00:24:22,501 --> 00:24:26,934
in the beginning about events.

666
00:24:26,934 --> 00:24:29,534
Turns out that we--

667
00:24:29,534 --> 00:24:31,567
Or actually,
I won't talk about that.

668
00:24:31,567 --> 00:24:33,734
I'll talk about sandboxing
a little bit more,

669
00:24:33,734 --> 00:24:35,901
and some of the security steps,

670
00:24:35,901 --> 00:24:37,701
some of the stuff we did
to facilitate security.

671
00:24:37,701 --> 00:24:39,667
So as I mentioned with plug-ins,

672
00:24:39,667 --> 00:24:42,367
hWnds can be multi-process.

673
00:24:42,367 --> 00:24:45,067
You can have a different hWnd
for a child process,

674
00:24:45,067 --> 00:24:48,868
so why not just use hWnds
for the renderer?

675
00:24:48,868 --> 00:24:50,367
Why do all this crazy stuff

676
00:24:50,367 --> 00:24:51,501
I just got done describing?

677
00:24:51,501 --> 00:24:54,934
Well, turns out that we just
lose the ability

678
00:24:54,934 --> 00:24:56,300
to sandbox it as effectively,

679
00:24:56,300 --> 00:24:57,968
because there's
these connections

680
00:24:57,968 --> 00:24:59,534
between child and parent hWnd,

681
00:24:59,534 --> 00:25:01,167
it'd be possible
for the renderer,

682
00:25:01,167 --> 00:25:02,567
a corrupt renderer,

683
00:25:02,567 --> 00:25:04,167
to mess with
the window hierarchy,

684
00:25:04,167 --> 00:25:06,000
and thereby screw up the browser

685
00:25:06,000 --> 00:25:07,000
in interesting ways.

686
00:25:07,000 --> 00:25:08,734
Also, hWnds like this

687
00:25:08,734 --> 00:25:10,968
would reveal information
about the desktop,

688
00:25:10,968 --> 00:25:13,634
and one of the things
that the sandbox achieved

689
00:25:13,634 --> 00:25:16,167
was literally
running the renderer

690
00:25:16,167 --> 00:25:17,701
with a different desktop,

691
00:25:17,701 --> 00:25:19,667
so it's running on its own
virtual desktop,

692
00:25:19,667 --> 00:25:21,234
so it's such
that if there were ever

693
00:25:21,234 --> 00:25:22,968
any kind of hole in the sandbox

694
00:25:22,968 --> 00:25:25,767
that allowed people to play
with user32 libraries,

695
00:25:25,767 --> 00:25:26,901
all they'd be getting

696
00:25:26,901 --> 00:25:30,367
is user resources
for a different desktop.

697
00:25:30,367 --> 00:25:32,567
And so this adds
another level of security,

698
00:25:32,567 --> 00:25:34,567
just to kind of keep user input

699
00:25:34,567 --> 00:25:35,567
and other kinds of things

700
00:25:35,567 --> 00:25:36,901
away from this renderer,

701
00:25:36,901 --> 00:25:41,801
as far away as possible.

702
00:25:41,801 --> 00:25:43,200
Right.

703
00:25:43,200 --> 00:25:45,601
So this really necessitated,

704
00:25:45,601 --> 00:25:49,868
getting all the Windowsisms
out of the renderer,

705
00:25:49,868 --> 00:25:51,901
and moving to this sort of more

706
00:25:51,901 --> 00:25:54,200
in-memory kind of approach.

707
00:25:54,200 --> 00:25:55,300
>> Peter:
Isn't there one other reason

708
00:25:55,300 --> 00:25:57,834
to not use hWnds for renderers,

709
00:25:57,834 --> 00:25:59,934
which is to not interlock
the message views,

710
00:25:59,934 --> 00:26:01,567
and thus possibly
hang our browser

711
00:26:01,567 --> 00:26:03,167
if the renderer hangs up?

712
00:26:03,167 --> 00:26:04,801
>> Fisher:
Yes, what Peter said.

713
00:26:04,801 --> 00:26:07,467
With all the synchronist
IPCs to happen

714
00:26:07,467 --> 00:26:09,667
between hWnds in Windows,

715
00:26:09,667 --> 00:26:12,200
we have a potential problem

716
00:26:12,200 --> 00:26:13,634
that the child window
is blocked,

717
00:26:13,634 --> 00:26:15,200
waiting on its parent
for something,

718
00:26:15,200 --> 00:26:16,734
and I explained earlier

719
00:26:16,734 --> 00:26:17,734
that whenever
we have a situation

720
00:26:17,734 --> 00:26:20,000
where the renderer thread

721
00:26:20,000 --> 00:26:22,868
is blocked, potentially,
on the UI thread of Chrome,

722
00:26:22,868 --> 00:26:24,767
bad things can happen.

723
00:26:24,767 --> 00:26:26,801
So this actually,
for a number of reasons,

724
00:26:26,801 --> 00:26:28,167
turned out to be very necessary

725
00:26:28,167 --> 00:26:30,367
to just get the hWnds
out of the rendering process.

726
00:26:30,367 --> 00:26:31,968
>> Peter: Which means
we can still lock the browser

727
00:26:31,968 --> 00:26:33,434
to rely on hung plug-ins,

728
00:26:33,434 --> 00:26:35,801
assessing a hung
plug-in detector, right?

729
00:26:35,801 --> 00:26:37,968
>> Darin:
Yes, so if anybody's seen--

730
00:26:37,968 --> 00:26:40,601
If you wait long enough
after Flash locks up,

731
00:26:40,601 --> 00:26:42,367
if you wait 30 seconds,
I think,

732
00:26:42,367 --> 00:26:43,567
you'll see
a little dialogue come up

733
00:26:43,567 --> 00:26:45,067
offering to kill Flash,

734
00:26:45,067 --> 00:26:49,534
because we've detected
that it's not responsive,

735
00:26:49,534 --> 00:26:51,601
and that it's
brought down or wedged

736
00:26:51,601 --> 00:26:53,734
the whole widget hierarchy
it's associated with.

737
00:26:53,734 --> 00:26:55,834
We use the same kinda API

738
00:26:55,834 --> 00:26:57,167
that Windows does to figure out

739
00:26:57,167 --> 00:27:00,267
that it should put up
the little "end task" dialogue

740
00:27:00,267 --> 00:27:02,934
for unresponsive treatment

741
00:27:02,934 --> 00:27:05,367
in the title bar
of your application.

742
00:27:05,367 --> 00:27:08,367
Any other questions?

743
00:27:08,367 --> 00:27:12,501
Okay, then I'll just throw out
one more interesting thing.

744
00:27:12,501 --> 00:27:14,567
Turns out because
we're multi-process--

745
00:27:14,567 --> 00:27:16,200
Ojan reminded me of this.

746
00:27:16,200 --> 00:27:18,033
Turns out because
we're multi-process,

747
00:27:18,033 --> 00:27:19,667
we can do things like

748
00:27:19,667 --> 00:27:24,367
potentially just kill,

749
00:27:24,367 --> 00:27:25,934
terminate the child process

750
00:27:25,934 --> 00:27:27,100
when we close a tab.

751
00:27:27,100 --> 00:27:30,667
If the child process
has no unload handlers,

752
00:27:30,667 --> 00:27:32,033
if the web pages in there

753
00:27:32,033 --> 00:27:33,200
have no unload handlers

754
00:27:33,200 --> 00:27:34,801
and no [indistinct]
load handlers,

755
00:27:34,801 --> 00:27:37,601
then the web page anyways
has no idea if it's gone,

756
00:27:37,601 --> 00:27:39,701
so we look to see

757
00:27:39,701 --> 00:27:40,868
did the web page have

758
00:27:40,868 --> 00:27:42,434
any of those kinds
of event handlers,

759
00:27:42,434 --> 00:27:43,434
and if it doesn't,

760
00:27:43,434 --> 00:27:44,934
then when we wanna kill it,

761
00:27:44,934 --> 00:27:47,000
we just alt terminate process,

762
00:27:47,000 --> 00:27:49,567
and turns out to be really nice,

763
00:27:49,567 --> 00:27:53,934
'cause then tabs close quickly.

764
00:27:53,934 --> 00:27:56,801
Okay. End.

765
00:27:56,801 --> 00:27:58,734
[applause]

