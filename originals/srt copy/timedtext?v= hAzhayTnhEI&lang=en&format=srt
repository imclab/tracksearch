1
00:00:02,899 --> 00:00:08,440
>>Nat Duca: All right. It's time to talk about
jank, everybody.

2
00:00:08,440 --> 00:00:14,339
Before I even do introductions, which is what
usually comes first, I want to actually teach

3
00:00:14,339 --> 00:00:19,199
you the word jank.
Jank spotting, right? We all should do it,

4
00:00:19,199 --> 00:00:24,359
and that's the first part of this talk.
So if you go to HTML5 Rocks, hopefully everybody

5
00:00:24,359 --> 00:00:30,710
has done this. It's a great resource. And
you scroll up and down in an article, sometimes

6
00:00:30,710 --> 00:00:36,690
it janks. And especially on bigger screens
or slower computers, it feels yucky.

7
00:00:36,690 --> 00:00:43,690
Now, let's define yucky. Watch the scroll
bar as I scroll. See how it jumps? Watch on

8
00:00:44,760 --> 00:00:48,500
your own computer. Scroll up and down. That's
jank. It's the screen not updating in some

9
00:00:48,500 --> 00:00:53,370
way.
So the purpose of our talk today is to get

10
00:00:53,370 --> 00:00:58,220
you, so that when you walk out the door, you
can make your site or HTML5 Rocks, take your

11
00:00:58,220 --> 00:01:03,270
pick, so that when I do the same thing, no
jank. Right?

12
00:01:03,270 --> 00:01:08,930
This is our goal. I hope we succeed at it.
The reason that we're up here is we work on

13
00:01:08,930 --> 00:01:15,250
jank all the time. I'm Nat Duca, I'm on the
Chrome Developer team. I work on the rendering

14
00:01:15,250 --> 00:01:16,750
engine for Chrome, GPU, 60 frames a second,
blah-blah-blah.

15
00:01:16,750 --> 00:01:19,140
>>Tom Wiltzius: I'm Tom Wiltzius, I'm the
project manager on the Chrome graphics team

16
00:01:19,140 --> 00:01:24,800
thinking about all the same stuff.
>>Nat Duca: So we care a lot about this and

17
00:01:24,800 --> 00:01:31,800
we want you to as well.
So a nice smooth Web app is about feeding

18
00:01:31,850 --> 00:01:37,990
your display. So you've got many displays
surrounding you. These are displays.

19
00:01:37,990 --> 00:01:43,370
There's a lot of variety as it turns out.
For various reasons, for budget reasons, for

20
00:01:43,370 --> 00:01:46,560
power reasons, different screens update at
different rates.

21
00:01:46,560 --> 00:01:50,010
Now, what is this update thing?
You've heard the word vsync thrown around

22
00:01:50,010 --> 00:01:54,670
over the course of I/O a few times. And what
this is is your screen is going to pull into

23
00:01:54,670 --> 00:01:59,450
memory somewhere and just pull out picture
from the GPU or whatever and put it up on

24
00:01:59,450 --> 00:02:05,060
either the LCD or the CRT, and it's going
to do that in a fixed heartbeat. You can't

25
00:02:05,060 --> 00:02:09,649
control it, especially not from software.
It's just going to do that.

26
00:02:09,649 --> 00:02:14,459
Now, this is mostly a good thing. And being
smooth, having a smooth animation, something

27
00:02:14,459 --> 00:02:19,279
that slides across the screen and looks really,
really nice and buttery, is about having your

28
00:02:19,279 --> 00:02:26,279
picture ready when that happens, just before
it happens. And you have to do so being aware

29
00:02:26,889 --> 00:02:31,680
of the fact that different screens are going
to do that at different rates.

30
00:02:31,680 --> 00:02:37,189
So in the yesteryear and even up to last year,
some of the best JavaScript libraries out

31
00:02:37,189 --> 00:02:41,909
there animated would set timeout. jQuery,
for instance, I think had an eight-millisecond

32
00:02:41,909 --> 00:02:44,310
set timeout thing. And we're here today to
say --

33
00:02:44,310 --> 00:02:48,939
>>Tom Wiltzius: Don't do it.
>>Nat Duca: Please don't do it.

34
00:02:48,939 --> 00:02:53,159
Now, it's kind of complicated why you shouldn't
do it, so we built a simulation here for you

35
00:02:53,159 --> 00:02:57,879
to help you understand this.
So what you're seeing here is a couple of

36
00:02:57,879 --> 00:03:01,680
sliders. This determines my refresh rate of
the screen.

37
00:03:01,680 --> 00:03:07,609
So you know, if I'm a low power Chromebook
that's unplugged and decided that it should

38
00:03:07,609 --> 00:03:11,999
go into low power mode, it's at 50-hertz and
the blue line means in time it's going to

39
00:03:11,999 --> 00:03:15,959
update the screen at that point.
Let's bring that back up to 60 for a minute.

40
00:03:15,959 --> 00:03:21,680
So then we've got our set timeout, right,
the old school animation approach, and that's

41
00:03:21,680 --> 00:03:24,540
at 16.
So here's the thing. There is our set timeout.

42
00:03:24,540 --> 00:03:31,540
It fires, then it fires again, exactly 16
milliseconds later. And then again, so on

43
00:03:32,239 --> 00:03:36,389
and so forth.
Now, see the relationship between the timer

44
00:03:36,389 --> 00:03:42,219
firing and the blue line? It's moving. And
in fact, you see this arrow, which is showing

45
00:03:42,219 --> 00:03:48,040
when whatever you did in that set timeout,
the arrow draws a line to where the monitor

46
00:03:48,040 --> 00:03:52,040
-- which refresh of that monitor is going
to pick up your picture. So if each one of

47
00:03:52,040 --> 00:03:57,919
those timeouts moves something to the left
by one pixel, you will get a picture showing

48
00:03:57,919 --> 00:04:03,319
up when the vsync line runs.
Now, here's the problem. 16 into 60-hertz

49
00:04:03,319 --> 00:04:10,319
does not equally go, right? 16 milliseconds
and 16.6 are the two numbers that really -- 16.6

50
00:04:11,109 --> 00:04:16,320
repeating are your two magic numbers, and
that's only for a 60-hertz display. The problem

51
00:04:16,320 --> 00:04:21,519
here -- there are really two. The first problem
is that as you go on in time -- I'm just scrolling

52
00:04:21,519 --> 00:04:26,430
to the right to show you more and more of
these patterns. Sometimes you get a situation

53
00:04:26,430 --> 00:04:33,039
where the same 16-millisecond time lap fires
twice in the same VBlank interval, these two

54
00:04:33,039 --> 00:04:39,699
lines. So this red X'd one never made it on
the screen. So that's going to be an apparent

55
00:04:39,699 --> 00:04:44,080
jank. You won't see that, so all of a sudden
just for one fraction of a second you'll see

56
00:04:44,080 --> 00:04:51,080
-- you'll feel like, oh, something's wrong.
The other problem is that these lines are

57
00:04:52,240 --> 00:04:57,930
varying in angle. Now, what that means is
if you're moving something at a constant stream,

58
00:04:57,930 --> 00:05:04,220
trying to move something smoothly across the
screen, the steeper the line, the more the

59
00:05:04,220 --> 00:05:10,770
velocity, the apparent velocity of your image
will match what you're computing. But the

60
00:05:10,770 --> 00:05:16,340
more slanted the line, the more it will appear
to your eyes to slow down. So in this case

61
00:05:16,340 --> 00:05:22,120
if I just moved something slowly across the
screen, you would at a very, very subtle level

62
00:05:22,120 --> 00:05:27,389
feel like the object was slowing down and
then suddenly would skip and then it would

63
00:05:27,389 --> 00:05:31,479
slow down, but it would be very, very minor.
So this is not buttery smooth.

64
00:05:31,479 --> 00:05:36,509
>>Tom Wiltzius: No. We even call it sometimes
an uncanny value of smoothness. You may be

65
00:05:36,509 --> 00:05:41,759
thinking in a 60-hertz setup does it really
matter so much if I drop one frame in 50,

66
00:05:41,759 --> 00:05:45,479
like if I'm going to drop the 50th frame?
And the answer is yes, it does. You'll notice

67
00:05:45,479 --> 00:05:50,650
these things, but it's more, as Nat is saying,
a feel. So this is the kind of thing that

68
00:05:50,650 --> 00:05:55,509
we can become very attuned to, and if you
start to notice it you're going to see these

69
00:05:55,509 --> 00:05:58,400
tiny little hitches.
>>Nat Duca: And tweaking the number doesn't

70
00:05:58,400 --> 00:06:03,919
make it better. You can turn it to 10, it
just drops more frames. You're gonna get more

71
00:06:03,919 --> 00:06:07,539
jank. If you turn it up to 17 because, hey,
17 is closer to 16.6, you'll get the same

72
00:06:07,539 --> 00:06:11,810
thing, it's just gonna longer for that to
happen.

73
00:06:11,810 --> 00:06:16,419
And if you want to pass 16.6, the browser
will drop that decimal point on the floor

74
00:06:16,419 --> 00:06:21,430
and give you 16 anyway.
So don't use set timeout. We're sort of beating

75
00:06:21,430 --> 00:06:25,659
this point because there's been discussion
in the world about whether this is a good

76
00:06:25,659 --> 00:06:28,360
thing.
So what should you do? Well, stay on time

77
00:06:28,360 --> 00:06:34,360
every time by using requestAnimationFrame.
It's a drop in replacement for set timeout.

78
00:06:34,360 --> 00:06:39,960
The quality of the implementation of requestAnimationFrame
is not 100% on all browsers right now. Some

79
00:06:39,960 --> 00:06:46,080
browsers are trying to get little nitty-gritty
corner cases just perfect, but unlike set

80
00:06:46,080 --> 00:06:52,840
timeout, which is sort of permanently messed
up, we have hope as Chrome or Mozilla or any

81
00:06:52,840 --> 00:06:56,749
of these to make it better. So please do use
it.

82
00:06:56,749 --> 00:07:01,300
And the reason is because then when you're
on a high-speed monitor or a low-powered screen,

83
00:07:01,300 --> 00:07:06,060
your rAF is always on time.
>>Tom Wiltzius: This is supported in all the

84
00:07:06,060 --> 00:07:08,439
major browsers at this point. This is very
much the direction everyone is going.

85
00:07:08,439 --> 00:07:15,439
>>Nat Duca: But this is not the only thing
that you need to do to be jank-free because

86
00:07:16,569 --> 00:07:18,599
otherwise we could all leave and go get drunk
or something.

87
00:07:18,599 --> 00:07:25,159
So anyway, we can't do that, we have to also
keep in budget. So let's talk about budget.

88
00:07:25,159 --> 00:07:30,719
So what I have here is a requestAnimationFrame
script that's just rotating this thing, right?

89
00:07:30,719 --> 00:07:35,870
Pretty straightforward. And what I've also
done is I've graphed, just with the canvas,

90
00:07:35,870 --> 00:07:41,770
the time that I'm getting between these requestAnimationFrames.
And you can see they're nice and regular.

91
00:07:41,770 --> 00:07:46,139
There's a good line here.
Now, this big jank button, right, it's a big

92
00:07:46,139 --> 00:07:51,099
red button, don't press it, but if you press
it, it puts it to sleep, just puts V8 to sleep

93
00:07:51,099 --> 00:07:57,270
for awhile and what happens is there are two
things to watch. You will see the spike on

94
00:07:57,270 --> 00:08:03,729
the graph, right? But also look at the actual
spinner. See how it's sort of jumping? So

95
00:08:03,729 --> 00:08:09,819
this isn't terribly surprising, but this visualization
of seeing this graph spike is incredibly useful

96
00:08:09,819 --> 00:08:14,060
and it's so useful that we've actually built
it right into devtools.

97
00:08:14,060 --> 00:08:19,449
So a new feature announcement, or you've seen
it maybe, this is Chrome devtools frame mode

98
00:08:19,449 --> 00:08:25,219
and it's recording now and what we're seeing
is that same graph of the time between frames

99
00:08:25,219 --> 00:08:30,610
live, plotted up top, so you see a long frame.
So let's try it out. Let's go here. I'm gonna

100
00:08:30,610 --> 00:08:35,040
start a new recording. I'm going to press
the big jank button.

101
00:08:35,040 --> 00:08:41,340
Go back. So now that nice, beautiful, flat
thing that we saw now has these nasty things

102
00:08:41,340 --> 00:08:45,660
in it. And your eye should be drawn to that
because that's jank.

103
00:08:45,660 --> 00:08:49,630
So if I zoom in on this, right, if I click
on one of these, one of the cool things you're

104
00:08:49,630 --> 00:08:56,630
seeing is these are good frames. These individual
columns are nice, smooth 16-millisecond frames.

105
00:08:57,000 --> 00:09:04,000
16, 17, it will be a little bit noisy.
But this one -- that one is right out.

106
00:09:04,040 --> 00:09:07,300
Tom, is a 100-millisecond frame smooth?
>>Tom Wiltzius: Nope.

107
00:09:07,300 --> 00:09:12,940
>>Nat Duca: He's good. He's a good PM.
So this is the jank that we introduced. And

108
00:09:12,940 --> 00:09:19,940
in fact, devtools is awesome. We can go to
here, see that big timer-fired event and see

109
00:09:20,280 --> 00:09:26,100
that that's the big jank button.
Now, it's not just about avoiding the big

110
00:09:26,100 --> 00:09:30,550
timeouts in your code, like you could just
write a memo and say "Don't sleep for 100

111
00:09:30,550 --> 00:09:34,520
milliseconds," okay, now your Web page is
jank-free, but not quite.

112
00:09:34,520 --> 00:09:41,150
So the other part of this puzzle is sticking
within your budget. So I've got two buttons

113
00:09:41,150 --> 00:09:46,020
here, this early button. And as you can see,
there's a little bit of noise, but that's

114
00:09:46,020 --> 00:09:49,410
not me clicking the button. I'm pressing this
button really hard and the frame graph is

115
00:09:49,410 --> 00:09:52,400
pretty stable, right?
And then I'm going to do the same thing, and

116
00:09:52,400 --> 00:09:56,830
I have this eight milliseconds late thing,
and you can see we're getting regular jumps.

117
00:09:56,830 --> 00:10:01,420
Now, let's go back to the recording. I had
a recording going.

118
00:10:01,420 --> 00:10:08,420
So here are the ones when I pressed early.
Okay? See how the line here didn't go up?

119
00:10:09,000 --> 00:10:15,040
What this is saying to me is that I used some
time during my frame to do JavaScript, but

120
00:10:15,040 --> 00:10:19,300
I didn't push out my frame.
Now, let's look at this down in the bottom

121
00:10:19,300 --> 00:10:21,420
bin. So if I scroll down I have to sort of
find it.

122
00:10:21,420 --> 00:10:28,070
The recording is a little long, so bear with
me. There it is.

123
00:10:28,070 --> 00:10:33,750
So here's our eight-millisecond fired call.
And we fit it in between these two frames.

124
00:10:33,750 --> 00:10:37,440
See how it just fit right in?
So because it just fit right in, it didn't

125
00:10:37,440 --> 00:10:43,330
push out the frame. But if I go over here
and look at this one -- so there's one of

126
00:10:43,330 --> 00:10:47,360
those timers that actually fired. And you
can -- even without zooming in too far on

127
00:10:47,360 --> 00:10:53,390
it, you can see that basically we started
too late and so we pushed out the frame, and

128
00:10:53,390 --> 00:10:59,800
this frame ran long. This frame is 21 milliseconds,
right, instead of the 16.

129
00:10:59,800 --> 00:11:03,980
So this would have janked. And in fact, if
you sit there in these slides and really pound

130
00:11:03,980 --> 00:11:07,320
on the eight milliseconds late button, just
hitting it, you will start seeing the spinner

131
00:11:07,320 --> 00:11:14,250
feel a little bit janky.
So the rule here is you've got 16 milliseconds

132
00:11:14,250 --> 00:11:16,370
to do everything, including all this stuff
that Chrome needs to do to put the picture

133
00:11:16,370 --> 00:11:21,390
on the screen.
If you're going to do work, you've got to

134
00:11:21,390 --> 00:11:27,910
stay in that budget and you've got to measure
it in order to verify that you're staying

135
00:11:27,910 --> 00:11:33,330
in the budget.
So that's a nice toy example. It's one type

136
00:11:33,330 --> 00:11:40,330
of example, but what do we do in the Web browser
most of the time? We scroll. Almost all of

137
00:11:41,190 --> 00:11:46,890
my Web browsing time is scrolling.
So you can get janked there, too, and in fact

138
00:11:46,890 --> 00:11:51,810
we showed it once.
Here's a toy example Number 2 of jank scrolling.

139
00:11:51,810 --> 00:11:57,590
So this code moves these divs around in an
onscroll handler.

140
00:11:57,590 --> 00:12:01,930
Is it's a pretty straightforward example.
It's not exactly the prettiest thing in the

141
00:12:01,930 --> 00:12:06,130
world, but we want to show you two things.
First I want to make you very, very comfortable

142
00:12:06,130 --> 00:12:11,110
with when you see this kind of pattern, just
pop into the timeline and take a recording.

143
00:12:11,110 --> 00:12:17,530
So let's do that. Up and down, we're having
some fun here. Hopefully we're having some

144
00:12:17,530 --> 00:12:21,920
fun.
There it is. So here are some frames. So the

145
00:12:21,920 --> 00:12:28,920
first thing that should stand out to you is
look at the size of these things.

146
00:12:30,000 --> 00:12:32,790
Again, back to jank expert. Are these fast?
>>Tom Wiltzius: Only on a five-hertz screen.

147
00:12:32,790 --> 00:12:37,170
>>Nat Duca: These are long frames. This is
not okay. So we need to make this okayer.

148
00:12:37,170 --> 00:12:42,820
Technical term alert, okayer.
So what I'm seeing here between these two

149
00:12:42,820 --> 00:12:48,470
lines, just pick any pair of lines, I'm seeing
some green, which is painting, and I'm seeing

150
00:12:48,470 --> 00:12:52,670
some event.
If I expand this out you see just tons and

151
00:12:52,670 --> 00:12:56,780
tons of stuff happening in this event.
So what I think when I see this is I go, let's

152
00:12:56,780 --> 00:12:59,880
hit this. This is pretty obvious or maybe
it's obvious.

153
00:12:59,880 --> 00:13:06,840
So when we pop into the source code for this,
what the Chrome devtools is pointing us at

154
00:13:06,840 --> 00:13:10,510
is this line.
So what this is doing is it's trying to pull

155
00:13:10,510 --> 00:13:16,510
up -- the test is just trying to pull up the
scrolltop in order to then use it in a formula.

156
00:13:16,510 --> 00:13:23,510
Now, one of the key parts of most Web browsers
is that when you ask for layout information

157
00:13:23,610 --> 00:13:29,450
or style, and scrolltop is part of that, it
has to recalculate the world essentially or

158
00:13:29,450 --> 00:13:34,100
a lot of the world.
And in this case that means figuring out all

159
00:13:34,100 --> 00:13:37,100
the div positions and everything and doing
a big think, and then it will give you back

160
00:13:37,100 --> 00:13:43,690
the scrolltop.
Now, then we take the value that we've computed

161
00:13:43,690 --> 00:13:48,190
and we shove it into this left position of
our item, which goes and tells the browser,

162
00:13:48,190 --> 00:13:52,360
"Hey, the world has changed again. If you
get asked about the world's state again, recompute

163
00:13:52,360 --> 00:13:57,900
again."
So what's happening here is that we compute

164
00:13:57,900 --> 00:14:03,240
style, we dirty style, we go around the loop
again and we do this over and over and over

165
00:14:03,240 --> 00:14:08,780
again. And this is why we're seeing so many
purple entries in the timeline. Of course,

166
00:14:08,780 --> 00:14:12,450
this being the demo I have made that behind
a check box, right?

167
00:14:12,450 --> 00:14:19,060
So in theory this should be faster now, right,
but don't believe it. Trace it or record it.

168
00:14:19,060 --> 00:14:22,720
So I've got a recording going and we're going
to scroll again.

169
00:14:22,720 --> 00:14:26,110
Oh, happy day, it's gone.
But hey, Tom, is that fast yet?

170
00:14:26,110 --> 00:14:29,810
>>Tom Wiltzius: Still not fast enough.
>>Nat Duca: It's not smooth yet. I need a

171
00:14:29,810 --> 00:14:36,810
light that's are we smooth yet? So our paint
is a problem and we've got to hit this too.

172
00:14:38,940 --> 00:14:42,250
So painting, what's painting?
So painting is the part where we take the

173
00:14:42,250 --> 00:14:49,250
styles that you've given us and we do the
drawing. So Line 2, fill, draw image, do a

174
00:14:49,890 --> 00:14:54,670
blur. All of that stuff, and it takes time.
So when you see big paintings, start looking

175
00:14:54,670 --> 00:14:59,740
at things that could be costly. So when I
look at this doc and I look in the elements

176
00:14:59,740 --> 00:15:04,540
inspector -- the only thing up here really
is a bunch of images, so it's a pretty easy

177
00:15:04,540 --> 00:15:07,450
case.
But we look at these images and we've just

178
00:15:07,450 --> 00:15:13,300
got tons of styles on them. We've got, you
know, background image, we've got a box shadow,

179
00:15:13,300 --> 00:15:16,450
you know.
Hmm, let's remove that. So I've got a heavy

180
00:15:16,450 --> 00:15:23,450
painting class this is all in. So if I toggle
that off like that and we hit record again,

181
00:15:25,270 --> 00:15:30,260
this should be better.
And in fact, because of a bug in devtools

182
00:15:30,260 --> 00:15:35,940
it's not completely smooth, but if you look
at the actual costs, remember our paint time

183
00:15:35,940 --> 00:15:41,830
was -- what was it, like 40 something?
So it's gone from 40 something to about four

184
00:15:41,830 --> 00:15:48,160
milliseconds. So definitely those CSS files
that I toggled off are to blame. And in fact,

185
00:15:48,160 --> 00:15:55,160
when devtools is off this is nice and smooth.
So we busted some jank in some synthetic demos,

186
00:15:56,610 --> 00:16:03,120
kind of cool, but in general what we're trying
to teach you is keep your eye open for costly

187
00:16:03,120 --> 00:16:08,500
things, long frames. Anything bigger than
16 is right at you've got to bust it.

188
00:16:08,500 --> 00:16:14,010
Garbage collection can do this to you, just
manipulating lots of DOM, heavy script obviously.

189
00:16:14,010 --> 00:16:18,040
Timers are particularly something you have
to be careful of. Be aware of a timer that

190
00:16:18,040 --> 00:16:23,050
comes in just about at the end of the frame
because it can push out that frame. Same goes

191
00:16:23,050 --> 00:16:28,660
for XHR. Use the devtools features in order
to bust this stuff up and make your website

192
00:16:28,660 --> 00:16:31,380
smoother.
But there's more and Tom is going to tell

193
00:16:31,380 --> 00:16:33,250
you about it.
>>Tom Wiltzius: Thanks, Nat.

194
00:16:33,250 --> 00:16:39,130
So Nat's been talking a lot about sort of
what JavaScript, et cetera, can get in the

195
00:16:39,130 --> 00:16:43,450
way of your animations running smoothly. And
there's sort of an implied limitation to what

196
00:16:43,450 --> 00:16:48,840
the browser can do in everything that Nat's
just said. And that's that why can't some

197
00:16:48,840 --> 00:16:52,280
of this happen at the same time? It doesn't
really seem like there should be anything

198
00:16:52,280 --> 00:16:59,280
related between handling some XHR callback
in JavaScript and the browser painting, like

199
00:16:59,280 --> 00:17:01,540
you might not be actually touching the DOM
at all.

200
00:17:01,540 --> 00:17:06,559
But unfortunately for better or worse, the
way browsers are today it's a pretty good

201
00:17:06,559 --> 00:17:11,790
assumption that everything happening in a
given tab happens on one thread; i.e., that

202
00:17:11,790 --> 00:17:18,579
XHR callback can block painting, right?
Also, that XHR callback could block your requestAnimationFrame

203
00:17:18,579 --> 00:17:22,420
from running.
So if you remember, we've got this requestAnimationFrame

204
00:17:22,420 --> 00:17:28,040
that's ticking at the vsync heartbeat, but
it can't run if some heavy block of JavaScript

205
00:17:28,040 --> 00:17:32,260
is running. This is a pretty severe limitation,
right, because this means that you can't really

206
00:17:32,260 --> 00:17:36,880
be running in animation at the time when you've
got to do more than 16 milliseconds of JavaScript

207
00:17:36,880 --> 00:17:39,440
work at a time.
Either you have to break up your JavaScript

208
00:17:39,440 --> 00:17:44,280
into really little bite-sized increments and
handle them in the rAF callback or you can

209
00:17:44,280 --> 00:17:48,490
use CSS animation.
CSS animation is one of the exceptions to

210
00:17:48,490 --> 00:17:52,490
everything happens in one thread rule. We
brought to Chrome for Android first, so we're

211
00:17:52,490 --> 00:17:56,380
going to do a demo Android in a second, but
pretty soon this is going to be everywhere,

212
00:17:56,380 --> 00:18:01,100
including on desktop Chrome. So let's switch
to the demo here.

213
00:18:01,100 --> 00:18:07,030
I'm going to turn on the projector over on
the left, that's going to open up the source

214
00:18:07,030 --> 00:18:14,030
on my right. So if I look at this simple,
simple demo, this should look familiar, this

215
00:18:17,000 --> 00:18:21,780
is the same thing that we saw earlier, and
what Nat was showing earlier as this logo

216
00:18:21,780 --> 00:18:28,590
spun around was driven by requestAnimationFrame.
This is driven by CSS animation. You can see

217
00:18:28,590 --> 00:18:32,910
that I mention this is only on Chrome for
Android now, so for comparison's sake, if

218
00:18:32,910 --> 00:18:36,810
Nat hits the sleep button, you can see that
little bit of jank happening, right? Like

219
00:18:36,810 --> 00:18:40,360
that little hitch in the animation that's
the kind of thing that you want to be attuned

220
00:18:40,360 --> 00:18:47,360
to. Whereas if I hit that same button on this,
JavaScript still just spins for 180 milliseconds,

221
00:18:48,000 --> 00:18:52,980
but the animation is smooth, right? This is
huge. This is a big deal because it means

222
00:18:52,980 --> 00:18:55,820
that you can run arbitrary JavaScript and
the CSS animations are all going to run.

223
00:18:55,820 --> 00:19:01,100
It's kind of like the easy mode of getting
your animations to run smoothly, because you

224
00:19:01,100 --> 00:19:06,410
just need to define an animation in CSS, which
is fairly natural for most Web authors anyway,

225
00:19:06,410 --> 00:19:13,410
then let Chrome do the rest.
So this applies to both CSS transitions and

226
00:19:14,250 --> 00:19:20,350
CSS key frame animations and like requestAnimationFrame
you get some stuff for free. You get a lot

227
00:19:20,350 --> 00:19:22,470
of benefits. You get better time, smoother
looking animations, which is what we just

228
00:19:22,470 --> 00:19:24,710
showed you.
You also get better battery life, because

229
00:19:24,710 --> 00:19:28,460
we get pause animations that are in background
tabs. You get more graceful degradation because

230
00:19:28,460 --> 00:19:33,500
if there are a lot of things animating on
the screen, we can drop the browser's refresh

231
00:19:33,500 --> 00:19:38,960
rate to 30-hertz instead of 60, for instance
and keep it regular, rather than almost making

232
00:19:38,960 --> 00:19:42,260
it 60 but missing frames every once in a while.
Because for all of the reasons that we were

233
00:19:42,260 --> 00:19:46,620
talking about earlier, missing that frame
every once in a while is what your eye notices.

234
00:19:46,620 --> 00:19:52,050
Right?
So it's much better to be very, very regular,

235
00:19:52,050 --> 00:19:55,910
but a bit slower, than it is to be variable
and almost good enough. And this is the kind

236
00:19:55,910 --> 00:20:00,120
of thing that the browser can handle for you.
CSS animations are particularly good if you

237
00:20:00,120 --> 00:20:05,990
are doing some sort of continuous animation
like this silly Chrome logo spinning, if you've

238
00:20:05,990 --> 00:20:10,540
got some logo like that, and you want to be
doing anything on your page, like all of your

239
00:20:10,540 --> 00:20:15,070
social widgets are firing timers all of the
time, for instance, this is going to get in

240
00:20:15,070 --> 00:20:21,580
the way of something like the requestAnimationFrame,
driven animation, but it will not get in the

241
00:20:21,580 --> 00:20:24,960
way of the CSS animation.
It's also good for UI substitution effects,

242
00:20:24,960 --> 00:20:30,370
so you can imagine whatever GML wants to sort
of nicely animate the opening of their compose

243
00:20:30,370 --> 00:20:34,820
window, they can do that with CSS animations,
and it's much easier to do all of the heavy

244
00:20:34,820 --> 00:20:41,010
lifting in the background of building up document
fragments and doing DOM manipulation and parsing

245
00:20:41,010 --> 00:20:44,790
the email text. All of the stuff that you
have got to do to make your app run that you

246
00:20:44,790 --> 00:20:47,730
don't want to have to think about in the same
way that you are thinking about the animation

247
00:20:47,730 --> 00:20:50,210
running.
>>Nat Duca: Yeah. So we can't underscore this

248
00:20:50,210 --> 00:20:55,490
enough. CSS animation is your get out of jail
free card. When you have something, you can't

249
00:20:55,490 --> 00:21:02,410
keep it to your 16 millisecond budget, you
know, break out of that 16 millisecond jail

250
00:21:02,410 --> 00:21:06,800
temporarily by throwing up a nice animation.
>>Tom Wiltzius: Yeah, that's right. I also

251
00:21:06,800 --> 00:21:10,440
want to -- before we go further, I should
note that we talk a lot about 16 milliseconds

252
00:21:10,440 --> 00:21:16,250
because that's about right. But all of this
stuff about browser and screen refresh rates

253
00:21:16,250 --> 00:21:21,570
still apply and I want to point out that just
because you are within budget on your computer,

254
00:21:21,570 --> 00:21:24,680
doesn't necessarily mean that you're going
to be within budget on most people's computers

255
00:21:24,680 --> 00:21:27,520
which are probably slower than your computers
and doesn't mean that you're going to be within

256
00:21:27,520 --> 00:21:32,710
budget on phone and tablets, and all of this
stuff. All of this is very, very machine dependent.

257
00:21:32,710 --> 00:21:36,440
Right? So you need to be diligent about doing
the kind of measurements that we're talking

258
00:21:36,440 --> 00:21:41,550
about throughout this talk to make sure that
you're actually comfortably within budget

259
00:21:41,550 --> 00:21:46,880
and can even withstand some variation like
machine speed. So -- so now we're going to

260
00:21:46,880 --> 00:21:53,309
go back to the demo we opened with. And we're
going to try to fix this up. We're going to

261
00:21:53,309 --> 00:21:59,330
sort of show you the process that we went
through to speed up this page. On this projector's

262
00:21:59,330 --> 00:22:03,670
resolution, the results aren't quite as dramatic,
but you should still be able to see them,

263
00:22:03,670 --> 00:22:09,320
especially if, as imploring you use devtools
and actually like really note the times. I'm

264
00:22:09,320 --> 00:22:16,320
going to pop up devtools here and I'm going
to look around and I'm going to take a timeline

265
00:22:16,940 --> 00:22:23,940
recording of this page that we say scrolls
jangly. If I zoom in on some of those frames,

266
00:22:24,730 --> 00:22:31,480
what do I see? I see big swaths of green,
right? I see all of this paint time, which

267
00:22:31,480 --> 00:22:37,250
is completely blowing the frame budget. These
frames are like 45 plus milliseconds long

268
00:22:37,250 --> 00:22:41,260
and they are dominated, I mean they are not
dominated, the only thing going on is painting,

269
00:22:41,260 --> 00:22:45,720
right? So before we were talking about JavaScript
getting in the way sort of complicated interaction

270
00:22:45,720 --> 00:22:50,809
between the browser painting and JavaScript
running and style recalculation. None of that

271
00:22:50,809 --> 00:22:56,190
is going on here. This is a static Web page,
not complicated in the slightest. It still

272
00:22:56,190 --> 00:23:02,220
scrolls really slowly. It scrolls slowly on
this like fancy MacBook Pro. You can imagine

273
00:23:02,220 --> 00:23:08,410
how well this scrolls on most people's computers
which are not nearly as fast, right? So what

274
00:23:08,410 --> 00:23:14,330
do we do? How do you diagnose those big, pretty,
opaque big green paint blocks. When you are

275
00:23:14,330 --> 00:23:18,730
diagnosing a long paint time, there are a
few basic questions that you want to start

276
00:23:18,730 --> 00:23:23,700
with. What element was slow or what element
is causing you to be slow and what styles

277
00:23:23,700 --> 00:23:29,450
are causing you to be slow? The way we answer
the first question is that we do this really

278
00:23:29,450 --> 00:23:34,420
dumb thing where we just turn off parts of
the DOM. Right? We just get rid of elements

279
00:23:34,420 --> 00:23:38,160
and say did getting rid of this element improve
my paint times?

280
00:23:38,160 --> 00:23:43,900
Maybe we decide we don't need that or we're
going to do some sort of visual reengineering,

281
00:23:43,900 --> 00:23:49,290
so it's not as big of a problem, et cetera.
So we can start with something like that here.

282
00:23:49,290 --> 00:23:56,050
Again, I'm going to switch to devtools, pop
open the elements view, and I'm going to start

283
00:23:56,050 --> 00:24:00,770
just looking for things to turn off. So I'm
going to start with trying to turn off this

284
00:24:00,770 --> 00:24:05,460
header, because I'm sort of suspicious of
that. It's on the screen all the time. And

285
00:24:05,460 --> 00:24:12,460
I'm just going to flip this to display none.
This feels a little smoother to my finger

286
00:24:12,929 --> 00:24:16,940
on the track pad, but it's hard to tell that
from the audience. So again, be diligent,

287
00:24:16,940 --> 00:24:23,250
take a recording. We switch back to timeline,
we take a recording. Did we get better? Ah,

288
00:24:23,250 --> 00:24:28,450
we got a little bit better. There were some
that were above 45 seconds before, so I maybe

289
00:24:28,450 --> 00:24:33,050
would count this a win, but it's not that
significant, right? Plus there's a down side

290
00:24:33,050 --> 00:24:37,100
here. I just got rid of the header. This is
like pretty integral to my site, right?

291
00:24:37,100 --> 00:24:39,730
[ Laughter ]
>>Nat Duca: You can do it, you can go push

292
00:24:39,730 --> 00:24:45,520
this, right? Sometimes that sort of a thing
will be a real hit. It's not unsurprising

293
00:24:45,520 --> 00:24:50,790
that we'll see websites that just lose 90%
of their speed to one element. But in this

294
00:24:50,790 --> 00:24:55,650
case, it's sort of marginal and it's kind
of cool. Like I like that orange thing.

295
00:24:55,650 --> 00:24:57,640
>>Tom Wiltzius: Right.
>>Nat Duca: So we should keep it, right?

296
00:24:57,640 --> 00:25:04,580
>>Tom Wiltzius: Right. So we're going to try
not to make our UI designers, et cetera, angry

297
00:25:04,580 --> 00:25:08,670
by telling them that their layout is too complicated.
And instead we're going to move on to the

298
00:25:08,670 --> 00:25:12,370
second question, which is, well, we're stuck
painting everything that we're going to paint

299
00:25:12,370 --> 00:25:15,630
and we're not going to worry about why it's
being painted. Instead we're just going to

300
00:25:15,630 --> 00:25:19,950
say what made this take so long? Like given
that we can't change it.

301
00:25:19,950 --> 00:25:25,570
The answer is always going to be CSS styles,
right? CSS styles define what the page looks

302
00:25:25,570 --> 00:25:29,440
like, it defines what an element looks like,
it also defines how an element renders, right?

303
00:25:29,440 --> 00:25:35,370
So when we tell an element to go draw itself,
we being like WebKit, right, the amount of

304
00:25:35,370 --> 00:25:40,130
time that that takes is highly variable depending
on CSS styles. We wish it was the case that

305
00:25:40,130 --> 00:25:43,640
all CSS styles sort of took equal cost to
paint because it would make --

306
00:25:43,640 --> 00:25:46,880
>>Nat Duca: I want a pony as well.
>>Tom Wiltzius: Yeah, yeah. It would make

307
00:25:46,880 --> 00:25:52,490
performance optimization much easier, but
that's just not true. But so as much as Nat

308
00:25:52,490 --> 00:25:58,320
said earlier, sometimes one element can really
slow you down. Similarly sometimes just one

309
00:25:58,320 --> 00:26:02,440
or two styles or like the intersection of
a couple can really, really kill you when

310
00:26:02,440 --> 00:26:06,980
it comes to paint times.
So we're going to start doing the same dumb

311
00:26:06,980 --> 00:26:11,350
trick. Right? We're just going to start turning
stuff off and seeing if we can identify a

312
00:26:11,350 --> 00:26:14,270
couple of things that are really causing us
pain.

313
00:26:14,270 --> 00:26:21,120
So again I'm going to flip open devtools,
go to the elements view and I'm going to start

314
00:26:21,120 --> 00:26:25,710
poking around. The first thing that I'm going
to look at is maybe this background. It's

315
00:26:25,710 --> 00:26:29,840
on a lot of the screen. Like the reason I'm
choosing this is because it looks kind of

316
00:26:29,840 --> 00:26:36,840
complicated, especially if I inspect it here.
Oh, there's all of this like 20 lines of CSS

317
00:26:37,900 --> 00:26:42,160
declaration for this thing. And it's all over
the place. So I'm assuming maybe it's going

318
00:26:42,160 --> 00:26:44,670
to take some time.
>>Nat Duca: Even more amusingly on your projectors

319
00:26:44,670 --> 00:26:51,670
it's showing up as gray. But when you look
at it here, it's got this nice little checker-boardy

320
00:26:52,210 --> 00:26:54,510
thing and it's all gorgeous and textured.
>>Tom Wiltzius: Yeah, I apologize.

321
00:26:54,510 --> 00:26:57,490
>>Nat Duca: And -- we're not going to see
it, but maybe we're paying a lot for that,

322
00:26:57,490 --> 00:27:00,710
all of that CSS.
>>Tom Wiltzius: Right. So we're going to go

323
00:27:00,710 --> 00:27:06,210
back to the timeline view again, we're going
to take a recording, we're going to scroll

324
00:27:06,210 --> 00:27:10,260
down, we're going to see what changed. Huh.
A lot changed, right?

325
00:27:10,260 --> 00:27:17,100
So now I've turned off that background and
my frame times are now like in the high 20s.

326
00:27:17,100 --> 00:27:19,400
>>Nat Duca: Tom, I think we classify that
as a win.

327
00:27:19,400 --> 00:27:23,179
>>Tom Wiltzius: Yeah, right. This is --
>>Nat Duca: Brush metal aside.

328
00:27:23,179 --> 00:27:29,030
>>Tom Wiltzius: Right, but again there's this
tradeoff between the visual effect that you've

329
00:27:29,030 --> 00:27:33,870
achieved with the styles that you've used
and what they are costing you. So -- and so

330
00:27:33,870 --> 00:27:38,770
this process, this is only the beginning.
What -- as we disable things -- and I'm going

331
00:27:38,770 --> 00:27:45,010
to disable something else, too. As we disable
things, like we're making the page look different.

332
00:27:45,010 --> 00:27:51,790
So this is only the beginning. The next step
is adding stuff back in or trying to achieve

333
00:27:51,790 --> 00:27:58,610
the same visual effect via different styles
that won't have the same sort of like pathologically

334
00:27:58,610 --> 00:28:02,620
bad cost.
So in this case, there's one more thing I

335
00:28:02,620 --> 00:28:08,150
want to try. Thanks to Nat's demo earlier,
I'm thinking maybe like box shadows are a

336
00:28:08,150 --> 00:28:12,660
bad idea, so I'm going to turn off box shadows
and maybe the backgrounds of these things,

337
00:28:12,660 --> 00:28:19,660
too, for the same reason that I turned it
off on the body. And looking at this, it feels

338
00:28:21,820 --> 00:28:27,370
a lot smoother to my finger, but once again,
I'm not going to trust it, I'm going to go

339
00:28:27,370 --> 00:28:32,220
to timeline, take a recording. And like, wow,
that just got way better, right?

340
00:28:32,220 --> 00:28:38,630
There's one big one at the beginning. But
almost all of these times like look how low

341
00:28:38,630 --> 00:28:42,570
these are. We started off at like what was
it?

342
00:28:42,570 --> 00:28:44,720
>>Nat Duca: Janktastic.
>>Tom Wiltzius: Like 50 milliseconds a frame.

343
00:28:44,720 --> 00:28:48,330
>>Nat Duca: Some big number.
>>Tom Wiltzius: Like i.e., five frames worth

344
00:28:48,330 --> 00:28:53,910
in one frame and now these paint times they
are like so small I'm having trouble clicking

345
00:28:53,910 --> 00:29:00,910
on them. They are in the like few millisecond
range, like one millisecond range. And again,

346
00:29:01,460 --> 00:29:05,160
you are saying well, that's great but you
changed the way the page looks, right? And

347
00:29:05,160 --> 00:29:08,650
that's totally fair.
>>Nat Duca: And I mean this is PM versus programmer,

348
00:29:08,650 --> 00:29:14,020
so I'm going, I'm good with this, right? But
this creates the right tension, right, between

349
00:29:14,020 --> 00:29:18,940
design and technical that you can then use.
>>Tom Wiltzius: And even at a technical level,

350
00:29:18,940 --> 00:29:23,840
again, like you can then start building your
way back up. Now that you've identified what's

351
00:29:23,840 --> 00:29:27,190
causing your problems -- because again I didn't
change that much here, right? I got rid of

352
00:29:27,190 --> 00:29:32,420
the box shadow and the background, and that's
it. And it's like that completely removed

353
00:29:32,420 --> 00:29:36,440
the problem. So the question is how do I get
that nice background gradient and how do I

354
00:29:36,440 --> 00:29:41,480
get the nice drop shadow effect, but without
all of the paint time cost. So I have this

355
00:29:41,480 --> 00:29:45,910
version, oops, going to leave that open for
later. I have this version that I fixed up

356
00:29:45,910 --> 00:29:52,150
a little bit. And I did it exactly what I
just showed you. I just started hunting around

357
00:29:52,150 --> 00:29:56,990
for stuff. I went straight for the ones that
I found eventually first in this -- in the

358
00:29:56,990 --> 00:30:01,580
interest of time, so you didn't have to sit
through anything too boring. But like you

359
00:30:01,580 --> 00:30:05,570
can imagine how this process goes, right?
And then I built it back up so that it visually

360
00:30:05,570 --> 00:30:09,290
looks almost the same. I did this quickly
so there are a few differences, but you can

361
00:30:09,290 --> 00:30:14,580
imagine getting there, right? I just used
images. I honestly just took screen shots

362
00:30:14,580 --> 00:30:20,200
of the background and just like tiled them
and that was way faster. So now you can see

363
00:30:20,200 --> 00:30:25,280
that like this thing is zippy.
And if I open up devtools, switch to timeline,

364
00:30:25,280 --> 00:30:32,280
take a recording, like we're not at the one
millisecond paint times that we were before,

365
00:30:32,549 --> 00:30:36,240
but what are these costing, three milliseconds.
>>Nat Duca: That's butter.

366
00:30:36,240 --> 00:30:40,500
>>Tom Wiltzius: It's an order of magnitude
faster than it was before and it looks the

367
00:30:40,500 --> 00:30:45,910
same. Right? Like this is significant and
all that I did was change two styles.

368
00:30:45,910 --> 00:30:50,559
So the point is sometimes -- this was like
a live website, right, like this is a live

369
00:30:50,559 --> 00:30:52,480
website that Google made.
[ Laughter ]

370
00:30:52,480 --> 00:30:58,000
>>Tom Wiltzius: So -- so the point is there
are plenty of times when just changing a few

371
00:30:58,000 --> 00:31:03,280
little things is going to have a huge impact.
But the hard part is how do you find those

372
00:31:03,280 --> 00:31:07,860
things and that's what we're trying to impart
today, right? We're trying to explain to you

373
00:31:07,860 --> 00:31:14,860
the process and the tools that you can use
to identify those bad, bad cases.

374
00:31:14,880 --> 00:31:19,790
There is one more trick I pulled in between
the good version and the bad version, which

375
00:31:19,790 --> 00:31:25,059
I'm going to open back up again.
And the way I found this trick, the way I

376
00:31:25,059 --> 00:31:29,580
found this thing that was additionally slowing
me down was through abouttracing. So devtools

377
00:31:29,580 --> 00:31:33,860
is great and we recommend everyone start with
devtools and the new features in timeline

378
00:31:33,860 --> 00:31:39,190
are particularly compelling for this. But
-- but if this is not enough for you, you

379
00:31:39,190 --> 00:31:43,710
can get a lot closer to the middle by using
abouttracing, which is a special tab in Chrome.

380
00:31:43,710 --> 00:31:48,850
It's what we use to debug performance problems
in the Web browser. And it can be really useful

381
00:31:48,850 --> 00:31:52,730
for you if timeline isn't enough for you or
if you are just stuck. And it will show you

382
00:31:52,730 --> 00:31:57,610
a lot of stuff that's happening inside of
the browser. It exposes Chrome's multi-process

383
00:31:57,610 --> 00:32:02,760
model. It is a lot more complicated and not
nearly as user friendly, but there is some

384
00:32:02,760 --> 00:32:07,480
documentation that the two of us wrote up,
we put it up on the Chromium dev site so you

385
00:32:07,480 --> 00:32:12,030
can check that out from there.
The trick that I discovered for this particular

386
00:32:12,030 --> 00:32:18,440
page using abouttracing is something that
doesn't show up inside of devtools right now,

387
00:32:18,440 --> 00:32:24,760
and that's image decode costs -- so as I mentioned
earlier, that green paint block, that we see

388
00:32:24,760 --> 00:32:28,470
in the devtools timeline, today it's totally
opaque, right?

389
00:32:28,470 --> 00:32:31,799
You don't get any granularity until like what
is the Web browser doing?

390
00:32:31,799 --> 00:32:37,830
We're working on that. Those of you who saw
Pavel's talk before with Sam, you guys know

391
00:32:37,830 --> 00:32:42,110
that there is some good stuff coming from
devtools that's going to expose more detailed

392
00:32:42,110 --> 00:32:46,980
information. But in the meantime, like that
wasn't obvious to me from devtools, but I

393
00:32:46,980 --> 00:32:51,460
saw these long JPEG like decodes and resizes
--

394
00:32:51,460 --> 00:32:54,280
>>Nat Duca: What happens is that he'll show
you the trick in a minute or maybe you can

395
00:32:54,280 --> 00:33:01,280
bring up the bit. You would scroll, it felt
really good, but the first time you loaded

396
00:33:02,020 --> 00:33:04,830
it, just the first time, every once in a while
you would see something, like what in the

397
00:33:04,830 --> 00:33:09,080
heck was that, felt a little janky, right?
It was in the uncanny valley territory. This

398
00:33:09,080 --> 00:33:12,590
page started off as really just terrible.
Right?

399
00:33:12,590 --> 00:33:17,160
But there's still this uncanny valley and
it was showing up as long paints, but you

400
00:33:17,160 --> 00:33:21,140
couldn't tell why. So that's where you jump
into -- if you care, you jump into tracing

401
00:33:21,140 --> 00:33:24,059
to figure that last bit out.
>>Tom Wiltzius: Yeah. And so in this case,

402
00:33:24,059 --> 00:33:31,059
again, there were some JPEG decodes that were
showing up, these can take upwards of like

403
00:33:31,110 --> 00:33:37,190
40 to 60 milliseconds even on this fast computer.
This is huge, right, because again that happens

404
00:33:37,190 --> 00:33:40,559
within a frame because the Web browser is
not doing anything else while it's decoding

405
00:33:40,559 --> 00:33:46,130
that image at least in the renderer, right?
Which means you just missed five frames, like

406
00:33:46,130 --> 00:33:50,030
you just stalled, you are done.
And this is bad.

407
00:33:50,030 --> 00:33:56,000
So how do you avoid this? Well, in this case
the reason that these scales were happening

408
00:33:56,000 --> 00:34:02,750
was because the images weren't sized at the
resolution that they were being displayed.

409
00:34:02,750 --> 00:34:07,540
Right? So devtools will tell you this, it
just doesn't show up as a component of the

410
00:34:07,540 --> 00:34:10,770
paint time. So if you moused over this image
in devtools, you will see that it's being

411
00:34:10,770 --> 00:34:16,679
displayed at 300 by 300 pixels, but in fact
it's a 512 by 512 pixel image. Again, like

412
00:34:16,679 --> 00:34:20,589
that JPEG scale probably doesn't seem like
a big deal, but it starts to become a big

413
00:34:20,589 --> 00:34:25,659
deal when you start thinking about things
on the order of milliseconds, right? Because

414
00:34:25,659 --> 00:34:31,739
a 40-millisecond image resizing operation
actually becomes quite painful. So from the

415
00:34:31,739 --> 00:34:35,929
good version to the bad version that I was
showing earlier, in addition to making those

416
00:34:35,929 --> 00:34:40,369
two style changes, I also resized all the
images so that they were displaying natively.

417
00:34:40,369 --> 00:34:44,829
This is a simple trick any of you can pull
because this has no visual impact, right?

418
00:34:44,829 --> 00:34:48,720
This is just a perf point --
>>Nat Duca: But it will cause jank. Most websites,

419
00:34:48,720 --> 00:34:53,509
this is a really common one, so go -- go to
your websites now.

420
00:34:53,509 --> 00:34:54,609
>>Tom Wiltzius: So this is the kind of thing
--

421
00:34:54,609 --> 00:35:00,239
>>Nat Duca: Fix it, okay?
>>Tom Wiltzius: The point here, lest Nat get

422
00:35:00,239 --> 00:35:06,430
too emphatic, the point here is not here are
some magic bullets to go make your websites

423
00:35:06,430 --> 00:35:09,589
faster.
The point is the process, right? This is all

424
00:35:09,589 --> 00:35:14,749
about the tools that you can use and the techniques
that you can follow in order to figure out

425
00:35:14,749 --> 00:35:19,759
what's slowing down your site. Browsers evolve
really fast. And like -- to the people who

426
00:35:19,759 --> 00:35:21,700
are like trying to evolve the browser really
fast --

427
00:35:21,700 --> 00:35:25,619
>>Nat Duca: To blame.
>>Tom Wiltzius: Right. So all of the specifics

428
00:35:25,619 --> 00:35:29,269
of what we're talking about here, the drop
shadows, the background gradients, the image

429
00:35:29,269 --> 00:35:33,339
resizing, like we are actually working actively
working on making all of this faster, so hopefully

430
00:35:33,339 --> 00:35:36,710
in six months they aren't going to be a problem.
>>Nat Duca: But then there will be another

431
00:35:36,710 --> 00:35:41,289
style or another new hotness and that one
will be tickling the corner case in the browser

432
00:35:41,289 --> 00:35:44,729
and it will make the browser sneeze or it
will be fast in IE or fast in Chrome.

433
00:35:44,729 --> 00:35:46,809
>>Tom Wiltzius: Right.
>>Nat Duca: It's this wild world out there.

434
00:35:46,809 --> 00:35:52,160
>>Tom Wiltzius: Browser variation, also huge,
right? Like, as we care more and more about

435
00:35:52,160 --> 00:35:55,769
performance on the Web, like it starts to
become a problem that like different browsers

436
00:35:55,769 --> 00:35:57,979
do things slightly differently, et cetera,
et cetera.

437
00:35:57,979 --> 00:36:04,979
So the point is use the tools. Like start
to train your eye to notice jank. Follow the

438
00:36:05,210 --> 00:36:09,819
architectural best practices that we have
laid out, because these are true across browsers

439
00:36:09,819 --> 00:36:15,479
and will be true across time, too. Use requestAnimationFrame,
use CSS animation, make sure you don't have

440
00:36:15,479 --> 00:36:19,890
like one-second long parsing JavaScript operation
going on.

441
00:36:19,890 --> 00:36:21,349
>>Nat Duca: Rendering.
>>Tom Wiltzius: Right.

442
00:36:21,349 --> 00:36:25,119
I mean, like kick stuff to worker threads,
right, or like break stuff into queues and

443
00:36:25,119 --> 00:36:30,650
yields, right, like anything that you can
do to like not clog the main thread with all

444
00:36:30,650 --> 00:36:35,819
of the other crap your other applications
are doing is good, right? But again, the specifics

445
00:36:35,819 --> 00:36:39,099
are all going to change.
So once you start to notice Jank, you're going

446
00:36:39,099 --> 00:36:42,789
to see it everywhere, and hopefully you've
got a passion for making things faster, you

447
00:36:42,789 --> 00:36:46,890
want to make your site faster, et cetera,
et cetera, so you're going to use the devtools

448
00:36:46,890 --> 00:36:50,460
timeline, you're going to use about tracing,
you're going to do this funny trick we did

449
00:36:50,460 --> 00:36:56,950
where we just bisecting down what's slow by
turning things off and re-enabling them, and

450
00:36:56,950 --> 00:37:03,039
with that, hopefully you'll be better equipped
than you were before to make this stuff fast.

451
00:37:03,039 --> 00:37:08,970
If you're hungry for more, these slides and
other resources are off of Jankfree.com, and

452
00:37:08,970 --> 00:37:12,710
we are actually going to be -- we're going
to take questions in a couple of minutes,

453
00:37:12,710 --> 00:37:16,819
but we're also going to be at office hours
in the Chrome area, just around the corner,

454
00:37:16,819 --> 00:37:22,499
I think, right after this talk. We like doing
this. If you have a site that's janky, and

455
00:37:22,499 --> 00:37:27,130
you want to come by, like, we'll take a crack
at speeding it up. We'd love to do that, like,

456
00:37:27,130 --> 00:37:32,039
for an audience, too, so if anyone wants to
come by and try that, we'll give it a shot,

457
00:37:32,039 --> 00:37:37,500
and with that, I think we're going to say
thanks, and take questions...

458
00:37:37,500 --> 00:37:40,710
[ Applause ]
Anyone got anything?

459
00:37:40,710 --> 00:37:46,329
>>> I have one.
>>Tom Wiltzius: Yeah, please.

460
00:37:46,329 --> 00:37:53,329
>>> The CSS animation transition threading,
will that or does that apply to Web view?

461
00:37:57,569 --> 00:38:04,569
>>Nat Duca: Talking about Android Webview?
So, you know, the Web moves really fast and

462
00:38:05,229 --> 00:38:12,229
there are like a zillion different ports,
and CSS spec in general, the animation spec,

463
00:38:12,630 --> 00:38:17,940
it allows this, so it's good to design for
even if it's not working today, it will start

464
00:38:17,940 --> 00:38:20,539
working everywhere within the next, you know
--

465
00:38:20,539 --> 00:38:22,470
>>Tom Wiltzius: Yeah.
>>> Nat Duca: But this is very much our plan.

466
00:38:22,470 --> 00:38:25,700
The next soon; that's a unit of time. >>Tom
Wiltzius: Yeah, and like there is going to

467
00:38:25,700 --> 00:38:30,299
be other stuff like this, like basically we're
trying to kind of move away from the model

468
00:38:30,299 --> 00:38:35,729
of everything happens on the single thread
in the renderer, right, and this is kind of

469
00:38:35,729 --> 00:38:41,079
the beginning of that, but there will be more
things like this as well, so, yeah -- please,

470
00:38:41,079 --> 00:38:43,539
yeah.
>>> So one of the use cases between mobile

471
00:38:43,539 --> 00:38:48,650
browsers and desktop browsers is that mobile
browsers tend to zoom a lot, right? So what

472
00:38:48,650 --> 00:38:53,900
can you say about that and handling that,
like your image case, it's useless if it's

473
00:38:53,900 --> 00:38:59,109
only 300 x 300 if you're actually zooming
in, you cant actually see that extra detail.

474
00:38:59,109 --> 00:39:04,200
>>Tom Wiltzius: Uh-huh, yeah, so I would say
-- you might also say like for high resolution

475
00:39:04,200 --> 00:39:10,130
screens like I want that image to be able
to be resized at a larger resolution, right?

476
00:39:10,130 --> 00:39:15,059
Like there are a lot of cases where you're
going to make tradeoffs between like quality

477
00:39:15,059 --> 00:39:19,460
essentially and performance, right, like these
things are almost always going to be in tension.

478
00:39:19,460 --> 00:39:23,940
I think in that case, you probably are going
to have to decide where on that --

479
00:39:23,940 --> 00:39:30,220
>>Nat Duca: You're totally right. Mobile browsers
are the forefront of awesomeness in terms

480
00:39:30,220 --> 00:39:33,539
of like stuff behind the scenes.
>>Tom Wiltzius: Like PERF winds because the

481
00:39:33,539 --> 00:39:37,470
part --
>>Nat Duca: So that will bite you in the case

482
00:39:37,470 --> 00:39:44,470
of a pinch zoom, but mobile browsers have
-- especially Chrome Android has some very

483
00:39:44,950 --> 00:39:51,680
severe magic so that you wouldn't even notice
this in the first place during a pinch zoom.

484
00:39:51,680 --> 00:39:56,170
We'll probably blog about the magic at some
point, but essentially, you know, when you

485
00:39:56,170 --> 00:40:03,170
use Chrome Android, you can time it, you can
pinch zoom, and you'll actually see that in

486
00:40:03,569 --> 00:40:04,509
that case you won't get a jank and so then
you won't care. That's the best answer I can

487
00:40:04,509 --> 00:40:05,479
give you.
>>Tom Wiltzius: We can talk more about that

488
00:40:05,479 --> 00:40:10,450
at office hours. The full -- the full sort
of magic explanation is really complicated.

489
00:40:10,450 --> 00:40:14,940
We'll be happy to talk about it more.
>>Nat Duca: Measure.

490
00:40:14,940 --> 00:40:19,210
>>Tom Wiltzius: Yeah.
>>> Great presentation. You hinted at some

491
00:40:19,210 --> 00:40:24,109
more tools that you were going to be adding
to the frame view and the profiler, can you

492
00:40:24,109 --> 00:40:26,369
give us some hints as in updates on what those
are going to be?

493
00:40:26,369 --> 00:40:28,119
>>Nat Duca: Well, how about you tell us what
you want.

494
00:40:28,119 --> 00:40:34,829
>>> I would love to be able to see the element
that takes the longest and just be able to

495
00:40:34,829 --> 00:40:38,140
go right to it.
>>Tom Wiltzius: Right, yeah. That sounds cool.

496
00:40:38,140 --> 00:40:40,809
>>Nat Duca: We should totally do that.
>>Tom Wiltzius: Should tell that to Pavel.

497
00:40:40,809 --> 00:40:45,749
>>Nat Duca: We're on the team and we're pushing--
>>Tom Wiltzius: We bug Pavel who is standing

498
00:40:45,749 --> 00:40:49,249
in the back, and just talk about devtools
all the time for like -- yeah, we totally

499
00:40:49,249 --> 00:40:52,309
want things like this.
>>> Maybe line numbers and like function -- or

500
00:40:52,309 --> 00:40:55,719
functions that take the longest time which
is where you're spending the most time instead

501
00:40:55,719 --> 00:41:00,519
of JavaScript functions would be awesome.
>>Nat Duca: So my hope, and my boss -- my

502
00:41:00,519 --> 00:41:04,640
actual boss is in this room, so I hope to
be able to stand here next year and instead

503
00:41:04,640 --> 00:41:08,039
of having to say, oh, look at this big green
thing, and then spend -- how long did we spend,

504
00:41:08,039 --> 00:41:13,289
like 20 minutes trying to explain what was
slow about the -- I'll push a button and it

505
00:41:13,289 --> 00:41:17,109
will be like that one, that would be great.
Whether we can get there, yeah, TBD, but that

506
00:41:17,109 --> 00:41:20,769
would be a nice thing.
>>Tom Wiltzius: Definitely -- definitely granularity

507
00:41:20,769 --> 00:41:26,630
in like paint cost is something we're looking
at. I think like some of the -- some of the

508
00:41:26,630 --> 00:41:30,719
JavaScript stuff may be better served by improving
the profiler than improving timeline, right,

509
00:41:30,719 --> 00:41:34,769
but, like it's a point well taken.
>>> Great, thanks again.

510
00:41:34,769 --> 00:41:40,579
>>Nat Duca: Feel free to file new.crbug.com,
because we really do read all that stuff,

511
00:41:40,579 --> 00:41:45,640
and so like crazy ideas are awesome, because
we can tell you you're crazy, but then we'll

512
00:41:45,640 --> 00:41:52,640
listen, and make a note, we'll try to do it.
>>> So this trace and recording, they really

513
00:41:53,979 --> 00:41:59,819
slow down the Web page? So if I disable that,
will the Web page work faster?

514
00:41:59,819 --> 00:42:05,479
>>Tom Wiltzius: In some cases, yeah, like
so you even saw like Nat at some point during

515
00:42:05,479 --> 00:42:08,989
his demo, was like, yeah, this still looks
-- even though I've disabled my heavy onscroll

516
00:42:08,989 --> 00:42:15,989
handler and my costly CSS styles, it's still
a little janky, and as soon as you close devtools,

517
00:42:16,249 --> 00:42:21,650
it got a lot smoother, so there is some instrumentation
overhead especially with devtools. That's

518
00:42:21,650 --> 00:42:28,650
going to be fixed. Pavel is going to fix that.
>>Nat Duca: So the high level is -- we won't

519
00:42:28,690 --> 00:42:32,029
-- we're trying not build things that have
those corners. Right?

520
00:42:32,029 --> 00:42:34,900
When you're using -- this is bleeding edge,
this stuff that we showed today, it's the

521
00:42:34,900 --> 00:42:36,329
--
>>Tom Wiltzius: Like this is yesterday's Canary.

522
00:42:36,329 --> 00:42:42,219
>>Nat Duca: This is like the Canary. By the
time this is stable, it will be totally awesome,

523
00:42:42,219 --> 00:42:46,499
and you may hit a corner case, but it's very,
very unlikely. Does that answer your question?

524
00:42:46,499 --> 00:42:51,109
>>Tom Wiltzius: And there should be -- there
should be like -- there is sufficient granularity

525
00:42:51,109 --> 00:42:55,489
in the timeline already that like -- we saw
some problems where like there's -- there's

526
00:42:55,489 --> 00:42:59,130
some instrumentation overhead and you don't
get the frame times you want, but we still

527
00:42:59,130 --> 00:43:04,559
know pretty well how long the paints take,
for instance, and that kind of thing shouldn't

528
00:43:04,559 --> 00:43:11,309
be as dramatically affected by tool overhead.
>>> I still cannot use it for stats.

529
00:43:11,309 --> 00:43:12,229
>>Nat Duca: What's that?
>>> I still cannot use it for stats?

530
00:43:12,229 --> 00:43:15,390
>>Tom Wiltzius: You can't maybe use it for,
in that case, like frame time stats, but you

531
00:43:15,390 --> 00:43:18,869
can use it for like -- if you cut your paint
time in half, you have cut your paint time

532
00:43:18,869 --> 00:43:21,160
in half.
>>> I cannot save my page when they're like

533
00:43:21,160 --> 00:43:23,940
60 frames per second.
>>Nat Duca: Yeah, you can.

534
00:43:23,940 --> 00:43:29,559
>>Tom Wiltzius: You can see that within a
frame you didn't take -- like your page only

535
00:43:29,559 --> 00:43:36,559
consumed whatever, like ten milliseconds worth
of stuff, right, and then if you close devtools

536
00:43:38,049 --> 00:43:40,569
and it's fast and you're good, right.
>>> But if it's recording then --

537
00:43:40,569 --> 00:43:44,829
>>Nat Duca: It's not that -- it's not that
heavy and it's not on that process, especially

538
00:43:44,829 --> 00:43:48,309
like -- yes, on an Android you might get a
slight, slight penalty, but to be totally

539
00:43:48,309 --> 00:43:55,269
honest, by the time we're done, it should
be maybe one or two percent overhead, which

540
00:43:55,269 --> 00:43:59,630
one or two percent overhead on 16 milliseconds
is nonzero, but it's not so much that I think

541
00:43:59,630 --> 00:44:06,630
it will perturb the average Web page enough
that you'll notice, okay?

542
00:44:07,630 --> 00:44:09,029
>>> Yeah, thanks.
>>> Awesome presentation, awesome tool, totally

543
00:44:09,029 --> 00:44:16,029
stoked that we have it. My question is now
we have high DPI devices, not necessarily

544
00:44:18,349 --> 00:44:20,349
Chrome, I mean --
>>Tom Wiltzius: Yeah, sure.

545
00:44:20,349 --> 00:44:23,009
>>> Like the iPhone. And so using background
size, you need to use background size to take

546
00:44:23,009 --> 00:44:28,049
these huge images so that they're high DPI
in your example -- so is there any way to

547
00:44:28,049 --> 00:44:33,380
measure it on -- like I know your tools only
work for Chrome, but how can we force it into

548
00:44:33,380 --> 00:44:37,979
a high DPI without buying the new MacBook
Pro that's higher DPI?

549
00:44:37,979 --> 00:44:42,180
>>Nat Duca: So probably a question for Pavel,
who you could turn around and walk to --

550
00:44:42,180 --> 00:44:46,640
>>Tom Wiltzius: Well, I mean, I can give you
some starter hints. One, there's a way to

551
00:44:46,640 --> 00:44:48,700
turn, if you've got a non-high resolution
MacBook, you can flip it, if you install some

552
00:44:48,700 --> 00:44:53,599
tools, you can flip it into like a fake high
DPI mode, won't be as accurate because you

553
00:44:53,599 --> 00:44:57,849
can't get the whole thing so you can't get
like the cost of full page repaints, for instance,

554
00:44:57,849 --> 00:45:00,749
because it's only a quarter of the screen,
but at least you can see how things will look

555
00:45:00,749 --> 00:45:06,359
and you can get a sense for some of the timing
which is a start. There are ways to avoid

556
00:45:06,359 --> 00:45:11,519
like using JavaScript and stuff, you can only
load like -- I think this was the first part

557
00:45:11,519 --> 00:45:14,999
of your question, like you can only load high
resolution assets if you need them.

558
00:45:14,999 --> 00:45:19,910
You can use media queries for instance, so
that will sort of avoid unnecessarily taking

559
00:45:19,910 --> 00:45:26,910
the hits, and as for profiling what the hit
is like, you can kind of again fake it, but

560
00:45:27,529 --> 00:45:30,440
to really test, yeah, you probably got to
buy a new computer.

561
00:45:30,440 --> 00:45:34,170
>>Nat Duca: I do have one like ignoring the
image discussion. There is one caveat for

562
00:45:34,170 --> 00:45:41,170
all of you, which is high DPI means that your
paint times double, not exactly, but that's

563
00:45:41,239 --> 00:45:48,239
your risk, right? You're painting twice -- well,
four times as much, look at me doing math.

564
00:45:48,640 --> 00:45:49,789
>>> Sometimes it's quadruple.
>>Nat Duca: Yeah, no, this is me doing math

565
00:45:49,789 --> 00:45:55,779
in a really funny way. Four is the number.
I shouldn't work for Google, should I?

566
00:45:55,779 --> 00:45:59,229
>>Tom Wiltzius: High DPI -- the point is high
DPI stuff is going to have significant --

567
00:45:59,229 --> 00:46:04,559
>>Nat Duca: So you gotta keep your base loads.
So if you're like on this MacBook Pro, this

568
00:46:04,559 --> 00:46:08,999
is like a two-year-old MacBook, and it's really
chugging and it's hitting like fifteen millisecond

569
00:46:08,999 --> 00:46:13,289
paints, then you're really, really -- this
is not going to work on a good -- on one of

570
00:46:13,289 --> 00:46:15,450
the new ones because the paint is only going
to go up. It might be a slightly faster Intel

571
00:46:15,450 --> 00:46:15,849
CPU --
>>Tom Wiltzius: About four times faster.

572
00:46:15,849 --> 00:46:22,029
>>Nat Duca: -- but you got to just -- you
gotta keep it small, right, and give yourself

573
00:46:22,029 --> 00:46:24,529
head room for the higher end devices. And
the lower end.

574
00:46:24,529 --> 00:46:27,599
>>Tom Wiltzius: Yeah, and I mentioned this
-- I mentioned this a little like really briefly

575
00:46:27,599 --> 00:46:31,309
as an aside during the presentation, but I
do want to put a plug in, too, for like most

576
00:46:31,309 --> 00:46:35,640
of you are Web developers, most of you have
very fast, very fancy computer, like think

577
00:46:35,640 --> 00:46:41,930
about the computers your users have because
they are not MacBook Pros, right? And like

578
00:46:41,930 --> 00:46:47,549
we collect stats, like anonymous stats about
like the common sort of like system configurations

579
00:46:47,549 --> 00:46:52,539
of Chrome users, and like I'll tell you, like,
the average Chrome user has like a really

580
00:46:52,539 --> 00:46:57,009
crappy three-year-old laptop, right? And like
this is -- this is what the internet population

581
00:46:57,009 --> 00:47:02,789
is, so for some things this doesn't matter,
but for like really sensitive performance

582
00:47:02,789 --> 00:47:09,309
stuff, like I'm trying to make a 16 millisecond
paint -- frame budget, it's huge, right?

583
00:47:09,309 --> 00:47:13,309
So think about that. Like I wouldn't even
recommend maybe testing on not your development

584
00:47:13,309 --> 00:47:19,319
machine for instance, but that's just me.
>>> Literally exactly on that point, and maybe

585
00:47:19,319 --> 00:47:22,599
this for Pavel.
>>Tom Wiltzius: He's not a plant.

586
00:47:22,599 --> 00:47:25,829
>>> Can you guys just add a --
>>Nat Duca: Slow me down --

587
00:47:25,829 --> 00:47:29,799
>>> Yeah, exactly.
>>Tom Wiltzius: We talked about it. It's a

588
00:47:29,799 --> 00:47:33,709
little hard to do super accurately. We've
talked about like making it do something like,

589
00:47:33,709 --> 00:47:39,299
ah, just like paint everything ten times,
right? Because that way even small paint time

590
00:47:39,299 --> 00:47:46,109
problems will be really (inaudible), I think
we probably need more fine grained instrumentation

591
00:47:46,109 --> 00:47:49,029
before that is going to be really useful.
>>Nat Duca: That is geeky cool. We should

592
00:47:49,029 --> 00:47:51,039
figure out how to make something with your
intent to work.

593
00:47:51,039 --> 00:47:53,969
>>Tom Wiltzius: It's a good idea. I think
your intent is spot on.

594
00:47:53,969 --> 00:47:56,729
>>Nat Duca: I think your intent is really
key. You want to be able to, from your computer,

595
00:47:56,729 --> 00:48:02,640
understand the performance of this content
somewhere else, and that's hard right now,

596
00:48:02,640 --> 00:48:06,149
so maybe we should figure out maybe as a community
how to do better there.

597
00:48:06,149 --> 00:48:08,869
>>> Yeah, I mean, you know, Pavel was saying
in the previous session, you know, the devtools,

598
00:48:08,869 --> 00:48:14,140
the realtime and all that kind of stuff, you
know, having to right now have a bunch of

599
00:48:14,140 --> 00:48:18,400
VMs or a bunch of like Chrome books, and these
kind of things, it just doesn't really scale,

600
00:48:18,400 --> 00:48:23,789
versus I have a slider in my devtools, that
I can be like okay, I want to run at 20%,

601
00:48:23,789 --> 00:48:27,799
see how this feels, oh, I can have the -- all
the same timelines, all these kinds of things,

602
00:48:27,799 --> 00:48:32,299
now the ability to improve my performance
on, you know, substandard machines dramatically

603
00:48:32,299 --> 00:48:35,279
improves.
>>Nat Duca: Great point. I totally hear you.

604
00:48:35,279 --> 00:48:36,940
Thank you.
>>Tom Wiltzius: Yeah.

605
00:48:36,940 --> 00:48:42,359
>>> I have two questions. First one was so
an example you had with like drop shadow and

606
00:48:42,359 --> 00:48:45,160
(indiscernible) HTML5, you said you replaced
them with images to improve the performance,

607
00:48:45,160 --> 00:48:49,130
is that right? >>> Yeah, but that is obviously
not ideal from like a Web development.

608
00:48:49,130 --> 00:48:53,119
>>Tom Wiltzius: Like the -- like the -- like
the spec people are going to kill me, right,

609
00:48:53,119 --> 00:48:55,500
like I'm just like -- I'm just saying don't
use any of this, it's not fast enough.

610
00:48:55,500 --> 00:48:58,640
>>> Right, right, so like I mean are there
other techniques we can use now or is there

611
00:48:58,640 --> 00:49:01,959
something browsers could do to optimize that
more? Because like I would assume the browsers

612
00:49:01,959 --> 00:49:05,369
would pre-render shadows and cache them and
not have to re-render them all the time.

613
00:49:05,369 --> 00:49:07,839
>>Tom Wiltzius: Yeah. No, there are things
like that that we're doing, and this is why

614
00:49:07,839 --> 00:49:13,200
we ended like with don't listen to the specifics
because they're going to change, the way -- like

615
00:49:13,200 --> 00:49:17,729
there are even bigger changes than that afoot
in like Chrome's rendering pipeline, to some

616
00:49:17,729 --> 00:49:21,279
extent, and there's going to be caching at
like a much higher level, where we like stuff

617
00:49:21,279 --> 00:49:25,809
on the GPU, so we don't need to repaint that
anymore, and like, yeah, that's all going

618
00:49:25,809 --> 00:49:32,190
to be happening, so like it may end up being
that the one-time cost of like rendering those

619
00:49:32,190 --> 00:49:37,009
shadows, say, actually turns out to be pretty
insignificant for you, and so I guess the

620
00:49:37,009 --> 00:49:41,700
short answer is, yes, the browser is going
to try to take care of this for you. I don't

621
00:49:41,700 --> 00:49:46,940
-- I don't want you to sweat like drop shadow
too much, like this was very much a demo that

622
00:49:46,940 --> 00:49:51,229
was meant to show you, like, how to find something
that is taking a disproportionate amount of

623
00:49:51,229 --> 00:49:56,459
time and then dealing with it right now, right?
But I absolutely agree that the browser should

624
00:49:56,459 --> 00:50:00,890
be solving this problem, and we're trying.
>>> And the other quick question is one of

625
00:50:00,890 --> 00:50:06,660
your slides you mentioned something like performance.webkitnow,
but I don't think you talked about it. I was

626
00:50:06,660 --> 00:50:08,950
just curious what that was.
>>Nat Duca: Yeah, we slipped that in there.

627
00:50:08,950 --> 00:50:14,079
You've got a good eye. You can Google it.
Date.now is how we've always measured time,

628
00:50:14,079 --> 00:50:18,719
and something that we slipped out there, and
it's going to be pretty much everywhere including

629
00:50:18,719 --> 00:50:25,719
IE, is window.performance.now. There's this
whole prefix game, right? But it gives you

630
00:50:25,920 --> 00:50:30,380
time at a submicrosecond resolution, it gives
you the fastest that your computer can give

631
00:50:30,380 --> 00:50:36,430
you, so now you can timestamp individual functions
even and get reasonably good numbers out of

632
00:50:36,430 --> 00:50:40,859
it. Totally use it. We used it, but, you know,
we didn't want to go into too much detail,

633
00:50:40,859 --> 00:50:45,130
but it's a pretty cool addition to the platform.
And it's very useful for things like this,

634
00:50:45,130 --> 00:50:49,519
when you're thinking on like -- like --
>>> A millisecond, six percent error.

635
00:50:49,519 --> 00:50:54,869
>>Tom Wiltzius: Exactly, correct, yeah, it
ends up being very important to have submillisecond

636
00:50:54,869 --> 00:51:01,549
precision and so we're finally bringing that
to the browser which is good. We're actually

637
00:51:01,549 --> 00:51:05,130
going to even change like out of -- for any
of you who already knew about request animation

638
00:51:05,130 --> 00:51:08,890
frame and think like, oh, this is all old
hat, like we're actually changing the request

639
00:51:08,890 --> 00:51:14,410
animation frame specs slightly to use the
new high resolution timer, so like you get

640
00:51:14,410 --> 00:51:19,019
a time stamp with the rAF callback and it
used to be measured in milliseconds, since

641
00:51:19,019 --> 00:51:24,880
EPOC now it's measured in whatever the high
resolution timer is which is like since page

642
00:51:24,880 --> 00:51:30,829
load, so if you were using it already, check
your sites.

643
00:51:30,829 --> 00:51:32,599
>>Nat Duca: Did you get the answer you're
looking for?

644
00:51:32,599 --> 00:51:32,849
>>> Yeah.
>>Nat Duca: Great. Thank you.

645
00:51:32,749 --> 00:51:35,999
>>> Actually part of my question so that you
could get some metrics from the field, with

646
00:51:35,999 --> 00:51:41,469
this kind of stuff. It's nice as a developer,
but if the device diversity is so huge, especially

647
00:51:41,469 --> 00:51:46,249
with the new GL stuff, because I'm trying
to make UIs in GL now, and it's really cool

648
00:51:46,249 --> 00:51:50,160
to beat the 60 fps one, but it's really terrible
if you have to do it in FireFox as well and

649
00:51:50,160 --> 00:51:55,609
all of these other things. And so my question
to you is how do you see the 60 fps domain

650
00:51:55,609 --> 00:51:59,569
with browser diversity, because you guys are
optimizing in ways that you have to adapt

651
00:51:59,569 --> 00:52:02,729
to to get that 60 fps, and everybody else
is doing something.

652
00:52:02,729 --> 00:52:08,640
>>> Well, actually, so in theory, let me game
something out with you, and let's hear your

653
00:52:08,640 --> 00:52:14,170
feedback. Like FireFox is actually like at
this minute, the Mozilla team is adjusting

654
00:52:14,170 --> 00:52:17,390
their rAF implementation to do a lot better.
It used to be that their rAF implementation

655
00:52:17,390 --> 00:52:24,390
didn't actually hit 60, and they're changing
it to actually hit 60 as we speak, so good

656
00:52:26,809 --> 00:52:30,789
content that does what we think the right
thing is for the platform then drives the

657
00:52:30,789 --> 00:52:37,009
browser vendors to optimize -- or to make
things work correctly. All of this stuff is

658
00:52:37,009 --> 00:52:41,420
so new that there's a lot of diversity in
the correctness of the implementations. So

659
00:52:41,420 --> 00:52:48,239
my theory, may be wrong, is that this will
get a lot better in about a year as people

660
00:52:48,239 --> 00:52:53,109
really catch up in their implementation quality
of the spec. I think the spec's about right,

661
00:52:53,109 --> 00:52:58,069
plus or minus some nasty details, but we need
to really polish.

662
00:52:58,069 --> 00:53:01,540
>>> Right.
>>Nat Duca: Is that responsive to your question?

663
00:53:01,540 --> 00:53:04,089
>>> You're optimizing, right, so you're profiling
and optimizing, and that means that you get

664
00:53:04,089 --> 00:53:07,670
case specific for browsers to try to make
things faster. I'm just wondering how you

665
00:53:07,670 --> 00:53:09,859
see that evolve? Is it going to stay within
the spec or --

666
00:53:09,859 --> 00:53:12,819
>>Tom Wiltzius: Yeah, I mean, I think at a
meta level, like you're absolutely right,

667
00:53:12,819 --> 00:53:19,259
that this is -- this is a problem for the
ecosystem, right, like the potential for performance

668
00:53:19,259 --> 00:53:23,630
profile divergence, amongst like the browser
vendors is like potentially very serious,

669
00:53:23,630 --> 00:53:29,900
right, and like we actually have probably
a lot more in common with FireFox than we

670
00:53:29,900 --> 00:53:34,599
do with say like IE, but like you want your
stuff to work on IE too, and like it's implemented

671
00:53:34,599 --> 00:53:35,509
very differently. I don't -- we don't have
--

672
00:53:35,509 --> 00:53:40,529
>>> Are you responding to the 60 fps thing?
>>Tom Wiltzius: I use usually like super key

673
00:53:40,529 --> 00:53:44,619
nonperformance now. There's super key nonperformance
in spec compliance, and like they don't move

674
00:53:44,619 --> 00:53:47,900
as fast as we do, because they don't want
to drive things forward as quickly, but like

675
00:53:47,900 --> 00:53:51,940
they're -- they -- they were very support
of cross animation frame from the -- this

676
00:53:51,940 --> 00:53:54,930
is --
>>Nat Duca: Let me be clear, at least to my

677
00:53:54,930 --> 00:53:58,200
understanding, there are two -- there's a
branch here, so there's the techniques like

678
00:53:58,200 --> 00:54:04,719
request animation frame, and keeping within
a budget. That applies to IE as well, especially

679
00:54:04,719 --> 00:54:11,719
IE that have request animation frame which
is I believe nine plus. Might be ten, but

680
00:54:12,599 --> 00:54:15,839
I'm sorry, you always want to keep that 6,
that is not a fact of a browser, that's a

681
00:54:15,839 --> 00:54:22,839
fact of these stupid display thingies that
we love. The place where there is browser-to-browser

682
00:54:23,200 --> 00:54:28,309
divergence is which CSS effects get you in
trouble or which DOM manipulations? Or to

683
00:54:28,309 --> 00:54:33,819
a certain extent GLL, but that is usually
just because of GPUs.

684
00:54:33,819 --> 00:54:36,390
>>> I missed it. Is that going to go into
IE at some point?

685
00:54:36,390 --> 00:54:37,939
>>Tom Wiltzius: Ask them.
>>Nat Duca: That's way above my pay grade.

686
00:54:37,939 --> 00:54:43,569
>>> I mean, if we're optimizing we have to
sort of look at what we're targeting, right?

687
00:54:43,569 --> 00:54:50,569
>>Tom Wiltzius: Yeah, totally, I -- I mean,
it is my sincere hope that IE adopts Web GL,

688
00:54:50,630 --> 00:54:55,759
they're the only browser who hasn't so far,
and I say this as the like the Chrome graphics

689
00:54:55,759 --> 00:54:56,319
PM. Obviously that's what I want.
>>> Well, same here but --

690
00:54:56,319 --> 00:55:00,539
>>Tom Wiltzius: It is unclear what they're
going to do in like the 3D on the Web space.

691
00:55:00,539 --> 00:55:05,519
I think they will do something pretty soon
is my suspicion, but what it is, they're pretty

692
00:55:05,519 --> 00:55:08,170
quiet. I don't know.
>>> Good stuff, guys.

693
00:55:08,170 --> 00:55:13,839
>>Nat Duca: Yeah, feel free to reach out.
>>Tom Wiltzius: We're happy to talk more about

694
00:55:13,839 --> 00:55:14,940
that kind of thing afterwards. Any other questions?
Otherwise we'll wrap up.

695
00:55:14,940 --> 00:55:18,519
>>Nat Duca: Thank you, and we'll be out in
the -- in the area where Chrome is if you

696
00:55:18,519 --> 00:55:20,780
want to bring us over a slow website.

