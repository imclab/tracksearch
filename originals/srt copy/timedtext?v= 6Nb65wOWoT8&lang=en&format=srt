1
00:00:00,000 --> 00:00:00,130

2
00:00:00,130 --> 00:00:00,930
BILL LUAN: It is a very

3
00:00:00,930 --> 00:00:03,010
interesting developer community.

4
00:00:03,010 --> 00:00:03,840
FEMALE SPEAKER: I'm
glad somebody

5
00:00:03,840 --> 00:00:04,870
has asked this question.

6
00:00:04,870 --> 00:00:05,120
I think--

7
00:00:05,120 --> 00:00:06,413
MALE SPEAKER: This is where
the magic happens.

8
00:00:06,413 --> 00:00:07,875
FEMALE SPEAKER: This is
primarily a question and

9
00:00:07,875 --> 00:00:08,490
answer show.

10
00:00:08,490 --> 00:00:10,565
So if any of you out there would
like to ask questions--

11
00:00:10,565 --> 00:00:14,235
[MUSIC PLAYING]

12
00:00:14,235 --> 00:00:17,500

13
00:00:17,500 --> 00:00:18,220
PETE LEPAGE: All right.

14
00:00:18,220 --> 00:00:20,280
Well, welcome everybody.

15
00:00:20,280 --> 00:00:24,660
This is the first of a series
of Chrome Apps Hangouts.

16
00:00:24,660 --> 00:00:25,660
My name's Pete LePage.

17
00:00:25,660 --> 00:00:27,990
I'm a developer advocate
on the Chrome team.

18
00:00:27,990 --> 00:00:31,590
And I'd like to introduce you to
a couple of folks who we've

19
00:00:31,590 --> 00:00:33,190
got with us today.

20
00:00:33,190 --> 00:00:34,480
We'll start with Paul.

21
00:00:34,480 --> 00:00:35,430
PAUL LEWIS: Hi, I'm Paul.

22
00:00:35,430 --> 00:00:36,680
Paul Lewis.

23
00:00:36,680 --> 00:00:40,920
There are a lot of Pauls on the
Developer Relations team.

24
00:00:40,920 --> 00:00:44,440
So I'm Paul Lewis, I work on
essentially the Chrome team,

25
00:00:44,440 --> 00:00:46,750
and I'm on the Chrome
Apps team as well.

26
00:00:46,750 --> 00:00:47,350
PETE LEPAGE: Awesome.

27
00:00:47,350 --> 00:00:49,235
And Paul, you're in
London, right?

28
00:00:49,235 --> 00:00:50,060
PAUL LEWIS: That is
correct, yeah.

29
00:00:50,060 --> 00:00:50,710
London.

30
00:00:50,710 --> 00:00:51,320
PETE LEPAGE: Awesome.

31
00:00:51,320 --> 00:00:55,365
All right, and I'll pass
it over to Renato.

32
00:00:55,365 --> 00:00:57,150
RENATO MANGINI: Hello, guys.

33
00:00:57,150 --> 00:00:59,850
I'm Renato Mangini, and
I'm based in Brazil.

34
00:00:59,850 --> 00:01:01,560
I am also a developer.

35
00:01:01,560 --> 00:01:04,300
I am engineer for the
Chrome Apps team.

36
00:01:04,300 --> 00:01:05,930
Yeah, that's it.

37
00:01:05,930 --> 00:01:06,840
PETE LEPAGE: Cool.

38
00:01:06,840 --> 00:01:10,090
And so you're in Brazil and--

39
00:01:10,090 --> 00:01:11,010
RENATO MANGINI: Yes.

40
00:01:11,010 --> 00:01:11,490
PETE LEPAGE: All right.

41
00:01:11,490 --> 00:01:13,730
And so I'm here in New York.

42
00:01:13,730 --> 00:01:16,650
So we've got a pretty wide
range of folks from

43
00:01:16,650 --> 00:01:17,640
all over the world.

44
00:01:17,640 --> 00:01:20,990
And we've been working on Chrome
Apps now for the last

45
00:01:20,990 --> 00:01:21,790
couple months.

46
00:01:21,790 --> 00:01:25,770
We announced Chrome Apps back at
Google I/O, and there were

47
00:01:25,770 --> 00:01:29,120
a couple of sessions that
we had at Google I/O.

48
00:01:29,120 --> 00:01:31,520
If you haven't had a chance to
check those out, you should

49
00:01:31,520 --> 00:01:32,160
check those out.

50
00:01:32,160 --> 00:01:35,990
We'll put the links to the
videos in the comments after

51
00:01:35,990 --> 00:01:39,450
the fact, but there were two
sessions that were presented

52
00:01:39,450 --> 00:01:41,820
at Google I/O. The first
one was just a general

53
00:01:41,820 --> 00:01:43,870
introduction to the
next generation of

54
00:01:43,870 --> 00:01:45,660
Chrome packaged apps.

55
00:01:45,660 --> 00:01:50,820
And then the other one was how
to convert or how to upgrade a

56
00:01:50,820 --> 00:01:53,090
web app to a Chrome
packaged app.

57
00:01:53,090 --> 00:01:55,790

58
00:01:55,790 --> 00:01:58,850
As we started thinking about
building these Chrome packaged

59
00:01:58,850 --> 00:02:02,130
apps and how they evolved, there
were a couple of things

60
00:02:02,130 --> 00:02:04,630
that we thought about
and realized.

61
00:02:04,630 --> 00:02:08,850
One is that the web ecosystem
is really thriving.

62
00:02:08,850 --> 00:02:11,920
Chrome has more than
310 million active

63
00:02:11,920 --> 00:02:14,210
users around the world.

64
00:02:14,210 --> 00:02:17,780
We've seen many, many
applications downloaded from

65
00:02:17,780 --> 00:02:19,150
the Chrome Web Store.

66
00:02:19,150 --> 00:02:24,150
And users are just asking for
web apps all over the place.

67
00:02:24,150 --> 00:02:28,990
And we wanted to take web
apps to the next step.

68
00:02:28,990 --> 00:02:34,020
And so we tried to focus
on four key components.

69
00:02:34,020 --> 00:02:38,080
The first is really about
breaking out of the browser so

70
00:02:38,080 --> 00:02:41,840
that web apps feel like they're
installed, and they're

71
00:02:41,840 --> 00:02:44,790
native on your computer.

72
00:02:44,790 --> 00:02:48,510
They interact in the same way so
that when you click on your

73
00:02:48,510 --> 00:02:52,570
doc or on the Start menu, the
applications are just there.

74
00:02:52,570 --> 00:02:54,470
And they don't have
an address bar.

75
00:02:54,470 --> 00:02:56,350
They don't have a Back
or Forward button, or

76
00:02:56,350 --> 00:02:57,600
anything like that.

77
00:02:57,600 --> 00:03:00,120

78
00:03:00,120 --> 00:03:03,930
The second piece was around
enhancing the UI providing a

79
00:03:03,930 --> 00:03:07,810
much better UI that is
completely configurable by

80
00:03:07,810 --> 00:03:11,270
you, the web developer.

81
00:03:11,270 --> 00:03:13,580
When we say we take away the
address bar, the Back and

82
00:03:13,580 --> 00:03:16,930
Forwards button, that's great.

83
00:03:16,930 --> 00:03:20,220
But the thing that it allows
you to really do is go and

84
00:03:20,220 --> 00:03:27,410
specifically design how the bar
looks across the top so

85
00:03:27,410 --> 00:03:31,610
that it looks how you
want it to look.

86
00:03:31,610 --> 00:03:35,720
The third piece we focused on
was making these apps work

87
00:03:35,720 --> 00:03:38,130
offline by default.

88
00:03:38,130 --> 00:03:43,190
And offline by default is kind
of a loaded comment.

89
00:03:43,190 --> 00:03:45,190
It's got a lot of different
meanings.

90
00:03:45,190 --> 00:03:47,070
But there's a couple
of pieces that are

91
00:03:47,070 --> 00:03:49,250
really important there.

92
00:03:49,250 --> 00:03:50,620
These apps should work--

93
00:03:50,620 --> 00:03:53,190
once they're installed,
you hit Run,

94
00:03:53,190 --> 00:03:54,440
they should just work.

95
00:03:54,440 --> 00:03:56,750
Whether you've got a fast
internet connection, whether

96
00:03:56,750 --> 00:03:58,970
you've got a slow internet
connection, whether you've got

97
00:03:58,970 --> 00:04:03,140
an intermittent internet
connection, these

98
00:04:03,140 --> 00:04:04,060
apps should just work.

99
00:04:04,060 --> 00:04:07,960
And the reason that they just
work is because we've taken

100
00:04:07,960 --> 00:04:11,420
all of the resources, the HTML,
the JavaScript, the

101
00:04:11,420 --> 00:04:16,079
images, all of the assets for
the application sit locally on

102
00:04:16,079 --> 00:04:17,600
your computer.

103
00:04:17,600 --> 00:04:21,700
And then any of the other
resources, the data that may

104
00:04:21,700 --> 00:04:23,950
go back and forth, is the
only thing that's

105
00:04:23,950 --> 00:04:25,420
transferred back and forth.

106
00:04:25,420 --> 00:04:29,330
So everything in order for the
app to run sits locally, but

107
00:04:29,330 --> 00:04:32,270
the data goes back and forth.

108
00:04:32,270 --> 00:04:36,480
And then, finally, the last
piece is we wanted to give web

109
00:04:36,480 --> 00:04:40,370
developers access to things that
they've never had before.

110
00:04:40,370 --> 00:04:42,900
In general, we kind of split
them off into two different

111
00:04:42,900 --> 00:04:44,010
categories--

112
00:04:44,010 --> 00:04:49,160
system-level access and
service-level APIs.

113
00:04:49,160 --> 00:04:52,640
With the system-level access
stuff, you have access to

114
00:04:52,640 --> 00:04:56,480
things like the networking stack
so that you can actually

115
00:04:56,480 --> 00:04:59,610
go and do raw TCP or UDP
requests, right?

116
00:04:59,610 --> 00:05:02,770
You could never really do that
with a web app before.

117
00:05:02,770 --> 00:05:04,900
If you wanted to do something
like that, the most you could

118
00:05:04,900 --> 00:05:07,240
do is do an XML HTTP request.

119
00:05:07,240 --> 00:05:10,390
Maybe you could do a web socket
or something like that,

120
00:05:10,390 --> 00:05:11,980
but you couldn't actually
go and do a

121
00:05:11,980 --> 00:05:19,380
raw TCP or UDP request.

122
00:05:19,380 --> 00:05:22,970
We also wanted to give
developers access to the USB

123
00:05:22,970 --> 00:05:26,730
in serial and Bluetooth so that
you can actually go and

124
00:05:26,730 --> 00:05:30,850
write apps that are more
powerful than ever before.

125
00:05:30,850 --> 00:05:33,740
You can plug an infrared
blaster in.

126
00:05:33,740 --> 00:05:37,960
Or you can go plug-in, oh,
say, some LEGO Mindstorm.

127
00:05:37,960 --> 00:05:39,890
We'll show that in
a little bit.

128
00:05:39,890 --> 00:05:43,680
But really being able to plug
applications and make them

129
00:05:43,680 --> 00:05:45,920
more powerful, let them
take advantage

130
00:05:45,920 --> 00:05:49,060
of the entire system.

131
00:05:49,060 --> 00:05:52,180
So by allowing developers to
really build these things, we

132
00:05:52,180 --> 00:05:57,000
get a much bigger and more
powerful set of APIs, and we

133
00:05:57,000 --> 00:06:00,450
allow developers to create much
more interesting and much

134
00:06:00,450 --> 00:06:03,710
more exciting applications.

135
00:06:03,710 --> 00:06:10,245
So with that, I'm going to put
a little video on, and we'll

136
00:06:10,245 --> 00:06:11,800
have Paul talk about
that video.

137
00:06:11,800 --> 00:06:15,010
So let me get this video
lined up here.

138
00:06:15,010 --> 00:06:18,550
All right, so, Paul, I'll start
this video, and you can

139
00:06:18,550 --> 00:06:19,120
talk about it.

140
00:06:19,120 --> 00:06:21,260
PAUL LEWIS: All right, super.

141
00:06:21,260 --> 00:06:22,640
PETE LEPAGE: So they can
see the video now.

142
00:06:22,640 --> 00:06:23,240
PAUL LEWIS: OK, great.

143
00:06:23,240 --> 00:06:28,990
So what you're seeing is a LEGO
Mindstorm's NXT, which is

144
00:06:28,990 --> 00:06:30,060
just off the shelf.

145
00:06:30,060 --> 00:06:33,910
We didn't make any firmware
changes or anything like that.

146
00:06:33,910 --> 00:06:36,040
And what we did is
in two days--

147
00:06:36,040 --> 00:06:38,740
so you can build these
apps pretty quickly.

148
00:06:38,740 --> 00:06:41,240
We set up Serial over Bluetooth

149
00:06:41,240 --> 00:06:43,100
to talk to the robot.

150
00:06:43,100 --> 00:06:44,780
We're using, as you're probably
seeing in the video,

151
00:06:44,780 --> 00:06:48,375
the Gamepad API with Renato, I
think, controlling the little

152
00:06:48,375 --> 00:06:50,200
robot there with the Gamepad.

153
00:06:50,200 --> 00:06:51,490
You can also see on the
left-hand side the

154
00:06:51,490 --> 00:06:53,860
visualization of what
the robot's doing.

155
00:06:53,860 --> 00:06:58,280
We used D3, which is a great
visualization engine, and a

156
00:06:58,280 --> 00:06:59,340
bit of CSS 3D as well.

157
00:06:59,340 --> 00:07:02,095
So you can build these apps with
all the technologies that

158
00:07:02,095 --> 00:07:02,850
you're used to.

159
00:07:02,850 --> 00:07:05,800
And you can see, as I say,
that we used Serial over

160
00:07:05,800 --> 00:07:07,940
Bluetooth to actually talk
to a specific device, get

161
00:07:07,940 --> 00:07:12,770
feedback from the device, or
using JavaScript, HTML, CSS,

162
00:07:12,770 --> 00:07:17,312
all those technologies that we
use on a day-to-day basis.

163
00:07:17,312 --> 00:07:20,720
PETE LEPAGE: Yeah, this was
something that you guys built

164
00:07:20,720 --> 00:07:24,170
just over a couple of days, just
before I/O, as a proof of

165
00:07:24,170 --> 00:07:25,970
concept, right?

166
00:07:25,970 --> 00:07:27,700
RENATO MANGINI: Yes, exactly.

167
00:07:27,700 --> 00:07:32,600
We built it like on Friday and a
Saturday the week before I/O

168
00:07:32,600 --> 00:07:35,050
because we wanted to show--

169
00:07:35,050 --> 00:07:39,760
to present cool stuff on our
Chrome Office Hours on the

170
00:07:39,760 --> 00:07:41,100
Google I/O floor.

171
00:07:41,100 --> 00:07:41,680
So yeah--

172
00:07:41,680 --> 00:07:43,850
PETE LEPAGE: And it was
pretty popular.

173
00:07:43,850 --> 00:07:46,940
RENATO MANGINI: Yeah, exactly.

174
00:07:46,940 --> 00:07:53,150
Like some people say, if you
put some robots, you always

175
00:07:53,150 --> 00:07:56,080
get a lot of views.

176
00:07:56,080 --> 00:08:01,440
And if you join robots and
bacon, you explode.

177
00:08:01,440 --> 00:08:05,080

178
00:08:05,080 --> 00:08:08,400
I was trying to do some demo
with bacon included, but I

179
00:08:08,400 --> 00:08:09,810
couldn't figure out--

180
00:08:09,810 --> 00:08:12,760
I had not much time to
figure out that.

181
00:08:12,760 --> 00:08:16,850
PETE LEPAGE: We could maybe get
a USB frying pan to cook

182
00:08:16,850 --> 00:08:18,700
the bacon and then--

183
00:08:18,700 --> 00:08:22,010
RENATO MANGINI: Yeah, I thought
about that, but that

184
00:08:22,010 --> 00:08:26,264
wouldn't be very safe to
present on Google I/O.

185
00:08:26,264 --> 00:08:27,072
PETE LEPAGE: Yeah, it might--

186
00:08:27,072 --> 00:08:28,470
RENATO MANGINI: There were
a bunch of people

187
00:08:28,470 --> 00:08:29,720
trying to get the bacon.

188
00:08:29,720 --> 00:08:32,760

189
00:08:32,760 --> 00:08:36,400
PAUL LEWIS: Have the robot bring
you a bacon sandwich.

190
00:08:36,400 --> 00:08:39,870
What I should say is that the
code for the robot is

191
00:08:39,870 --> 00:08:41,280
available on GitHub.

192
00:08:41,280 --> 00:08:42,350
We'll have the link up
afterwards, but it's

193
00:08:42,350 --> 00:08:45,530
github.com/googlechrome.

194
00:08:45,530 --> 00:08:49,160
And the repo is called
numberhtml5-app.

195
00:08:49,160 --> 00:08:52,460
So we'll link to that
after this.

196
00:08:52,460 --> 00:08:56,140
PETE LEPAGE: So we'll add the
link to that in the comments

197
00:08:56,140 --> 00:08:57,890
as you watch the video
after the fact.

198
00:08:57,890 --> 00:08:59,726
So cool.

199
00:08:59,726 --> 00:09:01,184
PAUL LEWIS: All right.

200
00:09:01,184 --> 00:09:02,160
Great.

201
00:09:02,160 --> 00:09:03,490
PETE LEPAGE: Renato, do you want
to give us a bit of an

202
00:09:03,490 --> 00:09:06,740
architectural overview of Chrome
packaged apps, how they

203
00:09:06,740 --> 00:09:08,760
work, what's going
on with them?

204
00:09:08,760 --> 00:09:10,730
RENATO MANGINI: Yeah, sure.

205
00:09:10,730 --> 00:09:14,270
As the audience probably knows,
this is the beginning

206
00:09:14,270 --> 00:09:18,840
of a long series of Office Hours
about Chrome apps, and

207
00:09:18,840 --> 00:09:20,950
we will be covering
several APIs.

208
00:09:20,950 --> 00:09:23,520
You will talk about
that later.

209
00:09:23,520 --> 00:09:29,180
So this is a very high-level
overview of

210
00:09:29,180 --> 00:09:31,990
what is a Chrome app.

211
00:09:31,990 --> 00:09:35,215
Let me screenshare
my screen here.

212
00:09:35,215 --> 00:09:41,050

213
00:09:41,050 --> 00:09:41,960
Can you see it?

214
00:09:41,960 --> 00:09:42,460
PETE LEPAGE: Yep.

215
00:09:42,460 --> 00:09:44,840
All right, we've got that up.

216
00:09:44,840 --> 00:09:45,340
RENATO MANGINI: OK.

217
00:09:45,340 --> 00:09:52,570
So the idea of a Chrome app is
not to be a website, is not to

218
00:09:52,570 --> 00:09:56,350
be a standard web app.

219
00:09:56,350 --> 00:10:02,140
As Pete mentioned, the idea is
to be as powerful as native

220
00:10:02,140 --> 00:10:06,180
but easier to maintain, easier
to code if you are a web

221
00:10:06,180 --> 00:10:12,420
developer, and more secure than
native could ever be.

222
00:10:12,420 --> 00:10:15,710

223
00:10:15,710 --> 00:10:21,080
Well, the application
stays in the cloud.

224
00:10:21,080 --> 00:10:25,800
The user always installed your
application from the cloud,

225
00:10:25,800 --> 00:10:30,170
but after the user installed
your application locally, the

226
00:10:30,170 --> 00:10:32,730
user can execute that
any time he wants.

227
00:10:32,730 --> 00:10:35,960

228
00:10:35,960 --> 00:10:39,770
So I think from the four points
that Pete mentioned on

229
00:10:39,770 --> 00:10:43,450
his talk, the most important
from the developer point of

230
00:10:43,450 --> 00:10:47,430
view, the most important thing
you have to have in your mind

231
00:10:47,430 --> 00:10:48,620
[INAUDIBLE]

232
00:10:48,620 --> 00:10:51,560
Chrome app is that
it's offline.

233
00:10:51,560 --> 00:10:56,050
Because that changes
your mindset.

234
00:10:56,050 --> 00:10:58,270
That must change your mindset
as the developer.

235
00:10:58,270 --> 00:11:03,450

236
00:11:03,450 --> 00:11:07,260
The programming model
of a Chrome app is--

237
00:11:07,260 --> 00:11:09,690
the main point is the
background page.

238
00:11:09,690 --> 00:11:14,310
The background page is, although
it's called page,

239
00:11:14,310 --> 00:11:17,775
it's in fact a script
and it's invisible.

240
00:11:17,775 --> 00:11:18,840
So there's--

241
00:11:18,840 --> 00:11:20,750
PETE LEPAGE: Let's just stop
for a sec there because I

242
00:11:20,750 --> 00:11:22,250
think that's a really
important point.

243
00:11:22,250 --> 00:11:25,180
It's not quite a background page
as you think about it in

244
00:11:25,180 --> 00:11:28,940
the traditional background page
for one of the legacy

245
00:11:28,940 --> 00:11:31,340
Chrome packaged apps, but
it's actually just

246
00:11:31,340 --> 00:11:33,370
a script that runs.

247
00:11:33,370 --> 00:11:35,800
So you don't actually have
to write any HTML.

248
00:11:35,800 --> 00:11:38,460
It's just some JavaScript,
right?

249
00:11:38,460 --> 00:11:39,760
RENATO MANGINI: Yes, exactly.

250
00:11:39,760 --> 00:11:40,900
Exactly.

251
00:11:40,900 --> 00:11:45,680
The idea of this script
is to create and

252
00:11:45,680 --> 00:11:46,590
control other windows.

253
00:11:46,590 --> 00:11:52,050
It's like a central piece of
the whole application.

254
00:11:52,050 --> 00:11:56,600
If your windows have to
communicate one to each other,

255
00:11:56,600 --> 00:12:00,510
ideally they should use the
background page as the central

256
00:12:00,510 --> 00:12:02,680
point of communication.

257
00:12:02,680 --> 00:12:07,230
Also, to create other windows,
ideally you should use a

258
00:12:07,230 --> 00:12:09,085
background page to create
those windows.

259
00:12:09,085 --> 00:12:12,050

260
00:12:12,050 --> 00:12:14,375
The background page
also listens to

261
00:12:14,375 --> 00:12:16,960
user and system events.

262
00:12:16,960 --> 00:12:21,110
Of course, any page can listen
to user events, but the

263
00:12:21,110 --> 00:12:22,620
background page--

264
00:12:22,620 --> 00:12:26,620
as the central piece, it can
also listen to other events

265
00:12:26,620 --> 00:12:28,280
that a page cannot listen.

266
00:12:28,280 --> 00:12:31,010

267
00:12:31,010 --> 00:12:35,210
We will discuss these specific
events when we

268
00:12:35,210 --> 00:12:37,540
talk about each API.

269
00:12:37,540 --> 00:12:41,970
So this is just a high-level
overview.

270
00:12:41,970 --> 00:12:45,330
And this is very important.

271
00:12:45,330 --> 00:12:50,950
The background page, it
runs every time your

272
00:12:50,950 --> 00:12:52,760
application is running.

273
00:12:52,760 --> 00:12:57,810
And eventually the user can
quit your application.

274
00:12:57,810 --> 00:13:00,290
But the system can also--

275
00:13:00,290 --> 00:13:04,210
if there is no other windows
being shown, the system can

276
00:13:04,210 --> 00:13:08,130
suspend your background page.

277
00:13:08,130 --> 00:13:09,710
You can listen to this event.

278
00:13:09,710 --> 00:13:13,280
I will talk about that step
now on the app lifecycle.

279
00:13:13,280 --> 00:13:16,870

280
00:13:16,870 --> 00:13:21,140
This is a very simple
lifecycle diagram.

281
00:13:21,140 --> 00:13:24,240
You can see this on our
documentation pages.

282
00:13:24,240 --> 00:13:28,410
And this is after the
application is installed.

283
00:13:28,410 --> 00:13:32,580
So the user has the application
installed.

284
00:13:32,580 --> 00:13:35,440
And it clicks on Run.

285
00:13:35,440 --> 00:13:38,250
It clicks on the application,
and

286
00:13:38,250 --> 00:13:39,845
event onLaunch is executed.

287
00:13:39,845 --> 00:13:43,680

288
00:13:43,680 --> 00:13:45,910
What is called event
page on this

289
00:13:45,910 --> 00:13:48,350
diagram is actually called--

290
00:13:48,350 --> 00:13:51,300
it's a background page I
mentioned before, OK?

291
00:13:51,300 --> 00:13:56,430
So the event page can or
cannot open windows.

292
00:13:56,430 --> 00:14:00,730
If it does, it goes through
the windows open state.

293
00:14:00,730 --> 00:14:03,990
If it does not, of course, it
goes through no windows open.

294
00:14:03,990 --> 00:14:06,700
But the most important thing
here is that onSuspend's only

295
00:14:06,700 --> 00:14:10,390
called when there's no other
windows open or there's no

296
00:14:10,390 --> 00:14:13,290
windows open.

297
00:14:13,290 --> 00:14:17,640
Of course, you can get this both
onLaunch and onSuspend

298
00:14:17,640 --> 00:14:20,080
events and do whatever
you want.

299
00:14:20,080 --> 00:14:23,330
In the case of onSuspend, you
cannot do much things.

300
00:14:23,330 --> 00:14:24,640
It must be fast.

301
00:14:24,640 --> 00:14:30,430
You cannot do any asynchronous
call or anything

302
00:14:30,430 --> 00:14:32,150
that takes too long.

303
00:14:32,150 --> 00:14:36,530
It should be fast so you don't
impact on the user and on the

304
00:14:36,530 --> 00:14:37,920
usability of your app.

305
00:14:37,920 --> 00:14:41,150

306
00:14:41,150 --> 00:14:48,440
OK, so this is the lifecycle
of an app.

307
00:14:48,440 --> 00:14:55,300
But what is really an app,
the contents of an app?

308
00:14:55,300 --> 00:15:00,720
Paul will show you a Hello,
World app right after.

309
00:15:00,720 --> 00:15:05,050
But just to give you
a rough idea--

310
00:15:05,050 --> 00:15:09,410
that is composed
by a manifest.

311
00:15:09,410 --> 00:15:13,820
If you are an extension
developer or a Chrome app

312
00:15:13,820 --> 00:15:15,970
developer, you know
what it is.

313
00:15:15,970 --> 00:15:20,680
There are a few changes from
the event manifest.

314
00:15:20,680 --> 00:15:23,760
But basically, if you are
not already an extension

315
00:15:23,760 --> 00:15:28,660
developer, a manifest contains
meta information, permissions

316
00:15:28,660 --> 00:15:35,150
that your app requests to run,
and the information on what is

317
00:15:35,150 --> 00:15:37,880
the background script that
should be executed.

318
00:15:37,880 --> 00:15:41,080
One relevant point here.

319
00:15:41,080 --> 00:15:46,250
On a traditional web
application, not a Chrome app,

320
00:15:46,250 --> 00:15:52,670
you ask permissions, and the
permission pops up on in front

321
00:15:52,670 --> 00:15:54,210
of the user.

322
00:15:54,210 --> 00:15:57,950
The idea of a Chrome app is that
most of the permissions

323
00:15:57,950 --> 00:16:03,180
can be given to your app when
a user starts the app.

324
00:16:03,180 --> 00:16:06,480
So the experience from
the user's point of

325
00:16:06,480 --> 00:16:08,570
view is much better.

326
00:16:08,570 --> 00:16:13,210
Because if you are using an
application that requires

327
00:16:13,210 --> 00:16:18,090
access to your USB device,
probably if you install that

328
00:16:18,090 --> 00:16:23,990
application, if you agree with
that permission, that's OK.

329
00:16:23,990 --> 00:16:26,950
You don't want to get that
pop-up every time you run the

330
00:16:26,950 --> 00:16:29,380
application because the
application hasn't changed

331
00:16:29,380 --> 00:16:32,880
what it requires from you.

332
00:16:32,880 --> 00:16:39,040
So all of that goes on
the manifest JSON.

333
00:16:39,040 --> 00:16:45,020
The background script is the
script that you put on the

334
00:16:45,020 --> 00:16:49,480
manifest and it's the script
that will listen to the

335
00:16:49,480 --> 00:16:53,090
onLaunched event and do
whatever it has to do,

336
00:16:53,090 --> 00:16:54,380
depending on your application.

337
00:16:54,380 --> 00:16:58,050
Usually it will create
one or more windows,

338
00:16:58,050 --> 00:17:02,590
but it can do anything.

339
00:17:02,590 --> 00:17:07,349
And I think this is the most
important thing for a

340
00:17:07,349 --> 00:17:09,030
traditional web developer.

341
00:17:09,030 --> 00:17:11,550

342
00:17:11,550 --> 00:17:14,140
As I said before, you have
to change our mindset.

343
00:17:14,140 --> 00:17:16,839
You are running offline.

344
00:17:16,839 --> 00:17:21,609
So you have to think about what
your application needs to

345
00:17:21,609 --> 00:17:28,040
run, and you have to put
it all on your content.

346
00:17:28,040 --> 00:17:30,540
You don't have to depend
to get this

347
00:17:30,540 --> 00:17:34,200
information from the network.

348
00:17:34,200 --> 00:17:38,375
OK, so yeah, that's a
high-level overview.

349
00:17:38,375 --> 00:17:40,390
Do have anything to add?

350
00:17:40,390 --> 00:17:42,240
PETE LEPAGE: All right, no,
I think that's good.

351
00:17:42,240 --> 00:17:46,660
The cool thing is if you've
written a legacy Chrome

352
00:17:46,660 --> 00:17:50,480
packaged app, you're already
well on your way.

353
00:17:50,480 --> 00:17:54,200
And it's just a matter of making
a few changes and then

354
00:17:54,200 --> 00:17:57,310
starting to dive into some
of the new APIs that are

355
00:17:57,310 --> 00:17:58,490
available to you.

356
00:17:58,490 --> 00:18:01,940
If you've written just a web
app that's hosted, you're

357
00:18:01,940 --> 00:18:04,210
going to have a few things that
you're going to want to

358
00:18:04,210 --> 00:18:06,830
play with and change
and learn as--

359
00:18:06,830 --> 00:18:07,980
RENATO MANGINI: Like embedding

360
00:18:07,980 --> 00:18:10,380
everything on the same package.

361
00:18:10,380 --> 00:18:11,220
PETE LEPAGE: Exactly.

362
00:18:11,220 --> 00:18:12,010
Exactly.

363
00:18:12,010 --> 00:18:14,960
But really all you're doing is
taking all the files and

364
00:18:14,960 --> 00:18:16,470
putting them into
the zip file.

365
00:18:16,470 --> 00:18:19,280
Instead of having them sit on
the server side, they're

366
00:18:19,280 --> 00:18:22,410
sitting on the local side.

367
00:18:22,410 --> 00:18:23,670
Cool.

368
00:18:23,670 --> 00:18:25,490
Well, Paul, do you want to tell
us about some of the new

369
00:18:25,490 --> 00:18:27,260
APIs that are available?

370
00:18:27,260 --> 00:18:27,740
PAUL LEWIS: Definitely.

371
00:18:27,740 --> 00:18:32,800
OK, so we've heard a bit about
the overview and the

372
00:18:32,800 --> 00:18:36,030
architecture and those
kind of things.

373
00:18:36,030 --> 00:18:38,440
And so one of the things that--
as we mentioned at the

374
00:18:38,440 --> 00:18:40,750
start, we've got these new APIs,
specifically some of

375
00:18:40,750 --> 00:18:45,900
these system-level APIs, which
I think are really exciting.

376
00:18:45,900 --> 00:18:46,990
What I want to do is
I just want to

377
00:18:46,990 --> 00:18:49,470
highlight a few of those.

378
00:18:49,470 --> 00:18:53,060
What I'll probably do is show
you my screen in a sec.

379
00:18:53,060 --> 00:18:54,416
Let's do that now, actually.

380
00:18:54,416 --> 00:18:58,680

381
00:18:58,680 --> 00:19:06,330
So if you were to go to
developer.chrome.com/apps, and

382
00:19:06,330 --> 00:19:09,450
on the left-hand side you've got
the menu, the interesting

383
00:19:09,450 --> 00:19:12,840
one is the Chrome JavaScript
APIs, which gives you an

384
00:19:12,840 --> 00:19:17,490
overview of all the APIs that
are available to you in your

385
00:19:17,490 --> 00:19:18,430
Chrome packaged apps.

386
00:19:18,430 --> 00:19:22,800
Now, I'm not going to go through
all of them because it

387
00:19:22,800 --> 00:19:26,180
would take quite some time, and
you want to probably dive

388
00:19:26,180 --> 00:19:27,970
into this and look at the things
that are of particular

389
00:19:27,970 --> 00:19:28,755
interest to you.

390
00:19:28,755 --> 00:19:32,080
But there are some new
ones, and you want to

391
00:19:32,080 --> 00:19:32,730
probably look at those.

392
00:19:32,730 --> 00:19:35,320
Context menus are quite
interesting because those are

393
00:19:35,320 --> 00:19:38,460
things that you'd expect
to see in a native app.

394
00:19:38,460 --> 00:19:41,435
So we wanted to give you those
as well for your--

395
00:19:41,435 --> 00:19:41,830
PETE LEPAGE: Right.

396
00:19:41,830 --> 00:19:45,580
Those give you the right-click
on items or

397
00:19:45,580 --> 00:19:47,110
on whatever, right?

398
00:19:47,110 --> 00:19:48,190
PAUL LEWIS: Yeah,
exactly right.

399
00:19:48,190 --> 00:19:53,030
So these are things that almost
any user of your app

400
00:19:53,030 --> 00:19:53,810
would expect.

401
00:19:53,810 --> 00:19:56,450
If they're going to be launching
these apps outside

402
00:19:56,450 --> 00:19:57,950
of the browser, they can
start right-clicking,

403
00:19:57,950 --> 00:19:59,760
those kinds of things.

404
00:19:59,760 --> 00:20:01,960
As I say, you can dive into
some of these more

405
00:20:01,960 --> 00:20:03,030
specifically yourself.

406
00:20:03,030 --> 00:20:06,340
The socket I found particularly
interesting

407
00:20:06,340 --> 00:20:12,450
because now you can actually use
your app as a TCP or UDP

408
00:20:12,450 --> 00:20:14,850
client, which is the first time
that you've been able to

409
00:20:14,850 --> 00:20:19,590
do those kind of things
directly.

410
00:20:19,590 --> 00:20:21,670
PETE LEPAGE: Now, what kind of
apps could you write with the

411
00:20:21,670 --> 00:20:27,660
TCP and UDP APIs?

412
00:20:27,660 --> 00:20:29,430
PAUL LEWIS: Yeah,
so some people

413
00:20:29,430 --> 00:20:33,720
have written IRC clients.

414
00:20:33,720 --> 00:20:36,970
Renato, what else
have you seen?

415
00:20:36,970 --> 00:20:44,470
RENATO MANGINI: Well, that's
a whole new apps--

416
00:20:44,470 --> 00:20:51,160
I think this opens up for
a whole set of apps that

417
00:20:51,160 --> 00:20:52,700
requires a network.

418
00:20:52,700 --> 00:20:56,050

419
00:20:56,050 --> 00:20:59,600
I cannot even imagine what
develops will come with--

420
00:20:59,600 --> 00:21:01,960
PETE LEPAGE: Yeah, that's kind
of the cool part, is we have

421
00:21:01,960 --> 00:21:05,120
no idea what you guys are
going to do with this.

422
00:21:05,120 --> 00:21:06,230
Cool, you want to keep
talking about--

423
00:21:06,230 --> 00:21:09,490
PAUL LEWIS: Yeah, I mean, the
thing about sockets is

424
00:21:09,490 --> 00:21:11,600
historically with web sockets,
you need to be able to control

425
00:21:11,600 --> 00:21:12,540
both sides.

426
00:21:12,540 --> 00:21:15,440
Now with the TCP socket stuff
particularly, you're in

427
00:21:15,440 --> 00:21:17,290
control of the app side.

428
00:21:17,290 --> 00:21:21,030
But the service you're talking
to may not support traditional

429
00:21:21,030 --> 00:21:23,010
web sockets, but they may
support TCP connections.

430
00:21:23,010 --> 00:21:25,050
So it just broadens
what you can do.

431
00:21:25,050 --> 00:21:28,490
The thing that I've got on the
screen is this experimental

432
00:21:28,490 --> 00:21:33,380
APIs, which contains some of
the really interesting ones

433
00:21:33,380 --> 00:21:37,950
for me personally, but
particularly, the Bluetooth

434
00:21:37,950 --> 00:21:39,970
and the USB.

435
00:21:39,970 --> 00:21:42,220
So as Pete said at
the start, we're

436
00:21:42,220 --> 00:21:44,810
letting you talk to devices.

437
00:21:44,810 --> 00:21:47,720
And all of these are under the
experimental name space.

438
00:21:47,720 --> 00:21:50,130
We should've mention that
you'll have to ask for

439
00:21:50,130 --> 00:21:53,430
experimental permissions and
apps that are going into the

440
00:21:53,430 --> 00:21:55,210
Chrome Web Store.

441
00:21:55,210 --> 00:21:57,270
They don't allow you to use
those experimental APIs.

442
00:21:57,270 --> 00:22:01,030
So this is very much a kind of
early stage thing where you

443
00:22:01,030 --> 00:22:03,990
can put these in, start building
these apps, and then

444
00:22:03,990 --> 00:22:06,420
as they become available
and stable--

445
00:22:06,420 --> 00:22:08,330
RENATO MANGINI: Paul,
specifically about the

446
00:22:08,330 --> 00:22:14,170
Bluetooth, just a warning that
it's being implemented on

447
00:22:14,170 --> 00:22:15,880
Windows, Linux, and Mac.

448
00:22:15,880 --> 00:22:22,220
Currently it only runs on Chrome
OS, but as we talk, the

449
00:22:22,220 --> 00:22:26,500
engineer team is working
on the other platforms.

450
00:22:26,500 --> 00:22:27,960
For Bluetooth only, OK?

451
00:22:27,960 --> 00:22:31,530
So the developers should not
expect on these experimental

452
00:22:31,530 --> 00:22:37,780
APIs, APIs completely
done and finished.

453
00:22:37,780 --> 00:22:39,400
It will have a lot of changes.

454
00:22:39,400 --> 00:22:42,880
Of course, there a lot of bugs,
probably, and we expect

455
00:22:42,880 --> 00:22:47,260
the developer feedback
to fix those bugs.

456
00:22:47,260 --> 00:22:49,160
PAUL LEWIS: Yes,
exactly right.

457
00:22:49,160 --> 00:22:52,370
PETE LEPAGE: Yeah, and I think
that's a good point that a lot

458
00:22:52,370 --> 00:22:55,480
of these are in experimental
mode right now, and you can't

459
00:22:55,480 --> 00:22:58,770
actually go and upload
experimental stuff to the

460
00:22:58,770 --> 00:22:59,940
Chrome Web Store.

461
00:22:59,940 --> 00:23:03,510
As these things start to mature
and as Chrome packaged

462
00:23:03,510 --> 00:23:09,130
apps hit a maturity level later
this fall, we will have

463
00:23:09,130 --> 00:23:11,110
a point where you will be
able to upload them.

464
00:23:11,110 --> 00:23:14,190
You will actually be able to
go use them in real time

465
00:23:14,190 --> 00:23:18,490
without having to have the
experimental flag on there and

466
00:23:18,490 --> 00:23:21,410
know that they won't change
out from under you, where

467
00:23:21,410 --> 00:23:25,810
right now, we're still making
sure they work and getting

468
00:23:25,810 --> 00:23:29,370
feedback from you as you use
them to make sure that they

469
00:23:29,370 --> 00:23:31,940
meet your needs and they
do the things that you

470
00:23:31,940 --> 00:23:33,350
want them to do.

471
00:23:33,350 --> 00:23:34,100
PAUL LEWIS: Yeah.

472
00:23:34,100 --> 00:23:37,887
One API I really wanted to pull
out at this stage and

473
00:23:37,887 --> 00:23:40,850
something that I encourage you
guys to go and look at is, as

474
00:23:40,850 --> 00:23:44,170
we said several times,
offline by default.

475
00:23:44,170 --> 00:23:47,680
That's a really core
part of these apps.

476
00:23:47,680 --> 00:23:51,320
And because of that,
things like storage

477
00:23:51,320 --> 00:23:52,440
APIs are really helpful.

478
00:23:52,440 --> 00:23:58,340
We've got chrome.storage.local
and chrome.storage.sync and

479
00:23:58,340 --> 00:24:03,350
the sync version
of local and--

480
00:24:03,350 --> 00:24:05,590
PETE LEPAGE: Do you have
feedback because I think you

481
00:24:05,590 --> 00:24:08,100
just sort of bugged out
there for a second.

482
00:24:08,100 --> 00:24:11,760
At least on my computer, so
maybe for other folks, too.

483
00:24:11,760 --> 00:24:15,677
PAUL LEWIS: OK, so the APIs
you want to look at are

484
00:24:15,677 --> 00:24:20,030
chrome.storage.local
and .sync.

485
00:24:20,030 --> 00:24:23,950
And these are the two APIs
specifically for

486
00:24:23,950 --> 00:24:25,800
storing your data.

487
00:24:25,800 --> 00:24:28,130
They're specifically designed
for smaller amounts of data.

488
00:24:28,130 --> 00:24:30,430
If you need larger amounts of
data, you might want to look

489
00:24:30,430 --> 00:24:37,270
at the standard HTML5 File
System API and so forth.

490
00:24:37,270 --> 00:24:40,020
But the point of these is that
they degrade gracefully like a

491
00:24:40,020 --> 00:24:40,860
lot of the APIs.

492
00:24:40,860 --> 00:24:45,480
They degrade gracefully under
poor network conditions, and

493
00:24:45,480 --> 00:24:49,440
they are there specifically to
allow you to write sensible

494
00:24:49,440 --> 00:24:51,410
offline focused apps.

495
00:24:51,410 --> 00:24:54,030
So I really wanted to
make that point.

496
00:24:54,030 --> 00:24:55,900
And then, as I said before,
we've got these other really

497
00:24:55,900 --> 00:24:57,546
exciting APIs like the

498
00:24:57,546 --> 00:24:59,420
system-level ones and so forth.

499
00:24:59,420 --> 00:25:02,350
So go and have a look,
go and have a play.

500
00:25:02,350 --> 00:25:04,180
Right now, what I'm going to
do is I'm actually going to

501
00:25:04,180 --> 00:25:06,810
show you how you can get started
with the samples

502
00:25:06,810 --> 00:25:08,260
because we've got a good
number of samples.

503
00:25:08,260 --> 00:25:12,460
So I'm going to screenshare
once again.

504
00:25:12,460 --> 00:25:15,430
And let's see what we see.

505
00:25:15,430 --> 00:25:17,300
PETE LEPAGE: So with all of
these samples that Paul is

506
00:25:17,300 --> 00:25:19,690
going to start showing you,
you can actually start

507
00:25:19,690 --> 00:25:21,050
playing with them.

508
00:25:21,050 --> 00:25:26,640
You'll need either Chrome Dev or
Chrome Canary because this

509
00:25:26,640 --> 00:25:30,450
is not something that has made
it down to beta or to the

510
00:25:30,450 --> 00:25:32,360
stable channel yet.

511
00:25:32,360 --> 00:25:36,560
So you can always try it in
Chrome Canary or Chrome Beta--

512
00:25:36,560 --> 00:25:39,870
or sorry, Chrome Canary
or Chrome Dev.

513
00:25:39,870 --> 00:25:44,080
The one thing that I tend to
recommend is running Chrome

514
00:25:44,080 --> 00:25:49,840
Canary and either Chrome Beta
or Chrome Stable because if

515
00:25:49,840 --> 00:25:52,720
you do that, then you can have
two instances of Chrome

516
00:25:52,720 --> 00:25:55,600
installed without having to
worry about them clobbering

517
00:25:55,600 --> 00:25:56,180
each other.

518
00:25:56,180 --> 00:25:58,470
You don't have to worry about
going and playing with

519
00:25:58,470 --> 00:26:02,300
something in Chrome Canary and
having it crash on a regular

520
00:26:02,300 --> 00:26:05,430
basis or anything like that
because it is Chrome Canary.

521
00:26:05,430 --> 00:26:09,170
So if you have those two, you
can always go and play with

522
00:26:09,170 --> 00:26:10,790
the latest stuff.

523
00:26:10,790 --> 00:26:13,730
The other option would be to
install Chromium as a--

524
00:26:13,730 --> 00:26:18,980

525
00:26:18,980 --> 00:26:19,260
PAUL LEWIS: --which is
github.com/googl

526
00:26:19,260 --> 00:26:24,750
echrome/chrome-app-samples
and--

527
00:26:24,750 --> 00:26:27,320
PETE LEPAGE: All right, and
we'll provide a short link to

528
00:26:27,320 --> 00:26:30,120
this in the notes.

529
00:26:30,120 --> 00:26:30,620
PAUL LEWIS: Yeah.

530
00:26:30,620 --> 00:26:35,820
And so you can see we've got
a ton of samples here.

531
00:26:35,820 --> 00:26:39,700
And again, I'll let you go and
have a play with those.

532
00:26:39,700 --> 00:26:43,230
Now, the main thing that you'll
need to do is enable

533
00:26:43,230 --> 00:26:46,330
the experimental
extension APIs.

534
00:26:46,330 --> 00:26:49,420
Because when we ask-- as we
mentioned in the manifest, you

535
00:26:49,420 --> 00:26:50,160
ask for permissions.

536
00:26:50,160 --> 00:26:51,960
One of the permissions you're
going to be asking for is

537
00:26:51,960 --> 00:26:54,440
experimental, almost certainly
as you try some of these

538
00:26:54,440 --> 00:26:55,580
things out.

539
00:26:55,580 --> 00:26:57,420
So you have to enable that
with a flag that you've

540
00:26:57,420 --> 00:26:59,550
allowed to ask for that
particular permission.

541
00:26:59,550 --> 00:27:03,790
So if you go to About Flags or
Chrome Flags, you'll see this

542
00:27:03,790 --> 00:27:07,450
experimental extension APIs
which you enable.

543
00:27:07,450 --> 00:27:09,680
And that's very important.

544
00:27:09,680 --> 00:27:11,840
One of the things that we've
done to try and make your

545
00:27:11,840 --> 00:27:13,560
lives a little bit
simpler, which I

546
00:27:13,560 --> 00:27:17,170
really love, is we have--

547
00:27:17,170 --> 00:27:18,320
I've got my channel open here.

548
00:27:18,320 --> 00:27:21,530
We have something called Dojo,
which is under the Chrome App

549
00:27:21,530 --> 00:27:23,430
Samples Folder.

550
00:27:23,430 --> 00:27:24,850
I'm just going to
list that out.

551
00:27:24,850 --> 00:27:27,180
You can see that I've got
a build script, so

552
00:27:27,180 --> 00:27:28,660
if I just run build.

553
00:27:28,660 --> 00:27:31,470

554
00:27:31,470 --> 00:27:32,720
Takes a couple of seconds.

555
00:27:32,720 --> 00:27:35,440

556
00:27:35,440 --> 00:27:38,230
And out the other side.

557
00:27:38,230 --> 00:27:41,800
If I go to my extensions
now, which I'll make

558
00:27:41,800 --> 00:27:43,770
a little bit bigger--

559
00:27:43,770 --> 00:27:46,775
and I'm in developer mode, which
allows me to load an

560
00:27:46,775 --> 00:27:50,310
unpacked extension, which
can be useful sometimes.

561
00:27:50,310 --> 00:27:55,170
If you go to the Dojo Build
folder and select that, you

562
00:27:55,170 --> 00:27:58,670
get yourself a convenient new
app, which will allow you to

563
00:27:58,670 --> 00:28:02,330
launch all the other samples.

564
00:28:02,330 --> 00:28:05,080
So you can see when I go to a
new tab here, I've now got

565
00:28:05,080 --> 00:28:09,450
this Chrome Apps Dojo,
which when I launch--

566
00:28:09,450 --> 00:28:11,430
and you'll see the window
we were talking about.

567
00:28:11,430 --> 00:28:14,400
This hasn't got any additional
Omnibox.

568
00:28:14,400 --> 00:28:16,610
It's not got any
other buttons.

569
00:28:16,610 --> 00:28:18,250
It's just a window--

570
00:28:18,250 --> 00:28:20,910
PETE LEPAGE: That's a Chrome
packaged app, right?

571
00:28:20,910 --> 00:28:23,260
PAUL LEWIS: Yeah, this is
a Chrome packed app.

572
00:28:23,260 --> 00:28:24,080
PETE LEPAGE: Sweet!

573
00:28:24,080 --> 00:28:24,600
PAUL LEWIS: Yeah.

574
00:28:24,600 --> 00:28:28,300
So I'm going to just launch one
of our samples, which is a

575
00:28:28,300 --> 00:28:29,030
single window.

576
00:28:29,030 --> 00:28:32,880
We'll talk about these samples
in much more detail over the

577
00:28:32,880 --> 00:28:35,210
coming weeks.

578
00:28:35,210 --> 00:28:36,330
RENATO MANGINI: Paul?

579
00:28:36,330 --> 00:28:38,200
Can I interrupt you a second?

580
00:28:38,200 --> 00:28:44,740
There's a new version of Dojo
that is much better and much

581
00:28:44,740 --> 00:28:47,670
reliable than this.

582
00:28:47,670 --> 00:28:51,590
I'm not sure if you
want to run it.

583
00:28:51,590 --> 00:28:54,530
Do you want me to broadcast here
or you quite happy with

584
00:28:54,530 --> 00:28:54,770
this version?

585
00:28:54,770 --> 00:28:54,930
PAUL LEWIS: Yeah,
you go for it.

586
00:28:54,930 --> 00:28:56,160
Yeah, if you've got
a newer version.

587
00:28:56,160 --> 00:28:57,710
Yeah, feel free.

588
00:28:57,710 --> 00:29:00,440
PETE LEPAGE: So I think the key
point here is that you can

589
00:29:00,440 --> 00:29:02,220
actually go and sync--

590
00:29:02,220 --> 00:29:05,500
use GitHub to just do a pull
and make sure that you've

591
00:29:05,500 --> 00:29:08,540
always got the latest stuff so
that as we go and provide

592
00:29:08,540 --> 00:29:11,680
updates, as we make changes to
the APIs, we're keeping the

593
00:29:11,680 --> 00:29:14,020
samples and all that kind of
stuff up to date so that you

594
00:29:14,020 --> 00:29:16,760
can stay up to date yourself.

595
00:29:16,760 --> 00:29:17,450
PAUL LEWIS: Yeah.

596
00:29:17,450 --> 00:29:17,950
So--

597
00:29:17,950 --> 00:29:19,220
RENATO MANGINI: Go,
just go ahead.

598
00:29:19,220 --> 00:29:19,630
PAUL LEWIS: OK.

599
00:29:19,630 --> 00:29:21,570
So what I'm actually going to
do is I'm also just going to

600
00:29:21,570 --> 00:29:25,770
quickly show you one of the
other samples, which is the

601
00:29:25,770 --> 00:29:26,350
Hello World.

602
00:29:26,350 --> 00:29:28,790
So I'll actually load
that one directly.

603
00:29:28,790 --> 00:29:32,801
You can see Hello World
just dropped in there.

604
00:29:32,801 --> 00:29:35,010
You can see this little guy.

605
00:29:35,010 --> 00:29:37,820
Got that.

606
00:29:37,820 --> 00:29:39,320
[INAUDIBLE].

607
00:29:39,320 --> 00:29:40,460
That's very handy.

608
00:29:40,460 --> 00:29:43,830
So what I'll do is I'll now show
you the underlying code,

609
00:29:43,830 --> 00:29:45,930
which is-- again, it's
really simple.

610
00:29:45,930 --> 00:29:48,900
Just briefly, this is the
manifest, which if you've been

611
00:29:48,900 --> 00:29:51,910
making apps to date you'll
recognize instantly.

612
00:29:51,910 --> 00:29:53,860
It's just the JSON file.

613
00:29:53,860 --> 00:29:57,330
Version 2 is important.

614
00:29:57,330 --> 00:30:00,040
Bump the text up here.

615
00:30:00,040 --> 00:30:01,400
PETE LEPAGE: Ah, that looks
much better, thank you.

616
00:30:01,400 --> 00:30:02,360
PAUL LEWIS: OK.

617
00:30:02,360 --> 00:30:07,550
Version 2 is what's going to
trip you into the new packaged

618
00:30:07,550 --> 00:30:09,750
apps so that Chrome knows
that that's what

619
00:30:09,750 --> 00:30:11,430
you're talking about--

620
00:30:11,430 --> 00:30:13,580
name, version, icons.

621
00:30:13,580 --> 00:30:16,670
And then this is the bit here
where you're saying, here's

622
00:30:16,670 --> 00:30:17,570
the background script.

623
00:30:17,570 --> 00:30:20,325
Here's the main hub of activity,
which in this case

624
00:30:20,325 --> 00:30:22,380
is main.js.

625
00:30:22,380 --> 00:30:27,835
And then I'm asking for the
experimental permissions, OK?

626
00:30:27,835 --> 00:30:33,140
And then inside the main.js,
which is that background,

627
00:30:33,140 --> 00:30:38,340
you'll see that we've got this
chrome.experimental.app

628
00:30:38,340 --> 00:30:41,050
onLaunched, which is a list that
when your app is first

629
00:30:41,050 --> 00:30:45,990
launched, this is the list that
we're going to have catch

630
00:30:45,990 --> 00:30:47,010
that event.

631
00:30:47,010 --> 00:30:50,170
And all it does is create a
window which says, inside,

632
00:30:50,170 --> 00:30:50,810
Hello World.

633
00:30:50,810 --> 00:30:53,650
So that's as much as you
need to start making

634
00:30:53,650 --> 00:30:55,070
packaged apps today.

635
00:30:55,070 --> 00:30:58,870
Obviously, all the samples
that we've got have got a

636
00:30:58,870 --> 00:31:01,590
variety of APIs that they're
using and a variety of

637
00:31:01,590 --> 00:31:02,980
permissions.

638
00:31:02,980 --> 00:31:05,120
So there's plenty to
go up in this.

639
00:31:05,120 --> 00:31:07,930
And we're going to be
adding more over

640
00:31:07,930 --> 00:31:09,530
time I'm sure as well.

641
00:31:09,530 --> 00:31:09,920
PETE LEPAGE: Cool.

642
00:31:09,920 --> 00:31:13,290
So again, to go get that stuff,
all you have to do is

643
00:31:13,290 --> 00:31:17,820
go to GitHub, and you can
download the zip file there.

644
00:31:17,820 --> 00:31:20,740
Or you can just clone the
repository to your local

645
00:31:20,740 --> 00:31:23,580
machine, and you're
good to go.

646
00:31:23,580 --> 00:31:24,030
PAUL LEWIS: Exactly.

647
00:31:24,030 --> 00:31:24,480
PETE LEPAGE: Sweet.

648
00:31:24,480 --> 00:31:27,110
So what's the URL
for that again?

649
00:31:27,110 --> 00:31:27,770
PAUL LEWIS: It's
github.com/googl

650
00:31:27,770 --> 00:31:29,020
echrome/chrome-app-samples.

651
00:31:29,020 --> 00:31:34,370

652
00:31:34,370 --> 00:31:36,400
PETE LEPAGE: All right.

653
00:31:36,400 --> 00:31:41,160
So this series of Office Hours
are something that we're going

654
00:31:41,160 --> 00:31:44,090
to be doing pretty
much once a week.

655
00:31:44,090 --> 00:31:47,780
We're going to do it every
Tuesday at 9:30 Pacific,

656
00:31:47,780 --> 00:31:49,500
noon-30, or 12:30 Eastern.

657
00:31:49,500 --> 00:31:52,940
And I think, Paul, for you in
London, it's 5:30 right

658
00:31:52,940 --> 00:31:55,280
about-- well, I guess it's a
little after 5:30 now, but

659
00:31:55,280 --> 00:31:57,760
we'll start at 5:30.

660
00:31:57,760 --> 00:32:00,510
For those of you who are in
Brazil, we'll start at I guess

661
00:32:00,510 --> 00:32:01,851
1:30 in the afternoon?

662
00:32:01,851 --> 00:32:02,300
RENATO MANGINI: 1:30.

663
00:32:02,300 --> 00:32:02,890
Exactly.

664
00:32:02,890 --> 00:32:03,430
PETE LEPAGE: Yeah.

665
00:32:03,430 --> 00:32:08,260
So we're trying to get as much
of the world in as we can.

666
00:32:08,260 --> 00:32:11,220
But one of the things that we
want to do is know what things

667
00:32:11,220 --> 00:32:15,670
that you guys think are most
interesting, what APIs you

668
00:32:15,670 --> 00:32:20,170
want us to focus on, what are
the pieces of the new Chrome

669
00:32:20,170 --> 00:32:23,720
packaged apps that you really
want to dive into.

670
00:32:23,720 --> 00:32:26,530
And so to do that, we'll
put the [INAUDIBLE]

671
00:32:26,530 --> 00:32:28,440
and in the notes.

672
00:32:28,440 --> 00:32:31,140
But we've got a survey
that we'd like you

673
00:32:31,140 --> 00:32:32,190
guys to go fill out.

674
00:32:32,190 --> 00:32:39,780
You can get to the survey
at goo.gl/7ZQUN.

675
00:32:39,780 --> 00:32:42,220
All of those letters are
in capital letters.

676
00:32:42,220 --> 00:32:47,950
Again, that's seven, Zed, Q,
U, N. Again, and we'll put

677
00:32:47,950 --> 00:32:51,280
this in the slides so that you
can check that out after the

678
00:32:51,280 --> 00:32:53,270
fact and fill that in.

679
00:32:53,270 --> 00:32:57,110
Because we'll then choose
which sessions you

680
00:32:57,110 --> 00:33:01,590
guys want to go for.

681
00:33:01,590 --> 00:33:05,530
So at this point, I want to open
it up to your questions.

682
00:33:05,530 --> 00:33:06,670
You guys have been submitting

683
00:33:06,670 --> 00:33:10,270
questions through the Moderator.

684
00:33:10,270 --> 00:33:12,290
And so we've taken a look.

685
00:33:12,290 --> 00:33:15,880
We've got a few answers
already for us.

686
00:33:15,880 --> 00:33:19,070
I'm going to take the first
question because it's a kind

687
00:33:19,070 --> 00:33:22,380
of fun question and something
that we talked a little bit

688
00:33:22,380 --> 00:33:26,200
about at I/O. But "when will
you support Chrome apps for

689
00:33:26,200 --> 00:33:29,720
Android?" And at Google
I/O, [? Sendhar, ?]

690
00:33:29,720 --> 00:33:33,100
as he was talking about these
new Chrome packaged apps or

691
00:33:33,100 --> 00:33:36,170
the updated Chrome packaged
apps, said that this is

692
00:33:36,170 --> 00:33:38,420
something that we want
to bring to other

693
00:33:38,420 --> 00:33:39,940
platforms as well.

694
00:33:39,940 --> 00:33:42,690
But we don't really have a date,
or we don't really have

695
00:33:42,690 --> 00:33:45,800
a time frame where we've said,
hey, this is going to happen

696
00:33:45,800 --> 00:33:48,340
within this date or time yet.

697
00:33:48,340 --> 00:33:52,500
We want to make sure that we
get the new APIs locked and

698
00:33:52,500 --> 00:33:55,100
really solid before
we do that.

699
00:33:55,100 --> 00:33:57,640
We want to make sure that we
get the experience great.

700
00:33:57,640 --> 00:34:01,150
We want to make sure that we get
this piece right before we

701
00:34:01,150 --> 00:34:03,510
start moving on and moving
to other parts.

702
00:34:03,510 --> 00:34:06,250

703
00:34:06,250 --> 00:34:11,659
The second question is another
fun question here.

704
00:34:11,659 --> 00:34:13,730
"What are the top three
conditions to get featured on

705
00:34:13,730 --> 00:34:15,260
the Chrome Web Store?

706
00:34:15,260 --> 00:34:21,030
Do you give preference to apps
using Google Checkout, HTML5,

707
00:34:21,030 --> 00:34:24,900
requiring users to sign in
via Google Accounts?"

708
00:34:24,900 --> 00:34:28,710
And typically the thing that
we say to folks is that we

709
00:34:28,710 --> 00:34:31,679
just want you to go build
really great web apps.

710
00:34:31,679 --> 00:34:35,050
As developer advocates and
developer programs engineers,

711
00:34:35,050 --> 00:34:37,719
I think we all have a different
list of things that

712
00:34:37,719 --> 00:34:41,639
we look at in terms
of great apps.

713
00:34:41,639 --> 00:34:45,989
And that's a great question for
us to bring up in a future

714
00:34:45,989 --> 00:34:48,710
event, are what are some
of those things.

715
00:34:48,710 --> 00:34:51,750
In general, I want it
to feel really appy.

716
00:34:51,750 --> 00:34:53,570
I want it to look beautiful.

717
00:34:53,570 --> 00:34:58,180
I want it to have a really
good user experience.

718
00:34:58,180 --> 00:35:00,620
The other thing that I recommend
people do is have a

719
00:35:00,620 --> 00:35:02,950
look at the Web App
Field Guide.

720
00:35:02,950 --> 00:35:03,465
So if you go to html5rocks.com/w

721
00:35:03,465 --> 00:35:10,340
ebappfieldguide, there's some
good information there.

722
00:35:10,340 --> 00:35:13,450
Paul, Renato, do you guys have
anything that you look for in

723
00:35:13,450 --> 00:35:15,580
a really great web app?

724
00:35:15,580 --> 00:35:16,590
PAUL LEWIS: No, for me,
I think you hit

725
00:35:16,590 --> 00:35:17,500
the nail on the head.

726
00:35:17,500 --> 00:35:20,140
It's got to be something
that people love using.

727
00:35:20,140 --> 00:35:25,360
And I think a well-built app,
well executed that fills a

728
00:35:25,360 --> 00:35:26,060
real user need.

729
00:35:26,060 --> 00:35:29,640
That's what I personally
would be looking for.

730
00:35:29,640 --> 00:35:30,250
RENATO MANGINI: Yeah, exactly.

731
00:35:30,250 --> 00:35:31,200
I second that.

732
00:35:31,200 --> 00:35:33,380
It's a perfect answer.

733
00:35:33,380 --> 00:35:35,190
PETE LEPAGE: Cool.

734
00:35:35,190 --> 00:35:37,830
So somebody asked a question,
"what are the limitations of

735
00:35:37,830 --> 00:35:40,420
app scripts embedded
in Google sites?

736
00:35:40,420 --> 00:35:46,200
For example, what libraries,
APIs cannot be included?" I

737
00:35:46,200 --> 00:35:48,120
don't really have
a good handle on

738
00:35:48,120 --> 00:35:49,070
the apps script stuff.

739
00:35:49,070 --> 00:35:54,180
But the apps scripts team does
a Hangout on Thursdays.

740
00:35:54,180 --> 00:35:56,940
This week it's at 11:30
Eastern time.

741
00:35:56,940 --> 00:36:00,410
I'd recommend you go to that
Hangout and ask them there.

742
00:36:00,410 --> 00:36:03,730
They're more than happy to
answer, and they're a good

743
00:36:03,730 --> 00:36:04,980
group of folks.

744
00:36:04,980 --> 00:36:07,050

745
00:36:07,050 --> 00:36:09,630
"So why are there no human
interface guidelines for

746
00:36:09,630 --> 00:36:12,190
Chrome OS and Chrome
packaged apps?

747
00:36:12,190 --> 00:36:16,270
I seriously doubt that Chrome
apps can compete with native

748
00:36:16,270 --> 00:36:20,636
apps without having a consistent
look and feel."

749
00:36:20,636 --> 00:36:23,360
Paul, do you want to
take this one?

750
00:36:23,360 --> 00:36:23,930
PAUL LEWIS: Yeah.

751
00:36:23,930 --> 00:36:25,260
Let me--

752
00:36:25,260 --> 00:36:25,560
yeah.

753
00:36:25,560 --> 00:36:32,770
So I think what we would say
is that consistent UX, UI,

754
00:36:32,770 --> 00:36:35,990
that's really important stuff.

755
00:36:35,990 --> 00:36:39,900
And we want to make sure that
what we say adds up, and it

756
00:36:39,900 --> 00:36:43,270
makes sense to users, and it
makes sense to developers.

757
00:36:43,270 --> 00:36:45,190
And so it's something that we've
been talking about in

758
00:36:45,190 --> 00:36:47,720
terms of we don't have a release
or anything like that.

759
00:36:47,720 --> 00:36:52,500
But we do think that's good, and
it's a really good idea.

760
00:36:52,500 --> 00:36:53,910
PETE LEPAGE: And just a
reminder, if you have

761
00:36:53,910 --> 00:36:56,970
questions, you can go post them
on the Moderator, and

762
00:36:56,970 --> 00:36:58,260
vote questions up and down.

763
00:36:58,260 --> 00:37:01,490
The questions that you want to
hear answers to, vote them up.

764
00:37:01,490 --> 00:37:03,280
The ones that you're not really
interested in, vote

765
00:37:03,280 --> 00:37:07,220
them down, or if you think
it's not a good question.

766
00:37:07,220 --> 00:37:11,830
Because we'll take your
questions here.

767
00:37:11,830 --> 00:37:16,500
So Jarek from, I think, Poland
has another question.

768
00:37:16,500 --> 00:37:19,520
"When will we have full control
over main menu and

769
00:37:19,520 --> 00:37:21,770
context menus in
packaged apps?

770
00:37:21,770 --> 00:37:25,630
Currently, there's nowhere to
set up a main application menu

771
00:37:25,630 --> 00:37:29,440
on the OS X standard Chrome
menu as shown.

772
00:37:29,440 --> 00:37:32,600
And the context menu can only
extend with submenus." Renato,

773
00:37:32,600 --> 00:37:34,860
do you want to answer
that one?

774
00:37:34,860 --> 00:37:36,640
RENATO MANGINI: Sure.

775
00:37:36,640 --> 00:37:40,385
Yeah, you are absolutely
right, Jarek.

776
00:37:40,385 --> 00:37:45,950
The main menu currently cannot
be changed currently, but it's

777
00:37:45,950 --> 00:37:47,240
being worked on.

778
00:37:47,240 --> 00:37:53,280
And the context menu, I
saw your email on the

779
00:37:53,280 --> 00:37:55,640
Chrome New Apps list.

780
00:37:55,640 --> 00:38:02,600
And the current API exists,
and we want your feedback.

781
00:38:02,600 --> 00:38:06,560
I would ask you to please submit
this feedback through

782
00:38:06,560 --> 00:38:11,250
crbug.com with a special use
case that you cannot do with

783
00:38:11,250 --> 00:38:13,600
current context menu.

784
00:38:13,600 --> 00:38:18,230
And we will work with the
engineering team to check that

785
00:38:18,230 --> 00:38:23,210
and perhaps even change the
API if it makes sense for

786
00:38:23,210 --> 00:38:26,520
broad audience.

787
00:38:26,520 --> 00:38:29,330
But definitely this feedback's
very important for us.

788
00:38:29,330 --> 00:38:30,400
PETE LEPAGE: Yeah.

789
00:38:30,400 --> 00:38:31,820
Cool.

790
00:38:31,820 --> 00:38:33,390
So [? Virchow ?]

791
00:38:33,390 --> 00:38:37,640
from Mumbai said he's "made a
GWT application and is trying

792
00:38:37,640 --> 00:38:40,460
to make it a packaged app, but
he's facing some issues.

793
00:38:40,460 --> 00:38:44,010
What would be the best way to
solve those issues?" And he

794
00:38:44,010 --> 00:38:48,420
posted a link to his
specific question.

795
00:38:48,420 --> 00:38:49,590
RENATO MANGINI: Can
I answer that?

796
00:38:49,590 --> 00:38:51,460
Yeah, absolutely.

797
00:38:51,460 --> 00:38:54,560
RENATO MANGINI: OK, I'm
a GWT developer, also.

798
00:38:54,560 --> 00:38:58,840
So one of the first things I
look at when I start working

799
00:38:58,840 --> 00:39:03,000
with Chrome apps was how I could
move GWT applications to

800
00:39:03,000 --> 00:39:04,130
the Chrome apps.

801
00:39:04,130 --> 00:39:07,420
And there are some issues,
because we haven't talked

802
00:39:07,420 --> 00:39:13,400
about this today, but we'll talk
a lot about CSP on the

803
00:39:13,400 --> 00:39:14,540
next session.

804
00:39:14,540 --> 00:39:19,130
And CSP is a set of restrictions
that the Chrome

805
00:39:19,130 --> 00:39:23,410
app must follow to
be a Chrome app.

806
00:39:23,410 --> 00:39:27,140
And some of these restrictions,
and

807
00:39:27,140 --> 00:39:27,960
[? Virchow ?]

808
00:39:27,960 --> 00:39:33,330
you know that, because you
posted that on your question,

809
00:39:33,330 --> 00:39:39,570
it just allow some of the
features of GWT, G-W-T. A

810
00:39:39,570 --> 00:39:44,570
simple GWT application should
work on a sandbox iframe.

811
00:39:44,570 --> 00:39:48,740
I'm sorry for the audience
that have not heard about

812
00:39:48,740 --> 00:39:50,140
sandbox iframes.

813
00:39:50,140 --> 00:39:53,180
We'll talk about that
later, also.

814
00:39:53,180 --> 00:39:54,120
But some of the--

815
00:39:54,120 --> 00:39:55,490
PETE LEPAGE: Let's just talk--

816
00:39:55,490 --> 00:39:58,350
I'll give a 30-second
version of that.

817
00:39:58,350 --> 00:40:01,750
Content Security Policy
basically says it protects

818
00:40:01,750 --> 00:40:04,530
your apps from--

819
00:40:04,530 --> 00:40:08,150
helps to protect your apps
from cross-site scripting

820
00:40:08,150 --> 00:40:09,690
vulnerabilities.

821
00:40:09,690 --> 00:40:11,430
And it limits [INAUDIBLE]

822
00:40:11,430 --> 00:40:16,140
can run, how it gets run, and a
couple of things like that.

823
00:40:16,140 --> 00:40:20,030
So that means within Chrome
packaged apps, you can't do a

824
00:40:20,030 --> 00:40:23,850
certain set of things, but you
can have a sandboxed iframe

825
00:40:23,850 --> 00:40:25,930
that allows those things
to happen.

826
00:40:25,930 --> 00:40:27,050
But it's sandbox.

827
00:40:27,050 --> 00:40:31,300
So it lives off in its own
little world, and you can't

828
00:40:31,300 --> 00:40:34,760
easily communicate with the
rest of your application.

829
00:40:34,760 --> 00:40:38,680
So Renato, I'll pass it back
to you and you can--

830
00:40:38,680 --> 00:40:42,700
RENATO MANGINI: OK, so GWT
compiles your code and it uses

831
00:40:42,700 --> 00:40:49,480
some of the things that
CSP tries to avoid,

832
00:40:49,480 --> 00:40:52,070
which is new function--

833
00:40:52,070 --> 00:40:53,200
the use and the construction
of the

834
00:40:53,200 --> 00:40:58,720
function with string scripts.

835
00:40:58,720 --> 00:41:02,840
So you were supposed to run a
very simple GWT application on

836
00:41:02,840 --> 00:41:04,520
a sandbox iframe.

837
00:41:04,520 --> 00:41:12,000
If you are not, I would ask you
to submit a simple sample

838
00:41:12,000 --> 00:41:14,710
that doesn't work, and
we'll check it out.

839
00:41:14,710 --> 00:41:16,700
We'll try to make it happen.

840
00:41:16,700 --> 00:41:19,110
PETE LEPAGE: That's
a great point.

841
00:41:19,110 --> 00:41:21,820
If you find bugs as you're
building these things, if

842
00:41:21,820 --> 00:41:24,580
things aren't working right, the
forums are a great place

843
00:41:24,580 --> 00:41:25,810
to go post your questions.

844
00:41:25,810 --> 00:41:30,060
But as well, file
bugs with us.

845
00:41:30,060 --> 00:41:32,240
We need to hear about these
things so that we can get them

846
00:41:32,240 --> 00:41:36,590
fixed and ready for you to go
start using in real-- in

847
00:41:36,590 --> 00:41:39,240
production code.

848
00:41:39,240 --> 00:41:42,560
So the next question is "can we
get an API like the Chrome

849
00:41:42,560 --> 00:41:48,240
storage sync that syncs to our
own custom back-end point."

850
00:41:48,240 --> 00:41:52,050
And that's a great feature
request from Rob in Montana.

851
00:41:52,050 --> 00:41:55,610
Rob, it would be great if you
could go file that on Chromium

852
00:41:55,610 --> 00:42:00,150
bugs so that we can go and start
looking into that and

853
00:42:00,150 --> 00:42:02,590
see what happens.

854
00:42:02,590 --> 00:42:05,060
But that's the best place to
go file feature requests or

855
00:42:05,060 --> 00:42:07,470
anything like that.

856
00:42:07,470 --> 00:42:12,340
So the next question from
Anatoly in the European Union.

857
00:42:12,340 --> 00:42:15,660
"Awesome news on ways to
authenticate users via Google

858
00:42:15,660 --> 00:42:17,170
through an API.

859
00:42:17,170 --> 00:42:21,020
However, the dialogue looks
really scary to users like

860
00:42:21,020 --> 00:42:23,320
developers are going to
steal their email.

861
00:42:23,320 --> 00:42:26,500
Facebook has an option to
provide an anonymous ID of

862
00:42:26,500 --> 00:42:30,930
users without asking for email."
I guess that's not

863
00:42:30,930 --> 00:42:35,150
really a question, but maybe
a feature request.

864
00:42:35,150 --> 00:42:38,960
So Anatoly, if you would,
again, same thing.

865
00:42:38,960 --> 00:42:45,720
Go file a feature request on the
Chrome apps or in the bug

866
00:42:45,720 --> 00:42:50,070
database, that would be great.

867
00:42:50,070 --> 00:42:53,350
So we've got a couple
minutes left.

868
00:42:53,350 --> 00:42:56,830
But "do you have any plans for
exposing names of system fonts

869
00:42:56,830 --> 00:43:02,610
to packaged apps?" This is a
must for any app that provides

870
00:43:02,610 --> 00:43:07,205
rich text editing capabilities."
And Jarek has

871
00:43:07,205 --> 00:43:10,900
an API proposal already
as a gist on GitHub.

872
00:43:10,900 --> 00:43:14,380

873
00:43:14,380 --> 00:43:17,180
Paul, do you want to talk
about this for a sec?

874
00:43:17,180 --> 00:43:21,470
PAUL LEWIS: Yeah, I think just
generally about fonts.

875
00:43:21,470 --> 00:43:25,880
I mean, if it's a system font
that is obviously, it comes

876
00:43:25,880 --> 00:43:28,000
with the OS, then you should
be able to use CSS as you

877
00:43:28,000 --> 00:43:30,300
normally would.

878
00:43:30,300 --> 00:43:35,130
You should expect the standard
browser behavior there.

879
00:43:35,130 --> 00:43:38,620
If you're considering embedding
fonts, you should

880
00:43:38,620 --> 00:43:40,880
consider the offline first
thing that you won't be

881
00:43:40,880 --> 00:43:43,860
loading those resources
remotely, That you'll want to

882
00:43:43,860 --> 00:43:46,080
bundle up those fonts
with your app.

883
00:43:46,080 --> 00:43:47,940
And obviously you need to make
sure that you check any

884
00:43:47,940 --> 00:43:52,370
licensing and so forth
to do with that.

885
00:43:52,370 --> 00:43:56,790
But in general, what you're
suggesting, which I think is

886
00:43:56,790 --> 00:44:02,635
can we pull a list of fonts on
this particular system, I

887
00:44:02,635 --> 00:44:04,720
think that it's another
feature request.

888
00:44:04,720 --> 00:44:06,760
It's a great feature request.

889
00:44:06,760 --> 00:44:10,960
Please file it as such, and we
will take a look at it with

890
00:44:10,960 --> 00:44:14,720
the engineering team and see
what we can do there.

891
00:44:14,720 --> 00:44:16,020
PETE LEPAGE: All
right, awesome.

892
00:44:16,020 --> 00:44:18,750
Well, Renato, I'm going to pass
the next question to you.

893
00:44:18,750 --> 00:44:22,160
"What's the difference between
the browser tag and an iframe

894
00:44:22,160 --> 00:44:25,540
tag with the sandbox attribute
introduced in HTML5?

895
00:44:25,540 --> 00:44:29,610
Aren't iframes already running
in a separate process?"

896
00:44:29,610 --> 00:44:29,900
RENATO MANGINI: Yeah.

897
00:44:29,900 --> 00:44:34,235
The browser tag is
also a new thing

898
00:44:34,235 --> 00:44:36,600
for most of the audience.

899
00:44:36,600 --> 00:44:39,640
The idea of the browser tag is
to be a completely separate

900
00:44:39,640 --> 00:44:43,740
instance of a browser-like
element.

901
00:44:43,740 --> 00:44:49,840
So it has its own cookie jar
it has it own storage, and

902
00:44:49,840 --> 00:44:54,220
it's completely independent
of your app, in general.

903
00:44:54,220 --> 00:44:58,440
The iframe tag, the sandbox
iframe, is different because

904
00:44:58,440 --> 00:45:01,250
the idea is to be part
of your application.

905
00:45:01,250 --> 00:45:02,550
None of those are--

906
00:45:02,550 --> 00:45:05,120

907
00:45:05,120 --> 00:45:08,520
we created those to support
a few use cases.

908
00:45:08,520 --> 00:45:13,260
But our idea is not that you
are using both of these.

909
00:45:13,260 --> 00:45:19,750
Our idea is to really use the
power of Chrome apps.

910
00:45:19,750 --> 00:45:23,320
You should use those only if you
cannot do the same thing

911
00:45:23,320 --> 00:45:26,620
going outside of both browser
tag and iframe tag.

912
00:45:26,620 --> 00:45:29,470
So to simply answer the
tech, the iframe--

913
00:45:29,470 --> 00:45:33,590
the answer to the question is
the iframe tag is part of your

914
00:45:33,590 --> 00:45:34,190
application.

915
00:45:34,190 --> 00:45:38,162
The browser tag is to be a
complete separate part of a

916
00:45:38,162 --> 00:45:40,220
complete separate process.

917
00:45:40,220 --> 00:45:41,050
PETE LEPAGE: Cool.

918
00:45:41,050 --> 00:45:44,350
All right, well, we'll take one
more question, and then

919
00:45:44,350 --> 00:45:46,740
we're a little bit over time.

920
00:45:46,740 --> 00:45:51,680
Next question is "why would you
deprecate Flash in favor

921
00:45:51,680 --> 00:45:57,150
of making developers rewrite all
their stuff in HTML5?" And

922
00:45:57,150 --> 00:45:59,280
I'd like all three of us to
answer this because I think

923
00:45:59,280 --> 00:46:06,340
this is a really cool reason to
me, is that we really think

924
00:46:06,340 --> 00:46:10,690
HTML5 provides all of the
features and power and, in

925
00:46:10,690 --> 00:46:13,280
fact, even more than
Flash does.

926
00:46:13,280 --> 00:46:16,900
And we really want to see the
web built on open standards

927
00:46:16,900 --> 00:46:21,240
and take advantage of the things
that we can now do with

928
00:46:21,240 --> 00:46:24,145
HTML5 that we've never been
able to do before.

929
00:46:24,145 --> 00:46:27,330
With things like CSS animations,
with transitions,

930
00:46:27,330 --> 00:46:30,720
you can get some pretty awesome
experiences that work

931
00:46:30,720 --> 00:46:34,740
across all devices, no matter
where the user's coming from.

932
00:46:34,740 --> 00:46:39,840
So by pushing these towards an
open platform you get a lot

933
00:46:39,840 --> 00:46:40,590
more users.

934
00:46:40,590 --> 00:46:43,880
You get a lot more ability to do
stuff, and I think it's the

935
00:46:43,880 --> 00:46:46,940
way that the platform's
really moving.

936
00:46:46,940 --> 00:46:49,070
Paul, Renato, you want
to take a stab?

937
00:46:49,070 --> 00:46:52,160
PAUL LEWIS: You covered the main
points that I would have

938
00:46:52,160 --> 00:46:52,670
got there, Pete.

939
00:46:52,670 --> 00:46:54,420
Well played.

940
00:46:54,420 --> 00:46:56,485
I think it's exactly
as you said.

941
00:46:56,485 --> 00:47:01,020
I mean, the promise of the web
to some degree is ubiquity.

942
00:47:01,020 --> 00:47:05,220
And certainly HTML5 and
its support across--

943
00:47:05,220 --> 00:47:08,440
there's numerous devices that
we're seeing in tablets, and

944
00:47:08,440 --> 00:47:12,680
phones that have really come
on in the last few years.

945
00:47:12,680 --> 00:47:15,850
They're a much closer
match to HTML5.

946
00:47:15,850 --> 00:47:18,870
And we see, as Pete said, that's
the direction that the

947
00:47:18,870 --> 00:47:20,280
industry's been going in.

948
00:47:20,280 --> 00:47:23,730
And we're putting our weight
behind that and supporting

949
00:47:23,730 --> 00:47:25,390
that as the appropriate
platform,

950
00:47:25,390 --> 00:47:28,100
really, on which to build.

951
00:47:28,100 --> 00:47:29,780
PETE LEPAGE: Yeah.

952
00:47:29,780 --> 00:47:33,370
RENATO MANGINI: Yeah, I
understand the rage of the

953
00:47:33,370 --> 00:47:36,480
developer that has already
developed application and just

954
00:47:36,480 --> 00:47:39,170
want to move to the new platform
without changing

955
00:47:39,170 --> 00:47:42,430
anything it's completely
understandable.

956
00:47:42,430 --> 00:47:47,360
But there's so many new and cool
things on the HTML5 side

957
00:47:47,360 --> 00:47:51,905
that I suggest that if you
have a Flash application,

958
00:47:51,905 --> 00:47:56,150
consider moving it to HTML5.

959
00:47:56,150 --> 00:47:56,720
PETE LEPAGE: Cool.

960
00:47:56,720 --> 00:48:00,910
All right, so I think that
about wraps up for today.

961
00:48:00,910 --> 00:48:05,280
We're going to be back with you
guys live next Tuesday.

962
00:48:05,280 --> 00:48:11,030
Again at 9:30 Pacific, 12:30
Eastern, 5:30 in London.

963
00:48:11,030 --> 00:48:16,060
And in fact, we're going to
be joined by another Paul.

964
00:48:16,060 --> 00:48:17,800
We'll have two Pauls.

965
00:48:17,800 --> 00:48:22,220
And it's always fun to
have more Pauls.

966
00:48:22,220 --> 00:48:25,180
And in fact, a bunch of
us are all going to

967
00:48:25,180 --> 00:48:26,420
be in the same location.

968
00:48:26,420 --> 00:48:31,330
So we'll have a fun little
opportunity to interact right

969
00:48:31,330 --> 00:48:32,500
next to each other.

970
00:48:32,500 --> 00:48:34,850
So with that, I'll say thank
you guys very much.

971
00:48:34,850 --> 00:48:37,970
Look forward to seeing you
again in the near future.

972
00:48:37,970 --> 00:48:38,370
PAUL LEWIS: Thanks.

973
00:48:38,370 --> 00:48:39,610
Guys, fill in the survey.

974
00:48:39,610 --> 00:48:43,110
Make sure you tell us what
you want to hear about.

975
00:48:43,110 --> 00:48:44,180
RENATO MANGINI: Thank
you guys.

976
00:48:44,180 --> 00:48:45,320
Thank you, bye.

977
00:48:45,320 --> 00:48:46,570
PETE LEPAGE: All righty,
buh-bye.

978
00:48:46,570 --> 00:48:59,467

