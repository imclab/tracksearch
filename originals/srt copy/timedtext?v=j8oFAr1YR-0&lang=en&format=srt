1
00:00:00,680 --> 00:00:03,800
>>Erik Kay: Hi, everyone. Welcome. I think
we will have a few more people sprinkling

2
00:00:03,800 --> 00:00:09,810
in here, but my name is Erik Kay.
>>Mihai Parparita: And hi, I'm Mihai Parparita,

3
00:00:09,810 --> 00:00:16,810
and together we work on the Chrome apps team.
>>Erik Kay: So just a quick show of hands

4
00:00:20,530 --> 00:00:24,690
so I can get a feel for what the audience
is here, how many people are as familiar with

5
00:00:24,690 --> 00:00:30,619
Chrome apps as they are today?
All right, great. That makes things easier.

6
00:00:30,619 --> 00:00:35,930
So why don't we dive in a little bit and just
sort of do a little recap about how we got

7
00:00:35,930 --> 00:00:41,820
to where we're at today?
So I/O last year we talked about a few things.

8
00:00:41,820 --> 00:00:48,460
First off, as you know, we talked about Chrome
getting to, you know, 160 million active users.

9
00:00:48,460 --> 00:00:53,420
We also launched for Chrome apps in-app payments
through Google Wallet.

10
00:00:53,420 --> 00:01:00,280
We announced that the Web store was now localized
in 42 languages.

11
00:01:00,280 --> 00:01:07,280
And we had the Angry Birds exclusive promotion
that really showed how that it was really

12
00:01:07,560 --> 00:01:13,360
possible to make great quality apps just using
HTML5.

13
00:01:13,360 --> 00:01:17,520
And we've kept busy over the last year since
then.

14
00:01:17,520 --> 00:01:22,930
The first thing, you know, to highlight, is
Native Client. We launched that this fall.

15
00:01:22,930 --> 00:01:29,520
And Native Client really brought to the table
a great set of games. You know, some showed

16
00:01:29,520 --> 00:01:32,340
that you could do high performance computing,
that you could leverage native code in your

17
00:01:32,340 --> 00:01:38,630
browser. Things like Bastion, Mini-Ninjas,
From Dust, great titles that show off the

18
00:01:38,630 --> 00:01:44,020
capabilities of the platform.
You saw Gaikai in the keynote today that really

19
00:01:44,020 --> 00:01:49,409
was another great example.
We redesigned the Web store. We have a completely

20
00:01:49,409 --> 00:01:56,409
new look and feel, and that really expanded
the usage that we saw out from our users.

21
00:01:57,000 --> 00:02:03,509
Users were much more engaged. They come back
more frequently. They install more applications.

22
00:02:03,509 --> 00:02:08,439
We've announced today that we're up to 750
million app installs. Overall things are going

23
00:02:08,439 --> 00:02:12,950
great for the Web store.
And of course, you know that Chrome is now

24
00:02:12,950 --> 00:02:19,079
at 310 million active users, almost doubling
last year's number. So the reach potential

25
00:02:19,079 --> 00:02:26,079
for apps has been going through the roof.
However, you know, that's never enough. And

26
00:02:27,469 --> 00:02:32,049
we want -- we've been worrying about the platform
itself and how to keep pushing that forward.

27
00:02:32,049 --> 00:02:37,230
And so we've been thinking about, well, what
do Web developers need? What are the capabilities

28
00:02:37,230 --> 00:02:41,029
that are missing from the platform and what
can we do to move things forward?

29
00:02:41,029 --> 00:02:45,189
So we've been listening to your feedback and
we've actually been bringing people on the

30
00:02:45,189 --> 00:02:49,709
team who have come from Web development backgrounds.
People who have experience building some these

31
00:02:49,709 --> 00:02:56,709
Web apps, like Mihai, who is our tech lead
for Google Reader, which many of you may know.

32
00:02:57,689 --> 00:03:03,199
>>Mihai Parparita: Yeah. So I was on Google
Reader for quite a few years. As you may know,

33
00:03:03,199 --> 00:03:07,389
Google Reader is an advanced HDIC application
that has pushed the edge of what browsers

34
00:03:07,389 --> 00:03:11,400
can do.
On the other hand, we feel like the platform

35
00:03:11,400 --> 00:03:16,069
could do more, could provide more flexibility,
more power for Reader and similar apps.

36
00:03:16,069 --> 00:03:21,120
Just to give you a few examples, Reader is
one of the first apps to be offline enabled,

37
00:03:21,120 --> 00:03:26,449
and that was a technical challenge and we
fought with manifests and caches like everyone

38
00:03:26,449 --> 00:03:32,430
else, but even with that it wasn't the best
user experience. Users had to enable offline

39
00:03:32,430 --> 00:03:37,999
mode. Users had to launch a browser to use
the app which sort of feels like a tautology.

40
00:03:37,999 --> 00:03:42,139
Why would I use a browser when I'm offline?
Another issue that we faced in Reader was

41
00:03:42,139 --> 00:03:47,299
dealing with third-party content where feeds
can have Flash, they can have iFrames, they

42
00:03:47,299 --> 00:03:52,329
can have arbitrary JavaScript, and we want
to have the experience to be as rich as possible,

43
00:03:52,329 --> 00:03:56,689
but we don't want a random feed to be able
to steal your Google cookies or otherwise

44
00:03:56,689 --> 00:04:00,439
take advantage of the fact that it's being
displayed in a privileged environment. We

45
00:04:00,439 --> 00:04:03,949
have to jump through a lot of hoops to sanitize
the content, have whitelists, blacklists,

46
00:04:03,949 --> 00:04:08,739
and we always lived in fear of well, what
if we missed something? What if tomorrow anyone

47
00:04:08,739 --> 00:04:12,119
can access your Reader account and your account
and all that?

48
00:04:12,119 --> 00:04:16,759
And finally, users wanted a lot more flexibility
about how they consume feeds. Do they want

49
00:04:16,759 --> 00:04:21,400
to open up the item in a new tab, in a new
window, in a pop-up, they want a mini browser

50
00:04:21,400 --> 00:04:25,840
inside of Reader? We couldn't provide any
of that. We could provide a usewindow.open

51
00:04:25,840 --> 00:04:29,300
or target equals blank, and sort of hope for
the best, hope that the pop-up blocker didn't

52
00:04:29,300 --> 00:04:36,080
get us, but that was about it.
So Reader, you know, is in some ways a well-suited

53
00:04:36,080 --> 00:04:39,460
app for the Web environment and I'm sure others
of you have run into even more issues.

54
00:04:39,460 --> 00:04:46,060
>>Erik Kay: Right. So we took feedback like
that and we really started to push forward

55
00:04:46,060 --> 00:04:51,780
in terms of what we wanted to do.
We're evolving in four main areas. The main

56
00:04:51,780 --> 00:04:57,550
one that we'll start with is we're pulling
apps outside of the browser. We'll dive into

57
00:04:57,550 --> 00:05:01,060
each of these in more detail, but just the
quick overview is pulling them out of the

58
00:05:01,060 --> 00:05:06,409
browser. We're enhancing the user interface,
giving you more control over the windows and

59
00:05:06,409 --> 00:05:10,960
we're making apps be offline by default, making
it so it's easy to build them in a way that

60
00:05:10,960 --> 00:05:16,259
they behave reasonably with poor network connectivity.
And finally, we're adding a wealth of new

61
00:05:16,259 --> 00:05:20,919
APIs to give you access to powerful system
and device capabilities.

62
00:05:20,919 --> 00:05:25,650
So let's dive in a little more deeply.
So what do we mean by breaking out of the

63
00:05:25,650 --> 00:05:30,930
browser? Well, the first thing we mean is
that you launch apps from outside the browser.

64
00:05:30,930 --> 00:05:37,930
So you'll see in a minute here that basically
you'll no longer need to launch the browser,

65
00:05:38,030 --> 00:05:42,710
go into Chrome, go to the new tab page to
find your apps. The apps will instead come

66
00:05:42,710 --> 00:05:46,819
from the operating system, the traditional
place that you're used to finding them and

67
00:05:46,819 --> 00:05:50,099
launching them.
Second, the apps will act as peers to their

68
00:05:50,099 --> 00:05:56,800
other native applications, top level windows.
They interact alt tab to switch between applications.

69
00:05:56,800 --> 00:06:00,189
Everything you would expect a native app to
behave like in a user interface perspective,

70
00:06:00,189 --> 00:06:07,050
OS integration perspective. It will no longer
be a tab in a browser.

71
00:06:07,050 --> 00:06:10,780
So let's give them a demo and show them what
this looks like, Mihai.

72
00:06:10,780 --> 00:06:16,580
>>Mihai Parparita: Sure. So this presentation
is actually in itself an app. The demo just

73
00:06:16,580 --> 00:06:23,319
breaks out of the app. And if I move the window
out of the way you can see that I have my

74
00:06:23,319 --> 00:06:30,180
top level window. It has, you know, minimal
-- no tab strip, no Omnibox, and there's a

75
00:06:30,180 --> 00:06:36,270
Chrome icon at the bottom that seems to be
getting clipped. And where I can make tabs

76
00:06:36,270 --> 00:06:41,469
and the application itself has its own icon
in the launcher.

77
00:06:41,469 --> 00:06:44,749
This is the experience on Chrome OS where
it is a full application launcher. On Windows

78
00:06:44,749 --> 00:06:49,939
there will be shortcuts on a desktop and the
appropriate behavior on other platforms.

79
00:06:49,939 --> 00:06:53,520
So let's switch back to the app and let's
talk about UI.

80
00:06:53,520 --> 00:07:00,520
>>Erik Kay: Right. So enhanced user interface.
So you already saw that it has a native level

81
00:07:01,919 --> 00:07:08,330
-- top level window frame. There's no browser
Chrome, there's no tabs, no address bar, no

82
00:07:08,330 --> 00:07:15,330
back button. And further, you have full control
over the look and feel of that frame.

83
00:07:16,860 --> 00:07:19,849
Next you have -- you can actually manage multi-window
applications.

84
00:07:19,849 --> 00:07:25,699
Actually, I did this the wrong order. But
multi-window applications. So that means you

85
00:07:25,699 --> 00:07:30,249
really will be able to cooperate between multiple
windows and have them interoperate. Today

86
00:07:30,249 --> 00:07:35,080
in tabs it's very hard to sort of have multiple
tabs that are not cooperating with each other

87
00:07:35,080 --> 00:07:40,960
and interacting with each other and it's hard
to do things like tool bars and, you know,

88
00:07:40,960 --> 00:07:46,279
panels that cooperate and interact with your
host window.

89
00:07:46,279 --> 00:07:51,729
And you know, one of the things by not having
browser Chrome is, well, what do links do?

90
00:07:51,729 --> 00:07:55,789
Well, links behave just like they would in
a normal native app. When you click on the

91
00:07:55,789 --> 00:08:00,409
link it opens the browser window. Let's show
them. There's a link to Google.com.

92
00:08:00,409 --> 00:08:04,879
>>Mihai Parparita: I'll tab back to the application.
>>Erik Kay: Right. So now you're back inside

93
00:08:04,879 --> 00:08:09,889
the application. So we've got another demo
here that shows a little bit more about what

94
00:08:09,889 --> 00:08:13,110
windowing control can do.
>>Mihai Parparita: This is a little toy demo

95
00:08:13,110 --> 00:08:17,580
showing that we have an app window. You can
see the minimal Chrome. Bizarro World one

96
00:08:17,580 --> 00:08:22,139
is actually a full custom window where the
app controls every single on it. In this case

97
00:08:22,139 --> 00:08:29,139
I just made it all black. We have full control
over behavior so I know I can have it resize

98
00:08:30,309 --> 00:08:35,599
itself and certainly drag around and follows.
You imagine this could be a little dog toolbar

99
00:08:35,599 --> 00:08:39,169
and I can control it or have the window in
a minimized state.

100
00:08:39,169 --> 00:08:46,169
>>Erik Kay: Right. So offline by default.
Before we dive into the specifics of this,

101
00:08:46,230 --> 00:08:50,160
it's probably worth explaining what do we
mean by offline.

102
00:08:50,160 --> 00:08:54,380
So A lot of people think offline and they
think, okay, I'm on an airplane, I have no

103
00:08:54,380 --> 00:09:00,610
connectivity whatsoever. That's not the only
time that offline matters for applications.

104
00:09:00,610 --> 00:09:06,910
Offline can mean I have got slow connectivity.
I've got spotty connectivity. For anyone who

105
00:09:06,910 --> 00:09:12,620
uses a cellular network, maybe in this building,
the Wi-Fi, you know, you're used to not have

106
00:09:12,620 --> 00:09:16,130
reliable connectivity.
The speed might change as you go. Maybe you're

107
00:09:16,130 --> 00:09:21,420
in a hotel with a captive proxy. If your application
is trying to talk over the network, it needs

108
00:09:21,420 --> 00:09:25,350
to be able to be robust in the face of these
different network connections.

109
00:09:25,350 --> 00:09:31,839
So how do we do this? Well, we're starting
from a base of Chrome packaged apps. Basically

110
00:09:31,839 --> 00:09:36,529
for those of you who aren't familiar with
Chrome apps in general, packaged apps are

111
00:09:36,529 --> 00:09:43,529
a zip file, a collection of HTML, JavaScript
and other resources for your Web application

112
00:09:44,029 --> 00:09:48,380
that are downloaded, installed on the user's
computer. So all the code and logic is always

113
00:09:48,380 --> 00:09:54,050
there ready to go.
We take some extra steps and -- to make sure

114
00:09:54,050 --> 00:09:59,839
that we're enforcing a strict separation between
data and user interface.

115
00:09:59,839 --> 00:10:05,180
By being packaged, by making sure that all
the code and logic are always being -- are

116
00:10:05,180 --> 00:10:09,579
always running from client side and not being
generated server side, we mean that the app

117
00:10:09,579 --> 00:10:15,199
doesn't get into a broken state and it's up
to you to download your data, store it locally,

118
00:10:15,199 --> 00:10:21,779
render your UI appropriately.
We further enforce this with -- support this

119
00:10:21,779 --> 00:10:28,779
with building APIs that are themselves resilient
to being in these poor network connectivity

120
00:10:29,430 --> 00:10:34,310
conditions.
And finally, this may seem like a small thing,

121
00:10:34,310 --> 00:10:38,730
but the fact that we've moved apps from launching
outside the browser actually addresses one

122
00:10:38,730 --> 00:10:43,420
of the key usability issues with offline.
Today some of you may have actually gone through

123
00:10:43,420 --> 00:10:49,120
the effort to make your hosted Web app work
offline and found that even after you went

124
00:10:49,120 --> 00:10:53,709
through all the effort to work with AppCache
and make that do what you want it had to do

125
00:10:53,709 --> 00:10:59,550
that users are still not finding that functionality
and they are still frustrated with using it.

126
00:10:59,550 --> 00:11:05,399
For the reasons that Mihai was pointing out
before, they had to know first to launch the

127
00:11:05,399 --> 00:11:11,180
browser, then they had to somehow navigate
to your app. Well, if they know how to bookmark

128
00:11:11,180 --> 00:11:15,769
it, that's about 10% of users, then they can
get back to it. What about for the rest of

129
00:11:15,769 --> 00:11:21,040
the users?
Well, for them they have to either know what

130
00:11:21,040 --> 00:11:24,759
the URL is ahead of time or for many of them
actually what they do is they go to their

131
00:11:24,759 --> 00:11:28,740
favorite search engine and they try to navigate
to it. And guess what? When you're offline

132
00:11:28,740 --> 00:11:35,639
search engines don't really work.
So people in a poor connected world are continuously

133
00:11:35,639 --> 00:11:41,290
reinforced that the browser doesn't work because
all their tabs are broken. Even when they

134
00:11:41,290 --> 00:11:44,899
have an app that they know works, they don't
know how to get to it. So pulling app outside

135
00:11:44,899 --> 00:11:50,320
the browser and making it a first class peer
to their other native applications gets past

136
00:11:50,320 --> 00:11:53,970
all that anxiety and all the logistics of
getting there.

137
00:11:53,970 --> 00:12:00,480
>>Mihai Parparita: So we're gonna demo this
very quickly and we'll get the presentation

138
00:12:00,480 --> 00:12:05,579
out of the way. I'm going to yank the ethernet
cable out of my Chromebook.

139
00:12:05,579 --> 00:12:09,940
As you can see there's a little icon in the
corner that says I'm offline. I can refresh

140
00:12:09,940 --> 00:12:14,459
Google and show that it doesn't seem to work.
And we're going to install an app.

141
00:12:14,459 --> 00:12:18,779
In this case we're going to sort of do a kind
of stress test where we are offline. We're

142
00:12:18,779 --> 00:12:23,550
going to install the app right now in developer
mode, but it should process the same. And

143
00:12:23,550 --> 00:12:28,029
this app has never had a chance to run before.
It's never had a chance to talk to its server,

144
00:12:28,029 --> 00:12:32,220
download data, but the experience should still
be acceptable.

145
00:12:32,220 --> 00:12:37,389
The specific app we're doing is a diff tool
that lets you compare files. So when it launched

146
00:12:37,389 --> 00:12:42,720
it has an offline indicator that says you're
currently offline, so all it can do is it

147
00:12:42,720 --> 00:12:49,720
can diff local files, but dash will keep working.
So let me pick a couple of files. And as you

148
00:12:58,110 --> 00:13:00,190
can see -- I lost focus.
As you can see, the application still works.

149
00:13:00,190 --> 00:13:03,959
If I manage to find the ethernet cable and
plug it back in --

150
00:13:03,959 --> 00:13:10,959
>>Erik Kay: While Mihai is doing that, I'll
point out that we're doing this demo on Chromebook

151
00:13:12,389 --> 00:13:19,389
and we're doing it with the latest Canary
build of Chrome OS. So we're taunting the

152
00:13:21,699 --> 00:13:24,959
demo gods --
>>Mihai Parparita: Fine in this case. We are

153
00:13:24,959 --> 00:13:30,970
back on line. The app has noticed that we
are online. The choose URL feature has appeared,

154
00:13:30,970 --> 00:13:37,970
so now we can diff not just local files, but
ones that live on a server. So I think I have

155
00:13:41,250 --> 00:13:48,250
some cuts. And as you can see --
>>Erik Kay: This is really a tortured case

156
00:13:52,319 --> 00:13:58,300
for an application. It launched for the first
time never having seen the network. So it

157
00:13:58,300 --> 00:14:04,199
was able to run robustly. Without quitting
and relaunching it, it recovered. So it was

158
00:14:04,199 --> 00:14:09,230
able to see, you know, the fact that the network
was back. You didn't have to do anything,

159
00:14:09,230 --> 00:14:13,180
you didn't have to refresh the page, you didn't
have to take that extra step. The app was

160
00:14:13,180 --> 00:14:15,199
just able to proceed.
>>Mihai Parparita: Now that the projector

161
00:14:15,199 --> 00:14:19,899
has been fixed you guys can see that the app
launcher at the bottom is what I was referring

162
00:14:19,899 --> 00:14:26,899
where all these apps can be launched offline.
>>Erik Kay: Right. All right. So new APIs.

163
00:14:30,230 --> 00:14:34,490
Now, this is one of the more -- the area that
I think most of you are going to dive into

164
00:14:34,490 --> 00:14:40,360
first when you start playing with Chrome packaged
apps. And it's all the new APIs. We think

165
00:14:40,360 --> 00:14:46,440
of them in three groups. The first area are
what we call system APIs. The system APIs

166
00:14:46,440 --> 00:14:50,139
interact with the operating system at a low
level or with hardware on your device, so

167
00:14:50,139 --> 00:14:54,839
maybe USB or bluetooth, or as you saw in this
morning's keynote, raw UDP or TCP.

168
00:14:54,839 --> 00:15:01,839
These will enable a wide variety of apps that
you've never been able to build with Web technology

169
00:15:04,000 --> 00:15:06,500
before.
Next we've got shared data APIs, and shared

170
00:15:06,500 --> 00:15:12,250
data APIs are -- provide ways of interoperating
with other applications on your system. Things

171
00:15:12,250 --> 00:15:17,180
like photos or contacts, calendar entries,
things that you want to be able to access

172
00:15:17,180 --> 00:15:22,579
safely from multiple applications.
And finally then a group of service APIs.

173
00:15:22,579 --> 00:15:29,189
The service APIs are your -- the Web services
that you all know and love, but built into

174
00:15:29,189 --> 00:15:34,290
Chrome, into the Chrome runtime in such a
way that it's going to be resilient to poor

175
00:15:34,290 --> 00:15:41,290
network conditions. So things like analytics,
in-app payments, things like that, will be

176
00:15:42,269 --> 00:15:45,620
coming to the APIs.
Why don't we give a demo of one of these APIs

177
00:15:45,620 --> 00:15:48,759
in action?
>>Mihai Parparita: Sure. So this demo is going

178
00:15:48,759 --> 00:15:55,759
to display me because I'm going to hold a
physical device here. This is a little science

179
00:15:56,180 --> 00:16:00,990
fair kind of project that one of our engineers
Mike made. It has an arduino board on the

180
00:16:00,990 --> 00:16:06,350
back. It has -- it talks to the Chromebook
via a serial port, a serial-over-bluetooth

181
00:16:06,350 --> 00:16:12,060
a serial-over-USB in this case, and it has
a little stepper motor here that is controlled

182
00:16:12,060 --> 00:16:17,800
by the arduino. And the slider at the bottom
of the screen controls the motor. It just

183
00:16:17,800 --> 00:16:24,800
sends a one-byte command saying "please rotate
to my current position," and that goes over

184
00:16:24,920 --> 00:16:30,879
the serial wire, the arduino interprets it.
The key thing here is that the Chromebook

185
00:16:30,879 --> 00:16:35,790
knows nothing about this particular device
or about arduino in general, it just knows

186
00:16:35,790 --> 00:16:39,329
that there's a serial port and that in turn
is exposed to the application. So all of the

187
00:16:39,329 --> 00:16:44,050
logic about the specific device is in the
application that can be installed by any user.

188
00:16:44,050 --> 00:16:48,100
>>Erik Kay: The other key bit is that all
this code is just JavaScript and HTML, right?

189
00:16:48,100 --> 00:16:55,100
It is -- no special, no device drivers, no,
like, native code that needed to be there.

190
00:16:55,560 --> 00:17:00,730
That said, we are going to be providing bindings
in addition to JavaScript, also to Dart and

191
00:17:00,730 --> 00:17:03,399
to Native Client, so you will be able to access
these APIs from whatever programming environment

192
00:17:03,399 --> 00:17:07,770
that you'd like.
Speaking of the programming model, why don't

193
00:17:07,770 --> 00:17:13,060
we dive in and take a look at some code.
Before we do that, though, just a refresher

194
00:17:13,060 --> 00:17:20,060
of what is behind the core bit of the programming
model. So as I said, these are packaged apps,

195
00:17:20,080 --> 00:17:22,270
and that means they're a directory full of
resources.

196
00:17:22,270 --> 00:17:29,270
They have a background page that acts as a
hub, so what that means is this is what starts

197
00:17:33,010 --> 00:17:39,660
up. When you launch the app, a background
page launches and it triggers an event, and

198
00:17:39,660 --> 00:17:42,750
that's what -- then it's up to you to decide
what to do.

199
00:17:42,750 --> 00:17:48,230
In previous incarnations of Chrome apps we
had a launch URL, basically a page that would

200
00:17:48,230 --> 00:17:53,600
open up in a tab. Now you've got full control
over how your app behaves, how many windows

201
00:17:53,600 --> 00:17:59,730
it opens up, if it even opens up a window
at all, or does something in the background.

202
00:17:59,730 --> 00:18:04,760
And that last step is sort of an important
use case that we're really interested in is

203
00:18:04,760 --> 00:18:10,130
being able to handle system level events and
have your app come and go based on signals

204
00:18:10,130 --> 00:18:14,320
from the runtime.
So let's take a look at some of the code that

205
00:18:14,320 --> 00:18:18,010
shows this in action.
>>Mihai Parparita: Sure. So I'm going to call

206
00:18:18,010 --> 00:18:24,590
up a Hello World demo. And incidentally, to
actually code the app I'm going to use an

207
00:18:24,590 --> 00:18:30,460
app. This is a text editor that's been whipped
up by one of our other engineers.

208
00:18:30,460 --> 00:18:34,910
So like Erik said, first we start with the
manifest.

209
00:18:34,910 --> 00:18:39,840
So if you went to the extension talk yesterday,
you know there's a new manifest called Manifest

210
00:18:39,840 --> 00:18:44,870
Version 2.
>>Erik Kay: Right. And Manifest 2 basically

211
00:18:44,870 --> 00:18:49,880
is the trigger that we use to enforce some
of the new policies with apps and extensions,

212
00:18:49,880 --> 00:18:55,110
and fork turns on CSP by default which we'll
talk about in a little bit, but it also is

213
00:18:55,110 --> 00:19:02,110
one of the keys for showing off the new app
behavior. It also has a -- the basics that

214
00:19:03,220 --> 00:19:10,220
you're used to, a name, a version, and another
field that is -- you've seen before, the app

215
00:19:13,080 --> 00:19:17,530
field, but rather than a launch URL like we
said before, instead it has a designation

216
00:19:17,530 --> 00:19:23,150
of the background page, as I said, the main,
the hub of the application, it uses the same

217
00:19:23,150 --> 00:19:29,000
event page technology that we've just announced
with Chrome extensions which means that it

218
00:19:29,000 --> 00:19:36,000
basically can come and go on demand, as the
system needs it. So we specified the app.

219
00:19:36,040 --> 00:19:41,500
The other thing actually, Mihai, you might
want to add permissions to it. So permissions

220
00:19:41,500 --> 00:19:47,900
are the way of specifying in the manifest
what capabilities your app needs up front.

221
00:19:47,900 --> 00:19:54,030
This allows us to, you know, control, you
know, it's a security feature that basically

222
00:19:54,030 --> 00:19:59,860
allows us to limit the damage that an application
can do if it has a bug in it. So then next,

223
00:19:59,860 --> 00:20:05,350
we're diving into the actual background page
itself. This is main. As I mentioned before,

224
00:20:05,350 --> 00:20:11,590
what it does is it loads, and then it fires
off a launch event. So the first thing Mihai

225
00:20:11,590 --> 00:20:17,140
does in his background page is set up an event
listener in the background page, and in that,

226
00:20:17,140 --> 00:20:22,150
first thing he does is to create a window,
using our new window app API. And basically

227
00:20:22,150 --> 00:20:29,150
this is the Hello World, launch the app, get
a launch event, create a window, show just

228
00:20:29,550 --> 00:20:36,550
an obvious snippet of HTML, so here is our
Hello World. The next step is to load into

229
00:20:37,300 --> 00:20:43,580
Chrome, now again, since this is just a packaged
app directory, it's built in the same technology

230
00:20:43,580 --> 00:20:47,190
as Chrome extensions and other Chrome Apps
have been built in the past, so just going

231
00:20:47,190 --> 00:20:53,880
to developer mode, load and unpack extension,
and then we can just launch the app from the

232
00:20:53,880 --> 00:20:57,960
app launcher directly, there you go, and we
have our Hello World, so really trivial bit

233
00:20:57,960 --> 00:21:04,960
of code, as you can imagine you can do whatever
you want from that launch event and do more

234
00:21:05,150 --> 00:21:09,830
advanced things, so before we do the more
advanced things, let's talk a little bit more

235
00:21:09,830 --> 00:21:14,930
about some of the other features of the programming
model. So one of the things that's interesting

236
00:21:14,930 --> 00:21:21,310
is that all of the windows are what we call
single page applications. There's no navigation.

237
00:21:21,310 --> 00:21:26,340
So we think this leads to an overall better
experience and simplifies a few things, again,

238
00:21:26,340 --> 00:21:30,160
the fact that we don't have a back button,
that we don't have an address bar, we don't

239
00:21:30,160 --> 00:21:34,000
want to have people building apps that wind
up getting users trapped and stuck, we don't

240
00:21:34,000 --> 00:21:41,000
-- we want to get rid of that flash of white
repaint. And we've also actually removed a

241
00:21:41,170 --> 00:21:46,600
few Web features, things that are -- that
we think lead overall to bad Web performance

242
00:21:46,600 --> 00:21:50,190
or have security problems with them. It turns
out that on the Web at large, it's very hard

243
00:21:50,190 --> 00:21:56,290
to deprecate features. Very hard to (inaudible)
We have strict compatibility needs. As people

244
00:21:56,290 --> 00:22:00,510
who are going to be building these Chrome
Apps are going to be starting from scratch,

245
00:22:00,510 --> 00:22:04,890
we have the opportunity to take a few and
just eliminate them from the beginning, and

246
00:22:04,890 --> 00:22:09,540
they will be things like synchronous requests
that will block the UI thread or again things

247
00:22:09,540 --> 00:22:14,910
that might call security problems. Speaking
of security, let's talk a little bit about

248
00:22:14,910 --> 00:22:20,600
the security model. So to start with, you
get all the things that you're used to with

249
00:22:20,600 --> 00:22:24,990
Chrome, you get process isolation, Chrome
is famous for being a multi-process browser,

250
00:22:24,990 --> 00:22:31,990
and apps are no different. Each app runs in
its own process, completely separate from

251
00:22:32,270 --> 00:22:39,270
each other. We also Sandbox each app, so each
app has its own storage area, its own Sandbox

252
00:22:43,120 --> 00:22:49,040
execution runtime Sandbox which makes it so
that even if it had a bug, the limit, the

253
00:22:49,040 --> 00:22:56,040
damage to what it could do is tightly controlled
by the runtime. And part of that is the permissions

254
00:22:57,170 --> 00:23:01,440
model I was talking about before. The app
has to declare up front what capabilities

255
00:23:01,440 --> 00:23:06,650
it wants to use, so in this case we have our
little app that used the serial port API and

256
00:23:06,650 --> 00:23:11,440
the Web cam, so if that happened to have a
bug in it, that could be exploited by an attacker

257
00:23:11,440 --> 00:23:15,270
somehow, the worst that could happen is it
could do exactly what that app could do and

258
00:23:15,270 --> 00:23:19,390
talk to the serial part, the Web cam. This
is very different from what you're used to

259
00:23:19,390 --> 00:23:24,720
with native executables, where once you have
a security bug in the native executable, you

260
00:23:24,720 --> 00:23:31,720
have access to the whole machine, everything
the user could do, attacker could do. So I

261
00:23:32,300 --> 00:23:38,030
mentioned content security policy. Now, what
content security policy is is a way to protect

262
00:23:38,030 --> 00:23:42,100
your app against cross-side scripting bugs.
For those of you who aren't familiar with

263
00:23:42,100 --> 00:23:48,340
cross-side scripting, it's basically a way
that an attacker can somehow get code injected

264
00:23:48,340 --> 00:23:53,040
into your page and run in the context of your
page. Now, in a Web page, this is bad enough,

265
00:23:53,040 --> 00:23:56,540
because it means like -- in something like
Gmail, it could -- you know, an attacker could

266
00:23:56,540 --> 00:24:00,740
maybe read all of your e-mail and post it
to another site. In the context of an app

267
00:24:00,740 --> 00:24:06,780
it could do even more potentially with the
new more powerful APIs we're adding, like,

268
00:24:06,780 --> 00:24:12,340
you know, I don't know access your Web cam,
leave persistent files somewhere on your hard

269
00:24:12,340 --> 00:24:17,370
drive, talk to some hardware you didn't want
them to talk to. So we really try to lock

270
00:24:17,370 --> 00:24:22,780
this down content security policy makes it
so your apps will be resistant to these sorts

271
00:24:22,780 --> 00:24:27,020
of attacks. So let's show that in action.
>>Mihai Parparita: Sure, so I'm going to take

272
00:24:27,020 --> 00:24:31,450
my Hello World demo from earlier and make
it actually do something besides play Hello

273
00:24:31,450 --> 00:24:38,450
World. I'm going to have it -- have a little
form that asks users for their name and then

274
00:24:39,250 --> 00:24:46,250
displays it in the output, so that is the
markup side, and then on the scripting side,

275
00:24:47,080 --> 00:24:54,080
I have sort of the obvious implementation
I just described where I -- where I get the

276
00:24:58,950 --> 00:25:02,050
submit event and display the name and the
output.

277
00:25:02,050 --> 00:25:06,930
>>Erik Kay: For those of you who are, you
know, the more observant in the crowd, you'll

278
00:25:06,930 --> 00:25:12,230
know that inner HTML is a pretty dangerous
feature of the web to use. Basically is taking

279
00:25:12,230 --> 00:25:17,760
-- he's taking unescaped content and just
injecting it as code straight into his page.

280
00:25:17,760 --> 00:25:22,700
>>Mihai Parparita: Let's load that same page
because it doesn't use any app APIs just in

281
00:25:22,700 --> 00:25:29,700
a regular Chrome tab the way a Web app would
run in. So, sure, I can type in my name, but

282
00:25:30,780 --> 00:25:37,610
because of inner HTML, as Erik mentioned,
markup gets interpreted, H1s aren't so bad,

283
00:25:37,610 --> 00:25:43,380
well, what if I had an unclick handler here
that --

284
00:25:43,380 --> 00:25:47,120
>>Erik Kay: So you can see that this is script.
He's actually typing in JavaScript, now it's

285
00:25:47,120 --> 00:25:51,470
going to get injected into his page. Now,
obviously this is a very simplified form of

286
00:25:51,470 --> 00:25:56,530
an access because there's a form field, user
had to type it in. Usually they might come

287
00:25:56,530 --> 00:26:03,530
in as a parameter in URL somehow got data
stored into your system, but you can see that

288
00:26:03,850 --> 00:26:07,330
if they could run code in the context of your
app, they would be able to do the dangerous

289
00:26:07,330 --> 00:26:11,220
things your app could do. Let's try that same
code in an app.

290
00:26:11,220 --> 00:26:17,410
>>Mihai Parparita: So app still works. HTML
still gets interpreted because, you know,

291
00:26:17,410 --> 00:26:24,410
Chrome does what it's asked and gives us inner
HTML, but if I type in that same script snippet,

292
00:26:26,100 --> 00:26:33,100
right, and try to run it, nothing happens.
If I pull up the developer tools, these are

293
00:26:37,140 --> 00:26:44,140
the same developer tools that you're used
to, you can see a content script clause here

294
00:26:44,210 --> 00:26:47,250
that appears.
>>Erik Kay: Right. This is basically showing

295
00:26:47,250 --> 00:26:52,330
you that we are locking down the app, so if
you have a bug that might enable somebody

296
00:26:52,330 --> 00:26:57,480
to inject inline script into your page, it
can't -- it can't exploit anything in your

297
00:26:57,480 --> 00:27:03,240
app, it's just stopped right up front. As
Mihai pointed out, this is all tightly integrated

298
00:27:03,240 --> 00:27:07,540
again with all the developer tools that you're
used to, you know, so you can leverage all

299
00:27:07,540 --> 00:27:12,960
the power that's there. They've been evolving
really rapidly, and so there's a lot of great

300
00:27:12,960 --> 00:27:18,070
features if you haven't been checking them
out.

301
00:27:18,070 --> 00:27:25,070
So let's talk about a few other bits of a
security model. We take a further step and

302
00:27:27,370 --> 00:27:32,050
isolate storage from one app to the other.
So what this means is that what gets written

303
00:27:32,050 --> 00:27:36,830
in one app, what happens in one app, stays
in that app, it can't affect what happens

304
00:27:36,830 --> 00:27:43,020
in the other. Cookies in your browser don't
affect cookies in your app and vice versa.

305
00:27:43,020 --> 00:27:47,690
And this is true not only for the origin,
but if your app is doing -- interacting with

306
00:27:47,690 --> 00:27:53,490
Web content from other origins, that too is
isolated, so if you're logged in to Twitter,

307
00:27:53,490 --> 00:27:58,510
you know, in your browser with one account,
and your app interacts with Twitter, it isn't

308
00:27:58,510 --> 00:28:03,220
affected by that. It would have to log in
separately.

309
00:28:03,220 --> 00:28:07,820
And I mentioned explicit shared data APIs
before when I was talking about new APIs.

310
00:28:07,820 --> 00:28:12,410
This is also a security feature, because it
means that we can give apps access to more

311
00:28:12,410 --> 00:28:17,320
powerful functionality without exposing your
whole hard drive to them, and without giving

312
00:28:17,320 --> 00:28:22,220
them the ability to write arbitrary files
into arbitrary locations, so they can't leave

313
00:28:22,220 --> 00:28:27,540
an executable on your hard drive and they
can't, you know -- they can't just read your

314
00:28:27,540 --> 00:28:32,430
Quicken file, for example, but they can read
your photos perhaps, if they've got the photos

315
00:28:32,430 --> 00:28:39,430
permission. And one further distinction that
we've made for apps is that we no longer have

316
00:28:43,530 --> 00:28:49,740
access to extension APIs within packaged apps.
So we made an explicit split to say that an

317
00:28:49,740 --> 00:28:53,950
app is outside the browser, and that means
that interacting with the browser through

318
00:28:53,950 --> 00:29:00,090
these extension APIs no longer makes sense.
It's also true vice versa, extension APIs

319
00:29:00,090 --> 00:29:07,090
can't affect apps. These apps are truly isolated
from the browser and operate on their own.

320
00:29:07,760 --> 00:29:12,900
There's one last security feature that we
added here, which actually has some very useful

321
00:29:12,900 --> 00:29:16,760
functionality as well, so you've heard us
just talk about how we lock down this, lock

322
00:29:16,760 --> 00:29:20,280
down that, you can't get this web content
or that content. Well, sometimes it's actually

323
00:29:20,280 --> 00:29:25,190
useful to get a host of Web content in your
app. Well, in a similar way that you're used

324
00:29:25,190 --> 00:29:32,190
to with native desktop and mobile applications,
you can embed essentially a view, a full browser

325
00:29:32,450 --> 00:29:37,570
inside of your app using something we call
the browser tag, so this is different from

326
00:29:37,570 --> 00:29:44,570
an iFrame in a couple of different ways. The
first is that it's a top level frame. It doesn't

327
00:29:45,310 --> 00:29:50,880
think of itself as an iFrame, it thinks of
itself as if it were in a tab or in a window

328
00:29:50,880 --> 00:29:56,810
by itself. Second is that it runs out of process.
So if there's a bug, if there's some issue

329
00:29:56,810 --> 00:30:02,720
where by going to remote website, somebody
found a security hole in Chrome, it would

330
00:30:02,720 --> 00:30:09,120
only affect the browser tag instance. It wouldn't
be able to affect your app. And finally, once

331
00:30:09,120 --> 00:30:13,000
again storage is isolated, so again, what
happens in this browser tag doesn't affect

332
00:30:13,000 --> 00:30:20,000
what's in your app and vice versa. So we've
got a little more time, so why don't we dive

333
00:30:22,570 --> 00:30:26,550
back into the -- that serial port demo and
show what it's like to actually use some of

334
00:30:26,550 --> 00:30:29,550
the more powerful APIs and do a little bit
more stuff with it.

335
00:30:29,550 --> 00:30:35,720
>>Mihai Parparita: Okay. So I'm going to close
some more windows and load up a standalone

336
00:30:35,720 --> 00:30:42,720
version of that serial port demo that we had
earlier, and let's launch it. So same sort

337
00:30:45,730 --> 00:30:52,350
of setup. Camera using the Web RTC API to
show me, the same slider. This one is a bit

338
00:30:52,350 --> 00:30:57,660
fancier. It has a serial port ticker listing
all serial ports that are local. So the goal

339
00:30:57,660 --> 00:31:01,910
is we have a Chrome logo, physical Chrome
logo here, and we have the on-screen logo

340
00:31:01,910 --> 00:31:08,610
here, this board actually also has a potentiometer,
this little knob I want to turn, and I want

341
00:31:08,610 --> 00:31:13,990
to make it so that turning this knob turns
the logo on the screen, so let's pull up the

342
00:31:13,990 --> 00:31:20,990
code for this. So it's in --
>>Erik Kay: Right, so the existing code was

343
00:31:22,490 --> 00:31:26,950
basically writing to the board, sending it
data. Now this one, we're going to change

344
00:31:26,950 --> 00:31:31,140
it to add read function, read back.
>>Mihai Parparita: So walking through the

345
00:31:31,140 --> 00:31:38,100
existing code briefly, we have the Web RTC
side of things where we get access to the

346
00:31:38,100 --> 00:31:44,120
user's camera, and display the result. Since
the app has the video permission, this did

347
00:31:44,120 --> 00:31:51,090
not trigger info bar, the access happened
immediately. We have the slider, the HTML5

348
00:31:51,090 --> 00:31:56,770
range element here, we set up an on-change
listener for it to set the position, and we

349
00:31:56,770 --> 00:32:01,900
built a serial port picker by listing all
of the ports that are available. Once we pick

350
00:32:01,900 --> 00:32:08,900
a port, we have the open API call to actually
start opening up a connection to it. And once

351
00:32:09,560 --> 00:32:14,790
we open, we can start setting the position.
We have the connection ID that we get from

352
00:32:14,790 --> 00:32:21,500
the API callback. This is -- all these functions
are async and we can start setting the position.

353
00:32:21,500 --> 00:32:26,670
To actually set the position, we just send
a single byte as -- actually as an ASCII character

354
00:32:26,670 --> 00:32:32,130
from 0 to 9. We're using the buffers so that
the serial port API can work with any kind

355
00:32:32,130 --> 00:32:37,640
of binary data, too. We're using ASCII here
for convenience. So as Erik mentioned, the

356
00:32:37,640 --> 00:32:43,570
next up is to actually start reading back
from the board. So given that there's a write

357
00:32:43,570 --> 00:32:49,040
API call here, because you can imagine there's
also a read API call we can use --

358
00:32:49,040 --> 00:32:54,690
>>Erik Kay: Right. As Mihai mentioned all
of the Chrome App APIs are asynchronous, so

359
00:32:54,690 --> 00:33:01,290
you'll notice they all take a callback, and
so he has in his function there, and on read

360
00:33:01,290 --> 00:33:05,410
function for the callback which he's pasted
in to save some typing time.

361
00:33:05,410 --> 00:33:10,270
>>Mihai Parparita: Yep. So using array buffers
we read back the data from the serial port,

362
00:33:10,270 --> 00:33:17,060
we do the opposite conversion from ASCII to
a degree value, and then we use CSS 3 transforms

363
00:33:17,060 --> 00:33:22,250
to set the position of the logo and finally
we want to read the next byte, so this isn't

364
00:33:22,250 --> 00:33:26,820
a blocking call, it's just whenever the next
byte happens to appear, the call back will

365
00:33:26,820 --> 00:33:31,790
be invoked again. Let's save this. We're actually
going to save it in the same place.

366
00:33:31,790 --> 00:33:36,890
>>Erik Kay: And that -- by the way, that programming
model did show some of the flexibility and

367
00:33:36,890 --> 00:33:41,910
power of having an asynchronous API, but we're
able to sort of cue these things up and have

368
00:33:41,910 --> 00:33:48,910
multiple async things going on at once, and
the callbacks happen, you know, when they

369
00:33:51,370 --> 00:33:51,620
happen. We don't have to worry about inner
leaving them.

370
00:33:51,440 --> 00:33:54,020
>>Mihai Parparita: The App, it's the same
sort of edit reload cycle that you might be

371
00:33:54,020 --> 00:33:59,720
used to from web development, and so let's
make sure it still works, that we can still

372
00:33:59,720 --> 00:34:05,670
control it, so that part still works, and
now if we have the knob up here, and we turn

373
00:34:05,670 --> 00:34:12,670
it, the Chrome logo appears to spin, so we're
reading data.

374
00:34:13,239 --> 00:34:18,819
[ Applause ]
>>Erik Kay: Obviously, this is a really simple

375
00:34:18,819 --> 00:34:23,589
demo and not all of you are going to be sitting
in your garage hacking on arduino boards,

376
00:34:23,589 --> 00:34:29,919
but we're hoping that this sort of conveys
the kind of thing you can do. Web technology,

377
00:34:29,919 --> 00:34:32,859
and interact with hardware and system level
data.

378
00:34:32,859 --> 00:34:36,289
>>Mihai Parparita: For example, people on
our team have built our C clients, you know,

379
00:34:36,289 --> 00:34:41,289
telling their clients to use the raw socket
API, someone else built an interface to a

380
00:34:41,289 --> 00:34:45,289
heart rate monitor that uses Bluetooth, and
all of this networks on a Chrome build, for

381
00:34:45,289 --> 00:34:47,879
example, that couldn't talk to these devices
before.

382
00:34:47,879 --> 00:34:54,879
>>Erik Kay: So let's sort of wrap up about
and recap a little bit of what we've gone

383
00:34:55,259 --> 00:35:02,259
over. So we're evolving apps to break out
of the browser, to have enhanced user interface,

384
00:35:02,750 --> 00:35:09,329
more control over the windowing. To be offline
by default, to have access to new, more powerful

385
00:35:09,329 --> 00:35:16,329
APIs, now, we're also -- this is also available
for you to play with right now, basically

386
00:35:17,319 --> 00:35:21,410
as we said, this is canary build of Chrome.
For those of you who don't know, the Canary

387
00:35:21,410 --> 00:35:28,029
is our nightly update schedule. It's available
for windows and Mac. If you're a Linux or

388
00:35:28,029 --> 00:35:31,880
Chrome OS user, if you're brave enough, you
can do your own build, or you can wait for

389
00:35:31,880 --> 00:35:38,880
your next dev channel to come out and you
can start playing with it then. We've also

390
00:35:39,759 --> 00:35:45,250
been asked in the past about why are these
apps, you know, specific to Chrome?

391
00:35:45,250 --> 00:35:50,240
Why are they tied to Chrome?
And part of the reason is, because, well,

392
00:35:50,240 --> 00:35:55,150
there hasn't been a lot of appetite in the
browser community for doing things, doing

393
00:35:55,150 --> 00:36:01,259
more dangerous capabilities, but in the last
six months or so, we've been, you know, talking

394
00:36:01,259 --> 00:36:06,359
to more and more folks from the community
and discovered that momentum had been building,

395
00:36:06,359 --> 00:36:11,230
that people were all starting to think along
these same lines; that building -- using Web

396
00:36:11,230 --> 00:36:16,660
technologies to build more powerful applications,
its time has come, and so we're working with

397
00:36:16,660 --> 00:36:23,660
the W3C and with other browser vendors including
Mozilla, and Adobe, and Intel and Samsung,

398
00:36:24,039 --> 00:36:28,859
people in the Web community to form the new
working group to help standardize this going

399
00:36:28,859 --> 00:36:33,809
forward, so we're excited to help take the
technology that we've been building for Chrome

400
00:36:33,809 --> 00:36:40,589
and try to contribute it and make it a standard
across multiple operating systems and platforms.

401
00:36:40,589 --> 00:36:46,640
And finally you heard Sundar mention this
in the keynote, but our intent is to make

402
00:36:46,640 --> 00:36:51,619
these apps work on mobile as well. Everywhere
the Chrome runtime exists, we think that we

403
00:36:51,619 --> 00:36:58,619
can build -- bring apps -- bring this technology
along with it. Now, we only showed you this

404
00:36:59,240 --> 00:37:04,660
very simple serial demo, and -- but there's
a lot more that you can check out. Some of

405
00:37:04,660 --> 00:37:10,880
it right here at I/O. If you go over to the
Chrome Sandbox area for example, you can see

406
00:37:10,880 --> 00:37:16,740
Sencha has a neat media player demo that actually
is implementing UP&P to stream from a local

407
00:37:16,740 --> 00:37:23,740
media server, which is kind of cool. Kendo
has a photo booth app that uses a lot of the

408
00:37:23,750 --> 00:37:30,750
Web RTC stuff. There's a text editor that
was done by the annular JST at Google, and

409
00:37:33,240 --> 00:37:37,039
there's a demo that we'll call "Johnny" that
is a --

410
00:37:37,039 --> 00:37:41,140
>>Mihai Parparita: Johnny HTML5.
>>Erik Kay: Oh, Johnny HTML5. Sorry. Johnny

411
00:37:41,140 --> 00:37:48,140
HTML5 which is a Lego mindstorms robot which
is being controlled over Bluetooth from your

412
00:37:48,519 --> 00:37:53,589
desktop computer. Now, you can find all of
these samples and a bunch more, actually,

413
00:37:53,589 --> 00:38:00,589
in our new GitHub repo at GitHub.com, Google
Chrome, there's an apps demo section there,

414
00:38:01,259 --> 00:38:08,259
so I encourage you to go fork and play and
contribute.

415
00:38:09,460 --> 00:38:16,460
And -- and finally, the way to learn more,
you can read our docs up at developer.chrome.com/apps.

416
00:38:17,640 --> 00:38:22,569
Now just a quick warning. Since all of this
new on the Canary channel by default, our

417
00:38:22,569 --> 00:38:26,869
apps documentation points you at our current
stable channel stuff. But there will be a

418
00:38:26,869 --> 00:38:33,019
helpful link there that shows you how to get
to the latest stuff. You can also join our

419
00:38:33,019 --> 00:38:38,299
mailing list, chromium-apps@chromium.org,
and if you want to talk to people in person,

420
00:38:38,299 --> 00:38:44,579
people on the engineering team, we also hang
out on RC at Chromium apps@freenotes. So feel

421
00:38:44,579 --> 00:38:48,730
free to join in and ask away, we are looking
forward to hearing from you.

422
00:38:48,730 --> 00:38:52,970
We're really excited to see the kind of things
that you guys can build with what we're doing,

423
00:38:52,970 --> 00:38:58,299
but it is early on. Expect some bugs. Expect
some growing pains. We would love feedback.

424
00:38:58,299 --> 00:39:05,299
So now we will take your questions.
[ Applause ]

425
00:39:05,910 --> 00:39:11,500
>>Erik Kay: So if you have any questions,
please come to the mic. By the way, when if

426
00:39:11,500 --> 00:39:15,980
-- if we end this and you still have questions
that you would rather not ask at the mic,

427
00:39:15,980 --> 00:39:20,089
we will stick around afterwards for a few
minutes, but also you can find us over at

428
00:39:20,089 --> 00:39:24,349
the Chrome booth. We will be having office
hours, so feel free to, you know, not only

429
00:39:24,349 --> 00:39:31,349
check out the demos, but come by and ask us
questions.

430
00:39:32,200 --> 00:39:36,640
All right?
>>> Can -- can an app launch another app?

431
00:39:36,640 --> 00:39:43,160
>>Erik Kay: Not right now. That's a good question.
>>Mihai Parparita: Can you describe more specifically

432
00:39:43,160 --> 00:39:46,930
what you would like to do here? Is it a matter
of like I would like to send an email so I

433
00:39:46,930 --> 00:39:53,930
could launch the Gmail app sort of thing?
>>> Well, sort of like the launcher, but without

434
00:39:56,069 --> 00:40:01,099
having to bother the user with them going
to find the app, saying this is the app that

435
00:40:01,099 --> 00:40:05,349
you are looking for to complete this request.
>>Erik Kay: So you can do some of it with

436
00:40:05,349 --> 00:40:10,119
Web intense but not exactly the way that you're
talking about for making a full launch replacement.

437
00:40:10,119 --> 00:40:14,859
But that's the kind of thing actually we would
probably more likely expose through extensions

438
00:40:14,859 --> 00:40:19,369
in some way, but remember that each operating
system is going to have it's own sort of natural

439
00:40:19,369 --> 00:40:25,160
way of launching apps. So even if we did provide
it, that might be specific to Chrome OS or

440
00:40:25,160 --> 00:40:28,150
something like that.
>>Mihai Parparita: Go ahead.

441
00:40:28,150 --> 00:40:35,150
>>> Yeah. You mentioned early on in the presentation
about offline usage and -- and the APIs into

442
00:40:35,499 --> 00:40:40,220
the system that would degrade gracefully.
Offline. Can you give some examples of that?

443
00:40:40,220 --> 00:40:45,059
>>Erik Kay: Sure. So take, for example, something
like that Google analytics right now. Everyone

444
00:40:45,059 --> 00:40:50,470
is used to using Google analytics in their
app, they want to see how their app is being

445
00:40:50,470 --> 00:40:55,589
used. The way to traditionally include it
would be to say script source equals whatever

446
00:40:55,589 --> 00:41:01,650
your path to your analytics JavaScript file.
But what if you are offline? So first off,

447
00:41:01,650 --> 00:41:06,220
if you are offline when you launch the app,
it might just fail to load the analytics code

448
00:41:06,220 --> 00:41:13,180
altogether or it might load part of it. Then
let's say that you load the code successfully

449
00:41:13,180 --> 00:41:17,460
but then go offline. Well, the traditional
way that it does its thing is to ping a server

450
00:41:17,460 --> 00:41:24,460
to send its data. So in that case, we're modifying
-- both the API to be loaded, you know, safely,

451
00:41:25,759 --> 00:41:31,799
always on the client side and to know when
it's offline and to store and cache some of

452
00:41:31,799 --> 00:41:38,799
its statistics locally so it that it can save
them up and report them up at a later time.

453
00:41:42,080 --> 00:41:45,130
>>> Okay. Thanks.
>>Erik Kay: Okay.

454
00:41:45,130 --> 00:41:52,130
>>> So you said there's going to be a split
between the app extensions -- I mean the app

455
00:41:52,519 --> 00:41:56,059
API and the extension API. Can you tell us
a bit about more about these, which go to

456
00:41:56,059 --> 00:42:01,069
which category?
>>Erik Kay: Sure. In general, extension APIs

457
00:42:01,069 --> 00:42:07,289
are going to be limited to the things that
affect the browser. That affect Web pages,

458
00:42:07,289 --> 00:42:13,529
tabs, that sort of thing. And apps is going
to be, you know, everything else. Now there's

459
00:42:13,529 --> 00:42:19,749
going to be a few that are going to exist
in both. In general, what we have done is

460
00:42:19,749 --> 00:42:24,049
for now limited the ones that are more dangerous
system-level things and those are not going

461
00:42:24,049 --> 00:42:28,049
to be available in extensions to begin with.
Something we're evaluating, we might change

462
00:42:28,049 --> 00:42:31,740
our minds on some of that over time. But to
start with, we're going to try to keep a clean

463
00:42:31,740 --> 00:42:35,569
break between those sorts of things and apps
and the things for extensions, keep those

464
00:42:35,569 --> 00:42:38,980
tied to things that affect the browser.
>>Mihai Parparita: Some APIs might behave

465
00:42:38,980 --> 00:42:43,890
slightly differently, so the context of your
API, for example, can affect any Web page.

466
00:42:43,890 --> 00:42:48,740
But when used within your app it would affect
only your own apps pages.

467
00:42:48,740 --> 00:42:53,740
The docs I think should cover -- will start
covering this.

468
00:42:53,740 --> 00:42:59,079
>>> You mentioned the -- the applicant launcher
can use a browser tag to launch another website.

469
00:42:59,079 --> 00:43:02,970
So can any JavaScript in that website interact
with the app?

470
00:43:02,970 --> 00:43:09,480
>>Erik Kay: Sure. The way it will interact
-- you can interact with the browser tag,

471
00:43:09,480 --> 00:43:15,089
but it will be through a very specific post
message type of interface. So it will be possible

472
00:43:15,089 --> 00:43:21,690
to have some hosted Web content that you want
that can message out and for you as the better

473
00:43:21,690 --> 00:43:26,339
of the browser tag to inject bindings into
the page as well. So you will have full control

474
00:43:26,339 --> 00:43:31,119
over that page. We actually expect eventually
the API to be rich enough that people will

475
00:43:31,119 --> 00:43:35,940
be able to build a browser using a browser
tag. So maybe you don't like Chrome's UI and

476
00:43:35,940 --> 00:43:42,410
you want to build a browser with tabs on the
side or something, I don't know, we think

477
00:43:42,410 --> 00:43:44,720
that eventually you will be able to do that
with the browser tag.

478
00:43:44,720 --> 00:43:48,180
>>> What is the level of integration with
the file system? So I saw in the text editor

479
00:43:48,180 --> 00:43:53,980
you click, open a file, browser, you pick
a file. But say you wanted to build an editor

480
00:43:53,980 --> 00:43:58,150
where you have, you know, a directory tree
on the side like a normal ID, click through

481
00:43:58,150 --> 00:43:58,570
it.
>>Erik Kay: Sure.

482
00:43:58,570 --> 00:44:03,200
>>> Is there some -- I guess what kind of
APIs are available for accessing the file

483
00:44:03,200 --> 00:44:06,470
system generally?
>>Erik Kay: Right. Actually, good point. We

484
00:44:06,470 --> 00:44:10,450
didn't mention that. Probably most of you
noticed that the text editor that we were

485
00:44:10,450 --> 00:44:14,769
using is itself an app and was interacting
with the file system and that text editor

486
00:44:14,769 --> 00:44:21,049
was using -- was, you know, all JavaScript
and HTML as well and it was using some of

487
00:44:21,049 --> 00:44:27,079
the file system APIs that we're working on.
In general, we're -- we're trying to limit

488
00:44:27,079 --> 00:44:33,019
it, we can think of file system access in
kind of two ways. One way are ways where the

489
00:44:33,019 --> 00:44:37,549
user specifically indicates a specific file
that they want to give you as the app access

490
00:44:37,549 --> 00:44:42,799
to, through a standard open save dialogue
type of thing. For that, you can access files

491
00:44:42,799 --> 00:44:45,960
anywhere on the system, read, write access
to them with the right sort of permission

492
00:44:45,960 --> 00:44:50,660
and that sort of a thing. But in terms of
arbitrary non-user initiated things, where

493
00:44:50,660 --> 00:44:55,769
things you might say oh, because of file A
I want to access file B, C, and D, we don't

494
00:44:55,769 --> 00:45:02,769
allow you to do that. So in those type of
cases, take an IDE, as an example,we would

495
00:45:03,249 --> 00:45:09,079
say that you should bill something that interacts
with files in your own Sandbox in that world.

496
00:45:09,079 --> 00:45:13,920
So in that case maybe you might use native
client to build the git implementation that

497
00:45:13,920 --> 00:45:19,670
actually, you know, can directly, you know,
pull down code from your repo right into your

498
00:45:19,670 --> 00:45:23,720
Sandbox and edit things locally there. In
your Sandbox you have got full access to all

499
00:45:23,720 --> 00:45:28,839
of the directories, all of the files, unrestricted.
It's the rest of the hard drive that's off

500
00:45:28,839 --> 00:45:31,749
limits, unless the user does a specific gesture
to give -- grant it --

501
00:45:31,749 --> 00:45:34,309
>>Mihai Parparita: The third way for getting
access to other files on the hard drive is

502
00:45:34,309 --> 00:45:39,019
by the shared data API. So if your app is
interested in not any arbitrary file but photos,

503
00:45:39,019 --> 00:45:46,019
then it can, yes, ask for any photos without
a user gesture.

504
00:45:46,109 --> 00:45:50,019
>>> So does that mean -- so on Windows or
Mac system, there's a system photo directories,

505
00:45:50,019 --> 00:45:54,460
where supposedly the user puts their photos,
you can ask for permission to access the files

506
00:45:54,460 --> 00:45:57,150
in that directory; is that the idea?
>>Mihai Parparita: Yeah.

507
00:45:57,150 --> 00:46:02,059
>>Erik Kay: It's not exactly that. It's a
little more. So we will actually try to discover

508
00:46:02,059 --> 00:46:08,519
the types of places that you store your photos
and so a lot of people don't -- don't keep

509
00:46:08,519 --> 00:46:11,869
their photos leveraged to that one thing;
they have an extra hard drive, whatever. The

510
00:46:11,869 --> 00:46:17,049
ability for users to configure what defines
their photos area. But even then it's not

511
00:46:17,049 --> 00:46:21,880
just directory access, limited to the types
of files that you can access to. There have

512
00:46:21,880 --> 00:46:26,519
to be known types that we expect to be photos
in that case.

513
00:46:26,519 --> 00:46:30,460
>>> Okay.
>>> Are there any particular patterns or practices

514
00:46:30,460 --> 00:46:35,799
that we should employ when designing apps
in terms of UI state so when a user exits

515
00:46:35,799 --> 00:46:40,910
a UI, when we want that UI to come back exact
the same as when the user exited.

516
00:46:40,910 --> 00:46:46,190
>>Erik Kay: Yeah. That's a good point. So
there's a lot of things that we think are

517
00:46:46,190 --> 00:46:51,539
going to change in terms of how you build
these apps that are different from what you

518
00:46:51,539 --> 00:46:55,759
might expect with the Web page. Because you
might be dealing with multiple Windows and

519
00:46:55,759 --> 00:47:01,249
because your app can get shut down and pulled
back at any time, we definitely want you to

520
00:47:01,249 --> 00:47:05,650
be resilient to that and to be able to restore
and pick up from exactly where you left off

521
00:47:05,650 --> 00:47:10,779
in those cases.
You know, the example is remember -- think

522
00:47:10,779 --> 00:47:15,960
about this, these apps also need to be able
to run in mobile environments where mobile

523
00:47:15,960 --> 00:47:20,359
apps don't have guarantees of a lifetime.
So that means that you have to write your

524
00:47:20,359 --> 00:47:26,999
apps in a way where they might be shut down
due to system resource issues, right? But

525
00:47:26,999 --> 00:47:30,589
the user then switches back to them and it
should look like nothing happened and it should

526
00:47:30,589 --> 00:47:34,049
look like you never exited.
>>Mihai Parparita: Sorry. The other part there

527
00:47:34,049 --> 00:47:38,950
is that we have storage API. So for storage
state, you can use the storage API which looks

528
00:47:38,950 --> 00:47:43,109
like local storage but is asynchronous and
more importantly is synced so that can have

529
00:47:43,109 --> 00:47:47,349
the same state across all chrome devices that
the users assigned them to.

530
00:47:47,349 --> 00:47:51,210
>>Erik Kay: Yeah, absolutely. So we actually
think it's a really interesting use case,

531
00:47:51,210 --> 00:47:55,819
that you have your app in one state, you know,
on your machine at work, you go home and you

532
00:47:55,819 --> 00:48:00,299
launch it again from exactly where you left
off at work.

533
00:48:00,299 --> 00:48:04,519
>>> Any ability for external devices to wake
up apps?

534
00:48:04,519 --> 00:48:10,809
>>Erik Kay: Well, basically the whole gist
of these -- of this notification based model

535
00:48:10,809 --> 00:48:15,099
that we've got for -- for the app, it should
enable that sort of a thing. We don't have

536
00:48:15,099 --> 00:48:19,940
any specific APIs to talk about on that front
yet. But -- but absolutely, things like -- you

537
00:48:19,940 --> 00:48:24,799
can imagine things like server push, synchronization,
that sort of thing will all be --

538
00:48:24,799 --> 00:48:28,009
>>Mihai Parparita: I think the one thing we
have is for the media gallery API, if the

539
00:48:28,009 --> 00:48:33,329
SD card is inserted, it will fire an event,
for example, so your app can decide to do

540
00:48:33,329 --> 00:48:40,329
something in response to photos that just
appeared even if it's not running.

541
00:48:41,319 --> 00:48:48,119
>>> With the serial device that you were -- that
you were working there, can -- when can we

542
00:48:48,119 --> 00:48:55,119
expect to -- like support for USB devices
in Chrome? And will it cover the whole range?

543
00:48:56,900 --> 00:49:03,900
Can I like have a device that emulates an
RS 232 system, could I access these kind of

544
00:49:06,739 --> 00:49:08,489
things with Chrome, through Chrome?
>>Erik Kay: So this serial device here was

545
00:49:08,489 --> 00:49:15,180
actually a over USB, so it's serial over USB,
and actually we do have a USB API as well.

546
00:49:15,180 --> 00:49:19,910
>>Mihai Parparita: Low level USB API.
>>Erik Kay: Right, exactly. So basically if

547
00:49:19,910 --> 00:49:23,789
you know everything about a device, one of
the demos that we have if you look in our

548
00:49:23,789 --> 00:49:26,980
repro --
>>Mihai Parparita: It's a Griffin PowerMate.

549
00:49:26,980 --> 00:49:32,950
Sends its rotation position over the USB,
and we can read a byte off of it.

550
00:49:32,950 --> 00:49:36,640
>>Erik Kay: So there's a little bit more work
we need to do with the USB to really flesh

551
00:49:36,640 --> 00:49:40,720
it out. For example, we don't have support
for HID devices yet, you know, and I think

552
00:49:40,720 --> 00:49:42,559
it would be nice for us to build in a little
more knowledge about some of the specific

553
00:49:42,559 --> 00:49:48,140
devices. Right now it's low level, you have
to know a bit more about the device that you

554
00:49:48,140 --> 00:49:51,279
are talking to.
>>Mihai Parparita: For example, one of our

555
00:49:51,279 --> 00:49:56,069
developer relations people has got his connect
hooked up to an app, but that seems to work.

556
00:49:56,069 --> 00:49:58,640
>>> Time schedule, approximately? Months,
years?

557
00:49:58,640 --> 00:50:01,660
[ Laughter ]
>>Erik Kay: Well, as we said, you can play

558
00:50:01,660 --> 00:50:08,160
with this today. And you know that in general
our approach is to take a very incremental

559
00:50:08,160 --> 00:50:13,109
release early and often type approach. So
our intent is to get it out this year, you

560
00:50:13,109 --> 00:50:17,989
know, into the stable channel. But you should
be able to start playing with it now and building

561
00:50:17,989 --> 00:50:22,789
apps now. Just depends on your tolerance for
early code.

562
00:50:22,789 --> 00:50:28,509
>>> Right, thank you very much.
>>Erik Kay: All right. Well, we might be out

563
00:50:28,509 --> 00:50:35,170
of questions. Any others? All right.
Well, I think that's about it then. If anybody

564
00:50:35,170 --> 00:50:39,549
wants to find us afterwards, like I said,
we'll be over at the Chrome booth answering

565
00:50:39,549 --> 00:50:45,410
questions and come check out Johnny HTML and
the other fun demos over there and we hope

566
00:50:45,410 --> 00:50:47,569
to hear more from you. Thanks.
[ Applause ]

