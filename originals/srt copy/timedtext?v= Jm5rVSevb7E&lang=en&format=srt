1
00:00:00,000 --> 00:00:06,136

2
00:00:06,136 --> 00:00:08,870
ADDY OSMANI: Hey guys, we are
live on the Chrome Developer

3
00:00:08,870 --> 00:00:11,420
channel for the Chrome
Office Hours.

4
00:00:11,420 --> 00:00:14,190
I think it will be useful for us
to go around the room just

5
00:00:14,190 --> 00:00:16,146
to see who everybody is.

6
00:00:16,146 --> 00:00:16,482
Paul?

7
00:00:16,482 --> 00:00:18,530
PAUL KINLAN: Hi, I'm Paul,
as Addy just said.

8
00:00:18,530 --> 00:00:21,060
I'm a developer advocate
at Google.

9
00:00:21,060 --> 00:00:22,820
I've worked Chrome,
Web Intents.

10
00:00:22,820 --> 00:00:24,810
And I'm looking forward
to loads of Web

11
00:00:24,810 --> 00:00:25,750
Intents questions today.

12
00:00:25,750 --> 00:00:26,980
I don't see any on the list.

13
00:00:26,980 --> 00:00:29,830
I'm want you to come and ask
some, otherwise I probably

14
00:00:29,830 --> 00:00:31,965
won't be speaking today.

15
00:00:31,965 --> 00:00:34,200
Sorry, guys.

16
00:00:34,200 --> 00:00:35,340
PAUL LEWIS: Hey,I'm
Paul Lewis.

17
00:00:35,340 --> 00:00:38,680
I'm a developer programs
engineer for Google,

18
00:00:38,680 --> 00:00:41,590
obviously, working on Chrome,
Chrome apps, GPU, and

19
00:00:41,590 --> 00:00:44,420
performance kinds of things.

20
00:00:44,420 --> 00:00:45,200
ADDY OSMANI: I'm Addy.

21
00:00:45,200 --> 00:00:49,472
I work on Yeoman tooling, some
developer docs, and one two

22
00:00:49,472 --> 00:00:50,485
other bits.

23
00:00:50,485 --> 00:00:52,050
PAUL IRISH: I'm Paul Irish.

24
00:00:52,050 --> 00:00:54,064
Paul.

25
00:00:54,064 --> 00:00:59,497
I'm working on all sorts of
HTML5, openware platform, dev

26
00:00:59,497 --> 00:01:04,274
tools, Yeoman, good stuff.

27
00:01:04,274 --> 00:01:06,212
SAM DUTTON: My name
is Sam Dutton.

28
00:01:06,212 --> 00:01:10,820
I'm here in London working on
Chrome devrel, I'll be working

29
00:01:10,820 --> 00:01:16,221
on WebRTC, and doing more
mobile Chrome stuff.

30
00:01:16,221 --> 00:01:19,047

31
00:01:19,047 --> 00:01:22,950
PAUL IRISH: So we have a Google
moderator setup that

32
00:01:22,950 --> 00:01:25,610
you can go and submit questions
to and vote up and

33
00:01:25,610 --> 00:01:28,450
down on other people's questions
so that we answer

34
00:01:28,450 --> 00:01:31,370
exactly the stuff that you
are interested in.

35
00:01:31,370 --> 00:01:34,850
So if you can, just
open up the

36
00:01:34,850 --> 00:01:39,270
developers.google.com/live,
and you'll see

37
00:01:39,270 --> 00:01:40,200
that we're on air.

38
00:01:40,200 --> 00:01:42,630
Click through that, and then
you'll see the moderator right

39
00:01:42,630 --> 00:01:46,350
there, where you can submit
questions and put things up.

40
00:01:46,350 --> 00:01:50,320
So this is just Office Hours,
and we're just going to answer

41
00:01:50,320 --> 00:01:51,090
your questions.

42
00:01:51,090 --> 00:01:53,505
So we're guided by
you guys today.

43
00:01:53,505 --> 00:01:56,882

44
00:01:56,882 --> 00:01:59,270
SAM DUTTON: We're planning to
do this on a pretty regular

45
00:01:59,270 --> 00:02:02,060
basis from London now, so we're
really looking forward

46
00:02:02,060 --> 00:02:04,860
to more of your questions.

47
00:02:04,860 --> 00:02:06,535
ADDY OSMANI: So let's dive in.

48
00:02:06,535 --> 00:02:07,785
PAUL LEWIS: Cool.

49
00:02:07,785 --> 00:02:12,134

50
00:02:12,134 --> 00:02:16,710
The first question that we're
going to get into comes from

51
00:02:16,710 --> 00:02:18,956
the United Kingdom
from Simon Owen.

52
00:02:18,956 --> 00:02:24,950
He asked, are we going to see
a FireSass equivalent or

53
00:02:24,950 --> 00:02:26,466
similar in Chrome?

54
00:02:26,466 --> 00:02:33,210
And so he's talking about the
FireSass extension for FireBug

55
00:02:33,210 --> 00:02:38,100
adding in support of the Sass
stylesheet [INAUDIBLE].

56
00:02:38,100 --> 00:02:43,030
So we've been looking at this
and really want to have some

57
00:02:43,030 --> 00:02:46,430
good, powerful stuff.

58
00:02:46,430 --> 00:02:47,930
There's a patch that's
brewing.

59
00:02:47,930 --> 00:02:52,360
It has not landed yet, as a
straw-man attempt, where you

60
00:02:52,360 --> 00:02:57,845
can actually see Sass files
inside the Sources panel in

61
00:02:57,845 --> 00:03:00,000
the Chrome dev tools.

62
00:03:00,000 --> 00:03:01,580
And so that's the first step.

63
00:03:01,580 --> 00:03:04,240
We'll see where it
goes from there.

64
00:03:04,240 --> 00:03:09,480
But we're investigating and
writing Chrome right now.

65
00:03:09,480 --> 00:03:13,202
PAUL KINLAN: So are you going
to use source maps?

66
00:03:13,202 --> 00:03:18,620
PAUL LEWIS: As far as I know,
it's not actually using source

67
00:03:18,620 --> 00:03:19,760
maps just yet.

68
00:03:19,760 --> 00:03:21,980
Although the cool thing
is that the original

69
00:03:21,980 --> 00:03:26,300
implementation of source maps
was refactored to allow for

70
00:03:26,300 --> 00:03:28,910
more flexibility when it came
to CSS source maps.

71
00:03:28,910 --> 00:03:32,260
So while what's implemented
right now is not taking

72
00:03:32,260 --> 00:03:35,340
advantage of that, there's
plumbing to enable that.

73
00:03:35,340 --> 00:03:38,170

74
00:03:38,170 --> 00:03:42,190
So that patch will actually
land today or tomorrow.

75
00:03:42,190 --> 00:03:45,180
So if you're on Canary,
you'll be able to see

76
00:03:45,180 --> 00:03:47,330
the begins of that.

77
00:03:47,330 --> 00:03:52,400
The other thing I wanted to
mention is if you Google for

78
00:03:52,400 --> 00:03:56,740
Web Inspector Commits RSS,
you're going to get an RSS

79
00:03:56,740 --> 00:04:00,140
feed of all the commits to
WebKit that are just the

80
00:04:00,140 --> 00:04:03,410
WebKit Inspector, which
is from dev tools.

81
00:04:03,410 --> 00:04:06,510
And you can see everything
that lands, including new

82
00:04:06,510 --> 00:04:13,280
features and small bug fixes and
stay very close to what's

83
00:04:13,280 --> 00:04:14,566
coming down the pipe.

84
00:04:14,566 --> 00:04:18,579

85
00:04:18,579 --> 00:04:19,220
Next question?

86
00:04:19,220 --> 00:04:20,320
SAM DUTTON: Yeah.

87
00:04:20,320 --> 00:04:26,220
Moving on to a question here
from [INAUDIBLE], are you

88
00:04:26,220 --> 00:04:29,420
planning to make Chrome desktop
sharing extensions

89
00:04:29,420 --> 00:04:33,800
support voice chat, work around
firewalls so we can

90
00:04:33,800 --> 00:04:36,700
interact with our site users
like with Skype, but totally

91
00:04:36,700 --> 00:04:39,620
over the web?

92
00:04:39,620 --> 00:04:43,480
Well, none of us here work
on that extension.

93
00:04:43,480 --> 00:04:46,092
We have passed the question
on to the team.

94
00:04:46,092 --> 00:04:48,590
I'd like to take this
opportunity to give a plug for

95
00:04:48,590 --> 00:04:52,863
WebRTC, which does a lot of
what you're talking about.

96
00:04:52,863 --> 00:04:55,260
I've said already.

97
00:04:55,260 --> 00:05:01,600
It allows video chat and enables
NAT traversal, so

98
00:05:01,600 --> 00:05:03,970
getting through firewalls
and so on.

99
00:05:03,970 --> 00:05:05,620
So take a look at that.

100
00:05:05,620 --> 00:05:07,630
We've got a great WebRTC
article now on

101
00:05:07,630 --> 00:05:09,700
HTML5 rocks dot com.

102
00:05:09,700 --> 00:05:10,950
We'll have a little
on webrtc.org.

103
00:05:10,950 --> 00:05:13,770

104
00:05:13,770 --> 00:05:18,110
Great way to chat with people,
and it's all in the browser,

105
00:05:18,110 --> 00:05:19,586
plug-in free.

106
00:05:19,586 --> 00:05:22,790
PAUL KINLAN: So that would be
for his screensharing as well.

107
00:05:22,790 --> 00:05:25,600
So you are talking about doing
WebRTC at the same time as

108
00:05:25,600 --> 00:05:26,070
screenshare?

109
00:05:26,070 --> 00:05:29,390
SAM DUTTON: I'm not sure if
the question here is about

110
00:05:29,390 --> 00:05:31,475
doing video chat or specifically
about doing

111
00:05:31,475 --> 00:05:33,030
desktop sharing.

112
00:05:33,030 --> 00:05:37,220
We'll ask the promoting
team about working--

113
00:05:37,220 --> 00:05:39,500
PAUL KINLAN: Because I've seen
some stuff that use the

114
00:05:39,500 --> 00:05:41,740
Mutation Observers as well to
get the screen on someone

115
00:05:41,740 --> 00:05:42,990
else's remote screen.

116
00:05:42,990 --> 00:05:48,170

117
00:05:48,170 --> 00:05:54,170
PAUL IRISH: Next question
comes from [? Keviex ?]

118
00:05:54,170 --> 00:05:55,500
in the United States.

119
00:05:55,500 --> 00:06:01,250
He says, a question regarding
V8 flags in Chrome.

120
00:06:01,250 --> 00:06:04,640
So there's a lot of flags that
you can pass into the V8

121
00:06:04,640 --> 00:06:08,580
Javascript engine that allow
you to implement tracing.

122
00:06:08,580 --> 00:06:10,030
And this is actually
pretty cool.

123
00:06:10,030 --> 00:06:12,400
In a very high performance
environment, you want to know

124
00:06:12,400 --> 00:06:15,430
when it goes into Crankshaft,
which is

125
00:06:15,430 --> 00:06:17,040
the optimize compiler.

126
00:06:17,040 --> 00:06:21,000
And you can see what goes into
that heavily optimized route

127
00:06:21,000 --> 00:06:24,850
and then back out and, perhaps,
get an indication of

128
00:06:24,850 --> 00:06:28,244
your code that is keeping it
from going into a highly

129
00:06:28,244 --> 00:06:29,720
optimized route.

130
00:06:29,720 --> 00:06:33,860
There's a great talk, I think,
at Google I/O about V8 and

131
00:06:33,860 --> 00:06:36,462
optimization, where you can
learn more about this.

132
00:06:36,462 --> 00:06:39,290
But [? Keviex ?] is asking, can
anyone give instructions

133
00:06:39,290 --> 00:06:44,590
on using these flags inside
Chrome to get this?

134
00:06:44,590 --> 00:06:50,390
So for this one, Chrome has
flags that you can run against

135
00:06:50,390 --> 00:06:51,980
the executable.

136
00:06:51,980 --> 00:06:56,080
So if you just Google
for running

137
00:06:56,080 --> 00:06:58,060
Chrome flags, I think--

138
00:06:58,060 --> 00:07:00,910
a while ago I made a page that
has the instructions.

139
00:07:00,910 --> 00:07:04,960
Basically, you need to run
Chrome from the command line,

140
00:07:04,960 --> 00:07:08,160
and then you can
pass in flags.

141
00:07:08,160 --> 00:07:13,295
Every available flag is
listed on peter.sh.

142
00:07:13,295 --> 00:07:16,340
So if you just look for
that, you can find it.

143
00:07:16,340 --> 00:07:20,210
But there's a specific technique
of passing in V8

144
00:07:20,210 --> 00:07:22,910
flags through a Chrome flag.

145
00:07:22,910 --> 00:07:26,700
So it's like you wrap the
V8 flags in a warm

146
00:07:26,700 --> 00:07:29,640
hug of other flags.

147
00:07:29,640 --> 00:07:31,250
SAM DUTTON: So you can
do it from Chrome

148
00:07:31,250 --> 00:07:32,080
flags, in other words?

149
00:07:32,080 --> 00:07:33,040
PAUL IRISH: You can do it.

150
00:07:33,040 --> 00:07:36,690
So the name of the Chrome
flag is V8 Flags.

151
00:07:36,690 --> 00:07:40,160
And you pass it a string
of other flags.

152
00:07:40,160 --> 00:07:42,856
Yeah, that's nice.

153
00:07:42,856 --> 00:07:46,390
But that way you are able to
get this output dumped into

154
00:07:46,390 --> 00:07:48,662
your terminal, as far
as V8's behavior.

155
00:07:48,662 --> 00:07:50,410
PAUL KINLAN: So are there
any tools that

156
00:07:50,410 --> 00:07:52,000
consume that output?

157
00:07:52,000 --> 00:07:54,452
Or is it, literally, your
just go in and?

158
00:07:54,452 --> 00:07:56,860
PAUL IRISH: I haven't
seen any.

159
00:07:56,860 --> 00:07:58,680
That would be really cool.

160
00:07:58,680 --> 00:07:59,930
I haven't seen it.

161
00:07:59,930 --> 00:08:07,400

162
00:08:07,400 --> 00:08:10,094
Next question.

163
00:08:10,094 --> 00:08:11,860
SAM DUTTON: Wow, we got some
more questions coming in.

164
00:08:11,860 --> 00:08:13,020
PAUL IRISH: Good, keep
them coming.

165
00:08:13,020 --> 00:08:13,550
SAM DUTTON: Yeah,
fire them in.

166
00:08:13,550 --> 00:08:15,460
PAUL IRISH: Please, vote
up and down on

167
00:08:15,460 --> 00:08:16,195
anybody else's questions.

168
00:08:16,195 --> 00:08:17,990
PAUL KINLAN: I've seen someone
mention Web Intents.

169
00:08:17,990 --> 00:08:19,273
SAM DUTTON: We got get
him more questions.

170
00:08:19,273 --> 00:08:20,630
PAUL KINLAN: We'll do that
one later, alright?

171
00:08:20,630 --> 00:08:22,770
I'll save them for last.

172
00:08:22,770 --> 00:08:25,970
SAM DUTTON: The last question
is a good one.

173
00:08:25,970 --> 00:08:28,490
PAUL IRISH: Are there any known
IDE or tools to take

174
00:08:28,490 --> 00:08:30,870
advantage of remote debugging
support API to enhance web

175
00:08:30,870 --> 00:08:33,590
developer resources?

176
00:08:33,590 --> 00:08:34,840
So this cool.

177
00:08:34,840 --> 00:08:36,870

178
00:08:36,870 --> 00:08:42,530
One of the extension APIs inside
Chrome is actually

179
00:08:42,530 --> 00:08:44,450
called the Debugger API.

180
00:08:44,450 --> 00:08:49,090
And this is actually a JSON feed
of the remote debugging

181
00:08:49,090 --> 00:08:53,705
protocol that is used for remote
debugging and also,

182
00:08:53,705 --> 00:08:56,530
actually, for the Web Inspector
application in the

183
00:08:56,530 --> 00:08:58,830
web app, just to communicate
with the host page.

184
00:08:58,830 --> 00:09:00,470
So it actually just communicates
over the same

185
00:09:00,470 --> 00:09:03,320
protocol that it uses for
remote debugging.

186
00:09:03,320 --> 00:09:07,560
And that protocol is exposed
via an extension.

187
00:09:07,560 --> 00:09:13,490
What this allows is you could
create, in a page, your own

188
00:09:13,490 --> 00:09:14,420
complete API--

189
00:09:14,420 --> 00:09:19,570
I'm sorry, UI, for all
of Chrome dev tools.

190
00:09:19,570 --> 00:09:22,540
One particularly great
application is, let's say, you

191
00:09:22,540 --> 00:09:25,770
have a web based IDE.

192
00:09:25,770 --> 00:09:31,025
You could be showing code, and
then you have your set

193
00:09:31,025 --> 00:09:35,040
breakpoint, pause, step into,
step out of, and all that

194
00:09:35,040 --> 00:09:38,240
would be proxied through
the dev tools plumbing.

195
00:09:38,240 --> 00:09:41,990
And you get to control the
API inside the UI.

196
00:09:41,990 --> 00:09:44,720
So it's really exciting.

197
00:09:44,720 --> 00:09:46,490
And as far as people who are
taking advantage of this right

198
00:09:46,490 --> 00:09:51,960
now, there is a plug-in for
Eclipse that allows you to

199
00:09:51,960 --> 00:09:57,230
debug your JavaScripts over in
Eclipse and it just routes

200
00:09:57,230 --> 00:10:00,130
through them and uses the
debugger protocol.

201
00:10:00,130 --> 00:10:04,660
And that's, I think,
it these days.

202
00:10:04,660 --> 00:10:07,595
Adobe has a new web based
IDE called Brackets.

203
00:10:07,595 --> 00:10:10,720
And I've talked to them
about this API.

204
00:10:10,720 --> 00:10:12,900
And so they've looked at it.

205
00:10:12,900 --> 00:10:14,460
Nothing has landed
as far as I know.

206
00:10:14,460 --> 00:10:18,403
But it could be pretty
rad if we saw an

207
00:10:18,403 --> 00:10:18,756
implementation there.

208
00:10:18,756 --> 00:10:22,840
PAUL KINLAN: So is the
protocol over TCP?

209
00:10:22,840 --> 00:10:24,295
PAUL IRISH: Yeah.

210
00:10:24,295 --> 00:10:25,270
PAUL KINLAN: Interesting.

211
00:10:25,270 --> 00:10:29,100
I was just thinking because,
obviously, Chrome Apps, the

212
00:10:29,100 --> 00:10:32,660
packaged apps, have got access
to UDP and TCP connections.

213
00:10:32,660 --> 00:10:35,780
So you can make a little Chrome
App like, right now, on

214
00:10:35,780 --> 00:10:38,090
the Dev and Canary channel,
which would talk to the

215
00:10:38,090 --> 00:10:42,130
instance of Chrome and have a
debugger inside your own web

216
00:10:42,130 --> 00:10:43,422
app type of thing.

217
00:10:43,422 --> 00:10:45,990
PAUL IRISH: I think it's
actually a WebSocket

218
00:10:45,990 --> 00:10:46,395
connection.

219
00:10:46,395 --> 00:10:47,820
PAUL KINLAN: Oh, is that
a WebSocket one?

220
00:10:47,820 --> 00:10:48,760
SAM DUTTON: Yeah.

221
00:10:48,760 --> 00:10:52,210
There's actually a great article
if you're interested

222
00:10:52,210 --> 00:10:54,340
in extending the dev tools.

223
00:10:54,340 --> 00:10:58,610
There's a really good article
by our colleague Boris Smus.

224
00:10:58,610 --> 00:11:00,930
If you Google for
extending Chrome

225
00:11:00,930 --> 00:11:03,320
Developer Tools Boris Smus--

226
00:11:03,320 --> 00:11:04,570
that's S-M-U-S--

227
00:11:04,570 --> 00:11:06,370

228
00:11:06,370 --> 00:11:08,980
that's a really great place
to learn about building

229
00:11:08,980 --> 00:11:10,580
extensions for the
Chrome tools.

230
00:11:10,580 --> 00:11:13,690
But also, if you want to
actually add stuff to your own

231
00:11:13,690 --> 00:11:14,740
custom frontend.

232
00:11:14,740 --> 00:11:17,104
So good information there
about doing extra

233
00:11:17,104 --> 00:11:18,360
things for the tools.

234
00:11:18,360 --> 00:11:19,540
PAUL KINLAN: Is that
like extra panels

235
00:11:19,540 --> 00:11:20,280
and stuff as well?

236
00:11:20,280 --> 00:11:21,280
SAM DUTTON: Yes.

237
00:11:21,280 --> 00:11:25,280
It's actually information about
building a new frontend

238
00:11:25,280 --> 00:11:28,910
or tweaking, adding on to
the existing frontend.

239
00:11:28,910 --> 00:11:31,560
There's good information there
about building extensions

240
00:11:31,560 --> 00:11:34,535
using the dev tools
extensions, APIs.

241
00:11:34,535 --> 00:11:35,938
PAUL KINLAN: Because we'll have
to do a Web Intents--

242
00:11:35,938 --> 00:11:37,402
I'm going to mention Web Intents
every single time.

243
00:11:37,402 --> 00:11:40,170

244
00:11:40,170 --> 00:11:45,550
It's the Web Intent that I
write that [INAUDIBLE].

245
00:11:45,550 --> 00:11:48,500
Because we're thinking about
doing like a dev tools custom

246
00:11:48,500 --> 00:11:51,423
panel to tell you what
information was being passed

247
00:11:51,423 --> 00:11:53,691
into an app [INAUDIBLE].

248
00:11:53,691 --> 00:11:55,610
ADDY OSMANI: So the next
question is, how will the

249
00:11:55,610 --> 00:11:59,620
divergence of the W3C and
WHATWG on the HTML5 spec

250
00:11:59,620 --> 00:12:01,250
affect Chrome?

251
00:12:01,250 --> 00:12:04,875
And I guess the answer to that
is, it won't really.

252
00:12:04,875 --> 00:12:07,470
We're actively involved
in both.

253
00:12:07,470 --> 00:12:09,910
And we're hoping that the
differences there are going to

254
00:12:09,910 --> 00:12:12,292
stay minor.

255
00:12:12,292 --> 00:12:15,600
PAUL IRISH: The other thing to
point out is that the Chrome

256
00:12:15,600 --> 00:12:19,040
team is involved in working
groups on the

257
00:12:19,040 --> 00:12:20,420
W3C, also the WHATWG.

258
00:12:20,420 --> 00:12:25,870

259
00:12:25,870 --> 00:12:28,140
This is not the first time
that there's been a

260
00:12:28,140 --> 00:12:30,380
divergence.

261
00:12:30,380 --> 00:12:36,840
For instance, inside the WHATWG
HTML spec, it includes

262
00:12:36,840 --> 00:12:40,120
the Canvas 2D API.

263
00:12:40,120 --> 00:12:45,580
But that is in its very own
spec over in W3C land.

264
00:12:45,580 --> 00:12:47,080
And there's wording differences
and things like

265
00:12:47,080 --> 00:12:47,890
that already.

266
00:12:47,890 --> 00:12:49,140
So there has been
a divergence.

267
00:12:49,140 --> 00:12:52,970

268
00:12:52,970 --> 00:12:54,610
Well, I don't know if it's
more of a divergence, but

269
00:12:54,610 --> 00:12:55,900
there is new editors as well.

270
00:12:55,900 --> 00:12:58,500

271
00:12:58,500 --> 00:13:03,910
We expect not much of an effect
at all on how Chrome

272
00:13:03,910 --> 00:13:05,160
operates and is developed.

273
00:13:05,160 --> 00:13:08,072

274
00:13:08,072 --> 00:13:11,120
ADDY OSMANI: So the next
question is, as the Web SQL

275
00:13:11,120 --> 00:13:14,270
feature was deprecated from
HTML5 spec, are you planning

276
00:13:14,270 --> 00:13:17,200
to remove it from Chrome
in the future?

277
00:13:17,200 --> 00:13:18,600
Web SQL is interesting.

278
00:13:18,600 --> 00:13:21,460
Dropping it from the web
platform is difficult, because

279
00:13:21,460 --> 00:13:23,600
there are people actively
using it at the moment.

280
00:13:23,600 --> 00:13:27,220
And if we want to do that, one
prerequisite is that things

281
00:13:27,220 --> 00:13:30,660
like IndexDB, for example, get
broader support and start

282
00:13:30,660 --> 00:13:32,240
getting used a little
bit more.

283
00:13:32,240 --> 00:13:35,687
We do see Web SQL, perhaps,
getting dropped at sometime in

284
00:13:35,687 --> 00:13:39,580
the foreseeable future, but,
again, people need to start

285
00:13:39,580 --> 00:13:41,310
using IndexDB, for example,
a little bit more.

286
00:13:41,310 --> 00:13:44,190

287
00:13:44,190 --> 00:13:46,900
PAUL KINLAN: So the question I
was going to ask is, do we

288
00:13:46,900 --> 00:13:51,330
know of any abstraction layers
which just get rid of the

289
00:13:51,330 --> 00:13:54,475
differences between the two, I
mean, that we can kind of tell

290
00:13:54,475 --> 00:13:55,130
people right now?

291
00:13:55,130 --> 00:13:56,700
PAUL IRISH: Between Web
SQL and IndexDB?

292
00:13:56,700 --> 00:13:57,300
PAUL KINLAN: Yeah,
so don't have to

293
00:13:57,300 --> 00:13:59,050
particularly worry too much.

294
00:13:59,050 --> 00:13:59,990
I mean, if you're going to
develop an app now, and you

295
00:13:59,990 --> 00:14:01,630
want just to store later?

296
00:14:01,630 --> 00:14:03,150
SAM DUTTON: Right, you
mean like Lawnchair

297
00:14:03,150 --> 00:14:03,910
and stuff like that.

298
00:14:03,910 --> 00:14:04,845
PAUL KINLAN: Yeah.

299
00:14:04,845 --> 00:14:07,860
I mean, Lawnchair, Data Backbone
has got these couple

300
00:14:07,860 --> 00:14:08,040
different plug-ins--

301
00:14:08,040 --> 00:14:09,620
ADDY OSMANI: Yeah, there are
a bunch of different sync

302
00:14:09,620 --> 00:14:11,780
plug-ins for Backbone that you
can get that allow you to

303
00:14:11,780 --> 00:14:15,675
switch the storage options that
you use, whether it be

304
00:14:15,675 --> 00:14:17,910
IndexDB or something else.

305
00:14:17,910 --> 00:14:21,354
But as Sam mentioned, there's
also Lawnchair, which a lot of

306
00:14:21,354 --> 00:14:22,290
people are using
at the moment.

307
00:14:22,290 --> 00:14:26,040
PAUL IRISH: Yeah, in a way it's
tricky, because Lawnchair

308
00:14:26,040 --> 00:14:29,170
has asynchronous API, as
far as I remember.

309
00:14:29,170 --> 00:14:32,480

310
00:14:32,480 --> 00:14:35,795
You want to have a asynchronous
API, because the

311
00:14:35,795 --> 00:14:37,206
browser likes when you're
acting in an

312
00:14:37,206 --> 00:14:38,456
asynchronous fashion.

313
00:14:38,456 --> 00:14:40,320

314
00:14:40,320 --> 00:14:43,230
And so if you want something
that's like simple and has

315
00:14:43,230 --> 00:14:45,840
great browser support, just
use local storage.

316
00:14:45,840 --> 00:14:47,460
And if you're going to go a
little bit more complicated

317
00:14:47,460 --> 00:14:50,540
than that, and you need better
performance, and you need

318
00:14:50,540 --> 00:14:55,690
better data consistency, you
might end up writing the

319
00:14:55,690 --> 00:14:56,940
adapters yourself.

320
00:14:56,940 --> 00:14:59,180

321
00:14:59,180 --> 00:15:00,940
But I don't like recommending
that.

322
00:15:00,940 --> 00:15:03,820

323
00:15:03,820 --> 00:15:05,070
PAUL LEWIS: Got to be
driving the market.

324
00:15:05,070 --> 00:15:09,400

325
00:15:09,400 --> 00:15:13,140
ADDY OSMANI: You can post a
response to questions inside

326
00:15:13,140 --> 00:15:14,080
the moderator.

327
00:15:14,080 --> 00:15:18,010
If you have a suggestion for a
storage library that handles

328
00:15:18,010 --> 00:15:21,100
Web SQL and IndexDB and,
hopefully, is also

329
00:15:21,100 --> 00:15:24,890
asynchronous, drop it in there,
because it's hard to

330
00:15:24,890 --> 00:15:26,680
capture all the possible
libraries there.

331
00:15:26,680 --> 00:15:29,530

332
00:15:29,530 --> 00:15:36,065
Simon Sarris, who is a Canvas
expert in New Hampshire, he

333
00:15:36,065 --> 00:15:40,580
asked about scrollbars.

334
00:15:40,580 --> 00:15:46,250
So in Chrome, when you do a
Control F find you get little

335
00:15:46,250 --> 00:15:48,830
highlights on the scrollbar to
indicate page position, where

336
00:15:48,830 --> 00:15:50,850
all the matches are.

337
00:15:50,850 --> 00:15:55,260
And sometimes, when you
customize the scrollbar with

338
00:15:55,260 --> 00:15:58,040
CSS, that effect is lost.

339
00:15:58,040 --> 00:16:01,970
So he's asking, do we get to
retain that functionality,

340
00:16:01,970 --> 00:16:05,420
somehow, while still having
customer styling on

341
00:16:05,420 --> 00:16:07,870
scrollbars?

342
00:16:07,870 --> 00:16:09,700
Great question.

343
00:16:09,700 --> 00:16:12,070
PAUL KINLAN: Do we
know an answer?

344
00:16:12,070 --> 00:16:13,230
Because I was just think--

345
00:16:13,230 --> 00:16:14,538
do we?

346
00:16:14,538 --> 00:16:14,972
No?

347
00:16:14,972 --> 00:16:15,840
No answer.

348
00:16:15,840 --> 00:16:16,780
Because I was thinking
about this.

349
00:16:16,780 --> 00:16:18,685
I remember doing something like
this a while ago where,

350
00:16:18,685 --> 00:16:23,290
in custom CSS, you could,
basically, just manipulate it

351
00:16:23,290 --> 00:16:26,920
with the Canvas, essentially,
like the background.

352
00:16:26,920 --> 00:16:28,728
It wasn't necessarily a
background image, but you

353
00:16:28,728 --> 00:16:29,590
could, essentially, attach
the Canvas to it.

354
00:16:29,590 --> 00:16:31,425
And I can't remember, for the
life of me, how I did it.

355
00:16:31,425 --> 00:16:35,370
But because the scrollbars in
WebKit are startable, and you

356
00:16:35,370 --> 00:16:37,510
can get access to the thumb, the
background, and the little

357
00:16:37,510 --> 00:16:40,880
bits at the top and bottom, I
was wondering whether you do

358
00:16:40,880 --> 00:16:43,560
the same type of thing
there as well.

359
00:16:43,560 --> 00:16:46,600
The height and width, you can
get the Canvas and say, well,

360
00:16:46,600 --> 00:16:50,178
the background image for this
scrollbar is the output from

361
00:16:50,178 --> 00:16:51,428
this Canvas.

362
00:16:51,428 --> 00:16:53,884

363
00:16:53,884 --> 00:16:54,930
I've not seen it done.

364
00:16:54,930 --> 00:16:59,291
Well, I've seen it done in other
apps, but I've never

365
00:16:59,291 --> 00:17:00,380
seen the solution, if
that makes sense

366
00:17:00,380 --> 00:17:05,680
PAUL IRISH: I feel like it's a
totally legit feature request

367
00:17:05,680 --> 00:17:10,920
to ask for custom styling
for the match

368
00:17:10,920 --> 00:17:12,910
markers in the scrollbar.

369
00:17:12,910 --> 00:17:15,030
If we have a styling
[INAUDIBLE]

370
00:17:15,030 --> 00:17:20,540
like -WebKit -scrollbar -match,
or whatever, and then

371
00:17:20,540 --> 00:17:22,670
you might take it from that
yellow and change it into

372
00:17:22,670 --> 00:17:24,740
something that matches what
you've styled it into.

373
00:17:24,740 --> 00:17:27,349
If we had that then there would
be no reason to hide it

374
00:17:27,349 --> 00:17:29,290
automatically when it styles.

375
00:17:29,290 --> 00:17:37,710
And so file a ticket and see
what folks think, because I

376
00:17:37,710 --> 00:17:40,454
think that would be awesome.

377
00:17:40,454 --> 00:17:44,150
PAUL LEWIS: So the next question
from Stewart is, will

378
00:17:44,150 --> 00:17:47,350
Chrome for Android follow a
similar frequent release

379
00:17:47,350 --> 00:17:49,490
schedule to the desktop
version?

380
00:17:49,490 --> 00:17:53,250
And are there any plans for
dev and Canary versions?

381
00:17:53,250 --> 00:17:57,190
The simple answer is, yes, we
intend to follow the Chrome

382
00:17:57,190 --> 00:17:59,960
release cycle, but we don't
have an ETA for this,

383
00:17:59,960 --> 00:18:01,890
specifically, at the moment.

384
00:18:01,890 --> 00:18:03,420
When we do, we'll announce
it publicly.

385
00:18:03,420 --> 00:18:06,830
But what we can say is that we
will be following the dev beta

386
00:18:06,830 --> 00:18:14,395
stable Canary release pattern
that you've seen on desktop.

387
00:18:14,395 --> 00:18:17,020
ADDY OSMANI: So the next
question is, are you planning,

388
00:18:17,020 --> 00:18:19,586
soon, to implement the device
orientation locking by the

389
00:18:19,586 --> 00:18:23,620
view port orientation preview
in the Chrome mobile and

390
00:18:23,620 --> 00:18:26,870
Android default browser?

391
00:18:26,870 --> 00:18:30,190
So we're investigating what APIs
are important to have on

392
00:18:30,190 --> 00:18:31,210
mobile at the moment.

393
00:18:31,210 --> 00:18:32,750
That includes the orientation
lock.

394
00:18:32,750 --> 00:18:35,950
We're aware of it We're looking
at it at the moment.

395
00:18:35,950 --> 00:18:38,700
But we don't have anything
to announce just yet.

396
00:18:38,700 --> 00:18:41,572
I know it's not the best
answer, but it's what

397
00:18:41,572 --> 00:18:42,822
you get right now.

398
00:18:42,822 --> 00:18:45,410

399
00:18:45,410 --> 00:18:46,660
Yeah.

400
00:18:46,660 --> 00:18:48,979

401
00:18:48,979 --> 00:18:54,550
PAUL IRISH: Stewart asks
do you know of any work

402
00:18:54,550 --> 00:18:59,960
implementing the Web Audio API
for Chrome for Android?

403
00:18:59,960 --> 00:19:03,110
Web Audio API is used in--

404
00:19:03,110 --> 00:19:04,520
was it used in Exquisite
Forest?

405
00:19:04,520 --> 00:19:04,960
Yeah.

406
00:19:04,960 --> 00:19:06,520
PAUL KINLAN: It was used
in the WebChrome

407
00:19:06,520 --> 00:19:07,100
mobile app as well.

408
00:19:07,100 --> 00:19:08,880
PAUL IRISH: The new Chrome
[INAUDIBLE] was for Forest,

409
00:19:08,880 --> 00:19:12,940
which I recently released,
experiments and arty stuff.

410
00:19:12,940 --> 00:19:15,010
It's really cool.

411
00:19:15,010 --> 00:19:17,720
And it's not currently
available

412
00:19:17,720 --> 00:19:20,320
in Chrome for Android.

413
00:19:20,320 --> 00:19:25,710
What you can do is, if you go to
mcrbug.com, it's a list of

414
00:19:25,710 --> 00:19:30,140
all the tickets that are filed
against Chrome for Android.

415
00:19:30,140 --> 00:19:32,830
And one of them in there,
towards the top, you'll see,

416
00:19:32,830 --> 00:19:35,060
is Web Audio support.

417
00:19:35,060 --> 00:19:37,620
Star this ticket to
stay notified.

418
00:19:37,620 --> 00:19:40,290
Right now, there's
not any support.

419
00:19:40,290 --> 00:19:43,100
One of the things that would be
really useful to hear is,

420
00:19:43,100 --> 00:19:46,230
if you're a mobile developer,
and you could really use Web

421
00:19:46,230 --> 00:19:49,020
Audio support, and you just said
the audio tag doesn't cut

422
00:19:49,020 --> 00:19:53,990
it for you, leave a not saying
what your use case is.

423
00:19:53,990 --> 00:19:56,680
What is that you want to build,
so people have a better

424
00:19:56,680 --> 00:20:01,150
idea as far as what is the
possibility of this feature?

425
00:20:01,150 --> 00:20:03,870
I've heard a lot of people say
that Web Audio API makes a lot

426
00:20:03,870 --> 00:20:09,700
sense in desktop settings, but
on a phone or a tablet, it's

427
00:20:09,700 --> 00:20:10,540
not as obvious.

428
00:20:10,540 --> 00:20:13,590
So having a broader
understanding of what people

429
00:20:13,590 --> 00:20:17,370
are going to make would help a
lot as far as helping people

430
00:20:17,370 --> 00:20:21,672
understand the priority
of this should be.

431
00:20:21,672 --> 00:20:25,510
SAM DUTTON: If you're in London,
go to the Science

432
00:20:25,510 --> 00:20:27,380
Museum and check out--

433
00:20:27,380 --> 00:20:29,380
PAUL KINLAN: You know, I should
have said that, man.

434
00:20:29,380 --> 00:20:30,230
SAM DUTTON: Paul's your man--

435
00:20:30,230 --> 00:20:32,085
PAUL KINLAN: Check out the
Science Museum, Chrome Weblab.

436
00:20:32,085 --> 00:20:32,800
It's awesome.

437
00:20:32,800 --> 00:20:33,320
SAM DUTTON: It's really nice.

438
00:20:33,320 --> 00:20:34,120
PAUL IRISH: What is it?

439
00:20:34,120 --> 00:20:36,410
PAUL KINLAN: It's five, real
world, interactive

440
00:20:36,410 --> 00:20:38,570
experiments, Chrome experiments
that you can

441
00:20:38,570 --> 00:20:40,520
interact with from anywhere
in the world on the web or

442
00:20:40,520 --> 00:20:42,490
interact with directly from
the Science Museum.

443
00:20:42,490 --> 00:20:45,090
There's an interactive
orchestra, sand drawing box,

444
00:20:45,090 --> 00:20:46,990
which you take a picture
of your face,

445
00:20:46,990 --> 00:20:48,470
draw it in the sand.

446
00:20:48,470 --> 00:20:50,410
You have to go check it out.

447
00:20:50,410 --> 00:20:51,130
It's really cool.

448
00:20:51,130 --> 00:20:51,900
It's beautiful as all.

449
00:20:51,900 --> 00:20:52,970
PAUL LEWIS: In the meantime,
if you can't,

450
00:20:52,970 --> 00:20:56,192
chromeweblab.com, would
be the place to visit.

451
00:20:56,192 --> 00:20:59,010
PAUL IRISH: We went there
just last night.

452
00:20:59,010 --> 00:21:00,590
And it was totally cool.

453
00:21:00,590 --> 00:21:02,690
Got an understanding of how
everything was built, all

454
00:21:02,690 --> 00:21:05,970
built with Chrome and web
technologies, even some

455
00:21:05,970 --> 00:21:07,910
Node.js and Arduino in there.

456
00:21:07,910 --> 00:21:09,890
PAUL KINLAN: So we'll do some
Hangouts, as well, soon, with

457
00:21:09,890 --> 00:21:12,200
some of the people who have
built the project.

458
00:21:12,200 --> 00:21:13,980
I've haven't got an exact ETA
when it's going to happen.

459
00:21:13,980 --> 00:21:15,915
ADDY OSMANI: Are they going to
talk us through how these

460
00:21:15,915 --> 00:21:16,471
things were used?

461
00:21:16,471 --> 00:21:20,690
PAUL KINLAN: Yeah, we want to
do one talk per experiment,

462
00:21:20,690 --> 00:21:23,982
from top to bottom, from client
to server, show you how

463
00:21:23,982 --> 00:21:24,515
it was built.

464
00:21:24,515 --> 00:21:25,345
PAUL IRISH: So neat.

465
00:21:25,345 --> 00:21:28,232
PAUL KINLAN: It's
going to be fun.

466
00:21:28,232 --> 00:21:33,070
PAUL IRISH: Next question, Simon
asks about some of the

467
00:21:33,070 --> 00:21:37,040
new Canvas functionality that's
been added to the spec.

468
00:21:37,040 --> 00:21:41,170
I think this happened circa
March, April, is when it

469
00:21:41,170 --> 00:21:42,680
actually hit the spec.

470
00:21:42,680 --> 00:21:45,950
There's new functionality
and features for

471
00:21:45,950 --> 00:21:49,740
Canvas that are in there.

472
00:21:49,740 --> 00:21:53,050
But I don't think we've seen
it in any browser yet.

473
00:21:53,050 --> 00:21:55,876
As far as ETA, I can't say.

474
00:21:55,876 --> 00:21:57,720
I just don't know.

475
00:21:57,720 --> 00:22:03,120
But the best way to check this
out on the WebKit tracker.

476
00:22:03,120 --> 00:22:04,560
So what I just did is I
just looked up one of

477
00:22:04,560 --> 00:22:06,550
these, found a ticket.

478
00:22:06,550 --> 00:22:11,050
Right now it's assigned to Gene
Jackson, who is commonly

479
00:22:11,050 --> 00:22:13,450
a spec editor for
a lot of specs.

480
00:22:13,450 --> 00:22:15,960
And he has a lot of them
assigned to him.

481
00:22:15,960 --> 00:22:20,260
So it looks like there's
certainly interest from

482
00:22:20,260 --> 00:22:21,820
implementers.

483
00:22:21,820 --> 00:22:24,660
But I haven't seen any
patches prepared yet,

484
00:22:24,660 --> 00:22:26,740
so watch the tickets.

485
00:22:26,740 --> 00:22:29,198
And that's as much as
we know right now.

486
00:22:29,198 --> 00:22:32,490

487
00:22:32,490 --> 00:22:36,750
If you're just joining
us, hello.

488
00:22:36,750 --> 00:22:39,030
We are going through a
bunch of questions.

489
00:22:39,030 --> 00:22:43,220
You go to
developers.google.com/live,

490
00:22:43,220 --> 00:22:47,170
click on are Chrome Office
Hours, and there's a bunch of

491
00:22:47,170 --> 00:22:49,870
questions you can vote
up, down, and ask.

492
00:22:49,870 --> 00:22:51,610
PAUL KINLAN: There are
quite a few now.

493
00:22:51,610 --> 00:22:52,045
It's good.

494
00:22:52,045 --> 00:22:56,540
PAUL IRISH: Vote up
and down more.

495
00:22:56,540 --> 00:22:58,190
Upsell.

496
00:22:58,190 --> 00:23:02,000
SAM DUTTON: Who is going
to take this next one?

497
00:23:02,000 --> 00:23:03,072
Bunch of questions.

498
00:23:03,072 --> 00:23:06,010
PAUL IRISH: This is good.

499
00:23:06,010 --> 00:23:13,750
Mosen from LA, he has asked some
stuff about Web Forms.

500
00:23:13,750 --> 00:23:20,120
First, input type color added to
HTML5 spec a long time ago.

501
00:23:20,120 --> 00:23:27,060
It's been implemented in
Chrome and WebKit?

502
00:23:27,060 --> 00:23:28,130
I know about Chrome.

503
00:23:28,130 --> 00:23:32,060
I'm not sure about Safari
and other ports.

504
00:23:32,060 --> 00:23:35,050
But it, right now, brings up
the operating systems color

505
00:23:35,050 --> 00:23:37,260
picker widget.

506
00:23:37,260 --> 00:23:39,560
Mosen is asking, why does
it do this versus

507
00:23:39,560 --> 00:23:43,331
your own color picker?

508
00:23:43,331 --> 00:23:45,030
PAUL KINLAN: When he says, your
own color picker, does he

509
00:23:45,030 --> 00:23:49,960
mean one that you'd write
yourself or like a

510
00:23:49,960 --> 00:23:50,860
standardized Chrome one?

511
00:23:50,860 --> 00:23:53,592
ADDY OSMANI: I guess he means a
general one, something that

512
00:23:53,592 --> 00:23:56,640
might write tehmselves.

513
00:23:56,640 --> 00:23:57,620
PAUL IRISH: I don't know.

514
00:23:57,620 --> 00:23:58,800
I don't have a great answer.

515
00:23:58,800 --> 00:24:03,490
My guess is that it's probably
better for all browsers to use

516
00:24:03,490 --> 00:24:06,600
the native operating systems
picker than all browsers have

517
00:24:06,600 --> 00:24:10,110
inconsistent color pickers with
different functionality.

518
00:24:10,110 --> 00:24:12,900
When you leave it up the OS you
present something that is

519
00:24:12,900 --> 00:24:15,585
probably more familiar
to the user than what

520
00:24:15,585 --> 00:24:17,780
one implementer thought.

521
00:24:17,780 --> 00:24:19,903
And so I think that consistency
is pleasant.

522
00:24:19,903 --> 00:24:23,150
Plus it probably is nicer to get
that feature out quicker,

523
00:24:23,150 --> 00:24:26,025
because you can leverage
something instead of rolling

524
00:24:26,025 --> 00:24:28,460
it all from scratch.

525
00:24:28,460 --> 00:24:33,930
Mosen also asked about input
type week and type time.

526
00:24:33,930 --> 00:24:35,460
Those are not supported well.

527
00:24:35,460 --> 00:24:36,660
Type date is.

528
00:24:36,660 --> 00:24:39,680
And why that is, I think they're
just a matter of

529
00:24:39,680 --> 00:24:41,390
priorities.

530
00:24:41,390 --> 00:24:43,660
Everyone needs a
date in there.

531
00:24:43,660 --> 00:24:45,157
ADDY OSMANI: It's a
matter of time.

532
00:24:45,157 --> 00:24:46,654
PAUL KINLAN: Yeah, it's
a matter of time.

533
00:24:46,654 --> 00:24:47,652
PAUL IRISH: I like it.

534
00:24:47,652 --> 00:24:48,650
PAUL LEWIS: Sounds good.

535
00:24:48,650 --> 00:24:49,648
PAUL KINLAN: Yeah, it
was good, wasn't it?

536
00:24:49,648 --> 00:24:53,660
PAUL IRISH: Everyone needs date
pickers, and so laying

537
00:24:53,660 --> 00:24:55,910
that first certainly
made sense.

538
00:24:55,910 --> 00:24:58,860
There are tickets.

539
00:24:58,860 --> 00:25:06,620
I think I have a link, on the
Web Kit Bug Tracker, ticket

540
00:25:06,620 --> 00:25:08,900
number 86990.

541
00:25:08,900 --> 00:25:11,135
Actually, if I can show you.

542
00:25:11,135 --> 00:25:15,000
Can we bring up my screen?

543
00:25:15,000 --> 00:25:16,250
Great.

544
00:25:16,250 --> 00:25:31,225

545
00:25:31,225 --> 00:25:31,490
Cool.

546
00:25:31,490 --> 00:25:33,690
It's coming up in
just a moment.

547
00:25:33,690 --> 00:25:35,300
So right now, this ticket--

548
00:25:35,300 --> 00:25:46,940

549
00:25:46,940 --> 00:25:52,810
And of my favorite features is
to view the dependency tree.

550
00:25:52,810 --> 00:25:57,510
So for any ticket you can
understand what are the things

551
00:25:57,510 --> 00:25:59,940
that have to happen before this
ticket can get closed and

552
00:25:59,940 --> 00:26:01,030
patch plan this?

553
00:26:01,030 --> 00:26:02,460
What is this blocking?

554
00:26:02,460 --> 00:26:06,260
And dependency trees, on the
Web Kit Tracker are pretty

555
00:26:06,260 --> 00:26:09,400
nice to understand how the
whole thing will be

556
00:26:09,400 --> 00:26:11,650
implemented and the progress
of something.

557
00:26:11,650 --> 00:26:19,490
So, in this case, we can do
that, see what's already been

558
00:26:19,490 --> 00:26:20,825
resolved in this tree.

559
00:26:20,825 --> 00:26:28,240
And you can see that quite a few
things, a good 90% of what

560
00:26:28,240 --> 00:26:31,460
is needed for this feature
is complete.

561
00:26:31,460 --> 00:26:35,820
So take a look at that.

562
00:26:35,820 --> 00:26:40,270
ADDY OSMANI: The next question
is about Yeoman.

563
00:26:40,270 --> 00:26:43,110
Louie Lopez from Spain writes,
what kind of support shall we

564
00:26:43,110 --> 00:26:44,400
expect for AngularJS?

565
00:26:44,400 --> 00:26:45,630
Good question.

566
00:26:45,630 --> 00:26:49,260
So with V1 of Yeoman, we are
going to be including a really

567
00:26:49,260 --> 00:26:53,540
nice scaffold for AngularJS,
which will hopefully let you

568
00:26:53,540 --> 00:26:56,520
do a little bit of what an
existing project called

569
00:26:56,520 --> 00:26:58,040
Angular-Seed lets you do.

570
00:26:58,040 --> 00:27:01,770
Which is sort of scaffold out
a brand new Angular project

571
00:27:01,770 --> 00:27:03,180
and maybe one or two
other things.

572
00:27:03,180 --> 00:27:05,780
We're actually actively working
with the Angular team

573
00:27:05,780 --> 00:27:09,190
to try getting a little boiler
plate that has best practices

574
00:27:09,190 --> 00:27:10,000
into there.

575
00:27:10,000 --> 00:27:11,920
And so our support for it out
of the box is going to be

576
00:27:11,920 --> 00:27:13,400
pretty decent.

577
00:27:13,400 --> 00:27:16,470
For anybody that sort of is
more concerned with other

578
00:27:16,470 --> 00:27:19,970
frameworks, like perhaps
Backbone or Ember, we're going

579
00:27:19,970 --> 00:27:22,740
to, hopefully, in the future,
work with the people involved

580
00:27:22,740 --> 00:27:26,400
in those projects to create
similar scaffolds.

581
00:27:26,400 --> 00:27:29,120
But we've been working with
proof of concepts that already

582
00:27:29,120 --> 00:27:30,340
work with Backbone and Ember.

583
00:27:30,340 --> 00:27:32,740
So far, they work great.

584
00:27:32,740 --> 00:27:35,350
And I think it's just going to
be the case of, once Yeoman is

585
00:27:35,350 --> 00:27:37,450
out, you'll start to see more
of these generators and

586
00:27:37,450 --> 00:27:39,742
scaffolds come out soon
after, hopefully.

587
00:27:39,742 --> 00:27:42,490
PAUL LEWIS: And if somebody is
not familiar with what Yeoman

588
00:27:42,490 --> 00:27:45,800
is, as a tool, could you give
us like the elevator pitch?

589
00:27:45,800 --> 00:27:46,630
ADDY OSMANI: Yeah, of course.

590
00:27:46,630 --> 00:27:49,970
So Yeoman is an opinionated
workflow for developers that

591
00:27:49,970 --> 00:27:51,710
will, hopefully, help them
build more beautiful

592
00:27:51,710 --> 00:27:52,940
applications.

593
00:27:52,940 --> 00:27:55,220
We try to take a look
at aspects of

594
00:27:55,220 --> 00:27:57,710
their development process.

595
00:27:57,710 --> 00:28:00,350
Everybody needs a build process
of some sort, using a

596
00:28:00,350 --> 00:28:01,760
build tool.

597
00:28:01,760 --> 00:28:05,320
People like the idea of not
having to manually write out a

598
00:28:05,320 --> 00:28:07,620
lot of the boiler-plate coding
needed for projects.

599
00:28:07,620 --> 00:28:10,430
So Yeoman is also to going
to take care of that.

600
00:28:10,430 --> 00:28:12,750
We've got a bunch of other
neat stuff in there.

601
00:28:12,750 --> 00:28:15,650
We've got support for headless
WebKit testing.

602
00:28:15,650 --> 00:28:18,600
We've got a watch process.

603
00:28:18,600 --> 00:28:21,870
You're able to write, for
example, Coffee Script or

604
00:28:21,870 --> 00:28:25,090
Compass and have that
automatically compile using

605
00:28:25,090 --> 00:28:25,640
[? iReload ?]

606
00:28:25,640 --> 00:28:26,830
and a bunch of other things.

607
00:28:26,830 --> 00:28:29,040
So you won't even have to go
back and manually compile

608
00:28:29,040 --> 00:28:30,020
things yourself.

609
00:28:30,020 --> 00:28:32,620
But we've got some other
features in there too.

610
00:28:32,620 --> 00:28:34,496
PAUL KINLAN: Does it support
Web Intents?

611
00:28:34,496 --> 00:28:35,390
SAM DUTTON: Yes.

612
00:28:35,390 --> 00:28:36,180
ADDY OSMANI: Yes.

613
00:28:36,180 --> 00:28:36,950
PAUL KINLAN: Yes.

614
00:28:36,950 --> 00:28:39,740
ADDY OSMANI: That was
the first feature,

615
00:28:39,740 --> 00:28:41,056
before anything else.

616
00:28:41,056 --> 00:28:44,032
SAM DUTTON: Shameless.

617
00:28:44,032 --> 00:28:45,411
PAUL KINLAN: It doesn't
matter.

618
00:28:45,411 --> 00:28:46,824
You're not going to actually
launch with it.

619
00:28:46,824 --> 00:28:48,237
ADDY OSMANI: Oh, god no.

620
00:28:48,237 --> 00:28:50,600
PAUL KINLAN: Yeah.

621
00:28:50,600 --> 00:28:51,160
I'll work on it.

622
00:28:51,160 --> 00:28:52,070
I'll get it in.

623
00:28:52,070 --> 00:28:53,489
It'll be good.

624
00:28:53,489 --> 00:28:54,671
ADDY OSMANI: That's
your evenings

625
00:28:54,671 --> 00:28:55,921
cleared up right there.

626
00:28:55,921 --> 00:28:59,165

627
00:28:59,165 --> 00:29:05,920
PAUL IRISH: The next question
comes from JahRomero.

628
00:29:05,920 --> 00:29:12,830
And it's asking, are there any
plans to allow side-by-side

629
00:29:12,830 --> 00:29:16,306
installs of different Chrome
channels on Linux?

630
00:29:16,306 --> 00:29:19,110

631
00:29:19,110 --> 00:29:22,820
So Chrome Canary is available
on Windows and Mac.

632
00:29:22,820 --> 00:29:27,556
And Chrome Canary, I think, is
fantastic for developers.

633
00:29:27,556 --> 00:29:30,390
I know, I run Chrome Stable
and then Chrome Linux

634
00:29:30,390 --> 00:29:32,130
side-by-side all the time.

635
00:29:32,130 --> 00:29:33,625
You guys, is that
how you roll?

636
00:29:33,625 --> 00:29:36,140
PAUL KINLAN: Well, I tend to get
the latest Chromium build

637
00:29:36,140 --> 00:29:37,390
every night from Linux.

638
00:29:37,390 --> 00:29:40,502

639
00:29:40,502 --> 00:29:43,380
PAUL IRISH: So Chrome Canary
works great for Mac and

640
00:29:43,380 --> 00:29:46,324
Windows, but there's a lot
of people on Linux.

641
00:29:46,324 --> 00:29:49,180
And I understand that not having
Canary is a bummer.

642
00:29:49,180 --> 00:29:54,430
There are builds, depending
on what flavor you're on.

643
00:29:54,430 --> 00:30:01,240
I know there is a package that's
maintained for Ubuntu,

644
00:30:01,240 --> 00:30:05,670
for a nightly Chromium build.

645
00:30:05,670 --> 00:30:09,350
And so take a look around
for maintained

646
00:30:09,350 --> 00:30:12,270
unstable Chromium packages.

647
00:30:12,270 --> 00:30:14,200
That updates every night.

648
00:30:14,200 --> 00:30:16,960
Otherwise, there's plenty of
scripts that people have

649
00:30:16,960 --> 00:30:19,865
written, just batch scripts that
go and fetch it on the

650
00:30:19,865 --> 00:30:21,720
fly for you.

651
00:30:21,720 --> 00:30:23,750
Is yours just like you have
it set on chron job?

652
00:30:23,750 --> 00:30:26,215
PAUL KINLAN: I've just got a
bookmark to the directory

653
00:30:26,215 --> 00:30:28,680
where they are, and I download
it when it's up.

654
00:30:28,680 --> 00:30:30,663
But I've seen some scripts,
like shell scripts, which

655
00:30:30,663 --> 00:30:31,405
just, basically, pull it in.

656
00:30:31,405 --> 00:30:32,800
And it will work quite nice.

657
00:30:32,800 --> 00:30:35,076
PAUL IRISH: If you do want an
absolute edge Chromium build,

658
00:30:35,076 --> 00:30:40,390
you can go to
downloadchromium.appspot.com,

659
00:30:40,390 --> 00:30:44,760
which just sniffs out what OS
you're on and gives you one

660
00:30:44,760 --> 00:30:45,490
single click.

661
00:30:45,490 --> 00:30:48,190
Because finding that actual
directory is kind of a pain.

662
00:30:48,190 --> 00:30:49,110
PAUL KINLAN: Yes.

663
00:30:49,110 --> 00:30:50,922
And it changed a while
ago, right?

664
00:30:50,922 --> 00:30:52,215
PAUL IRISH: Yep.

665
00:30:52,215 --> 00:30:55,370
ADDY OSMANI: So Hussein from
Colorado writes, what parts of

666
00:30:55,370 --> 00:30:58,107
the Chrome ecosystem is the
team most excited about--

667
00:30:58,107 --> 00:30:59,061
PAUL KINLAN: Web Intents.

668
00:30:59,061 --> 00:30:59,790
ADDY OSMANI: No.

669
00:30:59,790 --> 00:31:00,980
I haven't finished
the sentence, and

670
00:31:00,980 --> 00:31:02,700
he's already on it.

671
00:31:02,700 --> 00:31:05,640
It doesn't have to be one thing,
Yeoman, AngularJS,

672
00:31:05,640 --> 00:31:07,150
HTML5 features.

673
00:31:07,150 --> 00:31:09,870
I think it will useful
to go around.

674
00:31:09,870 --> 00:31:12,670
I can't imagine what you'd
most interested in.

675
00:31:12,670 --> 00:31:14,640
PAUL KINLAN: So I'm actually
interested in helping

676
00:31:14,640 --> 00:31:17,710
developers just build great
web apps quickly and have

677
00:31:17,710 --> 00:31:19,180
great web apps to talk
to each other.

678
00:31:19,180 --> 00:31:21,800
I mean, that's the problem I've
always face on the web is

679
00:31:21,800 --> 00:31:23,530
that you don't have to do really
deep integrations and

680
00:31:23,530 --> 00:31:25,272
just building all these
things is really hard.

681
00:31:25,272 --> 00:31:27,310
So anything that makes my life
easier, to build great web

682
00:31:27,310 --> 00:31:28,295
apps, is good.

683
00:31:28,295 --> 00:31:32,360
So things like Yeoman,
I'm excited about.

684
00:31:32,360 --> 00:31:33,400
I've used Backbone quite
a bit recently.

685
00:31:33,400 --> 00:31:36,120
I've not really tried Angular,
but I've heard a lot of good

686
00:31:36,120 --> 00:31:37,310
things, those type of things.

687
00:31:37,310 --> 00:31:40,072
Anything that makes
it easy for me.

688
00:31:40,072 --> 00:31:43,250
PAUL LEWIS: Me, I'm
kind of excited--

689
00:31:43,250 --> 00:31:46,190
I guess I'm similar on this, but
WebRTC, for me, is one of

690
00:31:46,190 --> 00:31:46,590
the things.

691
00:31:46,590 --> 00:31:49,376
Because it's quite disruptive
thing to see coming through.

692
00:31:49,376 --> 00:31:51,096
PAUL IRISH: That's
a good answer.

693
00:31:51,096 --> 00:31:54,180
PAUL LEWIS: I'm a big fan of
disruptive stuff, just because

694
00:31:54,180 --> 00:31:56,330
I'm a big believer in what
the browser can do.

695
00:31:56,330 --> 00:31:58,110
And so seeing this stuff
landing in the browser,

696
00:31:58,110 --> 00:32:01,800
without plug-ins, it's
opened so many doors.

697
00:32:01,800 --> 00:32:03,120
So, for me, it's WebRTC
for sure.

698
00:32:03,120 --> 00:32:05,120
PAUL KINLAN: So just on that
point, we've been able to do

699
00:32:05,120 --> 00:32:06,390
things which we've never
been able to do.

700
00:32:06,390 --> 00:32:08,100
And I'm sorry for jumping in.

701
00:32:08,100 --> 00:32:09,620
PAUL LEWIS: That's
good though.

702
00:32:09,620 --> 00:32:10,400
I know where you're going.

703
00:32:10,400 --> 00:32:11,672
PAUL KINLAN: Where am I going?

704
00:32:11,672 --> 00:32:13,058
PAUL LEWIS: I think you'll
go with packaged app.

705
00:32:13,058 --> 00:32:14,100
PAUL KINLAN: I am going
with packaged apps.

706
00:32:14,100 --> 00:32:15,090
We hadn't even planned this.

707
00:32:15,090 --> 00:32:16,072
It's so good.

708
00:32:16,072 --> 00:32:19,270
We just connected.

709
00:32:19,270 --> 00:32:21,450
The latest version of Chrome
Packaged Applications, for

710
00:32:21,450 --> 00:32:26,150
instance, allows access to
network sockets, UDP, TCP.

711
00:32:26,150 --> 00:32:28,575
You have Bluetooth, USB, all
these type of things, which

712
00:32:28,575 --> 00:32:30,600
we've never had in the
browser before.

713
00:32:30,600 --> 00:32:32,183
So yeah, that's another
one I'm very

714
00:32:32,183 --> 00:32:33,490
excited about as well.

715
00:32:33,490 --> 00:32:35,430
And I won't interrupt again.

716
00:32:35,430 --> 00:32:36,850
ADDY OSMANI: Is that
a promise?

717
00:32:36,850 --> 00:32:40,580

718
00:32:40,580 --> 00:32:41,950
I believe you.

719
00:32:41,950 --> 00:32:45,110
I'm most interested in anything
that helps developers

720
00:32:45,110 --> 00:32:48,870
build applications more easily
and that factors into Yeoman.

721
00:32:48,870 --> 00:32:50,950
I'm also really interested
in Web Components.

722
00:32:50,950 --> 00:32:54,650
I see that being the future of
how people, perhaps, create

723
00:32:54,650 --> 00:32:56,260
widgets and applications.

724
00:32:56,260 --> 00:32:58,830
And perhaps there'll be less
of an emphasis on the

725
00:32:58,830 --> 00:33:01,320
frameworks they use and more
about what the browser can

726
00:33:01,320 --> 00:33:02,810
give you right out of the box.

727
00:33:02,810 --> 00:33:04,390
So I think it's going to be
really exciting to see what

728
00:33:04,390 --> 00:33:06,460
happens there.

729
00:33:06,460 --> 00:33:08,180
Paul?

730
00:33:08,180 --> 00:33:10,410
PAUL LEWIS: He's busy going left
while we're going right.

731
00:33:10,410 --> 00:33:11,870
ADDY OSMANI: Just
say, everything.

732
00:33:11,870 --> 00:33:12,900
PAUL IRISH: I know, right?

733
00:33:12,900 --> 00:33:13,830
What are you going to go with?

734
00:33:13,830 --> 00:33:16,155
SAM DUTTON: I'm not
going to tell you.

735
00:33:16,155 --> 00:33:17,710
PAUL KINLAN: Well,
I'll tell you.

736
00:33:17,710 --> 00:33:19,811
He was going to say,
Web Intents.

737
00:33:19,811 --> 00:33:22,150
SAM DUTTON: I was going
to way Web Intents.

738
00:33:22,150 --> 00:33:24,196
PAUL IRISH: I really like
all the things there.

739
00:33:24,196 --> 00:33:25,696
SAM DUTTON: Yeah, me too.

740
00:33:25,696 --> 00:33:30,010
PAUL IRISH: One of the things
about WebRTC though is that--

741
00:33:30,010 --> 00:33:34,500
a small thing, just
a small one--

742
00:33:34,500 --> 00:33:35,390
it's still behind.

743
00:33:35,390 --> 00:33:37,440
You have to go to [INAUDIBLE].

744
00:33:37,440 --> 00:33:38,120
SAM DUTTON: Yeah.

745
00:33:38,120 --> 00:33:39,180
PAUL IRISH: It's still
in Canary?

746
00:33:39,180 --> 00:33:40,040
SAM DUTTON: Beta.

747
00:33:40,040 --> 00:33:42,750
It's in stable, but it's
behind the flags.

748
00:33:42,750 --> 00:33:43,580
PAUL IRISH: It's in stable?

749
00:33:43,580 --> 00:33:44,170
SAM DUTTON: Yeah.

750
00:33:44,170 --> 00:33:45,470
But it's behind flags.

751
00:33:45,470 --> 00:33:47,150
PAUL IRISH: But in Canary
is it behind flags?

752
00:33:47,150 --> 00:33:47,655
SAM DUTTON: Yeah.

753
00:33:47,655 --> 00:33:48,590
In Canary--

754
00:33:48,590 --> 00:33:50,306
oh god, I'm going to
get this wrong.

755
00:33:50,306 --> 00:33:51,360
PAUL KINLAN: I thought beta was
still behind the flags.

756
00:33:51,360 --> 00:33:53,230
ADDY OSMANI: I thought
beta was [INAUDIBLE].

757
00:33:53,230 --> 00:33:54,020
SAM DUTTON: It's complicated.

758
00:33:54,020 --> 00:33:54,325
Sorry.

759
00:33:54,325 --> 00:33:56,620
Just--

760
00:33:56,620 --> 00:33:57,340
a little explanation.

761
00:33:57,340 --> 00:33:59,640
There were originally two flags
you needed to enable to

762
00:33:59,640 --> 00:34:01,020
use WebRTC.

763
00:34:01,020 --> 00:34:01,920
One was MediaStream.

764
00:34:01,920 --> 00:34:03,560
One was PeerConnection.

765
00:34:03,560 --> 00:34:11,639
What's happened is that it's
basically working that, as the

766
00:34:11,639 --> 00:34:13,850
versions of Chrome come through,
you don't need to

767
00:34:13,850 --> 00:34:15,383
enable MediaStream.

768
00:34:15,383 --> 00:34:17,400
But PeerConnection, for the
actual peer-to-peer

769
00:34:17,400 --> 00:34:20,760
communication stuff, still
needs to be enabled.

770
00:34:20,760 --> 00:34:24,215
So what that means is that get
user media is available.

771
00:34:24,215 --> 00:34:28,389
We will be coming with flagless
implementation, but,

772
00:34:28,389 --> 00:34:31,139
for a while, PeerConnection
is behind a flag.

773
00:34:31,139 --> 00:34:32,609
PAUL IRISH: And just
to clarify--

774
00:34:32,609 --> 00:34:35,300
SAM DUTTON: Don't ask me to
remember which specific

775
00:34:35,300 --> 00:34:36,650
versions it's in.

776
00:34:36,650 --> 00:34:37,170
PAUL IRISH: Oh, it's fine.

777
00:34:37,170 --> 00:34:43,590
Just to clarify, get user media
is the evolution of the

778
00:34:43,590 --> 00:34:46,150
device tag from forever ago.

779
00:34:46,150 --> 00:34:46,889
SAM DUTTON: Yeah, kind of.

780
00:34:46,889 --> 00:34:49,830
PAUL IRISH: So it's usually
just part of WebRTC.

781
00:34:49,830 --> 00:34:52,920
But you don't need to be doing
in realtime communication with

782
00:34:52,920 --> 00:34:53,820
anyone else.

783
00:34:53,820 --> 00:34:56,699
You can just be using get user
media as a way to get access

784
00:34:56,699 --> 00:34:57,549
to the camera, microphone--

785
00:34:57,549 --> 00:34:59,105
SAM DUTTON: All that, yeah.

786
00:34:59,105 --> 00:35:01,600
PAUL IRISH: But WebRTC with

787
00:35:01,600 --> 00:35:03,920
PeerConnection is hugely powerful.

788
00:35:03,920 --> 00:35:07,180
And even though it is available
pretty widely now,

789
00:35:07,180 --> 00:35:11,760
behind a flag, I don't think
we've really seen a great

790
00:35:11,760 --> 00:35:13,610
killer app with it.

791
00:35:13,610 --> 00:35:16,560
SAM DUTTON: Yeah, come on.

792
00:35:16,560 --> 00:35:20,860
PAUL IRISH: The fact that I
connect to a peer, not send

793
00:35:20,860 --> 00:35:23,160
all my bandwidth through a
server, so you can create,

794
00:35:23,160 --> 00:35:28,250
essentially, a video chat app
that can scale beautifully.

795
00:35:28,250 --> 00:35:31,370
Because all the connection
is peer-to-peer.

796
00:35:31,370 --> 00:35:36,580
With things like noise
cancellation, duplex sound--

797
00:35:36,580 --> 00:35:37,960
SAM DUTTON: Echo cancellation
and so on--

798
00:35:37,960 --> 00:35:38,805
PAUL KINLAN: [INAUDIBLE].

799
00:35:38,805 --> 00:35:40,740
PAUL IRISH: And variable
bit rate, based on

800
00:35:40,740 --> 00:35:42,160
your connection speed.

801
00:35:42,160 --> 00:35:44,860
Them amount of technology that's
in there, things that

802
00:35:44,860 --> 00:35:49,132
you don't have to worry about
is pretty incredible.

803
00:35:49,132 --> 00:35:52,158
PAUL KINLAN: So one thing that
we would love to see is,

804
00:35:52,158 --> 00:35:55,720
obviously, because there's the
PeerConnection API, and

805
00:35:55,720 --> 00:35:56,390
[INAUDIBLE] and all
that type of stuff

806
00:35:56,390 --> 00:35:57,490
you can build a server.

807
00:35:57,490 --> 00:36:00,050
Like a client and the
peer-to-peer thing, which is

808
00:36:00,050 --> 00:36:04,050
actually not a web browser,
it's just a web servelet.

809
00:36:04,050 --> 00:36:05,988
Render a display buffer
to it, send it out.

810
00:36:05,988 --> 00:36:06,442
I think it would be brilliant.

811
00:36:06,442 --> 00:36:07,350
SAM DUTTON: That
is interesting.

812
00:36:07,350 --> 00:36:08,692
PAUL KINLAN: You could just do
a whole lot of stuff with

813
00:36:08,692 --> 00:36:09,580
that, and it would be cool.

814
00:36:09,580 --> 00:36:10,650
SAM DUTTON: One of
the things--

815
00:36:10,650 --> 00:36:12,426
PAUL KINLAN: We need to
experiment with it, right?

816
00:36:12,426 --> 00:36:13,180
People need to do that.

817
00:36:13,180 --> 00:36:13,785
Let's test it.

818
00:36:13,785 --> 00:36:15,880
SAM DUTTON: One of the things,
just to reiterate a bit,

819
00:36:15,880 --> 00:36:19,370
WebRTC, this is all about,
potentially, direct

820
00:36:19,370 --> 00:36:20,390
peer-to-peer connection.

821
00:36:20,390 --> 00:36:23,392
But there's a whole stack of
stuff built into WebRTC to

822
00:36:23,392 --> 00:36:26,890
cope with NATraversal and
communication of streaming

823
00:36:26,890 --> 00:36:31,270
data from behind the
firewalls and to

824
00:36:31,270 --> 00:36:32,800
make that really seamless.

825
00:36:32,800 --> 00:36:34,260
That's one of the
great strengths.

826
00:36:34,260 --> 00:36:36,150
The other thing we'll be seeing
later in the year, we

827
00:36:36,150 --> 00:36:41,340
hope or certainly is planned,
is DataChannel API.

828
00:36:41,340 --> 00:36:44,620
At the moment, we've seen
WebRTC apps that

829
00:36:44,620 --> 00:36:47,140
use the video stuff.

830
00:36:47,140 --> 00:36:51,610
And what's planned is this API
called DataChannel, which does

831
00:36:51,610 --> 00:36:55,684
the same thing, but for any
kind of arbitrary data, so

832
00:36:55,684 --> 00:36:56,530
incredibly powerful.

833
00:36:56,530 --> 00:36:57,830
PAUL KINLAN: Over peer-to-peer
WebSockets?

834
00:36:57,830 --> 00:37:00,680
SAM DUTTON: Yeah, peer-to-peer
data.

835
00:37:00,680 --> 00:37:01,500
PAUL KINLAN: Right--

836
00:37:01,500 --> 00:37:02,585
SAM DUTTON: Oh, come on.

837
00:37:02,585 --> 00:37:03,456
PAUL KINLAN: You know when I
said I wouldn't interrupt?

838
00:37:03,456 --> 00:37:04,580
We've actually had a remote
gate crasher.

839
00:37:04,580 --> 00:37:08,740
Seth Wright wants us to say
Dart is his most exciting

840
00:37:08,740 --> 00:37:09,470
platform feature.

841
00:37:09,470 --> 00:37:11,540
ADDY OSMANI: That
surprises me.

842
00:37:11,540 --> 00:37:13,770
SAM DUTTON: If you haven't
used Dart, give it a go.

843
00:37:13,770 --> 00:37:15,264
Try it out.

844
00:37:15,264 --> 00:37:19,436
I got to give one more plug
since it's my turn.

845
00:37:19,436 --> 00:37:22,140
I've got to mention the track
element, which is really

846
00:37:22,140 --> 00:37:23,000
interesting.

847
00:37:23,000 --> 00:37:28,380
I think if you haven't had a
look at this, it's a really

848
00:37:28,380 --> 00:37:36,684
simple way to get synchronized
timed metadata in with media ,

849
00:37:36,684 --> 00:37:40,570
such as video and audio, so
simple use cases, stuff like

850
00:37:40,570 --> 00:37:42,190
captions, subtitles.

851
00:37:42,190 --> 00:37:45,785
But what makes it, for me,
really interesting, aside from

852
00:37:45,785 --> 00:37:51,080
the accessibility stuff, is
the ability to use timed

853
00:37:51,080 --> 00:37:52,750
metadata of any kind.

854
00:37:52,750 --> 00:37:58,390
So you can have metadata that
relates to times within media

855
00:37:58,390 --> 00:38:01,100
and do anything with that.

856
00:38:01,100 --> 00:38:01,920
PAUL KINLAN: Do you want to tell
them about your example

857
00:38:01,920 --> 00:38:02,400
that you did?

858
00:38:02,400 --> 00:38:03,890
SAM DUTTON: Yeah.

859
00:38:03,890 --> 00:38:04,390
Shameless plug--

860
00:38:04,390 --> 00:38:05,020
PAUL KINLAN: Yeah, go on.

861
00:38:05,020 --> 00:38:05,490
It's good.

862
00:38:05,490 --> 00:38:09,970
SAM DUTTON: Have a look
on HTML5 Rocks.

863
00:38:09,970 --> 00:38:12,790
There's an article about
the track elements.

864
00:38:12,790 --> 00:38:16,570
We did one in particular based
on some work some guys did

865
00:38:16,570 --> 00:38:18,391
here at Google.

866
00:38:18,391 --> 00:38:23,090
If you go to
samdutton.com/maptrack, you'll

867
00:38:23,090 --> 00:38:28,750
see a demo there, which, like a
guy ride around on a cycle,

868
00:38:28,750 --> 00:38:30,960
around the Mt View
Google campus.

869
00:38:30,960 --> 00:38:35,170
And you can see that
synchronized with a pointer on

870
00:38:35,170 --> 00:38:37,060
a map, and also like StreetView

871
00:38:37,060 --> 00:38:37,950
of where he's going.

872
00:38:37,950 --> 00:38:39,950
And that's all done using
the track element.

873
00:38:39,950 --> 00:38:41,370
PAUL KINLAN: You'll see all
that, the geolocation, there's

874
00:38:41,370 --> 00:38:42,120
the timed elements--

875
00:38:42,120 --> 00:38:43,000
SAM DUTTON: It's
fairly simple.

876
00:38:43,000 --> 00:38:44,370
It just had a geo file--

877
00:38:44,370 --> 00:38:46,010
I used an XML file--

878
00:38:46,010 --> 00:38:50,380
to create, in JavaScript,
the track data.

879
00:38:50,380 --> 00:38:51,780
And yeah, that's it.

880
00:38:51,780 --> 00:38:55,150
You'll need to have
Canary for that.

881
00:38:55,150 --> 00:38:58,600
There's, again, a whole stack
stuff we're going to see.

882
00:38:58,600 --> 00:39:00,150
Bring it on.

883
00:39:00,150 --> 00:39:00,670
Good implementations.

884
00:39:00,670 --> 00:39:02,990
ADDY OSMANI: I guess, since
we're talking about video and

885
00:39:02,990 --> 00:39:04,630
WebRTC, this is an interesting
question for

886
00:39:04,630 --> 00:39:06,820
Sam from Adam Bradley.

887
00:39:06,820 --> 00:39:10,030
Do you see solutions like
PhoneGap still being useful if

888
00:39:10,030 --> 00:39:13,270
we're able to capture audio and
video now from new HTML5

889
00:39:13,270 --> 00:39:16,665
input fields and features?

890
00:39:16,665 --> 00:39:17,595
SAM DUTTON: Yeah.

891
00:39:17,595 --> 00:39:19,840
In the short term, certainly.

892
00:39:19,840 --> 00:39:21,340
I mean, I don't see
these things as

893
00:39:21,340 --> 00:39:22,490
excluding each other.

894
00:39:22,490 --> 00:39:27,770
But I can see that the
functionality we get with

895
00:39:27,770 --> 00:39:31,400
MediaStream, if you're using get
user media, that's the API

896
00:39:31,400 --> 00:39:34,350
behind that MediaStream.

897
00:39:34,350 --> 00:39:36,830
There's a lot of potential to
that stuff which is built

898
00:39:36,830 --> 00:39:37,550
right into the browser.

899
00:39:37,550 --> 00:39:39,290
And we'll see wider
implementations across

900
00:39:39,290 --> 00:39:39,740
platforms--

901
00:39:39,740 --> 00:39:41,500
PAUL KINLAN: I think it
depends right now.

902
00:39:41,500 --> 00:39:44,930
It's like, if you're building
something that's specific for

903
00:39:44,930 --> 00:39:48,390
Android and want specific
Android integrations, then

904
00:39:48,390 --> 00:39:50,110
we're not quite there
just yet.

905
00:39:50,110 --> 00:39:53,870
But look at the pace of change
we've had recently, just to

906
00:39:53,870 --> 00:39:54,210
get where we're going.

907
00:39:54,210 --> 00:39:55,000
It's pretty cool.

908
00:39:55,000 --> 00:39:59,290
PAUL IRISH: The published
goal of PhoneGap is

909
00:39:59,290 --> 00:40:01,160
to make itself obsolete.

910
00:40:01,160 --> 00:40:05,282
So they want that.

911
00:40:05,282 --> 00:40:08,600
So hopefully that happens.

912
00:40:08,600 --> 00:40:12,392
SAM DUTTON: Right, where are
we with the questions?

913
00:40:12,392 --> 00:40:14,360
PAUL KINLAN: We're on
[INAUDIBLE] updates.

914
00:40:14,360 --> 00:40:16,450
PAUL IRISH: We got a
lot of questions.

915
00:40:16,450 --> 00:40:24,400
So the next one is GreyGhost
Visuals asks why Chrome does

916
00:40:24,400 --> 00:40:28,827
not support the rem unit inside
media queries and links

917
00:40:28,827 --> 00:40:31,000
to a little demo where
that doesn't work.

918
00:40:31,000 --> 00:40:32,890
PAUL KINLAN: So I'm naive.

919
00:40:32,890 --> 00:40:35,093
I don't know what
the rem unit is.

920
00:40:35,093 --> 00:40:36,625
Is it relative em's?

921
00:40:36,625 --> 00:40:37,490
PAUL IRISH: Relative em's.

922
00:40:37,490 --> 00:40:41,150
PAUL KINLAN: Is that
what it is?

923
00:40:41,150 --> 00:40:42,927
PAUL IRISH: Jonathan Snook
has a really good

924
00:40:42,927 --> 00:40:45,030
article about it.

925
00:40:45,030 --> 00:40:46,410
It was a more recent one.

926
00:40:46,410 --> 00:40:47,802
I'm not sure why.

927
00:40:47,802 --> 00:40:49,745
PAUL KINLAN: Why would you
need it in a media query?

928
00:40:49,745 --> 00:40:51,470
Is that in the actual filter--

929
00:40:51,470 --> 00:40:54,000
PAUL IRISH: You're defining
a width that you want to

930
00:40:54,000 --> 00:40:55,520
manipulate, that things are
going to change in.

931
00:40:55,520 --> 00:40:57,090
So I think, actually,
for the media query

932
00:40:57,090 --> 00:41:02,698
condition, not the payload.

933
00:41:02,698 --> 00:41:05,420
PAUL KINLAN: But then, my only
question is, you normally put

934
00:41:05,420 --> 00:41:08,550
media query stuff at the top of
the page, where you don't

935
00:41:08,550 --> 00:41:09,550
even need a relative em.

936
00:41:09,550 --> 00:41:12,090
You just need a normal em unit,
because that's where

937
00:41:12,090 --> 00:41:15,818
it's based from, is it not?

938
00:41:15,818 --> 00:41:23,005
PAUL IRISH: What I would suggest
on this is filing a

939
00:41:23,005 --> 00:41:28,140
ticket and link it
to your demo.

940
00:41:28,140 --> 00:41:30,440
So this is actually the first
time that I've heard that this

941
00:41:30,440 --> 00:41:32,030
is an issue.

942
00:41:32,030 --> 00:41:38,850
So it may not be on the mind of
anyone that could work on

943
00:41:38,850 --> 00:41:40,100
it and fix it.

944
00:41:40,100 --> 00:41:45,060
So file a ticket and just ping
me afterwards, and I'll try

945
00:41:45,060 --> 00:41:46,888
and find an engineer who
can take a look.

946
00:41:46,888 --> 00:41:50,600

947
00:41:50,600 --> 00:41:53,864
We got three more minutes.

948
00:41:53,864 --> 00:41:55,130
PAUL KINLAN: Can I answer one?

949
00:41:55,130 --> 00:41:57,680
I promised I'd answer some
Web Intents questions.

950
00:41:57,680 --> 00:41:58,400
PAUL IRISH: Yeah, you did.

951
00:41:58,400 --> 00:41:59,217
PAUL KINLAN: Cheers, dudes.

952
00:41:59,217 --> 00:42:00,670
So it says, I'm currently
implementing a proof of

953
00:42:00,670 --> 00:42:02,020
concept with Web Intents.

954
00:42:02,020 --> 00:42:04,104
And I'm wondering is it
correct that I have to

955
00:42:04,104 --> 00:42:05,490
implement a Chrome extension
to support an

956
00:42:05,490 --> 00:42:08,240
intent at the moment?

957
00:42:08,240 --> 00:42:10,120
Yeah, it's pretty correct
at the moment.

958
00:42:10,120 --> 00:42:13,555
We don't have the full
tag support in any of

959
00:42:13,555 --> 00:42:14,240
the browsers anyway.

960
00:42:14,240 --> 00:42:16,530
We have a JavaScript shim
which emulates.

961
00:42:16,530 --> 00:42:21,440
But that's incompatible with
pure Chrome implementation.

962
00:42:21,440 --> 00:42:23,530
So right now, you have to either
have a Chrome extension

963
00:42:23,530 --> 00:42:27,780
or a packaged app, where you
will define the actions and

964
00:42:27,780 --> 00:42:29,820
the data type that you want to
work on and what URLs they

965
00:42:29,820 --> 00:42:33,980
will launch inside the
manifest itself.

966
00:42:33,980 --> 00:42:38,110
So, yes, right now, our ultimate
goal is to have the

967
00:42:38,110 --> 00:42:40,553
manifest as an option, but have
something on the open

968
00:42:40,553 --> 00:42:44,475
web, which will let you register
functionality with

969
00:42:44,475 --> 00:42:46,350
the browser of your
application.

970
00:42:46,350 --> 00:42:48,090
So we're not way off.

971
00:42:48,090 --> 00:42:50,980
I mean, if you want to build
stuff, here today, Chrome,

972
00:42:50,980 --> 00:42:53,350
Chrome extensions, Chrome apps,
they're pretty good.

973
00:42:53,350 --> 00:42:55,500
They can be packaged apps or
hosted apps as well, so it

974
00:42:55,500 --> 00:43:01,510
doesn't have to be packaged,
which most people think it is.

975
00:43:01,510 --> 00:43:04,550
PAUL LEWIS: And is it worth
mentioning what Web Intents is

976
00:43:04,550 --> 00:43:05,865
for the uninitiated?

977
00:43:05,865 --> 00:43:08,410
PAUL KINLAN: There is no
one who is uninitiated.

978
00:43:08,410 --> 00:43:09,820
I keep talking about
it all the time.

979
00:43:09,820 --> 00:43:10,570
PAUL LEWIS: Really?

980
00:43:10,570 --> 00:43:11,820
Hadn't noticed.

981
00:43:11,820 --> 00:43:14,160

982
00:43:14,160 --> 00:43:17,280
PAUL KINLAN: So Web Intents,
they're basically a way for

983
00:43:17,280 --> 00:43:20,160
you to connect applications,
essentially.

984
00:43:20,160 --> 00:43:22,200
It's an easy way to connect
web applications.

985
00:43:22,200 --> 00:43:25,310
The idea, basically, is that
you'll have two applications,

986
00:43:25,310 --> 00:43:27,700
which don't need to know about
each other to be able to talk.

987
00:43:27,700 --> 00:43:31,110
So you might share a link from
a web page, and you, as the

988
00:43:31,110 --> 00:43:33,415
user, get to choose your
preferred service for link

989
00:43:33,415 --> 00:43:35,640
sharing, not the ones
that are deeply

990
00:43:35,640 --> 00:43:36,890
integrated into the website.

991
00:43:36,890 --> 00:43:39,020

992
00:43:39,020 --> 00:43:41,308
It's like a discovery mechanism
for applications.

993
00:43:41,308 --> 00:43:43,670
That's the highest
way of saying it.

994
00:43:43,670 --> 00:43:45,675
And the pitch I normally do
is if you're familiar with

995
00:43:45,675 --> 00:43:49,154
Android Intents, it's Android
Intents but for the web.

996
00:43:49,154 --> 00:43:50,130
So that's the easiest way.

997
00:43:50,130 --> 00:43:52,930
And then another Web Intents
question, someone's given me a

998
00:43:52,930 --> 00:43:54,400
compliment that says--

999
00:43:54,400 --> 00:43:57,255
ADDY OSMANI: That's
not a question.

1000
00:43:57,255 --> 00:43:58,510
PAUL KINLAN: It says, where
can I get the awesome--

1001
00:43:58,510 --> 00:43:59,880
I didn't get a compliment?

1002
00:43:59,880 --> 00:44:02,320
Fred, from London, where can I
get an awesome laptop skin?

1003
00:44:02,320 --> 00:44:05,310
I thought he said,
I was awesome.

1004
00:44:05,310 --> 00:44:08,750
Fred, from London, I can
probably send you one.

1005
00:44:08,750 --> 00:44:10,020
We'll meet up or something.

1006
00:44:10,020 --> 00:44:10,670
PAUL IRISH: [INAUDIBLE]?

1007
00:44:10,670 --> 00:44:12,005
PAUL KINLAN: He's in London,
so it's probably cool.

1008
00:44:12,005 --> 00:44:14,530

1009
00:44:14,530 --> 00:44:15,260
We'll sort something out.

1010
00:44:15,260 --> 00:44:16,100
I think we got some
gel skins here.

1011
00:44:16,100 --> 00:44:18,056
If not, our producer will
send us something.

1012
00:44:18,056 --> 00:44:18,590
PAUL IRISH: We've got a few.

1013
00:44:18,590 --> 00:44:26,710
And then we can actually post
the artwork file and you can

1014
00:44:26,710 --> 00:44:28,700
go order a custom one
from gelaskins.com.

1015
00:44:28,700 --> 00:44:31,700

1016
00:44:31,700 --> 00:44:34,241
Let's do that.

1017
00:44:34,241 --> 00:44:35,807
PAUL KINLAN: There is, actually,
one question right

1018
00:44:35,807 --> 00:44:36,640
at the bottom.

1019
00:44:36,640 --> 00:44:38,530
It's nothing to do with
what I've been

1020
00:44:38,530 --> 00:44:39,550
talking about at all.

1021
00:44:39,550 --> 00:44:42,040
When will voice input, within
the Chrome extension pop-up,

1022
00:44:42,040 --> 00:44:43,170
be working again?

1023
00:44:43,170 --> 00:44:45,340
There's actually a Chrome
extension API, which allows

1024
00:44:45,340 --> 00:44:47,960
you to not even require
a pop-up.

1025
00:44:47,960 --> 00:44:50,051
I believe it's experimental
still, so you can play with

1026
00:44:50,051 --> 00:44:51,246
that as well.

1027
00:44:51,246 --> 00:44:54,620
If it's not working, you might
want to look at that one.

1028
00:44:54,620 --> 00:44:55,870
PAUL IRISH: One last question.

1029
00:44:55,870 --> 00:44:58,230
ADDY OSMANI: So Pete from the UK
writes, can you give us any

1030
00:44:58,230 --> 00:45:00,795
specifics of the Yeoman plug-in
pattern and what the

1031
00:45:00,795 --> 00:45:01,980
library will provide?

1032
00:45:01,980 --> 00:45:04,460
How far down the add-task for
everything style are you

1033
00:45:04,460 --> 00:45:06,900
going, or at what point will the
developer be expected to

1034
00:45:06,900 --> 00:45:09,720
manage files and line endings
on their own?

1035
00:45:09,720 --> 00:45:13,315
So Yeoman is going to try as
much as possible to stay an

1036
00:45:13,315 --> 00:45:14,120
opinionated project.

1037
00:45:14,120 --> 00:45:16,430
We're going to provide tasks
for things that we think

1038
00:45:16,430 --> 00:45:17,230
people will use.

1039
00:45:17,230 --> 00:45:21,340
So we've got tasks to help with
things like required JS

1040
00:45:21,340 --> 00:45:23,130
and CoffeScript and Compass.

1041
00:45:23,130 --> 00:45:24,780
You don't, of course, have
to use those things.

1042
00:45:24,780 --> 00:45:28,280
But they're there in case
you do want to use them.

1043
00:45:28,280 --> 00:45:31,410
In terms of the plug-in pattern
that we use, it's

1044
00:45:31,410 --> 00:45:33,020
actually really, really
flexible.

1045
00:45:33,020 --> 00:45:36,310
You can include, in your
boilerplate or scaffold or

1046
00:45:36,310 --> 00:45:38,950
template or whatever you want to
call it, as many different

1047
00:45:38,950 --> 00:45:39,780
policies you want.

1048
00:45:39,780 --> 00:45:43,330
So if you're a framework, for
example, you can define the

1049
00:45:43,330 --> 00:45:46,260
models, the views, the
controllers, all the different

1050
00:45:46,260 --> 00:45:48,210
bits and pieces that
are required to

1051
00:45:48,210 --> 00:45:49,700
scaffold something out.

1052
00:45:49,700 --> 00:45:51,665
And it can be completely
up to your style.

1053
00:45:51,665 --> 00:45:54,280
It can be customized as
much as you want.

1054
00:45:54,280 --> 00:45:56,105
And we're going to be providing
a really solid set

1055
00:45:56,105 --> 00:45:59,610
of docs, right now, so at least
that you can go create

1056
00:45:59,610 --> 00:46:02,410
your own templates as
much as you want.

1057
00:46:02,410 --> 00:46:03,110
PAUL IRISH: Cool.

1058
00:46:03,110 --> 00:46:05,880
And the last part of that, you
were asking about should

1059
00:46:05,880 --> 00:46:08,093
developers manage files
and line endings?

1060
00:46:08,093 --> 00:46:09,895
As far as line endings
are concerned--

1061
00:46:09,895 --> 00:46:13,226

1062
00:46:13,226 --> 00:46:14,490
in the projects we generate?

1063
00:46:14,490 --> 00:46:15,660
ADDY OSMANI: Yeah.

1064
00:46:15,660 --> 00:46:16,890
PAUL IRISH: Editor Config.

1065
00:46:16,890 --> 00:46:18,980
Go to editorconfig.org.

1066
00:46:18,980 --> 00:46:21,360
It's kind of an emerging
standard that the jQuery

1067
00:46:21,360 --> 00:46:25,770
Project Modernizr, Agent
[INAUDIBLE], a lot of projects

1068
00:46:25,770 --> 00:46:26,850
are getting.

1069
00:46:26,850 --> 00:46:30,240
It just sets up a very few
number of rules as far as

1070
00:46:30,240 --> 00:46:33,360
white space preferences, like
carriage return, line feed,

1071
00:46:33,360 --> 00:46:37,840
style things, and has plug-ins
for editors so that the

1072
00:46:37,840 --> 00:46:42,070
editors keep all these files
consistent across these

1073
00:46:42,070 --> 00:46:43,050
environments.

1074
00:46:43,050 --> 00:46:45,190
And this is something that
we think is awesome.

1075
00:46:45,190 --> 00:46:48,210
And so we have it as
part of Yeoman.

1076
00:46:48,210 --> 00:46:51,180
I guess that's it for
this Office Hours.

1077
00:46:51,180 --> 00:46:54,005
Awesome time with three
Pauls in London.

1078
00:46:54,005 --> 00:46:55,725
ADDY OSMANI: And
the rest of us.

1079
00:46:55,725 --> 00:46:56,340
PAUL KINLAN: Yeah.

1080
00:46:56,340 --> 00:46:58,290
Who all--

1081
00:46:58,290 --> 00:46:59,030
PAUL LEWIS: The non-Pauls.

1082
00:46:59,030 --> 00:47:00,100
ADDY OSMANI: The non-Pauls.

1083
00:47:00,100 --> 00:47:01,460
PAUL LEWIS: Thank you very
much for joining us.

1084
00:47:01,460 --> 00:47:02,330
ADDY OSMANI: Thank you.

1085
00:47:02,330 --> 00:47:04,300
PAUL KINLAN: So are we going
to try and make this a

1086
00:47:04,300 --> 00:47:06,880
relatively regular thing as
well, probably on Thursdays,

1087
00:47:06,880 --> 00:47:08,980
probably about the same time?

1088
00:47:08,980 --> 00:47:11,651
I'm always going to talk
about Web Intents.

1089
00:47:11,651 --> 00:47:15,050
PAUL IRISH: So next time you
see a message go out on

1090
00:47:15,050 --> 00:47:17,660
Twitter or G+, click through
the link, ask some more

1091
00:47:17,660 --> 00:47:19,580
questions, vote up and down.

1092
00:47:19,580 --> 00:47:22,960
And we'd love to answer
everything we can for you.

1093
00:47:22,960 --> 00:47:24,160
PAUL KINLAN: And enjoy
the Olympics.

1094
00:47:24,160 --> 00:47:25,380
ADDY OSMANI: Yeah,
the Olympics.

1095
00:47:25,380 --> 00:47:26,470
We'll see you guys next time.

1096
00:47:26,470 --> 00:47:27,070
SAM DUTTON: Thank you.

1097
00:47:27,070 --> 00:47:27,370
PAUL KINLAN: Bye.

1098
00:47:27,370 --> 00:47:28,620
SAM DUTTON: See you.

1099
00:47:28,620 --> 00:47:38,500

