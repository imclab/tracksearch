1
00:00:03,570 --> 00:00:08,250
Hi I'm Aaron, a programmer working on Google
Chrome's extension system.

2
00:00:08,250 --> 00:00:11,120
When we started this project, we had 3 main
goals:

3
00:00:11,120 --> 00:00:14,259
1. It should be incredibly easy to build an
extension.

4
00:00:14,259 --> 00:00:17,000
We think the easier extensions are to build,
the more of them there will be.

5
00:00:17,000 --> 00:00:21,260
2. The extension system should reuse web technologies.

6
00:00:21,260 --> 00:00:26,119
This helps make extensions easy to build because
many programmers already know web technologies.

7
00:00:26,119 --> 00:00:29,980
3. Extensions shouldn't crash your browser,
and if they slow it down you should be able

8
00:00:29,980 --> 00:00:33,870
to find out which extension is responsible
and stop it.

9
00:00:33,870 --> 00:00:38,450
In this video, I'm going to give an overview
of the design of the core extension system,

10
00:00:38,450 --> 00:00:41,260
and talk about how it helps to meet these
objectives.

11
00:00:41,260 --> 00:00:46,039
A Google Chrome extension is basically a zip
file containing a collection of HTML files,

12
00:00:46,039 --> 00:00:50,109
JavaScript, and other web resources like CSS
and images.

13
00:00:50,109 --> 00:00:54,000
These zip files are named with the "crx" suffix
by convention.

14
00:00:54,000 --> 00:00:58,840
When an extension is loaded into Google Chrome,
all of its contents are accessible under a

15
00:00:58,840 --> 00:01:00,289
special URL:

16
00:01:00,289 --> 00:01:04,670
And just like with web pages, you can use
relative paths to refer to resources.

17
00:01:04,670 --> 00:01:07,670
This basic setup provides a number of advantages:

18
00:01:07,670 --> 00:01:12,860
Because we use the extension's ID as the host,
each extension gets its own unique origin.

19
00:01:12,860 --> 00:01:17,250
Origins are a key part of the web security
model, and reusing them gives us a well-tested

20
00:01:17,250 --> 00:01:21,909
way to keep extensions separate from each
other, from web pages, and from the browser.

21
00:01:21,909 --> 00:01:26,329
Since extensions are just web pages, Google
Chrome runs them in subprocesses, just like

22
00:01:26,329 --> 00:01:28,040
it does for web pages.

23
00:01:28,040 --> 00:01:32,700
So if one extension is misbehaving you can
see that in the task manager and disable it.

24
00:01:32,700 --> 00:01:37,380
Also if one extension crashes, it won't take
down any other extensions or your browser.

25
00:01:37,380 --> 00:01:41,780
Just like web pages, Google Chrome runs extensions
in a sandbox.

26
00:01:41,780 --> 00:01:46,340
This helps protect against malicious web pages
on the internet that might try and abuse an

27
00:01:46,340 --> 00:01:48,790
extension to exploit your system.

28
00:01:48,790 --> 00:01:53,290
Finally, and most fun, because extensions
are web pages, developers get to use all of

29
00:01:53,290 --> 00:01:59,610
the APIs that come with the web platform,
from XHR to the DOM and CSS, to local storage.

30
00:01:59,610 --> 00:02:02,549
Everything that works on the web works for
extensions, too.

31
00:02:02,549 --> 00:02:07,000
In fact, since extensions only need to run
in Google Chrome, developers can use cutting-edge

32
00:02:07,000 --> 00:02:09,910
new features that aren't yet available in
other browsers.

33
00:02:09,910 --> 00:02:12,970
Web pages are used in many parts of the extension
system.

34
00:02:12,970 --> 00:02:16,360
The most important of these is a special page
called the "background page".

35
00:02:16,360 --> 00:02:20,750
The background page is just a normal HTML
file, but it runs invisibly, "in the background"

36
00:02:20,750 --> 00:02:22,100
of your extension.

37
00:02:22,100 --> 00:02:26,100
This is a good place to put all the core logic
of your extension, and any state that you

38
00:02:26,100 --> 00:02:28,720
need to keep in memory while your extension
is running.

39
00:02:28,720 --> 00:02:33,160
Web pages are also used to show most pieces
of the UI in an extension.

40
00:02:33,160 --> 00:02:38,830
For example, the contents of browser and page
action popups are implemented using HTML.

41
00:02:38,830 --> 00:02:42,940
We've designed the extension system to rely
heavily on HTML, so that you can reuse your

42
00:02:42,940 --> 00:02:44,800
web development skills.

43
00:02:44,800 --> 00:02:47,020
You can build your first extension in five
minutes.

44
00:02:47,020 --> 00:02:50,850
To learn more visit our website at code.google.com/chrome/extensions

