1
00:00:00,000 --> 00:00:06,130
>> KURZKE: Thanks everyone for coming for
our session. I've been told if you want, you

2
00:00:06,130 --> 00:00:09,759
can rearrange the chairs a little bit to make
it more comfortable for you to actually see

3
00:00:09,759 --> 00:00:15,730
the stage. This one is more of a presentation.
It's not as much as hands-on lab. So, you

4
00:00:15,730 --> 00:00:20,160
don't really need your laptop if you can go
with--like an hour without checking email.

5
00:00:20,160 --> 00:00:23,290
I know it's hard to do.
>> SAXMAN: No chance.

6
00:00:23,290 --> 00:00:29,690
>> KURZKE: I know. So, thanks everyone. Welcome
to our talk about Google TV and we're going

7
00:00:29,690 --> 00:00:36,399
to talk about the current version of Google
TV. Myself, I am Christian Kurzke. I am the

8
00:00:36,399 --> 00:00:41,550
developer advocate for the Android platform
on Google TV. I joined the team about a year

9
00:00:41,550 --> 00:00:48,550
ago and I've been working with the preloaded
Android applications, so, the Napster, Pandora,

10
00:00:48,769 --> 00:00:53,449
Twitter Apps, all the good stuff that's on
your TV today. And with me is Paul.

11
00:00:53,449 --> 00:00:57,809
>> SAXMAN: My name is Paul Saxman and I'm
relatively new to the Google TV Team. But

12
00:00:57,809 --> 00:01:02,870
I have quite a bit of Android background.
I built quite a few apps and I truly believe

13
00:01:02,870 --> 00:01:06,670
that Google TV is the new frontier for Android
app development.

14
00:01:06,670 --> 00:01:13,670
>> KURZKE: We're the Wild West. So, what we
also have here is--let's see, hopefully we

15
00:01:16,330 --> 00:01:22,750
have a next slide. Yes. So, we have this thing
called Speaker Meter. We're going to use throughout

16
00:01:22,750 --> 00:01:27,680
Google IO. You can give us live feedback to
either on Twitter, I'm not going check it

17
00:01:27,680 --> 00:01:33,230
here but I will look at it later, or Speaker
Meter, this is for each session. You can just

18
00:01:33,230 --> 00:01:37,570
try and scan the QR code and give us feedback
on it later.

19
00:01:37,570 --> 00:01:43,050
>> SAXMAN: And we are going to have a Q&A
at the end. So--and actually, when--we do

20
00:01:43,050 --> 00:01:46,840
have that microphone up here for everybody
to use. So, feel free to line up near the

21
00:01:46,840 --> 00:01:51,490
end of the talk.
>> KURZKE: Okay. So actually, just to give

22
00:01:51,490 --> 00:01:56,810
a quick hand--show of hands. So, how many
of you are actually Android developers and

23
00:01:56,810 --> 00:02:02,920
have developed Android apps? Awesome, very
good. And how many Web developers do we have

24
00:02:02,920 --> 00:02:08,440
here or people who are not so familiar? Good,
good. So, hopefully, we'll try to keep it

25
00:02:08,440 --> 00:02:12,620
pretty high-level and pretty generic. So,
we should have something for all of you. We'll

26
00:02:12,620 --> 00:02:16,910
go a little bit into detail but here's the
overview.

27
00:02:16,910 --> 00:02:19,640
>> SAXMAN: Yes. Yes. So, here's a breakdown
of what Christian and I are going to talk

28
00:02:19,640 --> 00:02:24,490
about today. We're going to start off with
an overview of the Google TV platform. And

29
00:02:24,490 --> 00:02:28,830
then, start to talk about building native
Android apps and Web apps, kind of at high-level.

30
00:02:28,830 --> 00:02:33,760
We're then going to talk a little bit about
how you decide what to build because it's

31
00:02:33,760 --> 00:02:39,670
kind of a tough question which direction you
want to go sometimes. We're then going to

32
00:02:39,670 --> 00:02:45,080
segue into building Android apps for Google
TV a little more deeper--deeply, covering

33
00:02:45,080 --> 00:02:51,670
how to get set up with the environment. Google
TV displays, types of apps and tips on navigation

34
00:02:51,670 --> 00:02:57,319
and layout, which are very pretty very important.
And finally, we'll be sure to keep some time

35
00:02:57,319 --> 00:03:01,490
at the end for Q&A. Since this is BootCamp
and there's a lot of news coming the next

36
00:03:01,490 --> 00:03:06,370
couple of days, today, we're going to focus
on what Google TV is now and how you can start

37
00:03:06,370 --> 00:03:11,810
developing for the platform today but won't
be talking about the next version of Google

38
00:03:11,810 --> 00:03:18,740
TV yet. So, please keep in mind--keep that
in mind during the Q&A. And, however, we do

39
00:03:18,740 --> 00:03:22,000
think that there's a lot of great information
in this talk for developers interested in

40
00:03:22,000 --> 00:03:28,209
Google TV as the new platform for Android
development. So, without further ado, let's

41
00:03:28,209 --> 00:03:34,840
talk about the Google TV platform. So, what
is Google TV? Google TV is a platform that

42
00:03:34,840 --> 00:03:41,000
opens the living room to the Web, making television
more relevant and engaging. It accomplishes

43
00:03:41,000 --> 00:03:46,400
this by bringing together a sophisticated
and open applications platform, which is Android,

44
00:03:46,400 --> 00:03:52,629
and a full HTML5 capable Web browser, which
is Chrome. And also, it brings all this together

45
00:03:52,629 --> 00:03:57,810
with the power of search. Like, Android for
mobile devices and tablets, it's one platform

46
00:03:57,810 --> 00:04:04,810
for multiple devices.
>> KURZKE: So, from a little bit more of a

47
00:04:05,290 --> 00:04:10,260
technical point of view, just also some of
the, you know, clarifying some of the conceptions

48
00:04:10,260 --> 00:04:16,880
that people have--so we really want to bring
internet content and interactive content together

49
00:04:16,880 --> 00:04:22,880
with your existing TV content. So, Google
TV--sometimes in the press after the launch,

50
00:04:22,880 --> 00:04:28,050
there was this sort of connotation that it
would replace your existing cable subscription.

51
00:04:28,050 --> 00:04:34,100
And it's really not the intention. So, we
are trying to bring new content together with

52
00:04:34,100 --> 00:04:38,460
your old content that you already have on
your TV. So, most people, at least here in

53
00:04:38,460 --> 00:04:43,520
the US, sort of the standard set up is you
have a satellite box or a cable box and your

54
00:04:43,520 --> 00:04:48,930
cable box connects to your TV and you have
a DVR and you have all really great set up

55
00:04:48,930 --> 00:04:53,660
with an audio system and everything. What
we want is we want Google TV, in this case

56
00:04:53,660 --> 00:04:59,440
here, I'm showing the logitech box integrate
with your existing setup. It would sit between

57
00:04:59,440 --> 00:05:04,669
your cable box and your TV and it would bring
you additional content from the internet.

58
00:05:04,669 --> 00:05:11,669
So, you can--today already, you can have,
on your Web browser, you can go to optimize--TV

59
00:05:11,720 --> 00:05:16,510
optimized websites or you can run some of
the pre-installed Android applications. So,

60
00:05:16,510 --> 00:05:22,190
if you already have a Google TV, you can run
the Pandora app, you can run Netflix app,

61
00:05:22,190 --> 00:05:27,060
you can stream movies, and it brings it to
the largest display in your house, to the

62
00:05:27,060 --> 00:05:31,430
TV.
>> SAXMAN: So, to--let's take a quick look

63
00:05:31,430 --> 00:05:36,460
at the history of Google TV to help understand
where it is today. It was announced just about

64
00:05:36,460 --> 00:05:42,180
a year ago at IO, and a few months after that,
the Sony and Logitech Google TV devices were

65
00:05:42,180 --> 00:05:48,000
available to the--or available on the market.
Those devices are based on Android 2.1 and

66
00:05:48,000 --> 00:05:53,210
like Christian mentioned, they have several
Android applications preloaded. In December

67
00:05:53,210 --> 00:05:59,570
of last year, the Android remote control app
was released, which was received pretty well.

68
00:05:59,570 --> 00:06:06,009
And in January of this year, we announced
two new OEM partners, Samsung and Vizio. And

69
00:06:06,009 --> 00:06:10,180
finally at this last March, we released an
iPhone version of the remote app, which also

70
00:06:10,180 --> 00:06:15,169
is pretty highly received. So, looking at
this timeline, something you should note is

71
00:06:15,169 --> 00:06:21,310
that Google TV is still a relatively young
platform. As with Android on mobile devices,

72
00:06:21,310 --> 00:06:27,180
we brought Google TV to the market quickly
so that we can get user's feedback. And this

73
00:06:27,180 --> 00:06:30,669
year, we have collected a lot of great feedback
and we are incorporating it into Google TV

74
00:06:30,669 --> 00:06:36,930
so that it can become a great device.
>> KURZKE: And I think also what's really

75
00:06:36,930 --> 00:06:42,720
interesting about Google TV is it will be
an interesting platform for Android developers,

76
00:06:42,720 --> 00:06:48,830
we have announced last year that we will bring
market and we will have the ability for developers

77
00:06:48,830 --> 00:06:54,930
to develop applications for it. So, just look
at it like the G1 device, it's still very

78
00:06:54,930 --> 00:07:01,419
early in the curve, but also earlier this
year, as Paul mentioned in January, at CES,

79
00:07:01,419 --> 00:07:06,139
we announced two new hardware OEMs. So, there's
going to be a large footprint of devices in

80
00:07:06,139 --> 00:07:13,139
the market. So, what is it from a user's point
of view? One thing you always have to keep

81
00:07:13,990 --> 00:07:18,900
in mind when you develop applications, what
is the context in which your application will

82
00:07:18,900 --> 00:07:24,610
be used. And I think what you have to keep
in mind is when you develop an app for Google

83
00:07:24,610 --> 00:07:29,240
TV, sort of put yourself in the mindset of
your user, it's like lean back on a couch

84
00:07:29,240 --> 00:07:33,530
in the living room after a long day at work
with the remote control and probably a bag

85
00:07:33,530 --> 00:07:39,850
of chips in the other hand. So, it's really
a different mindset than what your user has

86
00:07:39,850 --> 00:07:43,940
when they interact with your website. When
you're maybe, in the office, you're between

87
00:07:43,940 --> 00:07:48,509
meetings, you're checking a website, you're,
I don't know, going to your favorite eCommerce

88
00:07:48,509 --> 00:07:54,319
website or something. So, the TV is more of
a leisure, more of an entertainment device

89
00:07:54,319 --> 00:08:00,199
and people spend a lot of time consuming content.
So, what we really want to accomplish with

90
00:08:00,199 --> 00:08:07,199
Google TV is make the TV experience more interactive
and just at least when you develop an app

91
00:08:07,330 --> 00:08:12,990
for it, it gives you one path for the user
where they normally wouldn't have your app

92
00:08:12,990 --> 00:08:16,850
in front of them. And we know a lot of people
today when they watch TV, they have their

93
00:08:16,850 --> 00:08:21,069
mobile phone or maybe their tablet, they check
Twitter or they check some of their other

94
00:08:21,069 --> 00:08:28,069
social networks and the TV has the potential
to bring all these together. So, here's another

95
00:08:31,130 --> 00:08:35,550
home screen, or here's a snapshot of the home
screen, in case you haven't seen Google TV

96
00:08:35,550 --> 00:08:39,789
and I know last year, a lot people who were
at Google IO, they actually received a Google

97
00:08:39,789 --> 00:08:45,600
TV, a box, an early version. So, this is what
it looks like. It--in the background, you

98
00:08:45,600 --> 00:08:50,810
see a live television. So this here was a
travel channel. You just click the home "Home"

99
00:08:50,810 --> 00:08:55,440
button and it overlays the home on top of
your live TV. And it gives you very quick

100
00:08:55,440 --> 00:09:00,779
access, In this case, to Android applications.
So, you see, a menu on the side here, you

101
00:09:00,779 --> 00:09:05,550
can have browser bookmarks you can have Android
apps. And here's just a selection of some

102
00:09:05,550 --> 00:09:11,980
of the Android apps that are preloaded on
the box. So, you have--what we chose a portfolio

103
00:09:11,980 --> 00:09:15,690
of typical apps that people may want in their
living room, we have something for sports

104
00:09:15,690 --> 00:09:22,690
fans, you have your Netflix, you have your
Pandora. So, I think it's an interesting platform

105
00:09:23,140 --> 00:09:26,670
for users to get content while they're watching
TV.

106
00:09:26,670 --> 00:09:30,890
>> SAXMAN: I think, you know, one point--one
thing to point out here too is it's not just

107
00:09:30,890 --> 00:09:34,930
a big phone, you know what I mean? It's really
a different type of device with a different

108
00:09:34,930 --> 00:09:38,480
type of interface, even though it's all built
on top of Android.

109
00:09:38,480 --> 00:09:42,730
>> KURZKE: Yes. So, this Android app, I mean,
it's already--sort of the first indication--by

110
00:09:42,730 --> 00:09:48,190
the way, the home screen, of course, is also
implemented in Android. But it's an indication

111
00:09:48,190 --> 00:09:54,640
of how you should layout your app, you know,
make it very, very light on information. Keep

112
00:09:54,640 --> 00:10:00,330
a lot of open space, people don't want to
see pages and pages of text on their TV screen.

113
00:10:00,330 --> 00:10:07,330
That's not an eReader. So, the other component
of Google TV is the remote control. If you

114
00:10:10,910 --> 00:10:16,610
think about how people interact with your
Android application today, virtually, all

115
00:10:16,610 --> 00:10:23,300
Android applications use a touch interface,
use a touch screen. Google TV, people sit

116
00:10:23,300 --> 00:10:26,680
10 feet away from the screen and it would
be very inconvenient if they have to get up

117
00:10:26,680 --> 00:10:32,110
and walk to the TV and touch stuff. I think
that's why we invented remote controls, that's

118
00:10:32,110 --> 00:10:39,110
what the TV is used to be. So, Google TV comes
with remotes. What we want is a full QWERTY

119
00:10:39,959 --> 00:10:44,350
keyboard, I personally really hate when I
have to search for shows and I have to have

120
00:10:44,350 --> 00:10:50,800
an onscreen keyboard and navigate through
ABCD. So, all the Google TVs come with a QWERTY

121
00:10:50,800 --> 00:10:57,060
keyboard, they do have a mouse pointer of
sorts. So, the Sony remote, for example, it

122
00:10:57,060 --> 00:11:04,060
has a little optical mouse joystick. But one
of the main things is, it's not a touch screen.

123
00:11:04,860 --> 00:11:10,089
So keep that in mind also and we'll go over
some of the implications later. One key that

124
00:11:10,089 --> 00:11:15,519
I want to highlight is the search key. We
really believe that Google TV should help

125
00:11:15,519 --> 00:11:21,920
you find content that's relevant for you much
faster, after all Google is really a search

126
00:11:21,920 --> 00:11:26,110
company, we know a lot about searching. So,
we want to make it very easy for you when

127
00:11:26,110 --> 00:11:31,880
you watch TV to find content. So there's a
dedicated search key for the Android guys

128
00:11:31,880 --> 00:11:36,360
amongst you, it brings up the system search,
the system search box which we call the quick

129
00:11:36,360 --> 00:11:42,920
search box. And I'll show you what that looks
like. So, on Google TV, when you press the

130
00:11:42,920 --> 00:11:49,350
search key and you enter a term, it will go
through the system search, it will bring you

131
00:11:49,350 --> 00:11:54,320
content from different sources. So in this
case, it's mainly YouTube content but it could

132
00:11:54,320 --> 00:11:59,240
also be content that's relevant for your TV
channel. So if you search for something were

133
00:11:59,240 --> 00:12:04,310
you have, let's say, a DVR recording or it's
a show that's coming in the future, you can

134
00:12:04,310 --> 00:12:10,079
schedule a recording. And for developers,
it's really cool because, as you see in the

135
00:12:10,079 --> 00:12:15,709
bottom here, you can actually contribute results.
So in this case, a YouTube application and

136
00:12:15,709 --> 00:12:20,930
the Amazon application contributed results
to this. So if you've developed an app that

137
00:12:20,930 --> 00:12:26,660
wants to get in front of the user and maybe,
you know, search through your media library

138
00:12:26,660 --> 00:12:33,250
or search through your photos, you can also
contribute search results here. On this screen,

139
00:12:33,250 --> 00:12:40,250
I want to point out the little icon in the
bottom. So this is, today, were the notifications

140
00:12:40,269 --> 00:12:47,269
show up. I've heard people describe the Android
notification as sort of the new inbox. It's

141
00:12:47,500 --> 00:12:51,430
like, people get so much email, you don't
even read email anymore but when something

142
00:12:51,430 --> 00:12:58,220
shows up in your notification bar, you typically--it
grabs your attention. So, this is where notifications

143
00:12:58,220 --> 00:13:05,220
show up today, and in this case, the Pandora
app as you may know from your cellphone, every

144
00:13:05,300 --> 00:13:10,110
time it plays a new track, it notifies you
just to keep you current if you're interested--what

145
00:13:10,110 --> 00:13:16,360
you're listening to in the background, maybe.
So in this case, Pandora threw up a notification

146
00:13:16,360 --> 00:13:19,230
and said, "Hey, you know, I'm having a really
great new sound and--that I'm listening for."

147
00:13:19,230 --> 00:13:26,230
And the copyright owners of those probably
don't mind. So, yeah, so this is our Pandora

148
00:13:26,339 --> 00:13:31,290
notification box and it's also a great way
for you as an Android developer, it uses the

149
00:13:31,290 --> 00:13:37,310
regular Android notification APIs, so if your
app has something new and exciting going on,

150
00:13:37,310 --> 00:13:43,269
you want the user to either be reminded of
or maybe you just want to get in front of

151
00:13:43,269 --> 00:13:47,870
the user again, you can open up a notification
or you can send a notification and the user

152
00:13:47,870 --> 00:13:54,870
can open up the dialog. So, those last things,
the search, the notification, it's all really

153
00:13:55,880 --> 00:14:01,519
pretty good integration but Google TV, as
we said earlier, it's based on the Android

154
00:14:01,519 --> 00:14:06,180
platforms, and one of the really cool things
you can do in Android is your application

155
00:14:06,180 --> 00:14:11,260
can integrate pretty deeply into the platform.
So, on a mobile phone, you have a lot of ways,

156
00:14:11,260 --> 00:14:18,260
you have live wallpapers; you have things
like widgets and so on. And on TV, there's

157
00:14:18,269 --> 00:14:24,540
a lot of ways--for example, here, you see
a live folder, so the user can configure the

158
00:14:24,540 --> 00:14:30,399
live folder showing the tweet timeline to
show up right on the home screen. So you can

159
00:14:30,399 --> 00:14:37,329
imagine, as a developer, it's not just a very
standalone experience, it's not start an app,

160
00:14:37,329 --> 00:14:42,990
interact with an app and go back to the TV
watching. But, we really want to enable developers

161
00:14:42,990 --> 00:14:47,700
to get in front of users and get integrated
into the system. I think that's one, for me,

162
00:14:47,700 --> 00:14:52,490
I'm an Android guy, so I come from the Android
world. It's one of the really cool things

163
00:14:52,490 --> 00:14:59,490
that Android enables you to do. So, now that
you've seen all the things that are possible,

164
00:15:00,230 --> 00:15:07,230
why would you develop an app for Google TV?
I mean, besides, being a really cool platform,

165
00:15:07,730 --> 00:15:13,639
it's also typically the largest display in
the house. Every time I visit my friends now

166
00:15:13,639 --> 00:15:17,010
and they have a little picture frame that
shows like their last notification photos

167
00:15:17,010 --> 00:15:23,019
on like the two inch LCD or whatever, four
inch LCD. I'm like, what's the point? Just

168
00:15:23,019 --> 00:15:28,350
use a TV. You have a 60 inch picture frame.
So it's the largest display and you can just

169
00:15:28,350 --> 00:15:32,399
go wild and imagine what you as a developer
could show on the screen. I mean, there's

170
00:15:32,399 --> 00:15:37,480
a lot of really cool apps that are possible.
It's also connected to a really amazing sound

171
00:15:37,480 --> 00:15:43,510
system. Typically, your TV or your hi-fi stereo
in the living room, you don't need to plug

172
00:15:43,510 --> 00:15:48,949
anything in, Google TV is already connected
to it and you as an app developer can use

173
00:15:48,949 --> 00:15:55,769
the sound system. And the other thing is,
supposedly in America, people spend five hours

174
00:15:55,769 --> 00:16:02,769
a day watching TV. Keep in mind, this is not
America, I know you guys probably spend a

175
00:16:02,910 --> 00:16:09,910
lot more time on your computer. But this is
a stat--just looking at the media habits of

176
00:16:10,320 --> 00:16:15,500
teenagers, eight to eighteen year olds, even
if you take everything else together, gaming,

177
00:16:15,500 --> 00:16:21,699
consoles, listening to music, playing video
games, sitting on the computer, they spent--still

178
00:16:21,699 --> 00:16:28,699
spend 42% of their time more than computer
and video games together, just watching TV.

179
00:16:29,610 --> 00:16:36,130
So, being able to create applications around
the TV, I think is really exciting for developers.

180
00:16:36,130 --> 00:16:41,620
And, I think that's also why we have gotten
a lot of really excited developers who keep

181
00:16:41,620 --> 00:16:47,010
asking us, "So when can I get my app onto
Google TV?" And, as we said, we're not going

182
00:16:47,010 --> 00:16:51,649
to make any new announcements today but we
stand by what we said last year. It's--the

183
00:16:51,649 --> 00:16:56,020
market is coming later this year and we're
working on it, we're very focus on it.

184
00:16:56,020 --> 00:17:02,880
>> SAXMAN: So, now that we know what Google
TV is, let's talk a little bit about how to

185
00:17:02,880 --> 00:17:07,139
develop for Google TV. From a developer's
perspective, Google TV is really about the

186
00:17:07,139 --> 00:17:14,139
power of choice. Google TV is--it's actually
Android and the Web in one box and it's not

187
00:17:14,189 --> 00:17:18,889
just the Web but it's the HTML5 in a full
Chrome Web browser which is different than

188
00:17:18,889 --> 00:17:24,350
most Android devices. So basically, this isn't
your grandmother's Web on TV, I mean this

189
00:17:24,350 --> 00:17:29,929
is a full Web experience. So given that developers
can take advantage of the Android platform

190
00:17:29,929 --> 00:17:36,590
and a full Chrome Web browser, how should
they decide what type of app to build? To

191
00:17:36,590 --> 00:17:41,200
help answer that question; let's first take
a look at what the Android platform has to

192
00:17:41,200 --> 00:17:45,559
offer. Android takes the Java language to
new heights with APIs for layouts, graphic

193
00:17:45,559 --> 00:17:52,299
rendering, search, media, databases, the list
goes on and on. And since these APIs are shared

194
00:17:52,299 --> 00:17:58,009
across all Android devices, the code developed
on top of these APIs can be reused on mobile,

195
00:17:58,009 --> 00:18:03,190
tablet, and Google TV devices. And in some
instances, the same app can be used in all

196
00:18:03,190 --> 00:18:08,729
three types of devices and it's--that's entirely
possible. The apps themselves can be installed

197
00:18:08,729 --> 00:18:13,690
in a device with just a couple of clicks and
they automatically update if the user allows

198
00:18:13,690 --> 00:18:19,679
it, which is a benefit to both users and developers.
Back to the APIs, since many of the Android

199
00:18:19,679 --> 00:18:23,690
APIs access the hardware directly, developers
can leverage system hardware to accelerate

200
00:18:23,690 --> 00:18:30,690
performance and gain more control over how
system resources are utilized. As a software

201
00:18:32,090 --> 00:18:37,369
platform, Android has a number of features
that help developers design rich user interfaces

202
00:18:37,369 --> 00:18:43,049
and streamline information flow. This list
is actually--the list on the--the slide here

203
00:18:43,049 --> 00:18:48,159
is actually just a small subset of what Android
has to offer to developers. We've cover some

204
00:18:48,159 --> 00:18:54,059
of these features already, such as notifications.
And many of these will be discussed further

205
00:18:54,059 --> 00:18:59,179
at IO. But in summary, the Android platform
gives developers full control over both hardware

206
00:18:59,179 --> 00:19:02,710
and software keyboards and buttons, and most
cert--most notably the "back" and "search"

207
00:19:02,710 --> 00:19:09,309
buttons which is actually a big benefit; the
ability to share data with other apps and

208
00:19:09,309 --> 00:19:13,970
display custom search results; the ability
to push notifications to users from background

209
00:19:13,970 --> 00:19:20,169
services; a full multithreading based on Java
threads; and a very rich application framework

210
00:19:20,169 --> 00:19:25,580
which includes intents, activities and services.
All you Android guys are going to be very

211
00:19:25,580 --> 00:19:29,460
familiar with all of this. The main takeaway
here is that the Android platform gives developers

212
00:19:29,460 --> 00:19:34,179
a lot of control over the design of their
apps in terms of the interfaces and their

213
00:19:34,179 --> 00:19:38,600
architecture. There are definitely a lot of
opportunities; a lot more opportunities to

214
00:19:38,600 --> 00:19:44,779
hear about Android features at IO, but for
Google TV in particular, don't forget to miss

215
00:19:44,779 --> 00:19:48,340
Christian and Jason's talk on Wednesday, that's
this guy here; in case you're looking for

216
00:19:48,340 --> 00:19:54,879
him in the hallway before hand, so. Here's
another very good example of the power of

217
00:19:54,879 --> 00:20:00,989
Google TV in the Android platform. Here, we
see the Google--the quick search box again.

218
00:20:00,989 --> 00:20:06,549
The user has entered discovery off of his
or her search query. And we see results from

219
00:20:06,549 --> 00:20:13,149
the Web and the user's lineup, like we'd expect,
which is very useful. And I see "MythBusters,

220
00:20:13,149 --> 00:20:17,499
Table Cloth Chaos" coming up in seven minutes
which is actually one that I think I've missed,

221
00:20:17,499 --> 00:20:23,190
so maybe we want to cut this a little short.
We also see that there are results from YouTube,

222
00:20:23,190 --> 00:20:28,080
Napster, and Amazon. We see these services
listed here with their exact number of search

223
00:20:28,080 --> 00:20:33,129
results since each service has an Android
app installed on Google TV, and each app has

224
00:20:33,129 --> 00:20:39,539
a searchable content provider for the information
it manages. By using Android's APIs, developers

225
00:20:39,539 --> 00:20:43,629
can deeply integrate their app with the Google
TV platform. And what's unfortunately not

226
00:20:43,629 --> 00:20:50,629
shown here, apps can actually share information
with one another. So on the other hand, for

227
00:20:53,859 --> 00:20:59,369
Chrome and the Web; developers have access
the HTML5, CSS, JavaScript, and the Flash

228
00:20:59,369 --> 00:21:04,859
platform, all of which are very powerful tools
for content delivery. Using this suite of

229
00:21:04,859 --> 00:21:09,820
technologies is relatively straight forward
for developers to create interfaces that work

230
00:21:09,820 --> 00:21:15,379
on multiple form, factors and displays, including
mobile screens, medium and high density tablets,

231
00:21:15,379 --> 00:21:22,379
desktop computers and televisions. There are
a variety of tools for developing Web applications

232
00:21:22,440 --> 00:21:25,259
many of which were created or refined over
a number of years to make Web development

233
00:21:25,259 --> 00:21:31,139
very quick and easy. And if you already have
an existing Web application, you can likely

234
00:21:31,139 --> 00:21:36,119
reuse most if not all of your content and
code when you're creating a Google TV-enhanced

235
00:21:36,119 --> 00:21:40,940
website. If you do develop a truly great Web
application, your app could be feature on

236
00:21:40,940 --> 00:21:45,999
the Google TV spotlight which highlights the
latest and greatest Web-based Google TV apps

237
00:21:45,999 --> 00:21:50,200
available. And finally, with the Web, there's
no need for developers to download or install

238
00:21:50,200 --> 00:21:54,479
your app, and updating is seamless. As soon
as you published its content, it's available

239
00:21:54,479 --> 00:22:01,029
to end users. And along those lines, for more
information, if you're interested in building

240
00:22:01,029 --> 00:22:05,840
Web apps for Google TV, don't miss Chris and
Dan's Tech Talk on Wednesday as well. Different

241
00:22:05,840 --> 00:22:12,190
times so you could actually make it to both.
So here's an example of a Web application

242
00:22:12,190 --> 00:22:16,789
optimize for Google TV. The first thing that
you'll likely notice is that this app doesn't

243
00:22:16,789 --> 00:22:21,200
look--doesn't look like a traditional website
at all and it looks like a TV application.

244
00:22:21,200 --> 00:22:25,080
However, if you're familiar with HTML and
CSS, you know that this page could easily

245
00:22:25,080 --> 00:22:30,190
be modified to look good on mobile devices,
tablets or PCs. It's just a matter of changing

246
00:22:30,190 --> 00:22:36,590
a few parameters around. This app gives TV
viewers easy access to the information that

247
00:22:36,590 --> 00:22:41,919
they're likely to want via streamlined interface
with easy to read fonts, plenty of padding

248
00:22:41,919 --> 00:22:48,359
and simple navigation. And it also has full
content search capability which is not integrated

249
00:22:48,359 --> 00:22:54,929
into the Google TV platform but Google TV
really has no problem searching Web content.

250
00:22:54,929 --> 00:23:01,289
>> KURZKE: So just to wrap up in summary,
I think for both, for Web developers and for

251
00:23:01,289 --> 00:23:07,970
Android developers, just some things to keep
in mind is really using large font sizes.

252
00:23:07,970 --> 00:23:12,950
Your application is typically viewed in a
living room environment. People sit far back.

253
00:23:12,950 --> 00:23:18,749
Reading paragraphs of text is hard. You don't
want too many line breaks in your text. The

254
00:23:18,749 --> 00:23:23,460
other thing is on television, keep in mind
there are two major resolutions that are supported

255
00:23:23,460 --> 00:23:30,460
by modern televisions. It's called 1080p and
720p. So, that's the number of lines. So,

256
00:23:30,570 --> 00:23:37,570
one is 1920 by 1080. The other is 1280 by
720. And also, really when you design and

257
00:23:38,149 --> 00:23:42,249
sometimes it's different when you're in a
mobile mindset you always try to squeeze as

258
00:23:42,249 --> 00:23:48,809
much information as you can on the limited
number of pixels. On TV just use larger icons.

259
00:23:48,809 --> 00:23:55,429
Keep more space between the icons. Make it
easy to navigate and don't overload the user

260
00:23:55,429 --> 00:24:00,320
with too much information. What we have found
just over the last couple iterations that

261
00:24:00,320 --> 00:24:06,059
we've gone through is it's better to have
more a progressive disclosure. If you have

262
00:24:06,059 --> 00:24:11,229
more information available, make it visible
to the user but then give them a choice so

263
00:24:11,229 --> 00:24:17,859
either go into more details. Sometimes it's
easier to just show, say, a short video clip.

264
00:24:17,859 --> 00:24:23,070
The website that we saw, that Paul showed,
with--just like a TV show information, having

265
00:24:23,070 --> 00:24:27,450
the cover art there or having a screenshot
there is probably a lot more relevant to TV

266
00:24:27,450 --> 00:24:32,529
users than having the full bio of all the
actors. If they want that information, you

267
00:24:32,529 --> 00:24:37,419
can give them the option to get it but try
to keep the amount of information on the screen

268
00:24:37,419 --> 00:24:42,619
pretty light.
>> SAXMAN: So, with all the benefits of these

269
00:24:42,619 --> 00:24:47,809
two platforms, it still might be hard to decide
which one to use to develop your app, so ultimately

270
00:24:47,809 --> 00:24:51,609
you might have to make a pragmatic decision.
There are a few questions to help guide you

271
00:24:51,609 --> 00:24:56,599
in making this decision though. Basically,
are you currently working on an Android app

272
00:24:56,599 --> 00:25:00,489
that you'd like to see on Google TV? Or do
you already have a Web-based application that

273
00:25:00,489 --> 00:25:05,149
you could migrate? Or if you've-- you had
to start working on an Android app or website

274
00:25:05,149 --> 00:25:10,529
do you have existing code or expertise that
you could use? For performance, do you need

275
00:25:10,529 --> 00:25:14,679
access to Android's low-level APIs or is the
performance that you get with Chrome enough,

276
00:25:14,679 --> 00:25:19,849
which is actually usually more than enough?
And finally, do you want to share information

277
00:25:19,849 --> 00:25:24,929
with the Google TV platform or other Android
applications like we saw with search? If so,

278
00:25:24,929 --> 00:25:29,210
building an Android is definitely going to
be the right choice. And there's actually

279
00:25:29,210 --> 00:25:33,979
a really good talk coming up if you're still
looking for more information about HTML versus

280
00:25:33,979 --> 00:25:37,899
Android. It's also going to be at Wednesday.
It's a different time than the other two talks,

281
00:25:37,899 --> 00:25:39,299
so I think you could...
>> KURZKE: You can do both.

282
00:25:39,299 --> 00:25:41,049
>> SAXMAN: ...go to all three.
>> KURZKE: Yeah, you can do them three in

283
00:25:41,049 --> 00:25:43,330
a row and after that you'll know everything
about Google TV.

284
00:25:43,330 --> 00:25:48,669
>> SAXMAN: Exactly. Yeah. So, yeah, definitely
be sure to stop by and check that out.

285
00:25:48,669 --> 00:25:55,669
>> KURZKE: So, just, yeah, in summary here.
>> SAXMAN: Yeah. I'm just going to say, before

286
00:25:55,789 --> 00:25:59,789
we dive into the specifics of building Android
apps on Google TV, here are some pointers

287
00:25:59,789 --> 00:26:04,469
to getting started with building Web applications.
The rest of the talk is going to be about

288
00:26:04,469 --> 00:26:11,039
Android so, you know, this is your last chance
to look this stuff up. Again, be sure to stop

289
00:26:11,039 --> 00:26:16,169
by Chris and Dan's Tech Talk on Wednesday.
Visit the Google TV Documentation Website,

290
00:26:16,169 --> 00:26:21,210
lots of great information there. Right now
you can see it's targeted towards Web but,

291
00:26:21,210 --> 00:26:26,749
you know, we have Android documentation coming
as well. Join the Google TV Web Developers

292
00:26:26,749 --> 00:26:31,469
Forum where there's lots of discussion about
building Web apps for Google TV. And finally,

293
00:26:31,469 --> 00:26:35,279
check out the Google TV Website Gallery where
you can go for inspiration for building your

294
00:26:35,279 --> 00:26:40,809
own apps. Even if you're sold on developing
a native Android app for Google TV, these

295
00:26:40,809 --> 00:26:46,669
resources have a wealth of information for
developers that you absolutely shouldn't overlook.

296
00:26:46,669 --> 00:26:52,090
So...
>> KURZKE: Cool. So, now I would like to share

297
00:26:52,090 --> 00:26:56,419
with you some of the, you know, best practices
for developing Android apps and just some

298
00:26:56,419 --> 00:27:01,659
of the lessons we have learned. And also for
people who are not familiar with Android I'm

299
00:27:01,659 --> 00:27:05,979
actually very excited to see so many of you
already are Android developers, so I could

300
00:27:05,979 --> 00:27:11,190
go over some of it a little faster. But in
order to develop Android apps, all the tools

301
00:27:11,190 --> 00:27:17,549
you need are available to you for free. You
can download them. For Google TV since it's

302
00:27:17,549 --> 00:27:24,059
just another compatible Android platform,
technically you can use the same tools and

303
00:27:24,059 --> 00:27:30,089
really the difference is you're developing
for a large screen device. What you can do

304
00:27:30,089 --> 00:27:37,089
with Android is you can have different resources
for different screen sizes or different resolutions.

305
00:27:37,950 --> 00:27:44,129
So, in this example here I've just created
a regular Android project and I've created

306
00:27:44,129 --> 00:27:51,129
resource folders for HDPI and XHDPI resolution.
And I'll explain a little more about this

307
00:27:53,179 --> 00:27:59,960
later why those two. But if you are familiar
with Android, you know, resources can be things

308
00:27:59,960 --> 00:28:06,960
like icons, can be graphics or it can be layouts.
So here is just another screenshot showing

309
00:28:07,969 --> 00:28:14,279
you some of the dialogues. And the regular
Android SDK already gives you the opportunity

310
00:28:14,279 --> 00:28:21,279
to create qualifiers for high density large
screens. And if you want to, you can add No

311
00:28:22,070 --> 00:28:28,739
Touch to it just to explicitly call out that
this is for devices which don't have a touch

312
00:28:28,739 --> 00:28:35,739
screen today. The other feature in the Android
SDK that you can use is you can create custom

313
00:28:36,749 --> 00:28:43,749
layouts. Typically, when you install an off-the-shelf
Android SDK today, it will come with predefined

314
00:28:44,869 --> 00:28:51,479
layouts or predefined screen sizes for the
layout editor for major like phone resolutions.

315
00:28:51,479 --> 00:28:58,479
So we have the 480 by 800 for the Nexus class
phones, or we have the 1200--I think it's

316
00:28:58,919 --> 00:29:05,649
1280 by 800 for tablets. If you want to develop
for Google TV, you would have to create your

317
00:29:05,649 --> 00:29:12,649
own custom layout size for the screen resolution
of the Google TV. So, the way you would do

318
00:29:13,210 --> 00:29:18,129
this is you just click on the little custom
icon and you can give it any name you want.

319
00:29:18,129 --> 00:29:25,129
You can call it Google TV, whatever. And you
would configure it with the resolutions that

320
00:29:25,359 --> 00:29:30,869
you expect your TV to have. And I'll share
a little bit of information with you. So,

321
00:29:30,869 --> 00:29:37,869
the typical TV resolution that we find is
213 DPIs. So, that's a good value to use.

322
00:29:39,269 --> 00:29:46,269
And I just called this the 720p resolution
and I defined the screen sizes as a 1280 by

323
00:29:47,909 --> 00:29:53,070
720 screen size, high density. Of course,
it's a landscape device. So, that's one other

324
00:29:53,070 --> 00:29:58,899
thing to keep in mind when you develop applications.
TVs typically only come in one orientation.

325
00:29:58,899 --> 00:30:04,190
It's pretty hard to reorient the TV. It's
easier for yourself to lie on the couch. That

326
00:30:04,190 --> 00:30:10,119
doesn't still make it a portrait. So, that's
just one way to define the layout editor.

327
00:30:10,119 --> 00:30:15,679
And here's the reason I don't work in the
UX team. So, I just used all this and I created

328
00:30:15,679 --> 00:30:22,679
a mock for Google TV application. So, I used
the parameters that I've just defined to create

329
00:30:23,659 --> 00:30:29,539
a layout. And you can use the Android layout
editor in Eclipse and you can just drag and

330
00:30:29,539 --> 00:30:36,539
drop very simple UIs. I've just taken a couple
of buttons, a couple of icons and a few checkboxes

331
00:30:37,899 --> 00:30:43,129
and stuff and put it together on a UI, probably
not the best work I've ever done but it brings

332
00:30:43,129 --> 00:30:50,099
across the point you can use the layout editor
with those custom layouts to create layouts

333
00:30:50,099 --> 00:30:57,099
for large screens. So, why would you go through
all this hassle? You can also create an emulator

334
00:30:58,509 --> 00:31:05,509
today. So you can use the Android SDK Emulator.
And as we said earlier today, Google TV runs

335
00:31:07,339 --> 00:31:14,339
on API level seven, so that's Android 2.1
Eclair. So if you want to be compatible with

336
00:31:15,209 --> 00:31:21,989
today's version, you can just create an emulator
based on this and you can set the screen size

337
00:31:21,989 --> 00:31:28,989
to 1280 by 720 which is a reasonable value
for 720p and you set again the LCD density

338
00:31:31,039 --> 00:31:38,039
to 213 and pick your value for heap size.
What you can do with this is you can start

339
00:31:39,559 --> 00:31:46,159
an emulator and you can actually run your
app on an emulator. Here's an example, an

340
00:31:46,159 --> 00:31:53,159
app running on a desktop emulator. It does
still show the phone menu bar on top if you

341
00:31:53,320 --> 00:31:59,229
display the menu--or the top icon bar. Just
ignore that for now. Why would you want to

342
00:31:59,229 --> 00:32:03,989
do that? Well, the reason is you can test
your app. You can test it up out on a large

343
00:32:03,989 --> 00:32:10,450
screen, see if your layout scale, see if your
resources scale. It's just an exercise to

344
00:32:10,450 --> 00:32:15,989
sort of get ahead of the curve and get your
app ready for, you know, maybe in the future.

345
00:32:15,989 --> 00:32:20,619
This is not a replacement for running it on
on a real TV. But I think for a developer,

346
00:32:20,619 --> 00:32:27,619
what I found is going through for example
this exercise with some of our partners, it's--sometimes

347
00:32:29,690 --> 00:32:35,209
Android applications they look really nice
on a large screen. They basically just work

348
00:32:35,209 --> 00:32:41,619
if you do all the right things. You use relative
layout. You use scalable nine-patch images.

349
00:32:41,619 --> 00:32:48,099
But running your app on a large screen emulator,
it will point out typically a few hard-coded

350
00:32:48,099 --> 00:32:53,309
assumptions that you may have made or it may
point out some of the bugs. So I think it's

351
00:32:53,309 --> 00:32:58,700
a good practice, especially now that we have
tablets as well. Just try and run your app

352
00:32:58,700 --> 00:33:03,619
on a large screen. See what it looks like
and it will help you, I think, create better

353
00:33:03,619 --> 00:33:10,359
Android applications all the way around. So,
you may wonder how we came up with some of

354
00:33:10,359 --> 00:33:17,359
the constants that I mentioned, so you may
have picked up--I used large screen. The first

355
00:33:17,830 --> 00:33:23,059
question that everybody has is, if you're
familiar with Android, actually, this phone

356
00:33:23,059 --> 00:33:29,080
here, the Nexus S, is considered a large screen,
how come my TV is not bigger than a Nexus

357
00:33:29,080 --> 00:33:34,629
S? It's very simple; if you looked at it from
a 10-foot distance, you'll notice that the

358
00:33:34,629 --> 00:33:41,629
TV actually appears fairly smaller in the
distance so we just took the large screen,

359
00:33:41,719 --> 00:33:46,739
sort of--we believe that a TV should have
about as much information on it as your cell

360
00:33:46,739 --> 00:33:53,739
phone application, as your mobile application.
And the other constant that I came up withóthe

361
00:33:53,950 --> 00:34:00,950
resolution, so I used extra high density or
high density depending on 720 or 10 ATP, but

362
00:34:01,570 --> 00:34:07,209
if you walk up close to a TV and you really
stand, like, as close to your TV as you would

363
00:34:07,209 --> 00:34:12,690
stand to your tablet or to your phone, you
notice the physical resolution on the screen

364
00:34:12,690 --> 00:34:18,750
is actually about 50 pixels per inch or you
can just do the math. And how do we get from

365
00:34:18,750 --> 00:34:25,750
50 pixels to 200 pixels? It's again the distance.
The other advantage of this is if we choose

366
00:34:25,819 --> 00:34:32,819
the extra high density, this will scale all
the Android DPs, the display independent pixels

367
00:34:34,339 --> 00:34:39,139
or resolution independent pixels. So if you're
familiar with the way how Android handles

368
00:34:39,139 --> 00:34:46,139
DPs and you do the math, you will realize
that your apps scale approximately twice as

369
00:34:47,980 --> 00:34:54,980
much. So if you have extra high density is
320 DPs, as compared to a 160 DPs for normal

370
00:34:56,339 --> 00:35:01,140
density. So if you just have an Android app
and you don't do anything and you just run

371
00:35:01,140 --> 00:35:08,140
it on TV and you use DPs the way we recommend
in the documentation, then your app will scale

372
00:35:08,349 --> 00:35:13,220
all the assets twice as much and you will
actually look reasonably well. So this is

373
00:35:13,220 --> 00:35:17,400
really to make it easier for developers. As
Paul said earlier, to create one app that

374
00:35:17,400 --> 00:35:24,109
runs across all devices. And I've actually--for
exercise purposes, created a few apps that

375
00:35:24,109 --> 00:35:30,049
look really well on different displays. So
you can create really one layout that scales

376
00:35:30,049 --> 00:35:37,049
nicely from a regular phone size through a
tablet all the way through a TV. Another bit

377
00:35:37,920 --> 00:35:44,920
of TV technology that I want to point is,
a few of you are probably old enough to remember

378
00:35:44,950 --> 00:35:51,950
that TVs used to have television CRTs with,
like, scan lines and electron beams and whole

379
00:35:52,049 --> 00:35:58,049
lot of physics and stuff. And it's actually
really cool technology that's unfortunately,

380
00:35:58,049 --> 00:36:05,049
still haunting us today. So the concept of
scan lines is still there and if you look

381
00:36:07,650 --> 00:36:14,650
at 1080p resolution today, so the word 1080p,
it's actually the 1,080 scan lines that you

382
00:36:15,119 --> 00:36:21,920
would have on an electron--on a good old-fashioned
CRT. And that is really the physical addressable

383
00:36:21,920 --> 00:36:28,569
screen size that is available in TV. The other
thing that you may notice next time when you

384
00:36:28,569 --> 00:36:33,680
watch, like, your favorite news channel or
your favorite sports channel, you'll probably

385
00:36:33,680 --> 00:36:37,460
notice that they never put something that's
really super important all the way in the

386
00:36:37,460 --> 00:36:44,099
corners because, actually, you never know
how much shows up on your consumer's television.

387
00:36:44,099 --> 00:36:51,099
So if you look at the TV specs, they actually
specify about a five to ten percent safety

388
00:36:52,230 --> 00:36:57,529
margin around the edge because back in the
days when it was electron beams zipping across

389
00:36:57,529 --> 00:37:04,529
CRTs, you never knew if they were actually
calibrated properly. So TV broadcasters typically

390
00:37:05,240 --> 00:37:11,049
show the relevant content, game scores or
stock tickers, they show stuff that's really

391
00:37:11,049 --> 00:37:17,490
important about, you know, a couple of pixels
off the edge. And just to be on the safe side,

392
00:37:17,490 --> 00:37:24,170
the recommendation is keep about 10% so you're
pretty safe that all the TV manufactures will

393
00:37:24,170 --> 00:37:29,460
actually work with this. So what this means
for a developer is--I said early, we have

394
00:37:29,460 --> 00:37:35,769
two main resolutions, we have 1080p and we
have 720p but when you create an app, you

395
00:37:35,769 --> 00:37:41,130
can be pretty sure that it will not have the
full screen resolution running on your TV.

396
00:37:41,130 --> 00:37:47,410
And that may be mechanical issues or mechanical
reasons like your decorative aluminum bezel

397
00:37:47,410 --> 00:37:52,690
may actually cover up a couple of pixels on
each side. When you set up a Google TV, we

398
00:37:52,690 --> 00:37:58,690
calibrate to the visible area on your screen.
And when you run an Android app and you do,

399
00:37:58,690 --> 00:38:04,099
for example, a canvas that's full screen and
you donít get width, you may end up with

400
00:38:04,099 --> 00:38:10,130
fewer pixels. And so the numbers that included
here, this is actually the worst-case scenario

401
00:38:10,130 --> 00:38:17,039
so this is the 10% margin on each side so
that's really the minimum but also don't go

402
00:38:17,039 --> 00:38:22,650
to the minimum. So my advice would really
be expect the worst but have relative layouts

403
00:38:22,650 --> 00:38:28,450
that then float and use right aligned, left
aligned, top, bottom and make your UI look

404
00:38:28,450 --> 00:38:35,450
pretty that way. And I think the best practices
for Android developers to really create a

405
00:38:35,890 --> 00:38:42,890
great app that really stands out from the
rest is really using the dynamic layouts;

406
00:38:43,119 --> 00:38:49,490
think about the overscan, test with the minimum
resolution, test with the maximum resolution.

407
00:38:49,490 --> 00:38:55,420
One concept that I know we have been talking
about almost as long as Android is around

408
00:38:55,420 --> 00:39:02,420
is 9-patch images. And especially designing
for TV, 9-patches get even more important.

409
00:39:02,519 --> 00:39:09,519
Because if you think about it, basically the
amount of memory that you need for your onscreen

410
00:39:09,650 --> 00:39:16,079
assets, for things like buttons, really grows
with the square basically of your resolution

411
00:39:16,079 --> 00:39:20,660
because you need X and Y, if you double it,
you have four times as much memory for your

412
00:39:20,660 --> 00:39:26,099
little icons. So using 9-patches to do the
scaling for you is really an elegant way to

413
00:39:26,099 --> 00:39:31,789
do it. And, especially, I really encourage
developers to not put, like, pre-rendered

414
00:39:31,789 --> 00:39:36,480
text on their buttons or something but use
the Android mechanisms to just bring the 9-patch

415
00:39:36,480 --> 00:39:41,239
for the button background and then put a text
over it.

416
00:39:41,239 --> 00:39:43,969
>> SAXMAN: And so, great internationalization
as well.

417
00:39:43,969 --> 00:39:48,000
>> KURZKE: Definitely, yeah. I mean, it--the
way--what I found is running Android apps,

418
00:39:48,000 --> 00:39:54,789
just random Android apps on Google TV, it
really shows which developers were sort of

419
00:39:54,789 --> 00:40:00,349
keeping with the best practices, going the
extra mile, keeping it really dynamic layout.

420
00:40:00,349 --> 00:40:06,769
And I think it really helps you find the couple
of bugs in your app. And keep in mind, your

421
00:40:06,769 --> 00:40:12,789
user, a 10-foot design--you are creating apps
for somebody who just came home from work

422
00:40:12,789 --> 00:40:17,990
and really just wants to kick back in their
recliner and watch TV and interact with your

423
00:40:17,990 --> 00:40:23,509
app maybe.
>> SAXMAN: So Google TV apps actually come

424
00:40:23,509 --> 00:40:27,829
in lots of different shapes and sizes and
how you design your app ultimately depends

425
00:40:27,829 --> 00:40:33,170
on the use cases that you're targeting. You
can certainly have one app for multiple platforms

426
00:40:33,170 --> 00:40:39,410
which is, by far, the hardest to implement
but really the easiest to maintain. Or you

427
00:40:39,410 --> 00:40:44,369
could build separate apps actually tailored
to each of your use cases which are, you know,

428
00:40:44,369 --> 00:40:49,099
for phones, tablets, and Google TVs. This
will allow you to target different but related

429
00:40:49,099 --> 00:40:53,750
use cases by each app and take full advantage
of the higher resolutions of Google TV. This

430
00:40:53,750 --> 00:40:59,579
is primarily true for full screen assets on
Google TV since it has a much higher resolution.

431
00:40:59,579 --> 00:41:03,730
The third option is to build a companion app
that targets the same use cases in existing

432
00:41:03,730 --> 00:41:06,739
app but is designed specifically for the Google
TV experience.

433
00:41:06,739 --> 00:41:11,400
>> KURZKE: Yeah. I think, speaking of the
companion app, one thing to keep in mind also

434
00:41:11,400 --> 00:41:17,519
is, the TV screen is usually a shared screen
in your living room. Your family is watching;

435
00:41:17,519 --> 00:41:21,140
maybe on Sunday, you have your buddies over
and they're going to watch the TV. So, as

436
00:41:21,140 --> 00:41:26,509
an app developer, keep that in mind, what
that sometimes means. So having, for example,

437
00:41:26,509 --> 00:41:31,759
my tweet stream on TV, yeah, sure, that's
cool. I mean that's public information. But

438
00:41:31,759 --> 00:41:36,819
having my personal inbox show up in notification
every time somebody sends me a tweet, you

439
00:41:36,819 --> 00:41:40,519
may not want that when your buddies come over
on Sunday.

440
00:41:40,519 --> 00:41:47,200
>> SAXMAN: So a couple of quick tips on, actually,
conquering the TV. If you really want to get

441
00:41:47,200 --> 00:41:51,529
the greatest bang for your buck when building
your Google TV app, be sure to reuse as much

442
00:41:51,529 --> 00:41:56,339
of existing Android code as possible. And
once you've identified what code you can reuse,

443
00:41:56,339 --> 00:42:02,319
focus on user interface specifically, building
specialized user interfaces only where needed.

444
00:42:02,319 --> 00:42:08,790
Really, the idea here is reduce, reuse, recycle,
and only redesign where necessary.

445
00:42:08,790 --> 00:42:15,790
>> KURZKE: So here's a couple examples of
TV apps and so this is the mobile app from

446
00:42:17,640 --> 00:42:24,430
CNBC and what we did is, when created the
TV app for CNBC, we worked with the team and

447
00:42:24,430 --> 00:42:30,069
we looked at the mobile app, and we looked
at the Website and we found that the TV app

448
00:42:30,069 --> 00:42:35,920
should probably be different from both experiences.
On the mobile phone you want to have your

449
00:42:35,920 --> 00:42:40,980
stock portfolio, you want to have quick access
to information. The website is really to go

450
00:42:40,980 --> 00:42:47,920
and find a lot more out--find background information.
So for the TV app, the team actually brought

451
00:42:47,920 --> 00:42:53,039
in some of the interactive content--or not
interact--some of the visual content from

452
00:42:53,039 --> 00:43:00,039
their CNBC channel and they added the broadcast
clips to the stock information. So they reused

453
00:43:02,130 --> 00:43:06,210
a lot of their Android code from the mobile
phone so the whole portfolio management, all

454
00:43:06,210 --> 00:43:13,210
the app logic is mainly reused from the mobile
app. And they also added the broadcast information.

455
00:43:14,279 --> 00:43:20,140
So I worked with the CNBC team over the course
of last year to create the app that's on your

456
00:43:20,140 --> 00:43:25,740
Google TV today. And what's actually really
exciting is they did almost of the opposite

457
00:43:25,740 --> 00:43:31,450
of what you would be able to do. So they used
the mobile--they used the TV experience and

458
00:43:31,450 --> 00:43:37,109
then actually optimized this to the table
experience. I saw they just--I think a couple

459
00:43:37,109 --> 00:43:40,940
of days ago, launched their tablet app, it
looks very much like the TV app. And so, I

460
00:43:40,940 --> 00:43:46,589
think, having the large screen Android devices
now is really an interesting opportunity to

461
00:43:46,589 --> 00:43:52,440
create apps that work on larger screen and
maybe bring some more interactive visual content.

462
00:43:52,440 --> 00:43:59,160
Here is another app which you maybe familiar
with. It's the Pandora Internet Radio App.

463
00:43:59,160 --> 00:44:05,400
So it's--this is the mobile app, so they had
a very clean simple user interface, showing

464
00:44:05,400 --> 00:44:10,650
the cover art, showing the artist's information,
and giving you a very quick, you know, thumbs-up,

465
00:44:10,650 --> 00:44:17,650
thumbs-down sort of interface. They were actually
able to reuse most of their layout and most

466
00:44:18,549 --> 00:44:23,829
of their code for the TV app. So this just
goes to show, if you have a user experience

467
00:44:23,829 --> 00:44:30,420
that make sense in mobile and make sense on
the TV, you can virtually use most of your

468
00:44:30,420 --> 00:44:37,420
app just as is. What they also did to optimize
is they used the key codes for our remote

469
00:44:38,819 --> 00:44:45,819
control, so on the remote you can pause, forward,
play. And so they just used all those key

470
00:44:46,349 --> 00:44:50,910
codes to make it much easier to interact with
the music player. So you don't have to use

471
00:44:50,910 --> 00:44:56,299
the mouse cursor, and like go over and click
on buttons or use the 5-way navigation. So

472
00:44:56,299 --> 00:45:02,880
those are just two examples that show how
you can take a mobile app and actually reuse

473
00:45:02,880 --> 00:45:06,049
a lot of your work and transform it into a
TV experience.

474
00:45:06,049 --> 00:45:11,190
>> SAXMAN: Okay. So before we wrap up there's
a couple more tips that we want to pass on

475
00:45:11,190 --> 00:45:16,240
to you guys before you start building your
Google TV app. Christian just mentioned the

476
00:45:16,240 --> 00:45:21,900
5-way navigation which is actually accomplished
via the D-Pad. Google TV devices have full

477
00:45:21,900 --> 00:45:27,730
QWERTY keyboards and often have track pads
or some other form of touch-based navigation.

478
00:45:27,730 --> 00:45:33,539
However, the primary mode of user interaction
with Google TV is 5-way or the--or D-Pad,

479
00:45:33,539 --> 00:45:38,890
which is Directional Pad. When testing your
apps, keep your thumb on the D-Pad and not

480
00:45:38,890 --> 00:45:42,519
the track pad, so that you can assure that
users are able to navigate quickly and easily

481
00:45:42,519 --> 00:45:48,829
in your app. Same is true when using the emulator,
focus on your keyboard and the--and your directional

482
00:45:48,829 --> 00:45:55,829
keys as opposed to using your mouse. Especially
keep D-Pad Navigation in mind when you're

483
00:45:56,819 --> 00:46:02,210
designing your layouts. What we see here is
a fairly standard app interface which includes

484
00:46:02,210 --> 00:46:08,519
the tab bar for changing between content,
a vertical list view in the center, and a

485
00:46:08,519 --> 00:46:13,910
button down at the bottom there. This interface
is relatively common on mobile devices and

486
00:46:13,910 --> 00:46:18,109
tablets since and is very compact and easy
to control with the tips of one's fingers.

487
00:46:18,109 --> 00:46:23,269
However, things get more tricky if the user
navigates this interface using their D-Pad.

488
00:46:23,269 --> 00:46:27,200
The issue is, is that if the user wants to
go from the tab to the button they actually

489
00:46:27,200 --> 00:46:31,670
have to scroll through the entire list, in
the center there. So what we recommend in

490
00:46:31,670 --> 00:46:38,670
this situation, is to actually re-orient your
layout. Here, we've actually taken the tabs

491
00:46:39,210 --> 00:46:43,180
and the button, moved them to the left and
right of the vertically scrolling area. The

492
00:46:43,180 --> 00:46:47,839
user can actually use their--the Directional
Pad up and down to navigate the tabs, up and

493
00:46:47,839 --> 00:46:53,829
down to navigate within the vertical scrolling
list, and you know, left and right to scroll

494
00:46:53,829 --> 00:46:59,900
between those three controls, so. It's still
a clean compact interface, but now it's very

495
00:46:59,900 --> 00:47:04,009
easy to navigate using D-Pad.
>> KURZKE: Also, the one thing to keep in

496
00:47:04,009 --> 00:47:09,279
mind is--what's very apparent is a lot of
apps typically are--when they are designed

497
00:47:09,279 --> 00:47:14,089
for portrait mode, they have the--they'll
use a paradigm where you have list views and

498
00:47:14,089 --> 00:47:20,069
then buttons in the bottom. When you have
a list view that's about four-feet wide, it

499
00:47:20,069 --> 00:47:24,009
gets really hard to navigate. So if you have
like a check box on one side and the name

500
00:47:24,009 --> 00:47:30,930
is on the other side, keeping list views narrow
and having multiple columns is usually a much

501
00:47:30,930 --> 00:47:37,930
better user experience in general. So with
that, let's see, summary. We've pointed out,

502
00:47:42,460 --> 00:47:48,759
there is a huge opportunity to create applications
for TV, and there is a large variety of devices

503
00:47:48,759 --> 00:47:54,630
to target now, so especially for Android developers,
I mean, we're basically adding new devices

504
00:47:54,630 --> 00:48:00,009
and we're adding new form factors as fast
as we can. I mean, we just gave you tablets.

505
00:48:00,009 --> 00:48:04,509
Now there is TV, so there is--there is a huge
opportunity I think to leverage your Android

506
00:48:04,509 --> 00:48:11,230
skills. The different screen sizes are definitely
giving you a whole new opportunity to create

507
00:48:11,230 --> 00:48:18,230
new applications. Suddenly you have, basically,
a four square-foot or so display in the living

508
00:48:18,249 --> 00:48:23,650
room that you can work on, or you have a whole
home theatre. And the good news is Android

509
00:48:23,650 --> 00:48:29,819
already has a lot of built-in mechanisms to
support all these. So the Android APIs and

510
00:48:29,819 --> 00:48:34,089
the Android, like all the mechanisms and the
best practices allow you to create apps for

511
00:48:34,089 --> 00:48:40,769
phones, for tablets, for TVs and who knows
what's next. And then also, you can create

512
00:48:40,769 --> 00:48:44,670
apps that easily support multiple platform
versions. So as Android developers, you're

513
00:48:44,670 --> 00:48:50,499
probably already familiar with all the different
ways how you can create apps that run well

514
00:48:50,499 --> 00:48:57,499
across different apps. So I would like to
do the--one little Steve Jobs thing. But wait,

515
00:48:57,789 --> 00:49:04,529
I have one more thing for you. So actually,
I'm really thankful that you all stayed to

516
00:49:04,529 --> 00:49:10,009
the end. So what I want to share for--share
with you is, we don't have this here today,

517
00:49:10,009 --> 00:49:15,970
but starting tomorrow you can go to the Google
TV booth, and we have a little Sandbox on

518
00:49:15,970 --> 00:49:22,109
the third floor, and pick up a flyer. So we
have this program that we call the Google

519
00:49:22,109 --> 00:49:28,779
TV Fishtank and what we--what we want is if
you submit your ideas and if you give us great

520
00:49:28,779 --> 00:49:34,839
ideas that you would want to implement on
Google TV, you can sign-up and we will look

521
00:49:34,839 --> 00:49:41,289
at the submissions and we will select recipients
on a--on a rolling basis to receive developer

522
00:49:41,289 --> 00:49:48,289
devices. So those developer devices will be
Google TV devices enabled with ADB, and you

523
00:49:48,589 --> 00:49:53,849
as a developer can run your own apps and you
don't have to just run them on the desktop

524
00:49:53,849 --> 00:49:58,789
emulator. I must say it's a really cool experience
to see your app the first time on your own

525
00:49:58,789 --> 00:50:05,789
TV at home. So come back tomorrow to the Google
TV Sandbox on the third floor, pick-up a flyer

526
00:50:06,950 --> 00:50:13,950
and we'll get you set-up with a really cool
development environment. All right. One question.

527
00:50:22,589 --> 00:50:27,150
Can you please use the microphone?
>> Sure. Hypothetically, say that you're from

528
00:50:27,150 --> 00:50:32,940
Sweden, would it still possible to enroll
in this program?

529
00:50:32,940 --> 00:50:39,200
>> KURZKE: You would have to check with our
guys. I believe right now we're focusing mainly

530
00:50:39,200 --> 00:50:43,990
on the U.S. but I think if you have an incredibly
compelling application, I encourage you to

531
00:50:43,990 --> 00:50:47,790
talk with our business guys about that.
>> I'll think about that. Okay, thank you.

532
00:50:47,790 --> 00:50:54,790
>> KURZKE: Yes, please.
>> If your apps use native code?

533
00:50:55,309 --> 00:51:02,309
>> KURZKE: Yes. Sorry. So right now, since
Google TV--it also runs on Intel processors

534
00:51:06,180 --> 00:51:10,710
we don't support native code currently.
>> Is that in the works to add that to the

535
00:51:10,710 --> 00:51:13,039
emulator?
>> KURZKE: We're super-focused getting this

536
00:51:13,039 --> 00:51:19,009
out, but I don't have a timeline on that.
[INDISTINCT]

537
00:51:19,009 --> 00:51:25,519
>> Question about--is the Chrome browser we
see in the Google TV, so what type of difference

538
00:51:25,519 --> 00:51:31,079
between the Chrome browser we see in Google
TV versus the Chrome browser running on a

539
00:51:31,079 --> 00:51:35,079
standard PC, specially on the Chrome apps
store part?

540
00:51:35,079 --> 00:51:42,079
>> KURZKE: I don't know the answer about the
Chrome apps store, but it is very much a Linux-based

541
00:51:44,230 --> 00:51:50,089
Chrome browser. So by the way, if all of you
have more questions we have office hours and

542
00:51:50,089 --> 00:51:55,499
a Sandbox upstairs where we have engineers
and we have actually two units that you can

543
00:51:55,499 --> 00:52:01,640
see some demos on. So that's on the second
floor, kind of like this direction roughly.

544
00:52:01,640 --> 00:52:04,359
So and I'll be hanging out there for a while
and I think Paul is going to be there most

545
00:52:04,359 --> 00:52:09,400
of the day too.
>> SAXMAN: A yeah. We got a couple of more

546
00:52:09,400 --> 00:52:10,400
minutes.
>> KURZKE: Yes.

547
00:52:10,400 --> 00:52:14,589
>> SAXMAN: Go ahead.
>> Okay. I'm coming from a YouTube partner

548
00:52:14,589 --> 00:52:20,210
channel-based background, and my question
to you guys is are you planning on developing

549
00:52:20,210 --> 00:52:26,589
additional YouTube interfaces for Google TV
beyond what clearly looks like a very YouTube

550
00:52:26,589 --> 00:52:33,589
beneficial search type--search type box?
>> KURZKE: So what Google TV already does

551
00:52:33,930 --> 00:52:40,079
is we integrate with our video site map search,
so if you have video site maps for your content

552
00:52:40,079 --> 00:52:47,079
on your site, that will definitely be surfaced.
Beyond that, I believe we have the YouTube

553
00:52:47,150 --> 00:52:53,259
Leanback experience and you can also download
some of the CSS, and some of the samples to

554
00:52:53,259 --> 00:52:59,799
get started. So if you as a partner want to
create optimized sites, so right now, we have--in

555
00:52:59,799 --> 00:53:04,930
the Spotlight, we have for example, a VEVO
application which uses some of the YouTube

556
00:53:04,930 --> 00:53:11,220
posted content, but adds additional just cover
information and stuff to it. So I think, if

557
00:53:11,220 --> 00:53:16,400
you want to get really creative you could
create--you could use wrappers around the

558
00:53:16,400 --> 00:53:18,299
YouTube experience.
>> Thanks.

559
00:53:18,299 --> 00:53:25,299
>> Hi. Can you hear me? So I actually had
a one good question and a bad one.

560
00:53:26,989 --> 00:53:30,460
>> KURZKE: Sure.
>> The good one is, how about identity? I

561
00:53:30,460 --> 00:53:30,809
mean, one of the big things is, you, know
TV is shared, but all the other devices you're

562
00:53:30,809 --> 00:53:31,730
talking about...
>> KURZKE: Right.

563
00:53:31,730 --> 00:53:35,390
>> ...are individualized. Are you going to
do anything to allow multiple users, et cetera,

564
00:53:35,390 --> 00:53:38,329
on the TV side?
>> KURZKE: So currently we don't have that

565
00:53:38,329 --> 00:53:43,089
yet. And I think Android; in general, it's
more of a single user experience.

566
00:53:43,089 --> 00:53:47,049
>> Yes. Yes.
>> KURZKE: So this is great feedback, and

567
00:53:47,049 --> 00:53:50,249
we know this is something we need to work
on, so yes.

568
00:53:50,249 --> 00:53:56,430
>> So the bad question now is, all the stuff
I'm hearing is still kind of treating the

569
00:53:56,430 --> 00:54:00,470
applications as a secondarily app that's overlaid
on your content.

570
00:54:00,470 --> 00:54:01,960
>> KURZKE: Yes.
>> But are you actually, at some point, going

571
00:54:01,960 --> 00:54:06,690
to start allowing context to be shared between
them, so you can actually bring up apps related

572
00:54:06,690 --> 00:54:09,030
to what you're watching without the user being
in the mix?

573
00:54:09,030 --> 00:54:15,670
>> KURZKE: I think that is definitely a--I
think that's a very valid use case. What we

574
00:54:15,670 --> 00:54:22,670
want to do in the future is have APIs specific
for TVs. We're not there yet, so stay tuned.

575
00:54:23,700 --> 00:54:30,700
>> I was wondering what would happen if you
have an Android app that uses WebKit?

576
00:54:30,799 --> 00:54:37,799
>> KURZKE: WebKit runs on Google TV today.
So you can just open up a Web view. We've

577
00:54:38,200 --> 00:54:43,089
actually seen a couple of the developers do
that for content, so that would work.

578
00:54:43,089 --> 00:54:46,190
>> It doesn't have to be rewritten because
the primary browser is Chrome?

579
00:54:46,190 --> 00:54:47,580
>> KURZKE: No.
>> Okay. Okay.

580
00:54:47,580 --> 00:54:52,119
>> SAXMAN: Not at all. We have the Web view
still works like [INDISTINCT].

581
00:54:52,119 --> 00:54:54,000
>> KURZKE: Okay. Okay. Thanks everyone.

