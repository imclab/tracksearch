1
00:00:00,000 --> 00:00:00,320

2
00:00:00,320 --> 00:00:04,680
ILMARI HEIKKINEN: Welcome to the
Google Chrome Developers'

3
00:00:04,680 --> 00:00:06,330
WebGL Hangout.

4
00:00:06,330 --> 00:00:11,460
And today, we've got a bunch
of people from the Web GL

5
00:00:11,460 --> 00:00:15,600
community who are
participating.

6
00:00:15,600 --> 00:00:19,700
A bunch of people from the 3JS
side, and we've got Brendan

7
00:00:19,700 --> 00:00:24,360
Kenny, who's on the Google
Maps GL Team,

8
00:00:24,360 --> 00:00:27,998
Brandon Jones from the--

9
00:00:27,998 --> 00:00:32,130
well, he's done some cool
demos, tojico.com.

10
00:00:32,130 --> 00:00:37,610
So if you guys would like to
give us a nice, small self

11
00:00:37,610 --> 00:00:38,860
introduction.

12
00:00:38,860 --> 00:00:41,290

13
00:00:41,290 --> 00:00:42,530
I'll start.

14
00:00:42,530 --> 00:00:46,360
OK, so I'm Ilmari Heikkinen,
and I work on the Google

15
00:00:46,360 --> 00:00:50,160
Chrome Developer Relations
team here at London.

16
00:00:50,160 --> 00:00:58,830
And basically, I do demos,
articles, talks, stuff, and

17
00:00:58,830 --> 00:01:00,490
run hangouts like this.

18
00:01:00,490 --> 00:01:04,180
So please?

19
00:01:04,180 --> 00:01:05,440
PAUL LEWIS: I'll go next.

20
00:01:05,440 --> 00:01:07,870
I'm Paul Lewis.

21
00:01:07,870 --> 00:01:10,250
Some people know me from
aerotwist.com, I spent most of

22
00:01:10,250 --> 00:01:12,620
my days as a web developer.

23
00:01:12,620 --> 00:01:17,620
But outside of that, I do web
GL demos and kind of make

24
00:01:17,620 --> 00:01:20,190
myself useful in that way,
writing tutorials and that

25
00:01:20,190 --> 00:01:21,440
kind of thing.

26
00:01:21,440 --> 00:01:24,530

27
00:01:24,530 --> 00:01:25,910
JEROME ETIENNE: OK,
so I go next.

28
00:01:25,910 --> 00:01:28,460
Hello, Ricardo.

29
00:01:28,460 --> 00:01:31,950
So I've been doing
some tutorials on

30
00:01:31,950 --> 00:01:37,710
learningthreejs.com, and some
nice demo and [? currently ?]

31
00:01:37,710 --> 00:01:39,585
I'm writing J Query.

32
00:01:39,585 --> 00:01:43,882

33
00:01:43,882 --> 00:01:45,390
ILMARI HEIKKINEN: All
right, so that

34
00:01:45,390 --> 00:01:46,640
person was Jerome Etienne.

35
00:01:46,640 --> 00:01:48,700

36
00:01:48,700 --> 00:01:49,814
I think he missed that.

37
00:01:49,814 --> 00:01:50,308
JEROME ETIENNE: Sorry.

38
00:01:50,308 --> 00:01:51,558
Yes.

39
00:01:51,558 --> 00:01:59,710

40
00:01:59,710 --> 00:02:01,090
ILMARI HEIKKINEN:
Can't hear you.

41
00:02:01,090 --> 00:02:02,210
BRENDAN KENNY: There we go.

42
00:02:02,210 --> 00:02:04,010
Hi, I'm Brendan Kenny.

43
00:02:04,010 --> 00:02:07,390
As Ilmari said, I work
on the Maps Developer

44
00:02:07,390 --> 00:02:09,710
Relations Team at Google.

45
00:02:09,710 --> 00:02:15,670
So like him, I write demos
and code samples and help

46
00:02:15,670 --> 00:02:17,070
developers make good maps.

47
00:02:17,070 --> 00:02:19,370
And we're kind of gearing up
right now, actually, with some

48
00:02:19,370 --> 00:02:23,110
really exciting WebGL data
visualization stuff that we

49
00:02:23,110 --> 00:02:25,260
started talking about last week
at Strata and this week

50
00:02:25,260 --> 00:02:29,140
at South by Southwest
in a couple weeks.

51
00:02:29,140 --> 00:02:31,790
Which is great, because WebGL is
very close to my heart, and

52
00:02:31,790 --> 00:02:35,940
any excuse I have to make it as
much of my job as possible

53
00:02:35,940 --> 00:02:37,190
is very welcome.

54
00:02:37,190 --> 00:02:40,390

55
00:02:40,390 --> 00:02:43,530
BRANDON JONES: I'm Brandon
Jones, and I'm a HTML5

56
00:02:43,530 --> 00:02:47,360
developer for Motorola, Web GL
hobbyist, it doesn't actually

57
00:02:47,360 --> 00:02:50,120
have too much to do with my
real job, unfortunately.

58
00:02:50,120 --> 00:02:56,760
But I just like to put several
demos online, author of the GL

59
00:02:56,760 --> 00:03:01,400
Matrix Library, and just
generally enjoy working with

60
00:03:01,400 --> 00:03:03,221
and promoting WebGL
wherever I can.

61
00:03:03,221 --> 00:03:08,700

62
00:03:08,700 --> 00:03:12,070
ILMARI HEIKKINEN: And we have
Ricardo joining us as well.

63
00:03:12,070 --> 00:03:12,550
RICARDO CABELLO: Hello.

64
00:03:12,550 --> 00:03:14,160
ILMARI HEIKKINEN: Can you give
us a short introduction?

65
00:03:14,160 --> 00:03:14,860
RICARDO CABELLO: Sure.

66
00:03:14,860 --> 00:03:17,070
Can you hear me?

67
00:03:17,070 --> 00:03:17,770
ILMARI HEIKKINEN: Yes.

68
00:03:17,770 --> 00:03:18,490
RICARDO CABELLO: Cool.

69
00:03:18,490 --> 00:03:22,800
So I'm Ricard Cabello, or
Cabe-ye-lo, and I started a

70
00:03:22,800 --> 00:03:27,880
library for doing
3D in JavaScript

71
00:03:27,880 --> 00:03:30,530
about two years ago.

72
00:03:30,530 --> 00:03:32,870
Originally, it was for cameras,
and now we have a

73
00:03:32,870 --> 00:03:35,800
WebGL renderer and we have
some samples with that.

74
00:03:35,800 --> 00:03:42,944
And I mainly work on that
library nowadays.

75
00:03:42,944 --> 00:03:45,230
PAUL LEWIS: I think
I've heard of it.

76
00:03:45,230 --> 00:03:47,630
Complete mystery [INAUDIBLE].

77
00:03:47,630 --> 00:03:50,736
RICARDO CABELLO: Yeah, I keep
trying to do nice things so

78
00:03:50,736 --> 00:03:51,986
you can see it.

79
00:03:51,986 --> 00:03:58,580

80
00:03:58,580 --> 00:04:01,250
ILMARI HEIKKINEN: That is
Ricardo Cabello, or Mr. Doob,

81
00:04:01,250 --> 00:04:05,330
from the 3JS fame.

82
00:04:05,330 --> 00:04:07,770
RICARDO CABELLO: I didn't
mention the name?

83
00:04:07,770 --> 00:04:09,510
ILMARI HEIKKINEN: No.

84
00:04:09,510 --> 00:04:12,830
RICARDO CABELLO: Well, you just
you get an idea how good

85
00:04:12,830 --> 00:04:14,080
I am at those things.

86
00:04:14,080 --> 00:04:18,012

87
00:04:18,012 --> 00:04:22,830
ILMARI HEIKKINEN: OK, so the
agenda today is, well, we've

88
00:04:22,830 --> 00:04:26,290
got a lot of 3JS people here, so
let's talk about 3JS, let's

89
00:04:26,290 --> 00:04:29,970
talk about WebGL, what works,
what doesn't, how to get

90
00:04:29,970 --> 00:04:33,640
started, that kind of thing.

91
00:04:33,640 --> 00:04:39,228
If you're working on anything
cool that you can share, it

92
00:04:39,228 --> 00:04:40,600
might be fun to hear about it.

93
00:04:40,600 --> 00:04:44,610

94
00:04:44,610 --> 00:04:47,286
So thank you all
for joining us.

95
00:04:47,286 --> 00:04:48,536
This is great.

96
00:04:48,536 --> 00:04:52,960

97
00:04:52,960 --> 00:04:54,455
RICARDO CABELLO: Is there a way
to know how many people

98
00:04:54,455 --> 00:04:57,332
are watching this?

99
00:04:57,332 --> 00:04:59,710
ILMARI HEIKKINEN:
I have no idea.

100
00:04:59,710 --> 00:05:03,260
I don't think so.

101
00:05:03,260 --> 00:05:06,780
We can see a recorded
views on YouTube.

102
00:05:06,780 --> 00:05:08,210
PETE: Hey guys, I'm Pete.

103
00:05:08,210 --> 00:05:10,810
I'm one of the developer
advocates working on the

104
00:05:10,810 --> 00:05:15,810
Chrome Team with Ilmari and a
bunch of these other guys.

105
00:05:15,810 --> 00:05:19,070
Let me actually ask a first
question from one of the

106
00:05:19,070 --> 00:05:20,690
things that I've seen a
bunch of people ask.

107
00:05:20,690 --> 00:05:22,950
What's the best way for
folks to get started

108
00:05:22,950 --> 00:05:24,296
with the 3JS libraries?

109
00:05:24,296 --> 00:05:30,070

110
00:05:30,070 --> 00:05:32,120
RICARDO CABELLO: I think
Jerome can answer that.

111
00:05:32,120 --> 00:05:34,880

112
00:05:34,880 --> 00:05:39,500
JEROME ETIENNE: Well, OK.

113
00:05:39,500 --> 00:05:42,430
So there's a bunch of tutorials

114
00:05:42,430 --> 00:05:45,160
available on the network.

115
00:05:45,160 --> 00:05:47,670
I'm awfully be sorry,
I'm bad with names.

116
00:05:47,670 --> 00:05:50,140
So probably with
[UNINTELLIGIBLE]

117
00:05:50,140 --> 00:05:51,704
which is [UNINTELLIGIBLE].

118
00:05:51,704 --> 00:05:55,682

119
00:05:55,682 --> 00:06:00,510
And it's called Get Started,
if I remember well?

120
00:06:00,510 --> 00:06:01,840
PAUL LEWIS: Yeah, getting
started with 3JS.

121
00:06:01,840 --> 00:06:02,460
Definitely.

122
00:06:02,460 --> 00:06:03,590
Yeah, that's what it's called.

123
00:06:03,590 --> 00:06:07,215
Sort of does what it says on
the tin, that one, really.

124
00:06:07,215 --> 00:06:09,150
JEROME ETIENNE: So it's under
[? Read Me ?] and I think you

125
00:06:09,150 --> 00:06:12,720
know HTML5 rocks, too.

126
00:06:12,720 --> 00:06:17,505
And personally, I do learning
through GS blog which is a

127
00:06:17,505 --> 00:06:19,170
bunch of tutorial on that.

128
00:06:19,170 --> 00:06:21,670
If you want to learn
learnings 3JS.

129
00:06:21,670 --> 00:06:25,890
Obviously, readings and tutorial
is a good part of it.

130
00:06:25,890 --> 00:06:28,800
After that, you can come and
join the [UNINTELLIGIBLE]

131
00:06:28,800 --> 00:06:31,500
channel to get some
help, live help.

132
00:06:31,500 --> 00:06:34,790
You can [UNINTELLIGIBLE]

133
00:06:34,790 --> 00:06:39,060
or in fact, the meat of 3JS
is inside the example.

134
00:06:39,060 --> 00:06:42,020
There is something like Ricardo
maybe can correct me,

135
00:06:42,020 --> 00:06:44,750
but a huge bunch of them
is [UNINTELLIGIBLE].

136
00:06:44,750 --> 00:06:47,922

137
00:06:47,922 --> 00:06:51,470
RICARDO CABELLO: 1,000.

138
00:06:51,470 --> 00:06:51,680
JEROME ETIENNE: 1,000.

139
00:06:51,680 --> 00:06:52,930
I hope not for you.

140
00:06:52,930 --> 00:06:54,950

141
00:06:54,950 --> 00:06:57,620
So [UNINTELLIGIBLE]

142
00:06:57,620 --> 00:07:00,530
a good bunch of them, showing
the values possibility.

143
00:07:00,530 --> 00:07:06,330
You read the code, and after
that, you get how it works.

144
00:07:06,330 --> 00:07:08,260
It's not that hard.

145
00:07:08,260 --> 00:07:15,020
Essentially, it's pretty easy,
I believe, at least.

146
00:07:15,020 --> 00:07:18,670
RICARDO CABELLO: I think it's
always the best way just to

147
00:07:18,670 --> 00:07:21,590
play with examples and choose
some values, until you start

148
00:07:21,590 --> 00:07:24,600
to get an idea more or less
how the API works.

149
00:07:24,600 --> 00:07:29,260
And these days, I am working on
the documentation finally,

150
00:07:29,260 --> 00:07:33,620
so that will hopefully make
things easier for people that

151
00:07:33,620 --> 00:07:34,870
don't think like me.

152
00:07:34,870 --> 00:07:38,330

153
00:07:38,330 --> 00:07:40,860
BRANDON JONES: If I could just
add something to that.

154
00:07:40,860 --> 00:07:45,990
I think at the last WebGL camp
that we did at Mozilla, Henric

155
00:07:45,990 --> 00:07:51,120
mentioned that anything that
we're doing with WebGL is

156
00:07:51,120 --> 00:07:53,730
effectively open source by
default, because you can go to

157
00:07:53,730 --> 00:07:57,870
any of the sample pages and hit
Control U, whatever it is

158
00:07:57,870 --> 00:07:59,780
in your browser of choice,
and pull up the

159
00:07:59,780 --> 00:08:01,140
source right there.

160
00:08:01,140 --> 00:08:07,100
And I think I've yet to see a
3JS demo that was actually

161
00:08:07,100 --> 00:08:08,470
obfuscated in any way.

162
00:08:08,470 --> 00:08:11,850
So if you see something that you
like online, pull up the

163
00:08:11,850 --> 00:08:13,330
source and start looking
through it.

164
00:08:13,330 --> 00:08:16,180
I've found that that's, in many
cases, the best way to

165
00:08:16,180 --> 00:08:20,120
learn, once you've gotten
over that initial

166
00:08:20,120 --> 00:08:21,370
getting started period.

167
00:08:21,370 --> 00:08:29,500

168
00:08:29,500 --> 00:08:34,610
ILMARI HEIKKINEN: I also have
some basics of 3JS slide tech

169
00:08:34,610 --> 00:08:37,210
up with a bunch of examples.

170
00:08:37,210 --> 00:08:42,970
So that might be one way to get
started as well, if you

171
00:08:42,970 --> 00:08:45,070
just want to--

172
00:08:45,070 --> 00:08:47,140
PETE: Where can folks
find those?

173
00:08:47,140 --> 00:08:47,810
ILMARI HEIKKINEN: Sorry?

174
00:08:47,810 --> 00:08:49,070
PETE: Where can people
find those if they

175
00:08:49,070 --> 00:08:51,430
want to look for them?

176
00:08:51,430 --> 00:08:54,120
ILMARI HEIKKINEN: OK, so
the 3JS home page--

177
00:08:54,120 --> 00:08:58,540
actually the 3JS wiki has links
for getting started.

178
00:08:58,540 --> 00:09:07,860
I think it's
github.com/mrdoob/three.js and

179
00:09:07,860 --> 00:09:10,450
click on the wiki-link there.

180
00:09:10,450 --> 00:09:12,390
PETE: And your slides?

181
00:09:12,390 --> 00:09:14,240
ILMARI HEIKKINEN: My
slides would be at

182
00:09:14,240 --> 00:09:22,580
fhtr.org/basicsof3js with
strange capital--

183
00:09:22,580 --> 00:09:25,960

184
00:09:25,960 --> 00:09:27,890
PETE: Yes, it sounds
like a great URL.

185
00:09:27,890 --> 00:09:32,750
What we'll do is we'll add the
links that get mentioned in

186
00:09:32,750 --> 00:09:36,050
the video, as well as in the
comments for the video

187
00:09:36,050 --> 00:09:36,345
afterwards.

188
00:09:36,345 --> 00:09:38,430
So if you miss any of these
links, don't worry

189
00:09:38,430 --> 00:09:39,680
about that too much.

190
00:09:39,680 --> 00:09:42,270

191
00:09:42,270 --> 00:09:44,990
BRANDON JONES: If we put
something into the group chat,

192
00:09:44,990 --> 00:09:48,296
will it show up for anybody
who's viewing the broadcast?

193
00:09:48,296 --> 00:09:49,890
PETE: No, sadly, it won't.

194
00:09:49,890 --> 00:09:53,900

195
00:09:53,900 --> 00:09:57,390
RICARDO CABELLO: I wonder if
it's better just for people

196
00:09:57,390 --> 00:10:02,490
that want to start to go to
learning WebGL just so they

197
00:10:02,490 --> 00:10:07,780
see what the complexity of the
things are before going to a

198
00:10:07,780 --> 00:10:09,680
framework or a library.

199
00:10:09,680 --> 00:10:13,990
I don't know what's better, if
it's better to go to a library

200
00:10:13,990 --> 00:10:16,040
first, and then understand
what's going

201
00:10:16,040 --> 00:10:17,800
on, or I don't know.

202
00:10:17,800 --> 00:10:19,480
PAUL LEWIS: I mean, that's
kind of how I started.

203
00:10:19,480 --> 00:10:21,910
I started out with 3JS.

204
00:10:21,910 --> 00:10:25,280
And as I got kind of comfortable
with that, I then

205
00:10:25,280 --> 00:10:27,940
hit a slight frustration wall
where I was like, OK, but how

206
00:10:27,940 --> 00:10:31,030
is this actually doing all
this magic on screen?

207
00:10:31,030 --> 00:10:33,690
So for me, I mean, not
necessarily the same for

208
00:10:33,690 --> 00:10:37,390
everybody, but I think my
experience was definitely that

209
00:10:37,390 --> 00:10:39,910
if I went straight to the
WebGL, I found it

210
00:10:39,910 --> 00:10:41,570
overwhelming, I think.

211
00:10:41,570 --> 00:10:44,530
Having it abstracted away so I
could learn the basic concepts

212
00:10:44,530 --> 00:10:47,060
was helpful first, like
[INAUDIBLE] geometry, all

213
00:10:47,060 --> 00:10:47,980
those things.

214
00:10:47,980 --> 00:10:51,340
And then after that, I started
to try and understand what was

215
00:10:51,340 --> 00:10:53,340
going on underneath it.

216
00:10:53,340 --> 00:10:55,120
But I can see the other way
around as well, and I think a

217
00:10:55,120 --> 00:10:56,320
lot of people would say
it works for them

218
00:10:56,320 --> 00:10:56,600
the other way around.

219
00:10:56,600 --> 00:11:00,430
But certainly, in my case, I
found it easier to start with

220
00:11:00,430 --> 00:11:03,070
the library first and then
understand what it was doing

221
00:11:03,070 --> 00:11:05,612
once I understood
those basics.

222
00:11:05,612 --> 00:11:08,800
PETE: Did anybody else go
the other way around?

223
00:11:08,800 --> 00:11:11,250
BRANDON JONES: I went the other
way around, but I think

224
00:11:11,250 --> 00:11:14,990
I was a bit of a special case in
that I'd been working with

225
00:11:14,990 --> 00:11:18,140
3D APIs direct to 3D and OpenGL
on the desktop for a

226
00:11:18,140 --> 00:11:20,190
while, just as hobby.

227
00:11:20,190 --> 00:11:24,160
And so jumping into WebGL
initially was a fairly natural

228
00:11:24,160 --> 00:11:25,930
transition, because
it really is just

229
00:11:25,930 --> 00:11:28,710
OpenGL ES 2 on the web.

230
00:11:28,710 --> 00:11:33,380
And so if you've got that kind
of background, it's probably

231
00:11:33,380 --> 00:11:36,310
going to be more natural and
easier just to jump into using

232
00:11:36,310 --> 00:11:37,620
the API directly.

233
00:11:37,620 --> 00:11:42,790
But if you're not familiar with
that, I mean, it's an API

234
00:11:42,790 --> 00:11:45,340
that's evolved over
a good long time,

235
00:11:45,340 --> 00:11:46,660
and it's fairly complex.

236
00:11:46,660 --> 00:11:48,180
There's a lot of moving parts.

237
00:11:48,180 --> 00:11:51,170
And it takes a lot of
boilerplate code just to get

238
00:11:51,170 --> 00:11:53,440
that initial polygon on screen,
during which you're

239
00:11:53,440 --> 00:11:56,690
pulling your hair out going,
why can't I see anything?

240
00:11:56,690 --> 00:12:05,510
As such, I'm always in favor
of people learning what's

241
00:12:05,510 --> 00:12:06,570
going on behind the scenes.

242
00:12:06,570 --> 00:12:09,380
But I really do think for
something like this, starting

243
00:12:09,380 --> 00:12:13,320
out with a framework is maybe
the path of least frustration.

244
00:12:13,320 --> 00:12:16,750
That said, I do wish that there
was a little bit more in

245
00:12:16,750 --> 00:12:24,840
the way of a bridge between your
3JSes and the raw WebGL.

246
00:12:24,840 --> 00:12:27,220
To say, all right, well if
you're doing this in the

247
00:12:27,220 --> 00:12:32,210
framework, here's how you
transition into the real world

248
00:12:32,210 --> 00:12:35,460
when you want to do something
that's not nicely encapsulated

249
00:12:35,460 --> 00:12:37,202
by a library, because
everybody's going to hit that

250
00:12:37,202 --> 00:12:39,062
at some point.

251
00:12:39,062 --> 00:12:40,312
JEROME ETIENNE: Yeah, but
it's always [INAUDIBLE].

252
00:12:40,312 --> 00:12:43,200

253
00:12:43,200 --> 00:12:46,190
My opinion, at least, is what
bigger [UNINTELLIGIBLE]

254
00:12:46,190 --> 00:12:47,600
of 3JS or [UNINTELLIGIBLE]

255
00:12:47,600 --> 00:12:49,830
is you don't need to
understand all

256
00:12:49,830 --> 00:12:51,770
the mathematics behind.

257
00:12:51,770 --> 00:12:54,570
BRANDON JONES: Which is a huge
plus at the very beginning

258
00:12:54,570 --> 00:12:56,320
when you're starting to learn,
because that's very

259
00:12:56,320 --> 00:12:59,310
complicated stuff.

260
00:12:59,310 --> 00:13:02,135
JEROME ETIENNE: People like it
because [UNINTELLIGIBLE]

261
00:13:02,135 --> 00:13:06,290
and stuff like that, or they
don't want to do that.

262
00:13:06,290 --> 00:13:08,920
So at least my personal opinion,
[UNINTELLIGIBLE] take

263
00:13:08,920 --> 00:13:12,060
advantage of libraries, because
they hide all of these

264
00:13:12,060 --> 00:13:13,870
problems.

265
00:13:13,870 --> 00:13:17,080
BRANDON JONES: I completely
agree.

266
00:13:17,080 --> 00:13:20,640
PAUL LEWIS: I think that's
a really good point.

267
00:13:20,640 --> 00:13:22,450
But I think, Brandon, I think
you touched on this awhile ago

268
00:13:22,450 --> 00:13:26,210
in one of your blog posts about
one of the reasons that

269
00:13:26,210 --> 00:13:29,640
you do the raw WebGL is as much
as anything, sometimes

270
00:13:29,640 --> 00:13:32,400
you can really target exactly
what you want to do.

271
00:13:32,400 --> 00:13:35,780
And the best one in the world
any engine is trying to give

272
00:13:35,780 --> 00:13:37,970
you a fairly generic viewing.

273
00:13:37,970 --> 00:13:41,250
They'll let you do a number of
tasks, and you might need to

274
00:13:41,250 --> 00:13:43,300
just go straight in and
do one specific thing.

275
00:13:43,300 --> 00:13:45,820
And in that case, it
might not be as

276
00:13:45,820 --> 00:13:46,950
suitable to use the library.

277
00:13:46,950 --> 00:13:49,580
It may actually be more suitable
to just try and

278
00:13:49,580 --> 00:13:51,560
pinpoint that one little thing
that you're trying to do.

279
00:13:51,560 --> 00:13:55,690

280
00:13:55,690 --> 00:13:56,280
ILMARI HEIKKINEN: [INAUDIBLE]

281
00:13:56,280 --> 00:13:57,905
like?

282
00:13:57,905 --> 00:13:59,790
Since I see a bunch of
tutorials that are--

283
00:13:59,790 --> 00:14:06,570
on one hand, there's 3JS,
getting started with 3JS,

284
00:14:06,570 --> 00:14:08,160
getting started with
libraries.

285
00:14:08,160 --> 00:14:15,490
And then there's this sort of
low level WebGL, the very

286
00:14:15,490 --> 00:14:19,130
basics, and getting
up from there.

287
00:14:19,130 --> 00:14:23,530
So I guess the bridge would be
something that's sort of like

288
00:14:23,530 --> 00:14:30,360
making your own 3D library,
or something like that.

289
00:14:30,360 --> 00:14:32,340
BRANDON JONES: I would have a
really hard time recommending

290
00:14:32,340 --> 00:14:35,450
that to anybody, honestly.

291
00:14:35,450 --> 00:14:36,700
JEROME ETIENNE: [INAUDIBLE]
can do it.

292
00:14:36,700 --> 00:14:40,720

293
00:14:40,720 --> 00:14:43,850
BRANDON JONES: It would
certainly be an educational

294
00:14:43,850 --> 00:14:49,440
experience for people, but
yeah, I don't know.

295
00:14:49,440 --> 00:14:50,000
Doing your own library--

296
00:14:50,000 --> 00:14:51,260
BRENDAN KENNY: Well it depends
on, are you trying to get

297
00:14:51,260 --> 00:14:53,730
something done, or you
just trying to make

298
00:14:53,730 --> 00:14:54,930
something and learn?

299
00:14:54,930 --> 00:14:58,080
I think Paul would be the best
person to ask about how

300
00:14:58,080 --> 00:15:01,192
effective that is at learning.

301
00:15:01,192 --> 00:15:08,730
PAUL LEWIS: Yeah, so my way of
learning WebGL after spending

302
00:15:08,730 --> 00:15:12,640
some time with 3JS was to
try and write my own.

303
00:15:12,640 --> 00:15:15,890
And Brendan was actually
exceedingly helpful during

304
00:15:15,890 --> 00:15:19,450
that process as I was sort of
scratching my head and pulling

305
00:15:19,450 --> 00:15:24,120
my hair out for sort of, how
do you use matrices.

306
00:15:24,120 --> 00:15:28,040
All those kinds of things that
had been abstracted away, and

307
00:15:28,040 --> 00:15:31,540
I couldn't remember from
my time at school.

308
00:15:31,540 --> 00:15:33,330
Would I use my own engine
in production?

309
00:15:33,330 --> 00:15:36,180
I put my hand on my heart and
say no, I'd use 3JS if I was

310
00:15:36,180 --> 00:15:39,270
in a production setting, because
I think it's a lot

311
00:15:39,270 --> 00:15:40,700
more mature as a library.

312
00:15:40,700 --> 00:15:43,380
In terms of learning, I
learned tons doing it.

313
00:15:43,380 --> 00:15:45,880
I learned what not to do.

314
00:15:45,880 --> 00:15:48,280
There are still tons of things
that I'm still learning that I

315
00:15:48,280 --> 00:15:49,390
should have done better.

316
00:15:49,390 --> 00:15:53,200
But I think in terms of starting
from absolutely no

317
00:15:53,200 --> 00:15:55,980
understanding to understanding
OK, these are the components,

318
00:15:55,980 --> 00:15:58,960
these are the bits that go in,
yeah, I'm glad I tried to

319
00:15:58,960 --> 00:16:01,160
write one, certainly.

320
00:16:01,160 --> 00:16:05,276
So it's valid from a learning
standpoint, for sure.

321
00:16:05,276 --> 00:16:08,130
But as Brendan said, if you're
trying to get something done,

322
00:16:08,130 --> 00:16:09,790
you might want to use something
that's already

323
00:16:09,790 --> 00:16:12,292
mature and out there
and working.

324
00:16:12,292 --> 00:16:14,290
BRENDAN KENNY: Yeah, it won't
be an efficient process.

325
00:16:14,290 --> 00:16:16,710
You'll be spending a lot of time
wondering why nothing is

326
00:16:16,710 --> 00:16:18,370
on the screen.

327
00:16:18,370 --> 00:16:20,390
PETE: So actually, there's a
question on the moderator

328
00:16:20,390 --> 00:16:23,950
right now that I think this
segues really nicely into.

329
00:16:23,950 --> 00:16:28,030
The question is, what are some
of the most popular, efficient

330
00:16:28,030 --> 00:16:32,835
tools and libraries for people
to use with WebGL?

331
00:16:32,835 --> 00:16:38,710

332
00:16:38,710 --> 00:16:39,515
BRANDON JONES: Define
efficiency.

333
00:16:39,515 --> 00:16:42,385
I mean, are you talking about
efficiency of rendering?

334
00:16:42,385 --> 00:16:45,320
Are you talking about efficiency
of how fast it is

335
00:16:45,320 --> 00:16:47,940
to get something up on screen?

336
00:16:47,940 --> 00:16:49,810
There's several different ways
you could take that.

337
00:16:49,810 --> 00:16:50,740
PETE: Yeah, absolutely.

338
00:16:50,740 --> 00:16:54,410
I'll leave that up to your
imagination as the questioner

339
00:16:54,410 --> 00:16:55,290
did for us.

340
00:16:55,290 --> 00:16:57,820
So however you want
to answer that.

341
00:16:57,820 --> 00:17:01,130

342
00:17:01,130 --> 00:17:03,700
JEROME ETIENNE: Go
ahead, guys.

343
00:17:03,700 --> 00:17:05,109
RICARDO CABELLO: Isn't there
like a wiki page with all the

344
00:17:05,109 --> 00:17:08,010
list of WebGL--

345
00:17:08,010 --> 00:17:09,680
I think it's on Chome's website,
there is a list of

346
00:17:09,680 --> 00:17:12,750
all the frameworks
and libraries for

347
00:17:12,750 --> 00:17:14,000
people to play with?

348
00:17:14,000 --> 00:17:17,690

349
00:17:17,690 --> 00:17:18,230
[INTERPOSING VOICES]

350
00:17:18,230 --> 00:17:19,140
BRANDON JONES: I think
[UNINTELLIGIBLE] has something

351
00:17:19,140 --> 00:17:20,390
similar, too.

352
00:17:20,390 --> 00:17:24,530

353
00:17:24,530 --> 00:17:26,640
JEROME ETIENNE: Maybe we can
decompose that and see, for

354
00:17:26,640 --> 00:17:30,620
example, if efficiency is
development time, if

355
00:17:30,620 --> 00:17:36,255
efficiency is running speed,
or I don't know.

356
00:17:36,255 --> 00:17:39,775
We can list by assumption.

357
00:17:39,775 --> 00:17:45,440
BRENDAN KENNY: I haven't used
all of the WebGL framework, so

358
00:17:45,440 --> 00:17:48,300
I haven't used, say, SceneJS
or things like that.

359
00:17:48,300 --> 00:17:50,550
But I'm a big fan of--

360
00:17:50,550 --> 00:17:52,690
I know Brandon was talking
earlier about the transition

361
00:17:52,690 --> 00:18:01,480
between 3JS and then kind
of more pure WebGL.

362
00:18:01,480 --> 00:18:04,560
I'm a big fan of PhiloGL or
Phy-lo GL, depending on how

363
00:18:04,560 --> 00:18:06,860
you pronounce your
Greek letters.

364
00:18:06,860 --> 00:18:10,765
And also, this one doesn't get
talked about much, but Evan

365
00:18:10,765 --> 00:18:15,350
Wallace has made some really
amazing WebGL demos.

366
00:18:15,350 --> 00:18:17,850
He's the guy that made the ball
that's floating in water,

367
00:18:17,850 --> 00:18:20,200
and it does real time refraction
and everything,

368
00:18:20,200 --> 00:18:21,350
path tracing.

369
00:18:21,350 --> 00:18:25,540
Anyway, he has a really
lightweight WebGL library on

370
00:18:25,540 --> 00:18:27,980
his GitHub account, on
his GitHub page.

371
00:18:27,980 --> 00:18:31,330
And I don't know if he ever
advertises it, but you can go

372
00:18:31,330 --> 00:18:34,070
and fork it and use it.

373
00:18:34,070 --> 00:18:38,240
So I'm a big fan of those, but
only if you want to get as

374
00:18:38,240 --> 00:18:42,690
close to WebGL as possible
with taking some of the

375
00:18:42,690 --> 00:18:44,570
boilerplate out of the mix.

376
00:18:44,570 --> 00:18:45,920
RICARDO CABELLO: Have
you tried the TDL

377
00:18:45,920 --> 00:18:48,910
one from Greg Taveres?

378
00:18:48,910 --> 00:18:49,560
BRENDAN KENNY: That's
a good point.

379
00:18:49,560 --> 00:18:50,150
That's another one.

380
00:18:50,150 --> 00:18:52,670
I haven't used that
in awhile, though.

381
00:18:52,670 --> 00:18:54,100
I don't know if he--

382
00:18:54,100 --> 00:18:55,680
RICARDO CABELLO: But
do you know how he

383
00:18:55,680 --> 00:18:58,730
compares to the Evan one?

384
00:18:58,730 --> 00:19:00,610
BRENDAN KENNY: Oh, it's
pretty similar.

385
00:19:00,610 --> 00:19:04,630
Greg is like a graphics
programmer, longtime graphics

386
00:19:04,630 --> 00:19:07,790
programmer, so it's
definitely--

387
00:19:07,790 --> 00:19:10,540
and he comes from like
a C, C++ background.

388
00:19:10,540 --> 00:19:13,110
And I think that's he was
writing it while he was still

389
00:19:13,110 --> 00:19:15,010
kind of getting to
know JavaScript.

390
00:19:15,010 --> 00:19:16,760
So it's not as naturally
JavaScript, but it's

391
00:19:16,760 --> 00:19:19,230
definitely in terms of
efficiency, it's definitely

392
00:19:19,230 --> 00:19:22,750
there, because that's why he
wrote it was to get things on

393
00:19:22,750 --> 00:19:27,130
the screen with no
cruft in between.

394
00:19:27,130 --> 00:19:35,630
So yeah, definitely a fan of
picking code from Greg's code

395
00:19:35,630 --> 00:19:37,500
anytime I want to just
get something done.

396
00:19:37,500 --> 00:19:43,380

397
00:19:43,380 --> 00:19:47,280
ILMARI HEIKKINEN: Brandon,
you've done like the Quake 3

398
00:19:47,280 --> 00:19:52,450
demo, and the JS2 demo, and the
Rage demo, and they all

399
00:19:52,450 --> 00:19:55,440
seem to be something that would
actually use quite a bit

400
00:19:55,440 --> 00:19:58,820
of horsepower and require
a lot of performance.

401
00:19:58,820 --> 00:20:02,590
So do you have any tips
and tricks on that?

402
00:20:02,590 --> 00:20:04,030
BRANDON JONES: Oh goodness.

403
00:20:04,030 --> 00:20:06,750
I'm very fond of saying that
anything you would have done

404
00:20:06,750 --> 00:20:10,860
in the desktop still applies
here, for the most part.

405
00:20:10,860 --> 00:20:13,030
But I'm learning more
and more that--

406
00:20:13,030 --> 00:20:15,120
and I think this is great, by
the way, that we've got a

407
00:20:15,120 --> 00:20:19,800
large community of people who
are coming into WebGL as

408
00:20:19,800 --> 00:20:22,040
experienced web developers,
but not necessarily

409
00:20:22,040 --> 00:20:24,500
experienced 3D developers
for the desktop.

410
00:20:24,500 --> 00:20:30,210
So I think that advice maybe
falls a little flat.

411
00:20:30,210 --> 00:20:34,840
But some of the just really
general tips-- and I've seen

412
00:20:34,840 --> 00:20:40,200
that many of the frameworks
allow these optimizations in

413
00:20:40,200 --> 00:20:42,510
some way, shape or form--

414
00:20:42,510 --> 00:20:46,970
is primarily, you just want to
group as many similar draw

415
00:20:46,970 --> 00:20:49,290
calls together as you can.

416
00:20:49,290 --> 00:20:53,400
So if you've got a whole bunch
of geometry that uses the same

417
00:20:53,400 --> 00:20:56,410
texture, the same material,
whatever the case may be, you

418
00:20:56,410 --> 00:20:58,820
want to try to, as much as
possible, render those in a

419
00:20:58,820 --> 00:21:00,530
single draw call.

420
00:21:00,530 --> 00:21:04,590
I know, for example, like 3JS--
and I don't know the

421
00:21:04,590 --> 00:21:06,100
right terminology
for this, maybe

422
00:21:06,100 --> 00:21:07,700
Ricardo can help me out--

423
00:21:07,700 --> 00:21:10,160
allows you to actually
batch up geometry

424
00:21:10,160 --> 00:21:11,410
into a single buffer.

425
00:21:11,410 --> 00:21:14,340

426
00:21:14,340 --> 00:21:16,280
RICARDO CABELLO: Managing
geometry in just a single

427
00:21:16,280 --> 00:21:17,620
geometry, yeah.

428
00:21:17,620 --> 00:21:18,290
BRANDON JONES: Yeah,
thank you.

429
00:21:18,290 --> 00:21:19,830
That's what it is.

430
00:21:19,830 --> 00:21:21,810
You want to try to
do that kind of

431
00:21:21,810 --> 00:21:24,120
thing as much as possible.

432
00:21:24,120 --> 00:21:30,280
So just as a high level bit of
real world advice, so for the

433
00:21:30,280 --> 00:21:35,400
Quake 3 and the TF2 demos,
what I tend to do is do a

434
00:21:35,400 --> 00:21:38,170
pre-process over the
level, just sort

435
00:21:38,170 --> 00:21:41,290
everything by material.

436
00:21:41,290 --> 00:21:44,790
And then if I'm doing any
visibility culling, it tends

437
00:21:44,790 --> 00:21:48,650
to be on the material level, not
the geometry block level.

438
00:21:48,650 --> 00:21:51,710
And my render loop is basically
just a loop over

439
00:21:51,710 --> 00:21:54,390
every material in the scene,
and then I render every

440
00:21:54,390 --> 00:21:58,100
triangle that uses that material
to switch state as

441
00:21:58,100 --> 00:21:59,360
little as possible.

442
00:21:59,360 --> 00:22:02,950
And this tends to be a very
effective way of rendering a

443
00:22:02,950 --> 00:22:05,850
lot of polygons very quickly.

444
00:22:05,850 --> 00:22:08,810
But it does take a lot
of pre-sorting and

445
00:22:08,810 --> 00:22:11,160
pre-calculating to begin with.

446
00:22:11,160 --> 00:22:13,550
So it's not necessarily an
easy process, but it's a

447
00:22:13,550 --> 00:22:15,920
worthwhile one if you're
really going for high

448
00:22:15,920 --> 00:22:17,170
performance.

449
00:22:17,170 --> 00:22:20,420

450
00:22:20,420 --> 00:22:20,765
ILMARI HEIKKINEN: Thanks.

451
00:22:20,765 --> 00:22:22,015
That's awesome.

452
00:22:22,015 --> 00:22:24,860

453
00:22:24,860 --> 00:22:29,290
OK, so I'm going to go through
my spiel a bit.

454
00:22:29,290 --> 00:22:33,880
So this is the Google Chrome
Developers WebGL hangout.

455
00:22:33,880 --> 00:22:38,790
And here we have a list of
guests from the WebGL world.

456
00:22:38,790 --> 00:22:45,050
Starting from the left, Brandon
Jones from tojico.com

457
00:22:45,050 --> 00:22:48,920
Then we have Brendan Kenny, from
the Google Maps Developer

458
00:22:48,920 --> 00:22:50,762
Relations Team.

459
00:22:50,762 --> 00:22:54,950
Me, Ilmari Heikknen, from the
Google Chrome Developer

460
00:22:54,950 --> 00:22:56,420
Relations Team.

461
00:22:56,420 --> 00:22:59,175
Then we've got Jerome Etienne,
from learning3js.com.

462
00:22:59,175 --> 00:23:01,740

463
00:23:01,740 --> 00:23:07,770
Paul Lewis from aerotwist.com,
and Ricardo

464
00:23:07,770 --> 00:23:10,370
Cabello of 3JS fame.

465
00:23:10,370 --> 00:23:13,120

466
00:23:13,120 --> 00:23:16,960
And we are talking about
WebGL and 3JS.

467
00:23:16,960 --> 00:23:22,100

468
00:23:22,100 --> 00:23:24,360
ILMARI HEIKKINEN:
[UNINTELLIGIBLE]

469
00:23:24,360 --> 00:23:27,770
Greetings, we have a new guest.
Any questions thus far?

470
00:23:27,770 --> 00:23:31,690

471
00:23:31,690 --> 00:23:32,940
RICARDO CABELLO: I
think he's mute.

472
00:23:32,940 --> 00:23:38,020

473
00:23:38,020 --> 00:23:41,160
MICHAEL ENSMINGER: Now
can you hear me?

474
00:23:41,160 --> 00:23:41,435
Wow.

475
00:23:41,435 --> 00:23:42,150
Hi.

476
00:23:42,150 --> 00:23:46,130
No, I just joined.

477
00:23:46,130 --> 00:23:51,990
I just want to agree on what
Brandon just said, that

478
00:23:51,990 --> 00:23:54,465
keeping draw calls down
is a big one.

479
00:23:54,465 --> 00:23:57,560
I'm sitting with a WebGL
project right now,

480
00:23:57,560 --> 00:24:05,360
prototyping, and we saw some
great performance increase

481
00:24:05,360 --> 00:24:09,060
when we did just that.

482
00:24:09,060 --> 00:24:14,570
We just brought down like 2,000
draw calls into one, it

483
00:24:14,570 --> 00:24:20,050
was this huge performance
increase, which was great.

484
00:24:20,050 --> 00:24:24,330

485
00:24:24,330 --> 00:24:24,870
ILMARI HEIKKINEN:
Cool, thanks.

486
00:24:24,870 --> 00:24:26,330
PETE: I have a question
for Brendan.

487
00:24:26,330 --> 00:24:29,400
Brendan, I know that the Maps
Team is doing some stuff

488
00:24:29,400 --> 00:24:30,890
around WebGL.

489
00:24:30,890 --> 00:24:34,230
Can you talk about that
just a little bit?

490
00:24:34,230 --> 00:24:35,900
BRENDAN KENNY: Oh, yeah.

491
00:24:35,900 --> 00:24:44,170
So we've been kind of on
a kick lately to get--

492
00:24:44,170 --> 00:24:47,100
let's see.

493
00:24:47,100 --> 00:24:50,140
Thinking about how to visualize
large data sets,

494
00:24:50,140 --> 00:24:52,410
especially geographic data sets,
but in our case just

495
00:24:52,410 --> 00:24:59,840
large data sets, kind looking at
beyond 3D or I guess games

496
00:24:59,840 --> 00:25:02,860
applications of WebGL.

497
00:25:02,860 --> 00:25:08,220
I'm a gamer at heart, but it's
interesting to look at what

498
00:25:08,220 --> 00:25:11,530
experiences WebGL enables that
didn't exist before,

499
00:25:11,530 --> 00:25:15,250
or even a year ago.

500
00:25:15,250 --> 00:25:20,025
So we've been looking at kind
of what can we do to kind of

501
00:25:20,025 --> 00:25:22,840
take a glimpse into large data
sets and see the kind of

502
00:25:22,840 --> 00:25:25,820
patterns that are there.

503
00:25:25,820 --> 00:25:27,460
And we have a presentation,
but I don't know

504
00:25:27,460 --> 00:25:29,480
how to link it up.

505
00:25:29,480 --> 00:25:34,250
But we've been starting to
present some things with my

506
00:25:34,250 --> 00:25:37,620
colleague Chris Broadfoot,
just presented a

507
00:25:37,620 --> 00:25:39,290
really great data set.

508
00:25:39,290 --> 00:25:43,040
It's like 1 million GPS
coordinates from cabs in San

509
00:25:43,040 --> 00:25:46,020
Francisco from one night
in San Francisco.

510
00:25:46,020 --> 00:25:48,870
And so he visualized
it in real time.

511
00:25:48,870 --> 00:25:52,300
You can kind of see where all
the cabs are, but then you can

512
00:25:52,300 --> 00:25:54,720
kind of also spread it out
through time, so you can start

513
00:25:54,720 --> 00:25:58,590
seeing, where are the slow parts
of the city, where are

514
00:25:58,590 --> 00:26:00,300
cabs just kind of hanging
out during the night?

515
00:26:00,300 --> 00:26:02,700
Or even like we started looking
at some really cool

516
00:26:02,700 --> 00:26:05,010
stuff of kind of the spread
of the GPS points.

517
00:26:05,010 --> 00:26:07,200
Because you can see in downtown
San Francisco,

518
00:26:07,200 --> 00:26:10,590
there's not good GPS reception
because of the tall buildings.

519
00:26:10,590 --> 00:26:14,430
And so you see the GPS becomes
kind of a fog instead of nice

520
00:26:14,430 --> 00:26:16,425
paths on the road.

521
00:26:16,425 --> 00:26:19,380
Once you can actually see it
on screen, you can start

522
00:26:19,380 --> 00:26:24,240
getting ideas for teasing out
patterns and data that you

523
00:26:24,240 --> 00:26:25,690
wouldn't actually be able
to do if you just

524
00:26:25,690 --> 00:26:29,690
saw it in a CSV file.

525
00:26:29,690 --> 00:26:33,190
Anyway, so yeah, we've been
working on kind of good ways

526
00:26:33,190 --> 00:26:35,140
of doing that, and then starting
to advocate to

527
00:26:35,140 --> 00:26:36,960
developers just now.

528
00:26:36,960 --> 00:26:40,290
We're going to continue, there's
a South by Southwest

529
00:26:40,290 --> 00:26:43,530
session sometime very
soon, I'm not sure.

530
00:26:43,530 --> 00:26:47,100

531
00:26:47,100 --> 00:26:49,980
Yeah, so that's kind of
what we're up to.

532
00:26:49,980 --> 00:26:52,500
RICARDO CABELLO: Isn't it next
week, South by Southwest?

533
00:26:52,500 --> 00:26:54,512
BRANDON JONES: It could
be, I don't know.

534
00:26:54,512 --> 00:26:56,330
PETE: I think it starts
this weekend.

535
00:26:56,330 --> 00:26:58,015
BRANDON JONES: I think the
interactive starts this

536
00:26:58,015 --> 00:27:00,780
weekend, and maybe music is
next week or something.

537
00:27:00,780 --> 00:27:05,300

538
00:27:05,300 --> 00:27:06,990
PETE: So there's another
question from the moderator

539
00:27:06,990 --> 00:27:08,630
that I want to just pop up.

540
00:27:08,630 --> 00:27:11,430
And the question was,
do you think that--

541
00:27:11,430 --> 00:27:14,070
and it's OK not to know the
answer to this-- but do you

542
00:27:14,070 --> 00:27:17,380
think that Dart will have some
WebGL functions directly

543
00:27:17,380 --> 00:27:18,630
included in it?

544
00:27:18,630 --> 00:27:20,760

545
00:27:20,760 --> 00:27:23,320
BRANDON JONES: So I was actually
playing around with

546
00:27:23,320 --> 00:27:28,170
WebGL in Dart maybe a week
ago, and just doing some

547
00:27:28,170 --> 00:27:29,810
initial pokings at that.

548
00:27:29,810 --> 00:27:33,560
It is supported right now.

549
00:27:33,560 --> 00:27:36,840
You access it through
their DOM API.

550
00:27:36,840 --> 00:27:40,680
So it's very much just a
direct exposure of the

551
00:27:40,680 --> 00:27:42,170
underlying WebGL API.

552
00:27:42,170 --> 00:27:45,700
There's not anything really too
terribly special about it

553
00:27:45,700 --> 00:27:47,860
to help you out, at
least not yet.

554
00:27:47,860 --> 00:27:49,390
I don't know what their
plans are for it,

555
00:27:49,390 --> 00:27:51,330
going in the future.

556
00:27:51,330 --> 00:27:55,460
And I must say that it's a
little annoying to work with,

557
00:27:55,460 --> 00:27:58,470
because any of your
enumerations, you end up

558
00:27:58,470 --> 00:28:01,320
having to type out the full
WebGL object name every time.

559
00:28:01,320 --> 00:28:05,330
It's like
WebGLRenderContext.Blend,

560
00:28:05,330 --> 00:28:07,180
which is a little annoying.

561
00:28:07,180 --> 00:28:08,380
But it works.

562
00:28:08,380 --> 00:28:09,430
It works quite well.

563
00:28:09,430 --> 00:28:13,180
I found it to be fairly
performant.

564
00:28:13,180 --> 00:28:17,380
And yeah, it's just it's very
low-level at this point.

565
00:28:17,380 --> 00:28:20,480
That's about the only thing
I have to say against it.

566
00:28:20,480 --> 00:28:23,080
BRENDAN KENNY: Yeah, I think
it's hard with WebGL being so

567
00:28:23,080 --> 00:28:27,520
young to really commit to an
abstraction that maybe Dart

568
00:28:27,520 --> 00:28:31,440
would like, and then know in
like a year or two that it

569
00:28:31,440 --> 00:28:32,740
would have been a
good decision.

570
00:28:32,740 --> 00:28:35,075
So it seems like it's better to
leave it at low-level, and

571
00:28:35,075 --> 00:28:37,160
then maybe rely on authors
to make something

572
00:28:37,160 --> 00:28:41,060
like a 3JS in Dart.

573
00:28:41,060 --> 00:28:44,130
Theoretically in time, it might
be nice, the kind of

574
00:28:44,130 --> 00:28:49,690
tight checking and other
benefits of Dart might be a

575
00:28:49,690 --> 00:28:51,630
good thing there.

576
00:28:51,630 --> 00:28:55,270
On the other hand, WebGL code is
already very typed, because

577
00:28:55,270 --> 00:28:57,820
you have to have typed arrays,
and that sort of thing.

578
00:28:57,820 --> 00:29:00,870

579
00:29:00,870 --> 00:29:04,800
It seems like it would be a bit
of a wash, like it's very

580
00:29:04,800 --> 00:29:07,050
much there if you're
using Dart.

581
00:29:07,050 --> 00:29:09,870
But I don't know if there are
any great advantages that Dart

582
00:29:09,870 --> 00:29:11,120
brings there.

583
00:29:11,120 --> 00:29:16,310

584
00:29:16,310 --> 00:29:18,400
BRANDON JONES: I didn't
find it to be any

585
00:29:18,400 --> 00:29:21,080
better or worse, really.

586
00:29:21,080 --> 00:29:22,330
It's just WebGL.

587
00:29:22,330 --> 00:29:26,130

588
00:29:26,130 --> 00:29:26,520
PETE: Cool.

589
00:29:26,520 --> 00:29:29,030
Well, there's another
question in here.

590
00:29:29,030 --> 00:29:32,220
With WebGL coming to mobile
platforms, what kind of new

591
00:29:32,220 --> 00:29:35,170
applications will this enable,
and will performance be good

592
00:29:35,170 --> 00:29:38,040
enough to compete with
native applications?

593
00:29:38,040 --> 00:29:39,290
This is from Jeff.

594
00:29:39,290 --> 00:29:42,080

595
00:29:42,080 --> 00:29:47,380
ILMARI HEIKKINEN: Well, WebGL
performance is basically

596
00:29:47,380 --> 00:29:53,780
JavaScript performance plus the
bindings of the open GLES

597
00:29:53,780 --> 00:29:56,240
2.0 driver's performance.

598
00:29:56,240 --> 00:30:01,210
So if the mobile JavaScript
performance is there, then you

599
00:30:01,210 --> 00:30:06,120
should be able to do stuff that
you can do on mobile in

600
00:30:06,120 --> 00:30:10,100
native code, graphics-wise.

601
00:30:10,100 --> 00:30:13,180
Well, that's my hunch
at least.

602
00:30:13,180 --> 00:30:15,950
PAUL LEWIS: There was that Opera
demo a week or so ago,

603
00:30:15,950 --> 00:30:20,530
right, that was running 60,
70 frames a second?

604
00:30:20,530 --> 00:30:25,470
And it was the Opera, the guy
walking on the platform

605
00:30:25,470 --> 00:30:27,865
looking really mean
and grumpy.

606
00:30:27,865 --> 00:30:29,490
You know the one?

607
00:30:29,490 --> 00:30:37,940
JEROME ETIENNE: It was 72 FPS
with 37,000 polygons, and it

608
00:30:37,940 --> 00:30:39,190
was on Opera Mobile.

609
00:30:39,190 --> 00:30:41,900

610
00:30:41,900 --> 00:30:45,230
But well, this was a demo.

611
00:30:45,230 --> 00:30:46,770
The main difference that
I have seen on

612
00:30:46,770 --> 00:30:48,910
mobile is two things.

613
00:30:48,910 --> 00:30:50,870
First, it's [? VPU ?]

614
00:30:50,870 --> 00:30:53,490
doesn't have the same
characteristic.

615
00:30:53,490 --> 00:30:57,045
So what we are used to
on desktop, mobile

616
00:30:57,045 --> 00:30:57,830
[UNINTELLIGIBLE]

617
00:30:57,830 --> 00:31:02,050
bottleneck [UNINTELLIGIBLE]
almost the same.

618
00:31:02,050 --> 00:31:06,200
Another part which for 3JS is
important, the JavaScript is

619
00:31:06,200 --> 00:31:07,780
much lower.

620
00:31:07,780 --> 00:31:13,960
So all 3JS is going to have to
make progress, let's say.

621
00:31:13,960 --> 00:31:18,400
BRANDON JONES: So just to throw
this out, I actually had

622
00:31:18,400 --> 00:31:24,787
a coworker of mine show me the
new Opera 12 running on, I

623
00:31:24,787 --> 00:31:26,080
think it was an Atrix 2.

624
00:31:26,080 --> 00:31:28,620

625
00:31:28,620 --> 00:31:33,880
And we pulled up my Quake 3
demo, and we were able to get

626
00:31:33,880 --> 00:31:39,000
it running on there at about
26 frames per second, which

627
00:31:39,000 --> 00:31:40,950
was pretty good, overall.

628
00:31:40,950 --> 00:31:46,890
Now as a disclaimer on that one,
I've got the Quake 3 demo

629
00:31:46,890 --> 00:31:50,360
set so that when you run it on
mobile now, it will actually

630
00:31:50,360 --> 00:31:52,990
render at a quarter of the
screen size and then upscale

631
00:31:52,990 --> 00:31:57,830
it through CSS, so it's
not utilizing every

632
00:31:57,830 --> 00:31:59,110
pixel on the screen.

633
00:31:59,110 --> 00:32:03,220
But generally, it still gives
acceptable results, and we

634
00:32:03,220 --> 00:32:05,130
were getting pretty close
to 30 frames per

635
00:32:05,130 --> 00:32:06,250
second on that device.

636
00:32:06,250 --> 00:32:10,950
I also tried it on, I think, an
older model Samsung Galaxy

637
00:32:10,950 --> 00:32:12,580
tab, and unfortunately,
I was getting

638
00:32:12,580 --> 00:32:14,120
maybe 12 or so on that.

639
00:32:14,120 --> 00:32:17,860
But it was also rendering a
much larger screen area.

640
00:32:17,860 --> 00:32:21,490
But I must say that overall, I
was actually very impressed at

641
00:32:21,490 --> 00:32:26,300
how well Opera was able
to handle it.

642
00:32:26,300 --> 00:32:28,710
I've done some similar
experiments in Firefox in the

643
00:32:28,710 --> 00:32:31,550
past, unfortunately haven't done
those recently, but it's

644
00:32:31,550 --> 00:32:33,250
always seemed to do decently.

645
00:32:33,250 --> 00:32:36,560
And I'm looking forward to when
they finally flip the

646
00:32:36,560 --> 00:32:39,780
switch on WebGL for Chrome
on mobile, to see

647
00:32:39,780 --> 00:32:40,620
where that is, too.

648
00:32:40,620 --> 00:32:44,420
But it's definitely much lower
than you would ever get on the

649
00:32:44,420 --> 00:32:47,900
desktop, but performs better
than expected, I'd say.

650
00:32:47,900 --> 00:32:50,630

651
00:32:50,630 --> 00:32:52,460
BRENDAN KENNY: Yeah, you
shouldn't feel bad about

652
00:32:52,460 --> 00:32:54,530
shrinking the back buffer,
because that's common on

653
00:32:54,530 --> 00:32:55,610
native apps, too.

654
00:32:55,610 --> 00:32:59,710
So they can't complain.

655
00:32:59,710 --> 00:33:04,090
I'm really excited about
the mobile WebGL stuff.

656
00:33:04,090 --> 00:33:08,410
I think not only does it let
us make kind of this new

657
00:33:08,410 --> 00:33:11,100
content, so that's exciting
in and of itself,

658
00:33:11,100 --> 00:33:11,690
having it on mobile.

659
00:33:11,690 --> 00:33:17,150
But I think in terms of the
mobile platform itself, it'll

660
00:33:17,150 --> 00:33:20,890
enable kind of experiences that
we haven't been able to

661
00:33:20,890 --> 00:33:24,160
make before, and it will be in
your pocket, just like a

662
00:33:24,160 --> 00:33:26,680
native app.

663
00:33:26,680 --> 00:33:29,530
There are very different
performance characteristics.

664
00:33:29,530 --> 00:33:32,420
You definitely have to think
about the JavaScript execution

665
00:33:32,420 --> 00:33:35,900
and think about how much can
you kind of pre-compute and

666
00:33:35,900 --> 00:33:41,160
pre-transform, or pre- whatever
on the server side

667
00:33:41,160 --> 00:33:43,320
beforehand, so that when it
comes down to JavaScript,

668
00:33:43,320 --> 00:33:47,035
you're not spending a lot of
time decompressing a mesh or

669
00:33:47,035 --> 00:33:51,440
doing some fancy thing, where
it will take 10 seconds and

670
00:33:51,440 --> 00:33:53,820
maybe it'll block the
main thread as it

671
00:33:53,820 --> 00:33:56,920
uploads to the GPU.

672
00:33:56,920 --> 00:34:01,760
Generally, the vertex shaders
on phones are less powerful.

673
00:34:01,760 --> 00:34:04,760
But they do have an advantage of
a lot of them use this kind

674
00:34:04,760 --> 00:34:09,639
of tiled deferred rendering
behind the scenes, which lets

675
00:34:09,639 --> 00:34:11,920
you save a lot on the
fragment shaders.

676
00:34:11,920 --> 00:34:14,280
It won't actually run the
fragment shaders until the

677
00:34:14,280 --> 00:34:16,070
very end, so you don't get
a lot of overdraws.

678
00:34:16,070 --> 00:34:18,189
Sometimes you can do fancier
effects than you

679
00:34:18,189 --> 00:34:20,189
think, which is nice.

680
00:34:20,189 --> 00:34:23,284

681
00:34:23,284 --> 00:34:26,610
I had something else, but
I can't remember it now.

682
00:34:26,610 --> 00:34:27,179
RICARDO CABELLO: There
was something I

683
00:34:27,179 --> 00:34:28,370
was trying last week.

684
00:34:28,370 --> 00:34:32,880
I don't know if we can see it
with the Opera browser for

685
00:34:32,880 --> 00:34:36,679
mobile, but they also allow
access to the webcam.

686
00:34:36,679 --> 00:34:37,929
I don't know if this
works at all.

687
00:34:37,929 --> 00:34:40,695

688
00:34:40,695 --> 00:34:42,232
PETE: There you go, if
you pull it back

689
00:34:42,232 --> 00:34:44,760
just a little bit?

690
00:34:44,760 --> 00:34:45,870
RICARDO CABELLO: Can you see?

691
00:34:45,870 --> 00:34:47,280
Oh, this is my finger.

692
00:34:47,280 --> 00:34:48,305
Sorry.

693
00:34:48,305 --> 00:34:50,480
Try it again.

694
00:34:50,480 --> 00:34:53,230
It's an example from--

695
00:34:53,230 --> 00:34:55,370
I never know how to pronounce
his name.

696
00:34:55,370 --> 00:34:57,680
I think it's [UNINTELLIGIBLE]?

697
00:34:57,680 --> 00:35:03,610
And he has this webcam toy that
basically, with Opera,

698
00:35:03,610 --> 00:35:06,350
you can access to the webcam
from the website, and then

699
00:35:06,350 --> 00:35:09,130
apply filters using
WebGL and GLSL.

700
00:35:09,130 --> 00:35:11,930
So this guy has like
a ton of effects.

701
00:35:11,930 --> 00:35:16,240
It's like you can start to get
an idea of kind of augmented

702
00:35:16,240 --> 00:35:18,365
reality, whenever something that
actually makes sense to

703
00:35:18,365 --> 00:35:18,680
do with that.

704
00:35:18,680 --> 00:35:20,660
But basically, [INAUDIBLE].

705
00:35:20,660 --> 00:35:26,510
But now, you have access from
the browser to play with that.

706
00:35:26,510 --> 00:35:30,840
Let's see if I can make
it work again.

707
00:35:30,840 --> 00:35:33,960
JEROME ETIENNE: Ricardo,
did you try augmented

708
00:35:33,960 --> 00:35:36,570
reality on the phone?

709
00:35:36,570 --> 00:35:38,890
RICARDO CABELLO: No, no.

710
00:35:38,890 --> 00:35:40,533
I guess this is just--

711
00:35:40,533 --> 00:35:43,830
I guess it's going to be quite
a little bit slow to find

712
00:35:43,830 --> 00:35:48,320
targets and everything, but
let's see if I can make it--

713
00:35:48,320 --> 00:35:49,200
BRENDAN KENNY: Part of the
problem is that framing on

714
00:35:49,200 --> 00:35:55,610
those cameras can be a little
slow, and a lag as well.

715
00:35:55,610 --> 00:35:58,380
So maybe if somebody's trying
to find something, they've

716
00:35:58,380 --> 00:36:00,980
already pointed the opposite
way by the time your

717
00:36:00,980 --> 00:36:02,040
code gets to it.

718
00:36:02,040 --> 00:36:03,900
I remember the other thing I
was going to say was just

719
00:36:03,900 --> 00:36:08,240
definitely check out both Apple
and Google have great

720
00:36:08,240 --> 00:36:13,040
resources on the Android and
IOS development sites for

721
00:36:13,040 --> 00:36:15,140
graphics in native
mobile apps.

722
00:36:15,140 --> 00:36:17,920
And that definitely applies if
you're interested in getting

723
00:36:17,920 --> 00:36:22,300
into mobile WebGL, it's the same
exact thing, kind of the

724
00:36:22,300 --> 00:36:24,720
same performance characteristics
as obviously,

725
00:36:24,720 --> 00:36:26,600
once you upload your GPU,
it's all the same.

726
00:36:26,600 --> 00:36:30,850
But looking at how you can
make your data faster to

727
00:36:30,850 --> 00:36:33,610
compute on, what can you do in
your shaders, that sort of

728
00:36:33,610 --> 00:36:36,240
thing, to get better
mobile code.

729
00:36:36,240 --> 00:36:40,420
Because it is a really is a
pretty different architecture

730
00:36:40,420 --> 00:36:42,260
underneath the API.

731
00:36:42,260 --> 00:36:44,440
But definitely check those
out if you're interested.

732
00:36:44,440 --> 00:36:46,680
RICARDO CABELLO: I was seeing
some people that were kind of

733
00:36:46,680 --> 00:36:48,110
expecting the [UNINTELLIGIBLE]

734
00:36:48,110 --> 00:36:50,820
some of the 3.js examples, they
were expecting that the

735
00:36:50,820 --> 00:36:53,320
3.js examples were going to work
on mobile, but I don't

736
00:36:53,320 --> 00:36:55,900
think that's really going
to be the case.

737
00:36:55,900 --> 00:36:56,700
If you wanted [UNINTELLIGIBLE]

738
00:36:56,700 --> 00:36:59,170
to mobile, we should start right
from the mobile and then

739
00:36:59,170 --> 00:37:01,540
going out to the desktop, rather
than having desktop,

740
00:37:01,540 --> 00:37:06,300
and then magically working on
the mobile or just playing in

741
00:37:06,300 --> 00:37:07,520
the library, because
it's too slow.

742
00:37:07,520 --> 00:37:10,540
It just needs to be from the
bottom, from the slower to the

743
00:37:10,540 --> 00:37:16,350
fastest one

744
00:37:16,350 --> 00:37:20,890
PETE: So there's a question here
from Andrew in the UK.

745
00:37:20,890 --> 00:37:24,220
Many developers have now gained
familiarity with 2D

746
00:37:24,220 --> 00:37:25,780
context of Canvas.

747
00:37:25,780 --> 00:37:30,020
What resources would you
recommend for transitioning to

748
00:37:30,020 --> 00:37:31,270
3D with WebGL?

749
00:37:31,270 --> 00:37:36,690

750
00:37:36,690 --> 00:37:38,390
ILMARI HEIKKINEN:
From 2D Canvas.

751
00:37:38,390 --> 00:37:44,400
WebGL is a whole different
beast. 2D Canvas is where you

752
00:37:44,400 --> 00:37:48,320
draw stuff, you draw paths,
lines, text, images.

753
00:37:48,320 --> 00:37:54,230
In WebGL, you've got textures
and buffers and shaders that

754
00:37:54,230 --> 00:37:59,660
actually turn all that other
things into an image on your

755
00:37:59,660 --> 00:38:03,940
screen, and that is
a pretty big leap.

756
00:38:03,940 --> 00:38:08,260
But I would go with
learningWebGL.com, which gives

757
00:38:08,260 --> 00:38:12,950
you an understanding of the
very basics, and getting

758
00:38:12,950 --> 00:38:15,800
started with simple things.

759
00:38:15,800 --> 00:38:19,840
The other thing would be 3JS
or another library that

760
00:38:19,840 --> 00:38:25,660
abstracts away all the
complicated things, or rather,

761
00:38:25,660 --> 00:38:28,160
the things that you don't really
actually want to do

762
00:38:28,160 --> 00:38:29,410
most of the time.

763
00:38:29,410 --> 00:38:33,170

764
00:38:33,170 --> 00:38:35,090
BRANDON JONES: I don't know
if it directly maps to the

765
00:38:35,090 --> 00:38:38,990
question that he's asking, but
there was an interesting blog

766
00:38:38,990 --> 00:38:44,610
post by Greg [? Cateras ?]

767
00:38:44,610 --> 00:38:48,850
that's entitled, "WebGL
Fundamentals: WebGL is a 2D

768
00:38:48,850 --> 00:38:54,760
API." And that's an interesting
read at the very

769
00:38:54,760 --> 00:39:00,800
least, in that he just goes
over basically how WebGL

770
00:39:00,800 --> 00:39:04,860
functionality maps to
just 2D drawing.

771
00:39:04,860 --> 00:39:09,480
And in the end actually, it
really truly is a 2D API.

772
00:39:09,480 --> 00:39:12,250
It's the matrices
that make it 3D.

773
00:39:12,250 --> 00:39:15,630
So if you're familiar with a
lot of 2D concepts, that's

774
00:39:15,630 --> 00:39:19,500
probably a decent article to
read through, because it does

775
00:39:19,500 --> 00:39:20,955
hit on some of those concepts.

776
00:39:20,955 --> 00:39:23,540

777
00:39:23,540 --> 00:39:27,650
JEROME ETIENNE: OK, just I don't
know if you can see, but

778
00:39:27,650 --> 00:39:32,390
OpenGL ES Programming Guide,
just like the reference to

779
00:39:32,390 --> 00:39:34,070
learn OpenGL.

780
00:39:34,070 --> 00:39:38,750
People may not know, but WebGL
is basically the exact same as

781
00:39:38,750 --> 00:39:42,660
this, with JavaScript
on the side.

782
00:39:42,660 --> 00:39:46,890
So if you want to understand
actually WebGL, you read that

783
00:39:46,890 --> 00:39:49,570
and you make a lot
of progress.

784
00:39:49,570 --> 00:39:50,820
[INAUDIBLE PHRASE]

785
00:39:50,820 --> 00:39:59,130

786
00:39:59,130 --> 00:40:02,040
PETE: Are there actually any
books available today

787
00:40:02,040 --> 00:40:04,800
specifically on WebGL or
anything like that, if

788
00:40:04,800 --> 00:40:07,650
somebody wants to get a book
that anyone would recommend?

789
00:40:07,650 --> 00:40:09,330
BRENDAN KENNY: Not yet.

790
00:40:09,330 --> 00:40:13,290
One is coming, but not for
a while, later this year.

791
00:40:13,290 --> 00:40:15,550
So I think right now, that
really is the book.

792
00:40:15,550 --> 00:40:18,130

793
00:40:18,130 --> 00:40:18,560
BRANDON JONES: What's
the one that you're

794
00:40:18,560 --> 00:40:20,930
thinking that's coming?

795
00:40:20,930 --> 00:40:21,670
BRENDAN KENNY: Are you
talking to me?

796
00:40:21,670 --> 00:40:23,160
RICARDO CABELLO: Your book.

797
00:40:23,160 --> 00:40:25,310
BRENDAN KENNY: It might be
yours, I'm not sure.

798
00:40:25,310 --> 00:40:27,170
BRANDON JONES: That's
what I'm wondering.

799
00:40:27,170 --> 00:40:28,540
BRENDAN KENNY: I'm not writing
a secret book,

800
00:40:28,540 --> 00:40:32,110
I'm not saying that.

801
00:40:32,110 --> 00:40:34,710
PAUL LEWIS: There's a book
coming, said [UNINTELLIGIBLE].

802
00:40:34,710 --> 00:40:36,160
JEROME ETIENNE: That's
not mine, I promise.

803
00:40:36,160 --> 00:40:40,690

804
00:40:40,690 --> 00:40:43,560
BRANDON JONES: Yeah, I've been
coauthoring a WebGL beginner's

805
00:40:43,560 --> 00:40:46,420
guide, but I really have no
idea when it's going to be

806
00:40:46,420 --> 00:40:47,420
coming out.

807
00:40:47,420 --> 00:40:49,970
I can say that the first drafts
of all the chapters are

808
00:40:49,970 --> 00:40:52,930
done, but that doesn't mean
too much in terms of

809
00:40:52,930 --> 00:40:55,230
publishing dates.

810
00:40:55,230 --> 00:40:56,630
BRENDAN KENNY: So you're going
to finish it like next week,

811
00:40:56,630 --> 00:40:58,010
is what you're saying?

812
00:40:58,010 --> 00:40:58,540
[INAUDIBLE]

813
00:40:58,540 --> 00:40:59,800
right now, on the air.

814
00:40:59,800 --> 00:41:01,550
Wow.

815
00:41:01,550 --> 00:41:02,490
BRANDON JONES: No.

816
00:41:02,490 --> 00:41:03,440
PAUL LEWIS: That's a
big commencement.

817
00:41:03,440 --> 00:41:04,420
Well done, Brandon.

818
00:41:04,420 --> 00:41:08,150
PETE: And it is recorded
live and will be--

819
00:41:08,150 --> 00:41:11,480
BRANDON JONES: No, erase
everything that I just said.

820
00:41:11,480 --> 00:41:12,650
JEROME ETIENNE: You're
committed.

821
00:41:12,650 --> 00:41:13,900
No re-do.

822
00:41:13,900 --> 00:41:18,940

823
00:41:18,940 --> 00:41:21,390
BRENDAN KENNY: Anyway, it will
be nice to have an actually

824
00:41:21,390 --> 00:41:22,190
WebGL book.

825
00:41:22,190 --> 00:41:23,830
Because I know it is difficult,
talking to some

826
00:41:23,830 --> 00:41:29,090
people that have opened up the
OpenGL ES 2 Programming Guide,

827
00:41:29,090 --> 00:41:30,340
and it's like C Code.

828
00:41:30,340 --> 00:41:32,910

829
00:41:32,910 --> 00:41:35,130
OpenGL is already rather
esoteric too.

830
00:41:35,130 --> 00:41:38,500
It's kind of legacy, 20
year plus legacy.

831
00:41:38,500 --> 00:41:41,790
So it will be nice to have a
book that's specifically about

832
00:41:41,790 --> 00:41:44,220
WebGL, so you're not
simultaneously learning about

833
00:41:44,220 --> 00:41:45,930
OpenGL and trying to translate
in your head

834
00:41:45,930 --> 00:41:47,980
the JavaScript calls.

835
00:41:47,980 --> 00:41:50,170
But it maps fairly closely.

836
00:41:50,170 --> 00:41:54,150
So once you kind of are a little
more used to WebGL,

837
00:41:54,150 --> 00:41:56,020
it's definitely a very
handy guide.

838
00:41:56,020 --> 00:41:59,055
I keep it on my desk
for reference.

839
00:41:59,055 --> 00:42:04,335

840
00:42:04,335 --> 00:42:04,890
RICARDO CABELLO: [INAUDIBLE]

841
00:42:04,890 --> 00:42:08,175
maybe about GLSL rather
than WebGL?

842
00:42:08,175 --> 00:42:12,970
Like WebGL is was kind of the
connection between say

843
00:42:12,970 --> 00:42:15,180
JavaScript and GLSL.

844
00:42:15,180 --> 00:42:15,710
They're shading language.

845
00:42:15,710 --> 00:42:19,530
And probably the shading
language is something that you

846
00:42:19,530 --> 00:42:22,721
can use for doing much more
different stuff, and not the,

847
00:42:22,721 --> 00:42:23,650
say, boring stuff.

848
00:42:23,650 --> 00:42:27,222
It's in the middle.

849
00:42:27,222 --> 00:42:31,240
So I don't have the book in my
hand but there are really good

850
00:42:31,240 --> 00:42:35,810
books about GLSL that you get
an idea of how the graphics

851
00:42:35,810 --> 00:42:36,570
cards work.

852
00:42:36,570 --> 00:42:39,090
And what you send to the
[UNINTELLIGIBLE]

853
00:42:39,090 --> 00:42:40,090
to the [UNINTELLIGIBLE]

854
00:42:40,090 --> 00:42:41,840
and you start to understand
more how

855
00:42:41,840 --> 00:42:43,630
the pieces fit together.

856
00:42:43,630 --> 00:42:46,680
PETE: Could you just define what
GLSL is for maybe those

857
00:42:46,680 --> 00:42:49,770
of us who are a little
bit naive?

858
00:42:49,770 --> 00:42:52,900
RICARDO CABELLO: Wow, anyone
want to do that?

859
00:42:52,900 --> 00:42:57,160
PETE: Or like the 10 second
version of it?

860
00:42:57,160 --> 00:42:59,510
ILMARI HEIKKINEN: GLSL
is the Graphics

861
00:42:59,510 --> 00:43:03,290
Library Shading Language.

862
00:43:03,290 --> 00:43:05,010
PETE: All right, there we go.

863
00:43:05,010 --> 00:43:06,260
[INTERPOSING VOICES]

864
00:43:06,260 --> 00:43:09,280

865
00:43:09,280 --> 00:43:10,800
ILMARI HEIKKINEN: Now
everything's clear, right?

866
00:43:10,800 --> 00:43:12,600
PETE: As mud, absolutely.

867
00:43:12,600 --> 00:43:15,810

868
00:43:15,810 --> 00:43:20,420
BRENDAN KENNY: It's a very small
language that is very

869
00:43:20,420 --> 00:43:23,190
domain specific to graphics,
and it has some nice things

870
00:43:23,190 --> 00:43:27,890
that are built in like vectors,
or native types.

871
00:43:27,890 --> 00:43:30,892
So that it's easy to express
kind of what's efficient on

872
00:43:30,892 --> 00:43:34,180
the graphics card in this
language, and that's what you

873
00:43:34,180 --> 00:43:38,040
actually pass up to
the graphics card.

874
00:43:38,040 --> 00:43:42,790
The driver compiles it to code
while your program is running,

875
00:43:42,790 --> 00:43:45,090
while your JavaScript
app is running.

876
00:43:45,090 --> 00:43:46,720
And then that's what's run
on the graphics card.

877
00:43:46,720 --> 00:43:50,020
So it can be very efficient,
these little programs run on

878
00:43:50,020 --> 00:43:50,650
the graphics card.

879
00:43:50,650 --> 00:43:53,990
So when you pass the data, these
little programs run on

880
00:43:53,990 --> 00:43:57,370
that data and decide what
shows up on the screen.

881
00:43:57,370 --> 00:43:59,850
And the nice thing about it is
that it's the same language

882
00:43:59,850 --> 00:44:04,000
that's used pretty much for all
of OpenGL, but definitely

883
00:44:04,000 --> 00:44:06,010
for OpenGL ES.

884
00:44:06,010 --> 00:44:08,000
So there's nothing, there's
no translation to

885
00:44:08,000 --> 00:44:08,870
JavaScript or anything.

886
00:44:08,870 --> 00:44:10,950
It's the exact same language.

887
00:44:10,950 --> 00:44:13,930
And it's also so small that
you really can look.

888
00:44:13,930 --> 00:44:16,220
I just have the spec, I don't
even refer to anything else

889
00:44:16,220 --> 00:44:19,880
anymore, because there's so
few features that you can

890
00:44:19,880 --> 00:44:23,740
learn it all and fit
it in your head.

891
00:44:23,740 --> 00:44:26,596
[INTERPOSING VOICES]

892
00:44:26,596 --> 00:44:29,090
JEROME ETIENNE: Go
ahead, Ilmari.

893
00:44:29,090 --> 00:44:33,670
ILMARI HEIKKINEN: Yeah, so
GLSL, the one-line pithy

894
00:44:33,670 --> 00:44:39,044
description that I have is that
it's like C for graphics.

895
00:44:39,044 --> 00:44:41,270
BRENDAN KENNY: But it's not
C for graphics like CG,

896
00:44:41,270 --> 00:44:43,290
it's the other one.

897
00:44:43,290 --> 00:44:45,960

898
00:44:45,960 --> 00:44:47,940
PETE: Cool, I just want to
make one quick comment.

899
00:44:47,940 --> 00:44:50,010
If you're watching this live
right now and you have

900
00:44:50,010 --> 00:44:52,300
questions for any of these guys,
make sure you post them

901
00:44:52,300 --> 00:44:55,150
to the Moderator link, which
is listed there in the

902
00:44:55,150 --> 00:44:57,420
comments, so that we can
get to your questions.

903
00:44:57,420 --> 00:45:01,150
I'll pass it back
over to Ilmari.

904
00:45:01,150 --> 00:45:04,260
ILMARI HEIKKINEN: OK so
yes, welcome back.

905
00:45:04,260 --> 00:45:11,150
This is the Google Chrome
Developers WebGL hangout, and

906
00:45:11,150 --> 00:45:16,370
with me today I have guests,
Brandon Jones from tojico.com

907
00:45:16,370 --> 00:45:21,110
Brendan Kenny from the
Maps Team at Google.

908
00:45:21,110 --> 00:45:23,850
I'm on the Chrome Developer
Relations Team.

909
00:45:23,850 --> 00:45:26,390
Then we have Jerome
Etienne, who is

910
00:45:26,390 --> 00:45:29,090
currently somewhere else.

911
00:45:29,090 --> 00:45:32,120
He was hiding.

912
00:45:32,120 --> 00:45:35,760
OK, Michael Ensminger,
do you want to do an

913
00:45:35,760 --> 00:45:37,820
introduction, actually?

914
00:45:37,820 --> 00:45:38,710
MICHAEL ENSMINGER: Yeah, sure.

915
00:45:38,710 --> 00:45:44,690
I was part of the teams that
worked in Rome for example,

916
00:45:44,690 --> 00:45:51,090
and I'm a freelance, and I do
some WebGL development.

917
00:45:51,090 --> 00:45:54,020
I'm also doing this little open
source project called

918
00:45:54,020 --> 00:46:00,150
Glow, which is like a WebGL
wrapper, if you like GS play

919
00:46:00,150 --> 00:46:01,945
with shaders really quickly.

920
00:46:01,945 --> 00:46:05,190

921
00:46:05,190 --> 00:46:09,850
Hopefully, I'm starting a big
WebGL project next Tuesday,

922
00:46:09,850 --> 00:46:12,790
which is due to be out in the
end of April, I think.

923
00:46:12,790 --> 00:46:15,870

924
00:46:15,870 --> 00:46:17,060
Fingers crossed.

925
00:46:17,060 --> 00:46:18,310
ILMARI HEIKKINEN: Awesome.

926
00:46:18,310 --> 00:46:21,060

927
00:46:21,060 --> 00:46:27,480
Then we have Paul Lewis, from
aerotwist.com, and Ricardo

928
00:46:27,480 --> 00:46:32,550
Cabello, of 3JS fame,
and also from Rome.

929
00:46:32,550 --> 00:46:35,080

930
00:46:35,080 --> 00:46:40,250
So the topic today is WebGL,
3JS, the meaning of life,

931
00:46:40,250 --> 00:46:46,026
which we haven't gotten around
to yet, but that is fixable.

932
00:46:46,026 --> 00:46:48,360
Actually, I have a question.

933
00:46:48,360 --> 00:46:52,090
What kind of a content pipeline
do you guys use?

934
00:46:52,090 --> 00:46:56,460
Like if you have a model in Maya
or some other 3D software

935
00:46:56,460 --> 00:46:59,980
and you want to do it on the web
page, you want to put it

936
00:46:59,980 --> 00:47:01,310
on the web page, how
do you do that?

937
00:47:01,310 --> 00:47:03,930

938
00:47:03,930 --> 00:47:07,370
Are there any easy solutions?

939
00:47:07,370 --> 00:47:09,820
MICHAEL ENSMINGER: Can I say?

940
00:47:09,820 --> 00:47:15,090
I think to Bartek, whatever
his last name is, he did a

941
00:47:15,090 --> 00:47:21,540
little unity exporter, which I
really like, and I use a lot.

942
00:47:21,540 --> 00:47:26,360
Because then you go
through that.

943
00:47:26,360 --> 00:47:31,900
It can import from any 3D
package, which is nice.

944
00:47:31,900 --> 00:47:35,850
And what's is really nice is
what I've used a lot, that you

945
00:47:35,850 --> 00:47:43,280
can do small C Sharp plug-ins to
tag objects and do your own

946
00:47:43,280 --> 00:47:45,470
materials and whatnot,
and customize or

947
00:47:45,470 --> 00:47:47,140
export it real easy.

948
00:47:47,140 --> 00:47:52,455
So I'm really a big fan of
that pipeline, basically.

949
00:47:52,455 --> 00:47:57,260

950
00:47:57,260 --> 00:47:58,480
BRANDON JONES: I'll
second that.

951
00:47:58,480 --> 00:48:02,710
I've actually been working on
a set of Unity exporters and

952
00:48:02,710 --> 00:48:05,970
whatnot, a lot of it based
on what Bartek was doing.

953
00:48:05,970 --> 00:48:10,270

954
00:48:10,270 --> 00:48:13,820
I was slightly frustrated in
that Unity doesn't actually

955
00:48:13,820 --> 00:48:16,820
expose APIs for querying
things like visibility

956
00:48:16,820 --> 00:48:18,280
information or whatnot.

957
00:48:18,280 --> 00:48:22,920
So if you want to use it to
expose full, like game

958
00:48:22,920 --> 00:48:26,700
appropriate levels, it's going
to take a little bit more work

959
00:48:26,700 --> 00:48:27,460
on your part.

960
00:48:27,460 --> 00:48:33,020
But it does definitely give
you a very good, low-level

961
00:48:33,020 --> 00:48:36,670
access to your basic meshes,
animations, materials,

962
00:48:36,670 --> 00:48:37,940
anything like that.

963
00:48:37,940 --> 00:48:41,000
And so as a general
asset exporter, it

964
00:48:41,000 --> 00:48:42,250
works really well.

965
00:48:42,250 --> 00:48:46,650

966
00:48:46,650 --> 00:48:51,860
RICARDO CABELLO: That's a full,
open source net, I will

967
00:48:51,860 --> 00:48:53,110
say, blender.

968
00:48:53,110 --> 00:48:56,590

969
00:48:56,590 --> 00:48:58,340
BRANDON JONES: Wait,
why do we all laugh

970
00:48:58,340 --> 00:48:59,250
when he says blender?

971
00:48:59,250 --> 00:49:00,764
I mean, come on, it's
a good tool.

972
00:49:00,764 --> 00:49:03,940
BRENDAN KENNY: You people are
terrible, don't laugh.

973
00:49:03,940 --> 00:49:05,060
MICHAEL ENSMINGER: Me and
Ricardo have had this

974
00:49:05,060 --> 00:49:08,640
discussion 100 times.

975
00:49:08,640 --> 00:49:10,470
Blender is very good.

976
00:49:10,470 --> 00:49:12,500
Blender is a very good
tool, of course.

977
00:49:12,500 --> 00:49:15,650
RICARDO CABELLO: Yeah, you
can just write any other

978
00:49:15,650 --> 00:49:18,960
[UNINTELLIGIBLE] pattern and
then you actually have access

979
00:49:18,960 --> 00:49:21,630
to a lot of stuff.

980
00:49:21,630 --> 00:49:25,500
We have it for exporting stuff
directly from [UNINTELLIGIBLE]

981
00:49:25,500 --> 00:49:27,916
to 3.js JSON format.

982
00:49:27,916 --> 00:49:31,780
And we still have to do the
animation and everything.

983
00:49:31,780 --> 00:49:34,800
We have mainly static,
and scene stuff.

984
00:49:34,800 --> 00:49:42,430
But to me, you need to get used
to Blender, but once you

985
00:49:42,430 --> 00:49:44,150
get that down, it's easier.

986
00:49:44,150 --> 00:49:45,930
For me, it works pretty
well as a pipeline.

987
00:49:45,930 --> 00:49:50,620

988
00:49:50,620 --> 00:49:53,200
MICHAEL ENSMINGER: Yeah, it was
the pipeline we used for

989
00:49:53,200 --> 00:49:56,260
Rome, and it worked
pretty well.

990
00:49:56,260 --> 00:49:57,510
RICARDO CABELLO: Yes!

991
00:49:57,510 --> 00:50:03,930

992
00:50:03,930 --> 00:50:08,600
ILMARI HEIKKINEN: I did some
Blender scripting, and the

993
00:50:08,600 --> 00:50:12,400
nice thing about that is that
it's actually pretty simple to

994
00:50:12,400 --> 00:50:16,490
get started and to just export
your objects and data from

995
00:50:16,490 --> 00:50:23,400
Blender in whatever format
you want in your WebGL

996
00:50:23,400 --> 00:50:24,750
application.

997
00:50:24,750 --> 00:50:26,440
So that was great.

998
00:50:26,440 --> 00:50:30,490
And you also get Bones, which
are sometimes a little fiddly

999
00:50:30,490 --> 00:50:34,115
to work with, but it's
definitely doable.

1000
00:50:34,115 --> 00:50:37,020

1001
00:50:37,020 --> 00:50:38,970
RICARDO CABELLO: I
need [? Tree. ?]

1002
00:50:38,970 --> 00:50:40,220
[? Tree. ?]

1003
00:50:40,220 --> 00:50:42,800

1004
00:50:42,800 --> 00:50:48,450
PETE: What are some of your
favorite WebGL sites and demos

1005
00:50:48,450 --> 00:50:51,780
that you guys have seen?

1006
00:50:51,780 --> 00:50:53,030
BRANDON JONES: glsl.hiroku.org
or .com?

1007
00:50:53,030 --> 00:50:56,530

1008
00:50:56,530 --> 00:50:58,850
Ricardo, your little
shader toy?

1009
00:50:58,850 --> 00:51:00,290
I love that.

1010
00:51:00,290 --> 00:51:03,510
I love it so much.

1011
00:51:03,510 --> 00:51:05,480
RICARDO CABELLO: It's a
really interesting--

1012
00:51:05,480 --> 00:51:11,260
It's like this holds to a lot
of graphics developers that

1013
00:51:11,260 --> 00:51:14,760
they don't like JavaScript at
all, so that website is just

1014
00:51:14,760 --> 00:51:17,240
like something that they can put
their [? brain ?] out and

1015
00:51:17,240 --> 00:51:19,670
share what they know without
having to care about the

1016
00:51:19,670 --> 00:51:20,540
JavaScript.

1017
00:51:20,540 --> 00:51:23,942
And there's some really
crazy stuff on there.

1018
00:51:23,942 --> 00:51:26,100
I don't even understand half of
what the people are doing.

1019
00:51:26,100 --> 00:51:28,085
JEROME ETIENNE: Maybe a good
time to show some now?

1020
00:51:28,085 --> 00:51:29,630
Can you show some?

1021
00:51:29,630 --> 00:51:32,170
Some [UNINTELLIGIBLE]?

1022
00:51:32,170 --> 00:51:33,850
RICARDO CABELLO: Let me see.

1023
00:51:33,850 --> 00:51:36,790
PETE: So you can try screen
sharing if you'd like, and we

1024
00:51:36,790 --> 00:51:40,162
can see if that will work.

1025
00:51:40,162 --> 00:51:42,350
RICARDO CABELLO:
I'm trying it.

1026
00:51:42,350 --> 00:51:44,580
BRENDAN KENNY: Don't break it.

1027
00:51:44,580 --> 00:51:45,830
RICARDO CABELLO:
Is it working?

1028
00:51:45,830 --> 00:51:48,600

1029
00:51:48,600 --> 00:51:49,850
BRANDON JONES: Yes, yes.

1030
00:51:49,850 --> 00:51:51,950
BRENDAN KENNY: Pete might need
to select from screen.

1031
00:51:51,950 --> 00:51:55,015
PETE: I've got it forced on you,
so you're up on screen.

1032
00:51:55,015 --> 00:51:57,890

1033
00:51:57,890 --> 00:51:59,140
RICARDO CABELLO: See
about this one.

1034
00:51:59,140 --> 00:52:03,420

1035
00:52:03,420 --> 00:52:06,890
Well, I don't check
it too often.

1036
00:52:06,890 --> 00:52:13,560
So these guys, basically, this
website, this effect that we

1037
00:52:13,560 --> 00:52:19,370
are seeing here, it's
done with this code.

1038
00:52:19,370 --> 00:52:21,810
There's no textures or anything
being loaded.

1039
00:52:21,810 --> 00:52:25,990
It's just some code that
generates the textures

1040
00:52:25,990 --> 00:52:30,230
dynamically, and even the camera
path and everything.

1041
00:52:30,230 --> 00:52:33,730
So you can get stuff like
from this landscape.

1042
00:52:33,730 --> 00:52:38,340
Again, I have no idea how
to start to do this.

1043
00:52:38,340 --> 00:52:39,590
Let's see.

1044
00:52:39,590 --> 00:52:41,680

1045
00:52:41,680 --> 00:52:42,280
JEROME ETIENNE: Ricardo,
how large is the

1046
00:52:42,280 --> 00:52:45,730
code for those mountains?

1047
00:52:45,730 --> 00:52:47,880
RICARDO CABELLO: Can
you say it again?

1048
00:52:47,880 --> 00:52:49,585
JEROME ETIENNE: How many lines
for the mountains?

1049
00:52:49,585 --> 00:52:53,200

1050
00:52:53,200 --> 00:52:54,450
RICARDO CABELLO: Let me see.

1051
00:52:54,450 --> 00:52:59,630

1052
00:52:59,630 --> 00:53:01,520
JEROME ETIENNE: Because I
think that's a key point

1053
00:53:01,520 --> 00:53:03,330
[INAUDIBLE].

1054
00:53:03,330 --> 00:53:05,765
RICARDO CABELLO: 263.

1055
00:53:05,765 --> 00:53:07,630
JEROME ETIENNE: Yeah, pretty
good for what we see on the

1056
00:53:07,630 --> 00:53:09,800
screen, I would say.

1057
00:53:09,800 --> 00:53:14,910
RICARDO CABELLO: Yeah, and
there's like so many random

1058
00:53:14,910 --> 00:53:20,640
things, like this guy wanted
to have a lot of effects at

1059
00:53:20,640 --> 00:53:22,175
the same time.

1060
00:53:22,175 --> 00:53:23,285
I don't know.

1061
00:53:23,285 --> 00:53:25,490
Maybe it's a little bit too
small what they're showing.

1062
00:53:25,490 --> 00:53:26,960
Let me see if I can
find another one.

1063
00:53:26,960 --> 00:53:31,150

1064
00:53:31,150 --> 00:53:35,250
The good thing with this website
is that anyone--

1065
00:53:35,250 --> 00:53:37,070
oh, this one doesn't work--

1066
00:53:37,070 --> 00:53:42,560
is able to fork a really
working effect.

1067
00:53:42,560 --> 00:53:47,760
So someone will make like a
sphere or some simple ray

1068
00:53:47,760 --> 00:53:50,900
tracing effect, and then someone
else, like you don't

1069
00:53:50,900 --> 00:53:53,860
even know who they are, they
will come and they will

1070
00:53:53,860 --> 00:53:55,270
improve it.

1071
00:53:55,270 --> 00:53:58,360
There's a lot of knowledge
sharing from there, that I

1072
00:53:58,360 --> 00:53:59,780
find it very interesting.

1073
00:53:59,780 --> 00:54:03,388

1074
00:54:03,388 --> 00:54:05,180
I don't know, like really
crazy things,

1075
00:54:05,180 --> 00:54:09,950
like fractal stuff.

1076
00:54:09,950 --> 00:54:12,810

1077
00:54:12,810 --> 00:54:15,180
ILMARI HEIKKINEN: I remember
seeing that some guy actually

1078
00:54:15,180 --> 00:54:19,161
implemented a snake game
using a fragment.

1079
00:54:19,161 --> 00:54:23,310

1080
00:54:23,310 --> 00:54:25,370
RICARDO CABELLO: There was this
challenge that because

1081
00:54:25,370 --> 00:54:31,150
there are two layers of data,
you can save some states of

1082
00:54:31,150 --> 00:54:34,240
the game as colored pixels
on the second layer

1083
00:54:34,240 --> 00:54:35,360
that you don't see.

1084
00:54:35,360 --> 00:54:38,000
So some people started
to try to create

1085
00:54:38,000 --> 00:54:39,950
games using that technique.

1086
00:54:39,950 --> 00:54:43,440

1087
00:54:43,440 --> 00:54:45,900
The website is a little
bit hard to navigate.

1088
00:54:45,900 --> 00:54:48,090
BRANDON JONES: You need
a search function.

1089
00:54:48,090 --> 00:54:49,140
RICARDO CABELLO: Yeah,
and tagging,

1090
00:54:49,140 --> 00:54:50,390
I guess, and comments.

1091
00:54:50,390 --> 00:54:53,310

1092
00:54:53,310 --> 00:54:56,920
Maybe someday it will come.

1093
00:54:56,920 --> 00:54:59,370
BRANDON JONES: There it was.

1094
00:54:59,370 --> 00:55:00,780
RICARDO CABELLO: Which one?

1095
00:55:00,780 --> 00:55:02,150
BRANDON JONES: Snake.

1096
00:55:02,150 --> 00:55:03,940
It's in the bottom corner
of the screen right now.

1097
00:55:03,940 --> 00:55:08,860

1098
00:55:08,860 --> 00:55:10,800
RICARDO CABELLO: Maybe it
was in the previous one.

1099
00:55:10,800 --> 00:55:15,860

1100
00:55:15,860 --> 00:55:16,480
I don't know.

1101
00:55:16,480 --> 00:55:18,520
I'm certainly not finding it.

1102
00:55:18,520 --> 00:55:21,070
BRANDON JONES: It should be
mentioned, I guess for anybody

1103
00:55:21,070 --> 00:55:24,990
who's watching this and not
entirely familiar with the

1104
00:55:24,990 --> 00:55:29,040
WebGL concepts, everything on
this particular site is more

1105
00:55:29,040 --> 00:55:33,870
or less done entirely
in shader code.

1106
00:55:33,870 --> 00:55:37,410
So that is somewhat limiting to
what can be done, although,

1107
00:55:37,410 --> 00:55:39,570
obviously, you've got a lot of
people here who are more than

1108
00:55:39,570 --> 00:55:42,250
happy to prove that wrong.

1109
00:55:42,250 --> 00:55:46,840
But it's not something that's
going to give you access to

1110
00:55:46,840 --> 00:55:49,390
the full range of WebGL
capabilities.

1111
00:55:49,390 --> 00:55:53,050
But it does provide a
fascinating look into what can

1112
00:55:53,050 --> 00:55:56,970
be done just with that
GLSL language.

1113
00:55:56,970 --> 00:55:59,490

1114
00:55:59,490 --> 00:56:03,000
RICARDO CABELLO: So I don't know
if it's working at all.

1115
00:56:03,000 --> 00:56:06,380
So basically, to make it
a little bit simpler to

1116
00:56:06,380 --> 00:56:09,070
understand, what we're seeing
here is just two polygons on

1117
00:56:09,070 --> 00:56:13,220
this screen, like one polygon
on one [? tangle ?]

1118
00:56:13,220 --> 00:56:15,720
that goes on the top left,
and one polygon on one

1119
00:56:15,720 --> 00:56:17,030
[? tangle ?] that goes
on the bottom left.

1120
00:56:17,030 --> 00:56:21,040
And the rest is just done with
this fragment shader, which

1121
00:56:21,040 --> 00:56:24,320
basically is this code that is
going to be executed for every

1122
00:56:24,320 --> 00:56:26,940
pixel that we see
on the screen.

1123
00:56:26,940 --> 00:56:28,240
And we have the position of--

1124
00:56:28,240 --> 00:56:31,345

1125
00:56:31,345 --> 00:56:35,060
I don't know whether you can see
any of that-- but from the

1126
00:56:35,060 --> 00:56:38,380
code, we have the position
where the pixel is.

1127
00:56:38,380 --> 00:56:40,630
From there, we can start to
have some mathematical

1128
00:56:40,630 --> 00:56:44,130
functions that will create some
shapes or some whatever.

1129
00:56:44,130 --> 00:56:47,265
It's up to you what you can
do with that information.

1130
00:56:47,265 --> 00:56:49,780

1131
00:56:49,780 --> 00:56:52,320
JEROME ETIENNE: [UNINTELLIGIBLE]

1132
00:56:52,320 --> 00:56:52,810
RICARDO CABELLO: For the game?

1133
00:56:52,810 --> 00:56:54,560
Yeah.

1134
00:56:54,560 --> 00:56:55,360
PETE: Cool.

1135
00:56:55,360 --> 00:56:57,950
Well, we're almost
at our time.

1136
00:56:57,950 --> 00:57:01,430
I want to just sort of open it
up to all of our guests and

1137
00:57:01,430 --> 00:57:04,120
say, is there anything you guys
want to add sort of as we

1138
00:57:04,120 --> 00:57:07,372
get ready to wrap
things up today?

1139
00:57:07,372 --> 00:57:12,330
BRENDAN KENNY: I wanted to add
that I know at least a few of

1140
00:57:12,330 --> 00:57:15,760
us are on Stack Overflow
and we watch

1141
00:57:15,760 --> 00:57:18,210
the WebGL tag closely.

1142
00:57:18,210 --> 00:57:20,590
So if you have any questions
about WebGL,

1143
00:57:20,590 --> 00:57:22,030
definitely get on there.

1144
00:57:22,030 --> 00:57:24,680
Make sure it's a technical
question, it's not like, what

1145
00:57:24,680 --> 00:57:27,980
should I do, and that's it.

1146
00:57:27,980 --> 00:57:30,280
It should actually be a specific
question, something

1147
00:57:30,280 --> 00:57:32,090
that you're facing.

1148
00:57:32,090 --> 00:57:34,880
But if [INAUDIBLE], there's
people that will answer.

1149
00:57:34,880 --> 00:57:36,880
BRANDON JONES: If you have an
urge to go on Stack Overflow

1150
00:57:36,880 --> 00:57:39,610
and ask, what's the best
WebGL framework?

1151
00:57:39,610 --> 00:57:40,730
Please don't.

1152
00:57:40,730 --> 00:57:42,520
That's been asked many,
many times.

1153
00:57:42,520 --> 00:57:45,900
But we're more than happy to
help with technical questions,

1154
00:57:45,900 --> 00:57:48,250
optimization questions, whatever
the case may be.

1155
00:57:48,250 --> 00:57:50,100
BRENDAN KENNY: This is broken,
why is it broken?

1156
00:57:50,100 --> 00:57:53,240
We're definitely
happy to help.

1157
00:57:53,240 --> 00:57:55,290
PAUL LEWIS: That question comes
up quite a lot, right,

1158
00:57:55,290 --> 00:57:56,280
when you're working
with WebGL?

1159
00:57:56,280 --> 00:57:57,150
This is broken.

1160
00:57:57,150 --> 00:57:58,050
Why is it broken?

1161
00:57:58,050 --> 00:58:00,930
I've just got a black screen.

1162
00:58:00,930 --> 00:58:01,960
BRANDON JONES: Exactly.

1163
00:58:01,960 --> 00:58:03,210
RICARDO CABELLO: Do you all
have a light machine?

1164
00:58:03,210 --> 00:58:05,650

1165
00:58:05,650 --> 00:58:07,130
BRANDON JONES: Is your camera
facing the right way?

1166
00:58:07,130 --> 00:58:08,840
JEROME ETIENNE: But my tricks
is [UNINTELLIGIBLE].

1167
00:58:08,840 --> 00:58:11,960

1168
00:58:11,960 --> 00:58:12,520
PETE: Cool.

1169
00:58:12,520 --> 00:58:13,490
All right, guys.

1170
00:58:13,490 --> 00:58:14,420
Well, we're at our time.

1171
00:58:14,420 --> 00:58:17,200
I want to say thanks everybody
for joining us today.

1172
00:58:17,200 --> 00:58:19,360
I hope you all found
it really useful.

1173
00:58:19,360 --> 00:58:22,740
Please add the Chrome Developers
Plus page to your

1174
00:58:22,740 --> 00:58:26,620
circles if you haven't done
that already, or +1 us.

1175
00:58:26,620 --> 00:58:29,390
Thanks to all our attendees and
speakers, and everybody

1176
00:58:29,390 --> 00:58:30,210
for watching.

1177
00:58:30,210 --> 00:58:30,913
Bye, guys.

1178
00:58:30,913 --> 00:58:31,356
Thanks.

1179
00:58:31,356 --> 00:58:31,620
MALE SPEAKER: Bye.

1180
00:58:31,620 --> 00:58:31,799
Thank you.

1181
00:58:31,799 --> 00:58:33,130
ILMARI HEIKKINEN: Bye bye.

1182
00:58:33,130 --> 00:58:34,433

