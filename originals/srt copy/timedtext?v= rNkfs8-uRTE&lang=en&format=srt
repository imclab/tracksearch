1
00:00:03,709 --> 00:00:08,559
Hi, my name is Antony and I'm an engineer
working on Google Chrome extensions.

2
00:00:08,559 --> 00:00:13,220
I'm going to talk to you about a few topics
related to the ids, packaging and distribution

3
00:00:13,220 --> 00:00:17,599
of extensions in our system.
If you choose to use the extensions gallery

4
00:00:17,599 --> 00:00:22,470
to host and update your extensions, we take
care of many of these details for you.

5
00:00:22,470 --> 00:00:27,069
If you plan to do the hosting and updates
yourself - or if you are just curious - it

6
00:00:27,069 --> 00:00:34,069
can be helpful to learn more about these concepts.
If you've tried making a test extension, you've

7
00:00:34,440 --> 00:00:39,829
probably noticed that extensions have a strange
looking id made up of 32 characters.

8
00:00:39,829 --> 00:00:45,160
When we designed the system we wanted to have
a single globally unique identifier for each

9
00:00:45,160 --> 00:00:48,989
extension so that there are no conflicts with
other extensions.

10
00:00:48,989 --> 00:00:54,940
What we did NOT want was to require any central
authority to assign these unique ids.

11
00:00:54,940 --> 00:01:01,149
The mechanism we settled on uses one public/private
key pair per extension, with the hash of the

12
00:01:01,149 --> 00:01:06,350
public key determining the extension's id.
Because of the way public keys are randomly

13
00:01:06,350 --> 00:01:10,649
generated, the chance of a collision is extremely
small.

14
00:01:10,649 --> 00:01:16,110
If you host your extension on the gallery,
we create and store the private keys for you

15
00:01:16,110 --> 00:01:19,930
and when you want to release a new version
of your extension all you need to do is log

16
00:01:19,930 --> 00:01:26,930
in, upload the new source files, and hit the
publish button.

17
00:01:27,130 --> 00:01:32,259
Now I'll explore how the packaging and signature
process works. Google Chrome extensions are

18
00:01:32,259 --> 00:01:37,039
packaged into "crx" files.
If you are using the gallery, we generate

19
00:01:37,039 --> 00:01:40,659
the crx file for you when you hit the publish
button.

20
00:01:40,659 --> 00:01:44,869
If you want to host your extension on your
own site, you'll create the crx file with

21
00:01:44,869 --> 00:01:49,280
the "Pack Extension" button on the extensions
management page in Google Chrome.

22
00:01:49,280 --> 00:01:55,930
A crx file is really just a zip file of your
extension directory plus 2 more things: the

23
00:01:55,930 --> 00:02:00,530
public key, and a signature of the zip contents
made using the private key.

24
00:02:00,530 --> 00:02:07,170
When installing a crx, Google Chrome extracts
the public key, signature and zipped content,

25
00:02:07,170 --> 00:02:11,140
and makes sure the signature is valid using
the public key.

26
00:02:11,140 --> 00:02:16,440
What this means is that once users have installed
a particular extension, they can get updates

27
00:02:16,440 --> 00:02:21,810
to it and be sure that the new versions were
signed by the same private key as the original

28
00:02:21,810 --> 00:02:27,080
version.
As with other types of software, developers

29
00:02:27,080 --> 00:02:33,470
often want to update extensions to fix security
problems, bugs, and make general improvements.

30
00:02:33,470 --> 00:02:38,420
Google Chrome has a philosophy that client
software should be a lot like web apps, where

31
00:02:38,420 --> 00:02:43,310
you always use the latest version and don't
have to do any work to get updates.

32
00:02:43,310 --> 00:02:48,260
In the design of our extensions system we're
following the same idea; so, we made auto-update

33
00:02:48,260 --> 00:02:52,440
available to all extensions whether they are
hosted in the gallery or not.

34
00:02:52,440 --> 00:02:57,920
The way auto-update works is pretty simple
 - an extension specifies an autoupdate url

35
00:02:57,920 --> 00:03:03,590
in its manifest, and the browser will check
that url every few hours for an xml file which

36
00:03:03,590 --> 00:03:07,400
lists the most recent version of the extension
and where to download it.

37
00:03:07,400 --> 00:03:14,090
The browser can fetch updated crx files over
a plain, non-ssl connection because it will

38
00:03:14,090 --> 00:03:18,750
check the signature inside the crx file before
installing it.

39
00:03:18,750 --> 00:03:22,620
If you're hosting your extension in our gallery,
you don't need to worry about autoupdate,

40
00:03:22,620 --> 00:03:26,400
we take care of it for you.
If you're hosting your extensions yourself,

41
00:03:26,400 --> 00:03:32,230
you just need to include an autoupdate url
in your extension's manifest.json file.

42
00:03:32,230 --> 00:03:36,310
I wanted to close this video by emphasizing
a few important points for developers:

43
00:03:36,310 --> 00:03:41,650
First, a crx file is really just a zip file
with a little extra data tacked on.

44
00:03:41,650 --> 00:03:47,630
Second, each extension has a public/private
key pair, so if you develop 3 different extensions

45
00:03:47,630 --> 00:03:52,320
you'll have 3 separate key pairs.
And finally, protecting the private key is

46
00:03:52,320 --> 00:03:55,510
very important if you are self hosting your
extensions.

47
00:03:55,510 --> 00:03:59,950
To learn more you can ask a question on our
discussion group or check out our documentation

48
00:03:59,950 --> 00:04:03,210
on the web at code.google.com/chrome/extensions.

