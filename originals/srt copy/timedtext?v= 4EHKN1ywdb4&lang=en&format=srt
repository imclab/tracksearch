1
00:00:00,000 --> 00:00:00,670

2
00:00:00,670 --> 00:00:02,120
SETH LADD: Cool.

3
00:00:02,120 --> 00:00:02,640
All Right.

4
00:00:02,640 --> 00:00:06,380
So if you've joined us, please
mute, and we'll open up for

5
00:00:06,380 --> 00:00:07,240
questions later.

6
00:00:07,240 --> 00:00:09,190
But welcome everybody
who's watching on

7
00:00:09,190 --> 00:00:11,400
air and in the hangout.

8
00:00:11,400 --> 00:00:13,590
This is Dartisans Episode Two.

9
00:00:13,590 --> 00:00:17,430
We have two special guests
today from the Dart team,

10
00:00:17,430 --> 00:00:20,220
Vijay Menon and Anton Muhin.

11
00:00:20,220 --> 00:00:21,383
Hi, guys.

12
00:00:21,383 --> 00:00:22,820
ANTON MUHIN: Hello.

13
00:00:22,820 --> 00:00:24,281
VIJAY MENON: Hello.

14
00:00:24,281 --> 00:00:26,250
SETH LADD: So thanks for
joining us today.

15
00:00:26,250 --> 00:00:28,700
This is really awesome.

16
00:00:28,700 --> 00:00:30,340
Let's get right into it.

17
00:00:30,340 --> 00:00:33,760
Tell everyone who's watching,
and our YouTube friends at

18
00:00:33,760 --> 00:00:35,940
home, what are your roles
on the Dart team?

19
00:00:35,940 --> 00:00:37,922
What are you doing
in these days?

20
00:00:37,922 --> 00:00:41,514
VIJAY MENON: You go
first, Anton?

21
00:00:41,514 --> 00:00:42,280
ANTON MUHIN: OK.

22
00:00:42,280 --> 00:00:43,160
Thank you, Vijay.

23
00:00:43,160 --> 00:00:48,250
So we're working on Dart's
[? room ?], which is home to

24
00:00:48,250 --> 00:00:49,920
Dart VM and to Chromium.

25
00:00:49,920 --> 00:00:53,060
So we can get the best
performance we can provide,

26
00:00:53,060 --> 00:00:57,958
the best developer experience,
and stuff like that.

27
00:00:57,958 --> 00:01:00,600
SETH LADD: So you're working
on integrating the Dart VM

28
00:01:00,600 --> 00:01:01,530
into Chromium.

29
00:01:01,530 --> 00:01:02,610
That sounds pretty exciting.

30
00:01:02,610 --> 00:01:04,790
I know a lot of people are
looking forward to that.

31
00:01:04,790 --> 00:01:07,675
Vijay, what are you working
on these days?

32
00:01:07,675 --> 00:01:11,020
VIJAY MENON: Generally, my
background's compilers,

33
00:01:11,020 --> 00:01:17,750
runtimes, and I've been working
the past while also on

34
00:01:17,750 --> 00:01:20,680
DOM integration, browser
integration, of the Dart

35
00:01:20,680 --> 00:01:22,490
language, the Dart APIs.

36
00:01:22,490 --> 00:01:26,570
And also very closely with Anton
on seeing what it's like

37
00:01:26,570 --> 00:01:29,350
integrating the Dart VM
into the browser.

38
00:01:29,350 --> 00:01:30,310
SETH LADD: Awesome.

39
00:01:30,310 --> 00:01:34,250
Sounds like you have a sweet
spot of background to help the

40
00:01:34,250 --> 00:01:35,130
Dart team out, here.

41
00:01:35,130 --> 00:01:38,990
Anton, what had you been doing
before the Dart team?

42
00:01:38,990 --> 00:01:42,480
ANTON MUHIN: Before the team, I
was engaged into performance

43
00:01:42,480 --> 00:01:45,780
work on the DOM bindings
and on the [? 8th ?]

44
00:01:45,780 --> 00:01:47,310
virtual machine.

45
00:01:47,310 --> 00:01:50,760
Also I had some exposure
to [UNINTELLIGIBLE]

46
00:01:50,760 --> 00:01:51,710
before.

47
00:01:51,710 --> 00:01:54,540
And I really hope this
experience will help us make

48
00:01:54,540 --> 00:01:57,445
the best integration possible.

49
00:01:57,445 --> 00:02:00,470
SETH LADD: I would imagine that
experience on the v8 team

50
00:02:00,470 --> 00:02:03,680
would definitely be relevant
to the Dart team.

51
00:02:03,680 --> 00:02:07,030
What are some of the lessons
that you learned from working

52
00:02:07,030 --> 00:02:08,939
on the v8 team that's helped
you with the Dart project?

53
00:02:08,939 --> 00:02:12,640

54
00:02:12,640 --> 00:02:14,480
ANTON MUHIN: Everything was
minimal [UNINTELLIGIBLE]

55
00:02:14,480 --> 00:02:17,720
matters when you talk about
performance, because sometimes

56
00:02:17,720 --> 00:02:18,120
[? there ?]

57
00:02:18,120 --> 00:02:18,460
[? was ?]

58
00:02:18,460 --> 00:02:21,710
much more to just if you can
remove a couple of comments,

59
00:02:21,710 --> 00:02:23,750
you get the biggest
[? core ?].

60
00:02:23,750 --> 00:02:26,770
So it's an exciting
project, actually.

61
00:02:26,770 --> 00:02:29,880
It's exciting stuff
to work on.

62
00:02:29,880 --> 00:02:33,150
SETH LADD: I know that
performance has always been a

63
00:02:33,150 --> 00:02:36,570
goal of the Dart team,
so that's great.

64
00:02:36,570 --> 00:02:38,275
Well, you guys have been working
really hard today, and

65
00:02:38,275 --> 00:02:40,860
I know we have a special
announcement today.

66
00:02:40,860 --> 00:02:42,120
What are we announcing today?

67
00:02:42,120 --> 00:02:45,650
VIJAY MENON: We're announcing
something?

68
00:02:45,650 --> 00:02:46,750
[UNINTELLIGIBLE] down
in Seattle.

69
00:02:46,750 --> 00:02:48,786
I think that was it, right?

70
00:02:48,786 --> 00:02:49,250
SETH LADD:

71
00:02:49,250 --> 00:02:53,482
That was fast. [LAUGHTER]

72
00:02:53,482 --> 00:02:55,390
VIJAY MENON: Anton, do we have
a special announcement?

73
00:02:55,390 --> 00:02:58,720
ANTON MUHIN: I believe so.

74
00:02:58,720 --> 00:03:00,340
You go ahead, Vijay.

75
00:03:00,340 --> 00:03:01,130
VIJAY MENON: Sure.

76
00:03:01,130 --> 00:03:03,480
Well, you know, any of you
guys who have been paying

77
00:03:03,480 --> 00:03:07,130
attention, or just listen to
what Anton and I work on, know

78
00:03:07,130 --> 00:03:11,040
that we've been working
on integrating the

79
00:03:11,040 --> 00:03:13,040
Dart VM in the browser.

80
00:03:13,040 --> 00:03:15,660
The builds are public, and I
know a few of you brave souls

81
00:03:15,660 --> 00:03:20,670
have actually built it from
our public [? repo. ?]

82
00:03:20,670 --> 00:03:23,230

83
00:03:23,230 --> 00:03:26,600
We've been working on hosting
binaries and making it easier

84
00:03:26,600 --> 00:03:29,040
for you guys to do that.

85
00:03:29,040 --> 00:03:32,690
And I believe Seth could
probably give you the actual

86
00:03:32,690 --> 00:03:35,795
time, but we'll have some
instructions later today, you

87
00:03:35,795 --> 00:03:36,495
think, Seth?

88
00:03:36,495 --> 00:03:37,400
SETH LADD: Yeah.

89
00:03:37,400 --> 00:03:42,340
VIJAY MENON: On exactly how
to download binaries.

90
00:03:42,340 --> 00:03:43,920
Mac and Linux today.

91
00:03:43,920 --> 00:03:46,920
Windows very, very soon.

92
00:03:46,920 --> 00:03:47,690
Fingers crossed.

93
00:03:47,690 --> 00:03:51,830
We're just working on a few
things with the VM team.

94
00:03:51,830 --> 00:03:55,360
But Mac and Linux should be
there today that you can play

95
00:03:55,360 --> 00:03:57,100
around with.

96
00:03:57,100 --> 00:03:59,570
Binaries this time, so you don't
have to actually build

97
00:03:59,570 --> 00:04:00,410
it yourself.

98
00:04:00,410 --> 00:04:02,550
And it's actually just going
to be the output of our

99
00:04:02,550 --> 00:04:06,320
continuous build, so you'll
get the latest

100
00:04:06,320 --> 00:04:08,770
and greatest stuff.

101
00:04:08,770 --> 00:04:10,060
That said, there are
a few things we

102
00:04:10,060 --> 00:04:11,100
want to talk through.

103
00:04:11,100 --> 00:04:13,470
I don't know if it's a good time
to do it, but where we

104
00:04:13,470 --> 00:04:15,475
can give a demo later
on, maybe.

105
00:04:15,475 --> 00:04:17,070
SETH LADD: Yeah, that's
fantastic.

106
00:04:17,070 --> 00:04:19,730
So to reiterate, for everyone
who's just joining us, welcome

107
00:04:19,730 --> 00:04:21,779
to Dartisans Episode Two.

108
00:04:21,779 --> 00:04:25,520
And we have just announced that
we'll be releasing public

109
00:04:25,520 --> 00:04:30,200
binaries of Dartium, which is
Chromium with the Dart virtual

110
00:04:30,200 --> 00:04:31,820
machine integrated into it.

111
00:04:31,820 --> 00:04:33,580
And we'll make these binaries
available later

112
00:04:33,580 --> 00:04:34,920
today on our website.

113
00:04:34,920 --> 00:04:35,760
This is huge news.

114
00:04:35,760 --> 00:04:39,940
This is another step forward
for our batteries included

115
00:04:39,940 --> 00:04:42,170
Dart platform.

116
00:04:42,170 --> 00:04:46,380
When we announced and launched
last October, we had a virtual

117
00:04:46,380 --> 00:04:52,090
machine, language spec, early
revision, libraries, and now

118
00:04:52,090 --> 00:04:56,010
finally, moving closer to this
batteries included idea by

119
00:04:56,010 --> 00:04:59,050
putting Dart VM into Chromium.

120
00:04:59,050 --> 00:05:00,300
So this is great news.

121
00:05:00,300 --> 00:05:01,600
Thanks, guys.

122
00:05:01,600 --> 00:05:04,040
Can you talk a little bit about
what it actually means

123
00:05:04,040 --> 00:05:06,435
to integrate Dart
with Chromium?

124
00:05:06,435 --> 00:05:08,360
I mean, exactly what
did you do?

125
00:05:08,360 --> 00:05:11,490

126
00:05:11,490 --> 00:05:14,330
VIJAY MENON: As you heard from
Anton, he worked before on

127
00:05:14,330 --> 00:05:16,350
putting v8s into the browser.

128
00:05:16,350 --> 00:05:19,780
And this is kind of another
exercise in doing that.

129
00:05:19,780 --> 00:05:24,470
Embedding the VM itself in the
browser means kind of drilling

130
00:05:24,470 --> 00:05:29,020
all the holes through, getting
all of the DOM integration so

131
00:05:29,020 --> 00:05:32,140
that you can actually interact
with the browser's DOM from

132
00:05:32,140 --> 00:05:33,390
the Dart language.

133
00:05:33,390 --> 00:05:35,780

134
00:05:35,780 --> 00:05:39,590
Integrating it with things like
developer tools, adding

135
00:05:39,590 --> 00:05:42,180
the support for the MIME
types, and so on.

136
00:05:42,180 --> 00:05:45,240
Doing a lot of performance
work.

137
00:05:45,240 --> 00:05:47,460
So there's quite a bit to it.

138
00:05:47,460 --> 00:05:51,440
Chrome is a big beast, and
figuring out how to get this

139
00:05:51,440 --> 00:05:55,780
to work, and work alongside the
v8s has kind of been the

140
00:05:55,780 --> 00:05:57,030
main challenge.

141
00:05:57,030 --> 00:05:58,845

142
00:05:58,845 --> 00:06:00,420
[INTERPOSING VOICES]

143
00:06:00,420 --> 00:06:01,360
SETH LADD: Go ahead, Anton.

144
00:06:01,360 --> 00:06:03,010
ANTON MUHIN: Sorry.

145
00:06:03,010 --> 00:06:03,360
[UNINTELLIGIBLE]

146
00:06:03,360 --> 00:06:06,750
cases you should be aware of,
because all this stuff,

147
00:06:06,750 --> 00:06:10,170
something like when you upload,
[? you just ?] see

148
00:06:10,170 --> 00:06:10,500
[UNINTELLIGIBLE]

149
00:06:10,500 --> 00:06:11,350
[? collect ?]

150
00:06:11,350 --> 00:06:15,610
some stuff, and how the API
should behave, how the

151
00:06:15,610 --> 00:06:19,480
application should be started,
how you can then [? upload ?]

152
00:06:19,480 --> 00:06:19,970
application.

153
00:06:19,970 --> 00:06:23,100
There's a lot of difficult
and [UNINTELLIGIBLE]

154
00:06:23,100 --> 00:06:26,030
we have addressed, we
hope to address.

155
00:06:26,030 --> 00:06:30,450
And we wanted to explore, and
ideally to provide the best

156
00:06:30,450 --> 00:06:33,890
environment for the
applications.

157
00:06:33,890 --> 00:06:36,306
[UNINTELLIGIBLE]

158
00:06:36,306 --> 00:06:38,970
SETH LADD: So if the Dart
virtual machine is now

159
00:06:38,970 --> 00:06:43,120
directly inside Chromium, that
means I can run Dart code

160
00:06:43,120 --> 00:06:44,240
straight up in Chromium.

161
00:06:44,240 --> 00:06:46,720
But what about other browsers?

162
00:06:46,720 --> 00:06:48,686
What do we have answers
for those?

163
00:06:48,686 --> 00:06:52,690
VIJAY MENON: Well, compiling
to JavaScript using the

164
00:06:52,690 --> 00:06:55,220
Dart-to-JavaScript compiler
is still very, very

165
00:06:55,220 --> 00:06:56,320
important to Dart.

166
00:06:56,320 --> 00:06:59,900
That's how you will get it to
run on other, modern browsers.

167
00:06:59,900 --> 00:07:02,900
And to emphasize, it's not
in Chromium proper.

168
00:07:02,900 --> 00:07:06,880
It's in our branch of Chromium
that we're calling Dartium.

169
00:07:06,880 --> 00:07:10,330
This is very much a development
tool that we're

170
00:07:10,330 --> 00:07:11,550
working on and experimenting.

171
00:07:11,550 --> 00:07:14,550
It is work in progress.

172
00:07:14,550 --> 00:07:17,440
Those of you who really use it
will know that you're really

173
00:07:17,440 --> 00:07:21,130
using it when you managed to
get an "Aw, snap" screen in

174
00:07:21,130 --> 00:07:22,000
Chrome, and so on.

175
00:07:22,000 --> 00:07:24,660
So very much work in progress.

176
00:07:24,660 --> 00:07:27,920
We're trying to prove to
ourselves and everyone else

177
00:07:27,920 --> 00:07:31,870
that having native Dart support
in the browser is a

178
00:07:31,870 --> 00:07:34,210
good thing, and we're hoping
for feedback on that.

179
00:07:34,210 --> 00:07:37,640
I think that's kind of the
point we're at right now.

180
00:07:37,640 --> 00:07:40,490
Early feedback is if
people like this

181
00:07:40,490 --> 00:07:41,800
for development purposes.

182
00:07:41,800 --> 00:07:44,560
They love the ability to be able
to just edit their Dart

183
00:07:44,560 --> 00:07:47,930
code and just reload in the
browser and see it working.

184
00:07:47,930 --> 00:07:51,450
And as we go forward, the VM
team is working really hard on

185
00:07:51,450 --> 00:07:52,050
performance.

186
00:07:52,050 --> 00:07:55,040
We're working closely with
them on performance with

187
00:07:55,040 --> 00:07:57,820
respect to rendering
in the browser.

188
00:07:57,820 --> 00:08:01,400
And you should see
a lot of those

189
00:08:01,400 --> 00:08:03,150
improvements coming along.

190
00:08:03,150 --> 00:08:06,450
So we're looking for feedback
to see, does this make the

191
00:08:06,450 --> 00:08:09,550
experience better, both with
developing Dart applications

192
00:08:09,550 --> 00:08:12,415
and running Dart applications,
and I think we go from there.

193
00:08:12,415 --> 00:08:15,335
Improve it in Chrome first.

194
00:08:15,335 --> 00:08:16,840
SETH LADD: That's an
excellent point.

195
00:08:16,840 --> 00:08:19,240
This is very much a technology
preview.

196
00:08:19,240 --> 00:08:21,890
Along with the whole Dart
project, which is still in

197
00:08:21,890 --> 00:08:25,290
technology preview as we add
features to the language, we

198
00:08:25,290 --> 00:08:29,215
smooth out the libraries, and
launch this stuff very early,

199
00:08:29,215 --> 00:08:32,419
so as you say, get feedback
from developers.

200
00:08:32,419 --> 00:08:34,710
How can developers give
us their feedback?

201
00:08:34,710 --> 00:08:35,960
Any recommendations there?

202
00:08:35,960 --> 00:08:40,300

203
00:08:40,300 --> 00:08:42,480
VIJAY MENON: Tell us what works,
what doesn't work.

204
00:08:42,480 --> 00:08:44,280
In particular, file bugs.

205
00:08:44,280 --> 00:08:48,010
It's a lot of the things people
have been doing with

206
00:08:48,010 --> 00:08:51,730
the Dart language and so on.

207
00:08:51,730 --> 00:08:54,110
A lot of these things are
just coming live.

208
00:08:54,110 --> 00:08:55,790
Developer tools, support.

209
00:08:55,790 --> 00:08:57,480
There's some preliminary
stuff in there.

210
00:08:57,480 --> 00:08:58,730
It's going to continue
improving.

211
00:08:58,730 --> 00:09:01,210

212
00:09:01,210 --> 00:09:04,440
Give us feedback on what works,
what doesn't work.

213
00:09:04,440 --> 00:09:08,340
When things crash, please
file bugs on us.

214
00:09:08,340 --> 00:09:12,250
If things don't work, please
file bugs on us.

215
00:09:12,250 --> 00:09:15,970
That's a big reason why this
is going out early.

216
00:09:15,970 --> 00:09:18,310
ANTON MUHIN: And just
[UNINTELLIGIBLE].

217
00:09:18,310 --> 00:09:20,860
We are really looking
for feedback.

218
00:09:20,860 --> 00:09:24,740
We just did a couple of
decisions when implementing

219
00:09:24,740 --> 00:09:29,650
Dart, Dartium, and in
some cases, we just

220
00:09:29,650 --> 00:09:31,180
[UNINTELLIGIBLE]

221
00:09:31,180 --> 00:09:34,320
We really hope to get feedback
from people who do web

222
00:09:34,320 --> 00:09:37,670
application programming so we
can revisit our old decisions

223
00:09:37,670 --> 00:09:40,580
and make things more
convenient, more

224
00:09:40,580 --> 00:09:41,740
easy for you to use.

225
00:09:41,740 --> 00:09:46,096
So we're really, really looking
for your feedback.

226
00:09:46,096 --> 00:09:48,720
SETH LADD: So specifically, if
you want to send us bugs and

227
00:09:48,720 --> 00:09:52,390
issues, please do
at dartbug.com.

228
00:09:52,390 --> 00:09:55,290
That's a nice shortcut to get
to our issue tracker.

229
00:09:55,290 --> 00:09:57,340
So that's dartbug.com.

230
00:09:57,340 --> 00:10:01,460
And on dartlang.org, you'll see
links to our mailing list

231
00:10:01,460 --> 00:10:05,090
where there's lots of active
discussion, and many of our

232
00:10:05,090 --> 00:10:06,660
Dart team participate there.

233
00:10:06,660 --> 00:10:08,780
So lots of different ways to
send us your feedback.

234
00:10:08,780 --> 00:10:11,880
We launched this stuff early
in developer preview

235
00:10:11,880 --> 00:10:13,900
specifically to get
your feedback, so

236
00:10:13,900 --> 00:10:16,230
please don't be shy.

237
00:10:16,230 --> 00:10:19,190
For everyone who's joining us,
this is Dartisans Episode Two,

238
00:10:19,190 --> 00:10:20,740
with special guest from
the Dart team.

239
00:10:20,740 --> 00:10:26,340
We've just announced the
binaries of Dart VM integrated

240
00:10:26,340 --> 00:10:28,410
into Chromium will be available

241
00:10:28,410 --> 00:10:30,270
later today for download.

242
00:10:30,270 --> 00:10:34,260
And we'll take questions for
everyone, so please add

243
00:10:34,260 --> 00:10:37,390
questions to our Google+ posts
if you're not joining us in

244
00:10:37,390 --> 00:10:40,720
the hangout, and we will route
those into our guests.

245
00:10:40,720 --> 00:10:44,830
In fact, we already got a
question here from Google+.

246
00:10:44,830 --> 00:10:47,940
John asks, why is it that the
Dart support was shipped into

247
00:10:47,940 --> 00:10:51,300
a separate build of Chromium
in the first place, rather

248
00:10:51,300 --> 00:10:55,735
than just shipping it into
the Chromium builds?

249
00:10:55,735 --> 00:10:58,030
ANTON MUHIN: The reason
is actually simple.

250
00:10:58,030 --> 00:11:01,180
Dart is complicated and
very big system.

251
00:11:01,180 --> 00:11:01,610
Dart [? and ?]

252
00:11:01,610 --> 00:11:01,980
[? the ?]

253
00:11:01,980 --> 00:11:02,720
[? bindings ?].

254
00:11:02,720 --> 00:11:05,720
And we don't [UNINTELLIGIBLE]

255
00:11:05,720 --> 00:11:08,380
right now, but we have all
these resources out.

256
00:11:08,380 --> 00:11:12,690
So we don't want to compromise
stability, the ability of

257
00:11:12,690 --> 00:11:16,010
Chrome, its current stage of
development of Dartium

258
00:11:16,010 --> 00:11:19,050
integration, but we are really
aiming for that later on.

259
00:11:19,050 --> 00:11:21,940
So when we think we're in better
shape, and we don't

260
00:11:21,940 --> 00:11:25,150
provide any security risk,
and instability risk, any

261
00:11:25,150 --> 00:11:29,540
slowdowns from Chrome when we
don't compromise on any point,

262
00:11:29,540 --> 00:11:33,456
we'll call to have Dart
integrated into Chrome.

263
00:11:33,456 --> 00:11:36,090
VIJAY MENON: And to follow up
on that point, I want to

264
00:11:36,090 --> 00:11:39,370
emphasize that this is
a developer release.

265
00:11:39,370 --> 00:11:41,235
Please don't use this for
day-to-day browsing.

266
00:11:41,235 --> 00:11:45,970
As Anton said, this hasn't gone
through the stringent

267
00:11:45,970 --> 00:11:50,100
security that we do this
with Chrome builds.

268
00:11:50,100 --> 00:11:52,570
It doesn't autoupdate.

269
00:11:52,570 --> 00:11:56,200
And we basically set these
things to expire in about a

270
00:11:56,200 --> 00:11:59,790
week or two, so we want
you to download--

271
00:11:59,790 --> 00:12:01,790
this is, again, early.

272
00:12:01,790 --> 00:12:06,090
We need to get it more stable
before we can get this into

273
00:12:06,090 --> 00:12:08,620
Chromium proper, or
Chrome proper.

274
00:12:08,620 --> 00:12:11,308

275
00:12:11,308 --> 00:12:13,600
SETH LADD: And I think the
question everyone's asking is

276
00:12:13,600 --> 00:12:16,060
where can developers get this?

277
00:12:16,060 --> 00:12:20,700
We will post links of this on
dartlang.org later today, and

278
00:12:20,700 --> 00:12:22,990
it'll be real easy for you to go
and download, just like you

279
00:12:22,990 --> 00:12:24,520
can download the Editor,
et cetera.

280
00:12:24,520 --> 00:12:28,260
So just watch for dartlang.org
later today, where you can get

281
00:12:28,260 --> 00:12:28,970
your hands on this.

282
00:12:28,970 --> 00:12:31,500
This is cool stuff.

283
00:12:31,500 --> 00:12:33,530
And Vijay, you answered
the other question.

284
00:12:33,530 --> 00:12:35,090
Will it be automatically
updated?

285
00:12:35,090 --> 00:12:37,740
I think you said the answer is
no, this is not our normal

286
00:12:37,740 --> 00:12:39,620
Chrome or Chromium channel.

287
00:12:39,620 --> 00:12:42,250
This is a standalone, kind
of snapshot build.

288
00:12:42,250 --> 00:12:43,880
Is that the right way
to think about that?

289
00:12:43,880 --> 00:12:44,901
VIJAY MENON: Right.

290
00:12:44,901 --> 00:12:47,727
Right.

291
00:12:47,727 --> 00:12:50,780
SETH LADD: So now that we have
the Dart virtual machine

292
00:12:50,780 --> 00:12:55,230
inside a build of Chromium,
can developers run both

293
00:12:55,230 --> 00:12:57,235
JavaScript and Dart
on the same page?

294
00:12:57,235 --> 00:13:01,372

295
00:13:01,372 --> 00:13:04,130
VIJAY MENON: Yes, they can.

296
00:13:04,130 --> 00:13:07,390
That's one of those things that
Anton talked about it.

297
00:13:07,390 --> 00:13:13,820
Right now, you can't invoke one
directly from the other.

298
00:13:13,820 --> 00:13:17,500
And that's probably going to
stay that way because of a lot

299
00:13:17,500 --> 00:13:20,660
of the technical issues
involved.

300
00:13:20,660 --> 00:13:22,830
The way you can communicate
with--

301
00:13:22,830 --> 00:13:24,340
there'll probably a couple
different ways you can

302
00:13:24,340 --> 00:13:27,670
communicate between JavaScript
and Dart.

303
00:13:27,670 --> 00:13:30,650
First of all, JavaScript and
Dart are essentially isolated

304
00:13:30,650 --> 00:13:33,190
from each other on the page.

305
00:13:33,190 --> 00:13:35,150
They can communicate
via the DOM.

306
00:13:35,150 --> 00:13:37,110
They can communicate via
things like post

307
00:13:37,110 --> 00:13:38,110
message on a window.

308
00:13:38,110 --> 00:13:40,500
You can add a handler in Dart,
and you can send messages to

309
00:13:40,500 --> 00:13:44,364
it from JavaScript,
and vice versa.

310
00:13:44,364 --> 00:13:49,570
ANTON MUHIN: And ideally
[UNINTELLIGIBLE]

311
00:13:49,570 --> 00:13:51,970
ideally will prefer if you don't
[UNINTELLIGIBLE] the

312
00:13:51,970 --> 00:13:54,670
same DOM tree from both
Dart and JavaStream

313
00:13:54,670 --> 00:13:55,800
[UNINTELLIGIBLE]

314
00:13:55,800 --> 00:13:59,680
pretty complicated and just
[? kernel ?] cases.

315
00:13:59,680 --> 00:14:05,770
So [? new ?] for communicating
between Dart [UNINTELLIGIBLE]

316
00:14:05,770 --> 00:14:09,570
you have an I frame or have just
a subtree of DOM, and you

317
00:14:09,570 --> 00:14:11,340
just communicate with something
like post message

318
00:14:11,340 --> 00:14:12,225
[? router. ?]

319
00:14:12,225 --> 00:14:16,400
Just as a model of Dart, we
hope [UNINTELLIGIBLE]

320
00:14:16,400 --> 00:14:18,992
to communication
of JavaScript.

321
00:14:18,992 --> 00:14:21,530
SETH LADD: So it sounds like
the recommendation is, use

322
00:14:21,530 --> 00:14:24,050
post message right now to
communicate between your

323
00:14:24,050 --> 00:14:26,155
JavaScript code and
your Dart code.

324
00:14:26,155 --> 00:14:27,450
VIJAY MENON: Yes.

325
00:14:27,450 --> 00:14:30,300
ANTON MUHIN: But you can have
use cases when you want to

326
00:14:30,300 --> 00:14:32,100
modify the same DOM directory.

327
00:14:32,100 --> 00:14:34,630
Please let us know, because we
are really looking for your

328
00:14:34,630 --> 00:14:38,280
feedback for your experience,
for your needs.

329
00:14:38,280 --> 00:14:40,720
SETH LADD: So what it sounds
like, it is possible today to

330
00:14:40,720 --> 00:14:45,420
manipulate the same DOM with
both JavaScript and Dart, but

331
00:14:45,420 --> 00:14:46,715
that could get you
into trouble?

332
00:14:46,715 --> 00:14:50,130

333
00:14:50,130 --> 00:14:53,430
ANTON MUHIN: It's very unlikely,
but probably yes.

334
00:14:53,430 --> 00:14:55,020
VIJAY MENON: Well, yeah.

335
00:14:55,020 --> 00:14:57,800
You can put Dart scripts and you
can put JavaScript scripts

336
00:14:57,800 --> 00:14:58,820
on the same page.

337
00:14:58,820 --> 00:15:00,310
They can both manipulate
the DOM.

338
00:15:00,310 --> 00:15:05,250
It's our intent to make that
work perfectly well.

339
00:15:05,250 --> 00:15:09,490
But today, expect to see some
funky behavior, and if you do,

340
00:15:09,490 --> 00:15:10,940
let us know about it.

341
00:15:10,940 --> 00:15:13,690
And there's certainly still some
technical challenges we

342
00:15:13,690 --> 00:15:16,370
have to solve there with
essentially garbage

343
00:15:16,370 --> 00:15:18,480
collection, making sure things
don't leak, get a little

344
00:15:18,480 --> 00:15:21,050
complicated when you have two
runtimes in the browser.

345
00:15:21,050 --> 00:15:26,130

346
00:15:26,130 --> 00:15:29,330
SETH LADD: It sounds like the
expectation then is once we

347
00:15:29,330 --> 00:15:31,960
get the kinks ironed out, you
should be able to have both

348
00:15:31,960 --> 00:15:35,560
scripts operating is it more
or less concurrently?

349
00:15:35,560 --> 00:15:36,490
Are they running
in the separate

350
00:15:36,490 --> 00:15:38,250
processes or separate threads?

351
00:15:38,250 --> 00:15:41,590
Or how would you characterize
Dart and

352
00:15:41,590 --> 00:15:44,220
JavaScript parallel execution?

353
00:15:44,220 --> 00:15:48,390
ANTON MUHIN: This is just a
common DOM model when you have

354
00:15:48,390 --> 00:15:51,000
the same stuff running on
the main UI thread.

355
00:15:51,000 --> 00:15:54,580
So you run a JavaScript
for some time.

356
00:15:54,580 --> 00:15:57,270
When you yield, then you run
Dart script for some time, you

357
00:15:57,270 --> 00:15:58,950
yield, and so on.

358
00:15:58,950 --> 00:16:02,770
So nothing will change
dramatically here.

359
00:16:02,770 --> 00:16:05,840
Of course, if you don't use
something like isolates or

360
00:16:05,840 --> 00:16:09,320
[? workers, ?] stuff which adds
real multithreading into

361
00:16:09,320 --> 00:16:11,836
both Dart and JavaScript.

362
00:16:11,836 --> 00:16:14,490
VIJAY MENON: Yeah, they do run
in the same process, and

363
00:16:14,490 --> 00:16:16,470
that's actually pretty
important to getting

364
00:16:16,470 --> 00:16:17,920
performance.

365
00:16:17,920 --> 00:16:20,840
That's why Dart is very
different from, say, a

366
00:16:20,840 --> 00:16:24,140
plug-in, where if you look at
plug-ins-- like, say, the Java

367
00:16:24,140 --> 00:16:27,850
plug-in or others-- they
typically don't interact that

368
00:16:27,850 --> 00:16:28,870
tightly with the DOM.

369
00:16:28,870 --> 00:16:30,650
They live in their own window.

370
00:16:30,650 --> 00:16:36,360
In order to really write apps
that interact very closely

371
00:16:36,360 --> 00:16:39,300
with the DOM, you really need
to be running on the same

372
00:16:39,300 --> 00:16:42,950
process, tightly coupled with
the UI of the browser.

373
00:16:42,950 --> 00:16:48,440
And so Dart really sits right
next to v8 in our builds, the

374
00:16:48,440 --> 00:16:51,525
JavaScript engine.

375
00:16:51,525 --> 00:16:54,490
SETH LADD: So John asks
a good question.

376
00:16:54,490 --> 00:16:58,970
Can you clarify, do the
individual Dart script tags,

377
00:16:58,970 --> 00:17:02,731
are they all running on
the same UI thread?

378
00:17:02,731 --> 00:17:03,985
ANTON MUHIN: Yes.

379
00:17:03,985 --> 00:17:05,430
But in different isolates.

380
00:17:05,430 --> 00:17:09,475
For each script tag, you have
this on a separate isolate,

381
00:17:09,475 --> 00:17:12,300
and involve on all those
isolates from [UNINTELLIGIBLE]

382
00:17:12,300 --> 00:17:14,956
the main UI thread
of the browser.

383
00:17:14,956 --> 00:17:17,730
SETH LADD: So if each script is
running in its own isolate,

384
00:17:17,730 --> 00:17:20,410
does that mean each script then
is required to have a

385
00:17:20,410 --> 00:17:22,004
main function?

386
00:17:22,004 --> 00:17:22,839
ANTON MUHIN: Yes.

387
00:17:22,839 --> 00:17:24,804
VIJAY MENON: That's correct.

388
00:17:24,804 --> 00:17:26,589
SETH LADD: Can you just
spend a minute

389
00:17:26,589 --> 00:17:27,609
talking about isolates?

390
00:17:27,609 --> 00:17:29,365
This is kind of a new
concept if your

391
00:17:29,365 --> 00:17:30,440
're JavaScript developer.

392
00:17:30,440 --> 00:17:31,990
What does that mean
each script is

393
00:17:31,990 --> 00:17:35,165
running in an isolate?

394
00:17:35,165 --> 00:17:37,880
ANTON MUHIN: An isolate is just
a unit concurrency in

395
00:17:37,880 --> 00:17:41,870
Dart, just unit [UNINTELLIGIBLE]

396
00:17:41,870 --> 00:17:45,050
It's roughly a thread
[UNINTELLIGIBLE]

397
00:17:45,050 --> 00:17:46,880
So it's instance of
the [? image ?]

398
00:17:46,880 --> 00:17:50,580
as a separate heap, so we can
ensure references between

399
00:17:50,580 --> 00:17:52,360
different [? isolates ?].

400
00:17:52,360 --> 00:17:56,400
And it executes on its own,
but it doesn't always

401
00:17:56,400 --> 00:17:57,300
[UNINTELLIGIBLE]

402
00:17:57,300 --> 00:17:58,720
some [UNINTELLIGIBLE]

403
00:17:58,720 --> 00:17:59,900
system thread.

404
00:17:59,900 --> 00:18:03,320
As we talked just a couple of
minutes ago, some isolates are

405
00:18:03,320 --> 00:18:05,100
multiplexed on the
same thread.

406
00:18:05,100 --> 00:18:06,500
And we'll probably
[UNINTELLIGIBLE]

407
00:18:06,500 --> 00:18:07,750
support for [UNINTELLIGIBLE]

408
00:18:07,750 --> 00:18:10,290

409
00:18:10,290 --> 00:18:11,510
and stuff like that.

410
00:18:11,510 --> 00:18:15,290
And to some extent, isolates
are close to current

411
00:18:15,290 --> 00:18:16,760
JavaScript [? workers ?]

412
00:18:16,760 --> 00:18:19,000
but they're supposed to
be more lightweight

413
00:18:19,000 --> 00:18:20,250
[UNINTELLIGIBLE]

414
00:18:20,250 --> 00:18:22,440

415
00:18:22,440 --> 00:18:23,350
but [? workers ?]

416
00:18:23,350 --> 00:18:24,280
should be heavyweight.

417
00:18:24,280 --> 00:18:27,970
We expect isolates to be pretty
much lightweight and

418
00:18:27,970 --> 00:18:31,580
just roughly [UNINTELLIGIBLE]

419
00:18:31,580 --> 00:18:33,940
formalize it.

420
00:18:33,940 --> 00:18:37,690
VIJAY MENON: To follow up on
the green thread point, so

421
00:18:37,690 --> 00:18:40,550
different script tags run
different in isolates.

422
00:18:40,550 --> 00:18:43,320
Any isolates that can interact
with the DOM all

423
00:18:43,320 --> 00:18:44,415
run on the UI thread.

424
00:18:44,415 --> 00:18:46,870
They're all multiplexed onto
that same UI thread.

425
00:18:46,870 --> 00:18:51,850
So it is really like a sandbox
unit that in some cases can

426
00:18:51,850 --> 00:18:56,130
run on background threads if
they don't touch the DOM.

427
00:18:56,130 --> 00:18:59,930
And we went with that model
for better security.

428
00:18:59,930 --> 00:19:03,320
We think we can build more
secure apps that way.

429
00:19:03,320 --> 00:19:07,100
Script injection's less of an
issue because Dart scripts,

430
00:19:07,100 --> 00:19:10,250
even if you inject a Dart script
into a page, you can't

431
00:19:10,250 --> 00:19:13,280
directly interact with other
Dart scripts that

432
00:19:13,280 --> 00:19:15,056
you have on the page.

433
00:19:15,056 --> 00:19:17,080
SETH LADD: Which I think
is a very important

434
00:19:17,080 --> 00:19:18,070
clarification, right?

435
00:19:18,070 --> 00:19:21,160
So you can potentially have
multiple script tags, each

436
00:19:21,160 --> 00:19:24,570
loading up a Dart file which
has a main function.

437
00:19:24,570 --> 00:19:26,850
Each one of those is running
in an isolate.

438
00:19:26,850 --> 00:19:31,680
If that Dart script touches or
manipulates the DOM, it will

439
00:19:31,680 --> 00:19:36,820
run in the same UI thread, but
it's still isolated in the

440
00:19:36,820 --> 00:19:39,830
sense that one Dart script
doesn't know about the other

441
00:19:39,830 --> 00:19:40,490
Dart script.

442
00:19:40,490 --> 00:19:41,630
Is that true?

443
00:19:41,630 --> 00:19:41,930
VIJAY MENON: Yeah.

444
00:19:41,930 --> 00:19:44,170
It's somewhat similar to what
we were just talking about a

445
00:19:44,170 --> 00:19:47,700
few minutes ago about Dart to
JavaScript communication.

446
00:19:47,700 --> 00:19:53,410
Again, two Dart isolates on the
same page, two Dart script

447
00:19:53,410 --> 00:19:55,450
[UNINTELLIGIBLE] tags on the
same page, can again

448
00:19:55,450 --> 00:19:58,070
communicate via post message.

449
00:19:58,070 --> 00:20:00,990
But they can't directly reach
into each other's heap.

450
00:20:00,990 --> 00:20:02,240
SETH LADD: Got it.

451
00:20:02,240 --> 00:20:05,320

452
00:20:05,320 --> 00:20:09,970
How does Dartium know if
a script does or will

453
00:20:09,970 --> 00:20:10,930
manipulate the DOM?

454
00:20:10,930 --> 00:20:12,980
Do you look through
the API calls as

455
00:20:12,980 --> 00:20:14,230
you compile the script?

456
00:20:14,230 --> 00:20:16,480

457
00:20:16,480 --> 00:20:20,790
ANTON MUHIN: [UNINTELLIGIBLE] we
apply a pretty simple rule

458
00:20:20,790 --> 00:20:24,300
If you have script tag in the
page, [UNINTELLIGIBLE]

459
00:20:24,300 --> 00:20:26,620
manipulate DOM.

460
00:20:26,620 --> 00:20:29,470
And currently [UNINTELLIGIBLE]

461
00:20:29,470 --> 00:20:32,220
API to spawn [UNINTELLIGIBLE]

462
00:20:32,220 --> 00:20:35,970
dominated isolates versus
just plain isolates.

463
00:20:35,970 --> 00:20:39,200
So roughly in API with the
special call, we say, I want

464
00:20:39,200 --> 00:20:41,160
to create a new isolate,
but I want this

465
00:20:41,160 --> 00:20:43,040
isolate to have DOM access.

466
00:20:43,040 --> 00:20:46,202
Which means that this isolate
will run on plain UI thread.

467
00:20:46,202 --> 00:20:49,300
Or we say, I want to say it will
spawn in our isolate, and

468
00:20:49,300 --> 00:20:51,660
I don't care about
[UNINTELLIGIBLE].

469
00:20:51,660 --> 00:20:54,472
And in this case, you have the
liberty to put it on any

470
00:20:54,472 --> 00:20:57,370
thread which you find
[UNINTELLIGIBLE]

471
00:20:57,370 --> 00:21:00,775
convenient for us.

472
00:21:00,775 --> 00:21:01,520
VIJAY MENON: Yeah.

473
00:21:01,520 --> 00:21:04,360
The isolate API is definitely
under a lot of

474
00:21:04,360 --> 00:21:06,180
iteration right now.

475
00:21:06,180 --> 00:21:09,930
Today, the declarative
script tags are run

476
00:21:09,930 --> 00:21:11,610
on the same UI thread.

477
00:21:11,610 --> 00:21:14,000
You have to programmatically
create isolates that run on

478
00:21:14,000 --> 00:21:15,030
background threads.

479
00:21:15,030 --> 00:21:17,870
SETH LADD: I see, OK.

480
00:21:17,870 --> 00:21:20,760
And I think that if you're
familiar with Dart has light

481
00:21:20,760 --> 00:21:22,490
and heavy isolates.

482
00:21:22,490 --> 00:21:26,510
And a heavy isolate, at least
when compiled to JavaScript,

483
00:21:26,510 --> 00:21:29,390
will go to a web worker.

484
00:21:29,390 --> 00:21:32,090
But if you have a heavy isolate
running inside of the

485
00:21:32,090 --> 00:21:36,955
Dart VM in Dartium, that will
just spawn a separate--

486
00:21:36,955 --> 00:21:38,400
it doesn't go to web
worker, right?

487
00:21:38,400 --> 00:21:40,810
It just goes to a heavy isolate
inside the virtual

488
00:21:40,810 --> 00:21:43,315
machine, I would imagine.

489
00:21:43,315 --> 00:21:45,310
ANTON MUHIN: Yes.

490
00:21:45,310 --> 00:21:49,330
But once again, that's a very
[? messy ?] topic for us,

491
00:21:49,330 --> 00:21:54,150
what's the best way to divide
the space between isolates and

492
00:21:54,150 --> 00:21:59,016
workers, because both has its
benefits, and to some extent,

493
00:21:59,016 --> 00:22:01,630
both are pretty close
concepts.

494
00:22:01,630 --> 00:22:06,110
Once again, if that is
[? good ?] for us, and this is

495
00:22:06,110 --> 00:22:08,702
the area of [UNINTELLIGIBLE]
research.

496
00:22:08,702 --> 00:22:09,340
SETH LADD: OK.

497
00:22:09,340 --> 00:22:11,200
So it sounds like we're
definitely asking the

498
00:22:11,200 --> 00:22:14,720
developer community, play with
heavy and light isolates, play

499
00:22:14,720 --> 00:22:17,640
with multiple script tags, and
give us some good use cases

500
00:22:17,640 --> 00:22:19,536
and feedback on how
all this works.

501
00:22:19,536 --> 00:22:21,530
ANTON MUHIN: That would
be just awesome.

502
00:22:21,530 --> 00:22:23,150
SETH LADD: OK.

503
00:22:23,150 --> 00:22:27,330
So do I need to do anything
special to activate Dart on my

504
00:22:27,330 --> 00:22:28,020
pages here?

505
00:22:28,020 --> 00:22:30,710
Or is just a simple script tag,
is that all it takes?

506
00:22:30,710 --> 00:22:33,867

507
00:22:33,867 --> 00:22:37,150
VIJAY MENON: So we iterated
on this quite a bit.

508
00:22:37,150 --> 00:22:43,130
Part of the trickiness is just
getting it integrated into

509
00:22:43,130 --> 00:22:44,580
Chrome and WebKit, and
figuring out what

510
00:22:44,580 --> 00:22:45,850
the right hooks are.

511
00:22:45,850 --> 00:22:48,300
With the binaries that are
released today, you won't have

512
00:22:48,300 --> 00:22:48,940
to do anything.

513
00:22:48,940 --> 00:22:52,420
If you just have a script with
the type application Dart, it

514
00:22:52,420 --> 00:22:53,680
will go ahead and run.

515
00:22:53,680 --> 00:22:56,760

516
00:22:56,760 --> 00:22:59,760
Those of you who have built it
in the past few weeks have

517
00:22:59,760 --> 00:23:02,560
noticed that we changed
this a few times.

518
00:23:02,560 --> 00:23:05,130
We had a function that we were
using from JavaScript to

519
00:23:05,130 --> 00:23:06,540
bootstrap it.

520
00:23:06,540 --> 00:23:08,290
If you look under the hood,
that's still there.

521
00:23:08,290 --> 00:23:11,610
We just have a way of just
invoking that for you, so you

522
00:23:11,610 --> 00:23:14,500
don't actually have to
put it on your page.

523
00:23:14,500 --> 00:23:16,860
And I'll show you an example
later if have

524
00:23:16,860 --> 00:23:18,435
some time to demo.

525
00:23:18,435 --> 00:23:20,790
SETH LADD: Yeah, that's
an excellent segue.

526
00:23:20,790 --> 00:23:23,720
And for everyone joining us,
this is Dartisans Episode Two.

527
00:23:23,720 --> 00:23:25,550
We have special guests
from the Dart team.

528
00:23:25,550 --> 00:23:30,180
Today we've announced that
binaries of Chromium plus Dart

529
00:23:30,180 --> 00:23:33,480
VM integration will be made
available later today on

530
00:23:33,480 --> 00:23:35,150
dartlang.org.

531
00:23:35,150 --> 00:23:38,350
And for everyone following along
via the live stream,

532
00:23:38,350 --> 00:23:43,840
please add your questions and
comments to the G+ feed.

533
00:23:43,840 --> 00:23:47,040
We'll be monitoring those, and
we'll ask those questions to

534
00:23:47,040 --> 00:23:48,320
our panel here.

535
00:23:48,320 --> 00:23:50,510
But yeah, I think
it's fantastic.

536
00:23:50,510 --> 00:23:52,240
Let's see a example.

537
00:23:52,240 --> 00:23:55,600
Can you show us a Dart program
running in Dartium?

538
00:23:55,600 --> 00:23:57,072
What does that look like?

539
00:23:57,072 --> 00:23:57,820
VIJAY MENON: OK.

540
00:23:57,820 --> 00:24:01,285
Let me try to share
my copy here.

541
00:24:01,285 --> 00:24:06,700

542
00:24:06,700 --> 00:24:08,140
OK, is that showing up?

543
00:24:08,140 --> 00:24:10,960

544
00:24:10,960 --> 00:24:12,160
SETH LADD: Yeah, looks good.

545
00:24:12,160 --> 00:24:13,190
VIJAY MENON: OK.

546
00:24:13,190 --> 00:24:16,632
So this is Dartium.

547
00:24:16,632 --> 00:24:21,470
You can tell it's the Mac by
the boundaries and so on.

548
00:24:21,470 --> 00:24:23,260
So as we were saying earlier,
this is the

549
00:24:23,260 --> 00:24:27,660
development tool right now.

550
00:24:27,660 --> 00:24:29,750
Before I launch into anything,
I just want to emphasize

551
00:24:29,750 --> 00:24:31,240
what's in red here.

552
00:24:31,240 --> 00:24:32,330
This is technical preview.

553
00:24:32,330 --> 00:24:34,015
Don't use this as your
primary browser.

554
00:24:34,015 --> 00:24:38,080
It hasn't gone through all the
deep security review that we

555
00:24:38,080 --> 00:24:41,830
do for, say, production Chrome,
and not even as much

556
00:24:41,830 --> 00:24:44,070
as, say, the Chromium that you
get from the dev channel.

557
00:24:44,070 --> 00:24:45,960
So this is very preliminary
stuff.

558
00:24:45,960 --> 00:24:49,250
It's great for testing
your Dart apps.

559
00:24:49,250 --> 00:24:53,340
Don't go off, read your mail, go
to news sites, or whatever

560
00:24:53,340 --> 00:24:57,346
on this, because it hasn't
been secured.

561
00:24:57,346 --> 00:25:02,200
So that said, we wanted to do
a few of those things to

562
00:25:02,200 --> 00:25:04,580
integrate those in there
to help developers.

563
00:25:04,580 --> 00:25:06,840
One is that we wanted the start
page just to emphasize

564
00:25:06,840 --> 00:25:07,690
this point.

565
00:25:07,690 --> 00:25:09,650
This is the home page
when you launch.

566
00:25:09,650 --> 00:25:13,260
It will give you information
on Dartium.

567
00:25:13,260 --> 00:25:15,550
So let's get to the
meat of it.

568
00:25:15,550 --> 00:25:18,270
As we said, the interesting
thing here is being able to

569
00:25:18,270 --> 00:25:21,000
run Dart applications.

570
00:25:21,000 --> 00:25:26,100
And here's a very simple example
of a Dart app, a

571
00:25:26,100 --> 00:25:28,660
test.html that I've got here
that's just got a script, an

572
00:25:28,660 --> 00:25:30,900
application Dart script,
in my bin.

573
00:25:30,900 --> 00:25:34,840
Its importing the HTML library,
and it's basically

574
00:25:34,840 --> 00:25:37,625
running hello from Dart
and adding that to

575
00:25:37,625 --> 00:25:39,250
the body of the document.

576
00:25:39,250 --> 00:25:41,420
And you can see that
running here.

577
00:25:41,420 --> 00:25:44,690
So again, this is pretty
short and sweet.

578
00:25:44,690 --> 00:25:45,690
Nothing really to it.

579
00:25:45,690 --> 00:25:48,670
It's creating an element,
adding it to the body.

580
00:25:48,670 --> 00:25:50,510
There's nothing that you
need to bootstrap it.

581
00:25:50,510 --> 00:25:54,230
Just you will see the
application Dart, and as we

582
00:25:54,230 --> 00:25:56,430
reload it, it's there.

583
00:25:56,430 --> 00:25:58,690
We can also run larger apps.

584
00:25:58,690 --> 00:26:02,660
This is a test version
of Swarm.

585
00:26:02,660 --> 00:26:05,600
It's a newsreader that
we've demoed before.

586
00:26:05,600 --> 00:26:07,610
This is really what's
just in the source.

587
00:26:07,610 --> 00:26:08,940
It's not showing any articles.

588
00:26:08,940 --> 00:26:15,060
But this is all running
in the Dart runtime.

589
00:26:15,060 --> 00:26:16,860
If you've seen it demoed
before, you've seen it

590
00:26:16,860 --> 00:26:19,440
compiled to JavaScript.

591
00:26:19,440 --> 00:26:23,770
So we think cool things about it
when you run it in the Dart

592
00:26:23,770 --> 00:26:28,310
VM, is that you get
the console here.

593
00:26:28,310 --> 00:26:31,630
You can look at all
of the scripts.

594
00:26:31,630 --> 00:26:35,780
So this is an application that
has some 60 Dart files to it.

595
00:26:35,780 --> 00:26:38,650
They all just show up in
the dev tools thing.

596
00:26:38,650 --> 00:26:41,165
As you make changes, you can
just reload it, and it will

597
00:26:41,165 --> 00:26:42,410
just reload it in the browser.

598
00:26:42,410 --> 00:26:45,690
So we really think that'll
be cool for

599
00:26:45,690 --> 00:26:47,200
the development cycle.

600
00:26:47,200 --> 00:26:51,150
And this stuff just started
coming up in

601
00:26:51,150 --> 00:26:52,640
the past couple weeks.

602
00:26:52,640 --> 00:26:55,820
Pavel, one of our colleagues in
Saint Petersburg, has just

603
00:26:55,820 --> 00:26:57,680
added a lot of support
for dev tools.

604
00:26:57,680 --> 00:27:00,670
Here I've set a break point
on the onload thing.

605
00:27:00,670 --> 00:27:04,000
So if I go ahead and
I reload the page,

606
00:27:04,000 --> 00:27:07,240
you can see it break.

607
00:27:07,240 --> 00:27:08,850
Let's see.

608
00:27:08,850 --> 00:27:11,310
He's just changing
what you can see.

609
00:27:11,310 --> 00:27:15,620
So again, much incentive
to keep updating this.

610
00:27:15,620 --> 00:27:20,110
You'll see more and more
cool stuff here.

611
00:27:20,110 --> 00:27:22,560
ANTON MUHIN: Tomorrow, the day
after tomorrow, we should be

612
00:27:22,560 --> 00:27:24,550
able to inspect your frames.

613
00:27:24,550 --> 00:27:28,050
So it will be closer to full
fledged [UNINTELLIGIBLE].

614
00:27:28,050 --> 00:27:28,920
VIJAY MENON: Right.

615
00:27:28,920 --> 00:27:32,220
So here you can see, you can
already set break points and

616
00:27:32,220 --> 00:27:34,360
continue on from there.

617
00:27:34,360 --> 00:27:39,240
So I think this will be pretty
cool to use for writing large

618
00:27:39,240 --> 00:27:40,210
Dart applications.

619
00:27:40,210 --> 00:27:43,480
Even if you intend to compile
it to JavaScript, this is a

620
00:27:43,480 --> 00:27:45,203
very nice way of developing.

621
00:27:45,203 --> 00:27:47,910
And you get the native
Dart runtime support.

622
00:27:47,910 --> 00:27:51,020
We really like the dev
experience, and that's the

623
00:27:51,020 --> 00:27:54,021
feedback we've gotten
to there.

624
00:27:54,021 --> 00:27:56,200
SETH LADD: That's a
good point, Vijay.

625
00:27:56,200 --> 00:27:59,600
To reiterate, I think if
anything, Dartium just really

626
00:27:59,600 --> 00:28:01,300
makes an awesome
dev experience.

627
00:28:01,300 --> 00:28:03,570
You can think of, you're coding
in the editor, you're

628
00:28:03,570 --> 00:28:05,940
getting syntax highlighting,
you're getting code

629
00:28:05,940 --> 00:28:07,200
completion.

630
00:28:07,200 --> 00:28:11,340
And you can run that Dart code
straight inside Dartium.

631
00:28:11,340 --> 00:28:14,560
Zero compilation step, there.

632
00:28:14,560 --> 00:28:15,270
Test your app.

633
00:28:15,270 --> 00:28:17,360
And then when you go to
production, you can compile to

634
00:28:17,360 --> 00:28:19,490
JavaScript and hit every
major browser.

635
00:28:19,490 --> 00:28:23,320
So if anything, Dartium enables
us to move just as

636
00:28:23,320 --> 00:28:27,140
fast as other web developers
with no compilation.

637
00:28:27,140 --> 00:28:29,435
I think that's just fantastic.

638
00:28:29,435 --> 00:28:31,520
ANTON MUHIN: And [? develop ?]
feature we expect to be

639
00:28:31,520 --> 00:28:33,260
implemented pretty soon.

640
00:28:33,260 --> 00:28:35,760
Something like in a couple of
weeks, so we want to have

641
00:28:35,760 --> 00:28:38,510
better integration between
Dart editor and Dartium.

642
00:28:38,510 --> 00:28:42,200
So you will be able to debug the
code in Dartium from your

643
00:28:42,200 --> 00:28:44,940
Dart editor [UNINTELLIGIBLE]

644
00:28:44,940 --> 00:28:49,745
So we hope that it will
help you as well.

645
00:28:49,745 --> 00:28:51,190
SETH LADD: That's an
excellent point.

646
00:28:51,190 --> 00:28:52,896
I'm looking forward to that.

647
00:28:52,896 --> 00:28:55,120
VIJAY MENON: And one other thing
I want to show up here.

648
00:28:55,120 --> 00:28:56,880
You'll notice this Dart
tool tip here.

649
00:28:56,880 --> 00:28:59,220
The icon's probably a little
hard to see over there.

650
00:28:59,220 --> 00:29:03,540
We've integrated this kind of
playground here that we found

651
00:29:03,540 --> 00:29:05,710
really useful for testing
out stuff.

652
00:29:05,710 --> 00:29:08,380
This is sort of analogous to the
Dartboard app if you used

653
00:29:08,380 --> 00:29:11,740
it on Dartlang, except it's
actually just running locally.

654
00:29:11,740 --> 00:29:13,190
There's no server
involved here.

655
00:29:13,190 --> 00:29:16,100
It's just running.

656
00:29:16,100 --> 00:29:18,210
And of course, it's also running
on the VM, so it gives

657
00:29:18,210 --> 00:29:22,330
you a chance to see what
works on the VM, what

658
00:29:22,330 --> 00:29:23,980
doesn't work on the VM.

659
00:29:23,980 --> 00:29:27,040
As you find problems with APIs
or stuff like that, this is

660
00:29:27,040 --> 00:29:30,720
also a great way to test
something out, send us an

661
00:29:30,720 --> 00:29:32,990
email saying, hey, I tried this
in the playground and it

662
00:29:32,990 --> 00:29:33,880
didn't work.

663
00:29:33,880 --> 00:29:35,860
So basically, this is
stuff you can go

664
00:29:35,860 --> 00:29:38,136
ahead and edit here.

665
00:29:38,136 --> 00:29:44,410
"Hello from Dart today." And it
just goes ahead and runs.

666
00:29:44,410 --> 00:29:47,680
And you can play around
with that.

667
00:29:47,680 --> 00:29:50,355
The other thing here is that you
can look at the console,

668
00:29:50,355 --> 00:29:52,130
and you can get error
messages.

669
00:29:52,130 --> 00:29:55,420
So print also just prints
the console.

670
00:29:55,420 --> 00:29:57,120
It's like console.log, for
those of you who are

671
00:29:57,120 --> 00:29:58,195
familiar with that.

672
00:29:58,195 --> 00:30:00,000
Let me see if I can go
ahead and open that.

673
00:30:00,000 --> 00:30:03,320
You can see that, open the dev
tools console to see this just

674
00:30:03,320 --> 00:30:05,790
printed out, when we went
and clicked on run.

675
00:30:05,790 --> 00:30:08,740
Let me try that more time,
you'll see the message appear

676
00:30:08,740 --> 00:30:09,230
one more time.

677
00:30:09,230 --> 00:30:12,240
So again, it's a really easy
way, even if you're not really

678
00:30:12,240 --> 00:30:15,030
interested in the browser, you
just want to play around with

679
00:30:15,030 --> 00:30:17,770
what can VM do, what are the
semantics of this or that,

680
00:30:17,770 --> 00:30:18,620
play around with the language.

681
00:30:18,620 --> 00:30:21,000
The playground is really
handy for that.

682
00:30:21,000 --> 00:30:24,450
And error messages
will improve.

683
00:30:24,450 --> 00:30:29,020
But here, let me just take
out this quote here.

684
00:30:29,020 --> 00:30:32,980
So I've got a badly formed
program, and you see the error

685
00:30:32,980 --> 00:30:34,160
message here.

686
00:30:34,160 --> 00:30:40,200
Unterminated string literal,
line 3, position 43.

687
00:30:40,200 --> 00:30:43,130
Again, that can be improved, but
you get the messages that

688
00:30:43,130 --> 00:30:45,640
can really help you see
what's going on.

689
00:30:45,640 --> 00:30:49,400
And as you load your Dart apps
to- if you have a syntax

690
00:30:49,400 --> 00:30:50,580
error, just open the console.

691
00:30:50,580 --> 00:30:52,940
You'll see the errors
from the VM show

692
00:30:52,940 --> 00:30:54,190
up here on the console.

693
00:30:54,190 --> 00:30:57,089

694
00:30:57,089 --> 00:31:00,080
SETH LADD: That is so cool.

695
00:31:00,080 --> 00:31:04,920
VIJAY MENON: I can go
ahead and fix that.

696
00:31:04,920 --> 00:31:07,530
We'll see that running again.

697
00:31:07,530 --> 00:31:08,780
OK.

698
00:31:08,780 --> 00:31:10,840

699
00:31:10,840 --> 00:31:16,930
So anything else you want
to show, Anton?

700
00:31:16,930 --> 00:31:19,940
ANTON MUHIN: Probably not.

701
00:31:19,940 --> 00:31:23,150
VIJAY MENON: I'll just
add one thing Anton

702
00:31:23,150 --> 00:31:25,980
actually just added in.

703
00:31:25,980 --> 00:31:26,970
Let's see if this works.

704
00:31:26,970 --> 00:31:29,880
ANTON MUHIN: I think it's
Chrome version.

705
00:31:29,880 --> 00:31:32,580
VIJAY MENON: I think I actually
went to this thing.

706
00:31:32,580 --> 00:31:35,360
But yeah, another thing is you
can see the version of the

707
00:31:35,360 --> 00:31:38,780
Dart VM that's integrated here
now, as well, along with

708
00:31:38,780 --> 00:31:40,090
everything else.

709
00:31:40,090 --> 00:31:43,190
As you do report issues or run
into issues, please let us

710
00:31:43,190 --> 00:31:46,000
know what version number you've
got, and that will help

711
00:31:46,000 --> 00:31:51,254
us reproduce things
and fix stuff.

712
00:31:51,254 --> 00:31:55,487
SETH LADD: It would be very cool
if in the console, you

713
00:31:55,487 --> 00:31:57,796
could have "report this bug."

714
00:31:57,796 --> 00:32:00,610
VIJAY MENON: Yeah.

715
00:32:00,610 --> 00:32:01,180
Yeah.

716
00:32:01,180 --> 00:32:02,630
We've talked about that.

717
00:32:02,630 --> 00:32:04,810
Especially with the playground,
it's just such a

718
00:32:04,810 --> 00:32:08,990
nice way of writing test cases
that are small, and say, yeah,

719
00:32:08,990 --> 00:32:10,320
this API doesn't work.

720
00:32:10,320 --> 00:32:13,560
Seth, you've been following a
lot of bugs lately in the past

721
00:32:13,560 --> 00:32:14,680
week, so you know it's a nice-

722
00:32:14,680 --> 00:32:15,340
SETH LADD: I don't
call them bugs.

723
00:32:15,340 --> 00:32:16,135
I call them opportunities.

724
00:32:16,135 --> 00:32:17,470
VIJAY MENON: Opportunities.

725
00:32:17,470 --> 00:32:20,830
You've been sharing many
opportunities with us, with

726
00:32:20,830 --> 00:32:22,670
the team recently.

727
00:32:22,670 --> 00:32:24,686
So, yes.

728
00:32:24,686 --> 00:32:27,720
SETH LADD: I have a couple
questions about how this fits

729
00:32:27,720 --> 00:32:31,560
into the other features of
the Dart virtual machine.

730
00:32:31,560 --> 00:32:35,130
For one, Dart can run in two
different execution modes,

731
00:32:35,130 --> 00:32:37,660
production and checked.

732
00:32:37,660 --> 00:32:42,890
Production mode will run with
the type assertions turned

733
00:32:42,890 --> 00:32:46,770
off, and check mode will turn
on those type assertions.

734
00:32:46,770 --> 00:32:50,870
Oftentimes, check mode is very
useful during the debugging

735
00:32:50,870 --> 00:32:53,650
cycle and the authoring cycle.

736
00:32:53,650 --> 00:32:55,120
How do I toggle between
these two

737
00:32:55,120 --> 00:32:59,200
different modes in Dartium?

738
00:32:59,200 --> 00:33:01,440
VIJAY MENON: You want to
take that one, Anton?

739
00:33:01,440 --> 00:33:03,290
ANTON MUHIN: OK, if
you don't mind.

740
00:33:03,290 --> 00:33:06,880
So for now, it's not
very convenient.

741
00:33:06,880 --> 00:33:09,440
For now, we have to provide
a special--

742
00:33:09,440 --> 00:33:12,320
when you start Dartium, you only
provide [UNINTELLIGIBLE]

743
00:33:12,320 --> 00:33:15,970
just environment variable
which [UNINTELLIGIBLE]

744
00:33:15,970 --> 00:33:18,350
flags and enables
checkit mode.

745
00:33:18,350 --> 00:33:21,770
For example, enable
[UNINTELLIGIBLE]

746
00:33:21,770 --> 00:33:25,660
We are going to open that, and
eventually want to expose

747
00:33:25,660 --> 00:33:29,270
somewhat APIs so that we can
control this setting in more

748
00:33:29,270 --> 00:33:30,610
convenient way.

749
00:33:30,610 --> 00:33:35,840
And we hope to publish a tiny
article, just maybe a page,

750
00:33:35,840 --> 00:33:39,490
maybe even less, how to enable
those [? checks ?]

751
00:33:39,490 --> 00:33:43,168
later when Dartium release
will go official.

752
00:33:43,168 --> 00:33:44,100
SETH LADD: Right.

753
00:33:44,100 --> 00:33:46,790
We will publish those
when we publish the

754
00:33:46,790 --> 00:33:48,000
how to download Dartium.

755
00:33:48,000 --> 00:33:50,180
So we'll include the instruction
how to flip

756
00:33:50,180 --> 00:33:51,380
between these two modes.

757
00:33:51,380 --> 00:33:56,300
Do you think we'll eventually
put those into about:flags?

758
00:33:56,300 --> 00:34:00,690
ANTON MUHIN: Maybe, maybe just.
We definitely have one

759
00:34:00,690 --> 00:34:03,670
option we have discussing
something like that.

760
00:34:03,670 --> 00:34:08,179
You can switch this mode on
directly from the Dart.

761
00:34:08,179 --> 00:34:10,489
So something like you start the
Dart application, and you

762
00:34:10,489 --> 00:34:13,190
say, on check mode, something
like that.

763
00:34:13,190 --> 00:34:15,659
We are really discussing
it these days.

764
00:34:15,659 --> 00:34:19,154
It's another thing
[UNINTELLIGIBLE]

765
00:34:19,154 --> 00:34:20,630
VIJAY MENON: Yeah, we definitely
want to make it

766
00:34:20,630 --> 00:34:21,650
easy to run check mode.

767
00:34:21,650 --> 00:34:24,340
By default, it's off, as
you can see if this

768
00:34:24,340 --> 00:34:25,210
example is still up.

769
00:34:25,210 --> 00:34:28,199
I just said, [UNINTELLIGIBLE]
message equals a string here,

770
00:34:28,199 --> 00:34:33,010
and you can see it's still
running just fine here, and

771
00:34:33,010 --> 00:34:33,949
printing it out.

772
00:34:33,949 --> 00:34:36,570
That's because we're running
in production mode.

773
00:34:36,570 --> 00:34:40,230
If you do run it in check
notice, as Anton said--

774
00:34:40,230 --> 00:34:43,350
today you have to use a set
environment flag to do that--

775
00:34:43,350 --> 00:34:46,690
then you would see an error on
the console saying that the

776
00:34:46,690 --> 00:34:49,730
type check fails.

777
00:34:49,730 --> 00:34:51,190
In check mode, you'd have
a type check on

778
00:34:51,190 --> 00:34:53,479
that line right there.

779
00:34:53,479 --> 00:34:57,810
ANTON MUHIN: On the good side,
when we have is planned

780
00:34:57,810 --> 00:35:01,040
integration with Dart editor,
Dart editor should be able to

781
00:35:01,040 --> 00:35:03,970
start Dartium for you with all
the flags properly set.

782
00:35:03,970 --> 00:35:07,130
So in development mode, you will
have this check mode for

783
00:35:07,130 --> 00:35:10,420
free, and you won't have to
default with nested flags,

784
00:35:10,420 --> 00:35:12,332
[UNINTELLIGIBLE] and
stuff like that.

785
00:35:12,332 --> 00:35:14,260
VIJAY MENON: Yeah, that's a good
reason to use the editor.

786
00:35:14,260 --> 00:35:17,700
I think they already have the
support in there to fire off

787
00:35:17,700 --> 00:35:21,720
in dev mode, and I highly
recommend it for

788
00:35:21,720 --> 00:35:22,440
development of apps.

789
00:35:22,440 --> 00:35:25,740
It will run slower, but when
you're trying to find bugs,

790
00:35:25,740 --> 00:35:30,500
it's great to have this check
here and catch this.

791
00:35:30,500 --> 00:35:31,780
Presumably you put
[UNINTELLIGIBLE]

792
00:35:31,780 --> 00:35:35,540
message, because you want to
actually convey something.

793
00:35:35,540 --> 00:35:42,950
And you will get that
check in check mode.

794
00:35:42,950 --> 00:35:46,500
SETH LADD: So Vijay, you can
flip back to you and

795
00:35:46,500 --> 00:35:47,340
[UNINTELLIGIBLE]

796
00:35:47,340 --> 00:35:48,650
Awesome, hi.

797
00:35:48,650 --> 00:35:50,910
So John asks another
good question.

798
00:35:50,910 --> 00:35:54,410
Another feature of the
Dart ecosystem is

799
00:35:54,410 --> 00:35:57,070
the support of snapshots.

800
00:35:57,070 --> 00:36:01,980
Snapshots allow you to take a
snapshot or kind of a binary

801
00:36:01,980 --> 00:36:02,840
[? serialization ?]

802
00:36:02,840 --> 00:36:05,070
of the heap of the
program right

803
00:36:05,070 --> 00:36:07,760
before it starts executing.

804
00:36:07,760 --> 00:36:14,270
This we've seen in our internal
test really speeds up

805
00:36:14,270 --> 00:36:15,980
initialization of the program.

806
00:36:15,980 --> 00:36:19,320
Is this something that Dartium
supports today, snapshots?

807
00:36:19,320 --> 00:36:21,734
And if not, what's
the plan there?

808
00:36:21,734 --> 00:36:24,670
ANTON MUHIN: Oh, yes, we do some
support snapshots, which

809
00:36:24,670 --> 00:36:27,460
really supports two kinds
of snapshots.

810
00:36:27,460 --> 00:36:30,250
So the first snapshot
allows you--

811
00:36:30,250 --> 00:36:32,860
once again, in Dart everything
is an isolate.

812
00:36:32,860 --> 00:36:36,630
So we have a very fast way to
start an isolate from a

813
00:36:36,630 --> 00:36:40,400
snapshot, which loads all the
libraries you have to use.

814
00:36:40,400 --> 00:36:44,665
And that gives us a quite
reasonable startup time for

815
00:36:44,665 --> 00:36:48,770
the application, and still
want to improve upon it.

816
00:36:48,770 --> 00:36:51,530

817
00:36:51,530 --> 00:36:53,570
Dartium supports now an
interesting feature.

818
00:36:53,570 --> 00:36:57,910
It's only partial application
snapshot, which allows you to

819
00:36:57,910 --> 00:37:00,260
make binary representation of
the application, which it

820
00:37:00,260 --> 00:37:02,580
starts on top of
the libraries.

821
00:37:02,580 --> 00:37:06,160
And we have experimental support
in Dartium for caching

822
00:37:06,160 --> 00:37:08,360
of these partial snapshots.

823
00:37:08,360 --> 00:37:10,554
So roughly, if you have a
huge application, you

824
00:37:10,554 --> 00:37:12,140
would start it once.

825
00:37:12,140 --> 00:37:14,230
Program is able to cache this
binary [UNINTELLIGIBLE]

826
00:37:14,230 --> 00:37:15,280
application.

827
00:37:15,280 --> 00:37:18,200
And next time you will open
this Dart application, it

828
00:37:18,200 --> 00:37:20,330
starts even faster, because
you're starting

829
00:37:20,330 --> 00:37:22,500
directly from snapshots.

830
00:37:22,500 --> 00:37:24,550
This is an experimental feature,
because it might have

831
00:37:24,550 --> 00:37:25,800
security implications.

832
00:37:25,800 --> 00:37:28,120

833
00:37:28,120 --> 00:37:31,150
We had some interesting
discussions about caching

834
00:37:31,150 --> 00:37:33,370
policies of this partial
snapshot, because

835
00:37:33,370 --> 00:37:33,990
[UNINTELLIGIBLE]

836
00:37:33,990 --> 00:37:38,730
normal web case, server can
tell you how long you're

837
00:37:38,730 --> 00:37:40,890
allowed to cache
this resource.

838
00:37:40,890 --> 00:37:42,920
But [UNINTELLIGIBLE] application
consist many

839
00:37:42,920 --> 00:37:50,150
parts, so we need to devise a
reasonable policy for caching

840
00:37:50,150 --> 00:37:51,430
partial snapshots.

841
00:37:51,430 --> 00:37:53,760
But we really hope to have
something like that

842
00:37:53,760 --> 00:37:59,130
eventually, because one of our
goals is absolutely blazing

843
00:37:59,130 --> 00:38:02,345
startup time for your [? old ?]
applications.

844
00:38:02,345 --> 00:38:06,200
SETH LADD: So this application
snapshot experimental feature,

845
00:38:06,200 --> 00:38:09,890
it sounds like that's actually
here today, and we as

846
00:38:09,890 --> 00:38:12,760
developers will be able
experience this much faster

847
00:38:12,760 --> 00:38:14,310
startup time on the
second load.

848
00:38:14,310 --> 00:38:17,260
Is that something we should
explicitly test for you and

849
00:38:17,260 --> 00:38:19,351
send feedback on?

850
00:38:19,351 --> 00:38:21,420
ANTON MUHIN: If you please.

851
00:38:21,420 --> 00:38:25,450
Right now, in the current build
of Dartium, it will only

852
00:38:25,450 --> 00:38:29,730
work for you if you reload the
application in the same tab

853
00:38:29,730 --> 00:38:32,010
due to technical difficulties.

854
00:38:32,010 --> 00:38:34,750
Later, we can expose it,
for example, under the

855
00:38:34,750 --> 00:38:37,734
[UNINTELLIGIBLE] so we can
switch it on and off to

856
00:38:37,734 --> 00:38:40,335
experimental test.
[UNINTELLIGIBLE]

857
00:38:40,335 --> 00:38:42,160
we will just [UNINTELLIGIBLE]

858
00:38:42,160 --> 00:38:45,760

859
00:38:45,760 --> 00:38:48,060
VIJAY MENON: Also today, if
you turn it on, it won't

860
00:38:48,060 --> 00:38:50,850
interact very well with dev
tools, because of course,

861
00:38:50,850 --> 00:38:51,520
there's some tricks.

862
00:38:51,520 --> 00:38:56,000
Dev tools likes to work off the
actual scripts, and the

863
00:38:56,000 --> 00:38:58,190
snapshot actually doesn't
need the scripts.

864
00:38:58,190 --> 00:39:01,790
So that bridge will be closed
too, so there's still some

865
00:39:01,790 --> 00:39:05,540
things to clean up there to make
it really easy to use.

866
00:39:05,540 --> 00:39:09,540
But yeah, an app like Swarm, I'm
pretty excited to see what

867
00:39:09,540 --> 00:39:11,140
we do with snapshot.

868
00:39:11,140 --> 00:39:14,430
As we saw, there were like 60
different files that write.

869
00:39:14,430 --> 00:39:19,785
So being able to have the
snapshot just cache that in

870
00:39:19,785 --> 00:39:23,430
the browser and restart from
that I think will be great as

871
00:39:23,430 --> 00:39:26,940
we deploy these applications.

872
00:39:26,940 --> 00:39:29,340
SETH LADD: I'm really excited
for this feature, actually.

873
00:39:29,340 --> 00:39:33,500
I agree improving startup time
has always been an important

874
00:39:33,500 --> 00:39:35,690
goal of the Dart project, and I
think snapshots are going to

875
00:39:35,690 --> 00:39:37,620
help tremendously here.

876
00:39:37,620 --> 00:39:39,830
VIJAY MENON: To follow up
Anton's point about there

877
00:39:39,830 --> 00:39:41,080
being two levels of snapshot.

878
00:39:41,080 --> 00:39:46,660
So things like dart:dom,
dart:core, dart:html, those

879
00:39:46,660 --> 00:39:49,340
are all part of a snapshot that
you're getting for free.

880
00:39:49,340 --> 00:39:52,520
So we're actually starting
from the snapshot that's

881
00:39:52,520 --> 00:39:54,570
already defined all those things
in there, and that's

882
00:39:54,570 --> 00:39:58,000
why we can have a bigger library
there, which are

883
00:39:58,000 --> 00:40:01,130
library for Dart and
not pay so much for

884
00:40:01,130 --> 00:40:03,900
it at startup time.

885
00:40:03,900 --> 00:40:06,480
SETH LADD: So if I write a
random Dart script-- like you

886
00:40:06,480 --> 00:40:08,440
had the "Hello world"
example there--

887
00:40:08,440 --> 00:40:12,610
and an imported dart:html.

888
00:40:12,610 --> 00:40:14,890
Does that mean when the Dart
virtual machine inside

889
00:40:14,890 --> 00:40:17,600
Dartium, loads up your "Hello
world" simple, three-line

890
00:40:17,600 --> 00:40:19,240
script, it's already
starting from a

891
00:40:19,240 --> 00:40:22,660
snapshotted version of dart:html?

892
00:40:22,660 --> 00:40:24,855
ANTON MUHIN: Yes.

893
00:40:24,855 --> 00:40:26,140
SETH LADD: That's pretty
impressive.

894
00:40:26,140 --> 00:40:28,650

895
00:40:28,650 --> 00:40:31,740
Let's take some questions from
the Google+ stream here.

896
00:40:31,740 --> 00:40:35,750
Alan asks, is there an API
into the operating system

897
00:40:35,750 --> 00:40:39,330
environment settings
from within Dart?

898
00:40:39,330 --> 00:40:44,645
And I can't tell if this is
specific to Dartium or not.

899
00:40:44,645 --> 00:40:47,190
ANTON MUHIN: Exposing API, which
can access operating

900
00:40:47,190 --> 00:40:51,160
system services from the
browser, sounds like

901
00:40:51,160 --> 00:40:52,180
[UNINTELLIGIBLE]

902
00:40:52,180 --> 00:40:54,970
due to various security
considerations.

903
00:40:54,970 --> 00:40:59,140
So we are not aiming to provide
any additional API

904
00:40:59,140 --> 00:41:03,620
than just a typical browser
already has implemented in

905
00:41:03,620 --> 00:41:04,750
JavaScript.

906
00:41:04,750 --> 00:41:08,250
But if you're [UNINTELLIGIBLE]
have a use case, maybe the

907
00:41:08,250 --> 00:41:11,950
better way would be, for
example, to improve on file

908
00:41:11,950 --> 00:41:13,570
API in the browser.

909
00:41:13,570 --> 00:41:16,074

910
00:41:16,074 --> 00:41:16,970
VIJAY MENON: Yeah.

911
00:41:16,970 --> 00:41:20,460
I mean, in terms of the
operating system capabilities

912
00:41:20,460 --> 00:41:22,580
or other environment
capabilities, we're not

913
00:41:22,580 --> 00:41:24,970
looking to add anything new to
Dart that you can't do in

914
00:41:24,970 --> 00:41:27,840
JavaScript.

915
00:41:27,840 --> 00:41:30,690
We really want to get
that from HTML5.

916
00:41:30,690 --> 00:41:33,890
HTML5 is starting to add more
and more cool stuff that lets

917
00:41:33,890 --> 00:41:36,410
you have local storage.

918
00:41:36,410 --> 00:41:38,870
I think particularly for mobile
devices, there's all

919
00:41:38,870 --> 00:41:41,220
kinds of cool stuff
you can get.

920
00:41:41,220 --> 00:41:44,080
And our goal is to really
expose that in Dart,

921
00:41:44,080 --> 00:41:45,980
not drill new holes.

922
00:41:45,980 --> 00:41:49,510
You really want to be careful
about providing access to that

923
00:41:49,510 --> 00:41:51,965
sort of stuff so you can do
it in a very secure way.

924
00:41:51,965 --> 00:41:53,970
SETH LADD: That's an
excellent point.

925
00:41:53,970 --> 00:41:57,110
I think it's important to
reiterate that the Dart inside

926
00:41:57,110 --> 00:41:59,990
the browser effort, we're
following all the lessons

927
00:41:59,990 --> 00:42:02,260
learned, all the best practices,
all the security

928
00:42:02,260 --> 00:42:08,650
reviews, eventually, that the
JavaScript world has pioneered

929
00:42:08,650 --> 00:42:09,910
for many, many years.

930
00:42:09,910 --> 00:42:13,080
That is, we're operating on the
same types of constraints

931
00:42:13,080 --> 00:42:16,190
that any other scripting
language, like JavaScript

932
00:42:16,190 --> 00:42:17,100
inside the browser.

933
00:42:17,100 --> 00:42:20,500
And that's very important
for us to do.

934
00:42:20,500 --> 00:42:23,340
I think to answer Alan's
question, though, from the

935
00:42:23,340 --> 00:42:26,820
server side, Dart does work
on the server as well.

936
00:42:26,820 --> 00:42:28,640
And nothing we're doing with
the language design or

937
00:42:28,640 --> 00:42:31,290
libraries paints us into any
kind of corner for just client

938
00:42:31,290 --> 00:42:33,440
side web apps.

939
00:42:33,440 --> 00:42:36,040
So I believe on the server side,
it would be interesting

940
00:42:36,040 --> 00:42:39,540
to be able to find the system
OS environments.

941
00:42:39,540 --> 00:42:43,490
We already have server side
support for opening socket,

942
00:42:43,490 --> 00:42:46,910
server side support for reading
files off the native

943
00:42:46,910 --> 00:42:48,140
operating system file system.

944
00:42:48,140 --> 00:42:51,500
So Dart is definitely being
designed holistically to be an

945
00:42:51,500 --> 00:42:54,520
end-to-end solution,
server and client.

946
00:42:54,520 --> 00:42:57,490
But these kind of questions
about operating environment

947
00:42:57,490 --> 00:43:00,420
settings, as Vijay and Anton
mentioned, that would really

948
00:43:00,420 --> 00:43:03,010
only apply to running on the
command line over on the

949
00:43:03,010 --> 00:43:04,246
server side.

950
00:43:04,246 --> 00:43:04,840
VIJAY MENON: Yeah.

951
00:43:04,840 --> 00:43:07,210
One thing that's cool about that
is there'll be libraries

952
00:43:07,210 --> 00:43:09,720
that will let you access
that on the server.

953
00:43:09,720 --> 00:43:13,580
So I think dart:io, I haven't
played around with it much,

954
00:43:13,580 --> 00:43:15,460
but that has a lot of the sort
of stuff you'd want on a

955
00:43:15,460 --> 00:43:18,730
server to access the local
file system and such.

956
00:43:18,730 --> 00:43:22,030
And that library will not be
available in the browser,

957
00:43:22,030 --> 00:43:24,700
because we're not going to give
you the ability to just

958
00:43:24,700 --> 00:43:28,480
go mess around with the
user's file system.

959
00:43:28,480 --> 00:43:30,980
SETH LADD: You're operating in
the same kind of sandbox

960
00:43:30,980 --> 00:43:34,650
security environment that any
other JavaScript file would be

961
00:43:34,650 --> 00:43:38,040
running in, which is
very important.

962
00:43:38,040 --> 00:43:41,760
Mark from the Google+ stream
asks, will Dart eventually be

963
00:43:41,760 --> 00:43:44,600
submitted for standardization
by a body outside Google, or

964
00:43:44,600 --> 00:43:46,820
will it continue to be primarily
a Google technology?

965
00:43:46,820 --> 00:43:49,150
I'm interested in Dart, but
not in learning a Google

966
00:43:49,150 --> 00:43:51,290
version of VB scripts.

967
00:43:51,290 --> 00:43:54,560
What's our general
philosophy there?

968
00:43:54,560 --> 00:43:56,340
VIJAY MENON: I don't know
what the timeline for

969
00:43:56,340 --> 00:43:57,850
that is going to be.

970
00:43:57,850 --> 00:44:00,740
I'm not probably the best
person to answer that.

971
00:44:00,740 --> 00:44:02,200
You'd probably give as
good of an answer on

972
00:44:02,200 --> 00:44:04,540
that as I could, Seth.

973
00:44:04,540 --> 00:44:07,640
But I think eventually, sure.

974
00:44:07,640 --> 00:44:09,910
I couldn't really comment
on what the--

975
00:44:09,910 --> 00:44:10,520
SETH LADD: Yeah.

976
00:44:10,520 --> 00:44:14,130
I think that eventually
standardization makes a lot of

977
00:44:14,130 --> 00:44:18,170
sense, especially as we target
Dart for the entire open

978
00:44:18,170 --> 00:44:19,350
modern web.

979
00:44:19,350 --> 00:44:25,980
But we think it's very early to
talk about that, and right

980
00:44:25,980 --> 00:44:31,360
now we just need to get to a
1.0, get to some sort of a

981
00:44:31,360 --> 00:44:33,760
shipable production-ready
version.

982
00:44:33,760 --> 00:44:38,200
And I think only then does it
make sense for us to begin the

983
00:44:38,200 --> 00:44:40,420
standardization process.

984
00:44:40,420 --> 00:44:43,570
I do want to be clear about this
comparison of VB script.

985
00:44:43,570 --> 00:44:47,190
I don't think that's
entirely very fair.

986
00:44:47,190 --> 00:44:52,390
Dart has been open source ever
since our initial technology

987
00:44:52,390 --> 00:44:54,210
preview launch back
in October.

988
00:44:54,210 --> 00:44:58,080
And it has always been
compilable to JavaScript, and

989
00:44:58,080 --> 00:45:00,150
it will always be compilable
to JavaScript.

990
00:45:00,150 --> 00:45:04,560
And so, Dart is very much
aimed, since day one,

991
00:45:04,560 --> 00:45:08,190
explicitly at the entire
open modern web.

992
00:45:08,190 --> 00:45:14,660
So I think it's a way to
encourage developers from all

993
00:45:14,660 --> 00:45:18,660
different app platforms to
develop and deliver fantastic,

994
00:45:18,660 --> 00:45:22,510
complex, engaging apps
for modern web.

995
00:45:22,510 --> 00:45:24,680
And to do that, we'll always
have to compile the

996
00:45:24,680 --> 00:45:25,210
JavaScript.

997
00:45:25,210 --> 00:45:27,290
So I don't think the
comparison of VB

998
00:45:27,290 --> 00:45:28,580
script is very fair.

999
00:45:28,580 --> 00:45:31,410

1000
00:45:31,410 --> 00:45:31,960
Let's see.

1001
00:45:31,960 --> 00:45:35,860
Jay from the Google+ stream
says, regarding check mode,

1002
00:45:35,860 --> 00:45:38,220
has there been any discussion
about using check mode checks

1003
00:45:38,220 --> 00:45:39,830
to report code coverage?

1004
00:45:39,830 --> 00:45:42,450
Since all checks happen at
runtime, they don't do any

1005
00:45:42,450 --> 00:45:43,510
good if they're not being hit.

1006
00:45:43,510 --> 00:45:45,745
Reporting number of checks that
are never executed would

1007
00:45:45,745 --> 00:45:49,830
be a great quantitative
testing tool.

1008
00:45:49,830 --> 00:45:52,640
ANTON MUHIN: We really hope
that Dart will have

1009
00:45:52,640 --> 00:45:55,550
[? great ?] tools eventually
which will make

1010
00:45:55,550 --> 00:45:57,485
developer life easier.

1011
00:45:57,485 --> 00:45:59,010
And we [? could ?]

1012
00:45:59,010 --> 00:46:00,990
have something [UNINTELLIGIBLE]

1013
00:46:00,990 --> 00:46:03,570
as well [UNINTELLIGIBLE]

1014
00:46:03,570 --> 00:46:06,740
which we use currently for
checks, can be used to produce

1015
00:46:06,740 --> 00:46:08,201
[UNINTELLIGIBLE]

1016
00:46:08,201 --> 00:46:12,800
I don't think it will come in
just a couple of weeks, but

1017
00:46:12,800 --> 00:46:15,140
eventually we want to provide
the best development

1018
00:46:15,140 --> 00:46:16,390
experience we can.

1019
00:46:16,390 --> 00:46:19,684

1020
00:46:19,684 --> 00:46:21,440
SETH LADD: So we have about
10 minutes left.

1021
00:46:21,440 --> 00:46:23,740
So if you want to get
your questions in,

1022
00:46:23,740 --> 00:46:25,080
please join to hangout.

1023
00:46:25,080 --> 00:46:27,040
There is room here.

1024
00:46:27,040 --> 00:46:30,280
Or post to the Google+ stream.

1025
00:46:30,280 --> 00:46:33,290
For those who are going to
download Dartium later today

1026
00:46:33,290 --> 00:46:36,860
and start testing this out,
are there any caveats they

1027
00:46:36,860 --> 00:46:39,420
should be aware of other than,
of course, this technology

1028
00:46:39,420 --> 00:46:43,340
preview, and please don't use
it for day-to-day browsing.

1029
00:46:43,340 --> 00:46:46,530
But for instance, does it create
its own profile, or

1030
00:46:46,530 --> 00:46:49,160
does it use the existing profile
of their currently

1031
00:46:49,160 --> 00:46:50,410
installed Chrome or Chromium?

1032
00:46:50,410 --> 00:46:56,046

1033
00:46:56,046 --> 00:46:57,650
VIJAY MENON: You want
to take that, Anton?

1034
00:46:57,650 --> 00:46:59,450
ANTON MUHIN: If you
don't mind.

1035
00:46:59,450 --> 00:47:01,775
I think just to say,
once again, Dartium

1036
00:47:01,775 --> 00:47:03,810
is the project preview.

1037
00:47:03,810 --> 00:47:07,530
So we would really recommend
you to create a separate

1038
00:47:07,530 --> 00:47:10,260
profile for Dartium, because
you probably don't want

1039
00:47:10,260 --> 00:47:13,760
Dartium to mess up with all
your bookmarks and your

1040
00:47:13,760 --> 00:47:15,300
personal stuff [UNINTELLIGIBLE]

1041
00:47:15,300 --> 00:47:15,870
profiles.

1042
00:47:15,870 --> 00:47:20,460
So it's just a sanity measure
to keep your regular Chrome,

1043
00:47:20,460 --> 00:47:22,330
if you have Chrome
as your regular

1044
00:47:22,330 --> 00:47:23,580
browser, and Dartium separate.

1045
00:47:23,580 --> 00:47:27,415

1046
00:47:27,415 --> 00:47:29,660
VIJAY MENON: If you're running
regular Chrome--

1047
00:47:29,660 --> 00:47:31,240
not Chromium, but Chrome--

1048
00:47:31,240 --> 00:47:34,160
alongside Dartium, and Dartium
is the only-- you're not

1049
00:47:34,160 --> 00:47:37,420
running Chromium, it should
just by default have a

1050
00:47:37,420 --> 00:47:38,460
separate profile.

1051
00:47:38,460 --> 00:47:41,450
But if you do use Chromium for
some other reason, you have

1052
00:47:41,450 --> 00:47:43,600
two different Chromium
builds, they will

1053
00:47:43,600 --> 00:47:45,013
trample on each other.

1054
00:47:45,013 --> 00:47:48,720
ANTON MUHIN: And we will provide
guidelines in the

1055
00:47:48,720 --> 00:47:51,360
Dartium documentation
how to use a

1056
00:47:51,360 --> 00:47:54,210
separate profile for you.

1057
00:47:54,210 --> 00:47:55,100
SETH LADD: That's right.

1058
00:47:55,100 --> 00:47:57,300
We'll include in the
documentation we'll release

1059
00:47:57,300 --> 00:48:00,200
later today how to set up your
own profile directory so you

1060
00:48:00,200 --> 00:48:03,215
don't trample on other existing
compound Chromiums.

1061
00:48:03,215 --> 00:48:05,620
That's why it's usually great
for testing, too.

1062
00:48:05,620 --> 00:48:08,890
You can blow away the specific
profile if you need to start

1063
00:48:08,890 --> 00:48:10,635
fresh, and you don't mess
with anything else.

1064
00:48:10,635 --> 00:48:13,780
So, absolutely.

1065
00:48:13,780 --> 00:48:17,600
So let's take another question
here from the G+ stream.

1066
00:48:17,600 --> 00:48:20,150
Are there any difficulties you
face as a developer when you

1067
00:48:20,150 --> 00:48:23,020
develop Dart because it needs
to compile to JavaScript?

1068
00:48:23,020 --> 00:48:25,840
Is there anything that will
become impossible to compile

1069
00:48:25,840 --> 00:48:27,090
the JavaScript?

1070
00:48:27,090 --> 00:48:29,005

1071
00:48:29,005 --> 00:48:30,970
VIJAY MENON: That's a really
good question.

1072
00:48:30,970 --> 00:48:34,080
It's certainly not our intent.

1073
00:48:34,080 --> 00:48:37,910
I mean, as Seth said earlier,
compiling the JavaScript is

1074
00:48:37,910 --> 00:48:42,120
very, very important and
will be important for

1075
00:48:42,120 --> 00:48:43,370
a long, long time.

1076
00:48:43,370 --> 00:48:45,790

1077
00:48:45,790 --> 00:48:50,090
So Dart, I mean, in my view is
one of the reasons why we have

1078
00:48:50,090 --> 00:48:53,680
a new language here, is that we
wanted to create something

1079
00:48:53,680 --> 00:48:57,450
that you could compile pretty
faithfully down to JavaScript,

1080
00:48:57,450 --> 00:49:00,440
but still you gave a better
developer experience.

1081
00:49:00,440 --> 00:49:04,750
So I think for the foreseeable
future, I don't see anything

1082
00:49:04,750 --> 00:49:07,425
where you wouldn't be able
to run it on JavaScript.

1083
00:49:07,425 --> 00:49:11,445
I think down the line, you'll
get benefits running natively

1084
00:49:11,445 --> 00:49:15,860
as Dart because you get better
performance, better startup,

1085
00:49:15,860 --> 00:49:19,290
check mode, stronger
checks, and so on.

1086
00:49:19,290 --> 00:49:24,420
But your apps should run in
JavaScript, absolutely.

1087
00:49:24,420 --> 00:49:27,340
SETH LADD: I should probably
add that through some of my

1088
00:49:27,340 --> 00:49:30,760
experimentation, there are very
corner cases we still

1089
00:49:30,760 --> 00:49:33,540
have to work out to be
totally transparent.

1090
00:49:33,540 --> 00:49:36,890
For instance, Dart, its
integers are arbitrary

1091
00:49:36,890 --> 00:49:39,360
precision, for instance.

1092
00:49:39,360 --> 00:49:41,090
You can just bang on your
keyboard all day for an

1093
00:49:41,090 --> 00:49:43,540
integer, and Dart will go
ahead and suck that in.

1094
00:49:43,540 --> 00:49:46,640
But when you compile that to
JavaScript, JavaScript has

1095
00:49:46,640 --> 00:49:48,940
limits on integer precision.

1096
00:49:48,940 --> 00:49:50,800
So there is a slight
disconnect there.

1097
00:49:50,800 --> 00:49:54,880
There's some open bugs there, if
you're curious about that.

1098
00:49:54,880 --> 00:49:56,790
And so, this is why we launch,
I think, in technology

1099
00:49:56,790 --> 00:49:57,650
preview, too, right?

1100
00:49:57,650 --> 00:50:01,150
We want real developers to test
this out, and help us,

1101
00:50:01,150 --> 00:50:04,820
first, identify these corner
cases, and then help us

1102
00:50:04,820 --> 00:50:07,400
understand what it is that they
want the system to do in

1103
00:50:07,400 --> 00:50:09,460
these kind of cases, as well.

1104
00:50:09,460 --> 00:50:13,970
But generally, as Vijay said,
the intent is to be able to

1105
00:50:13,970 --> 00:50:17,880
compile to logical, same
performance JavaScript, and

1106
00:50:17,880 --> 00:50:20,885
that's a core tenet of the
language, absolutely.

1107
00:50:20,885 --> 00:50:27,430
ANTON MUHIN: And for example, we
have a huge pile of tests,

1108
00:50:27,430 --> 00:50:29,280
and we run both [UNINTELLIGIBLE]

1109
00:50:29,280 --> 00:50:33,550
Dart VM, Dartium and compile
to JavaScript code.

1110
00:50:33,550 --> 00:50:35,990
And we try to minimize the
difference between the results

1111
00:50:35,990 --> 00:50:39,700
[UNINTELLIGIBLE] absolute
possible minimum.

1112
00:50:39,700 --> 00:50:43,540
SETH LADD: So as we wrap
up here, what's

1113
00:50:43,540 --> 00:50:44,640
next for you guys?

1114
00:50:44,640 --> 00:50:46,780
What's the next couple weeks or
months look like for you in

1115
00:50:46,780 --> 00:50:48,030
the Dart team?

1116
00:50:48,030 --> 00:50:51,180

1117
00:50:51,180 --> 00:50:52,230
Vijay?

1118
00:50:52,230 --> 00:50:53,890
VIJAY MENON: Sure.

1119
00:50:53,890 --> 00:50:59,170
Well, we're going to
make things better.

1120
00:50:59,170 --> 00:51:03,540
Dev tools, you're going to be
seeing big changes there over

1121
00:51:03,540 --> 00:51:05,365
the next few days, actually.

1122
00:51:05,365 --> 00:51:08,390
I think Pavel's got some changes
coming in that will

1123
00:51:08,390 --> 00:51:09,980
help stuff.

1124
00:51:09,980 --> 00:51:11,380
Anton said--

1125
00:51:11,380 --> 00:51:13,090
I talked about snapshotting
as something he's been

1126
00:51:13,090 --> 00:51:14,420
working on a lot.

1127
00:51:14,420 --> 00:51:17,430
Isolate APIs.

1128
00:51:17,430 --> 00:51:21,080
Also dart:html is something
under active development as

1129
00:51:21,080 --> 00:51:26,780
well, and basically we're
working to make sure you get

1130
00:51:26,780 --> 00:51:30,650
the same experience on both the
JavaScript path and the

1131
00:51:30,650 --> 00:51:31,410
Dartium path.

1132
00:51:31,410 --> 00:51:34,410
But sometimes one runs ahead
of the other, but we're

1133
00:51:34,410 --> 00:51:37,300
actually using a lot of the same
scripts now to generate

1134
00:51:37,300 --> 00:51:40,520
the implementations for both
to keep those things

1135
00:51:40,520 --> 00:51:41,530
consistent.

1136
00:51:41,530 --> 00:51:44,000
So a lot of improvement
on APIs, a lot of

1137
00:51:44,000 --> 00:51:46,840
improvements on dev tools.

1138
00:51:46,840 --> 00:51:50,540
We're doing a lot of performance
testing right now.

1139
00:51:50,540 --> 00:51:53,510
We just really started
on that.

1140
00:51:53,510 --> 00:51:58,730
So a lot of things that Anton
alluded to the very beginning.

1141
00:51:58,730 --> 00:52:01,380
He did a lot of work on v8,
which is a fantastic

1142
00:52:01,380 --> 00:52:01,940
experience.

1143
00:52:01,940 --> 00:52:04,640
He knows where a lot of
the problem areas are.

1144
00:52:04,640 --> 00:52:07,780
But we're just starting
to benchmark,

1145
00:52:07,780 --> 00:52:09,310
hammering on the DOM.

1146
00:52:09,310 --> 00:52:13,190
And we got a ways to go there,
but we fully intend to make

1147
00:52:13,190 --> 00:52:20,760
that very fast and yet
consistent between Dartium and

1148
00:52:20,760 --> 00:52:24,910
compilation to JavaScript
as well.

1149
00:52:24,910 --> 00:52:26,700
SETH LADD: Anton, anything
to add there?

1150
00:52:26,700 --> 00:52:29,700
What's next for you with Dart?

1151
00:52:29,700 --> 00:52:33,520
ANTON MUHIN: Just one
important thing.

1152
00:52:33,520 --> 00:52:38,310
We are not complete on the API
implementation because in some

1153
00:52:38,310 --> 00:52:41,140
cases we had to take shortcuts
just because we don't have

1154
00:52:41,140 --> 00:52:42,280
enough hands.

1155
00:52:42,280 --> 00:52:45,330
We are going to improve
our [UNINTELLIGIBLE]

1156
00:52:45,330 --> 00:52:49,850
APIs, especially some
[UNINTELLIGIBLE]

1157
00:52:49,850 --> 00:52:51,294
APIs.

1158
00:52:51,294 --> 00:52:54,860
And that would be a constant
goal for us, I think, at least

1159
00:52:54,860 --> 00:52:58,220
for a couple of months
[UNINTELLIGIBLE]

1160
00:52:58,220 --> 00:53:00,240
SETH LADD: I think you bring
up an excellent point.

1161
00:53:00,240 --> 00:53:02,350
A lot of Dart isn't done yet.

1162
00:53:02,350 --> 00:53:03,840
We're still in technology
preview.

1163
00:53:03,840 --> 00:53:06,920
So the main ask for our
developers out there is please

1164
00:53:06,920 --> 00:53:09,680
do try all these different
aspects of the Dart platform.

1165
00:53:09,680 --> 00:53:12,750
The editor, the language, the
libraries, the virtual

1166
00:53:12,750 --> 00:53:15,710
machine, the JavaScript
compiler, and now Dartium.

1167
00:53:15,710 --> 00:53:18,310
And please do join the mailing
list. Please do file new

1168
00:53:18,310 --> 00:53:21,300
issues, dartbug.com.

1169
00:53:21,300 --> 00:53:23,380
We definitely listen to
all this feedback.

1170
00:53:23,380 --> 00:53:27,000
Our team is very well-engaged
and listening to

1171
00:53:27,000 --> 00:53:27,700
what's going on.

1172
00:53:27,700 --> 00:53:31,110
So please do try it all
out, and let us know.

1173
00:53:31,110 --> 00:53:33,580
And it looks like one more
question, because I know this

1174
00:53:33,580 --> 00:53:36,070
comes up a lot, from John.

1175
00:53:36,070 --> 00:53:38,390
So reflection, our mirror-based
reflection API.

1176
00:53:38,390 --> 00:53:40,010
Do we have any ideas?

1177
00:53:40,010 --> 00:53:43,820
Is this weeks, or months,
or years away?

1178
00:53:43,820 --> 00:53:49,370
VIJAY MENON: I don't know,
actually, to be honest. Not

1179
00:53:49,370 --> 00:53:54,180
weeks, but I know it's being
actively worked on.

1180
00:53:54,180 --> 00:53:57,295
I don't know what the timeline
for that coming out is.

1181
00:53:57,295 --> 00:53:59,860
SETH LADD: Yeah, I get the sense
that this is a large

1182
00:53:59,860 --> 00:54:02,240
implementation effort than maybe
some other, just like,

1183
00:54:02,240 --> 00:54:03,380
pure library features.

1184
00:54:03,380 --> 00:54:08,290
And so I do know that it's very,
very close on the radar,

1185
00:54:08,290 --> 00:54:10,290
and there's active discussion
to work on it.

1186
00:54:10,290 --> 00:54:12,810
But yeah, we're not exactly
sure what any kind

1187
00:54:12,810 --> 00:54:13,770
of timeline is there.

1188
00:54:13,770 --> 00:54:18,240
But definitely we'll be
delivering a mirror-based API

1189
00:54:18,240 --> 00:54:21,880
at some point for us
to experiment with.

1190
00:54:21,880 --> 00:54:24,150
Well, I want to thank everybody
for joining us for

1191
00:54:24,150 --> 00:54:26,210
Episode Two of Dartisans.

1192
00:54:26,210 --> 00:54:29,770
We hope to continue these with
your support, so please do

1193
00:54:29,770 --> 00:54:31,460
leave some comments on
what worked and what

1194
00:54:31,460 --> 00:54:33,330
didn't on our G+ stream.

1195
00:54:33,330 --> 00:54:37,050
And as always, join our mailing
list at dartlang.org

1196
00:54:37,050 --> 00:54:39,700
and let us know what's working
for you and what you'd like to

1197
00:54:39,700 --> 00:54:42,330
see from the Dart platform.

1198
00:54:42,330 --> 00:54:44,650
So on behalf of the whole Dart
team, I want to say thank you

1199
00:54:44,650 --> 00:54:45,330
to everyone.

1200
00:54:45,330 --> 00:54:48,430
And Vijay and Anton, thank you
very much for being our

1201
00:54:48,430 --> 00:54:51,730
guests, and congrats on getting
Dartium released.

1202
00:54:51,730 --> 00:54:55,550
That is big, and we'll open that
up for downloads, if all

1203
00:54:55,550 --> 00:54:57,432
goes well, later today.

1204
00:54:57,432 --> 00:54:59,156
VIJAY MENON: Thanks, Seth.

1205
00:54:59,156 --> 00:55:00,235
ANTON MUHIN: Thank you.

1206
00:55:00,235 --> 00:55:00,760
SETH LADD: All right.

1207
00:55:00,760 --> 00:55:01,400
Thanks, everyone.

1208
00:55:01,400 --> 00:55:04,030
We'll see you next time.

1209
00:55:04,030 --> 00:55:05,280
Bye.

1210
00:55:05,280 --> 00:55:08,467

