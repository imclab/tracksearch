1
00:00:03,219 --> 00:00:08,340
Hi, I'm Adam, a researcher working on the
extension system for Google Chrome.

2
00:00:08,340 --> 00:00:13,639
In building the extension system, we've designed
in security from day one. Security has many

3
00:00:13,639 --> 00:00:18,910
facets, but in this video, I'd like to focus
how the extension system makes it easier for

4
00:00:18,910 --> 00:00:22,140
developers to create secure extensions.

5
00:00:22,140 --> 00:00:27,150
The security architecture is based on two
principles: least privilege and privilege

6
00:00:27,150 --> 00:00:30,669
separation.

7
00:00:30,669 --> 00:00:35,010
Extensions get only those privileges requested
in their manifest. For example, the Gmail

8
00:00:35,010 --> 00:00:39,570
Checker extension declares that it wishes
to interact with Gmail. Because it does not

9
00:00:39,570 --> 00:00:44,770
request access to your bank, Gmail Checker
is not granted access to your bank.

10
00:00:44,770 --> 00:00:49,470
Now, least privilege does not protect you
from malicious extensions. If you install

11
00:00:49,470 --> 00:00:53,570
a malicious extension, all bets are off, just
like when you install a malicious program

12
00:00:53,570 --> 00:01:00,210
on your computer. Instead, least privilege
helps if an honest extension has a vulnerability.

13
00:01:00,210 --> 00:01:05,810
If somehow, an extension is compromised, the
attacker's privileges will be limited.

14
00:01:05,810 --> 00:01:09,980
As you develop extensions, you should request
only those privileges your extension actually

15
00:01:09,980 --> 00:01:16,810
needs, reducing your attack surface and helping
protect your users.

16
00:01:16,810 --> 00:01:21,960
In addition to least privilege, the extension
system encourages privilege separation. Instead

17
00:01:21,960 --> 00:01:26,560
of lumping all their code together, developers
divide their extension into two pieces: a

18
00:01:26,560 --> 00:01:29,770
background page, and a content script.

19
00:01:29,770 --> 00:01:34,420
The background page is given the lion's share
of the extension's privileges but is isolated

20
00:01:34,420 --> 00:01:39,320
from direct contact with web pages. On the
other hand, content scripts have direct contact

21
00:01:39,320 --> 00:01:42,799
with web pages, but have fewer privileges.

22
00:01:42,799 --> 00:01:47,770
If a content script is compromised, the attacker
doesn't get all the extension's privileges.

23
00:01:47,770 --> 00:01:52,920
To steal all the privileges, the attacker
has to exploit a second vulnerability, such

24
00:01:52,920 --> 00:01:56,950
as a cross-site scripting vulnerability in
the background page.

25
00:01:56,950 --> 00:02:01,549
We've designed security into the Google Chrome
extension system from day one. Using least

26
00:02:01,549 --> 00:02:05,200
privilege and privilege separation, we've
helped developers reduce the attack surface

27
00:02:05,200 --> 00:02:06,570
of their extensions.

28
00:02:06,570 --> 00:02:12,089
To learn more about Google Chrome's extension
system, visit our website at code.google.com/chrome/extensions

