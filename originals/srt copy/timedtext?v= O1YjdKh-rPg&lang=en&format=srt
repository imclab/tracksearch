1
00:00:00,000 --> 00:00:05,450

2
00:00:05,450 --> 00:00:06,450
PAUL KINLAN: Hi everyone.

3
00:00:06,450 --> 00:00:07,510
I'm Paul Kinlan.

4
00:00:07,510 --> 00:00:10,490
Welcome to our talk today,
called How to Build Apps that

5
00:00:10,490 --> 00:00:11,530
Love Each Other.

6
00:00:11,530 --> 00:00:12,500
JAMES HAWKINS: Hi, I'm James.

7
00:00:12,500 --> 00:00:15,570
I'm the tech lead of the Chrome
team working to bring

8
00:00:15,570 --> 00:00:17,640
Web Intents to the web.

9
00:00:17,640 --> 00:00:18,400
PAUL KINLAN: Cool.

10
00:00:18,400 --> 00:00:20,350
So, before we start, I
just want to ask one

11
00:00:20,350 --> 00:00:21,200
little quick question.

12
00:00:21,200 --> 00:00:22,910
Actually, two questions.

13
00:00:22,910 --> 00:00:25,412
Who has heard of Web Intents?

14
00:00:25,412 --> 00:00:26,125
JAMES HAWKINS: All right.

15
00:00:26,125 --> 00:00:26,795
PAUL KINLAN: Awesome.

16
00:00:26,795 --> 00:00:30,960
Who has was actually built
anything with Web Intents?

17
00:00:30,960 --> 00:00:31,685
JAMES HAWKINS: That's awesome.

18
00:00:31,685 --> 00:00:33,000
PAUL KINLAN: Yeah, two people.

19
00:00:33,000 --> 00:00:34,590
Two or three people, cool.

20
00:00:34,590 --> 00:00:37,440
So, hopefully by the end of this
presentation, you'll all

21
00:00:37,440 --> 00:00:40,650
be able to go away and start
building things with this work

22
00:00:40,650 --> 00:00:42,040
that we call Web Intents.

23
00:00:42,040 --> 00:00:44,320
And today we're going to show
you some awesome stuff.

24
00:00:44,320 --> 00:00:46,560
So, today, before we start,
I'm going to highlight a

25
00:00:46,560 --> 00:00:47,450
couple of problems.

26
00:00:47,450 --> 00:00:50,350
For me, the biggest problem
that we face on the web is

27
00:00:50,350 --> 00:00:53,110
that there's no way for
applications on the web to

28
00:00:53,110 --> 00:00:55,720
understand the functionality
that other applications offer.

29
00:00:55,720 --> 00:00:58,130
And because we can't do this,
we can't do really cool

30
00:00:58,130 --> 00:01:00,990
things, such as offer suggested
services for you to

31
00:01:00,990 --> 00:01:03,520
use when you want to perform
an action on the web.

32
00:01:03,520 --> 00:01:06,200
But it also means our web
applications today, they don't

33
00:01:06,200 --> 00:01:07,140
love each other.

34
00:01:07,140 --> 00:01:09,610
Applications are a lot
like a relationship.

35
00:01:09,610 --> 00:01:11,910
Well, they're not like a lot
like a relationship.

36
00:01:11,910 --> 00:01:14,110
But they're built off the
background of a really strong

37
00:01:14,110 --> 00:01:15,050
communication.

38
00:01:15,050 --> 00:01:18,140
A great relationship is built
off strong communication, and

39
00:01:18,140 --> 00:01:20,700
likewise, web applications
should be able to love each

40
00:01:20,700 --> 00:01:23,030
other through strong
communication.

41
00:01:23,030 --> 00:01:25,220
So let's start with an image.

42
00:01:25,220 --> 00:01:27,670
An image is something that
we manipulate every day.

43
00:01:27,670 --> 00:01:31,590
We do things, we email them,
we edit them, we do crazy

44
00:01:31,590 --> 00:01:33,040
amounts of things with images.

45
00:01:33,040 --> 00:01:35,460
So let's have a go.

46
00:01:35,460 --> 00:01:36,660
JAMES HAWKINS: Hopefully
this looks OK.

47
00:01:36,660 --> 00:01:38,830
PAUL KINLAN: There we are.

48
00:01:38,830 --> 00:01:39,250
Cool.

49
00:01:39,250 --> 00:01:41,420
So that we captured our image,
Right so let's do

50
00:01:41,420 --> 00:01:42,460
some stuff with it.

51
00:01:42,460 --> 00:01:45,140
Well, the first thing that most
people want to do with an

52
00:01:45,140 --> 00:01:47,560
image on the web, you want to
actually bring it in to your

53
00:01:47,560 --> 00:01:48,520
application.

54
00:01:48,520 --> 00:01:51,805
And everyone in this room, if
you're a web developer or a

55
00:01:51,805 --> 00:01:53,780
user, you're probably familiar
with this button.

56
00:01:53,780 --> 00:01:54,840
It's the input box.

57
00:01:54,840 --> 00:01:56,420
It's input type equals file.

58
00:01:56,420 --> 00:01:58,210
And this actually works
really well.

59
00:01:58,210 --> 00:02:00,900
It works really well because
one, it's simple to implement.

60
00:02:00,900 --> 00:02:03,530
But the second reason why it
works quite well is it's

61
00:02:03,530 --> 00:02:05,410
actually pretty easy
to users to use.

62
00:02:05,410 --> 00:02:07,990
They will choose a file, scan
the hard drive, and load it

63
00:02:07,990 --> 00:02:09,740
into their application.

64
00:02:09,740 --> 00:02:12,070
The complexity arises, though,
when you have multiple

65
00:02:12,070 --> 00:02:14,700
applications which all
manipulate images and you want

66
00:02:14,700 --> 00:02:17,070
to bring that data from
one app to another.

67
00:02:17,070 --> 00:02:20,635
So the process of getting, say,
an image into Gmail from,

68
00:02:20,635 --> 00:02:24,380
say, a site like Flickr, is that
you normally have to go

69
00:02:24,380 --> 00:02:26,360
to Flickr, right click
on the image,

70
00:02:26,360 --> 00:02:28,550
download it to your desktop.

71
00:02:28,550 --> 00:02:30,080
Everyone in this room's probably
got a temporary

72
00:02:30,080 --> 00:02:31,990
downloads folder which is
probably a good couple hundred

73
00:02:31,990 --> 00:02:35,760
megabytes in size, thousands
of files inside there.

74
00:02:35,760 --> 00:02:36,190
Anyway.

75
00:02:36,190 --> 00:02:38,290
You've downloaded your file
into this folder.

76
00:02:38,290 --> 00:02:41,030
You then jump back your email
application, click attach.

77
00:02:41,030 --> 00:02:44,120
Try and find the file, because
it's not always in last place

78
00:02:44,120 --> 00:02:45,980
you actually found the file
the previous time around.

79
00:02:45,980 --> 00:02:48,320
And then you bring it back
into your application.

80
00:02:48,320 --> 00:02:50,870
For users, this is it's a bit
of a nightmare, right?

81
00:02:50,870 --> 00:02:54,920
We can't build applications
coherently with this method.

82
00:02:54,920 --> 00:02:57,640
So let's have a look at
another use case.

83
00:02:57,640 --> 00:02:58,840
Edit an image.

84
00:02:58,840 --> 00:03:00,480
It's a very similar process.

85
00:03:00,480 --> 00:03:01,270
You have an application--

86
00:03:01,270 --> 00:03:02,430
this is Psykopaint--

87
00:03:02,430 --> 00:03:04,350
you have an application, you
want to bring data into it.

88
00:03:04,350 --> 00:03:05,690
So it's the same
process again.

89
00:03:05,690 --> 00:03:07,680
You have to load this
application up.

90
00:03:07,680 --> 00:03:09,370
And if it's in another app
already, if it's on Flickr,

91
00:03:09,370 --> 00:03:12,270
you have to download it onto
your desktop, jump into this

92
00:03:12,270 --> 00:03:15,100
app, click Open, bring
it into the app.

93
00:03:15,100 --> 00:03:16,050
Then there's an extra step.

94
00:03:16,050 --> 00:03:19,010
Once you've edited this image,
you have to then go and save

95
00:03:19,010 --> 00:03:19,920
it again to the desktop.

96
00:03:19,920 --> 00:03:21,700
So you've now got two
copies in your

97
00:03:21,700 --> 00:03:23,270
temporary downloads folder.

98
00:03:23,270 --> 00:03:25,900
Jump back your previous app, and
then upload and attach it.

99
00:03:25,900 --> 00:03:27,350
We shouldn't have to face
these problems.

100
00:03:27,350 --> 00:03:33,240
Users shouldn't find
this complexity.

101
00:03:33,240 --> 00:03:36,100
And as developers, we don't have
nice ways of integration.

102
00:03:36,100 --> 00:03:37,910
It's all very manual work.

103
00:03:37,910 --> 00:03:41,370
Some services offer direct
API integrations.

104
00:03:41,370 --> 00:03:43,980
The problem with direct API
integrations is-- we've all

105
00:03:43,980 --> 00:03:45,550
seen this before, OAuth--

106
00:03:45,550 --> 00:03:47,240
all these different types
of complexities with

107
00:03:47,240 --> 00:03:48,970
authentication, server-to-server

108
00:03:48,970 --> 00:03:50,070
communication.

109
00:03:50,070 --> 00:03:52,230
These applications don't work
very well when you're offline

110
00:03:52,230 --> 00:03:54,020
because you need to talk to
a server to give another

111
00:03:54,020 --> 00:03:55,280
application data.

112
00:03:55,280 --> 00:03:58,330
It's horrible for developers and
it's not nice for users.

113
00:03:58,330 --> 00:04:00,330
Likewise, if you have an image,
and you've edited it,

114
00:04:00,330 --> 00:04:02,700
and you want to save it to make
sure it's all backed up.

115
00:04:02,700 --> 00:04:05,010
Well, you normally want to save
it to your desktop or

116
00:04:05,010 --> 00:04:08,090
maybe to your cloud
storage solution.

117
00:04:08,090 --> 00:04:09,980
Right now, if you're developing
something and you

118
00:04:09,980 --> 00:04:12,640
want to save it to, well, in
this case, Drive, it's a

119
00:04:12,640 --> 00:04:14,750
direct API integration that
you have to build.

120
00:04:14,750 --> 00:04:16,339
Which is complex
because there's

121
00:04:16,339 --> 00:04:17,860
authentication protocols.

122
00:04:17,860 --> 00:04:19,690
Once there's authentication
protocols, they're actually

123
00:04:19,690 --> 00:04:23,520
pretty hard to debug because
working the clients is

124
00:04:23,520 --> 00:04:25,400
different to the work that you
do in the server, and it's

125
00:04:25,400 --> 00:04:27,540
really hard to debug those
two types of systems.

126
00:04:27,540 --> 00:04:29,500
And obviously we've got
things like OAuth.

127
00:04:29,500 --> 00:04:32,470
OAuth is relatively easy once
you get the hang of it, but

128
00:04:32,470 --> 00:04:34,230
it's actually complex
to get started.

129
00:04:34,230 --> 00:04:36,880
And we don't want to have to
deal with that on the web.

130
00:04:36,880 --> 00:04:38,370
And then, once you've saved it,
and you're happy with the

131
00:04:38,370 --> 00:04:40,550
fact that you've got a nice back
up, you want to send it

132
00:04:40,550 --> 00:04:40,950
out somewhere.

133
00:04:40,950 --> 00:04:42,940
You want to send your image
to your grandmother.

134
00:04:42,940 --> 00:04:45,130
Now, we face two problems on the
web-- or I think we face

135
00:04:45,130 --> 00:04:46,580
two problems on the
web, at least.

136
00:04:46,580 --> 00:04:48,790
We have a temporary solution, a
solution that already exists

137
00:04:48,790 --> 00:04:49,730
on the web called mail2.

138
00:04:49,730 --> 00:04:50,720
The mail2 scheme.

139
00:04:50,720 --> 00:04:52,920
Now that works quite well, but
when you've got an application

140
00:04:52,920 --> 00:04:56,070
that doesn't know your entire
contact address book or your

141
00:04:56,070 --> 00:04:59,140
social networking, your social
graph, well, your application

142
00:04:59,140 --> 00:05:01,690
won't know the recipients that
you want to send the data to.

143
00:05:01,690 --> 00:05:04,140
Which means, well, how'd you
actually know that you're

144
00:05:04,140 --> 00:05:05,100
going to send something
to your grandmother?

145
00:05:05,100 --> 00:05:06,680
Because the mail2 link
will be blank.

146
00:05:06,680 --> 00:05:08,080
It's pretty complex.

147
00:05:08,080 --> 00:05:10,860
And then the second part this
problem is mail2 works pretty

148
00:05:10,860 --> 00:05:14,570
well if you want to attach a
subject, a title, and some

149
00:05:14,570 --> 00:05:16,490
basic description to an email.

150
00:05:16,490 --> 00:05:18,490
Browsers have got that pretty
much locked down for trying to

151
00:05:18,490 --> 00:05:19,720
do that type of stuff.

152
00:05:19,720 --> 00:05:20,390
But we have an image.

153
00:05:20,390 --> 00:05:21,790
This is a real blob of data.

154
00:05:21,790 --> 00:05:25,010
How do we get our real blob of
data from our site directly

155
00:05:25,010 --> 00:05:26,440
into another application?

156
00:05:26,440 --> 00:05:28,650
We can't do with the
existing protocols.

157
00:05:28,650 --> 00:05:30,630
And then, if you look at the way
that users have to do this

158
00:05:30,630 --> 00:05:33,710
today, well, it's exactly the
same process, the same set of

159
00:05:33,710 --> 00:05:35,520
steps that we saw before.

160
00:05:35,520 --> 00:05:38,580
The user takes their data from
another application, downloads

161
00:05:38,580 --> 00:05:40,830
it into a temporary store,
goes back to this email

162
00:05:40,830 --> 00:05:42,780
application, clicks attach.

163
00:05:42,780 --> 00:05:45,330
It's a really familiar process,
and it's just not

164
00:05:45,330 --> 00:05:46,080
great for users.

165
00:05:46,080 --> 00:05:47,570
And users don't like the app.

166
00:05:47,570 --> 00:05:49,000
They kind of like the apps that
we're going, but we can

167
00:05:49,000 --> 00:05:51,630
make our applications
a lot better.

168
00:05:51,630 --> 00:05:54,760
And then we looked at the idea
of send an email like a

169
00:05:54,760 --> 00:05:56,300
one-to-one communication.

170
00:05:56,300 --> 00:05:57,450
Everyone knows this use case.

171
00:05:57,450 --> 00:06:00,110
The ability to share some piece
of data with multiple

172
00:06:00,110 --> 00:06:01,880
different types of
social networks.

173
00:06:01,880 --> 00:06:05,240
Well, at this mention that
there's at least three hundred

174
00:06:05,240 --> 00:06:07,940
different types of
sharing services.

175
00:06:07,940 --> 00:06:09,550
So what's that mean for you
as a web developer?

176
00:06:09,550 --> 00:06:12,890
Well, you can't feasibly
integrate with all 300

177
00:06:12,890 --> 00:06:14,570
different types of services
so you can use and

178
00:06:14,570 --> 00:06:15,920
aggregate the service.

179
00:06:15,920 --> 00:06:17,700
But the problem is, the way that
these applications are

180
00:06:17,700 --> 00:06:20,600
built, and the way you interact
with these APIs,

181
00:06:20,600 --> 00:06:21,670
there's normally two methods.

182
00:06:21,670 --> 00:06:24,120
There's a widget and a
server-to-server integration.

183
00:06:24,120 --> 00:06:24,910
Widgets are great.

184
00:06:24,910 --> 00:06:26,140
You can just drop
a small piece of

185
00:06:26,140 --> 00:06:27,560
JavaScript on your page.

186
00:06:27,560 --> 00:06:29,750
But the problem that it
introduces is every time you

187
00:06:29,750 --> 00:06:32,310
add an extra widget, your
page load is delayed.

188
00:06:32,310 --> 00:06:34,350
It gets longer and longer
and longer.

189
00:06:34,350 --> 00:06:36,710
And each widget that you put
into your application is a

190
00:06:36,710 --> 00:06:38,440
tight coupling to
that service.

191
00:06:38,440 --> 00:06:41,210
Not great, because you might
have users that don't use the

192
00:06:41,210 --> 00:06:44,060
services that you're offering.

193
00:06:44,060 --> 00:06:46,610
If you have unhappy users, you
might have no users at some

194
00:06:46,610 --> 00:06:48,000
point in the future.

195
00:06:48,000 --> 00:06:50,160
And then the next is
server-to-server integration.

196
00:06:50,160 --> 00:06:52,700
We have these services where
we can send data to another

197
00:06:52,700 --> 00:06:56,570
service just by doing an
OAuth authenticated

198
00:06:56,570 --> 00:06:57,980
request to the server.

199
00:06:57,980 --> 00:06:59,860
The problem with this
is it's relatively

200
00:06:59,860 --> 00:07:01,020
complex to do OAuth.

201
00:07:01,020 --> 00:07:03,310
It's hard to maintain, it's
very hard to debug.

202
00:07:03,310 --> 00:07:05,290
You never actually quite know
if you've got the problem

203
00:07:05,290 --> 00:07:07,420
yourself with the way that
you've done the integration,

204
00:07:07,420 --> 00:07:08,850
or whether it's the other
service so that's got a

205
00:07:08,850 --> 00:07:09,940
temporary problem.

206
00:07:09,940 --> 00:07:11,660
It's just a bit of
a pain to debug.

207
00:07:11,660 --> 00:07:13,810
And, obviously, it requires
an internet connection.

208
00:07:13,810 --> 00:07:16,970
If you want to send a status
update to a social network,

209
00:07:16,970 --> 00:07:18,620
you have to have an internet
connection to be able to

210
00:07:18,620 --> 00:07:22,070
deliver data between these two
apps and two services.

211
00:07:22,070 --> 00:07:23,310
It's not easy, right?

212
00:07:23,310 --> 00:07:24,590
This is me, I'm really
unhappy.

213
00:07:24,590 --> 00:07:26,690
I'm a developer and
I'm also user.

214
00:07:26,690 --> 00:07:28,990
For me, as a developer, I don't
want to have to maintain

215
00:07:28,990 --> 00:07:30,730
all these direct integrations.

216
00:07:30,730 --> 00:07:32,840
If a new service comes out, I
don't want to have to keep

217
00:07:32,840 --> 00:07:36,060
adding more and more and
more integrations.

218
00:07:36,060 --> 00:07:39,480
And, likewise, if a service dies
and no longer exists, I

219
00:07:39,480 --> 00:07:41,030
have to keep track of all
these services that add.

220
00:07:41,030 --> 00:07:43,140
I don't want to have to maintain
and remove all the

221
00:07:43,140 --> 00:07:45,666
services as they come
into life and leave.

222
00:07:45,666 --> 00:07:48,530
And as a user, I want choice.

223
00:07:48,530 --> 00:07:50,760
I want to be able to use the
services I want to for common

224
00:07:50,760 --> 00:07:52,100
actions across the web.

225
00:07:52,100 --> 00:07:54,440
So if I want to share to a
particular social network, I

226
00:07:54,440 --> 00:07:55,400
should be allowed to do that.

227
00:07:55,400 --> 00:07:57,870
If I want to save some data
to my cloud, I should

228
00:07:57,870 --> 00:07:58,440
be able to do that.

229
00:07:58,440 --> 00:08:01,480
And I don't think, to date,
we can easily do that.

230
00:08:01,480 --> 00:08:03,700
So what can we do?

231
00:08:03,700 --> 00:08:05,660
What would it look like if we
could build a solution that

232
00:08:05,660 --> 00:08:06,210
was better?

233
00:08:06,210 --> 00:08:10,180
Well, ideally, it would
be client-side first.

234
00:08:10,180 --> 00:08:11,920
Everyone, probably, in this
room is probably quite

235
00:08:11,920 --> 00:08:12,670
familiar with this.

236
00:08:12,670 --> 00:08:15,640
This isn't the solution, this
is some of the problem.

237
00:08:15,640 --> 00:08:18,140
We have two applications that
live inside the browser.

238
00:08:18,140 --> 00:08:20,360
And to get data from one
application to another

239
00:08:20,360 --> 00:08:22,700
application, we have to send
data from our client

240
00:08:22,700 --> 00:08:24,380
application to our application
server.

241
00:08:24,380 --> 00:08:26,720
The application server has to
communicate with the remote

242
00:08:26,720 --> 00:08:29,890
service server, potentially do
some authentication protocols

243
00:08:29,890 --> 00:08:32,990
and some authentication work to
actually make sure the user

244
00:08:32,990 --> 00:08:35,530
is sending the data
to the service.

245
00:08:35,530 --> 00:08:38,210
And then the user will open up
the other site, which will

246
00:08:38,210 --> 00:08:40,530
then talk to that application
service.

247
00:08:40,530 --> 00:08:41,860
This is actually kind
of brittle, right?

248
00:08:41,860 --> 00:08:44,190
If any one of these points goes
down, we have got two

249
00:08:44,190 --> 00:08:45,990
applications that can't
talk to each other.

250
00:08:45,990 --> 00:08:48,060
It's pretty complex.

251
00:08:48,060 --> 00:08:49,610
So ideally, we have these two

252
00:08:49,610 --> 00:08:51,330
applications inside the browser.

253
00:08:51,330 --> 00:08:53,990
We should be able to open up
one application, open up

254
00:08:53,990 --> 00:08:56,830
another application, then just
deliver data from one app to

255
00:08:56,830 --> 00:08:59,820
the other without having to
go across the internet.

256
00:08:59,820 --> 00:09:01,850
And this is really cool, because
once we can do these

257
00:09:01,850 --> 00:09:04,780
types of things, we can start to
build truly offline-enabled

258
00:09:04,780 --> 00:09:05,780
applications.

259
00:09:05,780 --> 00:09:08,700
So has anyone use Appcache?

260
00:09:08,700 --> 00:09:09,380
A couple of people.

261
00:09:09,380 --> 00:09:11,360
We all know that Appcache is
actually pretty hard to work

262
00:09:11,360 --> 00:09:14,170
with and pretty hard to debug,
pretty hard to maintain.

263
00:09:14,170 --> 00:09:15,240
But it actually starts
to make our

264
00:09:15,240 --> 00:09:17,760
applications available offline.

265
00:09:17,760 --> 00:09:20,050
The problem is, right now if
you want to integrate with

266
00:09:20,050 --> 00:09:24,600
another service, even if that
other service is Appcache

267
00:09:24,600 --> 00:09:27,120
enabled and works offline, you
still need the whole internet

268
00:09:27,120 --> 00:09:29,160
connection to be able to deliver
data to the app.

269
00:09:29,160 --> 00:09:31,790
And what we're saying is, for a
lot of actions such as, say,

270
00:09:31,790 --> 00:09:34,200
editing an image, you shouldn't
have to require on a

271
00:09:34,200 --> 00:09:36,510
whole internet connection just
deliver data between these two

272
00:09:36,510 --> 00:09:37,660
applications.

273
00:09:37,660 --> 00:09:41,370
So, with a solution that we want
to try and propose, it

274
00:09:41,370 --> 00:09:42,690
should work, and it should
enable you to build

275
00:09:42,690 --> 00:09:44,740
applications that
work offline.

276
00:09:44,740 --> 00:09:46,540
And ideally, it should
be loosely coupled.

277
00:09:46,540 --> 00:09:47,980
This is the best image
I could find that

278
00:09:47,980 --> 00:09:50,300
wasn't a class diagram.

279
00:09:50,300 --> 00:09:54,630
The idea is we should be able to
use any particular clients

280
00:09:54,630 --> 00:09:56,630
with any particular service.

281
00:09:56,630 --> 00:09:57,820
And that it should be
down to the user

282
00:09:57,820 --> 00:09:59,320
to use those services.

283
00:09:59,320 --> 00:10:01,840
The user should be able to say,
I'm going to use Google

284
00:10:01,840 --> 00:10:03,770
or Twitter to actually
share some data.

285
00:10:03,770 --> 00:10:06,280
Rather than us, as developers
of the client applications,

286
00:10:06,280 --> 00:10:08,510
enforcing that upon
the user, right?

287
00:10:08,510 --> 00:10:10,030
That's what we want
from a solution.

288
00:10:10,030 --> 00:10:11,850
And, ideally, it should handle
the user's intents.

289
00:10:11,850 --> 00:10:14,350
This is, obviously, the name
of Web Intents, right?

290
00:10:14,350 --> 00:10:17,090
The user should say, I need
to edit an image.

291
00:10:17,090 --> 00:10:19,965
The user has a set task that
they're going to do with

292
00:10:19,965 --> 00:10:21,170
something on the web.

293
00:10:21,170 --> 00:10:22,360
They need to edit an image.

294
00:10:22,360 --> 00:10:24,000
They need to edit an image
with their preferred

295
00:10:24,000 --> 00:10:25,180
application.

296
00:10:25,180 --> 00:10:26,580
They need to share
a link with their

297
00:10:26,580 --> 00:10:27,740
preferred social network.

298
00:10:27,740 --> 00:10:30,030
They need to save a document to
their preferred cloud file

299
00:10:30,030 --> 00:10:30,750
storage solution.

300
00:10:30,750 --> 00:10:33,150
The user always wants to do
something in the browser with

301
00:10:33,150 --> 00:10:35,160
the data that your applications
are producing,

302
00:10:35,160 --> 00:10:36,150
and you should be able
to let them do

303
00:10:36,150 --> 00:10:39,220
that with a good solution.

304
00:10:39,220 --> 00:10:40,620
And ideally it should
be familiar.

305
00:10:40,620 --> 00:10:42,510
It should be familiar to
millions of users.

306
00:10:42,510 --> 00:10:46,050
Millions of users using Android
system are familiar

307
00:10:46,050 --> 00:10:48,490
with the ability to actually
find applications to fulfill

308
00:10:48,490 --> 00:10:51,110
common actions on that device.

309
00:10:51,110 --> 00:10:53,850
And ideally, for developers, the
API should look relatively

310
00:10:53,850 --> 00:10:55,260
similar what--

311
00:10:55,260 --> 00:10:57,450
I don't know how many
developers are--

312
00:10:57,450 --> 00:11:00,380
it should actually look
relatively similar to the APIs

313
00:11:00,380 --> 00:11:03,430
that are offered on the systems
that already exist.

314
00:11:03,430 --> 00:11:05,220
So introducing Web Intents.

315
00:11:05,220 --> 00:11:07,160
Obviously, we've given the name
away up front, about this

316
00:11:07,160 --> 00:11:08,490
is a talk about Web Intents.

317
00:11:08,490 --> 00:11:14,590
But this is our proposed
solution for actually enabling

318
00:11:14,590 --> 00:11:17,440
you to integrate with remote
services any service that you

319
00:11:17,440 --> 00:11:19,370
want to that supports
the APIs.

320
00:11:19,370 --> 00:11:21,390
So what is a Web Intent?

321
00:11:21,390 --> 00:11:22,850
It isn't the next generation of

322
00:11:22,850 --> 00:11:25,740
internet-enabled camping equipment.

323
00:11:25,740 --> 00:11:28,200
I'm really sorry for
that one, guys.

324
00:11:28,200 --> 00:11:31,710
It is a client-side framework
that allows users to use their

325
00:11:31,710 --> 00:11:34,450
preferred applications for
actions on content-types.

326
00:11:34,450 --> 00:11:36,160
The really exciting thing
right now is that we're

327
00:11:36,160 --> 00:11:38,560
actually working with a W3C,
and we're at first public

328
00:11:38,560 --> 00:11:41,700
working draft, which is the
first step to standardization.

329
00:11:41,700 --> 00:11:43,750
We still got quite a way to go,
but we've actually got an

330
00:11:43,750 --> 00:11:45,900
experimental build inside
Chrome, and we're going to

331
00:11:45,900 --> 00:11:47,575
show you that today if you've
not seen it and

332
00:11:47,575 --> 00:11:48,240
already played with it.

333
00:11:48,240 --> 00:11:49,810
And we're going to show you some
of the things that you

334
00:11:49,810 --> 00:11:50,360
can do with that.

335
00:11:50,360 --> 00:11:52,390
So it's pretty cool.

336
00:11:52,390 --> 00:11:54,060
So how does it work?

337
00:11:54,060 --> 00:11:55,190
We'll start with a demo.

338
00:11:55,190 --> 00:11:57,360
But before we jump into the
demo, I want to show you some

339
00:11:57,360 --> 00:11:58,610
of the source code.

340
00:11:58,610 --> 00:12:02,140

341
00:12:02,140 --> 00:12:05,470
So the application that we've
built is roughly about 40

342
00:12:05,470 --> 00:12:09,310
lines of code, and we're going
to have the option to interact

343
00:12:09,310 --> 00:12:11,250
with four different
types of services.

344
00:12:11,250 --> 00:12:13,100
This is a powerful
thing for me.

345
00:12:13,100 --> 00:12:15,030
You don't have to think about
how you're going to integrate

346
00:12:15,030 --> 00:12:17,220
with services to be able
to start talk to them.

347
00:12:17,220 --> 00:12:19,230
If you don't have to think about
that, then you can just

348
00:12:19,230 --> 00:12:21,690
concentrate on the things
that you do best.

349
00:12:21,690 --> 00:12:23,805
So let's just jump back to our
application and show you a

350
00:12:23,805 --> 00:12:25,370
demo in action.

351
00:12:25,370 --> 00:12:27,770
So this is an application we've
built called Imagemator.

352
00:12:27,770 --> 00:12:29,530
It's not an amazingly
complex application.

353
00:12:29,530 --> 00:12:31,210
All it does is allow
you to orchestrate

354
00:12:31,210 --> 00:12:33,200
operations on images.

355
00:12:33,200 --> 00:12:35,430
So the first thing that we need
to do is pick an image.

356
00:12:35,430 --> 00:12:38,260

357
00:12:38,260 --> 00:12:39,950
This is the picker,
the intent picker.

358
00:12:39,950 --> 00:12:41,620
We've got a couple of
services on top.

359
00:12:41,620 --> 00:12:44,210
These are services that we've
installed, and suggestions on

360
00:12:44,210 --> 00:12:44,620
the bottom.

361
00:12:44,620 --> 00:12:47,440
The suggestions come from
the Chrome Web Store.

362
00:12:47,440 --> 00:12:49,180
The really important thing about
this is we don't want

363
00:12:49,180 --> 00:12:52,020
the users to ever be without a
service that can fulfill that

364
00:12:52,020 --> 00:12:56,500
action, which is why the Chrome
Web Store is integrated

365
00:12:56,500 --> 00:12:57,570
into this solution.

366
00:12:57,570 --> 00:13:00,770
So let's choose Cloud
File Picker.

367
00:13:00,770 --> 00:13:03,020
Cloud File Picker is another
application that we've built

368
00:13:03,020 --> 00:13:05,200
as a demo application that
allows us to bring images in

369
00:13:05,200 --> 00:13:06,110
from our Picasa account.

370
00:13:06,110 --> 00:13:08,210
It's pretty cool.

371
00:13:08,210 --> 00:13:11,640
So we've seen Google Glass,
it's pretty cool.

372
00:13:11,640 --> 00:13:13,540
I invented Google Glass
two years ago.

373
00:13:13,540 --> 00:13:16,690

374
00:13:16,690 --> 00:13:17,800
It kind of worked.

375
00:13:17,800 --> 00:13:18,130
Admittedly--

376
00:13:18,130 --> 00:13:20,280
[LAUGHTER]

377
00:13:20,280 --> 00:13:21,300
It kind of worked, right?

378
00:13:21,300 --> 00:13:23,730
The resolution wasn't great.

379
00:13:23,730 --> 00:13:25,360
It wasn't 3D, though, that's
the good thing, right?

380
00:13:25,360 --> 00:13:26,600
JAMES HAWKINS: He's not
lying, this picture is

381
00:13:26,600 --> 00:13:27,560
actually two years old.

382
00:13:27,560 --> 00:13:30,060
So I think he came
up with it first.

383
00:13:30,060 --> 00:13:30,640
PAUL KINLAN: Cool.

384
00:13:30,640 --> 00:13:33,930
So we brought in data from a
remote application into our

385
00:13:33,930 --> 00:13:34,760
application.

386
00:13:34,760 --> 00:13:37,070
Both of our applications, they
don't know about each other,

387
00:13:37,070 --> 00:13:39,070
but they can talk to each other
and work with each other

388
00:13:39,070 --> 00:13:40,140
like they do.

389
00:13:40,140 --> 00:13:41,330
So let's just try
one more thing.

390
00:13:41,330 --> 00:13:43,940
Let's edit the image.

391
00:13:43,940 --> 00:13:46,420
So the important thing to
remember about Intents, for

392
00:13:46,420 --> 00:13:47,750
me, at least--

393
00:13:47,750 --> 00:13:50,690
my favorite part of this-- is we
don't have to build a full

394
00:13:50,690 --> 00:13:51,510
image editing suite.

395
00:13:51,510 --> 00:13:53,770
We can build an application
which just is quite

396
00:13:53,770 --> 00:13:55,840
specialized in one
particular task.

397
00:13:55,840 --> 00:13:58,010
And Mememator is an
example of this.

398
00:13:58,010 --> 00:14:00,900
Mememator is just a little
service that adds funny text

399
00:14:00,900 --> 00:14:01,990
to interesting pictures.

400
00:14:01,990 --> 00:14:03,240
So let's add some
text to this.

401
00:14:03,240 --> 00:14:24,296

402
00:14:24,296 --> 00:14:27,128
JAMES HAWKINS: All right.

403
00:14:27,128 --> 00:14:27,530
[APPLAUSE]

404
00:14:27,530 --> 00:14:28,780
PAUL KINLAN: Thank you.

405
00:14:28,780 --> 00:14:31,080

406
00:14:31,080 --> 00:14:34,670
We didn't actually do that
one in practice.

407
00:14:34,670 --> 00:14:35,280
Cool.

408
00:14:35,280 --> 00:14:36,280
So this is really cool, right?

409
00:14:36,280 --> 00:14:38,270
We've got two different
applications, two remote

410
00:14:38,270 --> 00:14:40,850
services, one client
application, and they've all

411
00:14:40,850 --> 00:14:42,140
been able to talk
to each other.

412
00:14:42,140 --> 00:14:43,460
And yet they don't know
about each other.

413
00:14:43,460 --> 00:14:45,610
They only know about the types
of services that each

414
00:14:45,610 --> 00:14:46,890
application offers.

415
00:14:46,890 --> 00:14:48,140
I think that's pretty
powerful.

416
00:14:48,140 --> 00:14:53,390

417
00:14:53,390 --> 00:14:55,690
So just to briefly go over
how it works again.

418
00:14:55,690 --> 00:14:58,820
We have a client application,
and the user basically asks of

419
00:14:58,820 --> 00:15:01,420
the browser, find me a list of
applications that support the

420
00:15:01,420 --> 00:15:05,500
ability to, say edit an image,
or pick an image in this case.

421
00:15:05,500 --> 00:15:07,410
The browser will resolve the
list of either install

422
00:15:07,410 --> 00:15:09,690
services, offer a list of
suggestions as well,

423
00:15:09,690 --> 00:15:12,520
potentially, and then deliver
the data client-side--

424
00:15:12,520 --> 00:15:16,430
so we're not going through
the internet service--

425
00:15:16,430 --> 00:15:18,430
deliver the data client-side
into the application.

426
00:15:18,430 --> 00:15:21,790
The user will do the work and
then pass the data back again

427
00:15:21,790 --> 00:15:25,360
on the client-side without
having to go through servers,

428
00:15:25,360 --> 00:15:26,930
back into the client
application.

429
00:15:26,930 --> 00:15:31,020
And that's exactly what we've
just seen with Imagemator.

430
00:15:31,020 --> 00:15:31,620
JAMES HAWKINS: So.

431
00:15:31,620 --> 00:15:34,480
By now, you must be thinking
to yourself, wow, this is

432
00:15:34,480 --> 00:15:35,930
really compelling.

433
00:15:35,930 --> 00:15:38,890
I can integrate with another
application and not have to

434
00:15:38,890 --> 00:15:41,860
know what that application
actually is.

435
00:15:41,860 --> 00:15:46,070
So how to integrate your
application with Intents with

436
00:15:46,070 --> 00:15:47,980
some other service?

437
00:15:47,980 --> 00:15:51,340
In Web Intents parlance, the
service is the end point that

438
00:15:51,340 --> 00:15:52,870
provides functionality
that a client

439
00:15:52,870 --> 00:15:55,290
application can request.

440
00:15:55,290 --> 00:15:57,590
So here we have a couple
of services.

441
00:15:57,590 --> 00:16:00,430
We have an image editor that
is exposing the edit

442
00:16:00,430 --> 00:16:01,790
functionality.

443
00:16:01,790 --> 00:16:05,520
We also have a cloud storage
application which is exposing

444
00:16:05,520 --> 00:16:07,340
two functionality
that it can do.

445
00:16:07,340 --> 00:16:12,820
It can save images to the cloud
and it can also allow

446
00:16:12,820 --> 00:16:14,890
clients to pick images
from the storage.

447
00:16:14,890 --> 00:16:17,480

448
00:16:17,480 --> 00:16:19,870
So it's actually really
simple to integrate.

449
00:16:19,870 --> 00:16:21,460
You don't have to
do very much.

450
00:16:21,460 --> 00:16:24,700
First, you have to declare what
your service app can do.

451
00:16:24,700 --> 00:16:26,980
What functionality
do you expose?

452
00:16:26,980 --> 00:16:31,040
We have high-level verbs such
as picking, editing, sharing

453
00:16:31,040 --> 00:16:33,240
that you say, this
is what I can do.

454
00:16:33,240 --> 00:16:35,670
After that, you just
accept the payload

455
00:16:35,670 --> 00:16:36,850
data from the client.

456
00:16:36,850 --> 00:16:39,240
And perhaps do some
manipulation, perform the

457
00:16:39,240 --> 00:16:42,710
function that you said you can
do, and then potentially send

458
00:16:42,710 --> 00:16:45,560
data back to the client.

459
00:16:45,560 --> 00:16:48,340
So as you can see here, we
have two solutions for

460
00:16:48,340 --> 00:16:49,380
integrating with Intents.

461
00:16:49,380 --> 00:16:52,530
The first is what you can
get in the current,

462
00:16:52,530 --> 00:16:54,320
stable version of Chrome.

463
00:16:54,320 --> 00:16:56,770
Right now, Chrome apps can
register that they handle

464
00:16:56,770 --> 00:16:59,160
Intents using their
app manifest.

465
00:16:59,160 --> 00:17:03,290
So we have an Intent section
which you can list of the

466
00:17:03,290 --> 00:17:04,970
different intents that
you can handle.

467
00:17:04,970 --> 00:17:09,460
We have the action of saving,
we can save types of images,

468
00:17:09,460 --> 00:17:11,260
and we've got a couple other
attributes which I'll talk

469
00:17:11,260 --> 00:17:12,339
about later.

470
00:17:12,339 --> 00:17:14,950
One of the cool things that we
can do-- and Paul talked about

471
00:17:14,950 --> 00:17:15,869
this a little bit--

472
00:17:15,869 --> 00:17:19,660
with Chrome app Manifest, is
that we can use the Chrome web

473
00:17:19,660 --> 00:17:23,750
store to sort of curate and
expose these services, these

474
00:17:23,750 --> 00:17:26,520
applications to the browser when
the client requests some

475
00:17:26,520 --> 00:17:27,550
functionality.

476
00:17:27,550 --> 00:17:29,810
So, as we view Save here.

477
00:17:29,810 --> 00:17:33,210
If a client ever says, I need
a save service, we go to the

478
00:17:33,210 --> 00:17:36,690
Chrome Web Store and say, hey,
give us a list of potentially

479
00:17:36,690 --> 00:17:40,470
the high-ranking services that
provide, say, functionality.

480
00:17:40,470 --> 00:17:43,140
And then we can show this to the
user, even if they don't

481
00:17:43,140 --> 00:17:45,080
have these applications
installed.

482
00:17:45,080 --> 00:17:47,110
So it's really good
for discovery for

483
00:17:47,110 --> 00:17:48,950
the user, as well.

484
00:17:48,950 --> 00:17:53,080
But in the web, it's not really
great if only Chrome

485
00:17:53,080 --> 00:17:54,250
Apps can handle Intents.

486
00:17:54,250 --> 00:17:55,940
We want this available
everywhere.

487
00:17:55,940 --> 00:17:58,640
So you'll see at the bottom
here, we've got this new HTML

488
00:17:58,640 --> 00:17:59,760
tag-like thing.

489
00:17:59,760 --> 00:18:01,070
Well, that's exactly
what it is.

490
00:18:01,070 --> 00:18:04,460
This is the Intent tag, which
we've introduced as a proposal

491
00:18:04,460 --> 00:18:08,240
for the addition to HTML, which
will allow all web pages

492
00:18:08,240 --> 00:18:11,430
to register their service,
their page, as a service.

493
00:18:11,430 --> 00:18:14,290

494
00:18:14,290 --> 00:18:16,990
So let's go into a little bit of
detail about the attributes

495
00:18:16,990 --> 00:18:20,880
that you want to be able to
choose for your service.

496
00:18:20,880 --> 00:18:23,890
The first major one is the
action that you can handle.

497
00:18:23,890 --> 00:18:28,320
So you'll notice here that we've
got webintents.org/save.

498
00:18:28,320 --> 00:18:29,720
That's a URL.

499
00:18:29,720 --> 00:18:34,110
To be fair, the spec states that
the action is actually

500
00:18:34,110 --> 00:18:35,120
just a string literal.

501
00:18:35,120 --> 00:18:35,860
It could be any string.

502
00:18:35,860 --> 00:18:38,280
But we feel it's really
important to set precedents

503
00:18:38,280 --> 00:18:40,060
with URLs for a couple
of reasons.

504
00:18:40,060 --> 00:18:42,560
The biggest one is that
documentation.

505
00:18:42,560 --> 00:18:44,600
Paul, thank you.

506
00:18:44,600 --> 00:18:46,990
So, here we have
webintents.org/save.

507
00:18:46,990 --> 00:18:52,720
This site says exactly how you
should call, as a client, this

508
00:18:52,720 --> 00:18:55,940
action, and what you need to do
as a service to implement

509
00:18:55,940 --> 00:18:58,810
this functionality.

510
00:18:58,810 --> 00:19:02,040
It shows the inputs that you may
receive for this section

511
00:19:02,040 --> 00:19:03,650
and outputs as well.

512
00:19:03,650 --> 00:19:07,050
We've also got a nice little
way to demo it here, too.

513
00:19:07,050 --> 00:19:09,080
So we are demo-ing the save.

514
00:19:09,080 --> 00:19:11,650
We have Cloud File
Picker installed.

515
00:19:11,650 --> 00:19:14,430
It's pretty neat.

516
00:19:14,430 --> 00:19:14,650
Yeah.

517
00:19:14,650 --> 00:19:16,830
We have these high-level actions
that we provided on

518
00:19:16,830 --> 00:19:19,080
WebIntents.org.

519
00:19:19,080 --> 00:19:21,860
Things that we think most
applications will want to

520
00:19:21,860 --> 00:19:22,860
integrate with.

521
00:19:22,860 --> 00:19:25,210
But let's say that you have your
own application, and you

522
00:19:25,210 --> 00:19:28,990
have some functionality that's
very compelling that you want

523
00:19:28,990 --> 00:19:30,630
other sites to be able
to use, other clients

524
00:19:30,630 --> 00:19:31,560
to be able to use.

525
00:19:31,560 --> 00:19:33,060
Well, you should be able
to expose that as well.

526
00:19:33,060 --> 00:19:36,630
Let's say that my web
page is example.com.

527
00:19:36,630 --> 00:19:41,160
So I have some functionality,
let's call it transform.

528
00:19:41,160 --> 00:19:45,160
So I want to share this
with the world.

529
00:19:45,160 --> 00:19:48,580
So my action will be
example.com/transform.

530
00:19:48,580 --> 00:19:51,320
Developers can go to that
URL, where you have the

531
00:19:51,320 --> 00:19:53,900
documentation for this action,
the inputs and outputs that

532
00:19:53,900 --> 00:19:57,250
you need, and clients can
integrate with this.

533
00:19:57,250 --> 00:20:00,500
We have a much better world.

534
00:20:00,500 --> 00:20:02,970
The next attribute we'll want
to talk about is the Type.

535
00:20:02,970 --> 00:20:06,970
So the Type is the type of
data that you can handle.

536
00:20:06,970 --> 00:20:09,200
For the Save action, we're
saying we handle

537
00:20:09,200 --> 00:20:11,300
saving types of images.

538
00:20:11,300 --> 00:20:13,500
And I'll go into a little bit of
detail about what the type

539
00:20:13,500 --> 00:20:14,300
actually means.

540
00:20:14,300 --> 00:20:16,150
Here, we have a MIME type.

541
00:20:16,150 --> 00:20:18,640
Images with wild carding,
in fact.

542
00:20:18,640 --> 00:20:20,920
So we're saying we can
handle all images.

543
00:20:20,920 --> 00:20:23,630
But you could also list an
array of MIME types.

544
00:20:23,630 --> 00:20:26,810
So let's say you edit images,
but you don't want to say to

545
00:20:26,810 --> 00:20:30,990
the world, I can handle editing
all types of images,

546
00:20:30,990 --> 00:20:32,580
because there might be some
formats that you don't

547
00:20:32,580 --> 00:20:33,480
actually handle.

548
00:20:33,480 --> 00:20:34,900
So you could specify a list.

549
00:20:34,900 --> 00:20:40,710
Say, image/ping, image/jpg,
and probably image/bitmap,

550
00:20:40,710 --> 00:20:42,456
though I don't know who
would be using that on

551
00:20:42,456 --> 00:20:43,706
the web these days.

552
00:20:43,706 --> 00:20:45,830

553
00:20:45,830 --> 00:20:48,670
Note that, while you can use
MIME types, you can also use

554
00:20:48,670 --> 00:20:50,540
string literals here, too.

555
00:20:50,540 --> 00:20:52,410
I don't know if you've ever
heard of schema.org, but

556
00:20:52,410 --> 00:20:57,360
schema.org is this sort of
next-generation semantic web

557
00:20:57,360 --> 00:20:59,830
where they expose nouns.

558
00:20:59,830 --> 00:21:05,850
Schema.org/imageobject is a
reference for what an image

559
00:21:05,850 --> 00:21:07,250
object might actually contain.

560
00:21:07,250 --> 00:21:08,820
Attributes about images.

561
00:21:08,820 --> 00:21:11,810
So you could say, I don't want
to specify MIME type, I want

562
00:21:11,810 --> 00:21:14,910
to specify schema.org/image.

563
00:21:14,910 --> 00:21:17,540
And then clients and services
will integrate around this

564
00:21:17,540 --> 00:21:18,820
point on schema.org.

565
00:21:18,820 --> 00:21:20,990
It doesn't have to be
schema.org, it could be any

566
00:21:20,990 --> 00:21:21,640
string literal.

567
00:21:21,640 --> 00:21:24,330
But you can see it's really
expandable to whatever you

568
00:21:24,330 --> 00:21:27,810
need to use here.

569
00:21:27,810 --> 00:21:29,300
So these next two attributes
are going to

570
00:21:29,300 --> 00:21:31,650
talk about are optional.

571
00:21:31,650 --> 00:21:34,040
And I'll go into a little bit of
detail about what it means

572
00:21:34,040 --> 00:21:35,530
if you don't actually
specify it.

573
00:21:35,530 --> 00:21:39,150
So href is the page that's
actually going to be invoked

574
00:21:39,150 --> 00:21:42,550
by the browser whenever your
service is invoked.

575
00:21:42,550 --> 00:21:46,500
So for this Save action, we're
saying, don't open my main

576
00:21:46,500 --> 00:21:48,960
page, my index.html,
if you will.

577
00:21:48,960 --> 00:21:52,980
Open my save.html, which is the
page where I have specific

578
00:21:52,980 --> 00:21:55,590
functionality to handle
this service.

579
00:21:55,590 --> 00:21:59,060
So on the Intent tag, it's
important to notice for web

580
00:21:59,060 --> 00:22:04,120
pages that the intent tag will
say, save.html off of your

581
00:22:04,120 --> 00:22:05,200
domain where you're
registered?

582
00:22:05,200 --> 00:22:09,550
So you could have users visit
your main homepage and

583
00:22:09,550 --> 00:22:12,510
register for services at all
these different pages off of

584
00:22:12,510 --> 00:22:13,680
your main site.

585
00:22:13,680 --> 00:22:16,180
It is same origin, for security
reasons, obviously.

586
00:22:16,180 --> 00:22:19,970
So you can't go register for
ABC.com, some service there,

587
00:22:19,970 --> 00:22:21,220
to send them Intent data.

588
00:22:21,220 --> 00:22:23,630

589
00:22:23,630 --> 00:22:25,700
Last attribute we're going to
talk about is disposition.

590
00:22:25,700 --> 00:22:27,800
So currently, we have
two dispositions

591
00:22:27,800 --> 00:22:29,660
that you can specify.

592
00:22:29,660 --> 00:22:32,790
We feel that services know
best how they should be

593
00:22:32,790 --> 00:22:36,210
displayed, whether you want to
take up maximum screen real

594
00:22:36,210 --> 00:22:38,490
estate or you feel
it's good to be--

595
00:22:38,490 --> 00:22:41,710
your UI's very concise and small
and maybe you want to

596
00:22:41,710 --> 00:22:44,230
have reference of the page,
the client page.

597
00:22:44,230 --> 00:22:47,460
So, one of the dispositions
you can use is window.

598
00:22:47,460 --> 00:22:50,090
Window, in the Chrome browser,
at least, opens up your

599
00:22:50,090 --> 00:22:51,860
service in a new tab.

600
00:22:51,860 --> 00:22:54,290
This is really important, like
I said, for when you really

601
00:22:54,290 --> 00:22:55,960
want to maximize screen
real estate.

602
00:22:55,960 --> 00:22:58,510
An image editor, for example,
really should not be

603
00:22:58,510 --> 00:22:59,850
constrained to a small window.

604
00:22:59,850 --> 00:23:02,050
You want to make the
most of that.

605
00:23:02,050 --> 00:23:03,750
We also have the inline
disposition.

606
00:23:03,750 --> 00:23:07,120
And in Chrome, the inline
disposition actually shows up

607
00:23:07,120 --> 00:23:08,160
in the Pick your UI.

608
00:23:08,160 --> 00:23:12,080
So once you select, say, Shorten
with Google, then you

609
00:23:12,080 --> 00:23:15,090
see the service actually show
up inside this picker.

610
00:23:15,090 --> 00:23:19,690
The picker will mold to the
size of the content.

611
00:23:19,690 --> 00:23:21,260
And we think this
is important.

612
00:23:21,260 --> 00:23:24,140
For example, when you need to
have the context of the page

613
00:23:24,140 --> 00:23:24,490
underneath.

614
00:23:24,490 --> 00:23:28,810
For example, if you have a blog
post and you want your

615
00:23:28,810 --> 00:23:33,180
user to share the blog post,
it's probably important when

616
00:23:33,180 --> 00:23:35,580
the user is interacting with the
service, that they can see

617
00:23:35,580 --> 00:23:38,110
the blog post underneath in
order to say, hey, this is a

618
00:23:38,110 --> 00:23:39,490
really cool article.

619
00:23:39,490 --> 00:23:42,020
But please keep in mind that
it's not the client that gets

620
00:23:42,020 --> 00:23:43,740
to say how the services open.

621
00:23:43,740 --> 00:23:46,540
The service is the one that
knows how best to be opened.

622
00:23:46,540 --> 00:23:49,040

623
00:23:49,040 --> 00:23:50,960
So let's go to the
next major step.

624
00:23:50,960 --> 00:23:53,040
Once your service is invoked,
what happens then?

625
00:23:53,040 --> 00:23:57,270
Well, the data is sent on the
window.intent object.

626
00:23:57,270 --> 00:23:59,110
And I'll talk about this here.

627
00:23:59,110 --> 00:24:01,230
You'll notice that we have
webkit prefixing.

628
00:24:01,230 --> 00:24:04,740
As we say often, this is still
an experimental API.

629
00:24:04,740 --> 00:24:06,230
It's still going through
the wringer in the

630
00:24:06,230 --> 00:24:07,870
standardization process.

631
00:24:07,870 --> 00:24:11,820
And we want to make sure that
we're good web citizens.

632
00:24:11,820 --> 00:24:15,200
And so, as we're changing the
API, once we get to a more

633
00:24:15,200 --> 00:24:18,700
stable version, we can drop the
webkit prefix once we have

634
00:24:18,700 --> 00:24:20,940
other browser vendors
implementing this as well.

635
00:24:20,940 --> 00:24:26,460
And this is standard across
APIs that are evolving.

636
00:24:26,460 --> 00:24:29,810
So you'll see here that we're
switching on Action and Type.

637
00:24:29,810 --> 00:24:32,380
Now, if you're a simple service,
and you only register

638
00:24:32,380 --> 00:24:34,660
for one piece of functionality,
one filter as

639
00:24:34,660 --> 00:24:37,200
we call it, then you probably
don't need to do any switching

640
00:24:37,200 --> 00:24:38,140
on the Action and the Type.

641
00:24:38,140 --> 00:24:39,840
You know what data is
coming, you know

642
00:24:39,840 --> 00:24:40,900
what service you doing.

643
00:24:40,900 --> 00:24:43,370
But let's say you're more fully
function service, and

644
00:24:43,370 --> 00:24:45,410
you've registered for
multiple filters,

645
00:24:45,410 --> 00:24:47,210
multiple actions and types.

646
00:24:47,210 --> 00:24:48,660
You're probably going
to want to switch

647
00:24:48,660 --> 00:24:50,920
on how was I invoked?

648
00:24:50,920 --> 00:24:52,720
Which action am I supposed
to be handling?

649
00:24:52,720 --> 00:24:54,780
What's the type of data
that's coming in?

650
00:24:54,780 --> 00:24:57,770
So here, we're saving, and we
know it's a ping, so the

651
00:24:57,770 --> 00:25:01,000
intentobject.data is the actual
data that's sent from

652
00:25:01,000 --> 00:25:02,230
the client.

653
00:25:02,230 --> 00:25:05,860
Let's check out a debugger that
can help us see what data

654
00:25:05,860 --> 00:25:08,090
is being passed back
and forth.

655
00:25:08,090 --> 00:25:10,880
Now this is a nifty little
application that's available

656
00:25:10,880 --> 00:25:12,350
on the Chrome Web Store.

657
00:25:12,350 --> 00:25:16,240
It allows you, whether a service
or client page, to see

658
00:25:16,240 --> 00:25:19,760
what data is sent in from
Intent invocation.

659
00:25:19,760 --> 00:25:23,440
So we see, that when we invoked
this intent on the

660
00:25:23,440 --> 00:25:27,220
page, we use the Save action and
we passed in the type of

661
00:25:27,220 --> 00:25:28,110
URI listing.

662
00:25:28,110 --> 00:25:30,560
And here is the actual data,
which is that link.

663
00:25:30,560 --> 00:25:33,410
It's really nifty to be able to
debug and make sure that,

664
00:25:33,410 --> 00:25:35,560
as a client, you're sending
the right data, and as a

665
00:25:35,560 --> 00:25:37,780
service, if there's something
going on, you're not getting

666
00:25:37,780 --> 00:25:39,520
the right data, you could
say, here's exactly

667
00:25:39,520 --> 00:25:40,730
what's going wrong.

668
00:25:40,730 --> 00:25:41,650
Now this is a Chrome

669
00:25:41,650 --> 00:25:43,080
application, it's pretty nifty.

670
00:25:43,080 --> 00:25:46,680
But long-term, longer down the
road, we'd really like to add

671
00:25:46,680 --> 00:25:48,320
this functionality to
the Web Inspector.

672
00:25:48,320 --> 00:25:49,990
Maybe through an Inspector
extension.

673
00:25:49,990 --> 00:25:52,650

674
00:25:52,650 --> 00:25:55,130
Thank you, Paul.

675
00:25:55,130 --> 00:25:56,810
So we've talked about one
side of the coin.

676
00:25:56,810 --> 00:25:58,320
Let's flip it.

677
00:25:58,320 --> 00:26:02,030
How do you actually invoke
Intents as a client?

678
00:26:02,030 --> 00:26:03,130
It's really simple.

679
00:26:03,130 --> 00:26:06,330
You construct an intent object,
passing in the action

680
00:26:06,330 --> 00:26:09,250
and the type and perhaps the
data that you want to send to

681
00:26:09,250 --> 00:26:12,200
the service, and then you
call startActivity.

682
00:26:12,200 --> 00:26:16,070
That actually invokes the flow
of Intents in the browser.

683
00:26:16,070 --> 00:26:18,620
The picker UI will show up, as
you've seen in a couple times

684
00:26:18,620 --> 00:26:19,740
that we've demoed.

685
00:26:19,740 --> 00:26:23,070
The list of services that match
this filter on action

686
00:26:23,070 --> 00:26:24,370
and type will show up.

687
00:26:24,370 --> 00:26:26,220
And the user gets to
pick their choice.

688
00:26:26,220 --> 00:26:28,070
Which service do they
want to use?

689
00:26:28,070 --> 00:26:31,010

690
00:26:31,010 --> 00:26:31,830
And you're done.

691
00:26:31,830 --> 00:26:32,970
That's all you have
to do as a client.

692
00:26:32,970 --> 00:26:36,190
It's ridiculously easy.

693
00:26:36,190 --> 00:26:38,480
So we talked about one-way
communication.

694
00:26:38,480 --> 00:26:41,700
You send data from the client
to the service.

695
00:26:41,700 --> 00:26:44,480
But we need to be able to
transform data, we need to do

696
00:26:44,480 --> 00:26:46,030
able to send data back.

697
00:26:46,030 --> 00:26:46,810
We can do that.

698
00:26:46,810 --> 00:26:49,160
We can have bi-bidirectional
communication.

699
00:26:49,160 --> 00:26:53,110
So the API has two optional
callbacks, onSuccess being the

700
00:26:53,110 --> 00:26:56,370
most important, which
is your 90% case.

701
00:26:56,370 --> 00:26:58,490
When things go well
with the service.

702
00:26:58,490 --> 00:27:01,790
This is the way the service will
send back data and how

703
00:27:01,790 --> 00:27:05,800
you receive it, the onSuccess
callback back So as a service,

704
00:27:05,800 --> 00:27:08,420
you call the postResult method
on the intent object that you

705
00:27:08,420 --> 00:27:09,250
were sent in.

706
00:27:09,250 --> 00:27:11,020
The intent object
being the link

707
00:27:11,020 --> 00:27:12,530
between you and the client.

708
00:27:12,530 --> 00:27:13,570
And you're probably going
to pass on the

709
00:27:13,570 --> 00:27:16,220
data to this method.

710
00:27:16,220 --> 00:27:17,900
There's also a non-failure
method, in case

711
00:27:17,900 --> 00:27:18,760
something goes wrong.

712
00:27:18,760 --> 00:27:21,950
It could be sent from the
browser, say there was a 404

713
00:27:21,950 --> 00:27:23,370
with the service that
was picked.

714
00:27:23,370 --> 00:27:26,420
Or, it could be sent from the
service in case perhaps the

715
00:27:26,420 --> 00:27:29,240
data you sent from the client
didn't quite lineup, didn't

716
00:27:29,240 --> 00:27:30,970
quite match what
they expected.

717
00:27:30,970 --> 00:27:34,030
I mean, to be fair, we want
this case to never happen.

718
00:27:34,030 --> 00:27:37,100
In well-behaved applications,
there are no failure states.

719
00:27:37,100 --> 00:27:38,580
But you need to be realistic.

720
00:27:38,580 --> 00:27:39,830
There are going to
be failures.

721
00:27:39,830 --> 00:27:42,590

722
00:27:42,590 --> 00:27:43,270
PAUL KINLAN: Cool.

723
00:27:43,270 --> 00:27:47,600
So we went over the
basics of the API.

724
00:27:47,600 --> 00:27:50,240
The ability to start and invoke
and action, and then

725
00:27:50,240 --> 00:27:52,340
the ability to actually respond
to that and deliver

726
00:27:52,340 --> 00:27:54,940
the data to the user in the
format that they want inside

727
00:27:54,940 --> 00:27:56,920
the other application,
and bring it back in.

728
00:27:56,920 --> 00:28:00,210
So let's talk about how we can
build applications that love

729
00:28:00,210 --> 00:28:00,780
each other.

730
00:28:00,780 --> 00:28:03,650
How we can actually take this
basic API that we've just

731
00:28:03,650 --> 00:28:05,910
shown you, and actually solve
the problems that we talked

732
00:28:05,910 --> 00:28:07,970
about at the beginning
of the presentation.

733
00:28:07,970 --> 00:28:09,770
So the first one
is pick, right?

734
00:28:09,770 --> 00:28:13,740
And we have a pick intent,
http://webintents/org/pick.

735
00:28:13,740 --> 00:28:15,320
We try to think of it
as, like, the file

736
00:28:15,320 --> 00:28:16,570
opener to the web.

737
00:28:16,570 --> 00:28:20,100

738
00:28:20,100 --> 00:28:21,550
Normally on desktop
applications, we'll have a

739
00:28:21,550 --> 00:28:24,280
File, Open menu where we'll be
able to scan the hard drive.

740
00:28:24,280 --> 00:28:27,050
We should be able to pull in the
data from any web service

741
00:28:27,050 --> 00:28:29,510
across the web that supports
the pick intent.

742
00:28:29,510 --> 00:28:32,300
So let's have a quick example.

743
00:28:32,300 --> 00:28:33,940
We'll pull in from the webcam.

744
00:28:33,940 --> 00:28:37,150
So we got a little application
called Quicksnapr.

745
00:28:37,150 --> 00:28:41,140
We're going to ask able to
wave, if that's possible.

746
00:28:41,140 --> 00:28:42,290
That's it, cool.

747
00:28:42,290 --> 00:28:43,950
Thank you very much.

748
00:28:43,950 --> 00:28:47,140
And then we click on it,
bring it through.

749
00:28:47,140 --> 00:28:47,850
Cool, right?

750
00:28:47,850 --> 00:28:49,560
My presentation is not
an application.

751
00:28:49,560 --> 00:28:51,760
It shouldn't have to have
complex file open

752
00:28:51,760 --> 00:28:53,650
functionality just to be
able to bring that

753
00:28:53,650 --> 00:28:54,730
data into this app.

754
00:28:54,730 --> 00:28:58,290
And likewise, Quicksnapr, it
shouldn't have to know about

755
00:28:58,290 --> 00:29:00,770
my presentation's integration
with its services.

756
00:29:00,770 --> 00:29:01,950
So we've just brought
the data back in.

757
00:29:01,950 --> 00:29:03,510
It's pretty cool, right?

758
00:29:03,510 --> 00:29:05,140
As you've seen from the code
earlier on in this

759
00:29:05,140 --> 00:29:08,970
presentation, there's three
or four lines of code.

760
00:29:08,970 --> 00:29:11,390
The ability to instantiate a
webkit intent object or an

761
00:29:11,390 --> 00:29:14,920
intent object, the data that
you want to use, the action

762
00:29:14,920 --> 00:29:17,970
type, and then the
startActivity.

763
00:29:17,970 --> 00:29:19,990
The startActivity
has onSuccess.

764
00:29:19,990 --> 00:29:22,840
OnSuccess just basically takes
the data back in and then

765
00:29:22,840 --> 00:29:24,340
attaches it to an image.

766
00:29:24,340 --> 00:29:25,720
And that is pretty
much all it does.

767
00:29:25,720 --> 00:29:27,750
We cache the image for related
use in some of the next

768
00:29:27,750 --> 00:29:29,290
slides, and you'll
see what happens.

769
00:29:29,290 --> 00:29:32,760
But what I what really want to
show you guys is actually this

770
00:29:32,760 --> 00:29:33,650
is the set pattern.

771
00:29:33,650 --> 00:29:35,970
The same pattern across every
single action that we're going

772
00:29:35,970 --> 00:29:36,890
to try and do.

773
00:29:36,890 --> 00:29:39,100
And hopefully this will show
you how simple it is to

774
00:29:39,100 --> 00:29:40,810
integrate with this API.

775
00:29:40,810 --> 00:29:42,230
So we've picked an image.

776
00:29:42,230 --> 00:29:43,120
We need to edit it.

777
00:29:43,120 --> 00:29:45,730
We need to maybe create an
inspirational message for the

778
00:29:45,730 --> 00:29:46,820
rest of the world.

779
00:29:46,820 --> 00:29:49,430
So let's use another demo
application we've made called

780
00:29:49,430 --> 00:29:50,820
Inspirationmator.

781
00:29:50,820 --> 00:29:53,550
And all it does is it creates
those inspirational photos.

782
00:29:53,550 --> 00:29:55,430
It's not very complex.

783
00:29:55,430 --> 00:30:00,010
It doesn't tend to be like
Photoshop or Pixelmator, or

784
00:30:00,010 --> 00:30:01,040
any other type of application.

785
00:30:01,040 --> 00:30:03,755
It just adds inspirational
text to photos.

786
00:30:03,755 --> 00:30:07,430

787
00:30:07,430 --> 00:30:08,680
Cool.

788
00:30:08,680 --> 00:30:13,220

789
00:30:13,220 --> 00:30:14,660
JAMES HAWKINS: All right.

790
00:30:14,660 --> 00:30:17,335
Let's go back up.

791
00:30:17,335 --> 00:30:18,585
PAUL KINLAN: We need to
get off the screen.

792
00:30:18,585 --> 00:30:22,530

793
00:30:22,530 --> 00:30:23,310
Click on it, and then--

794
00:30:23,310 --> 00:30:26,000
Sorry about this, guys.

795
00:30:26,000 --> 00:30:26,828
JAMES HAWKINS: There we go.

796
00:30:26,828 --> 00:30:28,070
PAUL KINLAN: Cool.

797
00:30:28,070 --> 00:30:29,040
So that's pretty cool, right?

798
00:30:29,040 --> 00:30:30,690
We've had two applications
just talk with my

799
00:30:30,690 --> 00:30:31,640
presentation.

800
00:30:31,640 --> 00:30:32,630
That's pretty cool.

801
00:30:32,630 --> 00:30:34,700
And if you look at the code,
it's exactly the same, apart

802
00:30:34,700 --> 00:30:37,040
from, this time, we've change
the action to Edit.

803
00:30:37,040 --> 00:30:38,990
So that means we're going to try
and find applications that

804
00:30:38,990 --> 00:30:41,220
support the ability
to edit images.

805
00:30:41,220 --> 00:30:43,230
And once the browser's found
them, it could be any type of

806
00:30:43,230 --> 00:30:45,490
application, it doesn't have
to be Inspirationmator.

807
00:30:45,490 --> 00:30:47,180
If the user hasn't got it
installed, they're not going

808
00:30:47,180 --> 00:30:49,580
to see that on the list unless
it's one of the suggestions.

809
00:30:49,580 --> 00:30:52,580
But we've managed to tend our
data out, edit it, and then

810
00:30:52,580 --> 00:30:53,980
bring it back into our app.

811
00:30:53,980 --> 00:30:55,190
And again, it's the same code.

812
00:30:55,190 --> 00:30:57,930
We have an onSuccess callback
which takes the image data and

813
00:30:57,930 --> 00:31:01,055
then just attaches
it to this image.

814
00:31:01,055 --> 00:31:03,030
It's pretty cool, right?

815
00:31:03,030 --> 00:31:04,570
So we've edited the data.

816
00:31:04,570 --> 00:31:06,210
We want to make sure
it's all backed up.

817
00:31:06,210 --> 00:31:08,670
So this is the Save intent.

818
00:31:08,670 --> 00:31:10,890
If you look at the code, it's
exactly the same again.

819
00:31:10,890 --> 00:31:12,380
Apart from this time,
we change the action

820
00:31:12,380 --> 00:31:14,070
from Edit to Save.

821
00:31:14,070 --> 00:31:15,800
So we're going to ask the
browser to find a list of

822
00:31:15,800 --> 00:31:18,250
services that support
image saving.

823
00:31:18,250 --> 00:31:20,470
So we're going to save back
out to Cloud File Picker.

824
00:31:20,470 --> 00:31:23,850
So you remember that we pulled
in before, earlier in the

825
00:31:23,850 --> 00:31:26,660
presentation, from my
Picasa account.

826
00:31:26,660 --> 00:31:28,600
Well, we've actually just
saved it back out.

827
00:31:28,600 --> 00:31:32,040
So if we just click View, just
to prove it's saved.

828
00:31:32,040 --> 00:31:33,600
This is just using
the Drive API.

829
00:31:33,600 --> 00:31:35,850
It's just a JavaScript API that
we chose to integrate

830
00:31:35,850 --> 00:31:36,930
with for this demo.

831
00:31:36,930 --> 00:31:38,900
But we've managed to upload
our application into the

832
00:31:38,900 --> 00:31:40,940
user's cloud file storage
solution.

833
00:31:40,940 --> 00:31:43,020
And if we click on it, we should
be able to view it.

834
00:31:43,020 --> 00:31:45,270
And hey, there we are, right?

835
00:31:45,270 --> 00:31:48,540
We've taken our data from one
application, brought into the

836
00:31:48,540 --> 00:31:51,510
presentation, edited it in
another application, and then

837
00:31:51,510 --> 00:31:54,040
saved it out to my preferred
cloud file storage solution.

838
00:31:54,040 --> 00:31:55,290
It's pretty cool.

839
00:31:55,290 --> 00:32:00,330

840
00:32:00,330 --> 00:32:01,800
JAMES HAWKINS: There we go.

841
00:32:01,800 --> 00:32:02,790
PAUL KINLAN: Thank you.

842
00:32:02,790 --> 00:32:04,440
And obviously one of the things
that you want to do is

843
00:32:04,440 --> 00:32:06,730
you want to tell the world how
cool this image is, right?

844
00:32:06,730 --> 00:32:08,350
So we want to share.

845
00:32:08,350 --> 00:32:10,950
Notice this doesn't have
an onSuccess callback.

846
00:32:10,950 --> 00:32:13,450
My ability to share my
data to a service--

847
00:32:13,450 --> 00:32:15,370
I don't need to know that
it's been shared, right?

848
00:32:15,370 --> 00:32:17,820
Sometimes you might want to know
that the action has been

849
00:32:17,820 --> 00:32:20,530
completed successfully, but in
this case, I don't, because I

850
00:32:20,530 --> 00:32:21,740
don't actually need it.

851
00:32:21,740 --> 00:32:23,790
So if we just share this image
out, we'll be able to share it

852
00:32:23,790 --> 00:32:25,840
to a different service.

853
00:32:25,840 --> 00:32:26,710
We'll just share to Imgur.

854
00:32:26,710 --> 00:32:30,690
This is just using an API
integration with Imgur.

855
00:32:30,690 --> 00:32:34,300
It's processing, we've saved,
and if we press the actual

856
00:32:34,300 --> 00:32:38,140
link, we should, in theory, be
able to see it actually has

857
00:32:38,140 --> 00:32:39,650
been push the web, and
we're not just kind

858
00:32:39,650 --> 00:32:41,170
of making this up.

859
00:32:41,170 --> 00:32:41,830
So, OK.

860
00:32:41,830 --> 00:32:43,720
The user interface looks a
little bit hokey at the

861
00:32:43,720 --> 00:32:45,110
moment, a bit crazy.

862
00:32:45,110 --> 00:32:46,260
It's going to change
and improve.

863
00:32:46,260 --> 00:32:47,680
It is an experimental API.

864
00:32:47,680 --> 00:32:51,260
And as we iterate on this user
interface, it's going start to

865
00:32:51,260 --> 00:32:51,970
look really nice.

866
00:32:51,970 --> 00:32:52,750
JAMES HAWKINS: I want
to tell a little

867
00:32:52,750 --> 00:32:55,080
anecdotal story about this.

868
00:32:55,080 --> 00:32:57,810
So, for the longest time, we
couldn't get UX support, And

869
00:32:57,810 --> 00:33:00,450
we were like, huh, what
can we do about this?

870
00:33:00,450 --> 00:33:01,740
Engineer-built UI.

871
00:33:01,740 --> 00:33:03,580
We built this, and then they're
like, oh my God, you

872
00:33:03,580 --> 00:33:04,480
release with this.

873
00:33:04,480 --> 00:33:06,240
Mocks, here you go, you have
all the mocks you need.

874
00:33:06,240 --> 00:33:10,400
So we are actually polishing
up the UI, sanding down the

875
00:33:10,400 --> 00:33:12,170
rough edges, and this is
going to look really

876
00:33:12,170 --> 00:33:15,470
gorgeous really soon now.

877
00:33:15,470 --> 00:33:15,960
PAUL KINLAN: Yeah.

878
00:33:15,960 --> 00:33:17,775
This is a nice demonstration
of an inline intent.

879
00:33:17,775 --> 00:33:20,200
We still have the context of the
page that actually invoked

880
00:33:20,200 --> 00:33:23,460
action behind, but we were able
to manipulate this image

881
00:33:23,460 --> 00:33:24,840
inside this context.

882
00:33:24,840 --> 00:33:27,250
It's pretty cool.

883
00:33:27,250 --> 00:33:28,985
And, obviously, once you shared
it out, you've shared

884
00:33:28,985 --> 00:33:31,640
it out of the world, you
get users viewing.

885
00:33:31,640 --> 00:33:34,670
If a user views a link right
now, they either download the

886
00:33:34,670 --> 00:33:36,550
data or just kind of view
inside the browser.

887
00:33:36,550 --> 00:33:38,200
But what happens if they want
to use their preferred

888
00:33:38,200 --> 00:33:39,400
application?

889
00:33:39,400 --> 00:33:43,500
Right now, we don't have the
ability to say, open this

890
00:33:43,500 --> 00:33:45,160
image with my preferred
application.

891
00:33:45,160 --> 00:33:47,500
But we have got some
experimental support for RSS

892
00:33:47,500 --> 00:33:48,030
and Atom feeds.

893
00:33:48,030 --> 00:33:49,140
So I just want to show
you this, actually.

894
00:33:49,140 --> 00:33:50,700
It's pretty cool.

895
00:33:50,700 --> 00:33:54,430
So we have just a link
that is clicked.

896
00:33:54,430 --> 00:33:55,980
There's no actual API
that's invoked.

897
00:33:55,980 --> 00:33:58,380
The browser's detected that
actually, there's a content

898
00:33:58,380 --> 00:34:00,660
type that I can handle via
the Intent system.

899
00:34:00,660 --> 00:34:01,600
So it opens up the picker.

900
00:34:01,600 --> 00:34:04,110
And we'll choose Feed Intent
Viewer, which is an

901
00:34:04,110 --> 00:34:07,010
application that Mihai Parparita
wrote, which just

902
00:34:07,010 --> 00:34:08,340
off is the same functionality
that you

903
00:34:08,340 --> 00:34:09,630
would expect in Chrome.

904
00:34:09,630 --> 00:34:12,300
Obviously, most users aren't
developers, and they won't use

905
00:34:12,300 --> 00:34:14,040
this extension and
application.

906
00:34:14,040 --> 00:34:15,980
They might use their preferred
feed reader, which is pretty

907
00:34:15,980 --> 00:34:17,230
cool stuff.

908
00:34:17,230 --> 00:34:19,139

909
00:34:19,139 --> 00:34:20,810
And we have some other
examples, as well.

910
00:34:20,810 --> 00:34:23,679
So these are intents that are
actually on the WebIntents.org

911
00:34:23,679 --> 00:34:26,010
domain, and they manage
under that name space.

912
00:34:26,010 --> 00:34:27,090
We have Subscribe.

913
00:34:27,090 --> 00:34:29,639
The idea behind this is, if you
have a URL that you want

914
00:34:29,639 --> 00:34:33,489
to, not view, but subscribe to
regular updates from in your

915
00:34:33,489 --> 00:34:35,880
favorite feed reader, well
that's just a simple action

916
00:34:35,880 --> 00:34:37,830
that says I'm going to subscribe
to this feed.

917
00:34:37,830 --> 00:34:40,179
And then we have another
one for Shorten.

918
00:34:40,179 --> 00:34:42,560
So the idea behind this is you
might have a link or some data

919
00:34:42,560 --> 00:34:43,739
you want to compress.

920
00:34:43,739 --> 00:34:44,600
In this case it's a link.

921
00:34:44,600 --> 00:34:46,870
And we're going to shorten
it with the Google API.

922
00:34:46,870 --> 00:34:48,630
It's pretty simple.

923
00:34:48,630 --> 00:34:50,800
This doesn't look sexy because,
again, this is my own

924
00:34:50,800 --> 00:34:51,739
demonstration.

925
00:34:51,739 --> 00:34:54,870
But we've taken our data from
one application, sent it using

926
00:34:54,870 --> 00:34:59,050
the Google API, JSON API that
you can interact with, and

927
00:34:59,050 --> 00:34:59,770
saved it in this page.

928
00:34:59,770 --> 00:35:02,220
And obviously we click Return,
we should be able to see the

929
00:35:02,220 --> 00:35:03,370
data come back in.

930
00:35:03,370 --> 00:35:05,960
So this demonstrates, even with
the inline context, you

931
00:35:05,960 --> 00:35:08,780
can pass data in, manipulate it,
and bring it back out to

932
00:35:08,780 --> 00:35:09,900
you application.

933
00:35:09,900 --> 00:35:14,050
It's pretty cool, I think it's
pretty powerful stuff as well.

934
00:35:14,050 --> 00:35:15,900
JAMES HAWKINS: So far we've
talked about a lot of

935
00:35:15,900 --> 00:35:17,250
high-level integrations.

936
00:35:17,250 --> 00:35:20,160
We've got the input and output
of data going on.

937
00:35:20,160 --> 00:35:22,320
But there's more advanced

938
00:35:22,320 --> 00:35:25,680
communication we could be doing.

939
00:35:25,680 --> 00:35:28,330
Let's say that you're a
photo storage site.

940
00:35:28,330 --> 00:35:31,880
You have users who have very
large raw photos, perhaps 50

941
00:35:31,880 --> 00:35:35,590
megabytes, and your site
does not have editing

942
00:35:35,590 --> 00:35:36,380
functionality.

943
00:35:36,380 --> 00:35:38,430
Which is fine, because
we have Intents.

944
00:35:38,430 --> 00:35:40,990
There are services out there
that will allow your user to

945
00:35:40,990 --> 00:35:44,190
edit the image and pass back
the manipulated bits.

946
00:35:44,190 --> 00:35:47,940
But what we have to do, we have
this blob, and that's

947
00:35:47,940 --> 00:35:48,760
going to be copied.

948
00:35:48,760 --> 00:35:51,790
It's 50 megabytes of data, it's
going to be copied, even

949
00:35:51,790 --> 00:35:54,240
client-side just to the other
service so that they can have

950
00:35:54,240 --> 00:35:55,110
the bits as well.

951
00:35:55,110 --> 00:35:55,890
This is not cool.

952
00:35:55,890 --> 00:35:59,190
Now we have a slow copy, a
slow synchronous copy.

953
00:35:59,190 --> 00:36:01,400
We have a service and a client
that both have a

954
00:36:01,400 --> 00:36:02,930
copy of the same data.

955
00:36:02,930 --> 00:36:04,200
We want to solve this problem.

956
00:36:04,200 --> 00:36:07,020
So we can which transferables.

957
00:36:07,020 --> 00:36:09,680
We can transfer this blob.

958
00:36:09,680 --> 00:36:12,430
What transferables allows you
to do is say, I have a large

959
00:36:12,430 --> 00:36:13,410
set of data.

960
00:36:13,410 --> 00:36:14,850
Just pass a reference.

961
00:36:14,850 --> 00:36:16,780
We don't need to pass the
entire set of data.

962
00:36:16,780 --> 00:36:19,560
The browser has a copy of the
data, just send a pointer to

963
00:36:19,560 --> 00:36:21,470
it and say, this is where
your data is at.

964
00:36:21,470 --> 00:36:24,410
The service that's editing
the image can perform the

965
00:36:24,410 --> 00:36:27,680
manipulation on the bits, and
then return the result

966
00:36:27,680 --> 00:36:30,400
transferred once again back to
the client, and the client has

967
00:36:30,400 --> 00:36:32,200
the edited data.

968
00:36:32,200 --> 00:36:34,300
No copying whatsoever,
just transferred.

969
00:36:34,300 --> 00:36:37,180
Very fast.

970
00:36:37,180 --> 00:36:39,880
Another important advancing you
can do with Intents are

971
00:36:39,880 --> 00:36:41,220
explicit intent.

972
00:36:41,220 --> 00:36:44,910
So your application may be
very well componentized.

973
00:36:44,910 --> 00:36:46,850
You've got little bits of
functionality here.

974
00:36:46,850 --> 00:36:53,830
Say, an email application has
composing emails, it has--

975
00:36:53,830 --> 00:36:57,090
what else do we have, Paul,
in email applications?

976
00:36:57,090 --> 00:36:57,890
Reading emails.

977
00:36:57,890 --> 00:36:59,435
You've got a reading
email view.

978
00:36:59,435 --> 00:36:59,710
PAUL KINLAN: Download.

979
00:36:59,710 --> 00:36:59,930
Save.

980
00:36:59,930 --> 00:37:01,620
JAMES HAWKINS: You've
got the inbox view.

981
00:37:01,620 --> 00:37:04,170
And some of these things could
be shared with other

982
00:37:04,170 --> 00:37:06,560
applications, such as
composing an email.

983
00:37:06,560 --> 00:37:09,040
That could be a form of
sharing, if you will.

984
00:37:09,040 --> 00:37:11,940
So you have registered for
Intents that you are a service

985
00:37:11,940 --> 00:37:16,710
that handles sharing with your
Compose functionality.

986
00:37:16,710 --> 00:37:20,460
But you can also call yourself
this way with the Intents API.

987
00:37:20,460 --> 00:37:24,710
You could say, example.com, say,
which is my own service,

988
00:37:24,710 --> 00:37:26,430
and call into your
own components

989
00:37:26,430 --> 00:37:27,780
using the Intents API.

990
00:37:27,780 --> 00:37:31,010

991
00:37:31,010 --> 00:37:34,100
So let's say you're a client,
and you have some very,

992
00:37:34,100 --> 00:37:37,760
perhaps, obscure action that
you need performed on your

993
00:37:37,760 --> 00:37:41,150
data, or that you want the user
to be able to select.

994
00:37:41,150 --> 00:37:43,910
But you don't want to have a
situation where the picker

995
00:37:43,910 --> 00:37:45,010
shows up as empty.

996
00:37:45,010 --> 00:37:48,200
Let's say we're in a world where
web pages can register

997
00:37:48,200 --> 00:37:49,060
for Intents.

998
00:37:49,060 --> 00:37:51,480
There are no Chrome applications
that can handle

999
00:37:51,480 --> 00:37:52,760
this action.

1000
00:37:52,760 --> 00:37:55,580
You want to make sure that the
services that you know about

1001
00:37:55,580 --> 00:37:58,800
that can handle this action
are available to the user.

1002
00:37:58,800 --> 00:38:03,290
So we have suggestions, which
allow you to say, I know

1003
00:38:03,290 --> 00:38:05,170
example.com and another example

1004
00:38:05,170 --> 00:38:06,510
can handle this action.

1005
00:38:06,510 --> 00:38:09,420
So pass those in and show them
to the user to give them a

1006
00:38:09,420 --> 00:38:11,740
choice to select
these as well.

1007
00:38:11,740 --> 00:38:14,700
The alternative solution to the
problem of having an empty

1008
00:38:14,700 --> 00:38:18,980
picker, which is a horrible UX
experience for the user, is

1009
00:38:18,980 --> 00:38:22,040
having a way to say, is there
anything in the picker?

1010
00:38:22,040 --> 00:38:23,730
Is anything going to show up?

1011
00:38:23,730 --> 00:38:26,110
Are there services registered
that handle this action?

1012
00:38:26,110 --> 00:38:28,270
That's a no-no on the web,
because that allows

1013
00:38:28,270 --> 00:38:29,310
fingerprinting the user.

1014
00:38:29,310 --> 00:38:31,520
We didn't want to introduce
this to the web.

1015
00:38:31,520 --> 00:38:35,760
So we have suggestions here
for that use case.

1016
00:38:35,760 --> 00:38:39,430
So do for apps what links
did for the web.

1017
00:38:39,430 --> 00:38:40,140
Greg Billock said that.

1018
00:38:40,140 --> 00:38:40,960
Who's Greg Billock?

1019
00:38:40,960 --> 00:38:41,390
I know.

1020
00:38:41,390 --> 00:38:42,340
Now you're asking her.

1021
00:38:42,340 --> 00:38:44,360
Greg Billock is one of the lead
engineers on Intents.

1022
00:38:44,360 --> 00:38:45,500
He's right here in
the front row.

1023
00:38:45,500 --> 00:38:46,390
Yeah.

1024
00:38:46,390 --> 00:38:48,580
He's going to be doing a code
lab this afternoon, with

1025
00:38:48,580 --> 00:38:51,760
Rachel as well, which'll
be very interesting.

1026
00:38:51,760 --> 00:38:55,110
But what's important to think
about here is that links are a

1027
00:38:55,110 --> 00:38:56,810
one-to-one communication.

1028
00:38:56,810 --> 00:38:58,690
And that's what the
web is today.

1029
00:38:58,690 --> 00:39:02,040
Web Intents allow scaling to the
size of the web, where you

1030
00:39:02,040 --> 00:39:05,960
have one to "n." Your client
to many services.

1031
00:39:05,960 --> 00:39:09,570
And the most important thing
is that those "n" services

1032
00:39:09,570 --> 00:39:12,870
that can be chosen are
picked by the user.

1033
00:39:12,870 --> 00:39:14,990
They say, I like this site.

1034
00:39:14,990 --> 00:39:16,010
I like this service.

1035
00:39:16,010 --> 00:39:17,730
And I don't want to deal
with anything else.

1036
00:39:17,730 --> 00:39:20,180
There are 300 sharing
services out there.

1037
00:39:20,180 --> 00:39:22,400
Probably more that we don't
even know about.

1038
00:39:22,400 --> 00:39:24,580
But the user only cares
about three of them.

1039
00:39:24,580 --> 00:39:26,830
Only show them the services
they care about.

1040
00:39:26,830 --> 00:39:29,380
And Intents lets us do this.

1041
00:39:29,380 --> 00:39:31,760
It's also extremely
easy to use.

1042
00:39:31,760 --> 00:39:34,510
I feel like we've been showing
the exact same code for all of

1043
00:39:34,510 --> 00:39:36,830
these slides, almost
as filler, right?

1044
00:39:36,830 --> 00:39:39,150
But it's to say, it's
so easy to use.

1045
00:39:39,150 --> 00:39:43,520
It requires very little cost for
developers to integrate,

1046
00:39:43,520 --> 00:39:46,230
both on the client side
and as a service.

1047
00:39:46,230 --> 00:39:48,640
This is very important
for integration.

1048
00:39:48,640 --> 00:39:50,780
We want this ecosystem
to build up and to be

1049
00:39:50,780 --> 00:39:52,030
useful for the user.

1050
00:39:52,030 --> 00:39:54,810

1051
00:39:54,810 --> 00:39:56,260
PAUL KINLAN: So we're pretty
much finished now.

1052
00:39:56,260 --> 00:39:58,430
We do have some more
information, though.

1053
00:39:58,430 --> 00:40:00,400
So we have a selection
of links.

1054
00:40:00,400 --> 00:40:03,440
We have the W3C specification,
which is, like we said, in

1055
00:40:03,440 --> 00:40:05,330
first public working draft
at the moment.

1056
00:40:05,330 --> 00:40:06,710
You can go in there, if you
really want to know the

1057
00:40:06,710 --> 00:40:09,210
nitty-gritty about the API,
you can go there and

1058
00:40:09,210 --> 00:40:11,150
understand everything
that's happening.

1059
00:40:11,150 --> 00:40:13,280
We also have some high-level
documentation.

1060
00:40:13,280 --> 00:40:15,530
That's the whole point of
WebIntents.og and all the

1061
00:40:15,530 --> 00:40:18,140
actions underneath that, is
that we can provide more

1062
00:40:18,140 --> 00:40:20,030
developer-friendly documentation
about how you're

1063
00:40:20,030 --> 00:40:22,730
supposed to interact with these
services, and examples,

1064
00:40:22,730 --> 00:40:24,830
demos, and a whole lot
of other things.

1065
00:40:24,830 --> 00:40:27,940
We also have a Google+
Web Intense account.

1066
00:40:27,940 --> 00:40:28,950
So it's +Web Intents.

1067
00:40:28,950 --> 00:40:30,780
If you just want to follow it,
we'll be doing updates.

1068
00:40:30,780 --> 00:40:33,660
We'll be sharing these slides
at the end, as well.

1069
00:40:33,660 --> 00:40:36,360
But also, if we find any great
applications, tutorials, and

1070
00:40:36,360 --> 00:40:37,840
articles, we'll share that
through there as well.

1071
00:40:37,840 --> 00:40:39,770
Because we want you, as
developers, to be able to

1072
00:40:39,770 --> 00:40:41,990
understand what the rest of
the ecosystem is actually

1073
00:40:41,990 --> 00:40:44,200
building and doing through
this system.

1074
00:40:44,200 --> 00:40:46,310
Likewise, there's a high-level
discussion group.

1075
00:40:46,310 --> 00:40:51,250
It's not the specification
discussion group, if the

1076
00:40:51,250 --> 00:40:52,830
application developers
discussion group.

1077
00:40:52,830 --> 00:40:55,970
So if you want to know how to
integrate with Save, maybe to

1078
00:40:55,970 --> 00:40:58,130
save a Word document or
something similar, and you're

1079
00:40:58,130 --> 00:40:59,750
having troubles, and you want
to find out whether other

1080
00:40:59,750 --> 00:41:01,820
developers are doing something
similar, that's

1081
00:41:01,820 --> 00:41:02,620
the place to go.

1082
00:41:02,620 --> 00:41:05,510
Because that'll be application
developers inside that space.

1083
00:41:05,510 --> 00:41:07,460
And likewise, with every single
demo that we've seen

1084
00:41:07,460 --> 00:41:10,340
today, they're all open-source
and available on github.com

1085
00:41:10,340 --> 00:41:14,150
under /PaulKinlan/WebIntents,
so you can go and play.

1086
00:41:14,150 --> 00:41:15,020
We do have a code lab.

1087
00:41:15,020 --> 00:41:16,550
So I actually do want
to ask one question.

1088
00:41:16,550 --> 00:41:19,040
Is everyone excited
about the API?

1089
00:41:19,040 --> 00:41:19,425
[APPLAUSE]

1090
00:41:19,425 --> 00:41:21,180
JAMES HAWKINS: All
right, Sweet.

1091
00:41:21,180 --> 00:41:22,620
PAUL KINLAN: Cool.

1092
00:41:22,620 --> 00:41:23,300
Thank you.

1093
00:41:23,300 --> 00:41:25,570
So, we do have the code lab,
as James said before.

1094
00:41:25,570 --> 00:41:31,820
It's 1:45 to 3:45, code lab room
one, where Rachel Blum

1095
00:41:31,820 --> 00:41:33,880
and Greg Billock will actually
take you through the API if

1096
00:41:33,880 --> 00:41:35,340
you haven't got an
application.

1097
00:41:35,340 --> 00:41:37,600
However, if you do have web
applications that you want to

1098
00:41:37,600 --> 00:41:39,890
integrate with Intents, come
and speak to us, and we'll

1099
00:41:39,890 --> 00:41:42,000
show you how we think you should
integrate that into the

1100
00:41:42,000 --> 00:41:42,900
Intents system.

1101
00:41:42,900 --> 00:41:45,230
So we want to get this really
cool ecosystem going, and

1102
00:41:45,230 --> 00:41:47,210
we're there to help you guys.

1103
00:41:47,210 --> 00:41:49,950
We've got a whole lot of other
technical assistants.

1104
00:41:49,950 --> 00:41:53,315
And just before I finish, this
is a family thing for me.

1105
00:41:53,315 --> 00:41:54,620
It's my son's birthday today.

1106
00:41:54,620 --> 00:41:56,970
So I'd just like to say, happy
birthday Benjamin!

1107
00:41:56,970 --> 00:42:00,090
Sorry I couldn't be there,
I'll be there later.

1108
00:42:00,090 --> 00:42:02,536
And everyone's going to
sing Happy Birthday.

1109
00:42:02,536 --> 00:42:03,940
No?

1110
00:42:03,940 --> 00:42:05,790
OK, maybe later.

1111
00:42:05,790 --> 00:42:08,860
So anyway, thank you.

1112
00:42:08,860 --> 00:42:12,620
So we'd like to go forth
and intentify.

1113
00:42:12,620 --> 00:42:14,980
That's my joke, and I'm
very sorry for this.

1114
00:42:14,980 --> 00:42:17,090
Likewise, we have the Web
Intents Google+ account.

1115
00:42:17,090 --> 00:42:19,880
We are both on Google+ as
well, under our names.

1116
00:42:19,880 --> 00:42:22,540
If you have any questions,
comments, or feedback, we'd

1117
00:42:22,540 --> 00:42:23,950
just love to get as much
as you want now.

1118
00:42:23,950 --> 00:42:26,860
Either here, outside in the
hallway, or we'll be in the

1119
00:42:26,860 --> 00:42:29,370
office hours area as well
for a couple of hours.

1120
00:42:29,370 --> 00:42:30,620
Thank you very much.

1121
00:42:30,620 --> 00:42:36,110

1122
00:42:36,110 --> 00:42:37,365
JAMES HAWKINS: And we are
open for questions.

1123
00:42:37,365 --> 00:42:42,650

1124
00:42:42,650 --> 00:42:45,710
AUDIENCE: Is there a way to
whitelist or blacklist the

1125
00:42:45,710 --> 00:42:47,760
items that show up?

1126
00:42:47,760 --> 00:42:49,880
We make medical software,
and so, in the US, there

1127
00:42:49,880 --> 00:42:51,310
regulations about privacy.

1128
00:42:51,310 --> 00:42:56,180
So we couldn't just open it up
for any application to share.

1129
00:42:56,180 --> 00:42:58,710
But there are unknown number
of ones that would be

1130
00:42:58,710 --> 00:43:00,612
acceptable.

1131
00:43:00,612 --> 00:43:00,950
PAUL KINLAN: Yeah.

1132
00:43:00,950 --> 00:43:02,940
Not actually directly
inside Chrome or

1133
00:43:02,940 --> 00:43:05,400
the Chrome Web Store.

1134
00:43:05,400 --> 00:43:08,730
The actual list, the main list
that you see, are only

1135
00:43:08,730 --> 00:43:10,860
applications that you've
directly installed.

1136
00:43:10,860 --> 00:43:12,490
So we don't have a policy
at the moment inside

1137
00:43:12,490 --> 00:43:13,680
Chrome for Chrome OS.

1138
00:43:13,680 --> 00:43:15,170
JAMES HAWKINS: So you
could use explicit

1139
00:43:15,170 --> 00:43:16,200
intents for that purpose.

1140
00:43:16,200 --> 00:43:19,740
If you know the list in advance,
you can make use of

1141
00:43:19,740 --> 00:43:23,150
the Intents API in order to call
them directly, especially

1142
00:43:23,150 --> 00:43:24,330
if that list is small.

1143
00:43:24,330 --> 00:43:25,648
And suggestions as
well, right?

1144
00:43:25,648 --> 00:43:28,576

1145
00:43:28,576 --> 00:43:29,560
AUDIENCE: Hi.

1146
00:43:29,560 --> 00:43:30,550
One thing.

1147
00:43:30,550 --> 00:43:34,470
The list of intents that you
could call was basically the

1148
00:43:34,470 --> 00:43:36,440
list of applications that you
had installed that replied to

1149
00:43:36,440 --> 00:43:36,920
those intents.

1150
00:43:36,920 --> 00:43:39,650
But how would that go
for web intents?

1151
00:43:39,650 --> 00:43:41,650
For intents that are
on the website?

1152
00:43:41,650 --> 00:43:43,830
Is there some form of discovery,
like the sites you

1153
00:43:43,830 --> 00:43:44,870
visited that--

1154
00:43:44,870 --> 00:43:45,250
JAMES HAWKINS: Exactly.

1155
00:43:45,250 --> 00:43:46,390
That's exactly what it is.

1156
00:43:46,390 --> 00:43:49,690
So we feel that the user
visiting a site is a very

1157
00:43:49,690 --> 00:43:51,090
strong signal.

1158
00:43:51,090 --> 00:43:53,430
One, of many, that they
want to have this

1159
00:43:53,430 --> 00:43:54,660
available as a service.

1160
00:43:54,660 --> 00:43:56,540
And we also think we're going
to have to be smart about

1161
00:43:56,540 --> 00:43:59,410
heuristics to say, what
services does a

1162
00:43:59,410 --> 00:44:00,200
user want to see?

1163
00:44:00,200 --> 00:44:01,210
So you're exactly right.

1164
00:44:01,210 --> 00:44:03,530
And as the user's browsing
around, there could be a

1165
00:44:03,530 --> 00:44:06,710
problem where they just
aggregate all these services,

1166
00:44:06,710 --> 00:44:08,910
and they don't care about
most of them.

1167
00:44:08,910 --> 00:44:10,980
We think it's really up to the
browser, and we're going to

1168
00:44:10,980 --> 00:44:12,930
try to do the job of this
to make it a great user

1169
00:44:12,930 --> 00:44:17,180
experience and to understand
exactly what they want to see.

1170
00:44:17,180 --> 00:44:20,580
We also have the malware
database, the safe browsing

1171
00:44:20,580 --> 00:44:23,980
database, that we can use to
say, this is spam, this

1172
00:44:23,980 --> 00:44:25,760
service should definitely
not be seen.

1173
00:44:25,760 --> 00:44:26,200
AUDIENCE: All right.

1174
00:44:26,200 --> 00:44:28,204
Thanks.

1175
00:44:28,204 --> 00:44:28,690
AUDIENCE: Hi.

1176
00:44:28,690 --> 00:44:32,780
I'm kind of new for this field,

1177
00:44:32,780 --> 00:44:34,210
and I have two questions.

1178
00:44:34,210 --> 00:44:40,480
One is, can you show a couple
samples of how the UI looks

1179
00:44:40,480 --> 00:44:43,990
like for the explicit
and suggest intents?

1180
00:44:43,990 --> 00:44:45,450
JAMES HAWKINS: So I can talk
about explicit intents.

1181
00:44:45,450 --> 00:44:49,670
For explicit intents, the
picker does not show up.

1182
00:44:49,670 --> 00:44:51,250
It will go directly
to the site in the

1183
00:44:51,250 --> 00:44:52,300
disposition that they want.

1184
00:44:52,300 --> 00:44:54,750
So if it's Window, it will
open in the new tab.

1185
00:44:54,750 --> 00:44:57,620
If it's Inline, will show--

1186
00:44:57,620 --> 00:44:59,570
you saw the service pull down,
and it will just be

1187
00:44:59,570 --> 00:45:01,184
displayed in there.

1188
00:45:01,184 --> 00:45:02,540
AUDIENCE: OK.

1189
00:45:02,540 --> 00:45:09,130
The other one is so are there
any other objects which can be

1190
00:45:09,130 --> 00:45:12,100
used for to startActivity
function?

1191
00:45:12,100 --> 00:45:13,000
JAMES HAWKINS: For Share?

1192
00:45:13,000 --> 00:45:15,230
AUDIENCE: For the
startActivity.

1193
00:45:15,230 --> 00:45:15,920
JAMES HAWKINS: Oh,
startActivity.

1194
00:45:15,920 --> 00:45:17,400
AUDIENCE: Yeah

1195
00:45:17,400 --> 00:45:18,990
JAMES HAWKINS: It's just the
intent object and the

1196
00:45:18,990 --> 00:45:21,070
parameters as specified
in the API.

1197
00:45:21,070 --> 00:45:23,210
AUDIENCE: Because the name
is it more generic.

1198
00:45:23,210 --> 00:45:24,670
StartActivity.

1199
00:45:24,670 --> 00:45:24,890
JAMES HAWKINS: Right.

1200
00:45:24,890 --> 00:45:27,800
So the name actually came from
Android Intents, which Web

1201
00:45:27,800 --> 00:45:28,960
Intents is based off of.

1202
00:45:28,960 --> 00:45:32,370
And we felt it was important
for a developer mind share

1203
00:45:32,370 --> 00:45:35,410
that we have an entire ecosystem
of apps built on

1204
00:45:35,410 --> 00:45:39,170
Android Intents, and that's a
large developer base of people

1205
00:45:39,170 --> 00:45:40,280
that know Intents.

1206
00:45:40,280 --> 00:45:44,300
So as we were developing this
API, we said, let's pick and

1207
00:45:44,300 --> 00:45:47,410
pull pieces that we think are
important from Android Intents

1208
00:45:47,410 --> 00:45:48,730
that people will be used to.

1209
00:45:48,730 --> 00:45:52,230
The name is almost kind of--
it's not arbitrary, but there

1210
00:45:52,230 --> 00:45:54,030
are multiple things we
could have picked.

1211
00:45:54,030 --> 00:45:54,480
AUDIENCE: OK.

1212
00:45:54,480 --> 00:45:57,130
Thanks a lot.

1213
00:45:57,130 --> 00:46:03,140
AUDIENCE: So on Android Intents,
I find that sometimes

1214
00:46:03,140 --> 00:46:05,820
I find the list is so long,
because the action is so

1215
00:46:05,820 --> 00:46:08,850
generic, like Share, that it's
cumbersome for the user.

1216
00:46:08,850 --> 00:46:12,980
So going back, kind of, to
heuristics, do you have the

1217
00:46:12,980 --> 00:46:16,260
intent to let the user select
a default intent for

1218
00:46:16,260 --> 00:46:17,490
a given MIME type?

1219
00:46:17,490 --> 00:46:17,700
JAMES HAWKINS: Yeah.

1220
00:46:17,700 --> 00:46:20,830
That's one thing that we are
diverging from Android Intents

1221
00:46:20,830 --> 00:46:23,960
as it stands now, which is
to have smart defaulting.

1222
00:46:23,960 --> 00:46:26,860
And we're working out the
kinks on that now.

1223
00:46:26,860 --> 00:46:28,740
Actually, I'm going to point
and embarrass her.

1224
00:46:28,740 --> 00:46:30,980
Rachel is actually owning
that functionality.

1225
00:46:30,980 --> 00:46:32,513
The red head down here,
you'll see here her at

1226
00:46:32,513 --> 00:46:33,810
the code lab later.

1227
00:46:33,810 --> 00:46:34,190
RACHEL BLUM: Sorry.

1228
00:46:34,190 --> 00:46:35,390
JAMES HAWKINS: No, no,
no, no apologies.

1229
00:46:35,390 --> 00:46:36,120
We're working on it.

1230
00:46:36,120 --> 00:46:38,090
So it should be out
in probably maybe

1231
00:46:38,090 --> 00:46:39,200
our next stable release.

1232
00:46:39,200 --> 00:46:39,440
AUDIENCE: Cool.

1233
00:46:39,440 --> 00:46:42,320
And the stuff you showed us
today, is that from Canary?

1234
00:46:42,320 --> 00:46:43,240
PAUL KINLAN: Stable.

1235
00:46:43,240 --> 00:46:46,100
I was on Canary, but most of the
API's already in stable.

1236
00:46:46,100 --> 00:46:47,500
JAMES HAWKINS: It looks
like on stable, the

1237
00:46:47,500 --> 00:46:48,460
latest stable release.

1238
00:46:48,460 --> 00:46:50,750
AUDIENCE: Great, thanks.

1239
00:46:50,750 --> 00:46:53,160
AUDIENCE: Do you have any
prognosis on when we will be

1240
00:46:53,160 --> 00:46:57,140
able to use Web Intense
in major browsers?

1241
00:46:57,140 --> 00:46:58,120
JAMES HAWKINS: It's
difficult to say.

1242
00:46:58,120 --> 00:47:01,360
So, we're working with all the
other browser vendors through

1243
00:47:01,360 --> 00:47:04,020
the W3C in the standardization
process.

1244
00:47:04,020 --> 00:47:07,760
And that conversation is very
vibrant, lots communication on

1245
00:47:07,760 --> 00:47:11,910
the public Web Intense mailing
list, which is where all this

1246
00:47:11,910 --> 00:47:14,020
is happening on the W3C.

1247
00:47:14,020 --> 00:47:17,160
So I think, in order to get a
better feel for that, a gist

1248
00:47:17,160 --> 00:47:19,310
of it, I would probably
join that mailing

1249
00:47:19,310 --> 00:47:21,350
list and see for yourself.

1250
00:47:21,350 --> 00:47:23,090
PAUL KINLAN: We also do have a
JavaScript shim, which at the

1251
00:47:23,090 --> 00:47:26,400
moment is binary-compatible,
for other browsers.

1252
00:47:26,400 --> 00:47:29,940
For instance, Mozilla, Firefox,
Internet Explorer 8

1253
00:47:29,940 --> 00:47:31,760
and upwards, and
Opera as well.

1254
00:47:31,760 --> 00:47:35,350

1255
00:47:35,350 --> 00:47:37,350
We don't want the shim to exist,
ideally we want better

1256
00:47:37,350 --> 00:47:39,380
solutions everywhere else.

1257
00:47:39,380 --> 00:47:41,512
But we do have a shim to
replicate the functionality at

1258
00:47:41,512 --> 00:47:44,050
the moment in other browsers.

1259
00:47:44,050 --> 00:47:46,620
AUDIENCE: Thank you.

1260
00:47:46,620 --> 00:47:49,880
AUDIENCE: Will we see Web
Intents offered up by the

1261
00:47:49,880 --> 00:47:52,840
Android Chrome browser
as Android Intents?

1262
00:47:52,840 --> 00:47:53,440
JAMES HAWKINS: That's
a good question.

1263
00:47:53,440 --> 00:47:55,320
We absolutely want to do that.

1264
00:47:55,320 --> 00:47:57,450
It's much further down
on the road map.

1265
00:47:57,450 --> 00:47:59,980
It's a very tricky
problem to solve.

1266
00:47:59,980 --> 00:48:05,670
It requires work on both the
browser side and major

1267
00:48:05,670 --> 00:48:07,580
additions to the Android
side as well.

1268
00:48:07,580 --> 00:48:09,590
So we're working on
those problems.

1269
00:48:09,590 --> 00:48:11,620
It probably won't be out
for quite while, on

1270
00:48:11,620 --> 00:48:12,870
the order of months.

1271
00:48:12,870 --> 00:48:15,660

1272
00:48:15,660 --> 00:48:15,960
AUDIENCE: Hello.

1273
00:48:15,960 --> 00:48:19,180
Is it possible to customize
somehow to picking dialogue of

1274
00:48:19,180 --> 00:48:20,040
the applications?

1275
00:48:20,040 --> 00:48:22,610
Because if I have my application
and I have some

1276
00:48:22,610 --> 00:48:28,290
UI, I don't want to have
this now ugly dialogue.

1277
00:48:28,290 --> 00:48:28,720
JAMES HAWKINS: Yes.

1278
00:48:28,720 --> 00:48:31,880
Well, I'll answer that
part of it first.

1279
00:48:31,880 --> 00:48:33,260
We're trying to make
it not ugly.

1280
00:48:33,260 --> 00:48:36,710
But we've always had this idea
that we can add an extension

1281
00:48:36,710 --> 00:48:41,960
API for an extension to
manipulate how the picker may

1282
00:48:41,960 --> 00:48:45,840
look or all the elements
on the picker.

1283
00:48:45,840 --> 00:48:47,450
That's a tricky problem
to solve as well.

1284
00:48:47,450 --> 00:48:50,770
We've got to make sure it's
secure, that the extension's

1285
00:48:50,770 --> 00:48:53,050
not mucking with things
in a bad way.

1286
00:48:53,050 --> 00:48:54,120
But we want to do that.

1287
00:48:54,120 --> 00:48:56,139
That is also longer down
on the road map.

1288
00:48:56,139 --> 00:49:02,090

1289
00:49:02,090 --> 00:49:05,250
AUDIENCE: Will there be
some kind of API to

1290
00:49:05,250 --> 00:49:08,280
programmatically get a
list of [INAUDIBLE]

1291
00:49:08,280 --> 00:49:10,790
for given intents,
like an Android?

1292
00:49:10,790 --> 00:49:13,670
JAMES HAWKINS: Not
for the web.

1293
00:49:13,670 --> 00:49:16,490
Chrome extensions and Chrome
apps obviously have elevated

1294
00:49:16,490 --> 00:49:18,980
permissions through
that system.

1295
00:49:18,980 --> 00:49:21,160
That could be something that
we could expose there.

1296
00:49:21,160 --> 00:49:23,730
But we definitely would not
allow that for the web for

1297
00:49:23,730 --> 00:49:24,980
issues of fingerprinting.

1298
00:49:24,980 --> 00:49:27,130

1299
00:49:27,130 --> 00:49:30,150
AUDIENCE: Is there anything
baked in for nice backwards

1300
00:49:30,150 --> 00:49:33,410
compatibility or
downgradability, or is that on

1301
00:49:33,410 --> 00:49:35,390
us to figure out?

1302
00:49:35,390 --> 00:49:36,770
JAMES HAWKINS: As far as?

1303
00:49:36,770 --> 00:49:40,450
AUDIENCE: Well for file picker,
I want to provide the

1304
00:49:40,450 --> 00:49:45,870
Web Intent capability in my
client, but if they're on a

1305
00:49:45,870 --> 00:49:48,570
browser that doesn't support it
or whatever, is it just on

1306
00:49:48,570 --> 00:49:52,190
me to detect and
build that out?

1307
00:49:52,190 --> 00:49:54,435
PAUL KINLAN: This is one area
that we were talking about and

1308
00:49:54,435 --> 00:49:56,840
we still need to go through the
specification groups, is

1309
00:49:56,840 --> 00:49:58,680
how could we potentially
manipulate some of the

1310
00:49:58,680 --> 00:50:02,870
existing elements in HTML, like
file pick, so that you

1311
00:50:02,870 --> 00:50:04,970
could just say, I'm going to
pull a file in from the cloud

1312
00:50:04,970 --> 00:50:06,170
and then it goes that way.

1313
00:50:06,170 --> 00:50:08,100
I don't see it as
particularly--

1314
00:50:08,100 --> 00:50:10,260
correct me if I'm wrong-- but
I don't see it as trying to

1315
00:50:10,260 --> 00:50:13,920
make the existing API downgrade
to an existing pick.

1316
00:50:13,920 --> 00:50:16,680
You'd have a pick that's
optimized and enhanced with

1317
00:50:16,680 --> 00:50:18,730
the Intents service,
if that make sense.

1318
00:50:18,730 --> 00:50:20,790
JAMES HAWKINS: So there is
one thing you can do.

1319
00:50:20,790 --> 00:50:23,130
You can check for
the existence of

1320
00:50:23,130 --> 00:50:23,800
AUDIENCE: Webkit [INAUDIBLE].

1321
00:50:23,800 --> 00:50:24,280
JAMES HAWKINS: --startActivity.

1322
00:50:24,280 --> 00:50:25,870
Yeah, webkit startActivity.

1323
00:50:25,870 --> 00:50:28,610
If it's not there, then the
API's not there for whatever

1324
00:50:28,610 --> 00:50:30,885
browser is there.

1325
00:50:30,885 --> 00:50:31,950
PAUL KINLAN: And modernizer's
got to check in

1326
00:50:31,950 --> 00:50:32,570
for that, as well.

1327
00:50:32,570 --> 00:50:34,240
JAMES HAWKINS: Modernizer,
yeah.

1328
00:50:34,240 --> 00:50:37,240
There's also things that we're
adding to the browser.

1329
00:50:37,240 --> 00:50:40,330
We're trying to sort of
bootstrap the ecosystem in a

1330
00:50:40,330 --> 00:50:42,960
way by having the browser
be a client.

1331
00:50:42,960 --> 00:50:48,210
So for picking files, we could
say, show the file picker so

1332
00:50:48,210 --> 00:50:50,150
you can pick something from
your file system, which is

1333
00:50:50,150 --> 00:50:51,360
provided by the browser.

1334
00:50:51,360 --> 00:50:53,740
The user doesn't know that
it's not a service.

1335
00:50:53,740 --> 00:50:55,880
It just works for them, right?

1336
00:50:55,880 --> 00:50:59,310
So we're trying to find more
points of integration in the

1337
00:50:59,310 --> 00:51:00,870
browser for it to be a client.

1338
00:51:00,870 --> 00:51:01,447
AUDIENCE: Cool, cool.

1339
00:51:01,447 --> 00:51:02,697
OK, thank you.

1340
00:51:02,697 --> 00:51:06,380

1341
00:51:06,380 --> 00:51:09,810
AUDIENCE: Is it possible to
do metrics collection?

1342
00:51:09,810 --> 00:51:15,200
Just figure out what intents
are more popular, or--

1343
00:51:15,200 --> 00:51:18,420
JAMES HAWKINS: We are actually
adding metrics through our UMA

1344
00:51:18,420 --> 00:51:21,700
API, our User Metrics
API in Chrome.

1345
00:51:21,700 --> 00:51:25,730
We're not exactly sure yet, we
haven't quite designed exactly

1346
00:51:25,730 --> 00:51:27,920
what type of data we're
trying to get back.

1347
00:51:27,920 --> 00:51:29,940
Obviously, bucketing
on the major

1348
00:51:29,940 --> 00:51:31,940
action types is important.

1349
00:51:31,940 --> 00:51:35,440
But our current API is limited
in that we wouldn't be able to

1350
00:51:35,440 --> 00:51:37,420
create buckets for things
we don't know about.

1351
00:51:37,420 --> 00:51:39,180
So we're trying to think
through that.

1352
00:51:39,180 --> 00:51:43,790
Let's see, maybe some service
that example.com created, the

1353
00:51:43,790 --> 00:51:45,910
functionality that they create
is really popular.

1354
00:51:45,910 --> 00:51:47,332
We'd actually like to
know about that.

1355
00:51:47,332 --> 00:51:47,714
AUDIENCE: Yeah.

1356
00:51:47,714 --> 00:51:48,096
OK.

1357
00:51:48,096 --> 00:51:48,910
Thank you.

1358
00:51:48,910 --> 00:51:50,920
PAUL KINLAN: The other side of
that is the actual Web Store

1359
00:51:50,920 --> 00:51:55,980
itself, it index and archives
every application that's got

1360
00:51:55,980 --> 00:51:59,410
its functionality declared
by the manifest.

1361
00:51:59,410 --> 00:52:02,220
And if you click on, there's a
little link at the bottom of

1362
00:52:02,220 --> 00:52:03,640
the intent picker where
you can click

1363
00:52:03,640 --> 00:52:04,610
to find more services.

1364
00:52:04,610 --> 00:52:08,230
You get a good education about
the usage and availability of

1365
00:52:08,230 --> 00:52:11,030
support services at least for
those types of actions.

1366
00:52:11,030 --> 00:52:13,270
AUDIENCE: Thank you.

1367
00:52:13,270 --> 00:52:16,600
AUDIENCE: So, related to that,
that would be where I, as a

1368
00:52:16,600 --> 00:52:19,350
developer, discover which other
applications are web

1369
00:52:19,350 --> 00:52:20,970
content enabled?

1370
00:52:20,970 --> 00:52:21,620
JAMES HAWKINS: Right.

1371
00:52:21,620 --> 00:52:24,095
That's Find More Services
link that you'll see.

1372
00:52:24,095 --> 00:52:24,370
Yeah.

1373
00:52:24,370 --> 00:52:26,820
And we show that whenever there
are more services than

1374
00:52:26,820 --> 00:52:28,740
we show in the picker.

1375
00:52:28,740 --> 00:52:31,270
AUDIENCE: But if I as the
developer wanted, for example,

1376
00:52:31,270 --> 00:52:34,200
to integrate with Google
Calendar or other services

1377
00:52:34,200 --> 00:52:36,890
that might or might not
be Web Intent enabled.

1378
00:52:36,890 --> 00:52:38,800
Is there an easy resource
for me to access

1379
00:52:38,800 --> 00:52:41,130
to see which services--

1380
00:52:41,130 --> 00:52:42,990
PAUL KINLAN: Right now it's
through the Chrome Web Store.

1381
00:52:42,990 --> 00:52:44,560
Through that area.

1382
00:52:44,560 --> 00:52:46,900
One of my goals with the Web
Intents documentation was to

1383
00:52:46,900 --> 00:52:50,830
be able to, if we have the
index, the intent tag, is that

1384
00:52:50,830 --> 00:52:52,230
we can do queries on the
web, essentially.

1385
00:52:52,230 --> 00:52:54,230
To then go, well these are the
list of service that we know

1386
00:52:54,230 --> 00:52:56,700
that support this, and
have it shown in the

1387
00:52:56,700 --> 00:52:58,480
documentation up front.

1388
00:52:58,480 --> 00:52:59,540
We're way away from that
for the moment.

1389
00:52:59,540 --> 00:53:01,680
The Chrome Web Store is
the way to go for

1390
00:53:01,680 --> 00:53:03,080
understanding what--

1391
00:53:03,080 --> 00:53:05,560
JAMES HAWKINS: Yeah, I mean
you can imagine this.

1392
00:53:05,560 --> 00:53:08,060
Intent is really important for
the web, and we're here as

1393
00:53:08,060 --> 00:53:10,830
citizens of the web for Intents,
but we also work for

1394
00:53:10,830 --> 00:53:11,420
a search engine.

1395
00:53:11,420 --> 00:53:12,600
A major search engine.

1396
00:53:12,600 --> 00:53:15,640
So once the Intent tag is out
there, we have this ability to

1397
00:53:15,640 --> 00:53:18,410
crawl the web and say, who
actually supports Intents?

1398
00:53:18,410 --> 00:53:21,280
So I don't know if it's
something that we'll add to

1399
00:53:21,280 --> 00:53:23,810
search, or whether some
other crawl mechanism.

1400
00:53:23,810 --> 00:53:27,600
But it would be awesome if we
had a database of sites that

1401
00:53:27,600 --> 00:53:29,740
support Intents that
was updated

1402
00:53:29,740 --> 00:53:31,060
automatically, et cetera.

1403
00:53:31,060 --> 00:53:33,150
And you could go to their
sites and see what their

1404
00:53:33,150 --> 00:53:34,450
actions actually are.

1405
00:53:34,450 --> 00:53:34,870
AUDIENCE: Cool.

1406
00:53:34,870 --> 00:53:36,870
Thank you.

1407
00:53:36,870 --> 00:53:39,640
AUDIENCE: I think there is
currently a limitation in the

1408
00:53:39,640 --> 00:53:40,950
way actions are triggered.

1409
00:53:40,950 --> 00:53:43,780
It only is by user movement--

1410
00:53:43,780 --> 00:53:44,410
JAMES HAWKINS: User gesture.

1411
00:53:44,410 --> 00:53:46,160
AUDIENCE: Yeah.

1412
00:53:46,160 --> 00:53:48,860
But that leads to a problem
where, currently, you cannot

1413
00:53:48,860 --> 00:53:52,540
have them working with Chrome
extension that are actually

1414
00:53:52,540 --> 00:53:54,650
contextual menus or
just patterns.

1415
00:53:54,650 --> 00:53:57,510
Because even though they are
triggered by user action, the

1416
00:53:57,510 --> 00:54:02,070
window showing up is actually
not technically a user action.

1417
00:54:02,070 --> 00:54:04,730
Is it something that's
going to be sold, or?

1418
00:54:04,730 --> 00:54:05,020
JAMES HAWKINS: A bug!

1419
00:54:05,020 --> 00:54:06,270
You found a bug.

1420
00:54:06,270 --> 00:54:07,740
I thought we had zero.

1421
00:54:07,740 --> 00:54:09,010
PAUL KINLAN: It's exists.

1422
00:54:09,010 --> 00:54:10,710
The bug is open and
tracked by Greg.

1423
00:54:10,710 --> 00:54:13,630
We call it Bug Greg.

1424
00:54:13,630 --> 00:54:15,070
It's a thing I want
to as well.

1425
00:54:15,070 --> 00:54:16,520
It'd be nice.

1426
00:54:16,520 --> 00:54:18,520
AUDIENCE: Is the goal of
WebIntents.org to be sort of

1427
00:54:18,520 --> 00:54:21,920
authoritative source about all
the intents that are available

1428
00:54:21,920 --> 00:54:24,690
out there, and is there
a submission process.

1429
00:54:24,690 --> 00:54:26,810
What's that about?

1430
00:54:26,810 --> 00:54:27,230
PAUL KINLAN: Yeah.

1431
00:54:27,230 --> 00:54:29,990
So the idea behind
WebIntents.org is, when we

1432
00:54:29,990 --> 00:54:31,600
started this off before we were
going to go in through

1433
00:54:31,600 --> 00:54:35,330
the W3C standardization,
was it's not complete

1434
00:54:35,330 --> 00:54:37,290
authoritative, exhaustive list
of every single possible

1435
00:54:37,290 --> 00:54:38,660
intent that's out on the web.

1436
00:54:38,660 --> 00:54:41,240
It's just a very core set of
use cases that we wanted to

1437
00:54:41,240 --> 00:54:42,890
try and solve right now.

1438
00:54:42,890 --> 00:54:45,780
And as we saw more use cases
come in, we might take you

1439
00:54:45,780 --> 00:54:48,430
into the stewardship of
WebIntents.org and have that

1440
00:54:48,430 --> 00:54:50,290
as the de facto.

1441
00:54:50,290 --> 00:54:52,650
However, it's quite early
on this whole ecosystem.

1442
00:54:52,650 --> 00:54:55,330
So we might get a payment
solution, provided that

1443
00:54:55,330 --> 00:54:56,780
there's a pay intent,
for instance.

1444
00:54:56,780 --> 00:54:59,350
And that becomes the de facto
standard that everyone uses

1445
00:54:59,350 --> 00:55:00,570
inside that URL.

1446
00:55:00,570 --> 00:55:03,830
And that never comes under the
stewardship of WebIntents.org.

1447
00:55:03,830 --> 00:55:06,220
It's under their stewardship
to maintain a standard and

1448
00:55:06,220 --> 00:55:06,810
everything.

1449
00:55:06,810 --> 00:55:12,410
So I didn't personally want it
to be authoritative and index,

1450
00:55:12,410 --> 00:55:14,940
knock out every single thing on
the web and every different

1451
00:55:14,940 --> 00:55:18,520
type of intent, but it depends
on how the standardization

1452
00:55:18,520 --> 00:55:19,000
goes as well.

1453
00:55:19,000 --> 00:55:22,060
Because the W3C we're talking
about maybe you should

1454
00:55:22,060 --> 00:55:25,060
formalize some of the actual
core intents right now.

1455
00:55:25,060 --> 00:55:27,540
Get that whole process underway
through that group.

1456
00:55:27,540 --> 00:55:28,910
AUDIENCE: So is there as
submission process currently

1457
00:55:28,910 --> 00:55:30,620
in WebIntents.org?

1458
00:55:30,620 --> 00:55:33,300
PAUL KINLAN: There is a
contributor's guide, where we

1459
00:55:33,300 --> 00:55:35,670
basically say, go to this
discussion group, we'll talk

1460
00:55:35,670 --> 00:55:37,790
about the different types
of use case that you

1461
00:55:37,790 --> 00:55:38,930
want to try and solve.

1462
00:55:38,930 --> 00:55:41,100
And if we have at least one
client, potentially, and one

1463
00:55:41,100 --> 00:55:42,920
service that are going to be
able to do it and handle it,

1464
00:55:42,920 --> 00:55:45,690
then we can probably try to
standardize it a little bit

1465
00:55:45,690 --> 00:55:48,560
more inside of WebIntents.org
But again, we haven't done

1466
00:55:48,560 --> 00:55:51,770
that yet, because no one's
come to us with an idea

1467
00:55:51,770 --> 00:55:54,820
outside of use case we've
had originally.

1468
00:55:54,820 --> 00:55:55,650
JAMES HAWKINS: We're open.

1469
00:55:55,650 --> 00:55:57,670
And we'll see how it goes from
there, I think, is the answer.

1470
00:55:57,670 --> 00:55:59,530
JAMES HAWKINS: So there's
a site right now called

1471
00:55:59,530 --> 00:56:02,780
OpenIntents.org, which predates
Web Intents, and it's

1472
00:56:02,780 --> 00:56:04,220
actually for Android Intents.

1473
00:56:04,220 --> 00:56:05,900
And they have this database
on their site

1474
00:56:05,900 --> 00:56:07,160
which is really awesome.

1475
00:56:07,160 --> 00:56:09,590
It was one of the big things,
when we started Web Intents, I

1476
00:56:09,590 --> 00:56:11,240
was like, aw, man, this
is really cool.

1477
00:56:11,240 --> 00:56:13,830
We want services to come up with
all these functionalities

1478
00:56:13,830 --> 00:56:15,670
that we could never
even dream of.

1479
00:56:15,670 --> 00:56:17,960
And have a way that developers
can find them.

1480
00:56:17,960 --> 00:56:22,010
So I think WebIntents.org may
eventually end up hosting some

1481
00:56:22,010 --> 00:56:25,590
database that lists these, and
there's an easy submission

1482
00:56:25,590 --> 00:56:27,850
process that's very low
cost for developers

1483
00:56:27,850 --> 00:56:29,140
to add their actions.

1484
00:56:29,140 --> 00:56:33,760
I mean, it doesn't really hurt
anyone for this database to

1485
00:56:33,760 --> 00:56:36,510
exist, as long as you have ways
to support and prioritize

1486
00:56:36,510 --> 00:56:40,710
and expose the best services,
or the best actions.

1487
00:56:40,710 --> 00:56:41,470
AUDIENCE: Cool.

1488
00:56:41,470 --> 00:56:44,900
Are microformats a good
candidate for a type of thing

1489
00:56:44,900 --> 00:56:46,710
to use on Web Intents?

1490
00:56:46,710 --> 00:56:47,290
JAMES HAWKINS: Absolutely

1491
00:56:47,290 --> 00:56:49,100
AUDIENCE: Cool.

1492
00:56:49,100 --> 00:56:50,780
PAUL KINLAN: You just have to
get the type right, and then

1493
00:56:50,780 --> 00:56:52,710
as long as the two services
agree that they can transport

1494
00:56:52,710 --> 00:56:55,205
the same data, you could pass
a blob of HTML through.

1495
00:56:55,205 --> 00:56:58,410
And then both services
could parse it out.

1496
00:56:58,410 --> 00:56:58,830
AUDIENCE: Hi.

1497
00:56:58,830 --> 00:57:00,740
I have another question.

1498
00:57:00,740 --> 00:57:03,700
Is there a plan at some point
to use Web Intents

1499
00:57:03,700 --> 00:57:05,630
for the Chrome UI?

1500
00:57:05,630 --> 00:57:07,000
For example, the Print
button, could it

1501
00:57:07,000 --> 00:57:08,810
trigger a Print intent?

1502
00:57:08,810 --> 00:57:10,750
The star to favorite site
could be used--

1503
00:57:10,750 --> 00:57:11,110
JAMES HAWKINS: Absolutely.

1504
00:57:11,110 --> 00:57:11,420
Yep.

1505
00:57:11,420 --> 00:57:13,940
So that was what I was referring
to earlier, about

1506
00:57:13,940 --> 00:57:15,040
trying to find integration
points.

1507
00:57:15,040 --> 00:57:18,530
Another one that we could do
very easily is, say, adding

1508
00:57:18,530 --> 00:57:19,630
things to context menus.

1509
00:57:19,630 --> 00:57:22,110
So, if you know the context,
you know exactly

1510
00:57:22,110 --> 00:57:22,660
what you can do.

1511
00:57:22,660 --> 00:57:24,740
Say you right click on an image,
there are a lot of

1512
00:57:24,740 --> 00:57:25,760
things you can do with images.

1513
00:57:25,760 --> 00:57:27,770
And we can be smart about that
and say, all right, I want to

1514
00:57:27,770 --> 00:57:29,790
share this image, I want
to edit this image,

1515
00:57:29,790 --> 00:57:31,260
or save this image.

1516
00:57:31,260 --> 00:57:33,250
And not just your hard drive,
obviously, but to

1517
00:57:33,250 --> 00:57:33,920
the cloud as well.

1518
00:57:33,920 --> 00:57:36,630
So yeah, we want to add these
integration points.

1519
00:57:36,630 --> 00:57:37,880
AUDIENCE: That'd be amazing.

1520
00:57:37,880 --> 00:57:40,090

1521
00:57:40,090 --> 00:57:42,280
JAMES HAWKINS: Anybody else?

1522
00:57:42,280 --> 00:57:43,800
All right.

1523
00:57:43,800 --> 00:57:45,100
Thank you very much

1524
00:57:45,100 --> 00:57:46,350
PAUL KINLAN: Thank you.

1525
00:57:46,350 --> 00:57:47,233

