1
00:00:00,000 --> 00:00:04,820

2
00:00:04,820 --> 00:00:07,460
CHRIS WILSON: Good afternoon
and welcome to Turning

3
00:00:07,460 --> 00:00:08,580
the Web Up to 11.

4
00:00:08,580 --> 00:00:09,800
I'm Chris Wilson.

5
00:00:09,800 --> 00:00:12,300
I'm a Developer Advocate
on the Chrome team.

6
00:00:12,300 --> 00:00:13,790
And I'm here to take you
on a journey through

7
00:00:13,790 --> 00:00:15,200
the Web Audio API.

8
00:00:15,200 --> 00:00:17,190
So if you didn't know what
I was going to talk

9
00:00:17,190 --> 00:00:19,950
about, now you do.

10
00:00:19,950 --> 00:00:22,780
I wanted to start by showing why
I'm so excited about the

11
00:00:22,780 --> 00:00:24,370
Web Audio API.

12
00:00:24,370 --> 00:00:28,300
When I first ran across the Web
Audio work, I got really

13
00:00:28,300 --> 00:00:30,400
excited because for the last
couple years, I've gotten

14
00:00:30,400 --> 00:00:33,070
really interested in building
and using software

15
00:00:33,070 --> 00:00:36,740
synthesizers, drum machines, all
kinds of production stuff,

16
00:00:36,740 --> 00:00:40,040
on desktop and also
on tablets.

17
00:00:40,040 --> 00:00:42,510
And I'd gotten really
excited about this.

18
00:00:42,510 --> 00:00:43,940
I wanted to start
building my own.

19
00:00:43,940 --> 00:00:46,900
And as I looked at the Web Audio
API, it looked super

20
00:00:46,900 --> 00:00:49,160
easy to do, super interesting.

21
00:00:49,160 --> 00:00:52,480
And I actually very quickly
realized that most of building

22
00:00:52,480 --> 00:00:55,860
a software synthesizer with
web audio ends up being a

23
00:00:55,860 --> 00:00:58,210
really big user interface
chore.

24
00:00:58,210 --> 00:01:00,810
And I'm not a great
UI designer.

25
00:01:00,810 --> 00:01:04,209
You'll probably notice
that during my deck.

26
00:01:04,209 --> 00:01:06,880
So I set my sights on a
different challenge.

27
00:01:06,880 --> 00:01:09,130
Because I wanted to do something
that was really

28
00:01:09,130 --> 00:01:11,790
pretty heavy duty with
audio processing.

29
00:01:11,790 --> 00:01:15,240
So I decided I would set my
sights on making robot voices.

30
00:01:15,240 --> 00:01:20,640
Or more particularly, building
a vocoder and trying to

31
00:01:20,640 --> 00:01:25,540
replicate Styx's seminal
1983 hit "Mr. Roboto."

32
00:01:25,540 --> 00:01:27,850
And I'm actually happy
to report that I've

33
00:01:27,850 --> 00:01:29,650
managed to do this.

34
00:01:29,650 --> 00:01:31,960
This is actually a vocoder
that I built.

35
00:01:31,960 --> 00:01:33,620
It's up on GitHub right now.

36
00:01:33,620 --> 00:01:35,210
There's a link to it at
the end of the deck.

37
00:01:35,210 --> 00:01:38,640
So you can go play with it
yourself, or fork it and do

38
00:01:38,640 --> 00:01:40,710
all kinds of interesting
things with it.

39
00:01:40,710 --> 00:01:45,225
So how many people know what a
vocoder is or how it works?

40
00:01:45,225 --> 00:01:48,730
Yeah, the guy on the Web Audio
team doesn't actually get to

41
00:01:48,730 --> 00:01:49,290
raise his hand.

42
00:01:49,290 --> 00:01:50,610
But I kind of figured.

43
00:01:50,610 --> 00:01:52,980
So I don't want to get
really deeply to

44
00:01:52,980 --> 00:01:54,770
vocoder theory or anything.

45
00:01:54,770 --> 00:01:59,090
Basically, what a vocoder does
is it takes one signal,

46
00:01:59,090 --> 00:02:01,260
generally called the modulator,
it's usually a

47
00:02:01,260 --> 00:02:02,030
vocal sample.

48
00:02:02,030 --> 00:02:04,290
Something like this--

49
00:02:04,290 --> 00:02:07,650
PLAYBACK: Four score and seven
years ago, our fathers brought

50
00:02:07,650 --> 00:02:09,830
forth on this continent.

51
00:02:09,830 --> 00:02:12,770
CHRIS WILSON: And it maps the
frequency characteristics of

52
00:02:12,770 --> 00:02:14,050
that sound over time.

53
00:02:14,050 --> 00:02:16,190
It chops it up into
frequency bands.

54
00:02:16,190 --> 00:02:18,570
And then it watches how
much energy is in

55
00:02:18,570 --> 00:02:20,040
each frequency band.

56
00:02:20,040 --> 00:02:22,890
And it maps it onto a different
signal, the carrier

57
00:02:22,890 --> 00:02:25,670
signal, which is usually
a synthesized sound.

58
00:02:25,670 --> 00:02:26,868
Something like this--

59
00:02:26,868 --> 00:02:28,540
[BUZZING NOISE]

60
00:02:28,540 --> 00:02:30,840
CHRIS WILSON: And I had
to tell the audio guys

61
00:02:30,840 --> 00:02:33,550
beforehand, No, that's not
something going wrong.

62
00:02:33,550 --> 00:02:34,720
That is actually what
it's supposed to

63
00:02:34,720 --> 00:02:36,630
sound like right now.

64
00:02:36,630 --> 00:02:37,900
It sounds really awful, right?

65
00:02:37,900 --> 00:02:40,580
But when you actually map the
frequency characteristics onto

66
00:02:40,580 --> 00:02:43,406
that sound, it ends up sounding
kind of like this--

67
00:02:43,406 --> 00:02:43,638
PLAYBACK: [ROBOT VOICE]

68
00:02:43,638 --> 00:02:46,150
Four score and seven years ago,
our fathers brought forth

69
00:02:46,150 --> 00:02:47,426
on this continent.

70
00:02:47,426 --> 00:02:47,910
[CONTINUES PLAYING
IN BACKGROUND]

71
00:02:47,910 --> 00:02:48,500
CHRIS WILSON: It's
kind of cool.

72
00:02:48,500 --> 00:02:51,550
It's actually somewhat
recognizable.

73
00:02:51,550 --> 00:02:56,030
Now the interesting thing about
this code, to me after

74
00:02:56,030 --> 00:02:59,810
having written it, is that this
is not being precomputed.

75
00:02:59,810 --> 00:03:02,030
This is actually
happening live.

76
00:03:02,030 --> 00:03:03,890
In fact, I can change
characteristics.

77
00:03:03,890 --> 00:03:06,040
Like I can detune the
voices being used.

78
00:03:06,040 --> 00:03:07,300
[VOICE SPEEDS UP]

79
00:03:07,300 --> 00:03:09,186
CHRIS WILSON: And change
how it sounds.

80
00:03:09,186 --> 00:03:14,240
[VOICE SLOWS DOWN]

81
00:03:14,240 --> 00:03:16,920
CHRIS WILSON: Or I can also
change what voices are being

82
00:03:16,920 --> 00:03:18,310
used to produce it.

83
00:03:18,310 --> 00:03:20,110
So if I grab and--

84
00:03:20,110 --> 00:03:25,351
[VOICE DEEPENS]

85
00:03:25,351 --> 00:03:26,630
CHRIS WILSON: I'm probably using
a different sample or

86
00:03:26,630 --> 00:03:28,780
something like that.

87
00:03:28,780 --> 00:03:31,260
So I have a lot of control
over what's going on.

88
00:03:31,260 --> 00:03:35,120
In fact, the only bit of my
JavaScript code that's running

89
00:03:35,120 --> 00:03:37,870
while this is going, is the
stuff used to animate the

90
00:03:37,870 --> 00:03:40,360
vocoder bands, how the frequency
bands are jumping

91
00:03:40,360 --> 00:03:44,180
around, and the input
and output signals.

92
00:03:44,180 --> 00:03:48,160
So the ability to build rich
audio applications like this.

93
00:03:48,160 --> 00:03:50,380
Because by the way, I'm
not an audio engineer.

94
00:03:50,380 --> 00:03:53,930
I'm not a digital signal
processing expert or anything.

95
00:03:53,930 --> 00:03:57,940
It did take me a lot of trial
and error to build this.

96
00:03:57,940 --> 00:04:01,950
But the ability to build rich
audio apps like this, without

97
00:04:01,950 --> 00:04:04,400
having a degree in audio
engineering, is why I'm so

98
00:04:04,400 --> 00:04:06,650
excited about the processing
capabilities here.

99
00:04:06,650 --> 00:04:10,580

100
00:04:10,580 --> 00:04:11,310
And I will stop that.

101
00:04:11,310 --> 00:04:12,560
Because you can go play
with it yourself.

102
00:04:12,560 --> 00:04:15,230

103
00:04:15,230 --> 00:04:17,079
Oops.

104
00:04:17,079 --> 00:04:19,890
Click on my slides here.

105
00:04:19,890 --> 00:04:22,940
So you might start out by
asking, why do we even need

106
00:04:22,940 --> 00:04:24,260
another API?

107
00:04:24,260 --> 00:04:27,510
We already have the HTML5
audio element.

108
00:04:27,510 --> 00:04:29,790
And I love the HTML5
audio element.

109
00:04:29,790 --> 00:04:32,220
Because it wraps everything
about audio--

110
00:04:32,220 --> 00:04:35,490
loading, decoding, and playing
audio-- all up into one easy,

111
00:04:35,490 --> 00:04:36,770
declarative step.

112
00:04:36,770 --> 00:04:36,970
Right?

113
00:04:36,970 --> 00:04:38,770
You stick an audio tag in.

114
00:04:38,770 --> 00:04:40,730
You tell it whether you want to
show the controls or not,

115
00:04:40,730 --> 00:04:43,620
whether you want to pre-load
it, give it the source, and

116
00:04:43,620 --> 00:04:44,380
you're good to go.

117
00:04:44,380 --> 00:04:45,455
Like I can--

118
00:04:45,455 --> 00:04:47,520
gonna turn my sound down
just a little here.

119
00:04:47,520 --> 00:04:50,610

120
00:04:50,610 --> 00:04:51,400
I click the button.

121
00:04:51,400 --> 00:04:52,360
[LASER SOUND]

122
00:04:52,360 --> 00:04:53,800
CHRIS WILSON: I probably
can turn it back up.

123
00:04:53,800 --> 00:04:54,760
[LASER SOUND]

124
00:04:54,760 --> 00:04:55,300
CHRIS WILSON: Click
the button.

125
00:04:55,300 --> 00:04:56,250
And it plays the sound.

126
00:04:56,250 --> 00:04:58,660
In fact, I even get built-in
scrubbing of the sound.

127
00:04:58,660 --> 00:05:00,132
So I can--

128
00:05:00,132 --> 00:05:02,460
if I stop hitting my
right button--

129
00:05:02,460 --> 00:05:03,300
[PLAYS END OF LASER SOUND]

130
00:05:03,300 --> 00:05:04,330
CHRIS WILSON: I can scrub
it to part of the

131
00:05:04,330 --> 00:05:06,230
sound and hit play.

132
00:05:06,230 --> 00:05:07,390
Now this is great.

133
00:05:07,390 --> 00:05:10,170
But the thing that you don't
get from the HTML5 audio

134
00:05:10,170 --> 00:05:14,220
element is you don't get
sample-accurate control over

135
00:05:14,220 --> 00:05:16,310
when the sound is going
to be played.

136
00:05:16,310 --> 00:05:19,120
And it really struggles with
scalability, when you have a

137
00:05:19,120 --> 00:05:21,760
whole bunch of sounds what you
want to play all at the same

138
00:05:21,760 --> 00:05:23,960
time or very close
to each other.

139
00:05:23,960 --> 00:05:27,290
It's kind of a challenge to
get it to scale to that.

140
00:05:27,290 --> 00:05:29,340
Now the Web Audio API is
designed a little bit

141
00:05:29,340 --> 00:05:29,750
differently.

142
00:05:29,750 --> 00:05:32,560
It's really designed around
this idea of having very

143
00:05:32,560 --> 00:05:35,330
precise timing of
lots of sounds.

144
00:05:35,330 --> 00:05:39,534
So I can play the same
sound sample.

145
00:05:39,534 --> 00:05:40,490
[LASER SOUND]

146
00:05:40,490 --> 00:05:42,460
CHRIS WILSON: But I can also
play it a lot of times.

147
00:05:42,460 --> 00:05:44,260
[MULTIPLE SIMULTANEOUS
LASER SOUNDS]

148
00:05:44,260 --> 00:05:48,050
CHRIS WILSON: And it's very
precise in timing as to when

149
00:05:48,050 --> 00:05:53,140
it's playing, exactly when
I hit the button.

150
00:05:53,140 --> 00:05:56,300
The Web Audio API also provides
a really rich audio

151
00:05:56,300 --> 00:06:00,640
pipeline for building effects
and filters and routing audio

152
00:06:00,640 --> 00:06:02,680
around in different
powerful ways.

153
00:06:02,680 --> 00:06:05,210
So adding an effect
to that same sound

154
00:06:05,210 --> 00:06:06,150
file is really easy.

155
00:06:06,150 --> 00:06:09,110
[LASER SOUND ECHOING]

156
00:06:09,110 --> 00:06:11,960
CHRIS WILSON: And then finally,
the Web Audio API

157
00:06:11,960 --> 00:06:15,240
builds in a bunch of hooks
so you can analyze, and

158
00:06:15,240 --> 00:06:18,090
visualize, and kind of
manipulate the data on the

159
00:06:18,090 --> 00:06:19,150
fly, as well.

160
00:06:19,150 --> 00:06:22,790
So it's really pretty easy
to build something like--

161
00:06:22,790 --> 00:06:24,470
[MUSIC PLAYING WITH
VISUAL ANALYZER]

162
00:06:24,470 --> 00:06:27,040
CHRIS WILSON: A visual
analyzer.

163
00:06:27,040 --> 00:06:28,640
I actually built this
visual analyzer

164
00:06:28,640 --> 00:06:30,280
special for this talk.

165
00:06:30,280 --> 00:06:31,210
And it didn't take very long.

166
00:06:31,210 --> 00:06:34,560
We're going to walk through the
code a little bit later.

167
00:06:34,560 --> 00:06:38,680
So looking at the API from the
top down, it's kind of

168
00:06:38,680 --> 00:06:41,820
surprising that it's actually
designed to be a relatively

169
00:06:41,820 --> 00:06:43,060
high-level API.

170
00:06:43,060 --> 00:06:47,820
It's really pretty easy to do
basic tasks in the API, like--

171
00:06:47,820 --> 00:06:49,150
PLAYBACK: Play sound now.

172
00:06:49,150 --> 00:06:50,430
CHRIS WILSON: Playing a sound.

173
00:06:50,430 --> 00:06:51,810
That's the code for
it right there.

174
00:06:51,810 --> 00:06:54,840
That's all that I needed to
do to play that sound.

175
00:06:54,840 --> 00:06:56,770
Because I'd already had the
buffer loaded and we'll talk

176
00:06:56,770 --> 00:06:58,390
about that.

177
00:06:58,390 --> 00:07:02,800
But even better than that, the
effects and filters engine

178
00:07:02,800 --> 00:07:06,210
doesn't require you to
be a DSP engineer.

179
00:07:06,210 --> 00:07:09,490
If you told me that in order to
build that vocoder I had to

180
00:07:09,490 --> 00:07:14,160
go build my own FFT algorithm
implementation, and come up

181
00:07:14,160 --> 00:07:16,450
with a bunch of matrices
and transforms, and

182
00:07:16,450 --> 00:07:18,810
stick it all together.

183
00:07:18,810 --> 00:07:21,200
I would have walked away and
done something else, frankly.

184
00:07:21,200 --> 00:07:24,700
Math is not my favorite thing
to do on a sunny afternoon.

185
00:07:24,700 --> 00:07:29,030
So I probably would have figured
out something else.

186
00:07:29,030 --> 00:07:32,290
But if you want to do that, if
you want to get right down

187
00:07:32,290 --> 00:07:35,980
into the guts and do your own
processing in JavaScript, on

188
00:07:35,980 --> 00:07:38,300
the fly, you absolutely
can do that with the

189
00:07:38,300 --> 00:07:40,950
Web Audio API, too.

190
00:07:40,950 --> 00:07:43,090
But most of the effects engine,
and certainly the

191
00:07:43,090 --> 00:07:48,150
routing engine that we provide
in the implementation, it uses

192
00:07:48,150 --> 00:07:49,630
a separate high-priority
thread.

193
00:07:49,630 --> 00:07:53,750
It uses native implementation of
FFTs and things like that.

194
00:07:53,750 --> 00:07:57,950
And that way we can resist
problems like glitching.

195
00:07:57,950 --> 00:08:02,980
So if you have an application
that has pretty rich visuals

196
00:08:02,980 --> 00:08:05,373
and nice animation, here.

197
00:08:05,373 --> 00:08:11,050
[PLAYS POOL GAME]

198
00:08:11,050 --> 00:08:13,810
CHRIS WILSON: I never sink
anywhere when I do this.

199
00:08:13,810 --> 00:08:15,710
But this actually has
really rich sound.

200
00:08:15,710 --> 00:08:16,690
It's in 3D.

201
00:08:16,690 --> 00:08:19,910
So you actually hear the balls
clicking together in the

202
00:08:19,910 --> 00:08:21,380
appropriate place
and everything.

203
00:08:21,380 --> 00:08:22,970
It works better with headphones

204
00:08:22,970 --> 00:08:25,730
obviously than in the room.

205
00:08:25,730 --> 00:08:27,670
But you could tell
the sound wasn't

206
00:08:27,670 --> 00:08:28,870
interfering with the audio.

207
00:08:28,870 --> 00:08:30,830
And the audio wasn't interfering
with the sound.

208
00:08:30,830 --> 00:08:35,380
And this is really critical,
to not have these things

209
00:08:35,380 --> 00:08:39,299
interact with each other
accidentally.

210
00:08:39,299 --> 00:08:42,520
Now when you look at what you
need to build gaming.

211
00:08:42,520 --> 00:08:45,610
Because there are really two
major scenarios that we're

212
00:08:45,610 --> 00:08:47,020
super interested in--

213
00:08:47,020 --> 00:08:50,220
music applications and gaming.

214
00:08:50,220 --> 00:08:54,450
Gaming has a lot of features
that are expected for high-end

215
00:08:54,450 --> 00:08:56,140
console games.

216
00:08:56,140 --> 00:08:58,720
You expect to see things like
I talked before about very

217
00:08:58,720 --> 00:09:01,100
precise timing of audio
elements and

218
00:09:01,100 --> 00:09:02,680
simultaneous sounds.

219
00:09:02,680 --> 00:09:05,460
But you also expect to be able
to do things like position

220
00:09:05,460 --> 00:09:09,400
sound in 3D, have automatic
effects happen, like Doppler

221
00:09:09,400 --> 00:09:12,890
shift when the siren races past
you and the pitch seems

222
00:09:12,890 --> 00:09:17,270
to change because of
the physics of it.

223
00:09:17,270 --> 00:09:19,820
You also want to be able to do
things like filtering effects.

224
00:09:19,820 --> 00:09:22,890
So that, if you're doing a
live chat, you want it to

225
00:09:22,890 --> 00:09:25,920
sound like it's coming over the
radio or over a telephone.

226
00:09:25,920 --> 00:09:28,400
So I can take that same
sample I did earlier--

227
00:09:28,400 --> 00:09:29,770
PLAYBACK: Play sound now.

228
00:09:29,770 --> 00:09:31,550
CHRIS WILSON: And filter it so
it sounds like it's coming

229
00:09:31,550 --> 00:09:35,080
over a really kind of
crappy-quality telephone.

230
00:09:35,080 --> 00:09:38,860
And, of course, replicating
acoustic environments.

231
00:09:38,860 --> 00:09:42,260
Like if you fire your BFG 9,000
in a huge hall, you

232
00:09:42,260 --> 00:09:44,740
expect it to sound a little
different than if you fire it

233
00:09:44,740 --> 00:09:47,570
in a small room.

234
00:09:47,570 --> 00:09:50,420
And, of course, you need the
ability to create rhythms and

235
00:09:50,420 --> 00:09:51,920
sequences and things
like that.

236
00:09:51,920 --> 00:09:53,510
But also do automation.

237
00:09:53,510 --> 00:09:58,140
Do automated fade ins, fade
outs, that sort of thing.

238
00:09:58,140 --> 00:10:01,730
On top of that, for music
applications you also need to

239
00:10:01,730 --> 00:10:03,080
be able to generate sound.

240
00:10:03,080 --> 00:10:04,570
You need oscillators.

241
00:10:04,570 --> 00:10:07,760
You need things like dynamics
processing, and distortion,

242
00:10:07,760 --> 00:10:09,020
and things like that.

243
00:10:09,020 --> 00:10:11,360
And, of course, this is where
frequency and waveform

244
00:10:11,360 --> 00:10:15,110
analysis gets really
interesting.

245
00:10:15,110 --> 00:10:18,250
So I want to start diving in
to how we make this happen

246
00:10:18,250 --> 00:10:21,340
with the Web Audio API.

247
00:10:21,340 --> 00:10:22,790
This is an application
that I wrote.

248
00:10:22,790 --> 00:10:25,190
I'm going to use this multiple
times during the talk.

249
00:10:25,190 --> 00:10:26,620
It's also posted on GitHub.

250
00:10:26,620 --> 00:10:28,070
It's also posted publicly.

251
00:10:28,070 --> 00:10:29,960
So you can just go run it.

252
00:10:29,960 --> 00:10:32,620
It basically is something that
I built to let me kind of

253
00:10:32,620 --> 00:10:36,060
explore, visually, the
Web Audio API.

254
00:10:36,060 --> 00:10:37,950
So the first thing to understand
is that the Web

255
00:10:37,950 --> 00:10:43,980
Audio API works on the concept
of a node graph.

256
00:10:43,980 --> 00:10:45,070
You create nodes.

257
00:10:45,070 --> 00:10:47,810
So I just created an audio
buffer source node.

258
00:10:47,810 --> 00:10:49,580
And you connect them.

259
00:10:49,580 --> 00:10:52,170
And in this case I'm going to
connect it to the speakers.

260
00:10:52,170 --> 00:10:54,160
Because you need to connect
everything to the speakers if

261
00:10:54,160 --> 00:10:56,110
you want to hear a sound.

262
00:10:56,110 --> 00:10:58,576
And I'll hit play.

263
00:10:58,576 --> 00:11:00,570
[BELL DINGS]

264
00:11:00,570 --> 00:11:01,220
CHRIS WILSON: Yay.

265
00:11:01,220 --> 00:11:03,330
So you get the basic idea.

266
00:11:03,330 --> 00:11:06,500
Create nodes, connect them
together, hit play.

267
00:11:06,500 --> 00:11:13,970
Now these node graphs can
be varying complexity.

268
00:11:13,970 --> 00:11:18,160
What I just had here, that just
went away, was actually

269
00:11:18,160 --> 00:11:18,800
really simple.

270
00:11:18,800 --> 00:11:20,260
It just had two nodes--

271
00:11:20,260 --> 00:11:22,500
the source code and the speaker

272
00:11:22,500 --> 00:11:24,310
destination node that I played.

273
00:11:24,310 --> 00:11:26,600
This is a little bit more
complex node graph.

274
00:11:26,600 --> 00:11:29,310
But if you work through it one
piece at a time, it's pretty

275
00:11:29,310 --> 00:11:30,030
straightforward.

276
00:11:30,030 --> 00:11:31,060
There's a few sources.

277
00:11:31,060 --> 00:11:32,500
There's a few effects.

278
00:11:32,500 --> 00:11:35,276
They're mixed together in
sub-mixes and then it goes

279
00:11:35,276 --> 00:11:38,175
through a compressor
and gets played.

280
00:11:38,175 --> 00:11:41,840
That vocoder app that I ran in
the beginning, by the way, is

281
00:11:41,840 --> 00:11:43,510
a really complex node graph.

282
00:11:43,510 --> 00:11:48,980
It has somewhere around 420
nodes, I think, active while

283
00:11:48,980 --> 00:11:50,660
it's playing, the whole time.

284
00:11:50,660 --> 00:11:52,410
So you can tell how
scalable it is.

285
00:11:52,410 --> 00:11:56,060
Because that's running on my
two-year-old MacBook Pro.

286
00:11:56,060 --> 00:12:00,360
And really doesn't make the
system sweat even that much.

287
00:12:00,360 --> 00:12:03,020
For a while I was accidentally
running two copies at the same

288
00:12:03,020 --> 00:12:05,810
time, I was wondering why I
got a weird effect, but--

289
00:12:05,810 --> 00:12:08,310

290
00:12:08,310 --> 00:12:14,320
So I want to start by walking
through how to build all of

291
00:12:14,320 --> 00:12:15,350
this audio code.

292
00:12:15,350 --> 00:12:18,290
I'm not going to dig into the
code of the vocoder app.

293
00:12:18,290 --> 00:12:20,360
I started trying to do that and
realized it's kind of hard

294
00:12:20,360 --> 00:12:23,280
to explain in an hour.

295
00:12:23,280 --> 00:12:26,530
But, at the same time, I do want
to walk through each of

296
00:12:26,530 --> 00:12:28,360
these building blocks
and help you

297
00:12:28,360 --> 00:12:30,120
understand how to use them.

298
00:12:30,120 --> 00:12:32,500
Now you're going to have
to bear with me.

299
00:12:32,500 --> 00:12:35,240
We have to get through five
types before I can start

300
00:12:35,240 --> 00:12:37,570
playing with the fun stuff.

301
00:12:37,570 --> 00:12:40,300
The first of those is
the AudioContext.

302
00:12:40,300 --> 00:12:45,400
The AudioContext is kind of the
root of all things audio.

303
00:12:45,400 --> 00:12:48,500
This is kind of similar to
a 2D canvas context.

304
00:12:48,500 --> 00:12:51,410
So you create one of these.

305
00:12:51,410 --> 00:12:53,180
And this is where you
get access to all

306
00:12:53,180 --> 00:12:54,630
the other fun stuff.

307
00:12:54,630 --> 00:12:57,000
First and foremost, of course,
this is where you get access

308
00:12:57,000 --> 00:12:58,560
to the speakers.

309
00:12:58,560 --> 00:13:00,710
And you have to route
everything to this

310
00:13:00,710 --> 00:13:03,110
destination, to the speakers,
in order to

311
00:13:03,110 --> 00:13:04,630
have it make sound.

312
00:13:04,630 --> 00:13:06,560
Otherwise you're not plugging
the cable into

313
00:13:06,560 --> 00:13:08,190
anything, in effect.

314
00:13:08,190 --> 00:13:11,960
But we also have methods here
to create audio buffers, to

315
00:13:11,960 --> 00:13:16,200
decode audio buffers from common
file formats like mp3,

316
00:13:16,200 --> 00:13:19,210
or wav, or ogg, or that
sort of thing.

317
00:13:19,210 --> 00:13:21,890
And this is also down at the
bottom where we create all

318
00:13:21,890 --> 00:13:23,035
kinds of different
audio nodes.

319
00:13:23,035 --> 00:13:24,610
And we're going to walk through
each one of those

320
00:13:24,610 --> 00:13:26,240
audio nodes.

321
00:13:26,240 --> 00:13:28,080
This is a good time to mention,
by the way, I show

322
00:13:28,080 --> 00:13:31,940
you a lot of interfaces
in this talk.

323
00:13:31,940 --> 00:13:35,220
These are not the precise
interface declarations.

324
00:13:35,220 --> 00:13:37,310
I tried to simplify them to
make them a little more

325
00:13:37,310 --> 00:13:39,240
understandable.

326
00:13:39,240 --> 00:13:41,140
And, obviously, like I've
cropped a bunch the audio

327
00:13:41,140 --> 00:13:42,790
nodes out of the bottom here.

328
00:13:42,790 --> 00:13:44,430
So look in the spec
if you want the

329
00:13:44,430 --> 00:13:47,750
full, complete version.

330
00:13:47,750 --> 00:13:52,580
So this is the first line of Web
Audio applications, or a

331
00:13:52,580 --> 00:13:54,460
very early line, I should say.

332
00:13:54,460 --> 00:13:57,390
You need to create a
new AudioContext.

333
00:13:57,390 --> 00:14:01,110
Right now, obviously, we're a
WebKit prefix, vendor prefix.

334
00:14:01,110 --> 00:14:03,540
Sooner or later, that will go
away as we move the spec

335
00:14:03,540 --> 00:14:04,790
through the standards process.

336
00:14:04,790 --> 00:14:07,760

337
00:14:07,760 --> 00:14:10,930
Now the second type
is AudioNode.

338
00:14:10,930 --> 00:14:14,330
And I already said Web Audio API
is based on the concept of

339
00:14:14,330 --> 00:14:15,480
a node graph.

340
00:14:15,480 --> 00:14:18,810
AudioNode is basically the super
class for all nodes in

341
00:14:18,810 --> 00:14:19,890
that graph.

342
00:14:19,890 --> 00:14:22,300
In fact, it really only has
two things that are super

343
00:14:22,300 --> 00:14:23,050
interesting.

344
00:14:23,050 --> 00:14:24,020
It has a connect.

345
00:14:24,020 --> 00:14:25,330
It has a disconnect.

346
00:14:25,330 --> 00:14:28,380
You want to connect a source
node to a destination node,

347
00:14:28,380 --> 00:14:31,410
you just call source.connect
and pass it the destination

348
00:14:31,410 --> 00:14:34,230
you want to connect it to.

349
00:14:34,230 --> 00:14:36,560
I will point out, here, there's
a second connect

350
00:14:36,560 --> 00:14:39,920
method that takes
an AudioParam.

351
00:14:39,920 --> 00:14:42,110
I don't want to get into the
implications of that, yet.

352
00:14:42,110 --> 00:14:43,190
But I did want to call it out.

353
00:14:43,190 --> 00:14:46,110
Because it's going to be
important later on.

354
00:14:46,110 --> 00:14:49,970
And that leads me to the third
type, which is AudioParam.

355
00:14:49,970 --> 00:14:53,680
The AudioParam is a really
kind of complex type to

356
00:14:53,680 --> 00:14:55,210
understand at first.

357
00:14:55,210 --> 00:14:57,990
But it ends up being super,
super important.

358
00:14:57,990 --> 00:15:00,840
So most of the values, the
things you would think of as

359
00:15:00,840 --> 00:15:04,470
values in the Web Audio API,
like the volume on a

360
00:15:04,470 --> 00:15:06,890
gain-controlling node,
for example.

361
00:15:06,890 --> 00:15:09,280
They're actually represented
as AudioParams.

362
00:15:09,280 --> 00:15:12,370
Now you can still get and set
the values, the first thing in

363
00:15:12,370 --> 00:15:13,910
the interface declaration.

364
00:15:13,910 --> 00:15:15,800
You can go in and grab the
value out of there.

365
00:15:15,800 --> 00:15:18,020
You can manipulate
it, set it to

366
00:15:18,020 --> 00:15:19,750
something different, whatever.

367
00:15:19,750 --> 00:15:21,010
And that's an easy
way to use it.

368
00:15:21,010 --> 00:15:23,040
And I do use it that
way a lot.

369
00:15:23,040 --> 00:15:25,090
But at the same time you
can also do things

370
00:15:25,090 --> 00:15:26,600
that schedule it.

371
00:15:26,600 --> 00:15:29,220
So you can say, I want to set
the value at a particular time

372
00:15:29,220 --> 00:15:30,200
in the future.

373
00:15:30,200 --> 00:15:34,290
Or, my personal favorite, I want
to ramp this over time.

374
00:15:34,290 --> 00:15:36,520
I want to set the value to zero
now, but I want to ramp

375
00:15:36,520 --> 00:15:39,940
it up to one over the course
of the next couple seconds.

376
00:15:39,940 --> 00:15:41,950
And we handle that for you
under the covers in

377
00:15:41,950 --> 00:15:43,010
the Web Audio API.

378
00:15:43,010 --> 00:15:45,240
So you get really, really
smooth automation.

379
00:15:45,240 --> 00:15:47,950
Because of course we can
do that very fast.

380
00:15:47,950 --> 00:15:51,810
And I will show several examples
of how to do that.

381
00:15:51,810 --> 00:15:55,050
So we covered the three
infrastructure bits of

382
00:15:55,050 --> 00:15:57,510
context, nodes, and params.

383
00:15:57,510 --> 00:15:59,710
Now I want to talk
about sounds.

384
00:15:59,710 --> 00:16:02,610
And AudioBuffer is the
first thing to talk

385
00:16:02,610 --> 00:16:03,690
about, audio buffers.

386
00:16:03,690 --> 00:16:09,110
It represents a decoded
buffer of sound.

387
00:16:09,110 --> 00:16:11,470
So that means it's actually
in memory.

388
00:16:11,470 --> 00:16:15,170
And the bits are right there,
lined up in a row for you.

389
00:16:15,170 --> 00:16:19,210
You can actually access them
in here as a float32array.

390
00:16:19,210 --> 00:16:22,430
You can go directly twiddle,
get, set, whatever you want to

391
00:16:22,430 --> 00:16:24,400
do with those bits.

392
00:16:24,400 --> 00:16:27,740
You can, of course, also see the
sample rate and how long

393
00:16:27,740 --> 00:16:30,480
the buffer is and that sort
of thing, if you want.

394
00:16:30,480 --> 00:16:34,350
But if you want to, you can
access the data directly.

395
00:16:34,350 --> 00:16:39,380
In fact, this set of code
creates an audio buffer and

396
00:16:39,380 --> 00:16:43,550
gets the data, gets a pointer
to the data, and then just

397
00:16:43,550 --> 00:16:46,560
sets it to random numbers.

398
00:16:46,560 --> 00:16:49,340
This sounds like a goofy
thing to do, but

399
00:16:49,340 --> 00:16:50,326
actually this is how--

400
00:16:50,326 --> 00:16:52,310
[STATIC]

401
00:16:52,310 --> 00:16:54,290
CHRIS WILSON: This is how
you get white noise.

402
00:16:54,290 --> 00:16:56,790
You know, white noise is
actually musically useful in a

403
00:16:56,790 --> 00:16:57,660
number of cases.

404
00:16:57,660 --> 00:17:03,050
Like the vocoder app uses white
noise in one place.

405
00:17:03,050 --> 00:17:05,720
So it's something that
you may want to do.

406
00:17:05,720 --> 00:17:10,339
Now, of course, you typically
aren't really going to want to

407
00:17:10,339 --> 00:17:12,319
directly set these values.

408
00:17:12,319 --> 00:17:15,460
You're going to want to load
them from somewhere.

409
00:17:15,460 --> 00:17:18,460
So usually, you'll do
something like this.

410
00:17:18,460 --> 00:17:22,960
This is using pretty standard
XMLHttpRequest code.

411
00:17:22,960 --> 00:17:27,579
I set up a new XHR request.

412
00:17:27,579 --> 00:17:28,670
I open it with a get.

413
00:17:28,670 --> 00:17:31,270
I point it to an mp3
file, in this case.

414
00:17:31,270 --> 00:17:34,720
The only interesting bits here
are I set the response type to

415
00:17:34,720 --> 00:17:36,260
arraybuffer.

416
00:17:36,260 --> 00:17:39,000
Because I want to get this back
as an array, not as a

417
00:17:39,000 --> 00:17:39,930
bunch of plain text.

418
00:17:39,930 --> 00:17:40,860
It's an audio file.

419
00:17:40,860 --> 00:17:41,950
It's probably not--

420
00:17:41,950 --> 00:17:44,410
plain text is not going to
be super interesting.

421
00:17:44,410 --> 00:17:48,090
And then when it loads, I
call the AudioContext's

422
00:17:48,090 --> 00:17:50,520
decodeAudioData method.

423
00:17:50,520 --> 00:17:55,410
And I give it that buffer that
I just got back from XHR.

424
00:17:55,410 --> 00:18:00,170
And when it asynchronously
completes, it passes me back a

425
00:18:00,170 --> 00:18:02,920
buffer, an audio buffer,
that I can then do

426
00:18:02,920 --> 00:18:05,430
whatever I want with.

427
00:18:05,430 --> 00:18:08,730
Now what, you might ask, do
I do with an audio buffer?

428
00:18:08,730 --> 00:18:11,990
It's not a node, you might
notice if you go back to the

429
00:18:11,990 --> 00:18:13,740
interface that we had
a minute ago.

430
00:18:13,740 --> 00:18:16,070
It doesn't derive from node.

431
00:18:16,070 --> 00:18:18,630
It's an object in
its own right.

432
00:18:18,630 --> 00:18:23,010
So what you do is you use an
AudioBufferSourceNode.

433
00:18:23,010 --> 00:18:26,480
An AudioBufferSourceNode is a
node that we wrap around--

434
00:18:26,480 --> 00:18:30,390
or actually, we point
to an audio buffer.

435
00:18:30,390 --> 00:18:33,890
And it's really important to
understand this is a one shot

436
00:18:33,890 --> 00:18:35,320
playback node.

437
00:18:35,320 --> 00:18:38,120
AudioBufferSourceNode can
only be played once.

438
00:18:38,120 --> 00:18:40,460
This is really, really super
important, which is why I say

439
00:18:40,460 --> 00:18:42,700
it multiple times during
this slide.

440
00:18:42,700 --> 00:18:45,670
Once you've played the
AudioBufferSourceNode once,

441
00:18:45,670 --> 00:18:47,510
you have to throw it away.

442
00:18:47,510 --> 00:18:49,500
You don't have to throw
away the buffer.

443
00:18:49,500 --> 00:18:51,610
The buffer you can keep
around and use as many

444
00:18:51,610 --> 00:18:52,920
times as you want.

445
00:18:52,920 --> 00:18:54,960
In fact, you can share
it with multiple

446
00:18:54,960 --> 00:18:56,340
AudioBufferSourceNodes Buffer
Source that are

447
00:18:56,340 --> 00:18:58,050
playing at the same time.

448
00:18:58,050 --> 00:19:00,940
When I hit the fire button
repeatedly earlier, I only had

449
00:19:00,940 --> 00:19:03,100
one copy of that sound buffer.

450
00:19:03,100 --> 00:19:05,540
I just had multiple buffer
source nodes that pointed to

451
00:19:05,540 --> 00:19:08,490
it and were playing
at the same time.

452
00:19:08,490 --> 00:19:12,085
So buffer source node, the type
points to the buffer that

453
00:19:12,085 --> 00:19:13,840
it's playing.

454
00:19:13,840 --> 00:19:15,720
It also lets you change
the playback rate.

455
00:19:15,720 --> 00:19:18,540
So you can make it playback
faster or slower.

456
00:19:18,540 --> 00:19:21,620
Meaning you can increase
or decrease the pitch.

457
00:19:21,620 --> 00:19:22,390
You can loop it.

458
00:19:22,390 --> 00:19:24,090
You can tell it when
to start playing.

459
00:19:24,090 --> 00:19:27,380
And you can tell when
to stop playing.

460
00:19:27,380 --> 00:19:29,960
So let's look at how we use
these two together.

461
00:19:29,960 --> 00:19:32,690

462
00:19:32,690 --> 00:19:35,840
So the top part of this code
sample is the code you just

463
00:19:35,840 --> 00:19:40,810
saw to do an XMLHttpRequest,
get the data back, call the

464
00:19:40,810 --> 00:19:43,100
code audio data, and
get a buffer.

465
00:19:43,100 --> 00:19:45,980
And the only difference is once
I've gotten the buffer, I

466
00:19:45,980 --> 00:19:47,950
call this method bark().

467
00:19:47,950 --> 00:19:51,980
And bark() creates a buffer
source node, points the buffer

468
00:19:51,980 --> 00:19:55,300
for the buffer source node to
what we just loaded, connects

469
00:19:55,300 --> 00:19:56,300
it to the speaker--

470
00:19:56,300 --> 00:19:58,230
because remember, we have to
connect everything to the

471
00:19:58,230 --> 00:20:00,540
speakers or we don't
hear anything--

472
00:20:00,540 --> 00:20:02,810
and then calls noteOn
to start it.

473
00:20:02,810 --> 00:20:04,140
And I can--

474
00:20:04,140 --> 00:20:05,120
[BARK]

475
00:20:05,120 --> 00:20:06,150
CHRIS WILSON: --make it bark.

476
00:20:06,150 --> 00:20:08,500
There's "Hello, World,"
right there.

477
00:20:08,500 --> 00:20:10,400
"Hello, dog," I don't
know, whatever.

478
00:20:10,400 --> 00:20:12,170
Now if this were my
dog, on the other

479
00:20:12,170 --> 00:20:14,650
hand, it would be loop.

480
00:20:14,650 --> 00:20:15,490
Because she barks--

481
00:20:15,490 --> 00:20:17,990
[REPEATED BARKING]

482
00:20:17,990 --> 00:20:18,910
CHRIS WILSON: A lot.

483
00:20:18,910 --> 00:20:21,100
I didn't actually want to
run this for 10 minutes.

484
00:20:21,100 --> 00:20:24,480
But she does back about that
long, most of the time.

485
00:20:24,480 --> 00:20:27,980
Now, there are a couple things
that I want to point out here.

486
00:20:27,980 --> 00:20:30,030
One thing that I should have
mentioned before, when I was

487
00:20:30,030 --> 00:20:33,590
talking about writing values
in, is the sound values are

488
00:20:33,590 --> 00:20:35,620
actually floating-point
numbers.

489
00:20:35,620 --> 00:20:40,010
It's negative one to one is
the range that we have.

490
00:20:40,010 --> 00:20:41,100
But it's floating point.

491
00:20:41,100 --> 00:20:45,690
It's not 16-bit integers, it's
not 24-bit integers, or 32-bit

492
00:20:45,690 --> 00:20:49,310
integers, which if you were
heavy into digital sound in

493
00:20:49,310 --> 00:20:51,470
the past, you might
have expected.

494
00:20:51,470 --> 00:20:55,620
The reason is that gives us
a lot of play in where the

495
00:20:55,620 --> 00:20:57,310
dynamic range gets applied.

496
00:20:57,310 --> 00:20:59,550
So we still have a lot
of dynamic range.

497
00:20:59,550 --> 00:21:01,320
We're not wasting the
dynamic range.

498
00:21:01,320 --> 00:21:04,630
But it helps us to
avoid clipping.

499
00:21:04,630 --> 00:21:07,370
The second thing here
is I've been passing

500
00:21:07,370 --> 00:21:09,180
these time values around.

501
00:21:09,180 --> 00:21:09,990
Like here I call

502
00:21:09,990 --> 00:21:15,240
audioContext.currentTime plus 600.

503
00:21:15,240 --> 00:21:20,520
So time, in the Web Audio API,
is an interesting beast

504
00:21:20,520 --> 00:21:22,550
because it's in seconds.

505
00:21:22,550 --> 00:21:24,480
It's not in milliseconds.

506
00:21:24,480 --> 00:21:26,090
But it's a floating-point
number.

507
00:21:26,090 --> 00:21:29,590
And this is really why we used
milliseconds for a long time.

508
00:21:29,590 --> 00:21:33,330
I imagine that very few of you
in the room have not used

509
00:21:33,330 --> 00:21:37,340
setTimeout at one point or
another in web programming.

510
00:21:37,340 --> 00:21:39,740
SetTimeout takes values
in milliseconds.

511
00:21:39,740 --> 00:21:42,650
The problem with this is a
millisecond is actually a

512
00:21:42,650 --> 00:21:44,680
really long time when
you're looking at

513
00:21:44,680 --> 00:21:46,250
each sample of audio.

514
00:21:46,250 --> 00:21:46,440
Right?

515
00:21:46,440 --> 00:21:51,460
In one millisecond, on a
CD-quality audio, that's 44

516
00:21:51,460 --> 00:21:53,810
and a tenth samples.

517
00:21:53,810 --> 00:21:55,870
You're not very precise
in that case.

518
00:21:55,870 --> 00:21:58,710
So we needed something more
precise and went with seconds

519
00:21:58,710 --> 00:22:00,970
not milliseconds.

520
00:22:00,970 --> 00:22:04,680
Secondly, you want to
grab this from the

521
00:22:04,680 --> 00:22:05,930
audioContext.currentTime.

522
00:22:05,930 --> 00:22:07,550

523
00:22:07,550 --> 00:22:09,460
You don't grab it
from time.now or

524
00:22:09,460 --> 00:22:10,190
something like that.

525
00:22:10,190 --> 00:22:12,730
It's not the Unix Epoch clock.

526
00:22:12,730 --> 00:22:15,830
It actually starts at zero when
the context is created.

527
00:22:15,830 --> 00:22:19,690
That's not a super useful point
in time, it's more a

528
00:22:19,690 --> 00:22:23,830
relative unit than an absolute
unit, in that sense.

529
00:22:23,830 --> 00:22:27,900
But finally, and also critically
important, you kind

530
00:22:27,900 --> 00:22:28,680
of have to be careful.

531
00:22:28,680 --> 00:22:31,330
Because this is a
different clock.

532
00:22:31,330 --> 00:22:34,610
It literally may have a
different clock crystal that

533
00:22:34,610 --> 00:22:35,690
it's running off of.

534
00:22:35,690 --> 00:22:38,960
Because audio hardware systems
frequently have a separate

535
00:22:38,960 --> 00:22:42,090
crystal that keeps the
audio very stable.

536
00:22:42,090 --> 00:22:44,870
And the CPU may spin its
crystal up or down or

537
00:22:44,870 --> 00:22:49,890
something like that for power
management reasons.

538
00:22:49,890 --> 00:22:54,870
So by now, we're, I don't know,
a little under halfway

539
00:22:54,870 --> 00:22:57,760
through, and you're thinking,
that's great.

540
00:22:57,760 --> 00:23:00,740
You dumped a bunch of types on
me, a whole bunch of code, and

541
00:23:00,740 --> 00:23:03,280
fundamentally all you did
was make a dog bark.

542
00:23:03,280 --> 00:23:06,750
And I can loop that in the
HTML5 audio tag, too.

543
00:23:06,750 --> 00:23:09,820
So what have you shown me that's
really interesting?

544
00:23:09,820 --> 00:23:13,230
Well, first and foremost, you
don't usually do code the way

545
00:23:13,230 --> 00:23:14,970
that I did it there.

546
00:23:14,970 --> 00:23:18,450
Most particularly, you don't
usually immediately play the

547
00:23:18,450 --> 00:23:21,190
sound buffer when you've loaded
it with web audio.

548
00:23:21,190 --> 00:23:22,770
It's called a buffer
for a reason.

549
00:23:22,770 --> 00:23:24,800
You want to keep it around
for a while.

550
00:23:24,800 --> 00:23:28,740
In fact, I use about a dozen
sound samples during the

551
00:23:28,740 --> 00:23:30,080
course of this talk.

552
00:23:30,080 --> 00:23:31,330
And I've loaded all of them.

553
00:23:31,330 --> 00:23:33,970
I loaded them all when the page
loaded the first time.

554
00:23:33,970 --> 00:23:35,340
And I just hang on
to the buffer.

555
00:23:35,340 --> 00:23:36,980
And I use them whenever
I want.

556
00:23:36,980 --> 00:23:40,980
So there are a couple samples
that I use repeatedly.

557
00:23:40,980 --> 00:23:42,010
They're already in memory.

558
00:23:42,010 --> 00:23:44,150
I don't need to worry about,
Are they still there?

559
00:23:44,150 --> 00:23:45,170
Do I load them again?

560
00:23:45,170 --> 00:23:48,620
Are they going to get
cached or not?

561
00:23:48,620 --> 00:23:52,020
Now, there is, of course,
one other

562
00:23:52,020 --> 00:23:54,560
critical difference here.

563
00:23:54,560 --> 00:23:57,660
Which is the Web Audio API has
a lot of audio nodes for

564
00:23:57,660 --> 00:23:58,720
processing.

565
00:23:58,720 --> 00:24:02,380
We can do a lot of interesting
things with the audio, once

566
00:24:02,380 --> 00:24:03,500
we've started playing.

567
00:24:03,500 --> 00:24:06,110
I just wanted to get
out of the way,

568
00:24:06,110 --> 00:24:07,760
how do you play something.

569
00:24:07,760 --> 00:24:09,950
Because it's actually
relatively easy.

570
00:24:09,950 --> 00:24:13,800
And by the way, if you want to
use the HTML5 audio, as I did

571
00:24:13,800 --> 00:24:17,420
mention before, HTML5 audio
supports streaming.

572
00:24:17,420 --> 00:24:20,190
And streaming is a critically
important thing to do for some

573
00:24:20,190 --> 00:24:21,370
types of audio.

574
00:24:21,370 --> 00:24:24,630
If you want to play background
music for a game, for example,

575
00:24:24,630 --> 00:24:26,270
you may not want to load
all of that into

576
00:24:26,270 --> 00:24:27,820
an in-memory buffer.

577
00:24:27,820 --> 00:24:32,250
So here, you can take an HTML5
audio element and grab its

578
00:24:32,250 --> 00:24:34,355
audio output by calling
audioContext.cre

579
00:24:34,355 --> 00:24:39,670
ateMediaElementSource, handing
it the HTML5 audio or video

580
00:24:39,670 --> 00:24:43,290
element, and it grabs the sound
output from that tag,

581
00:24:43,290 --> 00:24:44,710
from that element.

582
00:24:44,710 --> 00:24:46,930
And then you can connect it
to wherever you want.

583
00:24:46,930 --> 00:24:48,610
You can connect it to the
effects pipeline.

584
00:24:48,610 --> 00:24:49,410
You can route it.

585
00:24:49,410 --> 00:24:52,010
You can change its gain,
all kinds of things.

586
00:24:52,010 --> 00:24:54,410
So it does integrate very
well into the Web

587
00:24:54,410 --> 00:24:55,660
Audio API as well.

588
00:24:55,660 --> 00:24:58,360

589
00:24:58,360 --> 00:25:01,380
So I want to walk through each
of the types of processing

590
00:25:01,380 --> 00:25:04,460
nodes, and what they can do,
and how to use them.

591
00:25:04,460 --> 00:25:08,430
The first one, and kind of the
easiest one to knock out

592
00:25:08,430 --> 00:25:10,720
first, I guess, is
the gain node.

593
00:25:10,720 --> 00:25:12,170
And gain node is pretty
straightforward.

594
00:25:12,170 --> 00:25:15,140
It lets you control the
gain, AKA volume.

595
00:25:15,140 --> 00:25:23,470
And I'll just drop a sound file
in, drop a gain node in,

596
00:25:23,470 --> 00:25:28,880
connect the sound file to the
gain node, the speakers.

597
00:25:28,880 --> 00:25:32,610
Let's choose a different
sound here.

598
00:25:32,610 --> 00:25:34,410
[MUSIC PLAYING]

599
00:25:34,410 --> 00:25:34,700
CHRIS WILSON: OK.

600
00:25:34,700 --> 00:25:37,350
So I've done my sound playing.

601
00:25:37,350 --> 00:25:38,685
And now I can change
the gain value.

602
00:25:38,685 --> 00:25:40,470
[MUSIC FADES OUT]

603
00:25:40,470 --> 00:25:41,560
CHRIS WILSON: And it
makes it quieter.

604
00:25:41,560 --> 00:25:43,280
[MUSIC FADES IN]

605
00:25:43,280 --> 00:25:46,510
CHRIS WILSON: Or makes
it a lot louder.

606
00:25:46,510 --> 00:25:50,160
Pretty straightforward,
pretty easy.

607
00:25:50,160 --> 00:25:53,280
However, it's important to
understand gain nodes are

608
00:25:53,280 --> 00:25:56,450
fantastically useful and really,
really important.

609
00:25:56,450 --> 00:25:59,550
Because this is how you create
a lot of the points in the

610
00:25:59,550 --> 00:26:00,290
routing graph.

611
00:26:00,290 --> 00:26:03,120
This is how you create things
like sub-mixes.

612
00:26:03,120 --> 00:26:06,600
If you are implementing a game
sound manager, for example,

613
00:26:06,600 --> 00:26:10,210
and you're creating a bunch of
effect sounds, like guns

614
00:26:10,210 --> 00:26:13,340
firing, or whatever, that
probably all gets connected to

615
00:26:13,340 --> 00:26:15,100
a single gain node
that lets you

616
00:26:15,100 --> 00:26:16,750
control the effects volume.

617
00:26:16,750 --> 00:26:18,250
And then you have a different
gain node that lets you

618
00:26:18,250 --> 00:26:19,620
control the music volume.

619
00:26:19,620 --> 00:26:21,220
And maybe you have a master
volume that they

620
00:26:21,220 --> 00:26:22,380
both connect to.

621
00:26:22,380 --> 00:26:24,480
But all of these
routing points,

622
00:26:24,480 --> 00:26:25,860
frequently, are gain nodes.

623
00:26:25,860 --> 00:26:28,161
Because they're an easy
thing to hang off of.

624
00:26:28,161 --> 00:26:30,930

625
00:26:30,930 --> 00:26:34,420
I should also mention, by the
way, implicitly you can make

626
00:26:34,420 --> 00:26:37,770
more than one connection at
any node connection point.

627
00:26:37,770 --> 00:26:41,420
If you connect multiple nodes to
one destination, they just

628
00:26:41,420 --> 00:26:43,010
automatically mix together.

629
00:26:43,010 --> 00:26:45,330
So if I have my dog barking--

630
00:26:45,330 --> 00:26:46,226
[BARK]

631
00:26:46,226 --> 00:26:46,338
CHRIS

632
00:26:46,338 --> 00:26:48,020
WILSON: --my cat [MEOW]

633
00:26:48,020 --> 00:26:50,400
CHRIS WILSON: --and I just
connect them both to the same

634
00:26:50,400 --> 00:26:52,530
destination down below,
and call noteOn

635
00:26:52,530 --> 00:26:53,570
on at the same time--

636
00:26:53,570 --> 00:26:54,950
[SIMULTANEOUS BARK AND MEOW]

637
00:26:54,950 --> 00:26:55,830
CHRIS WILSON: You get
them both together.

638
00:26:55,830 --> 00:26:57,620
It just mixes them together.

639
00:26:57,620 --> 00:27:01,120
And, of course, if I connected
one node to multiple

640
00:27:01,120 --> 00:27:03,740
destination nodes,
that also works.

641
00:27:03,740 --> 00:27:05,730
It just automatically
fans out.

642
00:27:05,730 --> 00:27:08,890
In fact, my vocoder app in the
beginning, I mentioned at one

643
00:27:08,890 --> 00:27:11,610
point it's a 28-band vocoder.

644
00:27:11,610 --> 00:27:16,170
That means one of the nodes fans
out to 28 other nodes.

645
00:27:16,170 --> 00:27:20,180
And then at the other end, 28
nodes all have to mix back

646
00:27:20,180 --> 00:27:22,020
down together into one node.

647
00:27:22,020 --> 00:27:23,670
And I just do that by
connecting them.

648
00:27:23,670 --> 00:27:25,760
I didn't have to do anything
special or come up with a

649
00:27:25,760 --> 00:27:28,970
special node to do that.

650
00:27:28,970 --> 00:27:35,370
Now, I also want to point out--
remember I said that all

651
00:27:35,370 --> 00:27:38,330
the things that you would think
of like parameters, like

652
00:27:38,330 --> 00:27:41,960
gain on a gain node, are
actually AudioParams.

653
00:27:41,960 --> 00:27:44,050
This lets you do automation.

654
00:27:44,050 --> 00:27:46,740
So I can do things like
this automated fade

655
00:27:46,740 --> 00:27:47,550
that I played earlier.

656
00:27:47,550 --> 00:27:49,800
[MUSIC FADES IN AND OUT]

657
00:27:49,800 --> 00:27:51,750
CHRIS WILSON: I should
have played earlier.

658
00:27:51,750 --> 00:27:53,630
And it fades it in,
and fades it out.

659
00:27:53,630 --> 00:27:57,140
And I did this simply by saying,
I want to start by

660
00:27:57,140 --> 00:28:00,080
creating a gain node, inserting
it into the path,

661
00:28:00,080 --> 00:28:03,510
and then, right now, set
the value to zero.

662
00:28:03,510 --> 00:28:07,970
In two seconds, I want you
to have ramped up to 1.0.

663
00:28:07,970 --> 00:28:11,655
And four seconds from now, I
want you to have ramped back

664
00:28:11,655 --> 00:28:13,300
down to zero.

665
00:28:13,300 --> 00:28:15,140
These are really
easy to set up.

666
00:28:15,140 --> 00:28:18,070
And as I said, they happen
very, very smoothly.

667
00:28:18,070 --> 00:28:21,190
Because we handle them under
the covers a very high time

668
00:28:21,190 --> 00:28:22,440
resolution.

669
00:28:22,440 --> 00:28:25,890

670
00:28:25,890 --> 00:28:27,870
Now my next node type--

671
00:28:27,870 --> 00:28:29,520
it's also relatively basic--

672
00:28:29,520 --> 00:28:30,770
is a delay node.

673
00:28:30,770 --> 00:28:32,870

674
00:28:32,870 --> 00:28:36,130
Now, it's pretty obvious
what a delay node does.

675
00:28:36,130 --> 00:28:39,610
It delays the audio
sent through it.

676
00:28:39,610 --> 00:28:46,225
So I'm going to create a delay
node and hook it up.

677
00:28:46,225 --> 00:28:49,440

678
00:28:49,440 --> 00:28:50,700
And I'll hit play--

679
00:28:50,700 --> 00:28:52,330
[BELL DINGS]

680
00:28:52,330 --> 00:28:54,090
CHRIS WILSON: --and the
interesting thing is you

681
00:28:54,090 --> 00:28:55,870
probably didn't notice
anything different.

682
00:28:55,870 --> 00:28:57,900
Well, it's because what
goes through the

683
00:28:57,900 --> 00:29:00,620
node is entirely delayed.

684
00:29:00,620 --> 00:29:02,940
So it's not mixing it
back together with

685
00:29:02,940 --> 00:29:04,260
the original sound.

686
00:29:04,260 --> 00:29:06,560
It's only delaying all the
audio going through it.

687
00:29:06,560 --> 00:29:09,690
So there was an extra 0.2
seconds from when I hit the

688
00:29:09,690 --> 00:29:11,220
button to when it played.

689
00:29:11,220 --> 00:29:13,380
But of course that's not
really noticeable.

690
00:29:13,380 --> 00:29:17,970
Now, if I wanted to, to sound
like an echo, then I can

691
00:29:17,970 --> 00:29:20,450
connect the original source
straight to the speaker

692
00:29:20,450 --> 00:29:24,980
destination, too, and
play it again.

693
00:29:24,980 --> 00:29:27,130
And now you get the
echo effect.

694
00:29:27,130 --> 00:29:30,260
Now if you really want what you
classically think of as a

695
00:29:30,260 --> 00:29:34,060
fading feedback echo digital
delay, you want to

696
00:29:34,060 --> 00:29:35,310
add a gain node in.

697
00:29:35,310 --> 00:29:39,410

698
00:29:39,410 --> 00:29:40,800
Let's move it where we
can actually see

699
00:29:40,800 --> 00:29:42,510
where the routing goes.

700
00:29:42,510 --> 00:29:44,870
And you want to put a cycle
through this delay.

701
00:29:44,870 --> 00:29:48,170
So the output of the delay
goes into the gain node.

702
00:29:48,170 --> 00:29:51,420
And the gain node goes
back into the delay.

703
00:29:51,420 --> 00:29:53,390
And a critically important
piece is set the

704
00:29:53,390 --> 00:29:55,760
gain less than one.

705
00:29:55,760 --> 00:29:58,400
And now when I play it, it's
gonna cycle through this

706
00:29:58,400 --> 00:30:01,150
delay-gain, delay-gain,
delay-gain, until the sound

707
00:30:01,150 --> 00:30:04,598
just dies back down to zero.

708
00:30:04,598 --> 00:30:08,420
So you can hear how I can
build a digital delay.

709
00:30:08,420 --> 00:30:12,200
In fact, for any studio
engineer types in the

710
00:30:12,200 --> 00:30:15,230
audience, if you want to build
multi-tap delays, you just

711
00:30:15,230 --> 00:30:17,830
stack a few delay nodes
in parallel.

712
00:30:17,830 --> 00:30:20,490
If you want to do things like
multi-channel effects like

713
00:30:20,490 --> 00:30:23,620
ping-pong delay, I'll actually
get into that later.

714
00:30:23,620 --> 00:30:24,770
They're really easy to do.

715
00:30:24,770 --> 00:30:28,350
Because you have the basic
tool kit for doing delay.

716
00:30:28,350 --> 00:30:30,060
And all you have to
do is route it in

717
00:30:30,060 --> 00:30:31,310
an interesting way.

718
00:30:31,310 --> 00:30:35,410

719
00:30:35,410 --> 00:30:40,050
Now another amazing thing is
that delay time is actually an

720
00:30:40,050 --> 00:30:41,390
audio param.

721
00:30:41,390 --> 00:30:43,170
That means you can schedule
changes to it.

722
00:30:43,170 --> 00:30:47,270
You can make changes to it live
and things will happen.

723
00:30:47,270 --> 00:30:51,630
So if I wanted to do code like
this, I can actually increase

724
00:30:51,630 --> 00:30:53,750
the delay time over time.

725
00:30:53,750 --> 00:30:56,310
And it automatically
makes it happen.

726
00:30:56,310 --> 00:30:57,293
So--

727
00:30:57,293 --> 00:30:57,615
PLAYBACK: [ECHOING]

728
00:30:57,615 --> 00:30:58,865
Hello.

729
00:30:58,865 --> 00:31:02,123

730
00:31:02,123 --> 00:31:02,610
CHRIS WILSON: OK.

731
00:31:02,610 --> 00:31:04,115
That one didn't sound right.

732
00:31:04,115 --> 00:31:07,250
I'm gonna restart this.

733
00:31:07,250 --> 00:31:09,960
For some reason, this
demo occasionally

734
00:31:09,960 --> 00:31:12,680
decides to be finicky.

735
00:31:12,680 --> 00:31:17,325
So I'm gonna try
that one again.

736
00:31:17,325 --> 00:31:17,635
PLAYBACK: [ECHOING]

737
00:31:17,635 --> 00:31:18,885
Hello.

738
00:31:18,885 --> 00:31:21,980

739
00:31:21,980 --> 00:31:23,170
CHRIS WILSON: There we go.

740
00:31:23,170 --> 00:31:24,140
Kind of a subtle effect.

741
00:31:24,140 --> 00:31:27,190
But it's basically increasing
the delay time over time.

742
00:31:27,190 --> 00:31:29,720

743
00:31:29,720 --> 00:31:33,120
I mentioned before, you can also
connect audio nodes into

744
00:31:33,120 --> 00:31:38,060
AudioParams, like take the
output of an audio feed and

745
00:31:38,060 --> 00:31:40,960
pump it straight in as a
parameter controller.

746
00:31:40,960 --> 00:31:43,880
This is how you do effects like
flanging and chorusing,

747
00:31:43,880 --> 00:31:46,340
which basically just have an
oscillator modulating the

748
00:31:46,340 --> 00:31:48,210
display time.

749
00:31:48,210 --> 00:31:51,980
I'll have a demo about that
up on the net later.

750
00:31:51,980 --> 00:31:53,820
I didn't put it in here because
it's kind of hard to

751
00:31:53,820 --> 00:31:55,070
walk through the code for it.

752
00:31:55,070 --> 00:31:58,110

753
00:31:58,110 --> 00:32:01,170
Now is the time, actually, in
this talk, to introduce a

754
00:32:01,170 --> 00:32:03,470
really, really good
friend of mine--

755
00:32:03,470 --> 00:32:05,290
the RealtimeAnalyserNode.

756
00:32:05,290 --> 00:32:07,920
And I say a really, really good
friend of mine because I

757
00:32:07,920 --> 00:32:11,960
used these constantly while
I was debugging my vocoder

758
00:32:11,960 --> 00:32:14,940
application to figure out
what was going on

759
00:32:14,940 --> 00:32:16,480
in the sound feed.

760
00:32:16,480 --> 00:32:19,240
Because it turns out, you really
cannot debug an audio

761
00:32:19,240 --> 00:32:21,930
application by using
console.log to

762
00:32:21,930 --> 00:32:23,400
spit out sound values.

763
00:32:23,400 --> 00:32:24,710
It just doesn't work.

764
00:32:24,710 --> 00:32:29,370
Like you have 44,000 values blow
past in a second, you're

765
00:32:29,370 --> 00:32:31,560
not going to recognize the
pattern and say, Oh yeah,

766
00:32:31,560 --> 00:32:33,500
that's a sine wave.

767
00:32:33,500 --> 00:32:37,090
So the RealtimeAnalyserNode
is what lets

768
00:32:37,090 --> 00:32:39,410
you visualize things.

769
00:32:39,410 --> 00:32:40,760
Like this.

770
00:32:40,760 --> 00:32:42,290
So all that this does--

771
00:32:42,290 --> 00:32:47,260
you can set this up and tell
it, I want to get an array

772
00:32:47,260 --> 00:32:49,860
that represents the frequency
band energy.

773
00:32:49,860 --> 00:32:51,970
And you can tell it how
detailed you want

774
00:32:51,970 --> 00:32:53,660
that array to be.

775
00:32:53,660 --> 00:32:56,480
Or you can say, I want kind
of a chunk of the

776
00:32:56,480 --> 00:32:57,880
waveform, as well.

777
00:32:57,880 --> 00:33:01,040
We use the same node to give
you both of those features.

778
00:33:01,040 --> 00:33:03,970
The frequency data you can ask
for as a Unit8 or as a float.

779
00:33:03,970 --> 00:33:06,660
It's kind of totally up to
you in your coding how

780
00:33:06,660 --> 00:33:08,730
you want to do it.

781
00:33:08,730 --> 00:33:13,050
So let's see how we
actually do this.

782
00:33:13,050 --> 00:33:14,340
So here's how you use it.

783
00:33:14,340 --> 00:33:17,720
The frequency buckets, by the
way, are split up linearly

784
00:33:17,720 --> 00:33:21,860
across zero to the NyQuist
frequency, which is half of

785
00:33:21,860 --> 00:33:24,210
the AudioContext's
sample rate.

786
00:33:24,210 --> 00:33:28,430
So if you say you want 1,024
buckets, then it's going to

787
00:33:28,430 --> 00:33:31,470
chop that up evenly
across zero to

788
00:33:31,470 --> 00:33:35,220
probably 22.05 kilohertz.

789
00:33:35,220 --> 00:33:39,960
And then, at some point in time,
what you do is you go to

790
00:33:39,960 --> 00:33:40,730
your analyser.

791
00:33:40,730 --> 00:33:42,540
And you pass it an array
that you've created.

792
00:33:42,540 --> 00:33:46,020
And you say, Give me the bite
frequency count data here.

793
00:33:46,020 --> 00:33:49,730
And it performs the frequency
analysis of the current sound

794
00:33:49,730 --> 00:33:52,320
and passes it back to you.

795
00:33:52,320 --> 00:33:55,530
And then of course you just go
in a loop through that array.

796
00:33:55,530 --> 00:33:58,800
Do whatever you want to make
something interesting

797
00:33:58,800 --> 00:34:01,630
visually, or do interesting
analysis, or

798
00:34:01,630 --> 00:34:03,330
whatever you want.

799
00:34:03,330 --> 00:34:07,060
In the case of this visualizer,
all I did was I

800
00:34:07,060 --> 00:34:08,760
walked through that array
and drew little

801
00:34:08,760 --> 00:34:11,120
boxes on the screen.

802
00:34:11,120 --> 00:34:14,310
But, of course, if you do that
on a RequestAnimationFrame

803
00:34:14,310 --> 00:34:17,820
timer, then it happens at the
refresh rate of your monitor

804
00:34:17,820 --> 00:34:18,820
or whatever.

805
00:34:18,820 --> 00:34:21,479
And you can do something
that looks very live.

806
00:34:21,479 --> 00:34:21,820
Right.

807
00:34:21,820 --> 00:34:23,409
You're doing it constantly.

808
00:34:23,409 --> 00:34:25,170
You're getting lots
of analysis.

809
00:34:25,170 --> 00:34:27,840
Please, by the way, don't use
setTimeout to do this.

810
00:34:27,840 --> 00:34:30,460
SetTimeout's not a great way
to do animation anyways.

811
00:34:30,460 --> 00:34:34,929
But it gets even worse
in sound sometimes.

812
00:34:34,929 --> 00:34:40,889
So now that we've looked
at frequency analysers.

813
00:34:40,889 --> 00:34:43,960
Now we can talk about
filter nodes.

814
00:34:43,960 --> 00:34:46,989
So filtering is a process
that happens in

815
00:34:46,989 --> 00:34:48,270
the frequency domain.

816
00:34:48,270 --> 00:34:51,440
It changes the response
across frequencies.

817
00:34:51,440 --> 00:34:52,909
So we have a bunch of
different types.

818
00:34:52,909 --> 00:34:56,170
We have LOWPASS, HIGHPASS,
BANDPASS, LOW and HIGH

819
00:34:56,170 --> 00:34:58,580
shelving filters, PEAKING
filter, NOTCH filter, and

820
00:34:58,580 --> 00:34:59,760
ALLPASS filter.

821
00:34:59,760 --> 00:35:01,440
I don't expect to magically
know what all

822
00:35:01,440 --> 00:35:03,270
those do, or care.

823
00:35:03,270 --> 00:35:06,590
This actually let you play with
the parameters and see

824
00:35:06,590 --> 00:35:09,080
what happens when you change
the frequency.

825
00:35:09,080 --> 00:35:11,730
When you change from a LOWPASS
filter, which lets all the low

826
00:35:11,730 --> 00:35:15,040
frequencies through but cuts
off the high ones, to a

827
00:35:15,040 --> 00:35:18,370
HIGHPASS filter, you can
see how it shifts.

828
00:35:18,370 --> 00:35:21,090
It's a neat little graph to play
with and gives you some

829
00:35:21,090 --> 00:35:23,530
idea of how things work.

830
00:35:23,530 --> 00:35:25,810
And, by the way, the parameters
in this are

831
00:35:25,810 --> 00:35:29,070
frequency and Q, or occasionally
what's referred

832
00:35:29,070 --> 00:35:32,230
to as quality, or sometimes
resonance.

833
00:35:32,230 --> 00:35:34,450
Because it's sort of
a related concept.

834
00:35:34,450 --> 00:35:38,890
So like here, if I pump up the
Q, you can see how it sort of

835
00:35:38,890 --> 00:35:41,010
accentuates whatever
the frequency is.

836
00:35:41,010 --> 00:35:44,730
It's causing a resonance
right at that spot.

837
00:35:44,730 --> 00:35:46,260
Now this is great.

838
00:35:46,260 --> 00:35:47,910
I'm showing you some
neat graphs.

839
00:35:47,910 --> 00:35:51,610
You can actually hear and see
how it sounds, by using my

840
00:35:51,610 --> 00:35:53,880
neat little demo app here.

841
00:35:53,880 --> 00:35:56,560
And don't worry, this is the
most complex graph I'm going

842
00:35:56,560 --> 00:35:59,700
to draw in this thing on my
little track-pad here.

843
00:35:59,700 --> 00:36:03,140
So let's create an
AudioBufferSource, grab an

844
00:36:03,140 --> 00:36:08,300
analyser, a filter, and
another analyser.

845
00:36:08,300 --> 00:36:10,630
And let's see if I can get these
all to fit on the screen

846
00:36:10,630 --> 00:36:11,880
at the same time.

847
00:36:11,880 --> 00:36:14,960

848
00:36:14,960 --> 00:36:17,540
There we go.

849
00:36:17,540 --> 00:36:19,366
Connect.

850
00:36:19,366 --> 00:36:23,060
You know, If I had had time I
would have figured out how to

851
00:36:23,060 --> 00:36:27,340
pre-load these in
my app, but--

852
00:36:27,340 --> 00:36:27,830
all right.

853
00:36:27,830 --> 00:36:30,010
Let's use our same drum
sample and loop it.

854
00:36:30,010 --> 00:36:31,720
[MUTED DRUMS]

855
00:36:31,720 --> 00:36:33,820
CHRIS WILSON: And you can hear
how all the high frequencies

856
00:36:33,820 --> 00:36:35,940
are getting cut off on
this sound sample.

857
00:36:35,940 --> 00:36:38,860
You can actually see it in the
difference between the before

858
00:36:38,860 --> 00:36:40,910
and after analyser here.

859
00:36:40,910 --> 00:36:43,040
And if I play with
the frequency--

860
00:36:43,040 --> 00:36:46,040
[MUSIC FADES IN]

861
00:36:46,040 --> 00:36:46,890
CHRIS WILSON: --you can
hear it open up.

862
00:36:46,890 --> 00:36:49,766
And now I'm pretty much passing
through all of the

863
00:36:49,766 --> 00:36:50,740
frequencies.

864
00:36:50,740 --> 00:36:53,216
But just for kicks, let's
crank up the resonance.

865
00:36:53,216 --> 00:36:56,204

866
00:36:56,204 --> 00:37:02,710
[MUSIC WARPS]

867
00:37:02,710 --> 00:37:03,030
CHRIS WILSON: OK.

868
00:37:03,030 --> 00:37:05,930
So I'm not Paul Oakenfold.

869
00:37:05,930 --> 00:37:07,920
But you get how this
stuff works.

870
00:37:07,920 --> 00:37:10,870
And you get the application
of these kinds of things.

871
00:37:10,870 --> 00:37:13,600
Now it's turning into
a UI problem--

872
00:37:13,600 --> 00:37:16,570
to build some really cool DJ
tools, which I'm kind of

873
00:37:16,570 --> 00:37:19,360
excited about building next.

874
00:37:19,360 --> 00:37:23,110
That'll be my next
little fun game.

875
00:37:23,110 --> 00:37:28,250
Now, I also wanted to point out,
again, frequency and Q?

876
00:37:28,250 --> 00:37:31,260
They're both AudioParams, so
you can automate them.

877
00:37:31,260 --> 00:37:34,150
You can change these
automatically over time.

878
00:37:34,150 --> 00:37:38,720
And so I took this, and I took
the output of a standard, I

879
00:37:38,720 --> 00:37:41,510
think it's a triangle wave, and
just pumped it straight

880
00:37:41,510 --> 00:37:43,580
into a filter.

881
00:37:43,580 --> 00:37:47,090
So the original sound is
an unchanging wave.

882
00:37:47,090 --> 00:37:50,390
And I just changed the filter
and told it, hey, sweep the

883
00:37:50,390 --> 00:37:54,720
filter from zero to 2,000 hertz
over the course of two

884
00:37:54,720 --> 00:37:56,820
seconds, and then back
down to zero.

885
00:37:56,820 --> 00:37:58,655
I think I automated
the Q, too.

886
00:37:58,655 --> 00:38:03,110
[SOUND EFFECT]

887
00:38:03,110 --> 00:38:04,670
CHRIS WILSON: So you can do
these neat little filter

888
00:38:04,670 --> 00:38:06,890
sweeps really, really easily.

889
00:38:06,890 --> 00:38:08,980
That actually is the
code snippet pasted

890
00:38:08,980 --> 00:38:11,720
out of my js file.

891
00:38:11,720 --> 00:38:14,560
And you can take that same
filter, and you can use it to

892
00:38:14,560 --> 00:38:16,110
process other things.

893
00:38:16,110 --> 00:38:18,060
You don't have to have an
unchanging sound that you

894
00:38:18,060 --> 00:38:18,390
start with.

895
00:38:18,390 --> 00:38:24,410
[MUSIC PLAYS]

896
00:38:24,410 --> 00:38:26,436
CHRIS WILSON: Sorry, I should
have cranked that up a little.

897
00:38:26,436 --> 00:38:31,150
[MUSIC PLAYS LOUDER]

898
00:38:31,150 --> 00:38:33,710
CHRIS WILSON: So you can do
all kinds of fun things by

899
00:38:33,710 --> 00:38:36,120
automating those filters, as
well as just twiddling the

900
00:38:36,120 --> 00:38:37,630
values yourself.

901
00:38:37,630 --> 00:38:41,130
In fact, filters are also how
you get effects like, I'm

902
00:38:41,130 --> 00:38:43,940
talking on a telephone, or I'm
talking on an am radio, or

903
00:38:43,940 --> 00:38:45,490
something like that.

904
00:38:45,490 --> 00:38:47,660
You can take the original
sound, here--

905
00:38:47,660 --> 00:38:49,390
PLAYBACK: Play sound now.

906
00:38:49,390 --> 00:38:50,800
CHRIS WILSON: Which
you heard earlier.

907
00:38:50,800 --> 00:38:53,550
And all that I do in this other
sample is I pump it

908
00:38:53,550 --> 00:38:57,140
through a couple of filters to
mask off the low and the high

909
00:38:57,140 --> 00:38:57,850
frequencies.

910
00:38:57,850 --> 00:39:01,130
It turns out a telephone sound
is really just-- the old

911
00:39:01,130 --> 00:39:04,140
telephone system chopped off
all of the upper and lower

912
00:39:04,140 --> 00:39:04,790
frequencies.

913
00:39:04,790 --> 00:39:06,810
Because of the way that
they transferred the

914
00:39:06,810 --> 00:39:08,150
data across the lines.

915
00:39:08,150 --> 00:39:09,770
PLAYBACK: Play sound now.

916
00:39:09,770 --> 00:39:12,800
CHRIS WILSON: And you get
something like that, just by

917
00:39:12,800 --> 00:39:16,130
filtering off those
frequencies.

918
00:39:16,130 --> 00:39:19,780
CHRIS WILSON: So now we've got
all these really cool sounds,

919
00:39:19,780 --> 00:39:23,940
or the tools to build all of
them, we need to position them

920
00:39:23,940 --> 00:39:25,110
in 3D space.

921
00:39:25,110 --> 00:39:28,210
There's a great tutorial on
HTML5Rocks about this.

922
00:39:28,210 --> 00:39:30,940
I basically decided I couldn't
improve on that a whole lot,

923
00:39:30,940 --> 00:39:32,760
so I was just going to show
the demo for it--

924
00:39:32,760 --> 00:39:34,250
[MUSIC PLAYS]

925
00:39:34,250 --> 00:39:35,600
CHRIS WILSON: And talk through
it a little bit.

926
00:39:35,600 --> 00:39:39,420
And you'll see as we
move around here--

927
00:39:39,420 --> 00:39:46,320
hopefully, you're hearing
the audio move around.

928
00:39:46,320 --> 00:39:48,580
I wanna thank the sound guys
again for getting the room set

929
00:39:48,580 --> 00:39:49,040
up for stereo.

930
00:39:49,040 --> 00:39:51,400
Because it definitely
would not been

931
00:39:51,400 --> 00:39:52,650
as impressive otherwise.

932
00:39:52,650 --> 00:39:55,280

933
00:39:55,280 --> 00:39:58,810
So the way that you do this is
you create an AudioPannerNode.

934
00:39:58,810 --> 00:40:01,690
You just pump your sound into
an AudioPannerNode.

935
00:40:01,690 --> 00:40:04,770
And you set its position, its
orientation if you want to

936
00:40:04,770 --> 00:40:08,720
sound to be directional,
and its velocity.

937
00:40:08,720 --> 00:40:11,330
And this sounds really
complex to do.

938
00:40:11,330 --> 00:40:13,580
Obviously, it makes sense for
the demo that I just showed

939
00:40:13,580 --> 00:40:15,470
you where it's really
a 3D space.

940
00:40:15,470 --> 00:40:18,690
But maybe you just want to take
a normal sound and pan it

941
00:40:18,690 --> 00:40:20,390
to the left or the right.

942
00:40:20,390 --> 00:40:22,220
Well that's actually
really easy to do.

943
00:40:22,220 --> 00:40:24,870
You just create a panner node,
you set the position to

944
00:40:24,870 --> 00:40:29,910
straight ahead, and then you can
animate the x position to

945
00:40:29,910 --> 00:40:31,980
change where it is,
left or right.

946
00:40:31,980 --> 00:40:33,435
And you end up with something
like this--

947
00:40:33,435 --> 00:40:34,685
[MUSIC PLAYS, PANNING
LEFT AND RIGHT]

948
00:40:34,685 --> 00:40:44,340

949
00:40:44,340 --> 00:40:46,400
CHRIS WILSON: So it's actually
really easy to do simple

950
00:40:46,400 --> 00:40:47,130
things, as well.

951
00:40:47,130 --> 00:40:51,010
You don't have to do super
complex 3D math to figure out

952
00:40:51,010 --> 00:40:53,720
where to position things.

953
00:40:53,720 --> 00:40:56,450
This is also, by the way, how
you get Doppler effects.

954
00:40:56,450 --> 00:40:59,650
That whole setVelocity
method is to set the

955
00:40:59,650 --> 00:41:01,480
velocity of an object.

956
00:41:01,480 --> 00:41:03,175
So that you get these
sounds where--

957
00:41:03,175 --> 00:41:05,730

958
00:41:05,730 --> 00:41:08,170
[SIREN]

959
00:41:08,170 --> 00:41:10,430
CHRIS WILSON: You can hear the
pitch change as something

960
00:41:10,430 --> 00:41:11,870
races past you.

961
00:41:11,870 --> 00:41:18,120
So given the number of
ambulances or policemen that

962
00:41:18,120 --> 00:41:21,250
I've heard going around on the
streets of San Francisco the

963
00:41:21,250 --> 00:41:23,650
last couple days, you
hear this a lot.

964
00:41:23,650 --> 00:41:25,550
But you expect that
sound to change.

965
00:41:25,550 --> 00:41:28,700
If you were playing a game and
you raced past the police

966
00:41:28,700 --> 00:41:31,340
officer in the game and the
pitch of the siren didn't

967
00:41:31,340 --> 00:41:33,230
change, you would
actually notice.

968
00:41:33,230 --> 00:41:34,250
It would be kind of weird.

969
00:41:34,250 --> 00:41:34,850
It would be jarring.

970
00:41:34,850 --> 00:41:38,990
Because that's not the way that
it works in real life.

971
00:41:38,990 --> 00:41:40,210
And this just magically
happened.

972
00:41:40,210 --> 00:41:43,640
All you had to do was set the
velocity of the object and we

973
00:41:43,640 --> 00:41:47,990
knew to change the pitch
of the object.

974
00:41:47,990 --> 00:41:52,910
Now, all of these things.

975
00:41:52,910 --> 00:41:55,690
All of these AudioPannerNodes
that may be in play, they're

976
00:41:55,690 --> 00:41:58,380
all relative to a listener
somewhere.

977
00:41:58,380 --> 00:42:00,980
You have to position
the person hearing

978
00:42:00,980 --> 00:42:02,380
all of these things.

979
00:42:02,380 --> 00:42:06,910
And the person hearing all these
things is an attribute

980
00:42:06,910 --> 00:42:08,510
of the speakers, in effect.

981
00:42:08,510 --> 00:42:10,800
It's an attribute of
the entire context.

982
00:42:10,800 --> 00:42:13,960
So the AudioListener hangs
directly off the AudioContext.

983
00:42:13,960 --> 00:42:15,260
There's only one of them.

984
00:42:15,260 --> 00:42:16,350
You don't create these.

985
00:42:16,350 --> 00:42:17,760
It's always there.

986
00:42:17,760 --> 00:42:20,770
And you just set your position,
or your orientation

987
00:42:20,770 --> 00:42:21,410
or velocity.

988
00:42:21,410 --> 00:42:24,740
When I moved around in that
sound field during the demo a

989
00:42:24,740 --> 00:42:27,540
couple seconds ago, I was
changing the AudioListener

990
00:42:27,540 --> 00:42:30,420
properties, as well as the
visual representation of that.

991
00:42:30,420 --> 00:42:33,220

992
00:42:33,220 --> 00:42:38,040
So with that, I want to jump
to another fun node--

993
00:42:38,040 --> 00:42:39,290
the ConvolverNode.

994
00:42:39,290 --> 00:42:41,600

995
00:42:41,600 --> 00:42:48,560
So convolution is a process to
digitally simulate a space, or

996
00:42:48,560 --> 00:42:50,330
a process actually.

997
00:42:50,330 --> 00:42:53,910
Because you can use this to
simulate room ambiance, like

998
00:42:53,910 --> 00:42:56,210
the way sound bounces
around in this room.

999
00:42:56,210 --> 00:42:58,250
This room has kind of a
nice response to it.

1000
00:42:58,250 --> 00:43:02,560
I can hear my voice bouncing
off the back wall.

1001
00:43:02,560 --> 00:43:06,660
But you can also use it to
simulate an analog processor.

1002
00:43:06,660 --> 00:43:12,230
Something that you use to plug
an audio signal through.

1003
00:43:12,230 --> 00:43:14,140
The way that this works is you
use these things called

1004
00:43:14,140 --> 00:43:15,740
Impulse Response files.

1005
00:43:15,740 --> 00:43:18,480
And Impulse Response files
can be recorded.

1006
00:43:18,480 --> 00:43:21,270
You can literally go into a room
like this with a couple

1007
00:43:21,270 --> 00:43:25,230
microphones and a speaker, play
a set of sounds, and then

1008
00:43:25,230 --> 00:43:27,420
run that through this
convolution processing

1009
00:43:27,420 --> 00:43:30,900
software, and it creates
a sound file that is

1010
00:43:30,900 --> 00:43:33,000
representative of how this room

1011
00:43:33,000 --> 00:43:36,030
responds to a sound impulse.

1012
00:43:36,030 --> 00:43:39,090
Or you can have been generated
algorithmically.

1013
00:43:39,090 --> 00:43:41,550
Or you can just come up with
really wacky ones, which

1014
00:43:41,550 --> 00:43:44,250
usually has very unpredictable
results, of course.

1015
00:43:44,250 --> 00:43:50,150
But fundamentally, in order to
simulate different responses,

1016
00:43:50,150 --> 00:43:52,410
you have to use this
file, a sound file.

1017
00:43:52,410 --> 00:43:55,980
There are tons of these
available on the net, freely.

1018
00:43:55,980 --> 00:43:58,940
You can just go search for
Impulse Response files.

1019
00:43:58,940 --> 00:44:00,000
Tons of them are out there.

1020
00:44:00,000 --> 00:44:03,020
Lots of hall reverbs, room
reverbs, and things like that,

1021
00:44:03,020 --> 00:44:05,740
as well as some really
crazy ones.

1022
00:44:05,740 --> 00:44:08,520
Again, I do want to point out
the output of this node is

1023
00:44:08,520 --> 00:44:10,900
just the processed signal.

1024
00:44:10,900 --> 00:44:13,630
And typically, you don't
just hear the echos.

1025
00:44:13,630 --> 00:44:15,350
You hear the original
sound too.

1026
00:44:15,350 --> 00:44:17,170
So you probably want to mix
these together when you

1027
00:44:17,170 --> 00:44:19,270
actually use it.

1028
00:44:19,270 --> 00:44:21,790
But ConvolverNode is pretty
straightforward because it

1029
00:44:21,790 --> 00:44:24,860
basically has one property that
you really care about.

1030
00:44:24,860 --> 00:44:26,240
It's a buffer.

1031
00:44:26,240 --> 00:44:28,760
Remember I said these are
Impulse Response files.

1032
00:44:28,760 --> 00:44:29,700
They're sound files.

1033
00:44:29,700 --> 00:44:33,130
You load them the same way you
load any other sound sample.

1034
00:44:33,130 --> 00:44:35,370
You just set it here, rather
than setting it in

1035
00:44:35,370 --> 00:44:38,070
AudioBufferSource node.

1036
00:44:38,070 --> 00:44:42,040
So to do this, I'm going to use
my favorite drum sample

1037
00:44:42,040 --> 00:44:43,710
that I keep using.

1038
00:44:43,710 --> 00:44:45,141
[MUSIC PLAYS]

1039
00:44:45,141 --> 00:44:47,050
CHRIS WILSON: Turn that
down a little bit.

1040
00:44:47,050 --> 00:44:51,440
And so I took my drum sound, I
created a ConvolverNode, I

1041
00:44:51,440 --> 00:44:54,210
pumped the drum sound into that
ConvolverNode, but also

1042
00:44:54,210 --> 00:44:55,700
connected it to the speakers--

1043
00:44:55,700 --> 00:44:56,920
to the destination.

1044
00:44:56,920 --> 00:44:58,550
So I hear both of them.

1045
00:44:58,550 --> 00:45:01,030
And then all that I'm going to
do now, is I'm gonna switch

1046
00:45:01,030 --> 00:45:03,780
what the ImpulseResponseBuffer
is.

1047
00:45:03,780 --> 00:45:05,120
So I can change it to a hall--

1048
00:45:05,120 --> 00:45:08,410
[MUSIC ALTERS]

1049
00:45:08,410 --> 00:45:10,770
CHRIS WILSON: Which I
hope you can hear.

1050
00:45:10,770 --> 00:45:12,702
I can change it to
a spring reverb.

1051
00:45:12,702 --> 00:45:14,090
[MUSIC ALTERS]

1052
00:45:14,090 --> 00:45:17,500
CHRIS WILSON: Spring reverb is
an old analog processor that

1053
00:45:17,500 --> 00:45:19,490
literally used springs.

1054
00:45:19,490 --> 00:45:22,010
And you can kind of hear this
weird slapping noise going

1055
00:45:22,010 --> 00:45:22,920
back and forth as a

1056
00:45:22,920 --> 00:45:25,470
characteristic of spring reverb.

1057
00:45:25,470 --> 00:45:27,098
You can do a comb filter.

1058
00:45:27,098 --> 00:45:28,412
[MUSIC ALTERS]

1059
00:45:28,412 --> 00:45:30,396
CHRIS WILSON: Which has a
really, really awful sound.

1060
00:45:30,396 --> 00:45:32,570
I'm not gonna stay
on that one.

1061
00:45:32,570 --> 00:45:36,650
Or, my personal favorite with
drums, is a backwards reverb.

1062
00:45:36,650 --> 00:45:36,950
[MUSIC ALTERS]

1063
00:45:36,950 --> 00:45:39,530
CHRIS WILSON: Because you can
do any Impulse Response.

1064
00:45:39,530 --> 00:45:42,680
This Impulse Response may be
completely the opposite in

1065
00:45:42,680 --> 00:45:45,040
time of what you would
actually hear

1066
00:45:45,040 --> 00:45:47,000
in the reverb space.

1067
00:45:47,000 --> 00:45:48,353
So if I stop it.

1068
00:45:48,353 --> 00:45:50,325
[MUSIC FADES]

1069
00:45:50,325 --> 00:45:53,380
CHRIS WILSON: You can actually
hear the reversed

1070
00:45:53,380 --> 00:45:54,750
reverb sound of that.

1071
00:45:54,750 --> 00:45:57,390

1072
00:45:57,390 --> 00:45:58,170
OK.

1073
00:45:58,170 --> 00:46:02,790
So we've talked a lot
about how to build

1074
00:46:02,790 --> 00:46:07,310
these processing systems.

1075
00:46:07,310 --> 00:46:10,310
I want to talk for a minute
about how to synthesize sound.

1076
00:46:10,310 --> 00:46:13,970
How to do musical applications
with sound, not just provide

1077
00:46:13,970 --> 00:46:16,840
ambient environments
for sound.

1078
00:46:16,840 --> 00:46:18,330
First and foremost,
it's actually

1079
00:46:18,330 --> 00:46:20,160
really easy to do this.

1080
00:46:20,160 --> 00:46:23,840
If you go and just do a search
for Web Audio API demos,

1081
00:46:23,840 --> 00:46:27,290
there's a whole bunch of demos
out there that are different

1082
00:46:27,290 --> 00:46:28,050
synthesizers.

1083
00:46:28,050 --> 00:46:29,030
This is only one of them.

1084
00:46:29,030 --> 00:46:30,630
It's actually a fairly
simplistic one,

1085
00:46:30,630 --> 00:46:31,980
which is why use it.

1086
00:46:31,980 --> 00:46:32,460
But--

1087
00:46:32,460 --> 00:46:32,940
[PLAYS SYNTHESIZER]

1088
00:46:32,940 --> 00:46:35,730
CHRIS WILSON: It has controls
for all of these different

1089
00:46:35,730 --> 00:46:39,390
things that I'm playing
around with.

1090
00:46:39,390 --> 00:46:40,180
It's actually--

1091
00:46:40,180 --> 00:46:42,690
the hardest part about building
something like this

1092
00:46:42,690 --> 00:46:45,570
is providing the user
experience for it.

1093
00:46:45,570 --> 00:46:49,530
I've actually built a test-bed
synthesizer out that

1094
00:46:49,530 --> 00:46:52,060
has no UI at all.

1095
00:46:52,060 --> 00:46:55,250
And it's really easy-- like the
actual sound production.

1096
00:46:55,250 --> 00:46:57,670
I want to build an envelope, I
want to stick a filter in, I

1097
00:46:57,670 --> 00:47:00,740
want to control some other
properties of it, is like a

1098
00:47:00,740 --> 00:47:02,220
dozen lines of code.

1099
00:47:02,220 --> 00:47:05,310
The rest of it, the shell for
drawing knobs and everything

1100
00:47:05,310 --> 00:47:09,420
else is actually a lot
more troublesome.

1101
00:47:09,420 --> 00:47:12,640
And remember when I mentioned
before, you can actually

1102
00:47:12,640 --> 00:47:17,820
connect AudioNodes to
AudioParams, as well.

1103
00:47:17,820 --> 00:47:20,840
For those of you who are synth
geeks, like me-- because I've

1104
00:47:20,840 --> 00:47:24,960
loved synthesizers since
I was about 12--

1105
00:47:24,960 --> 00:47:27,060
this is how you get things
like low-frequency

1106
00:47:27,060 --> 00:47:27,710
oscillators.

1107
00:47:27,710 --> 00:47:30,050
It's how you do things
like FM synthesis.

1108
00:47:30,050 --> 00:47:31,950
They're actually just
intersecting two different

1109
00:47:31,950 --> 00:47:36,470
audio signals or multiplying
them together.

1110
00:47:36,470 --> 00:47:39,590
So the first and most
fundamental piece of

1111
00:47:39,590 --> 00:47:42,910
generating sound is
an oscillator.

1112
00:47:42,910 --> 00:47:46,120
Oscillators provide a periodic
waveform source.

1113
00:47:46,120 --> 00:47:50,190
It's going to draw for you, or
create for you, things like a

1114
00:47:50,190 --> 00:47:50,570
sine

1115
00:47:50,570 --> 00:47:52,519
wave, [BEEP]

1116
00:47:52,519 --> 00:47:53,485
CHRIS WILSON: Square wave.

1117
00:47:53,485 --> 00:47:54,934
[BEEP]

1118
00:47:54,934 --> 00:47:55,417
CHRIS WILSON: Sawtooth wave.

1119
00:47:55,417 --> 00:47:57,350
[BEEP]

1120
00:47:57,350 --> 00:47:58,897
CHRIS WILSON: And
a triangle wave.

1121
00:47:58,897 --> 00:48:00,270
[BEEP]

1122
00:48:00,270 --> 00:48:02,400
CHRIS WILSON: Those all sound
kind of vaguely similar.

1123
00:48:02,400 --> 00:48:03,930
It's because I didn't
alter the pitch.

1124
00:48:03,930 --> 00:48:05,360
I haven't filtered them.

1125
00:48:05,360 --> 00:48:07,690
They're not super complex
waveforms.

1126
00:48:07,690 --> 00:48:08,600
But they are different.

1127
00:48:08,600 --> 00:48:10,840
And they have very different
harmonic characteristics,

1128
00:48:10,840 --> 00:48:13,640
which give you some interesting
properties.

1129
00:48:13,640 --> 00:48:16,120
So an oscillator is an
AudioSourceNode.

1130
00:48:16,120 --> 00:48:18,490
It's an audio node that you
can connect up to a

1131
00:48:18,490 --> 00:48:19,610
destination.

1132
00:48:19,610 --> 00:48:24,280
It lets you control the
frequency in hertz, it

1133
00:48:24,280 --> 00:48:26,000
actually also lets you
control the frequency

1134
00:48:26,000 --> 00:48:28,740
with the detune parameter.

1135
00:48:28,740 --> 00:48:31,730
Detuning basically lets you
control using a different unit

1136
00:48:31,730 --> 00:48:32,840
known as cents.

1137
00:48:32,840 --> 00:48:36,040
Cents are great for musical
applications because in an

1138
00:48:36,040 --> 00:48:39,240
equal-tempered scale there's
100 cents per note.

1139
00:48:39,240 --> 00:48:42,840
So it's super easy to say,
I want three octaves up.

1140
00:48:42,840 --> 00:48:47,380
It's three times 12 times 100.

1141
00:48:47,380 --> 00:48:49,230
And just like
AudioBufferSourceNode you have

1142
00:48:49,230 --> 00:48:51,890
noteOn, noteOff, and that
sort of things.

1143
00:48:51,890 --> 00:48:54,470
Now, I did skip that we
have another type up

1144
00:48:54,470 --> 00:48:57,320
there, called custom.

1145
00:48:57,320 --> 00:49:01,260
Custom lets us use this really
interesting oscillator called

1146
00:49:01,260 --> 00:49:03,020
a wavetable oscillator.

1147
00:49:03,020 --> 00:49:05,910
Wavetables are not a sample
playback buffer.

1148
00:49:05,910 --> 00:49:08,730
The term got misused in
the late '80s and

1149
00:49:08,730 --> 00:49:10,910
early '90s for a while.

1150
00:49:10,910 --> 00:49:16,530
It's actually a way to produce
sound that uses--

1151
00:49:16,530 --> 00:49:18,311
looks like my page didn't
load, hang on.

1152
00:49:18,311 --> 00:49:21,400

1153
00:49:21,400 --> 00:49:24,070
Let's try this again.

1154
00:49:24,070 --> 00:49:25,320
There we go.

1155
00:49:25,320 --> 00:49:27,370

1156
00:49:27,370 --> 00:49:33,040
It creates wave forms by adding
different coefficients

1157
00:49:33,040 --> 00:49:35,520
onto harmonic partials.

1158
00:49:35,520 --> 00:49:39,660
So it basically stacks up
harmonics of the same tone.

1159
00:49:39,660 --> 00:49:42,850
And then lets you control how
much of each harmonic to draw,

1160
00:49:42,850 --> 00:49:45,010
or to play, to add
to the waveform.

1161
00:49:45,010 --> 00:49:46,520
So here, we start out
with a fairly

1162
00:49:46,520 --> 00:49:47,600
simple set of harmonics.

1163
00:49:47,600 --> 00:49:48,040
[DEEP BUZZING NOISE]

1164
00:49:48,040 --> 00:49:49,866
CHRIS WILSON: There's three
harmonics playing.

1165
00:49:49,866 --> 00:49:51,500
And it sounds pretty basic.

1166
00:49:51,500 --> 00:49:53,756
It's not a very rich
sound or anything.

1167
00:49:53,756 --> 00:49:55,930
But I can draw in more--

1168
00:49:55,930 --> 00:49:59,080
[SOUND ALTERS]

1169
00:49:59,080 --> 00:50:00,926
CHRIS WILSON: And you can get a
lot more interesting sound.

1170
00:50:00,926 --> 00:50:04,050

1171
00:50:04,050 --> 00:50:05,510
So this is kind of weird.

1172
00:50:05,510 --> 00:50:09,940
It's a very deep area to build
complex waveforms.

1173
00:50:09,940 --> 00:50:11,140
Because you can sit there
and tweak the

1174
00:50:11,140 --> 00:50:12,390
partials all you want.

1175
00:50:12,390 --> 00:50:14,850

1176
00:50:14,850 --> 00:50:16,800
But I don't want to go
too deeply into it.

1177
00:50:16,800 --> 00:50:19,340
Because we could just sit
here and play with

1178
00:50:19,340 --> 00:50:20,380
partials all day.

1179
00:50:20,380 --> 00:50:22,210
It's a different way
of creating sounds.

1180
00:50:22,210 --> 00:50:23,990
It's a different generation
system.

1181
00:50:23,990 --> 00:50:26,480
It actually was very popular
in the early '80s.

1182
00:50:26,480 --> 00:50:29,460
There was a PPG wave synthesizer
that kind of

1183
00:50:29,460 --> 00:50:31,390
kicked off the usage of this.

1184
00:50:31,390 --> 00:50:35,020
The great thing, to me,
is this creates a very

1185
00:50:35,020 --> 00:50:38,970
spectrum-rich sound, creates a
lot of harmonics, which was

1186
00:50:38,970 --> 00:50:42,080
super useful in building
the vocoder.

1187
00:50:42,080 --> 00:50:43,880
The sound that I used
for that vocoder

1188
00:50:43,880 --> 00:50:45,130
is actually a wavetable.

1189
00:50:45,130 --> 00:50:51,620

1190
00:50:51,620 --> 00:50:52,190
OK.

1191
00:50:52,190 --> 00:50:54,010
So we've created sound.

1192
00:50:54,010 --> 00:50:55,850
Now we need to process
it a little bit more.

1193
00:50:55,850 --> 00:50:59,330
And there a couple of node
types that are really

1194
00:50:59,330 --> 00:51:00,400
musically interesting.

1195
00:51:00,400 --> 00:51:03,290
The first of these is
Compressor node.

1196
00:51:03,290 --> 00:51:06,200
Now compressors are a very
common musical tool.

1197
00:51:06,200 --> 00:51:09,830
In fact, that picture of a
rack of music equipment?

1198
00:51:09,830 --> 00:51:12,080
That's actually from
my basement studio.

1199
00:51:12,080 --> 00:51:15,190
One of the units in that is
a hardware compressor.

1200
00:51:15,190 --> 00:51:18,520
And compression basically
controls the volume peaks of a

1201
00:51:18,520 --> 00:51:21,990
sound, but tries to increase
the overall volume.

1202
00:51:21,990 --> 00:51:25,860
So this is a before-and-after
picture of the same sound

1203
00:51:25,860 --> 00:51:28,320
sample, of me playing
my bass guitar.

1204
00:51:28,320 --> 00:51:29,800
The first one is uncompressed.

1205
00:51:29,800 --> 00:51:31,160
The second one is compressed.

1206
00:51:31,160 --> 00:51:34,190
I've actually increased the
average volume, but I've had

1207
00:51:34,190 --> 00:51:38,360
to turn it down in a couple of
places to make sure that I

1208
00:51:38,360 --> 00:51:41,550
don't spike past the
clipping range.

1209
00:51:41,550 --> 00:51:44,480

1210
00:51:44,480 --> 00:51:47,180
So this is kind of like having
an engineer who sits there

1211
00:51:47,180 --> 00:51:50,680
with his hand on the volume knob
with an extremely fast

1212
00:51:50,680 --> 00:51:51,740
reaction time.

1213
00:51:51,740 --> 00:51:55,718
You can actually see
how this works--

1214
00:51:55,718 --> 00:51:57,150
[MUSIC PLAYS]

1215
00:51:57,150 --> 00:51:57,380
CHRIS WILSON: Here.

1216
00:51:57,380 --> 00:52:01,000
These are really standardized
controls, by the way.

1217
00:52:01,000 --> 00:52:04,440
The AudioParams that give you
controls on Compressor node

1218
00:52:04,440 --> 00:52:07,030
for threshold, knee, ratio,
attack, and release.

1219
00:52:07,030 --> 00:52:10,400
These are the five standard
things that you get on a

1220
00:52:10,400 --> 00:52:11,130
compressor.

1221
00:52:11,130 --> 00:52:13,720
There's actually knobs that say
threshold, knee, ratio,

1222
00:52:13,720 --> 00:52:15,840
attack, and release
on that hardware

1223
00:52:15,840 --> 00:52:16,776
compressor that I have.

1224
00:52:16,776 --> 00:52:18,650
[MUSIC VOLUME INCREASES]

1225
00:52:18,650 --> 00:52:20,890
CHRIS WILSON: Now the little
bouncing red bar shows you how

1226
00:52:20,890 --> 00:52:23,340
much compression is being
applied at any

1227
00:52:23,340 --> 00:52:24,920
given point in time.

1228
00:52:24,920 --> 00:52:31,800
So I can crank the threshold
down, crank the knee up, crank

1229
00:52:31,800 --> 00:52:33,016
the ratio up.

1230
00:52:33,016 --> 00:52:33,890
[MUSIC ALTERS]

1231
00:52:33,890 --> 00:52:35,380
CHRIS WILSON: And you can
probably tell in the back.

1232
00:52:35,380 --> 00:52:37,470
It sounds a little
muddled, for me.

1233
00:52:37,470 --> 00:52:39,060
But you can probably
tell in the back.

1234
00:52:39,060 --> 00:52:45,350
Suddenly, the peaks aren't so
loud, but the whole sound is a

1235
00:52:45,350 --> 00:52:48,140
little bit muddled right
now, actually.

1236
00:52:48,140 --> 00:52:50,445
Because you don't generally
over-compress like this.

1237
00:52:50,445 --> 00:52:53,210
If you want to, you can change
the attack time, and you'll

1238
00:52:53,210 --> 00:52:54,715
start hearing some of the--

1239
00:52:54,715 --> 00:52:56,110
[MUSIC ALTERS]

1240
00:52:56,110 --> 00:52:57,520
CHRIS WILSON: Some of the
poppiness of the attack is

1241
00:52:57,520 --> 00:53:01,658
back, which is why you have all
these different controls.

1242
00:53:01,658 --> 00:53:02,600
[MUSIC STOPS]

1243
00:53:02,600 --> 00:53:04,690
CHRIS WILSON: So I'm not going
to do a class in how to use

1244
00:53:04,690 --> 00:53:05,660
compressors.

1245
00:53:05,660 --> 00:53:09,560
I just wanted to say, this
is a tool that we have.

1246
00:53:09,560 --> 00:53:13,130
The last processing node
tool in our toolbox is

1247
00:53:13,130 --> 00:53:14,980
a WaveShaper node.

1248
00:53:14,980 --> 00:53:17,630
WaveShapers are a little
bit complex to explain.

1249
00:53:17,630 --> 00:53:21,630
Basically, what they do is they
let you create a curve, a

1250
00:53:21,630 --> 00:53:25,070
response curve, that's like
a sample look-up table.

1251
00:53:25,070 --> 00:53:27,550
And it happens on every
sound sample.

1252
00:53:27,550 --> 00:53:30,210
So for every sample it
says, I'm actually

1253
00:53:30,210 --> 00:53:31,140
going to return this.

1254
00:53:31,140 --> 00:53:36,690
If I set a curve that was
actually just a flat line on a

1255
00:53:36,690 --> 00:53:39,700
45 degree angle down here, then
it would actually just

1256
00:53:39,700 --> 00:53:42,780
have the output be exactly
the same as the input.

1257
00:53:42,780 --> 00:53:46,270
Otherwise it's going to change
the waveforms that go through.

1258
00:53:46,270 --> 00:53:49,630
Not control the volume over
time, like a Compressor node.

1259
00:53:49,630 --> 00:53:52,000
But actually change the
waveforms and kind of squish

1260
00:53:52,000 --> 00:53:53,770
the peaks down a little bit.

1261
00:53:53,770 --> 00:53:57,670
So I can use this to create like
distortion and overdrive.

1262
00:53:57,670 --> 00:53:58,130
[GUITAR]

1263
00:53:58,130 --> 00:54:02,238
CHRIS WILSON: So here, you have
me playing the guitar.

1264
00:54:02,238 --> 00:54:06,625
And if I just drive the gain a
little bit more to push up

1265
00:54:06,625 --> 00:54:09,300
into the areas that
get clipped off--

1266
00:54:09,300 --> 00:54:11,505
[GUITAR DISTORTS]

1267
00:54:11,505 --> 00:54:13,170
CHRIS WILSON: You can hear
it sounds like a guitar

1268
00:54:13,170 --> 00:54:17,160
distortion pedal, or
over-driving an amplifier.

1269
00:54:17,160 --> 00:54:18,440
And this is just a--

1270
00:54:18,440 --> 00:54:19,060
[GUITAR STOPS]

1271
00:54:19,060 --> 00:54:21,200
CHRIS WILSON: A single sound
curve that I created and

1272
00:54:21,200 --> 00:54:22,300
shoved into there.

1273
00:54:22,300 --> 00:54:25,080
You can actually change these
curves infinitely.

1274
00:54:25,080 --> 00:54:29,130
You can give it any size of
array curve that you want.

1275
00:54:29,130 --> 00:54:31,860
And you can change what the
response looks like and get

1276
00:54:31,860 --> 00:54:33,350
very, very different
distortion effects.

1277
00:54:33,350 --> 00:54:36,620

1278
00:54:36,620 --> 00:54:37,930
OK.

1279
00:54:37,930 --> 00:54:40,060
Almost there.

1280
00:54:40,060 --> 00:54:43,800
So I haven't mentioned mono
sound versus stereo sound,

1281
00:54:43,800 --> 00:54:47,550
versus 5.1 surround sound,
or anything like that.

1282
00:54:47,550 --> 00:54:50,570
Mostly because the Web Audio
API, for the most part, just

1283
00:54:50,570 --> 00:54:52,380
kind of handles it for you.

1284
00:54:52,380 --> 00:54:54,500
You don't have to deal
with channels.

1285
00:54:54,500 --> 00:54:57,380
It just sort of magically
upgrades whenever it needs to

1286
00:54:57,380 --> 00:55:01,150
go to stereo, or if you have a
mono signal, or upgrades all

1287
00:55:01,150 --> 00:55:04,440
the way to 5.1 surround sound
if it has to, whatever.

1288
00:55:04,440 --> 00:55:06,950
If you really do want
to poke into channel

1289
00:55:06,950 --> 00:55:08,870
control, you can do that.

1290
00:55:08,870 --> 00:55:12,790
Most of those connections may
be more than one channel.

1291
00:55:12,790 --> 00:55:15,990
And you just don't have to worry
about whether it's a

1292
00:55:15,990 --> 00:55:17,790
mono or stereo signal.

1293
00:55:17,790 --> 00:55:20,540
If you want to, use an audio
channel splitter and an audio

1294
00:55:20,540 --> 00:55:22,570
channel merger.

1295
00:55:22,570 --> 00:55:25,090
So for example, I mentioned
a ping-pong delay.

1296
00:55:25,090 --> 00:55:28,050
Ping-pong delay bounces the
delay back and forth between

1297
00:55:28,050 --> 00:55:29,070
the left and the
right channels.

1298
00:55:29,070 --> 00:55:31,853
So it sounds kind
of like this--

1299
00:55:31,853 --> 00:55:34,110
[BELL DINGS]

1300
00:55:34,110 --> 00:55:36,220
CHRIS WILSON: Hopefully you hear
that bouncing between the

1301
00:55:36,220 --> 00:55:37,920
channels back there.

1302
00:55:37,920 --> 00:55:38,485
[BELL DINGS]

1303
00:55:38,485 --> 00:55:41,000
CHRIS WILSON: You'd accomplish
this just by taking two

1304
00:55:41,000 --> 00:55:43,745
delays, feeding the original
signal into one side,

1305
00:55:43,745 --> 00:55:44,090
[BELL DINGS]

1306
00:55:44,090 --> 00:55:45,890
CHRIS WILSON: And then crossing
the feedback loop.

1307
00:55:45,890 --> 00:55:48,480
So it goes from the left channel
output into the right

1308
00:55:48,480 --> 00:55:51,190
channel's delay node and
then back the same

1309
00:55:51,190 --> 00:55:54,210
way the other direction.

1310
00:55:54,210 --> 00:55:57,460
And, of course, you can
individually control in here

1311
00:55:57,460 --> 00:56:02,580
how long the delay is for each
side, and that kind of stuff.

1312
00:56:02,580 --> 00:56:06,340
So I mentioned at the very
beginning you can actually

1313
00:56:06,340 --> 00:56:09,760
plug in and do any kind of
custom JavaScript you want to,

1314
00:56:09,760 --> 00:56:11,400
on a sound node.

1315
00:56:11,400 --> 00:56:13,410
JavaScriptAudioNode is
how you do that.

1316
00:56:13,410 --> 00:56:16,260
You plug in, you set up an event
listener, and then you

1317
00:56:16,260 --> 00:56:20,650
process buffers of audio
in that event listener.

1318
00:56:20,650 --> 00:56:22,060
I'm not going to go into
the demo of this.

1319
00:56:22,060 --> 00:56:24,770
It's really subtle and it takes
a lot of explaining.

1320
00:56:24,770 --> 00:56:28,570
And we are at about three
minutes left, I think.

1321
00:56:28,570 --> 00:56:31,080
So but this is how you do it.

1322
00:56:31,080 --> 00:56:34,200
There's some pretty good
examples of how to do it on

1323
00:56:34,200 --> 00:56:36,770
the Chromium sight.

1324
00:56:36,770 --> 00:56:39,840
And I want to jump to where
we are with Web Audio.

1325
00:56:39,840 --> 00:56:41,490
One of the first questions
is always, So

1326
00:56:41,490 --> 00:56:43,400
is this Chrome only?

1327
00:56:43,400 --> 00:56:47,010
And it is supported in Chrome,
Windows, Mac OS, and Linux.

1328
00:56:47,010 --> 00:56:49,200
ChromeOS actually just
enabled it, as well.

1329
00:56:49,200 --> 00:56:51,650
So we have it on Chrome OS.

1330
00:56:51,650 --> 00:56:55,000
But even more interestingly,
Safari has now enabled in

1331
00:56:55,000 --> 00:56:56,350
nightly builds and
it's shipping in

1332
00:56:56,350 --> 00:56:58,570
the Safari 5.2 beta.

1333
00:56:58,570 --> 00:57:00,650
And, my personal favorite,
it's now on the

1334
00:57:00,650 --> 00:57:02,510
iOS 6 betas, also.

1335
00:57:02,510 --> 00:57:07,430
So you can get the Web Audio
API on your iPhone or iPad.

1336
00:57:07,430 --> 00:57:10,900
Apple actually covered the Web
Audio API in one of their

1337
00:57:10,900 --> 00:57:13,520
sessions in WWDC earlier
this month, which

1338
00:57:13,520 --> 00:57:15,580
I thought was great.

1339
00:57:15,580 --> 00:57:20,300
And we have some really active
discussion going on on the Web

1340
00:57:20,300 --> 00:57:22,510
Audio working group, of
which I'm a member.

1341
00:57:22,510 --> 00:57:25,570
We have a bunch of active
participants from Mozilla,

1342
00:57:25,570 --> 00:57:28,880
Opera, the Internet Explorer
team, a bunch of other

1343
00:57:28,880 --> 00:57:31,230
industry people, as well,
helping to get the

1344
00:57:31,230 --> 00:57:34,500
specification to the point where
we can get rid of vendor

1345
00:57:34,500 --> 00:57:38,290
prefix and turn it into
a solid standard.

1346
00:57:38,290 --> 00:57:40,600
And, of course, if you need
it today though in other

1347
00:57:40,600 --> 00:57:43,580
browsers, use ChromeFrame.

1348
00:57:43,580 --> 00:57:46,570
I promised I would plug
for ChromeFrame, so.

1349
00:57:46,570 --> 00:57:49,610
So we are just about
out of time.

1350
00:57:49,610 --> 00:57:52,520
But I did want to call out two
features that I'm actually

1351
00:57:52,520 --> 00:57:55,090
really excited about coming
up in the future.

1352
00:57:55,090 --> 00:57:58,520
They're not quite there yet, so
I can't demo them, really.

1353
00:57:58,520 --> 00:58:00,460
But they are exciting.

1354
00:58:00,460 --> 00:58:03,880
And I also want to kind of
paint a picture of what I

1355
00:58:03,880 --> 00:58:06,010
really hope people build
and what I'm really

1356
00:58:06,010 --> 00:58:08,300
excited about building.

1357
00:58:08,300 --> 00:58:13,610
First and foremost, I'm super
pumped to have audio input.

1358
00:58:13,610 --> 00:58:16,166
Jan can tell you I keep pinging
the team like, When am

1359
00:58:16,166 --> 00:58:17,410
I gonna get my audio input?

1360
00:58:17,410 --> 00:58:19,700
When am I going to get
my audio input?

1361
00:58:19,700 --> 00:58:21,510
Mostly because I want
to plug a live

1362
00:58:21,510 --> 00:58:23,800
microphone into my vocoder.

1363
00:58:23,800 --> 00:58:27,830
And do stuff like that, like
plug my guitar in and create

1364
00:58:27,830 --> 00:58:30,350
my own guitar amp simulators,
and stuff like that.

1365
00:58:30,350 --> 00:58:34,190
Because they're pretty easy to
do using the Web Audio API.

1366
00:58:34,190 --> 00:58:38,850
Not quite there yet, hopefully
will be in the near future.

1367
00:58:38,850 --> 00:58:41,830
The second one is one that is
a little bit further out.

1368
00:58:41,830 --> 00:58:46,520
But I'm actually the co-editor
of a proposal in the W3C to do

1369
00:58:46,520 --> 00:58:47,660
MIDI input.

1370
00:58:47,660 --> 00:58:50,210
Some of you up front may notice
that I've actually

1371
00:58:50,210 --> 00:58:53,450
driven some of these demos off
a little keyboard here.

1372
00:58:53,450 --> 00:58:56,760
I'm cheating because
that uses a plugin.

1373
00:58:56,760 --> 00:58:58,960
And I've just hard-wired the
plug-in in to do the

1374
00:58:58,960 --> 00:59:00,400
appropriate thing.

1375
00:59:00,400 --> 00:59:04,860
But the specification that I'm
co-editing will eventually

1376
00:59:04,860 --> 00:59:08,180
allow us to have that as part
of the web platform.

1377
00:59:08,180 --> 00:59:10,530
And we can natively just
handle MIDI input.

1378
00:59:10,530 --> 00:59:13,040
So you can do controllers,
you can access external

1379
00:59:13,040 --> 00:59:15,730
synthesizers, you can do all
kinds of cool stuff.

1380
00:59:15,730 --> 00:59:18,620
Light shows are generally driven
by MIDI, as well, like

1381
00:59:18,620 --> 00:59:21,730
all the controllers for the
fancy lights last night are

1382
00:59:21,730 --> 00:59:22,980
driven through that.

1383
00:59:22,980 --> 00:59:25,280

1384
00:59:25,280 --> 00:59:27,470
Now for awesome apps
that I really want

1385
00:59:27,470 --> 00:59:28,980
to see people build?

1386
00:59:28,980 --> 00:59:29,850
There's tons of them.

1387
00:59:29,850 --> 00:59:32,750
First and foremost, great game
audio, like really richly

1388
00:59:32,750 --> 00:59:33,800
interactive.

1389
00:59:33,800 --> 00:59:35,030
Don't just make it beep.

1390
00:59:35,030 --> 00:59:39,170
Make it beep differently
depending on some parameter I

1391
00:59:39,170 --> 00:59:40,150
can't even think of.

1392
00:59:40,150 --> 00:59:42,330
Like how fast someone's
running, or whatever.

1393
00:59:42,330 --> 00:59:45,190
But we have the tools to build
shared music composition

1394
00:59:45,190 --> 00:59:47,460
tools, and digital audio
workstations, and all this

1395
00:59:47,460 --> 00:59:48,710
kind of stuff today.

1396
00:59:48,710 --> 00:59:50,910

1397
00:59:50,910 --> 00:59:54,210
So with that, no deck is
complete without tons of

1398
00:59:54,210 --> 00:59:55,670
references.

1399
00:59:55,670 --> 00:59:57,280
You don't have to
memorize these

1400
00:59:57,280 --> 00:59:59,080
because the deck's posted.

1401
00:59:59,080 --> 01:00:01,110
You don't even have to memorize
the thing at the top,

1402
01:00:01,110 --> 01:00:04,680
because it's on my last slide in
a shortened form and it'll

1403
01:00:04,680 --> 01:00:06,080
be easier to read.

1404
01:00:06,080 --> 01:00:09,700
If you don't already follow
Chrome developers on Google+,

1405
01:00:09,700 --> 01:00:11,270
please add us to a circle.

1406
01:00:11,270 --> 01:00:12,770
We do lots of communication
there.

1407
01:00:12,770 --> 01:00:15,420
But we do try to keep it nice
and concise and useful and

1408
01:00:15,420 --> 01:00:17,790
interesting.

1409
01:00:17,790 --> 01:00:20,610
And with that, thank you.

1410
01:00:20,610 --> 01:00:22,050
We're basically out of time.

1411
01:00:22,050 --> 01:00:23,510
But I'm going to
be around now.

1412
01:00:23,510 --> 01:00:26,500
I'll be outside once we've
packed up here.

1413
01:00:26,500 --> 01:00:29,220
And I'll be doing office hours
for the next hour or two, too,

1414
01:00:29,220 --> 01:00:30,850
if you have other questions.

1415
01:00:30,850 --> 01:00:31,150
Thanks.

1416
01:00:31,150 --> 01:00:35,435
[APPLAUSE]

