1
00:00:00,000 --> 00:00:16,810

2
00:00:16,810 --> 00:00:17,990
PAUL KINLAN: Hi, I'm
Paul Kinlan,

3
00:00:17,990 --> 00:00:19,330
developer advocate to Google.

4
00:00:19,330 --> 00:00:22,930
And today we're going to look at
the Sketchbot experiment in

5
00:00:22,930 --> 00:00:23,870
the Web Lab project.

6
00:00:23,870 --> 00:00:26,770
And with [? Roger ?] and
[? Mattias ?] from B-Reel, do

7
00:00:26,770 --> 00:00:28,100
you guys want to give yourselves
a little bit of an

8
00:00:28,100 --> 00:00:29,810
introduction?

9
00:00:29,810 --> 00:00:30,690
ROGER: I'm [? Roger, ?]

10
00:00:30,690 --> 00:00:33,930
I'm a creative technologist
[INAUDIBLE], and I've been the

11
00:00:33,930 --> 00:00:36,070
technical leader
of the project.

12
00:00:36,070 --> 00:00:37,500
MATTIAS: And I'm
[? Mattias, ?]

13
00:00:37,500 --> 00:00:41,430
also a creative technologist
at B-Reel and been working

14
00:00:41,430 --> 00:00:43,200
with several of the projects.

15
00:00:43,200 --> 00:00:43,800
PAUL KINLAN: Cool.

16
00:00:43,800 --> 00:00:47,440
So welcome to our little studio
and humble campus,

17
00:00:47,440 --> 00:00:50,180
Google campus in London.

18
00:00:50,180 --> 00:00:52,270
So we're going to talk about
the Web Lab project and the

19
00:00:52,270 --> 00:00:54,440
Sketchbot experiment today.

20
00:00:54,440 --> 00:00:57,250
For those who haven't seen Web
Lab, chromeweblab.com I

21
00:00:57,250 --> 00:00:59,030
believe is the correct URL.

22
00:00:59,030 --> 00:00:59,770
MATTIAS: That's right.

23
00:00:59,770 --> 00:01:01,540
PAUL KINLAN: Whoo.

24
00:01:01,540 --> 00:01:04,069
It's a series of five real world
Chrome experiments that

25
00:01:04,069 --> 00:01:07,030
also have a browser-based
interface as well.

26
00:01:07,030 --> 00:01:09,250
And the really cool thing about
Chrome Web Lab is that

27
00:01:09,250 --> 00:01:12,440
the way that you experience
the experiment inside the

28
00:01:12,440 --> 00:01:15,650
museum is the exact same way
that you experience it inside

29
00:01:15,650 --> 00:01:19,610
the browser anywhere
in the world.

30
00:01:19,610 --> 00:01:21,090
I'm really proud of it,
I think it's awesome.

31
00:01:21,090 --> 00:01:23,750
I think it's a very nice thing
inside the museum.

32
00:01:23,750 --> 00:01:25,720
Check our previous Hangout where
we actually went into a

33
00:01:25,720 --> 00:01:28,540
little bit more depth about
Chrome Web Lab.

34
00:01:28,540 --> 00:01:30,500
It's cool, check it out.

35
00:01:30,500 --> 00:01:32,560
Today we're going to talk about
Sketchbots which is one

36
00:01:32,560 --> 00:01:34,490
of the five experiments.

37
00:01:34,490 --> 00:01:36,570
Do you want to give a
brief introduction?

38
00:01:36,570 --> 00:01:39,830
MATTIAS: Yeah, it is basically
eight robots in the museum

39
00:01:39,830 --> 00:01:45,480
drawing your face in sand to
represent how the computers

40
00:01:45,480 --> 00:01:46,380
are seeing you.

41
00:01:46,380 --> 00:01:49,500
PAUL KINLAN: Right, so it
basically takes your photo

42
00:01:49,500 --> 00:01:52,320
inside the museum or online and
then draws it in the sand?

43
00:01:52,320 --> 00:01:53,660
I mean, that sounds
a bit weird.

44
00:01:53,660 --> 00:01:58,000
So we can draw a photo from
here, in the sand and then see

45
00:01:58,000 --> 00:01:59,050
what it looks like later on?

46
00:01:59,050 --> 00:02:00,270
MATTIAS: Yeah.

47
00:02:00,270 --> 00:02:02,700
PAUL KINLAN: That's
pretty cool, man.

48
00:02:02,700 --> 00:02:04,520
I sound like a real
[INAUDIBLE].

49
00:02:04,520 --> 00:02:06,136
I know what it's like.

50
00:02:06,136 --> 00:02:06,830
[LAUGHTER]

51
00:02:06,830 --> 00:02:08,770
PAUL KINLAN: It is pretty
cool, this one.

52
00:02:08,770 --> 00:02:10,580
So as we can see on the screen,
this is the main menu

53
00:02:10,580 --> 00:02:13,410
interface at the moment with
Sketchbots and we can see a

54
00:02:13,410 --> 00:02:18,920
couple of the actual machines
inside the museum.

55
00:02:18,920 --> 00:02:20,170
Let's launch the experiment.

56
00:02:20,170 --> 00:02:22,035

57
00:02:22,035 --> 00:02:23,996
That's pretty cool.

58
00:02:23,996 --> 00:02:26,900
I can say this, every single
time we do a Hangout, I love

59
00:02:26,900 --> 00:02:29,500
the loading screens,
they're very nice.

60
00:02:29,500 --> 00:02:30,650
So who did the loading
screens?

61
00:02:30,650 --> 00:02:32,390
Was it any of you?

62
00:02:32,390 --> 00:02:38,010
MATTIAS: Yeah, it was us and
also our art director who did

63
00:02:38,010 --> 00:02:41,530
the small animations in Flash
and exported them with

64
00:02:41,530 --> 00:02:41,930
[INAUDIBLE].

65
00:02:41,930 --> 00:02:43,420
PAUL KINLAN: Really?

66
00:02:43,420 --> 00:02:45,370
MATTIAS: So it made [INAUDIBLE]
animations in the

67
00:02:45,370 --> 00:02:48,270
start in the logo, in
the corner as well.

68
00:02:48,270 --> 00:02:50,720
PAUL KINLAN: So how
come you use--

69
00:02:50,720 --> 00:02:51,820
I didn't know this.

70
00:02:51,820 --> 00:02:54,670
How come you used
Flash off with?

71
00:02:54,670 --> 00:02:56,890
Is it to the timeline, the way
that you can do timelines and

72
00:02:56,890 --> 00:02:58,180
everything, makes it easier?

73
00:02:58,180 --> 00:03:03,850
ROGER: Yeah, we couldn't find
any HTML5 that was right for

74
00:03:03,850 --> 00:03:05,390
taking this animation.

75
00:03:05,390 --> 00:03:09,070
MATTIAS: Because it's a lot of
gradients and when two shapes

76
00:03:09,070 --> 00:03:11,480
cross each other they should
have a separate color

77
00:03:11,480 --> 00:03:12,830
in just that area.

78
00:03:12,830 --> 00:03:17,140
So it made it much simpler to
work with animations in Flash.

79
00:03:17,140 --> 00:03:18,600
PAUL KINLAN: So that's
pretty interesting,

80
00:03:18,600 --> 00:03:19,880
that's pretty cool.

81
00:03:19,880 --> 00:03:21,240
OK, so let's look at this now.

82
00:03:21,240 --> 00:03:25,480
So this is the Sketchbot
experiments.

83
00:03:25,480 --> 00:03:26,880
I do Spoonerisms quite a lot.

84
00:03:26,880 --> 00:03:29,250
I end up saying the wrong
words completely.

85
00:03:29,250 --> 00:03:33,140
But this is a live stream on the
right hand side from the

86
00:03:33,140 --> 00:03:34,420
actual museum.

87
00:03:34,420 --> 00:03:35,220
ROGER: From the museum.

88
00:03:35,220 --> 00:03:39,070
Yes, so it is what's happening
at the moment in the museum.

89
00:03:39,070 --> 00:03:39,190
So

90
00:03:39,190 --> 00:03:40,630
PAUL KINLAN: I think obviously
the museum is probably

91
00:03:40,630 --> 00:03:41,280
closed right now.

92
00:03:41,280 --> 00:03:42,740
It's probably about sevenish.

93
00:03:42,740 --> 00:03:45,890

94
00:03:45,890 --> 00:03:47,120
ROGER: But the robots are--

95
00:03:47,120 --> 00:03:49,040
PAUL KINLAN: --but
the robots work.

96
00:03:49,040 --> 00:03:50,240
You said there was four.

97
00:03:50,240 --> 00:03:52,610
Is it split for four people
at the museum

98
00:03:52,610 --> 00:03:54,510
and four people online?

99
00:03:54,510 --> 00:03:57,790
When the museum is closed,
does it go to all eight?

100
00:03:57,790 --> 00:04:01,750
MATTIAS: Yeah, all eight
for online users.

101
00:04:01,750 --> 00:04:03,320
PAUL KINLAN: So let's have a
quick jump in because I want

102
00:04:03,320 --> 00:04:05,605
to ask you some stuff about
[INAUDIBLE] and all that type

103
00:04:05,605 --> 00:04:07,350
of stuff as well.

104
00:04:07,350 --> 00:04:08,600
I'm going to take my photo.

105
00:04:08,600 --> 00:04:12,250

106
00:04:12,250 --> 00:04:15,310
And let's just briefly talk
about this page, right?

107
00:04:15,310 --> 00:04:18,700
It doesn't look like there's
lots going on.

108
00:04:18,700 --> 00:04:20,410
But I want to talk about
one over here.

109
00:04:20,410 --> 00:04:22,920
So at the top of the screen--
whoops, sorry.

110
00:04:22,920 --> 00:04:25,220
At the top of the screen here,
we've got chromeweblab.com

111
00:04:25,220 --> 00:04:26,570
wants to use your camera.

112
00:04:26,570 --> 00:04:31,010
Now what API is this that's
producing this alert?

113
00:04:31,010 --> 00:04:34,900
MATTIAS: This is Get User Media
that allows you to get

114
00:04:34,900 --> 00:04:38,030
the camera straight in the
browser instead of going

115
00:04:38,030 --> 00:04:39,100
through a plug-in.

116
00:04:39,100 --> 00:04:41,060
PAUL KINLAN: And this was only
a relatively recent edition

117
00:04:41,060 --> 00:04:43,170
for you all?

118
00:04:43,170 --> 00:04:46,230
ROGER: When we started the
project this wasn't existent.

119
00:04:46,230 --> 00:04:49,138

120
00:04:49,138 --> 00:04:50,772
PAUL KINLAN: Yeah, I remember
was-- did I say this in this

121
00:04:50,772 --> 00:04:52,230
one or the one prior to this?

122
00:04:52,230 --> 00:04:54,250
[LAUGHTER]

123
00:04:54,250 --> 00:04:56,590
PAUL KINLAN: I can't actually
remember whether when we

124
00:04:56,590 --> 00:04:58,770
launched this, when we started
this we kept saying that Get

125
00:04:58,770 --> 00:05:00,510
User Media was like two
or three months off.

126
00:05:00,510 --> 00:05:02,870
And we kept going like two
or three months off.

127
00:05:02,870 --> 00:05:05,770
And then I think is was the
week that you launched or

128
00:05:05,770 --> 00:05:08,980
opened the museum and it finally
landed in stable

129
00:05:08,980 --> 00:05:10,930
Chrome and you guys linked
that across.

130
00:05:10,930 --> 00:05:14,120
So what were you using prior
to this to actually get the

131
00:05:14,120 --> 00:05:15,900
webcam data?

132
00:05:15,900 --> 00:05:16,640
MATTIAS: Flash.

133
00:05:16,640 --> 00:05:17,620
PAUL KINLAN: Just
a simple Flash.

134
00:05:17,620 --> 00:05:18,880
So how would you this time--

135
00:05:18,880 --> 00:05:21,645
I'm always interested about this
because I never got on to

136
00:05:21,645 --> 00:05:23,410
the Flash bandwagon when
I was developing.

137
00:05:23,410 --> 00:05:25,990

138
00:05:25,990 --> 00:05:29,420
My prior life was asp.net.

139
00:05:29,420 --> 00:05:31,520
That's interesting.

140
00:05:31,520 --> 00:05:33,300
You would take something
from the Flash object.

141
00:05:33,300 --> 00:05:34,600
How would you get it
into the page?

142
00:05:34,600 --> 00:05:35,640
Would you--

143
00:05:35,640 --> 00:05:38,470
MATTIAS: --so it's a bridge
between Flash and JavaScript.

144
00:05:38,470 --> 00:05:42,350
We send the raw data of
the image and draw it

145
00:05:42,350 --> 00:05:44,760
with that data URL.

146
00:05:44,760 --> 00:05:45,480
PAUL KINLAN: Oh wow, OK.

147
00:05:45,480 --> 00:05:46,900
So you used the data URL?

148
00:05:46,900 --> 00:05:47,630
MATTIAS: Yeah.

149
00:05:47,630 --> 00:05:49,540
PAUL KINLAN: So that makes
this-- well there is lot of

150
00:05:49,540 --> 00:05:52,232
overhead generally so you
wouldn't need to do animations

151
00:05:52,232 --> 00:05:54,170
for this but--

152
00:05:54,170 --> 00:05:57,940
MATTIAS: We started off trying
to do that and got quite good

153
00:05:57,940 --> 00:06:00,860
results in just sending
the data through.

154
00:06:00,860 --> 00:06:06,010
But we decided to use one
image in the end.

155
00:06:06,010 --> 00:06:08,140
PAUL KINLAN: So let's talk about
an image, let's allow

156
00:06:08,140 --> 00:06:09,982
the camera.

157
00:06:09,982 --> 00:06:11,940
Hey.

158
00:06:11,940 --> 00:06:13,890
I'm not sure how well this is
going to work with the lights

159
00:06:13,890 --> 00:06:15,140
and everything.

160
00:06:15,140 --> 00:06:20,377

161
00:06:20,377 --> 00:06:21,880
There we are.

162
00:06:21,880 --> 00:06:25,890
ROGER: So this is quite
interesting because we wanted

163
00:06:25,890 --> 00:06:29,590
not to have this position
yourself in the frame.

164
00:06:29,590 --> 00:06:31,840
We wanted to have something
more seamless.

165
00:06:31,840 --> 00:06:35,600
So this is using face detection
to detect your face.

166
00:06:35,600 --> 00:06:38,330
PAUL KINLAN: How did you
do the face detection?

167
00:06:38,330 --> 00:06:42,570
MATTIAS: So it's that a program
called Pittsburgh

168
00:06:42,570 --> 00:06:44,770
Pattern Recognition running
on the server.

169
00:06:44,770 --> 00:06:47,840
So we send off your image for
analyzing and it gets back

170
00:06:47,840 --> 00:06:49,500
where your eyes and
mouth and--

171
00:06:49,500 --> 00:06:51,500
PAUL KINLAN: --so all that
[INAUDIBLE] on the server.

172
00:06:51,500 --> 00:06:53,950
You send it to the server and
then bring it back in.

173
00:06:53,950 --> 00:06:55,950
Is that because there was
no JavaScript library?

174
00:06:55,950 --> 00:06:57,200
MATTIAS: Yeah.

175
00:06:57,200 --> 00:06:58,930

176
00:06:58,930 --> 00:07:00,270
PAUL KINLAN: So let's
submit this photo.

177
00:07:00,270 --> 00:07:02,160
I'm really happy
with the photo.

178
00:07:02,160 --> 00:07:05,490
Although there is someone photo
bombing on the side.

179
00:07:05,490 --> 00:07:07,970
I was in Liverpool the other
week and I was walking through

180
00:07:07,970 --> 00:07:11,340
with my son and there was a
model photo shoot going on and

181
00:07:11,340 --> 00:07:14,970
my son was standing there photo
bombing everything and

182
00:07:14,970 --> 00:07:16,720
the photographer was getting
really annoyed.

183
00:07:16,720 --> 00:07:17,880
So sorry.

184
00:07:17,880 --> 00:07:19,340
Anyway, what happened there?

185
00:07:19,340 --> 00:07:21,330
ROGER: Here we will take
the face first and

186
00:07:21,330 --> 00:07:23,520
then we align it.

187
00:07:23,520 --> 00:07:25,610
With [INAUDIBLE].

188
00:07:25,610 --> 00:07:29,510
And here we can turn it into a
binary image, just black and

189
00:07:29,510 --> 00:07:32,170
white which is quite interesting
because we're

190
00:07:32,170 --> 00:07:35,780
using elective press
[? hold. ?]

191
00:07:35,780 --> 00:07:38,450
After that we do the
etch detection.

192
00:07:38,450 --> 00:07:44,900
And finally, we draw the vector
lines with the curves.

193
00:07:44,900 --> 00:07:48,320
PAUL KINLAN: So we need to do
these lines because they want

194
00:07:48,320 --> 00:07:50,550
to translate it to the robots,
the instructions

195
00:07:50,550 --> 00:07:51,900
that draw the commands?

196
00:07:51,900 --> 00:07:52,160
ROGER: Yeah.

197
00:07:52,160 --> 00:07:56,600
PAUL KINLAN: So you mentioned
before that you basically send

198
00:07:56,600 --> 00:07:58,765
the stuff to the server, the
image to the server and did

199
00:07:58,765 --> 00:07:59,780
the process.

200
00:07:59,780 --> 00:08:03,250
But in the user interface we
saw quite a lot of user

201
00:08:03,250 --> 00:08:05,470
interactivity in the sense that
it showed you a line in

202
00:08:05,470 --> 00:08:07,960
the image to verticalize it.

203
00:08:07,960 --> 00:08:10,870
I mean, each of those steps,
was that done by the server

204
00:08:10,870 --> 00:08:13,000
itself and then you--

205
00:08:13,000 --> 00:08:13,290
MATTIAS: No.

206
00:08:13,290 --> 00:08:17,470
Those are done with
web workers.

207
00:08:17,470 --> 00:08:20,310
So it's workers in the
background processing all your

208
00:08:20,310 --> 00:08:23,880
data to make it a smooth
animation.

209
00:08:23,880 --> 00:08:26,380
PAUL KINLAN: So is the first
step to basically detect where

210
00:08:26,380 --> 00:08:27,070
the face is?

211
00:08:27,070 --> 00:08:27,550
ROGER: Yeah.

212
00:08:27,550 --> 00:08:28,740
PAUL KINLAN: And then all the
rest of it is [INAUDIBLE]

213
00:08:28,740 --> 00:08:29,680
inside the browser?

214
00:08:29,680 --> 00:08:30,440
ROGER: Yeah.

215
00:08:30,440 --> 00:08:31,830
It plays inside.

216
00:08:31,830 --> 00:08:33,650
It is done with animation.

217
00:08:33,650 --> 00:08:36,309
MATTIAS: And we do it on the
server side as well when you

218
00:08:36,309 --> 00:08:39,510
submit your photos to your
robots to make sure that no

219
00:08:39,510 --> 00:08:43,655
one injects dirty pictures.

220
00:08:43,655 --> 00:08:44,280
PAUL KINLAN: Yeah,
I can imagine.

221
00:08:44,280 --> 00:08:45,780
So that is pretty cool.

222
00:08:45,780 --> 00:08:49,180
So the point of--

223
00:08:49,180 --> 00:08:49,770
how to say this right.

224
00:08:49,770 --> 00:08:51,430
So you went through a couple of
steps where you desaturated

225
00:08:51,430 --> 00:08:54,780
it and then you turned it into
a binary image and then you

226
00:08:54,780 --> 00:08:57,260
did the outline with
the bezier curves?

227
00:08:57,260 --> 00:08:59,450
I mean, is that a standard
process?

228
00:08:59,450 --> 00:09:03,940
I'm interested in this from how
you actually worked out

229
00:09:03,940 --> 00:09:06,700
the steps that you should take
to make the commands.

230
00:09:06,700 --> 00:09:08,300
ROGER: It is quite standard.

231
00:09:08,300 --> 00:09:12,210
I mean would you want one of
the [INAUDIBLE] to get from

232
00:09:12,210 --> 00:09:16,280
your normal picture to a binary
image where you can do

233
00:09:16,280 --> 00:09:19,160
etch detection and then create
the vector lines.

234
00:09:19,160 --> 00:09:24,430
What we found out is that this
process from creating when you

235
00:09:24,430 --> 00:09:27,210
have a desaturated image like
a black and white image and

236
00:09:27,210 --> 00:09:31,250
you want to create a binary
image, they are just black and

237
00:09:31,250 --> 00:09:32,180
white pixels.

238
00:09:32,180 --> 00:09:36,780
If you are using an [INAUDIBLE]
to do that.

239
00:09:36,780 --> 00:09:39,510
If the user had some kind of
shadow in the face for

240
00:09:39,510 --> 00:09:45,290
example, this was spoiling
everything because it got all

241
00:09:45,290 --> 00:09:48,360
that-- so the vector line would
do something like this

242
00:09:48,360 --> 00:09:50,390
so it would be only
half a face.

243
00:09:50,390 --> 00:09:53,220
So what we ended up using
was one thing

244
00:09:53,220 --> 00:09:55,040
called adaptive threshold.

245
00:09:55,040 --> 00:10:00,720
That what it does instead of
having one threshold and if

246
00:10:00,720 --> 00:10:05,150
the pixels are darker than this,
they are black and if

247
00:10:05,150 --> 00:10:07,530
they are lighter,
they are white.

248
00:10:07,530 --> 00:10:12,030
What we do is each of the
specific pixels has its own

249
00:10:12,030 --> 00:10:14,740
threshold that depends
on the neighbors.

250
00:10:14,740 --> 00:10:15,740
PAUL KINLAN: Oh yeah, OK.

251
00:10:15,740 --> 00:10:20,060
ROGER: Even though you have a
very dark area, you still can

252
00:10:20,060 --> 00:10:22,290
difference in the outlines
of the mouth and the

253
00:10:22,290 --> 00:10:23,000
eyes and the ears.

254
00:10:23,000 --> 00:10:23,800
PAUL KINLAN: That's nice.

255
00:10:23,800 --> 00:10:26,150
So you are using the average
of all of the nine pixels

256
00:10:26,150 --> 00:10:27,220
around it essentially.

257
00:10:27,220 --> 00:10:28,690
That's pretty cool.

258
00:10:28,690 --> 00:10:30,990
Yeah I see that in PhotoShop.

259
00:10:30,990 --> 00:10:33,172
People can write their own, I
don't remember those types of

260
00:10:33,172 --> 00:10:35,370
thing, I'm absolutely
terrible about that.

261
00:10:35,370 --> 00:10:37,370
It is pretty cool.

262
00:10:37,370 --> 00:10:41,215
So at this point we've made the
series of bezier curves

263
00:10:41,215 --> 00:10:42,295
and everything.

264
00:10:42,295 --> 00:10:44,580
Now I actually want to ask this
as a general question

265
00:10:44,580 --> 00:10:47,690
because the reason why I want
to ask this question is

266
00:10:47,690 --> 00:10:49,700
because I have a presentation
to do.

267
00:10:49,700 --> 00:10:52,350
And I want to take a picture
of me, but I want to do a

268
00:10:52,350 --> 00:10:56,850
rough outline of me as,
basically as a bezier curve

269
00:10:56,850 --> 00:11:02,240
because WebKit Mask and WebKit
Clip Regions and everything

270
00:11:02,240 --> 00:11:07,100
take basically what is known
as a SPG path essentially.

271
00:11:07,100 --> 00:11:08,130
Is that something
you did here?

272
00:11:08,130 --> 00:11:12,020
How did you work out the best
bezier curve to go?

273
00:11:12,020 --> 00:11:13,960
How did you work out-- if this
one really interests-- you got

274
00:11:13,960 --> 00:11:16,170
my two eyes there and you know
they are in completely

275
00:11:16,170 --> 00:11:18,790
enclosed paths.

276
00:11:18,790 --> 00:11:21,100
How did you do that?

277
00:11:21,100 --> 00:11:24,480
MATTIAS: It's following
the edge and

278
00:11:24,480 --> 00:11:26,050
trying to connect them.

279
00:11:26,050 --> 00:11:28,620
So you're following the
edge between the

280
00:11:28,620 --> 00:11:31,190
black and the white.

281
00:11:31,190 --> 00:11:35,660
And if they aren't connected,
then we close the path when it

282
00:11:35,660 --> 00:11:37,150
gets all the way around.

283
00:11:37,150 --> 00:11:38,820
PAUL KINLAN: OK, and
it's that simple?

284
00:11:38,820 --> 00:11:40,070
MATTIAS: Yeah.

285
00:11:40,070 --> 00:11:41,820

286
00:11:41,820 --> 00:11:42,530
PAUL KINLAN: I was hoping
my question

287
00:11:42,530 --> 00:11:44,290
would go on a lot longer.

288
00:11:44,290 --> 00:11:45,720
[LAUGHTER]

289
00:11:45,720 --> 00:11:48,090
PAUL KINLAN: So do you know much
about the process between

290
00:11:48,090 --> 00:11:51,660
then sending this to the
actual bots themselves?

291
00:11:51,660 --> 00:11:54,500
I mean because they are two
normally quite physically

292
00:11:54,500 --> 00:11:55,510
disconnected machines.

293
00:11:55,510 --> 00:11:58,830
It is not as if the web server
runs on these bots, right?

294
00:11:58,830 --> 00:12:02,060
So we'll send this to AppEngine
I presume, something

295
00:12:02,060 --> 00:12:02,990
similar to that.

296
00:12:02,990 --> 00:12:06,620
And then how does that data then
get to the bot itself?

297
00:12:06,620 --> 00:12:10,720
MATTIAS: So this is done by
our partner, Tellart, who

298
00:12:10,720 --> 00:12:12,200
built all the robots.

299
00:12:12,200 --> 00:12:16,870
And basically we submit
it to a big queue.

300
00:12:16,870 --> 00:12:22,000
And then the bots itself, I
think they actually have a

301
00:12:22,000 --> 00:12:25,280
small computer running,
or it could be a

302
00:12:25,280 --> 00:12:28,460
virtual instance of it.

303
00:12:28,460 --> 00:12:31,560
But they say I'm ready to do
something new and they get the

304
00:12:31,560 --> 00:12:36,410
next one in the queue in a
central distribution of them.

305
00:12:36,410 --> 00:12:37,050
PAUL KINLAN: That's
pretty cool.

306
00:12:37,050 --> 00:12:39,020
I heard some rumors, I don't
know whether they are true.

307
00:12:39,020 --> 00:12:43,960
So the Sketchbots themselves
which I hope show the video of

308
00:12:43,960 --> 00:12:45,810
my face at least
getting drawn.

309
00:12:45,810 --> 00:12:49,230
I didn't save it, oh no.

310
00:12:49,230 --> 00:12:51,540
OK yes, you can have contact.

311
00:12:51,540 --> 00:12:52,210
That's my email address
for everyone.

312
00:12:52,210 --> 00:12:54,074
[LAUGHTER]

313
00:12:54,074 --> 00:12:56,250
PAUL KINLAN: It's fine,
I'm public anyway.

314
00:12:56,250 --> 00:12:59,280

315
00:12:59,280 --> 00:12:59,750
OK, cool.

316
00:12:59,750 --> 00:13:02,850
So this is where we know
they are busy, right?

317
00:13:02,850 --> 00:13:05,200
But what we can do at least
anyways is we can show what

318
00:13:05,200 --> 00:13:07,230
the actual sketch looked
like as well.

319
00:13:07,230 --> 00:13:11,800
And that's because we record
the actual arm and

320
00:13:11,800 --> 00:13:12,400
everything, don't we?

321
00:13:12,400 --> 00:13:13,700
MATTIAS: Yeah, uh huh.

322
00:13:13,700 --> 00:13:18,610
So now we have yours saved
in the curves.

323
00:13:18,610 --> 00:13:19,580
PAUL KINLAN: Oh, wow.

324
00:13:19,580 --> 00:13:20,960
Yes.

325
00:13:20,960 --> 00:13:22,126
I'm your plus-one there.

326
00:13:22,126 --> 00:13:23,584
I'll tweak it like that.

327
00:13:23,584 --> 00:13:24,400
[LAUGHTER]

328
00:13:24,400 --> 00:13:25,650
PAUL KINLAN: That's
pretty cool.

329
00:13:25,650 --> 00:13:29,410

330
00:13:29,410 --> 00:13:31,640
So what happens here now is that
it'll go off, it's still

331
00:13:31,640 --> 00:13:34,780
in the queue, it hasn't been
processed yet but this is my

332
00:13:34,780 --> 00:13:36,760
client-side representation of
what's just been drawn.

333
00:13:36,760 --> 00:13:39,320
And at some point in the future
it will, well I don't

334
00:13:39,320 --> 00:13:41,160
know how long it will take, but
it'll then go off and draw

335
00:13:41,160 --> 00:13:42,680
it on the machine.

336
00:13:42,680 --> 00:13:44,880
I heard a rumor that there was
like, do you know about this

337
00:13:44,880 --> 00:13:46,690
rumor where they tried
57 different

338
00:13:46,690 --> 00:13:49,600
types of sand or something?

339
00:13:49,600 --> 00:13:50,520
MATTIAS: Haven't heard that.

340
00:13:50,520 --> 00:13:51,400
[LAUGHTER]

341
00:13:51,400 --> 00:13:53,510
PAUL KINLAN: I heard this rumor
that basically what

342
00:13:53,510 --> 00:13:56,460
happened in the project was that
they needed to make sure

343
00:13:56,460 --> 00:13:59,680
that the consistency, basically
what is drawn out in

344
00:13:59,680 --> 00:14:00,990
the commands.

345
00:14:00,990 --> 00:14:02,970
And if we look at the right
hand side, you can see it

346
00:14:02,970 --> 00:14:05,540
working here now with
the arm moving,

347
00:14:05,540 --> 00:14:07,980
drawing someone's face.

348
00:14:07,980 --> 00:14:09,190
MATTIAS: Your face.

349
00:14:09,190 --> 00:14:09,920
PAUL KINLAN: I hope
it is my face.

350
00:14:09,920 --> 00:14:12,490
It is a rather beautiful
face, isn't it?

351
00:14:12,490 --> 00:14:13,110
You didn't say yes.

352
00:14:13,110 --> 00:14:14,850
You were supposed to say yes.

353
00:14:14,850 --> 00:14:16,160
[LAUGHTER]

354
00:14:16,160 --> 00:14:18,180
PAUL KINLAN: But basically
it is going to draw.

355
00:14:18,180 --> 00:14:19,270
It draws something three
or four faces at times.

356
00:14:19,270 --> 00:14:22,620
It looks really cool with the
shadow casting across.

357
00:14:22,620 --> 00:14:26,540
But then the face comes round,
not the face but the sand pit

358
00:14:26,540 --> 00:14:29,740
moves around, wipes out
one of the faces and

359
00:14:29,740 --> 00:14:31,570
then draws the next.

360
00:14:31,570 --> 00:14:34,220
And the rumor that I heard was
to get the consistency so that

361
00:14:34,220 --> 00:14:38,540
the face was already wiped out
from the arm that flattens

362
00:14:38,540 --> 00:14:39,820
everything.

363
00:14:39,820 --> 00:14:42,910
But then the arm that actually
does the drawing itself, if it

364
00:14:42,910 --> 00:14:45,130
was too thick it didn't draw
right or something, and if it

365
00:14:45,130 --> 00:14:48,370
was too thin it didn't
draw right as well.

366
00:14:48,370 --> 00:14:51,180
[INAUDIBLE] if they can just
find the right sand.

367
00:14:51,180 --> 00:14:53,200
I don't know, that's
an urban legend.

368
00:14:53,200 --> 00:14:54,405
But you heard it first here.

369
00:14:54,405 --> 00:14:54,810
[LAUGHTER]

370
00:14:54,810 --> 00:14:58,270
PAUL KINLAN: It is either true
or it's completely false.

371
00:14:58,270 --> 00:14:59,390
That's pretty cool.

372
00:14:59,390 --> 00:15:01,510
The one thing I'd like to talk
about as well is that we do

373
00:15:01,510 --> 00:15:03,772
have a little How
It Works button.

374
00:15:03,772 --> 00:15:06,300

375
00:15:06,300 --> 00:15:08,380
So if you like this and you
want to learn a little bit

376
00:15:08,380 --> 00:15:10,660
more about the browser
technology behind it, we do

377
00:15:10,660 --> 00:15:12,005
have some more information
about the Web Workers.

378
00:15:12,005 --> 00:15:17,360
And I don't know that many
people who use Web Workers, so

379
00:15:17,360 --> 00:15:19,780
you guys using that
is pretty cool.

380
00:15:19,780 --> 00:15:22,570
So actually to jump on the
point of the Web Workers.

381
00:15:22,570 --> 00:15:25,750
I know I'm going all
over the place now.

382
00:15:25,750 --> 00:15:30,740
And this is what proper
planning is meant for.

383
00:15:30,740 --> 00:15:34,610
You're use of the Web Workers,
was that for everything to do

384
00:15:34,610 --> 00:15:35,610
with image?

385
00:15:35,610 --> 00:15:38,560
MATTIAS: Yeah so all the image
processing is done in--

386
00:15:38,560 --> 00:15:40,510
PAUL KINLAN: --so how did it
work right because there was

387
00:15:40,510 --> 00:15:41,770
multiple steps.

388
00:15:41,770 --> 00:15:47,720
You desaturated, then black
and white thinged.

389
00:15:47,720 --> 00:15:49,360
Thinged?

390
00:15:49,360 --> 00:15:52,350
And then you went around
with the bezier curve.

391
00:15:52,350 --> 00:15:52,990
Did you orchestrate?

392
00:15:52,990 --> 00:15:55,480
Was that one big process
in the Web Worker?

393
00:15:55,480 --> 00:16:01,250
MATTIAS: No, it was calling
different, especially when it

394
00:16:01,250 --> 00:16:05,870
comes to the de-saturation and
the adaptive threshold.

395
00:16:05,870 --> 00:16:10,140
It's a lot of the same just with
different values to get

396
00:16:10,140 --> 00:16:11,900
it into the animation to--

397
00:16:11,900 --> 00:16:14,400
PAUL KINLAN: OK, so you
basically get the Web Worker

398
00:16:14,400 --> 00:16:16,080
to do a small piece of work
and then it'll deliver the

399
00:16:16,080 --> 00:16:18,120
result and then you'll
orchestrate that with the

400
00:16:18,120 --> 00:16:19,050
animation and then--

401
00:16:19,050 --> 00:16:19,740
MATTIAS: Yeah.

402
00:16:19,740 --> 00:16:20,570
PAUL KINLAN: Nice, OK.

403
00:16:20,570 --> 00:16:24,040
So the actual Web Worker itself,
how did you get the

404
00:16:24,040 --> 00:16:24,600
data to [? run ?]

405
00:16:24,600 --> 00:16:26,560
[? out ?] because Post Messages

406
00:16:26,560 --> 00:16:28,640
normally takes strings.

407
00:16:28,640 --> 00:16:30,830
And in a lot of cases then you
can do JavaScript objects and

408
00:16:30,830 --> 00:16:33,980
transferables as well to try
and deliver the data

409
00:16:33,980 --> 00:16:35,180
efficiently.

410
00:16:35,180 --> 00:16:36,290
How did you get the
data between?

411
00:16:36,290 --> 00:16:37,820
Was it one basic [INAUDIBLE]

412
00:16:37,820 --> 00:16:39,780
decoded image?

413
00:16:39,780 --> 00:16:43,740
ROGER: Yeah, I believe it was
sending in an image and

414
00:16:43,740 --> 00:16:45,730
sending it back.

415
00:16:45,730 --> 00:16:46,830
MATTIAS: I think so, yeah.

416
00:16:46,830 --> 00:16:48,680
I can't remember
now with the--

417
00:16:48,680 --> 00:16:50,120
ROGER: We'll find out.

418
00:16:50,120 --> 00:16:51,540
PAUL KINLAN: That's interesting
because I know a

419
00:16:51,540 --> 00:16:52,840
lot of people who
have [INAUDIBLE]

420
00:16:52,840 --> 00:16:55,350
to do stuff with Web Workers
but can't send

421
00:16:55,350 --> 00:16:56,490
in that much data.

422
00:16:56,490 --> 00:16:58,920
It's like they don't know
whether it's worth the benefit

423
00:16:58,920 --> 00:17:00,760
of actually using the Web
Worker instead of

424
00:17:00,760 --> 00:17:02,120
processing it in.

425
00:17:02,120 --> 00:17:06,160
I'm presuming it was very
worth it in this project

426
00:17:06,160 --> 00:17:08,489
because actually de-saturating
an image of a multiple steps

427
00:17:08,489 --> 00:17:11,390
and animating it at
the time is pretty

428
00:17:11,390 --> 00:17:12,589
processor intensive, right?

429
00:17:12,589 --> 00:17:13,300
ROGER: Yeah.

430
00:17:13,300 --> 00:17:17,575
Otherwise everything freezed and
then you couldn't see any

431
00:17:17,575 --> 00:17:18,420
of the animation.

432
00:17:18,420 --> 00:17:22,740
MATTIAS: You don't want to lock
the user interface while

433
00:17:22,740 --> 00:17:25,750
doing some image processing.

434
00:17:25,750 --> 00:17:27,040
PAUL KINLAN: I think that has
been key with a lot of this

435
00:17:27,040 --> 00:17:30,980
project is that we've tried
to have this seamless user

436
00:17:30,980 --> 00:17:33,100
experience flow throughout
the whole thing.

437
00:17:33,100 --> 00:17:35,410
There should be no jank.

438
00:17:35,410 --> 00:17:35,750
Yank or jank.

439
00:17:35,750 --> 00:17:38,090
I never know which way they say
it in America, but I think

440
00:17:38,090 --> 00:17:39,380
it is jank.

441
00:17:39,380 --> 00:17:43,110
There are stops are in between
animations and even a 20

442
00:17:43,110 --> 00:17:45,460
millisecond delay, you can
notice it when scrolling and

443
00:17:45,460 --> 00:17:47,160
all that type of stuff.

444
00:17:47,160 --> 00:17:49,770
So I think it is pretty
interesting how you use Web

445
00:17:49,770 --> 00:17:50,440
Workers in this project.

446
00:17:50,440 --> 00:17:52,990
MATTIAS: And I think it changed
also during the

447
00:17:52,990 --> 00:17:59,060
process of this project where it
was copying all the data in

448
00:17:59,060 --> 00:18:02,840
the beginning and now
it transfers the

449
00:18:02,840 --> 00:18:04,630
data so it gets unusable.

450
00:18:04,630 --> 00:18:07,210
PAUL KINLAN: Oh, so this uses
the transferable objects?

451
00:18:07,210 --> 00:18:11,500
MATTIAS: Yeah, we had
that switch and

452
00:18:11,500 --> 00:18:12,980
while we were working.

453
00:18:12,980 --> 00:18:16,230
We couldn't understand why it
was where we couldn't use the

454
00:18:16,230 --> 00:18:18,010
data anymore.

455
00:18:18,010 --> 00:18:19,760
PAUL KINLAN: That's pretty
interesting because as a bit

456
00:18:19,760 --> 00:18:20,635
of background for this.

457
00:18:20,635 --> 00:18:23,710
So Web Workers, you can deliver
data in two ways.

458
00:18:23,710 --> 00:18:26,700
You can post-- one way,
post message.

459
00:18:26,700 --> 00:18:30,170
That means you have to send
message from one process into

460
00:18:30,170 --> 00:18:31,460
another process.

461
00:18:31,460 --> 00:18:33,630
And it's actually relatively
heavyweight to be able to do

462
00:18:33,630 --> 00:18:36,000
that because you have to
serialize, say it was a two

463
00:18:36,000 --> 00:18:38,110
megabyte string, like a base-64

464
00:18:38,110 --> 00:18:39,030
encoded string or something.

465
00:18:39,030 --> 00:18:42,090
You have to take that string,
serialize it, pass it across

466
00:18:42,090 --> 00:18:45,350
the IPC like jump essentially.

467
00:18:45,350 --> 00:18:47,000
De-serialize it, it do
the work on it and

468
00:18:47,000 --> 00:18:48,130
then send it back.

469
00:18:48,130 --> 00:18:48,990
Do the same thing as well.

470
00:18:48,990 --> 00:18:50,910
So you end up with four or five
copies of the same piece

471
00:18:50,910 --> 00:18:53,660
of data, or manipulated
data at least.

472
00:18:53,660 --> 00:18:57,720
And to some extent, what
happened probably about eight

473
00:18:57,720 --> 00:19:02,390
months ago I think it was,
WebKit introduced post message

474
00:19:02,390 --> 00:19:03,350
with transferables.

475
00:19:03,350 --> 00:19:05,530
And the idea behind
transferables is that it is

476
00:19:05,530 --> 00:19:06,540
zero memory copy.

477
00:19:06,540 --> 00:19:09,170
So the idea, and I keep
saying the idea is.

478
00:19:09,170 --> 00:19:10,690
The theory this time.

479
00:19:10,690 --> 00:19:13,930
The reason why we want to do
this is we want to make sure

480
00:19:13,930 --> 00:19:16,100
that you have data in one
application, you deliver it

481
00:19:16,100 --> 00:19:20,330
another application of the
webpage, nearly instantly by

482
00:19:20,330 --> 00:19:23,450
saying we're going to copy
the memory across.

483
00:19:23,450 --> 00:19:25,350
You don't do a copy of memory,
you pass it from one

484
00:19:25,350 --> 00:19:27,560
application to another.

485
00:19:27,560 --> 00:19:28,390
It's pretty quick.

486
00:19:28,390 --> 00:19:30,930
We've got some stats on
html5rocks.com which actually

487
00:19:30,930 --> 00:19:34,040
tell you some of the benefits
of using it.

488
00:19:34,040 --> 00:19:36,020
The problem is it introduces a
bit of a different programming

489
00:19:36,020 --> 00:19:39,460
model where if you have some
data in the ray, for instance

490
00:19:39,460 --> 00:19:41,470
on the client, you lose control
of it when you send it

491
00:19:41,470 --> 00:19:42,800
to a remote application.

492
00:19:42,800 --> 00:19:44,884
But it's a lot faster.

493
00:19:44,884 --> 00:19:46,820
So check it out.

494
00:19:46,820 --> 00:19:49,600
I think that's it for
this experiment.

495
00:19:49,600 --> 00:19:50,080
MATTIAS: Yeah.

496
00:19:50,080 --> 00:19:51,770
PAUL KINLAN: Yes, so join us
next time for our next

497
00:19:51,770 --> 00:19:54,100
Hangout, where we're going to
talk about one of our other

498
00:19:54,100 --> 00:19:55,350
most awesome experiments.

499
00:19:55,350 --> 00:20:05,233

