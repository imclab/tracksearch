1
00:00:01,000 --> 00:00:02,501
Cromwell: Hi, good afternoon.

2
00:00:02,501 --> 00:00:04,501
My name is, uh, Ray Cromwell.
And this is Phil Rogers.

3
00:00:04,501 --> 00:00:07,501
And we're members
of the Google Web Toolkit team.

4
00:00:07,501 --> 00:00:09,000
And today, our session is called

5
00:00:09,000 --> 00:00:11,834
"Kick-Ass Game Programming
with Google Web Toolkit."

6
00:00:11,834 --> 00:00:13,300
Now you might be saying,

7
00:00:13,300 --> 00:00:15,133
what does "kick-ass
game programming" mean?

8
00:00:15,133 --> 00:00:17,167
So we think it means
two things--

9
00:00:17,167 --> 00:00:18,968
the first is
that the kind of games

10
00:00:18,968 --> 00:00:20,801
that you'll be able to produce

11
00:00:20,801 --> 00:00:22,801
using some of the tools
we're going to show you today

12
00:00:22,801 --> 00:00:25,300
are not kind of, like,
HTML5 toys or prototypes

13
00:00:25,300 --> 00:00:27,300
or kind of, like,
hobby curiosities.

14
00:00:27,300 --> 00:00:29,300
But they'll be real games
that, um,

15
00:00:29,300 --> 00:00:30,801
will be fun to play,

16
00:00:30,801 --> 00:00:32,634
and that people
will be willing to pay for.

17
00:00:32,634 --> 00:00:34,300
And the second thing is,

18
00:00:34,300 --> 00:00:36,133
is that by using
some of the tools,

19
00:00:36,133 --> 00:00:37,968
you'll get such a boost
in productivity

20
00:00:37,968 --> 00:00:39,467
that you'll feel

21
00:00:39,467 --> 00:00:41,467
that just the programming
itself kicks ass.

22
00:00:41,467 --> 00:00:43,801
So if you remember
from last year,

23
00:00:43,801 --> 00:00:47,133
um, we show--we showed
the "Quake 2" port to HTML5

24
00:00:47,133 --> 00:00:49,300
called "GWT Quake,"
and that was done with GWT also.

25
00:00:49,300 --> 00:00:52,467
And, um, I thought that was
a pretty kick-ass demo,

26
00:00:52,467 --> 00:00:54,467
but a lot of people came to me
and said, you know,

27
00:00:54,467 --> 00:00:57,968
"Could you show me something
more recent than 1997?"

28
00:00:57,968 --> 00:00:59,968
[laughter]
Cromwell: So, um, this year,

29
00:00:59,968 --> 00:01:01,701
we were happy to oblige,

30
00:01:01,701 --> 00:01:03,367
and in partnership with Rovio,

31
00:01:03,367 --> 00:01:06,868
who did an incredible job
on short notice using its tools,

32
00:01:06,868 --> 00:01:08,868
um, we're happy to show you
"Angry Birds,"

33
00:01:08,868 --> 00:01:10,534
which you might've saw
in the keynote.

34
00:01:10,534 --> 00:01:13,801
And I'll tell you some things
about it as Phil is playing it.

35
00:01:15,667 --> 00:01:17,667
So one of the things,
of course,

36
00:01:17,667 --> 00:01:19,667
is that it runs
incredibly smoothly

37
00:01:19,667 --> 00:01:21,334
at 60 frames per second

38
00:01:21,334 --> 00:01:23,667
using, uh, WebGL

39
00:01:23,667 --> 00:01:25,501
or whatever technology
your browser has

40
00:01:25,501 --> 00:01:27,000
to do the rendering.

41
00:01:27,000 --> 00:01:29,167
And so as we were building this,

42
00:01:29,167 --> 00:01:32,000
one of the concerns we had was
the physics performance.

43
00:01:32,000 --> 00:01:33,667
So, you know, "Angry Birds"

44
00:01:33,667 --> 00:01:35,501
is a computationally
intensive game.

45
00:01:35,501 --> 00:01:38,000
When you smash down the level,
the, um--

46
00:01:38,000 --> 00:01:40,000
your engine
basically has to calculate

47
00:01:40,000 --> 00:01:43,000
where each and every one
of the pieces has to land

48
00:01:43,000 --> 00:01:45,167
in terms of their interactions
and their collisions.

49
00:01:45,167 --> 00:01:47,000
And that's very intensive,
so we were wondering,

50
00:01:47,000 --> 00:01:48,667
Was JavaScript fast enough
to run it?

51
00:01:48,667 --> 00:01:50,334
And thankfully,
the answer is yes.

52
00:01:50,334 --> 00:01:53,834
So with Chrome 11,
V8 is just so incredibly fast

53
00:01:53,834 --> 00:01:57,200
that the physics layer runs
buttery smooth.

54
00:01:57,200 --> 00:01:59,167
But three things I want to say
about

55
00:01:59,167 --> 00:02:01,167
the actual implementation--
Bird: Aah! Ow!

56
00:02:01,167 --> 00:02:03,234
Cromwell: Don't get
carried away, Phil. [laughs]

57
00:02:03,234 --> 00:02:05,567
Three things I want to say
about the implementation are,

58
00:02:05,567 --> 00:02:08,567
is that, one, uh,
it was built with GWT,

59
00:02:08,567 --> 00:02:12,067
two, it was built with--
purely with HTML5 technology,

60
00:02:12,067 --> 00:02:15,567
and three, it was built
with a new library for GWT

61
00:02:15,567 --> 00:02:17,234
that allows you to write games

62
00:02:17,234 --> 00:02:19,567
that we're going to present
to you today.

63
00:02:19,567 --> 00:02:21,567
So, um, if, you know,
Phil can manage

64
00:02:21,567 --> 00:02:23,567
to stop playing--

65
00:02:23,567 --> 00:02:25,567
and all right,
I'll tell you what,

66
00:02:25,567 --> 00:02:27,234
I'll let you shoot
one more bird.

67
00:02:27,234 --> 00:02:29,234
Rogers: All right.
[chuckles]

68
00:02:29,234 --> 00:02:32,901
Cromwell: All right.
Bird: Aah!

69
00:02:32,901 --> 00:02:36,667
Oh... got it.
[applause]

70
00:02:36,667 --> 00:02:39,501
Cromwell: Okay, so the question
some people might have

71
00:02:39,501 --> 00:02:42,501
is, "Why GWT"?
What is GWT going to do for you?

72
00:02:42,501 --> 00:02:44,501
So if you're a seasoned
GWT developer,

73
00:02:44,501 --> 00:02:47,000
you already know
that GWT is pretty awesome

74
00:02:47,000 --> 00:02:49,000
for developing enterprise apps.

75
00:02:49,000 --> 00:02:51,501
But, you know, games, you know--

76
00:02:51,501 --> 00:02:53,501
does enterprise have
anything to do with games?

77
00:02:53,501 --> 00:02:56,501
Well, if you're
a beginner JavaScript pro--

78
00:02:56,501 --> 00:02:58,000
um, GWT programmer,

79
00:02:58,000 --> 00:02:59,834
or JavaScript--
JavaScript programmer,

80
00:02:59,834 --> 00:03:01,567
you might be saying,

81
00:03:01,567 --> 00:03:03,400
"I already know
how to write JavaScript.

82
00:03:03,400 --> 00:03:05,400
"I already know HTML5
and CSS and Canvas.

83
00:03:05,400 --> 00:03:07,234
"Why would I
write my game in GWT

84
00:03:07,234 --> 00:03:09,234
when I can just do it by hand?
What--where's the benefit?"

85
00:03:09,234 --> 00:03:12,567
And I'm not going to say,
actually, you should use GWT.

86
00:03:12,567 --> 00:03:15,067
Um, if you are most comfortable
in JavaScript,

87
00:03:15,067 --> 00:03:17,400
or your team is most comfortable
in JavaScript and HTML5,

88
00:03:17,400 --> 00:03:19,067
that's a very viable strategy,

89
00:03:19,067 --> 00:03:20,901
and it's a very good way
to write a game.

90
00:03:20,901 --> 00:03:23,067
And as many of the presentations
that Google I/O has shown you,

91
00:03:23,067 --> 00:03:26,067
including Seth's awesome
"Super Browser Turbo Mix HD,"

92
00:03:26,067 --> 00:03:27,567
showed you yesterday,

93
00:03:27,567 --> 00:03:30,901
you can build a game very fast
in HTML5 and JavaScript.

94
00:03:30,901 --> 00:03:33,901
But hopefully, we can show you
a few additional things

95
00:03:33,901 --> 00:03:35,400
that GWT can provide

96
00:03:35,400 --> 00:03:37,434
that might persuade you
to just try it out,

97
00:03:37,434 --> 00:03:40,067
because, um,
it's going to boost, um,

98
00:03:40,067 --> 00:03:41,901
some of your capabilities.

99
00:03:41,901 --> 00:03:44,734
So let's take a look
at some of those.

100
00:03:44,734 --> 00:03:48,400
First, um, it lets you leverage
a familiar Java toolchain.

101
00:03:48,400 --> 00:03:50,400
So if you're
a Java programmer already,

102
00:03:50,400 --> 00:03:52,067
and you like Java IDE,

103
00:03:52,067 --> 00:03:53,901
if you like Eclipse
or IntelliJ,

104
00:03:53,901 --> 00:03:56,567
you like your debug environment,
you like your build system,

105
00:03:56,567 --> 00:03:58,734
you like your testing framework,

106
00:03:58,734 --> 00:04:00,567
um, you're gonna get
all of that.

107
00:04:00,567 --> 00:04:02,634
Plus, you can leverage
a lot of libraries

108
00:04:02,634 --> 00:04:04,634
that are already out there
in the ecosystem,

109
00:04:04,634 --> 00:04:07,133
like physics libraries,
AI libraries,

110
00:04:07,133 --> 00:04:08,968
image processing libraries,
and so on

111
00:04:08,968 --> 00:04:10,634
without having to do much work.

112
00:04:10,634 --> 00:04:12,467
So you sort of get
to leverage stuff--

113
00:04:12,467 --> 00:04:14,300
work that people
have already done.

114
00:04:14,300 --> 00:04:16,300
The second thing is,
is that you can share code

115
00:04:16,300 --> 00:04:17,968
between the client
and the server.

116
00:04:17,968 --> 00:04:19,801
So let's say you've got a game,

117
00:04:19,801 --> 00:04:22,300
and you want to put
anti-cheat mechanisms in it.

118
00:04:22,300 --> 00:04:24,801
So you're posting high scores
back to the server,

119
00:04:24,801 --> 00:04:26,801
and you don't want people
to just, like,

120
00:04:26,801 --> 00:04:29,133
do their own HTTP or XHR post
to your server and say,

121
00:04:29,133 --> 00:04:30,801
"I got a million points."

122
00:04:30,801 --> 00:04:32,467
So how would you verify that?

123
00:04:32,467 --> 00:04:34,634
So one of the things you can do
is you can take your game logic,

124
00:04:34,634 --> 00:04:37,133
like, um, your physics
and your AI,

125
00:04:37,133 --> 00:04:39,467
and since it's written in Java,
you can run 'em on the server,

126
00:04:39,467 --> 00:04:40,968
like an app engine,

127
00:04:40,968 --> 00:04:42,801
so that when you post
a high score,

128
00:04:42,801 --> 00:04:44,667
you can send over
a couple bits of data,

129
00:04:44,667 --> 00:04:46,267
like what the user actions were

130
00:04:46,267 --> 00:04:48,100
and what the random number
generator seeds were,

131
00:04:48,100 --> 00:04:49,601
and replay the game

132
00:04:49,601 --> 00:04:51,434
in the server engine
environment,

133
00:04:51,434 --> 00:04:54,100
and validate that actually
what they were saying is true.

134
00:04:54,100 --> 00:04:55,767
And that's actually, um,

135
00:04:55,767 --> 00:04:57,601
we've actually done
some work on that,

136
00:04:57,601 --> 00:04:59,267
and it works pretty well.

137
00:04:59,267 --> 00:05:01,167
So you get to leverage code
between platforms,

138
00:05:01,167 --> 00:05:02,667
including, say, Android.

139
00:05:02,667 --> 00:05:04,501
So you might've
written some code where--

140
00:05:04,501 --> 00:05:06,501
for your game on HTML5,
but since it's written in Java,

141
00:05:06,501 --> 00:05:08,667
you could reuse those same
classes for an Android game.

142
00:05:08,667 --> 00:05:10,667
So that's another benefit
you get.

143
00:05:10,667 --> 00:05:12,501
And then you also get,
of course,

144
00:05:12,501 --> 00:05:14,000
small, fast JavaScript.

145
00:05:14,000 --> 00:05:16,334
So let's go to the next slide.

146
00:05:16,334 --> 00:05:19,334
So as an example of leveraging
familiar tools,

147
00:05:19,334 --> 00:05:21,501
you might be familiar
with Box2D.

148
00:05:21,501 --> 00:05:23,334
It was originally a C++ library

149
00:05:23,334 --> 00:05:25,667
to emulate rigid-body
2-D physics.

150
00:05:25,667 --> 00:05:28,167
And I don't know what
the actual statistics are,

151
00:05:28,167 --> 00:05:30,167
but probably 90%
of all the top games

152
00:05:30,167 --> 00:05:32,667
in the iPhone store
were written using Box2D,

153
00:05:32,667 --> 00:05:34,667
including, like, "Angry Birds."

154
00:05:34,667 --> 00:05:37,501
So it's very, very popular
for doing game engines.

155
00:05:37,501 --> 00:05:40,167
Um, now some guys
actually went out

156
00:05:40,167 --> 00:05:42,667
and they ported it to Java.
It's called JBox2D.

157
00:05:42,667 --> 00:05:44,501
And that's been around
for a while,

158
00:05:44,501 --> 00:05:46,501
but I don't know very many
people who are using it.

159
00:05:46,501 --> 00:05:49,334
And that actually helped us
out a lot,

160
00:05:49,334 --> 00:05:52,033
because a couple of guys
at Google saw that library,

161
00:05:52,033 --> 00:05:54,334
and in just 30 minutes,
they were able to port it

162
00:05:54,334 --> 00:05:56,834
and optimize it
to run efficiently in V8

163
00:05:56,834 --> 00:05:58,834
inside the browser with GWT.

164
00:05:58,834 --> 00:06:00,501
So that demonstrates the ability

165
00:06:00,501 --> 00:06:02,567
to leverage
the existing ecosystem

166
00:06:02,567 --> 00:06:04,234
very effectively with GWT

167
00:06:04,234 --> 00:06:06,234
and also to leverage,
um, code-sharing,

168
00:06:06,234 --> 00:06:08,234
because it was originally
written in Java

169
00:06:08,234 --> 00:06:10,000
for an--
a whole nother platform,

170
00:06:10,000 --> 00:06:13,567
and we were able
to repurpose it.

171
00:06:13,567 --> 00:06:16,067
So just to sort of, um,

172
00:06:16,067 --> 00:06:18,067
say a few things
about the GWT Compiler,

173
00:06:18,067 --> 00:06:20,067
which actually I happen
to work on.

174
00:06:20,067 --> 00:06:23,400
Um, it basically is not just
a Java-to-JavaScript translator.

175
00:06:23,400 --> 00:06:25,734
It's an optimizing compiler
like a regular C compiler.

176
00:06:25,734 --> 00:06:27,734
And what it does
is it does things

177
00:06:27,734 --> 00:06:29,567
like removing unused code.

178
00:06:29,567 --> 00:06:31,567
It evaluates things that--
in compile time

179
00:06:31,567 --> 00:06:33,567
that it doesn't need
to do at run time.

180
00:06:33,567 --> 00:06:35,067
It inlines functions,

181
00:06:35,067 --> 00:06:37,400
and it heavily obfuscates
the result.

182
00:06:37,400 --> 00:06:40,067
So, um, one aspect of that

183
00:06:40,067 --> 00:06:42,067
is that smaller code
tends to load faster.

184
00:06:42,067 --> 00:06:44,067
So the smaller the code
that's compiled,

185
00:06:44,067 --> 00:06:46,067
the faster your game's
gonna load up.

186
00:06:46,067 --> 00:06:48,400
Secondly, when it
compiles the code,

187
00:06:48,400 --> 00:06:50,567
it computes a hash
of the code,

188
00:06:50,567 --> 00:06:53,400
and it names the output file
according to that hash.

189
00:06:53,400 --> 00:06:55,400
Now that's very important,
because it allows us

190
00:06:55,400 --> 00:06:57,400
to do something
called perfect caching.

191
00:06:57,400 --> 00:06:59,567
So when the user
accesses your game,

192
00:06:59,567 --> 00:07:02,467
it--the file name is related
to the actual bytes

193
00:07:02,467 --> 00:07:04,133
of the original source code.

194
00:07:04,133 --> 00:07:07,133
And that--your browser's told
to cache that forever.

195
00:07:07,133 --> 00:07:09,801
So the next time you come
to play the game,

196
00:07:09,801 --> 00:07:11,634
even if you're offline
or online,

197
00:07:11,634 --> 00:07:13,467
it doesn't even go
to the web server at all

198
00:07:13,467 --> 00:07:15,467
to even check if it's been
updated or changed.

199
00:07:15,467 --> 00:07:17,801
It basically says, "Oh,
I'm just gonna load that up.

200
00:07:17,801 --> 00:07:19,801
It's cached forever
right out of my cache."

201
00:07:19,801 --> 00:07:21,801
Now if you do happen
to change the game,

202
00:07:21,801 --> 00:07:23,801
what happens is, is you get
a new file on the server

203
00:07:23,801 --> 00:07:25,467
that has a different file name,

204
00:07:25,467 --> 00:07:27,801
and there's a very small GWT
booster app script

205
00:07:27,801 --> 00:07:30,300
that checks, um--
that--that is downloaded

206
00:07:30,300 --> 00:07:32,300
and basically points you
at the new--

207
00:07:32,300 --> 00:07:33,801
redirects you to the new file.

208
00:07:33,801 --> 00:07:35,801
But that's only gonna
be downloaded once,

209
00:07:35,801 --> 00:07:37,501
so you only download
when things change.

210
00:07:37,501 --> 00:07:40,000
Actually, you might have to go
the server to revalidate.

211
00:07:40,000 --> 00:07:42,000
Last but not least,
inlining the code

212
00:07:42,000 --> 00:07:44,000
actually helps the compiler
make it smaller,

213
00:07:44,000 --> 00:07:45,801
believe it or not.

214
00:07:45,801 --> 00:07:47,868
But for every function call
you eliminate,

215
00:07:47,868 --> 00:07:49,934
that's excess overhead
in your run time

216
00:07:49,934 --> 00:07:51,934
that the V8 engine
doesn't have to worry

217
00:07:51,934 --> 00:07:53,501
about trying to optimize.

218
00:07:53,501 --> 00:07:55,100
So inlining also speeds
things up,

219
00:07:55,100 --> 00:07:58,934
so you get smaller code
and faster code.

220
00:07:58,934 --> 00:08:01,801
So let's talk a little bit
about HTML5,

221
00:08:01,801 --> 00:08:05,033
because HTML5--
when people use the term,

222
00:08:05,033 --> 00:08:07,000
it actually tends to mean
two different things.

223
00:08:07,000 --> 00:08:08,934
So there's the HTML5 spec

224
00:08:08,934 --> 00:08:10,934
that's in
the standards committees,

225
00:08:10,934 --> 00:08:12,734
which is the formal HTML5 spec.

226
00:08:12,734 --> 00:08:14,868
And that includes things like,
you know, Canvas,

227
00:08:14,868 --> 00:08:18,033
and audio tags and video tags
and the app cache,

228
00:08:18,033 --> 00:08:20,701
but it doesn't include things
like WebGL

229
00:08:20,701 --> 00:08:24,033
or, um, say,
the new web audio API.

230
00:08:24,033 --> 00:08:26,033
But when you go look around
in the Twittersphere

231
00:08:26,033 --> 00:08:28,367
or the blogosphere,
and people say "HTML5,"

232
00:08:28,367 --> 00:08:30,367
what they really mean
is colloquial HTML5.

233
00:08:30,367 --> 00:08:33,200
They mean what's
in the latest sort of tip

234
00:08:33,200 --> 00:08:35,701
of the source repositories
of the browsers out there,

235
00:08:35,701 --> 00:08:37,534
the latest things they've added,

236
00:08:37,534 --> 00:08:40,267
because HTML5 is
a continuously evolving spec.

237
00:08:40,267 --> 00:08:42,601
And so that's what
we're kind of targeting,

238
00:08:42,601 --> 00:08:44,767
and so throughout the rest
of the presentation,

239
00:08:44,767 --> 00:08:47,267
when we talk about HTML5,
that's what we're talking about.

240
00:08:47,267 --> 00:08:49,267
But so what does HTML5
do for games?

241
00:08:49,267 --> 00:08:51,100
So WebGL is big.

242
00:08:51,100 --> 00:08:52,934
Any browser
that has WebGL will able--

243
00:08:52,934 --> 00:08:54,767
will be able to really,

244
00:08:54,767 --> 00:08:56,767
really accelerate
graphics operations

245
00:08:56,767 --> 00:08:58,267
directly to the hardware.

246
00:08:58,267 --> 00:09:00,100
You won't have
much of JavaScript

247
00:09:00,100 --> 00:09:02,000
or the operating system
getting in the way.

248
00:09:02,000 --> 00:09:03,834
If you don't happen
to have that,

249
00:09:03,834 --> 00:09:05,667
um, CSS 3 is usually
hardware-accelerated

250
00:09:05,667 --> 00:09:07,834
on many platforms,
including mobile platforms,

251
00:09:07,834 --> 00:09:09,834
so that actually is
a big help, as well.

252
00:09:09,834 --> 00:09:12,000
And we're gonna show you
in some demos later

253
00:09:12,000 --> 00:09:14,501
how we leverage those things.

254
00:09:14,501 --> 00:09:17,334
So next slide.

255
00:09:17,334 --> 00:09:19,501
So let's talk a little bit
about the game--

256
00:09:19,501 --> 00:09:22,501
overview of a game architecture
before we move on.

257
00:09:22,501 --> 00:09:24,501
So typically, you need
three things

258
00:09:24,501 --> 00:09:26,000
when you're programming a game.

259
00:09:26,000 --> 00:09:27,501
First, your game
needs to be able

260
00:09:27,501 --> 00:09:29,267
to communicate
with the outside world.

261
00:09:29,267 --> 00:09:31,501
And that means you need to be
able to get input from the user,

262
00:09:31,501 --> 00:09:33,501
like he pulls the trigger
to fire,

263
00:09:33,501 --> 00:09:35,501
or you get a packet
over the network

264
00:09:35,501 --> 00:09:37,501
because some other person
pulled a trigger,

265
00:09:37,501 --> 00:09:39,000
and he's firing at you.

266
00:09:39,000 --> 00:09:41,000
And you need output.
So you need to be able to, um,

267
00:09:41,000 --> 00:09:43,000
display those changes
back to the user.

268
00:09:43,000 --> 00:09:45,000
And you need to be able
to play sounds,

269
00:09:45,000 --> 00:09:47,000
and you need to be able
to send packets

270
00:09:47,000 --> 00:09:49,000
back to other people
who you're connected to.

271
00:09:49,000 --> 00:09:50,834
So you basically need
an I/O system.

272
00:09:50,834 --> 00:09:53,667
Secondly, although programming
the code for the game

273
00:09:53,667 --> 00:09:55,334
takes up a lot of effort,

274
00:09:55,334 --> 00:09:57,334
for most really polished games,

275
00:09:57,334 --> 00:10:01,167
the art assets actually are
the most important thing.

276
00:10:01,167 --> 00:10:03,167
So dealing, like,
for example, you know--

277
00:10:03,167 --> 00:10:05,000
probably "Angry Birds"

278
00:10:05,000 --> 00:10:06,667
or--or another game like that,

279
00:10:06,667 --> 00:10:08,834
the assets probably
make up a factor

280
00:10:08,834 --> 00:10:11,667
of ten times or bigger
than the actual code.

281
00:10:11,667 --> 00:10:14,834
So being able to load
those assets efficiently

282
00:10:14,834 --> 00:10:16,667
and cache them offline,

283
00:10:16,667 --> 00:10:18,534
um, and load them
in the right order

284
00:10:18,534 --> 00:10:20,501
so you can get the person
playing as soon as possible

285
00:10:20,501 --> 00:10:22,000
is very important.

286
00:10:22,000 --> 00:10:23,834
So asset management
is important.

287
00:10:23,834 --> 00:10:25,667
And then third is the game loop.

288
00:10:25,667 --> 00:10:27,501
So most games have,
like, an internal clock

289
00:10:27,501 --> 00:10:29,501
that's usually keyed
to the, um, frame rate

290
00:10:29,501 --> 00:10:31,334
or the vertical sync period.

291
00:10:31,334 --> 00:10:34,334
And what happens is,
is at every tick of that clock,

292
00:10:34,334 --> 00:10:35,834
three things happen.

293
00:10:35,834 --> 00:10:38,667
One is we process all input
that--from the user.

294
00:10:38,667 --> 00:10:42,000
So maybe, you know, the user
pressed their mouse button

295
00:10:42,000 --> 00:10:44,501
or he--you know--
he touched the tablet.

296
00:10:44,501 --> 00:10:46,334
Maybe you got a packet
from the network

297
00:10:46,334 --> 00:10:48,000
because somebody
chatted with you.

298
00:10:48,000 --> 00:10:49,834
So you need to take those inputs

299
00:10:49,834 --> 00:10:51,868
and then feed them
into the next stage,

300
00:10:51,868 --> 00:10:53,834
which is to update
the state of the world

301
00:10:53,834 --> 00:10:55,334
based on those inputs.

302
00:10:55,334 --> 00:10:57,334
And that usually takes
into account things

303
00:10:57,334 --> 00:10:59,334
like running physics
simulations, running AI,

304
00:10:59,334 --> 00:11:02,234
um, running game logic,

305
00:11:02,234 --> 00:11:04,234
like updating the scoreboard
'cause someone got a kill,

306
00:11:04,234 --> 00:11:05,734
things like that.

307
00:11:05,734 --> 00:11:08,400
And then finally, after you've
updated the state of the world,

308
00:11:08,400 --> 00:11:10,400
you need to communicate
the state of the world

309
00:11:10,400 --> 00:11:11,901
back to the user,

310
00:11:11,901 --> 00:11:14,234
and that means
rendering graphics.

311
00:11:14,234 --> 00:11:16,234
That means rendering,
um, audio,

312
00:11:16,234 --> 00:11:18,567
and sending packets
back out to other players.

313
00:11:18,567 --> 00:11:22,067
So that's basically very briefly
the three important things

314
00:11:22,067 --> 00:11:25,434
that make up a game engine.

315
00:11:25,434 --> 00:11:27,734
So let's discuss
some of the challenges.

316
00:11:27,734 --> 00:11:30,734
So when you're developing
for multiple browsers

317
00:11:30,734 --> 00:11:32,567
or for multiple platforms,

318
00:11:32,567 --> 00:11:35,567
it's very difficult to get
optimal versions

319
00:11:35,567 --> 00:11:38,067
of these components
on various platforms.

320
00:11:38,067 --> 00:11:39,734
Uh, to give you an example,

321
00:11:39,734 --> 00:11:41,567
let's say you're doing
Canvas work.

322
00:11:41,567 --> 00:11:43,400
Now Canvas--
the Canvas API on some browsers

323
00:11:43,400 --> 00:11:44,901
is accelerated really well.

324
00:11:44,901 --> 00:11:46,734
For example, IE9,
believe it or not,

325
00:11:46,734 --> 00:11:48,901
does an amazing job
with Canvas.

326
00:11:48,901 --> 00:11:50,901
And as you've seen, uh,

327
00:11:50,901 --> 00:11:52,901
Chrome 11 and Chrome 12
and later versions

328
00:11:52,901 --> 00:11:54,901
actually is doing
really well with it now, too,

329
00:11:54,901 --> 00:11:56,567
but other browsers not so much.

330
00:11:56,567 --> 00:11:59,567
So the problem is, is if you
program directly to Canvas,

331
00:11:59,567 --> 00:12:02,467
you never know which particular
draw call you're making

332
00:12:02,467 --> 00:12:04,300
is going to be
the accelerated path,

333
00:12:04,300 --> 00:12:06,300
or which is going to be
the slow path.

334
00:12:06,300 --> 00:12:08,467
So that's sort of a minefield

335
00:12:08,467 --> 00:12:10,467
that you don't want
to basically get into.

336
00:12:10,467 --> 00:12:12,634
You want someone to absolve you
of that responsibility.

337
00:12:12,634 --> 00:12:14,634
Then on other browsers,
you have WebGL.

338
00:12:14,634 --> 00:12:16,968
WebGL's pretty much always
guaranteed to be fast.

339
00:12:16,968 --> 00:12:18,968
However, some browsers
don't have WebGL,

340
00:12:18,968 --> 00:12:20,968
so if you wrote your game
purely to WebGL,

341
00:12:20,968 --> 00:12:22,801
you might kind of be stuck.

342
00:12:22,801 --> 00:12:24,634
And last but not least,
you know,

343
00:12:24,634 --> 00:12:27,968
maybe you're using CSS 3
to do all your sprite graphics,

344
00:12:27,968 --> 00:12:30,968
and they're not accelerated
on a particular platform.

345
00:12:30,968 --> 00:12:33,968
So that's basically
one of the big challenges.

346
00:12:33,968 --> 00:12:36,634
Likewise, asset management--

347
00:12:36,634 --> 00:12:38,634
so each and every platform
has a different--

348
00:12:38,634 --> 00:12:40,634
unfortunately,
a different way of dealing

349
00:12:40,634 --> 00:12:42,467
with offline assets right now.

350
00:12:42,467 --> 00:12:44,801
So some browsers implement,
you know, app cache.

351
00:12:44,801 --> 00:12:45,901
They have local storage.

352
00:12:45,901 --> 00:12:48,234
They have index DB, DOM storage.

353
00:12:48,234 --> 00:12:50,234
If you're on Android you have
a different storage mechanism.

354
00:12:50,234 --> 00:12:51,901
If you're using Flash,

355
00:12:51,901 --> 00:12:53,734
you've got a different way
of controlling assets,

356
00:12:53,734 --> 00:12:56,067
so managing assets,
loading them over the network,

357
00:12:56,067 --> 00:12:59,067
and caching them locally
is typically a challenge.

358
00:12:59,067 --> 00:13:01,467
And then last but not least,
the game loop--

359
00:13:01,467 --> 00:13:03,467
so you might have seen
in several presentations here

360
00:13:03,467 --> 00:13:04,968
that traditionally, like,

361
00:13:04,968 --> 00:13:06,634
if you're
a JavaScript programmer,

362
00:13:06,634 --> 00:13:08,467
you think in terms
of using timers

363
00:13:08,467 --> 00:13:10,133
to kick off your rendering loop.

364
00:13:10,133 --> 00:13:12,133
Well, that's pretty bad,
because when you use, like,

365
00:13:12,133 --> 00:13:13,801
setTimeout in JavaScript,

366
00:13:13,801 --> 00:13:15,801
the browser doesn't really know
what you're doing.

367
00:13:15,801 --> 00:13:17,467
So you could be rendering,

368
00:13:17,467 --> 00:13:19,300
but you could be doing
something else.

369
00:13:19,300 --> 00:13:20,801
And that's unfortunate,

370
00:13:20,801 --> 00:13:22,634
because if you're
in a different tab,

371
00:13:22,634 --> 00:13:24,467
uh, or you--
or the window's minimized,

372
00:13:24,467 --> 00:13:26,300
the browser is just gonna
keep firing that timer

373
00:13:26,300 --> 00:13:27,968
and doing tons of work.

374
00:13:27,968 --> 00:13:29,801
And it's gonna chew
your battery life,

375
00:13:29,801 --> 00:13:31,634
and it's gonna heat up
your machine.

376
00:13:31,634 --> 00:13:33,467
So different platforms
have different ways

377
00:13:33,467 --> 00:13:35,300
of syncing with the vertical
blanking period,

378
00:13:35,300 --> 00:13:37,300
or the redraw period
of the--of the platform.

379
00:13:37,300 --> 00:13:39,133
So in the newer version
of the browser,

380
00:13:39,133 --> 00:13:40,968
you should have
this requestAnimationFrame

381
00:13:40,968 --> 00:13:42,467
in colloquial HTML5.

382
00:13:42,467 --> 00:13:44,300
That sort of takes care
of that for you.

383
00:13:44,300 --> 00:13:46,300
But if you're deploying to,
like, Flash, it's different,

384
00:13:46,300 --> 00:13:48,300
and if you're deploying to,
like, Android, it's different.

385
00:13:48,300 --> 00:13:50,133
So that's
basically another challenge,

386
00:13:50,133 --> 00:13:52,133
is basically syncing--
syncing video

387
00:13:52,133 --> 00:13:54,133
and timing events
on different platforms.

388
00:13:54,133 --> 00:13:56,300
So basically, I'm gonna hand it
over to Phil right now,

389
00:13:56,300 --> 00:13:57,968
and he's actually gonna describe

390
00:13:57,968 --> 00:13:59,801
how we solve
some of those problems

391
00:13:59,801 --> 00:14:01,701
with GWT and the new library
we're introducing.

392
00:14:01,701 --> 00:14:03,200
Rogers: Cool, thanks.

393
00:14:03,200 --> 00:14:05,701
So to answer these questions,
abstraction is key.

394
00:14:05,701 --> 00:14:08,200
Um, you might remember
that GWT abstracts away

395
00:14:08,200 --> 00:14:09,868
the differences
between browsers,

396
00:14:09,868 --> 00:14:12,200
which is Firefox 4 or IE9.

397
00:14:12,200 --> 00:14:14,868
We can apply that same logic
to games,

398
00:14:14,868 --> 00:14:16,868
abstracting away not only
the browser differences,

399
00:14:16,868 --> 00:14:19,200
but the differences
between platforms, as well,

400
00:14:19,200 --> 00:14:21,200
so the Java platform
or Android as a platform

401
00:14:21,200 --> 00:14:23,868
or the browser as a platform.

402
00:14:23,868 --> 00:14:27,200
So to do that, we wrote
a library called ForPlay.

403
00:14:27,200 --> 00:14:29,534
ForPlay is an abstraction layer
for games

404
00:14:29,534 --> 00:14:31,801
written in Java,
but is GWT compatible.

405
00:14:31,801 --> 00:14:33,300
So you get all the benefits

406
00:14:33,300 --> 00:14:34,801
of your Java
development environment,

407
00:14:34,801 --> 00:14:36,300
but you can also compile it

408
00:14:36,300 --> 00:14:37,834
onto fast and efficient
JavaScript.

409
00:14:37,834 --> 00:14:40,334
And this is all free
and open source.

410
00:14:40,334 --> 00:14:42,334
It's a very alpha version
at the moment,

411
00:14:42,334 --> 00:14:44,334
but as you can see, we wrote
a kick-ass game with it,

412
00:14:44,334 --> 00:14:45,868
and we hope you guys will to.

413
00:14:45,868 --> 00:14:47,834
The source is available here,
as well as samples

414
00:14:47,834 --> 00:14:50,934
for everything we're gonna
show from here on out.

415
00:14:50,934 --> 00:14:52,934
So you might be thinking,

416
00:14:52,934 --> 00:14:54,734
service provider interface
in Java,

417
00:14:54,734 --> 00:14:56,234
and that is what--
what this is.

418
00:14:56,234 --> 00:14:57,734
Basically, you write

419
00:14:57,734 --> 00:14:59,734
to a core game API
called ForPlay,

420
00:14:59,734 --> 00:15:01,501
and we swap in
the implementation

421
00:15:01,501 --> 00:15:03,000
for each platform.

422
00:15:03,000 --> 00:15:05,000
For instance,
if you're running on Java,

423
00:15:05,000 --> 00:15:06,501
we'll swap in the Java platform.

424
00:15:06,501 --> 00:15:08,501
If you're on GWT,
we'll swap in that platform,

425
00:15:08,501 --> 00:15:11,901
Android, and maybe even Flash--
we'll show you later.

426
00:15:11,901 --> 00:15:15,000
So let me start with a demo--
always fun.

427
00:15:15,000 --> 00:15:17,501
And then we'll actually dive
into the game and such.

428
00:15:17,501 --> 00:15:19,033
So this is a game.

429
00:15:19,033 --> 00:15:21,000
It's running in the browser,
as you can see.

430
00:15:21,000 --> 00:15:22,934
We're actually using
WebGL here.

431
00:15:22,934 --> 00:15:24,501
This is written using ForPlay.

432
00:15:24,501 --> 00:15:26,501
And you can see, this is
a simple sprite-based game.

433
00:15:26,501 --> 00:15:28,501
I click the mouse.
We have physics.

434
00:15:28,501 --> 00:15:30,501
We're using the Box2D
physics engine here.

435
00:15:30,501 --> 00:15:32,601
And you can see it's a--
it's a fairly simple game.

436
00:15:32,601 --> 00:15:34,601
You click our things.
They bounce.

437
00:15:34,601 --> 00:15:36,601
We have different, say,
physics properties

438
00:15:36,601 --> 00:15:39,934
on, say, this blue thing
versus the box.

439
00:15:39,934 --> 00:15:43,067
We even have some fun stuff
in here.

440
00:15:43,067 --> 00:15:45,067
[laughs]
[laughter]

441
00:15:45,067 --> 00:15:47,334
Rogers: And--and what's
really cool about this is

442
00:15:47,334 --> 00:15:50,567
look at how, uh,
performance it is.

443
00:15:50,567 --> 00:15:52,567
So this is, like,
in the browser,

444
00:15:52,567 --> 00:15:54,434
and we're running
lots and lots of physics.

445
00:15:54,434 --> 00:15:56,767
And, like, there's not
really a problem here.

446
00:15:56,767 --> 00:15:58,601
So that's just kind of cool,
actually.

447
00:15:58,601 --> 00:16:00,601
Let's see how far it'll go.

448
00:16:00,601 --> 00:16:03,501
[Cromwell speaking indistinctly]

449
00:16:03,501 --> 00:16:06,000
Rogers: Oh, they're all crowding
in the portal now.

450
00:16:06,000 --> 00:16:08,501
And now you can see the hacks
I did to make this all work.

451
00:16:08,501 --> 00:16:10,501
Oh, there we go. We've got
the infinite loop going.

452
00:16:10,501 --> 00:16:12,434
So...

453
00:16:15,501 --> 00:16:17,334
So the components of ForPlay--

454
00:16:17,334 --> 00:16:19,334
uh, we have--these are
the three main components

455
00:16:19,334 --> 00:16:21,834
we just talked about for games,
abstracting out the game layers.

456
00:16:21,834 --> 00:16:23,834
We have the game loop,
the I/O system,

457
00:16:23,834 --> 00:16:25,367
and asset management.

458
00:16:25,367 --> 00:16:28,334
ForPlay provides
the abstractions for you

459
00:16:28,334 --> 00:16:31,167
and swaps in the appropriate,
uh, code for each platform.

460
00:16:31,167 --> 00:16:32,834
So for instance,
on the browser,

461
00:16:32,834 --> 00:16:34,834
we'll use requestAnimationFrame
where available

462
00:16:34,834 --> 00:16:36,501
for your I/O loop,

463
00:16:36,501 --> 00:16:38,334
whereas, say,
on the desktop environment,

464
00:16:38,334 --> 00:16:40,501
we might sync to Vsync
or something like that.

465
00:16:40,501 --> 00:16:42,501
And, uh, so you can see here

466
00:16:42,501 --> 00:16:44,501
in the game update loop,
we have init.

467
00:16:44,501 --> 00:16:47,834
So you write the game
to the core ForPlay game layer.

468
00:16:47,834 --> 00:16:51,000
You automatically get calls
to init, update, and paint.

469
00:16:51,000 --> 00:16:52,667
And so this is
actually for--

470
00:16:52,667 --> 00:16:54,334
for instance, you might want

471
00:16:54,334 --> 00:16:56,167
to run your physics update
at 30 FPS,

472
00:16:56,167 --> 00:16:58,200
but you might want
to draw at 60 FPS.

473
00:16:58,200 --> 00:16:59,667
We actually even provide--

474
00:16:59,667 --> 00:17:01,567
you can see a "float delta"
on the paint line.

475
00:17:01,567 --> 00:17:03,901
What that's for is so that you
can, say, interpolate.

476
00:17:03,901 --> 00:17:05,901
So you're drawing much faster
than you're updating,

477
00:17:05,901 --> 00:17:07,901
and you want to interpolate
to make it really, like--

478
00:17:07,901 --> 00:17:09,400
really smooth.

479
00:17:09,400 --> 00:17:11,400
Uh, for your I/O system,
we have tons of stuff here--

480
00:17:11,400 --> 00:17:13,901
uh, fast graphics
for 2-D sprite-based graphics.

481
00:17:13,901 --> 00:17:15,901
We have audio.
We have nets.

482
00:17:15,901 --> 00:17:18,901
We have keyboard input/output,
touch input and output,

483
00:17:18,901 --> 00:17:20,734
um, and all this
is kind of abstracted

484
00:17:20,734 --> 00:17:22,400
in a really easy-to-use way,

485
00:17:22,400 --> 00:17:24,234
and I'll show you that
a little bit later.

486
00:17:24,234 --> 00:17:26,234
Last, we have asset management.
The web is asynchronous.

487
00:17:26,234 --> 00:17:28,067
There's a whole bunch
of issues there.

488
00:17:28,067 --> 00:17:29,901
It provides ways
to get your sound,

489
00:17:29,901 --> 00:17:31,901
your input, your text,
including JSON

490
00:17:31,901 --> 00:17:34,067
as well as callbacks
for when these things happen,

491
00:17:34,067 --> 00:17:35,901
so you can make, say,
a loading screen

492
00:17:35,901 --> 00:17:37,400
or something like that.

493
00:17:37,400 --> 00:17:39,234
ForPlay provides the--
the magic that happens

494
00:17:39,234 --> 00:17:41,400
to swap in the correct platform
that you're running on.

495
00:17:41,400 --> 00:17:43,901
So you really write
to one API, and you get--

496
00:17:43,901 --> 00:17:47,234
you write very little,
actually one line of code,

497
00:17:47,234 --> 00:17:50,567
or one--maybe five lines
of code per platform,

498
00:17:50,567 --> 00:17:52,400
and you get swapped in
the correct one.

499
00:17:52,400 --> 00:17:54,400
I'll show you
a little bit later.

500
00:17:54,400 --> 00:17:56,400
So this is--this is kind of
the beginning of a game.

501
00:17:56,400 --> 00:17:58,734
This is, uh,
"My Game" we'll call it,

502
00:17:58,734 --> 00:18:01,300
and this is how you would write
the ForPlay API.

503
00:18:01,300 --> 00:18:03,801
You simply implement
the game interface,

504
00:18:03,801 --> 00:18:05,834
and we have init, update,
and paint.

505
00:18:05,834 --> 00:18:07,801
Like I said before,
these just get called for you

506
00:18:07,801 --> 00:18:09,467
once you start your game.

507
00:18:09,467 --> 00:18:11,133
Let me go to the next line

508
00:18:11,133 --> 00:18:12,968
and show you
the interpolation code.

509
00:18:12,968 --> 00:18:14,968
So again, you're, say,
drawing at 60 FPS,

510
00:18:14,968 --> 00:18:17,300
but you're only running at 30
on your physics update loop.

511
00:18:17,300 --> 00:18:19,300
And this is where--this is
how you could, for instance,

512
00:18:19,300 --> 00:18:21,133
interpolate it in a 2-D game.

513
00:18:21,133 --> 00:18:23,133
And you can see here,
we have interpolation code.

514
00:18:23,133 --> 00:18:25,133
It's fairly trivial.

515
00:18:25,133 --> 00:18:27,501
[Cromwell speaking indistinctly]

516
00:18:27,501 --> 00:18:30,000
Rogers: Init is usually where
you'd load your resources,

517
00:18:30,000 --> 00:18:33,000
and the update loop is usually
where you'd process the I/O

518
00:18:33,000 --> 00:18:35,834
and basically update your
physics layer or run your AI.

519
00:18:35,834 --> 00:18:37,334
And then the paint

520
00:18:37,334 --> 00:18:39,167
is basically where
you redisplay everything.

521
00:18:39,167 --> 00:18:40,834
Oh, yes, that's right. Sorry.

522
00:18:40,834 --> 00:18:42,667
Actually, we'll show you
in more detail--

523
00:18:42,667 --> 00:18:44,501
actually,
I can show you the source

524
00:18:44,501 --> 00:18:46,234
of the pea physics game.

525
00:18:46,234 --> 00:18:49,234
So, um, input devices--

526
00:18:49,234 --> 00:18:51,000
this is kind of the basics

527
00:18:51,000 --> 00:18:53,000
of how you would start
writing your game.

528
00:18:53,000 --> 00:18:54,834
The is the same MyGame
implementing Game,

529
00:18:54,834 --> 00:18:56,834
but now we've added Pointer
and Keyboard.

530
00:18:56,834 --> 00:18:58,834
You can see we automatically
get callbacks

531
00:18:58,834 --> 00:19:01,567
into onPointerMove
or onPointerScroll

532
00:19:01,567 --> 00:19:03,067
or onKeyDown.

533
00:19:03,067 --> 00:19:05,067
And ForPlay handles the fact

534
00:19:05,067 --> 00:19:07,400
that you're kind of running
asynchronous code sometimes

535
00:19:07,400 --> 00:19:09,067
on some platforms,

536
00:19:09,067 --> 00:19:10,901
so you're not gonna get
these callbacks in

537
00:19:10,901 --> 00:19:12,734
while you're doing
your physics update loop

538
00:19:12,734 --> 00:19:14,400
or in your paint loop.

539
00:19:14,400 --> 00:19:16,400
It's all gonna be
spliced correctly.

540
00:19:16,400 --> 00:19:19,400
Now really, the--
the real meat to ForPlay

541
00:19:19,400 --> 00:19:22,734
is handling of the image system.

542
00:19:22,734 --> 00:19:25,400
So there's three graphics
primitives ForPlay provides.

543
00:19:25,400 --> 00:19:27,734
We have Image, Surface,
and Canvas.

544
00:19:27,734 --> 00:19:30,734
Image is your fast-path,
simple drawing of images,

545
00:19:30,734 --> 00:19:32,734
and this allows you to get stuff
on the screen,

546
00:19:32,734 --> 00:19:34,734
rotate, scale,
and translate it.

547
00:19:34,734 --> 00:19:37,067
Surface takes image and takes it
a little bit further.

548
00:19:37,067 --> 00:19:39,400
What Surface really provides
is the fast path

549
00:19:39,400 --> 00:19:41,400
to OpenGL or WebGL.

550
00:19:41,400 --> 00:19:44,400
What it provides is things
like fillRect or also drawImage.

551
00:19:44,400 --> 00:19:46,334
It can draw multiple images,

552
00:19:46,334 --> 00:19:48,334
have them cached
on a single surface.

553
00:19:48,334 --> 00:19:51,167
Canvas is the superset
of both the previous two

554
00:19:51,167 --> 00:19:52,667
and even more.

555
00:19:52,667 --> 00:19:55,834
It actually provides
what HTML5 Canvas provides.

556
00:19:55,834 --> 00:19:57,334
We've abstracted away

557
00:19:57,334 --> 00:19:59,667
the different things
on different platforms.

558
00:19:59,667 --> 00:20:02,334
so you could do things
like text, like strokes.

559
00:20:02,334 --> 00:20:05,334
And really, it comes at a cost,
because these things--

560
00:20:05,334 --> 00:20:08,334
you don't want to be
updating a canvas at 60 FPS.

561
00:20:08,334 --> 00:20:11,000
So what we do is we let you
cache the canvas result

562
00:20:11,000 --> 00:20:13,834
onto a surface
and then draw the surface fast.

563
00:20:13,834 --> 00:20:15,834
And this whole system is done
inside a layer--

564
00:20:15,834 --> 00:20:18,367
layer system
really similar to Flash.

565
00:20:18,367 --> 00:20:20,834
So it allows you to put
a whole bunch of canvases

566
00:20:20,834 --> 00:20:23,501
or surfaces or images
into the different layers

567
00:20:23,501 --> 00:20:25,167
and move them around separately.

568
00:20:25,167 --> 00:20:27,167
I'll show you that
in more detail.

569
00:20:27,167 --> 00:20:30,667
So this is the pea physics
sample we saw before.

570
00:20:30,667 --> 00:20:33,167
Uh, we have three group layers
in this case.

571
00:20:33,167 --> 00:20:34,834
In the first group layer,

572
00:20:34,834 --> 00:20:36,834
we have a whole bunch
of image layers inside of it.

573
00:20:36,834 --> 00:20:38,834
this is where all our peas
are being drawn,

574
00:20:38,834 --> 00:20:41,667
and they're being moved around.
This is all dynamic.

575
00:20:41,667 --> 00:20:43,167
And the next layer--

576
00:20:43,167 --> 00:20:45,167
this should really be
implemented as a surface layer.

577
00:20:45,167 --> 00:20:47,000
So on the initial init,
what we would do

578
00:20:47,000 --> 00:20:49,000
is we would draw
a whole bunch of our blocks,

579
00:20:49,000 --> 00:20:51,334
the static blocks.
We'd have them cached there.

580
00:20:51,334 --> 00:20:53,667
Then we'd just redraw
this cached image each time.

581
00:20:53,667 --> 00:20:55,501
So it's gonna be really fast.

582
00:20:55,501 --> 00:20:57,100
Lastly, we have
just a simple image

583
00:20:57,100 --> 00:20:59,868
behind the whole thing that's
just being drawn by itself.

584
00:21:01,467 --> 00:21:04,000
So this is the asset management.

585
00:21:04,000 --> 00:21:06,000
You'd really want to do this
in your init cycle,

586
00:21:06,000 --> 00:21:07,501
like Ray was saying.

587
00:21:07,501 --> 00:21:09,000
And what you're doing is--

588
00:21:09,000 --> 00:21:11,000
this is a simple example
of how to load an image.

589
00:21:11,000 --> 00:21:13,000
So you simply say Image.

590
00:21:13,000 --> 00:21:14,834
You ask the assetManager for it.

591
00:21:14,834 --> 00:21:16,834
And if you want, you can
get a callback, as well,

592
00:21:16,834 --> 00:21:18,501
when this is done loading.

593
00:21:18,501 --> 00:21:20,501
And so this is kind of
the simple way to do it.

594
00:21:20,501 --> 00:21:22,334
You can also have, like,
a loading screen.

595
00:21:22,334 --> 00:21:24,334
For instance, Rovio did this
with "Angry Birds."

596
00:21:24,334 --> 00:21:27,000
And what--what we're doing here
is we're adding images

597
00:21:27,000 --> 00:21:28,501
to our AssetWatcher,

598
00:21:28,501 --> 00:21:30,334
and we get a callback
once they've all loaded.

599
00:21:30,334 --> 00:21:32,000
So this is really great for--

600
00:21:32,000 --> 00:21:34,367
for--kind of Rovio's
kind of situation.

601
00:21:36,200 --> 00:21:38,200
Now the cross-platform magic--

602
00:21:38,200 --> 00:21:40,200
So, you know, all the--
what I've said so far,

603
00:21:40,200 --> 00:21:42,334
everything you're writing to
is platform-agnostic.

604
00:21:42,334 --> 00:21:44,334
You don't know what platform
you're running on,

605
00:21:44,334 --> 00:21:46,000
but this is where
the magic happens.

606
00:21:46,000 --> 00:21:48,000
This is those few lines
I said you had to write

607
00:21:48,000 --> 00:21:49,601
that were platform-specific.

608
00:21:49,601 --> 00:21:51,868
We have up here
HTML and Java.

609
00:21:51,868 --> 00:21:53,701
One of these comp--
compiles down

610
00:21:53,701 --> 00:21:55,868
into a JavaScript/HTML5 game.

611
00:21:55,868 --> 00:21:58,901
The other one compiles down
to a desktop app.

612
00:21:58,901 --> 00:22:01,434
And you can see how similar
the two are.

613
00:22:01,434 --> 00:22:03,434
You're simply starting the game,

614
00:22:03,434 --> 00:22:06,133
and the ForPlay magic is
getting swapped in behind you.

615
00:22:07,767 --> 00:22:10,000
So to wrap up a little bit,

616
00:22:10,000 --> 00:22:12,334
ForPlay is open source.
It's free.

617
00:22:12,334 --> 00:22:16,167
You write to a core
platform-agnostic API,

618
00:22:16,167 --> 00:22:18,667
and you get swapped in
the correct code,

619
00:22:18,667 --> 00:22:21,167
uh, to really
give you performance.

620
00:22:21,167 --> 00:22:22,667
It's written in Java,

621
00:22:22,667 --> 00:22:24,334
so you get
your familiar desktop--

622
00:22:24,334 --> 00:22:26,167
you get your familiar
debugging environment.

623
00:22:26,167 --> 00:22:28,000
I'm gonna show you some
really cool stuff with that

624
00:22:28,000 --> 00:22:29,501
in just a second.

625
00:22:29,501 --> 00:22:31,334
And, um, it compiles down
to HTML5,

626
00:22:31,334 --> 00:22:33,667
so you get a really fast--
fast game, as well.

627
00:22:33,667 --> 00:22:36,834
So let me dive down
into the actual details

628
00:22:36,834 --> 00:22:38,334
of writing a game

629
00:22:38,334 --> 00:22:41,834
and show you some neat stuff
about that.

630
00:22:41,834 --> 00:22:45,667
So this--we're gonna be
using the pea sample.

631
00:22:45,667 --> 00:22:48,167
Remember that this is, uh,
this is available online,

632
00:22:48,167 --> 00:22:49,834
so you can actually dive down

633
00:22:49,834 --> 00:22:51,501
into the source
a little bit more.

634
00:22:51,501 --> 00:22:53,334
But what I'd like to show you
is how great it is

635
00:22:53,334 --> 00:22:54,834
to debug in ForPlay.

636
00:22:54,834 --> 00:22:56,834
So up here, I have--

637
00:22:56,834 --> 00:22:58,667
this is--this seems very similar

638
00:22:58,667 --> 00:23:00,734
to what we showed
just a few slides ago.

639
00:23:00,734 --> 00:23:02,400
What this is, is the--

640
00:23:02,400 --> 00:23:04,400
this is the game entry point,
essentially.

641
00:23:04,400 --> 00:23:07,901
And we have
PeaPhysicsGame implements Game

642
00:23:07,901 --> 00:23:10,567
and a listener for Pointer.

643
00:23:10,567 --> 00:23:12,400
And as I scroll down,
you can see,

644
00:23:12,400 --> 00:23:14,067
this is
the initialization cycle.

645
00:23:14,067 --> 00:23:15,901
Now I don't expect you
to actually read this,

646
00:23:15,901 --> 00:23:18,234
but the idea is
we just have, uh, a game,

647
00:23:18,234 --> 00:23:19,734
we have some inits,

648
00:23:19,734 --> 00:23:22,567
and we don't know what platform
we're running on in this case.

649
00:23:22,567 --> 00:23:25,067
Let me go down
a little bit further

650
00:23:25,067 --> 00:23:27,067
to this group.

651
00:23:27,067 --> 00:23:30,434
What we're looking at here
is the onPointerStart callback.

652
00:23:30,434 --> 00:23:32,000
This is gonna get called

653
00:23:32,000 --> 00:23:34,734
every time you click
on the game.

654
00:23:34,734 --> 00:23:37,667
Oh, embarrassing.
Cromwell: [laughs]

655
00:23:39,567 --> 00:23:42,534
Rogers: There.
Um, sorry about that, guys. So--

656
00:23:42,534 --> 00:23:44,534
Cromwell: This is what gets run
when you click to add peas,

657
00:23:44,534 --> 00:23:46,033
when he was dropping peas.

658
00:23:46,033 --> 00:23:47,534
So that's the line
of code he used.

659
00:23:47,534 --> 00:23:49,033
Rogers: Exactly.
And what we're doing is

660
00:23:49,033 --> 00:23:51,033
we create a new pea
when that happens,

661
00:23:51,033 --> 00:23:52,534
and we add it to the world.

662
00:23:52,534 --> 00:23:54,534
Cromwell: And world is
a group layer that holds

663
00:23:54,534 --> 00:23:56,534
multiple image layers,
which are the peas.

664
00:23:56,534 --> 00:23:58,534
Rogers: Exactly.
So let me actually dive down

665
00:23:58,534 --> 00:24:00,133
into what a pea is.

666
00:24:00,133 --> 00:24:02,000
A pea is a simple
sprite-based thing.

667
00:24:02,000 --> 00:24:04,000
You might see something similar
in, say, "Angry Birds"

668
00:24:04,000 --> 00:24:06,501
or any other 2-D sprite game.

669
00:24:06,501 --> 00:24:08,267
But what I'd really like
to show you

670
00:24:08,267 --> 00:24:10,000
is some of the cool things
we can do

671
00:24:10,000 --> 00:24:11,734
in the debugging environment.

672
00:24:11,734 --> 00:24:13,434
Remember that we're writing
in Java,

673
00:24:13,434 --> 00:24:15,000
so this stuff is really easy.

674
00:24:15,000 --> 00:24:18,968
And watch this.
I'm actually gonna run my game.

675
00:24:18,968 --> 00:24:20,968
We saw it before

676
00:24:20,968 --> 00:24:24,801
running as an HTML5 app.

677
00:24:24,801 --> 00:24:28,133
Now let's see it here
running as a Java desktop app.

678
00:24:28,133 --> 00:24:31,133
You can see, it's the same game
we were talking about before.

679
00:24:31,133 --> 00:24:33,300
Nothing has changed.

680
00:24:33,300 --> 00:24:35,934
Let me go over here,
and let's say, um,

681
00:24:35,934 --> 00:24:37,734
let's say my boss
comes in and wants--

682
00:24:37,734 --> 00:24:39,734
wants me to change
some physics parameters.

683
00:24:39,734 --> 00:24:41,501
Or, you know,
Chrome is really big.

684
00:24:41,501 --> 00:24:43,267
Let's say we want to use
the Chrome image

685
00:24:43,267 --> 00:24:44,934
instead of the pea image.

686
00:24:44,934 --> 00:24:47,934
Let me just go in here
and change the radius

687
00:24:47,934 --> 00:24:50,968
of the little peas
that we were drawing.

688
00:24:50,968 --> 00:24:53,467
Or let me use a different image.

689
00:24:53,467 --> 00:24:55,968
Instead of the pea image,
we're gonna use something else.

690
00:24:55,968 --> 00:24:59,467
Now remember that I haven't
actually restarted the game.

691
00:24:59,467 --> 00:25:01,367
It's still running here.

692
00:25:01,367 --> 00:25:03,868
And now we have Chrome balls.
Cromwell: Yeah.

693
00:25:03,868 --> 00:25:06,868
Rogers: Thank you.
[applause]

694
00:25:06,868 --> 00:25:09,200
Cromwell: But just
to emphasize that,

695
00:25:09,200 --> 00:25:11,200
so you think about when you
normally develop,

696
00:25:11,200 --> 00:25:13,367
and you have an edit,
compile, and run cycle.

697
00:25:13,367 --> 00:25:16,367
And even today, with JavaScript
and normal web programming,

698
00:25:16,367 --> 00:25:18,033
you have an edit refresher.

699
00:25:18,033 --> 00:25:20,067
You edit the JavaScript, you hit
"refresh" in your browser.

700
00:25:20,067 --> 00:25:22,033
With GWT DevMode, you hit--
you edit the Java code,

701
00:25:22,033 --> 00:25:24,701
and you hit "refresh."
How about just edit?

702
00:25:24,701 --> 00:25:27,000
You edit, and as fast as you can
tab over to the window...

703
00:25:27,000 --> 00:25:29,000
[snaps fingers]
it's already been updated.

704
00:25:29,000 --> 00:25:31,000
I think that's--
I think that's kick-ass.

705
00:25:31,000 --> 00:25:33,000
Rogers: Um...
[clears throat]

706
00:25:33,000 --> 00:25:34,801
So--and also,
because we're running

707
00:25:34,801 --> 00:25:36,801
in our familiar
environment of Eclipse--

708
00:25:36,801 --> 00:25:39,801
a lot of you guys know this is
the standard GWT world--

709
00:25:39,801 --> 00:25:41,801
uh, we have our
"push to app engine" button

710
00:25:41,801 --> 00:25:43,367
at the very top,

711
00:25:43,367 --> 00:25:45,367
and we can just push this
and push our game to app engine.

712
00:25:45,367 --> 00:25:47,367
Cromwell: But he's not
gonna do that today,

713
00:25:47,367 --> 00:25:50,200
because of the Wi-Fi.
Rogers: [laughs] Yeah, right.

714
00:25:50,200 --> 00:25:53,367
So because we can push
to app engine so easy,

715
00:25:53,367 --> 00:25:55,868
how about pushing this
to the Chrome Web Store?

716
00:25:55,868 --> 00:25:58,701
This is, like, three steps.
It is so easy.

717
00:25:58,701 --> 00:26:01,434
You push--you've already pushed
your game to app engine.

718
00:26:01,434 --> 00:26:03,100
You have it hosted in the cloud.

719
00:26:03,100 --> 00:26:04,934
It's--it's awesome.

720
00:26:04,934 --> 00:26:07,434
You now visit appmator.com.

721
00:26:07,434 --> 00:26:09,767
You upload your URL.
You download a zip file.

722
00:26:09,767 --> 00:26:11,767
You then go
to the Chrome Web Store

723
00:26:11,767 --> 00:26:13,767
and upload that same ZIP file.

724
00:26:13,767 --> 00:26:16,267
And then third is profit.

725
00:26:16,267 --> 00:26:18,434
[laughter]
Cromwell: [laughs]

726
00:26:18,434 --> 00:26:20,934
Rogers: Unlike the meme,
I mean, this is the real deal.

727
00:26:20,934 --> 00:26:22,934
You can either sell your game,
or you can put ads on it.

728
00:26:22,934 --> 00:26:24,434
It's really easy to do.

729
00:26:24,434 --> 00:26:26,267
Cromwell: Or you can do
in-game payments,

730
00:26:26,267 --> 00:26:27,934
and we only take 5%.
Rogers: I know.

731
00:26:27,934 --> 00:26:29,434
This is so awesome.

732
00:26:29,434 --> 00:26:31,434
If they would've told us that
before the presentation,

733
00:26:31,434 --> 00:26:33,267
we could've worked it in.

734
00:26:33,267 --> 00:26:35,934
So I'll hand it over to Ray.
Cromwell: Thanks, Phil.

735
00:26:35,934 --> 00:26:39,601
So Phil actually showed you
the game running as Java

736
00:26:39,601 --> 00:26:42,434
and running in HTML.

737
00:26:42,434 --> 00:26:44,934
So we've kind of danced
around the fact

738
00:26:44,934 --> 00:26:47,601
that we can also run the game
on other platforms.

739
00:26:47,601 --> 00:26:49,601
And so one of the things
you might be saying is,

740
00:26:49,601 --> 00:26:52,434
"Well, maybe I don't want
to target the Chrome web store.

741
00:26:52,434 --> 00:26:54,434
"I'm not really sure
if I'm gonna target, you know,

742
00:26:54,434 --> 00:26:56,767
"170 million Chrome users
or 100 million Android users.

743
00:26:56,767 --> 00:26:59,968
I'll figure that out later on
when I finish the game."

744
00:26:59,968 --> 00:27:01,834
You might want
to defer your judgment

745
00:27:01,834 --> 00:27:03,334
and target Android.

746
00:27:03,334 --> 00:27:05,000
Well, you can do that,
because--

747
00:27:05,000 --> 00:27:06,667
because it's written in Java,

748
00:27:06,667 --> 00:27:08,667
you can take the exact same game
and compi--

749
00:27:08,667 --> 00:27:10,501
and just with a few lines
of code,

750
00:27:10,501 --> 00:27:12,501
recompile it, deploy it
to any Android device,

751
00:27:12,501 --> 00:27:14,334
and it should work
out of the box.

752
00:27:14,334 --> 00:27:17,000
So, um, if things go okay,

753
00:27:17,000 --> 00:27:18,667
I'm gonna show you a demo.

754
00:27:18,667 --> 00:27:21,167
So I didn't get, uh,
time to prepare

755
00:27:21,167 --> 00:27:23,000
a way to show it to you
on the big screen,

756
00:27:23,000 --> 00:27:24,834
but I'll just really quickly
just show--

757
00:27:24,834 --> 00:27:26,834
you'll see something moving
on the screen.

758
00:27:26,834 --> 00:27:28,501
So this is the peas demo.

759
00:27:28,501 --> 00:27:30,501
I'll give the guy
maybe time to zoom in.

760
00:27:30,501 --> 00:27:33,501
But I can drop peas.
You see it runs fast, real fast.

761
00:27:33,501 --> 00:27:36,167
I can drop, like,
hundreds of peas, so...

762
00:27:36,167 --> 00:27:39,000
[applause]

763
00:27:39,000 --> 00:27:41,000
Cromwell: It runs very fast
on Android,

764
00:27:41,000 --> 00:27:43,000
so it--that's pretty cool.

765
00:27:43,000 --> 00:27:45,667
So--but what about--

766
00:27:45,667 --> 00:27:47,501
well, I'll get to that
in a second.

767
00:27:47,501 --> 00:27:49,501
Let me just show you
what you have to do

768
00:27:49,501 --> 00:27:51,167
to make it run on Android.

769
00:27:51,167 --> 00:27:53,167
So you create
your game entry point.

770
00:27:53,167 --> 00:27:56,000
And rather than saying
JavaPlatform.register

771
00:27:56,000 --> 00:27:57,834
or HtmlPlatform.register,

772
00:27:57,834 --> 00:27:59,834
you say
AndroidPlatform.register.

773
00:27:59,834 --> 00:28:03,234
We swap in the fastest
native pass to Android,

774
00:28:03,234 --> 00:28:04,901
and your game basically runs.

775
00:28:04,901 --> 00:28:06,934
You just recompile,
package it as an APA,

776
00:28:06,934 --> 00:28:09,734
put it in the Android Market,
and profit.

777
00:28:09,734 --> 00:28:12,734
[applause]

778
00:28:12,734 --> 00:28:15,567
Cromwell: Thank you.

779
00:28:15,567 --> 00:28:17,567
But for some of you,

780
00:28:17,567 --> 00:28:20,400
that still might not be enough.

781
00:28:20,400 --> 00:28:23,067
So you might happen to have

782
00:28:23,067 --> 00:28:25,234
some poor slobs coming to you
with IE6,

783
00:28:25,234 --> 00:28:28,567
who haven't upgraded
to the latest HTML5 browser.

784
00:28:28,567 --> 00:28:31,067
But you know they have Flash,
probably.

785
00:28:31,067 --> 00:28:33,234
So wouldn't it be nice

786
00:28:33,234 --> 00:28:35,234
if you could take the game

787
00:28:35,234 --> 00:28:38,567
and actually run it in Flash?

788
00:28:38,567 --> 00:28:41,567
And it turns out
you can do that.

789
00:28:41,567 --> 00:28:43,567
So what I'm announcing today
is a new back end

790
00:28:43,567 --> 00:28:45,234
to the GWT Compiler.

791
00:28:45,234 --> 00:28:46,901
It's an add-on

792
00:28:46,901 --> 00:28:49,234
that basically compiles Java
to ActionScript 3

793
00:28:49,234 --> 00:28:52,400
and builds a Flash application.
[applause]

794
00:28:52,400 --> 00:28:55,501
[cheering]

795
00:28:55,501 --> 00:28:58,501
Cromwell: And so here's
an example of--

796
00:28:58,501 --> 00:29:00,434
Well, first, let me
just show you a demo

797
00:29:00,434 --> 00:29:02,734
before I get to the example--
the peas Flash game.

798
00:29:02,734 --> 00:29:04,734
So here--here's a version of it.

799
00:29:04,734 --> 00:29:06,567
This is actually
a different version.

800
00:29:06,567 --> 00:29:08,567
Because of the Wi-Fi,
I couldn't actually get

801
00:29:08,567 --> 00:29:10,234
the most recent version
on here.

802
00:29:10,234 --> 00:29:12,100
So it doesn't have the portal,
for example,

803
00:29:12,100 --> 00:29:13,901
and some of the physics
constantly turn,

804
00:29:13,901 --> 00:29:15,734
but I'll show you
by right-clicking here

805
00:29:15,734 --> 00:29:17,734
that it's Flash, so...

806
00:29:17,734 --> 00:29:21,067
[applause]

807
00:29:21,067 --> 00:29:23,567
Cromwell: So how does it--
what do you have to do

808
00:29:23,567 --> 00:29:25,567
to get it to compile to Flash?

809
00:29:25,567 --> 00:29:27,234
You have to do one thing.

810
00:29:27,234 --> 00:29:29,234
You say FlashPlatform.re--
two things, actually--

811
00:29:29,234 --> 00:29:31,234
FlashPlatform.register,

812
00:29:31,234 --> 00:29:33,234
and you have to make
a GWT module file

813
00:29:33,234 --> 00:29:35,067
that inherits from, um,

814
00:29:35,067 --> 00:29:37,734
the ActionScript compiler,
that .gwt.xml file.

815
00:29:37,734 --> 00:29:39,400
That's all you have to do.

816
00:29:39,400 --> 00:29:41,234
So let me just talk
a little bit

817
00:29:41,234 --> 00:29:42,901
about the GWT to Flex compiler.

818
00:29:42,901 --> 00:29:44,734
So it's not a fork
of the GWT Compiler.

819
00:29:44,734 --> 00:29:46,767
It's actually an add-on.
So you just drop a JAR file

820
00:29:46,767 --> 00:29:48,734
into any of your
normal GWT projects,

821
00:29:48,734 --> 00:29:51,501
and you inherit from a module,
and this thing kicks in.

822
00:29:51,501 --> 00:29:53,000
And what does it do?

823
00:29:53,000 --> 00:29:55,000
Well, basically,
it does a couple of things.

824
00:29:55,000 --> 00:29:57,567
First, because JavaScript
is similar to ActionScript,

825
00:29:57,567 --> 00:29:59,734
it basically has a couple
of extra passes

826
00:29:59,734 --> 00:30:02,734
that inits safe ActionScript
on the back end

827
00:30:02,734 --> 00:30:05,067
so that this Flex compiler
can compile it.

828
00:30:05,067 --> 00:30:07,400
Secondly, I've wrapped a lot

829
00:30:07,400 --> 00:30:10,067
of the flash.display media

830
00:30:10,067 --> 00:30:12,734
and other APIs that are part
of the Flex SDK

831
00:30:12,734 --> 00:30:14,400
with overlay types in GWT.

832
00:30:14,400 --> 00:30:16,400
So you can just call directly
into the native Flash platform

833
00:30:16,400 --> 00:30:18,734
if you want to,
just from Java code,

834
00:30:18,734 --> 00:30:21,067
like create a sprite
and add it somewhere.

835
00:30:21,067 --> 00:30:22,901
So you don't have to use
ForPlay, actually.

836
00:30:22,901 --> 00:30:25,901
You can just write
a Flash-only app if you want,

837
00:30:25,901 --> 00:30:27,567
your Flex app.

838
00:30:27,567 --> 00:30:30,734
And third, it has a specialized
set of linkers on the back end

839
00:30:30,734 --> 00:30:33,234
that package up
ActionScript resources

840
00:30:33,234 --> 00:30:34,901
and run the Flash compiler.

841
00:30:34,901 --> 00:30:36,901
And later on, actually,
they're gonna use swfmill

842
00:30:36,901 --> 00:30:38,734
to do asset packaging.

843
00:30:38,734 --> 00:30:41,567
So it will package your
other images and artworks

844
00:30:41,567 --> 00:30:45,067
directly into the SWF file,
um, for you.

845
00:30:45,067 --> 00:30:47,901
So...

846
00:30:47,901 --> 00:30:49,567
Let's wrap up.

847
00:30:49,567 --> 00:30:52,434
Um, why GWT?

848
00:30:52,434 --> 00:30:54,400
Performance,
ease of writing code,

849
00:30:54,400 --> 00:30:55,901
and portability.

850
00:30:55,901 --> 00:30:58,567
Um, I've showed you
the core components

851
00:30:58,567 --> 00:31:00,567
of architecting a game--
the I/O system,

852
00:31:00,567 --> 00:31:02,801
the asset management,
and the event loop.

853
00:31:02,801 --> 00:31:05,801
And we've shown that by using
an abstract platform

854
00:31:05,801 --> 00:31:07,968
that's not really GWT-specific
or Android-specific,

855
00:31:07,968 --> 00:31:10,133
you can write a game
that can target multiple,

856
00:31:10,133 --> 00:31:11,968
including Flash.

857
00:31:11,968 --> 00:31:14,467
Um, and the last thing
I'd like to say is,

858
00:31:14,467 --> 00:31:16,467
um, go build a game.

859
00:31:16,467 --> 00:31:19,467
So download this library.
It's in an alpha state.

860
00:31:19,467 --> 00:31:21,467
Documentation is kind of poor
right now. We apologize.

861
00:31:21,467 --> 00:31:24,467
We've been spending more time
preparing for presentation

862
00:31:24,467 --> 00:31:26,100
than documenting,

863
00:31:26,100 --> 00:31:28,067
but we're gonna be working on it
over the next couple days.

864
00:31:28,067 --> 00:31:30,067
But take a look at it
and have fun.

865
00:31:30,067 --> 00:31:32,934
And, um...

866
00:31:32,934 --> 00:31:35,000
we have a lot of time
to answer questions,

867
00:31:35,000 --> 00:31:37,000
'cause we anticipated
there will be some.

868
00:31:37,000 --> 00:31:39,968
So it's question time.

869
00:31:39,968 --> 00:31:42,901
Thank you.
[applause]

870
00:31:48,534 --> 00:31:50,868
man: Hi, um,
so is there, like,

871
00:31:50,868 --> 00:31:53,534
the equivalent of JSNI
for the Flash pack-in?

872
00:31:53,534 --> 00:31:55,367
So can we write
native ActionScript

873
00:31:55,367 --> 00:31:57,367
to interface between
the Java world and the usable--

874
00:31:57,367 --> 00:31:59,400
Rogers: Would that--
would that be "ASNI?"

875
00:31:59,400 --> 00:32:03,100
[laughter]

876
00:32:03,100 --> 00:32:05,934
Cromwell: So, um, yes,
and in fact,

877
00:32:05,934 --> 00:32:07,934
that's how the ForPlay library
is written.

878
00:32:07,934 --> 00:32:10,434
So there is a whole bunch
of JSNI classes

879
00:32:10,434 --> 00:32:12,100
that are already there for you

880
00:32:12,100 --> 00:32:14,934
to access, like,
flash.display, flash.advance,

881
00:32:14,934 --> 00:32:17,267
flash.net, uh, flash.media.

882
00:32:17,267 --> 00:32:19,767
So I've covered
sort of the minimal set

883
00:32:19,767 --> 00:32:22,434
of Flash APIs already
that you'd want to call into

884
00:32:22,434 --> 00:32:23,934
for the game,

885
00:32:23,934 --> 00:32:25,767
but if you download
the source code,

886
00:32:25,767 --> 00:32:27,767
you're welcome to actually write
your own JSNI classes.

887
00:32:27,767 --> 00:32:29,601
man: And is the source
for that available, as well,

888
00:32:29,601 --> 00:32:31,601
for that back end? Is that out
on the same web site?

889
00:32:31,601 --> 00:32:33,601
Cromwell: Yes.
Uh, they're--

890
00:32:33,601 --> 00:32:35,934
they actually parallel--it's--
it's really easy to find.

891
00:32:35,934 --> 00:32:37,601
You'll just see
a source directory,

892
00:32:37,601 --> 00:32:40,267
and there'll be, like,
flash/net, flash/display,

893
00:32:40,267 --> 00:32:43,100
so exactly parallel
to the Flash APIs.

894
00:32:43,100 --> 00:32:45,100
man: Oh, great. Thanks.

895
00:32:45,100 --> 00:32:47,100
Cromwell: By the way, I think
I might not have checked in

896
00:32:47,100 --> 00:32:49,100
a JAR file
for the Flash compiler yet.

897
00:32:49,100 --> 00:32:51,267
So if--don't be disappointed.
After the session,

898
00:32:51,267 --> 00:32:53,601
I'll go make sure
the web site has everything.

899
00:32:53,601 --> 00:32:55,100
Uh, go ahead.

900
00:32:55,100 --> 00:32:57,934
man: Uh, you mentioned that,
uh, you've abstracted the I/O

901
00:32:57,934 --> 00:33:01,501
from the, uh, drawings
and the control input,

902
00:33:01,501 --> 00:33:03,501
but what about stuff,
like, for networking

903
00:33:03,501 --> 00:33:05,501
for multiplayer?
Cromwell: Uh, good question.

904
00:33:05,501 --> 00:33:08,501
So actually, we have
a ForPlay.net class

905
00:33:08,501 --> 00:33:11,334
that abstracts the network,
as well as--

906
00:33:11,334 --> 00:33:13,000
so it doesn't do WebSockets yet,

907
00:33:13,000 --> 00:33:16,834
but it abstracts asynchronous
push/pull response requests.

908
00:33:16,834 --> 00:33:19,501
And it even extracts--
um, abstracts JSON

909
00:33:19,501 --> 00:33:21,000
across multiple platforms.

910
00:33:21,000 --> 00:33:23,000
So you can fetch--
for example, the level beta

911
00:33:23,000 --> 00:33:26,501
to load, um, the peas level
as a JSON file,

912
00:33:26,501 --> 00:33:28,501
and there's a parser on Android,

913
00:33:28,501 --> 00:33:30,000
there's one on Flash,

914
00:33:30,000 --> 00:33:32,000
and there's one on HTML5
and Java.

915
00:33:32,000 --> 00:33:34,000
Rogers: Yeah, to take that
a step further,

916
00:33:34,000 --> 00:33:36,667
this cross-platform JSON parser
is really useful,

917
00:33:36,667 --> 00:33:38,501
for instance,
for sprite sheets.

918
00:33:38,501 --> 00:33:40,501
And I think that Rovio used that
for "Angry Birds."

919
00:33:40,501 --> 00:33:42,501
You essentially have
one single image,

920
00:33:42,501 --> 00:33:44,501
and you have different
little sprite sheets on it,

921
00:33:44,501 --> 00:33:47,934
and ForPlay's really good
at that stuff.

922
00:33:47,934 --> 00:33:49,934
man: Does this use 2.3

923
00:33:49,934 --> 00:33:51,934
or does it require 2.4 beta?

924
00:33:51,934 --> 00:33:55,167
Cromwell: It uses 2.3--
well, I built it with 2.3.3.

925
00:33:55,167 --> 00:33:57,501
Um, so it should--
should work on there.

926
00:33:57,501 --> 00:33:59,501
But I haven't tested it
on 3.0 yet.

927
00:33:59,501 --> 00:34:01,400
Hopefully, it works there.
[chuckles]

928
00:34:01,400 --> 00:34:03,234
[man speaking indistinctly]

929
00:34:03,234 --> 00:34:05,734
Cromwell: Okay, 2.4.

930
00:34:05,734 --> 00:34:07,734
Oh, you were asking about GWT.

931
00:34:07,734 --> 00:34:09,901
Ah, I thought you were
talking about Android.

932
00:34:09,901 --> 00:34:11,901
Rogers: Uh, yeah.
No, it works on 2.3.

933
00:34:11,901 --> 00:34:13,934
Cromwell: It works on 2.3.
Rogers: The answer is yes.

934
00:34:13,934 --> 00:34:16,400
Cromwell: It just so happens
that I have 2.3 on my phone.

935
00:34:16,400 --> 00:34:18,567
man: So hi, um,
how's the performance

936
00:34:18,567 --> 00:34:21,234
compared from the HTML version

937
00:34:21,234 --> 00:34:23,901
versus the Java
or Android version?

938
00:34:23,901 --> 00:34:27,067
And have you tested
on other branded, uh,

939
00:34:27,067 --> 00:34:29,000
mobile operating systems?

940
00:34:29,000 --> 00:34:30,501
Cromwell: Good question.

941
00:34:30,501 --> 00:34:32,501
So the performance
for desktop Java,

942
00:34:32,501 --> 00:34:35,400
for Android,
and for HTML5 browsers,

943
00:34:35,400 --> 00:34:38,067
at least the ones
that we all like,

944
00:34:38,067 --> 00:34:40,901
uh, is actually very good,
as you saw with "Angry Birds."

945
00:34:40,901 --> 00:34:42,901
The performance in Flash,

946
00:34:42,901 --> 00:34:45,067
of executing the code in Flash,

947
00:34:45,067 --> 00:34:47,100
is not quite as good as V8.

948
00:34:47,100 --> 00:34:49,400
Um, so the Flash game
is not quite as good as V8,

949
00:34:49,400 --> 00:34:51,400
but it's also because the code
that I'm generating

950
00:34:51,400 --> 00:34:54,400
out of the GWT compiler
is not optimal yet for Flash.

951
00:34:54,400 --> 00:34:57,801
So I generate
typeless ActionScript 3.

952
00:34:57,801 --> 00:35:00,067
And so I'm not giving
the Flash VM

953
00:35:00,067 --> 00:35:02,667
the opportunity
to do more optimization.

954
00:35:02,667 --> 00:35:05,000
So later revisions
of the Flash compiler

955
00:35:05,000 --> 00:35:07,000
will probably produce
more optimal code.

956
00:35:07,000 --> 00:35:08,934
But in my testing,

957
00:35:08,934 --> 00:35:12,634
it actually runs well enough
to do a game on Flash, as well.

958
00:35:12,634 --> 00:35:15,501
So--so to answer your question
about mobile platforms,

959
00:35:15,501 --> 00:35:17,400
I don't know if we can
give numbers,

960
00:35:17,400 --> 00:35:20,467
but I will say we have loaded up
some of the games we've done,

961
00:35:20,467 --> 00:35:22,801
including "Angry Birds,"

962
00:35:22,801 --> 00:35:24,801
on, uh, an iPad 2.

963
00:35:24,801 --> 00:35:27,801
And the frame rate
was way above my expectations.

964
00:35:27,801 --> 00:35:30,300
I wouldn't say that people
would be happy about it

965
00:35:30,300 --> 00:35:31,968
compared to the native version,

966
00:35:31,968 --> 00:35:33,968
but what it gives--
says is that if they make

967
00:35:33,968 --> 00:35:35,968
the browser slightly faster
on the mobile devices,

968
00:35:35,968 --> 00:35:37,634
or if Moore's Law kicks in,

969
00:35:37,634 --> 00:35:39,634
and the iPad 3 is,
like, twice as fast,

970
00:35:39,634 --> 00:35:41,634
you might be able to get
60 frames per second

971
00:35:41,634 --> 00:35:44,634
with an HTML5 game
on those devices.

972
00:35:44,634 --> 00:35:46,968
man: Um, yeah, you kind of
just answered my question

973
00:35:46,968 --> 00:35:48,968
about the Flash player speed.

974
00:35:48,968 --> 00:35:51,801
I wonder if you could elaborate
that on--you know, any more,

975
00:35:51,801 --> 00:35:53,834
sort of what things
you might plan for that,

976
00:35:53,834 --> 00:35:55,467
or if that was
just an example.

977
00:35:55,467 --> 00:35:57,467
Cromwell: Yeah, so, um,
there are a couple of things

978
00:35:57,467 --> 00:35:59,467
that we're not doing
that we could do.

979
00:35:59,467 --> 00:36:03,033
So one is, we don't--
we don't generate, um, types.

980
00:36:03,033 --> 00:36:05,033
So we could generate
ActionScript 3 classes

981
00:36:05,033 --> 00:36:07,033
for each Java class

982
00:36:07,033 --> 00:36:10,033
and generate methods
instead of functions.

983
00:36:10,033 --> 00:36:11,534
So basically, we're using

984
00:36:11,534 --> 00:36:13,367
the existing GWT back end
with modifications.

985
00:36:13,367 --> 00:36:15,367
So a lot of things just become
JavaScript functions

986
00:36:15,367 --> 00:36:17,033
instead of ActionScript methods.

987
00:36:17,033 --> 00:36:18,868
So that compiles fine,
and it works,

988
00:36:18,868 --> 00:36:20,868
but it probably
does not run optimally

989
00:36:20,868 --> 00:36:22,701
in the Flash VM.

990
00:36:22,701 --> 00:36:24,701
But, um, I'm--
that's the next step.

991
00:36:24,701 --> 00:36:26,734
So the next to-do for me
is to make the compiler

992
00:36:26,734 --> 00:36:29,033
generate much more optimal
ActionScript 3 code.

993
00:36:29,033 --> 00:36:31,033
man: How about size--
how about size-wise?

994
00:36:31,033 --> 00:36:33,701
Does it make a fairly large SWF,
or do you have, uh,

995
00:36:33,701 --> 00:36:36,701
any way of making modules
or rCells or anything like that?

996
00:36:36,701 --> 00:36:38,534
Cromwell: So it--
it actually makes--

997
00:36:38,534 --> 00:36:40,367
it makes actually
pretty small SWF.

998
00:36:40,367 --> 00:36:43,868
I believe the peas game
was about 58k,

999
00:36:43,868 --> 00:36:45,868
and there's some packaged
resources in there,

1000
00:36:45,868 --> 00:36:47,868
but it could--
it could be better.

1001
00:36:47,868 --> 00:36:50,701
Um, GWT, you know,
has code-splitting capability,

1002
00:36:50,701 --> 00:36:52,701
and, um, we could use that
to leverage

1003
00:36:52,701 --> 00:36:55,701
by splitting an application
across multiple SWFs

1004
00:36:55,701 --> 00:36:57,534
and loading them in
on the man--

1005
00:36:57,534 --> 00:36:59,400
but we haven't
investigated that yet.

1006
00:36:59,400 --> 00:37:01,033
That's a good question.

1007
00:37:01,033 --> 00:37:03,267
man: So I apologize if this
has been covered already,

1008
00:37:03,267 --> 00:37:06,767
but, uh, so does the ForPlay API
cover audio at all?

1009
00:37:06,767 --> 00:37:08,767
Cromwell: Yes, it has--
Rogers: That's a good point.

1010
00:37:08,767 --> 00:37:10,434
Cromwell: Yeah, okay.
Rogers: Go ahead.

1011
00:37:10,434 --> 00:37:12,767
Cromwell: So, uh, yes, but it
covers very primitive audio,

1012
00:37:12,767 --> 00:37:15,934
because when we started, uh,
we knew we had to target

1013
00:37:15,934 --> 00:37:18,100
basically what was enabled
in Chrome 11

1014
00:37:18,100 --> 00:37:20,601
with just a regular audio tag,

1015
00:37:20,601 --> 00:37:23,934
which is basically just based
on streaming basic audio.

1016
00:37:23,934 --> 00:37:27,434
Um, so basically, yes, on Flash,
we used the Flash sound APIs

1017
00:37:27,434 --> 00:37:29,100
to play the audio.

1018
00:37:29,100 --> 00:37:31,100
On HTML5, we used the audio tag

1019
00:37:31,100 --> 00:37:34,100
or we'll use SoundManager 2
Flash library to do it.

1020
00:37:34,100 --> 00:37:36,100
Or on Android, we used
a native sound API.

1021
00:37:36,100 --> 00:37:38,100
So sound is supported,
but it's very--it's very basic.

1022
00:37:38,100 --> 00:37:42,100
You can play, um,
OGG or MP3 or WAV files on cue,

1023
00:37:42,100 --> 00:37:43,601
but you can't do
much manipulation.

1024
00:37:43,601 --> 00:37:45,601
But that--
that will change.

1025
00:37:45,601 --> 00:37:47,601
man: Okay, thank you.
Cromwell: Yep.

1026
00:37:47,601 --> 00:37:49,601
man: I'm kind of wondering
what your support is

1027
00:37:49,601 --> 00:37:52,934
for binary data over the wire
when it comes to AMF,

1028
00:37:52,934 --> 00:37:54,767
if you were sending it
to BlazeDS

1029
00:37:54,767 --> 00:37:56,601
or protocol buffers
or something else.

1030
00:37:56,601 --> 00:37:58,601
You talked about JSON,
but I don't know if you...

1031
00:37:58,601 --> 00:38:00,434
Cromwell: Right.
man: Had any experience

1032
00:38:00,434 --> 00:38:02,501
dealing with mapping
ActionScript objects to POJOs

1033
00:38:02,501 --> 00:38:04,000
and cogenerating that
in JSON...

1034
00:38:04,000 --> 00:38:06,033
Cromwell: Yeah, so we haven't
added any support yet,

1035
00:38:06,033 --> 00:38:07,501
because we kind of wanted--

1036
00:38:07,501 --> 00:38:09,501
we took the least common
denominator support for that.

1037
00:38:09,501 --> 00:38:11,667
So you can fetch
known binary assets,

1038
00:38:11,667 --> 00:38:14,334
like, um, media assets, right,
as binary.

1039
00:38:14,334 --> 00:38:16,501
And that works because
it basically translates

1040
00:38:16,501 --> 00:38:20,000
directly to the Flash
loader API or URL loader.

1041
00:38:20,000 --> 00:38:22,000
But, um,
if you just want to load up

1042
00:38:22,000 --> 00:38:24,167
an arbitrary binary file,
we don't really support that,

1043
00:38:24,167 --> 00:38:26,167
because until very recently,

1044
00:38:26,167 --> 00:38:29,501
it was slow in HTML5 to load
large-scale binary objects.

1045
00:38:29,501 --> 00:38:31,000
But that's changing now.

1046
00:38:31,000 --> 00:38:32,834
There's the type, the RSpec,

1047
00:38:32,834 --> 00:38:34,834
and there's a couple
other APIs for doing it.

1048
00:38:34,834 --> 00:38:36,501
So that will
probably be added later.

1049
00:38:36,501 --> 00:38:38,000
man: Thank you.

1050
00:38:38,000 --> 00:38:40,000
Cromwell: Hey,
what are you doing here?

1051
00:38:40,000 --> 00:38:41,868
Rogers: Who let this guy in?
[laughs]

1052
00:38:41,868 --> 00:38:43,501
man: I actually have a question.

1053
00:38:43,501 --> 00:38:45,501
So actually, like, how do you
guys simulate the event loop

1054
00:38:45,501 --> 00:38:48,501
in--in JavaScript
on the web platform?

1055
00:38:48,501 --> 00:38:50,501
Because it's just--I don't know.

1056
00:38:50,501 --> 00:38:52,501
Do you--do you use time-outs?
I'm just curious.

1057
00:38:52,501 --> 00:38:54,501
Cromwell: Okay,
so for the browser--

1058
00:38:54,501 --> 00:38:56,834
If your browser supports
requestAnimationFrame,

1059
00:38:56,834 --> 00:38:58,334
we use that.

1060
00:38:58,334 --> 00:39:00,167
And what happens
is the browser will--

1061
00:39:00,167 --> 00:39:01,734
when it's drawing--

1062
00:39:01,734 --> 00:39:03,901
so if you actually focus the tab
that's on the screen,

1063
00:39:03,901 --> 00:39:06,234
it's visible--when it's
drawing at 60 times a second,

1064
00:39:06,234 --> 00:39:08,567
it will call you, basically,
so on a schedule.

1065
00:39:08,567 --> 00:39:10,901
Uh, if your browser
doesn't have it,

1066
00:39:10,901 --> 00:39:13,601
then we'll fall back
to setTimeout or setInterval.

1067
00:39:13,601 --> 00:39:15,567
Um, obviously, not as efficient,
so it--

1068
00:39:15,567 --> 00:39:17,901
we basically take as efficient
a path as we can.

1069
00:39:17,901 --> 00:39:19,901
And on Android, of course,
we use multiple threads

1070
00:39:19,901 --> 00:39:22,234
and looper, um,
and handler objects

1071
00:39:22,234 --> 00:39:24,734
to basically, you know, have
everything run in one thread,

1072
00:39:24,734 --> 00:39:27,234
and then we post messages
to it with events.

1073
00:39:27,234 --> 00:39:29,234
Rogers: And what this means
is for something like peas--

1074
00:39:29,234 --> 00:39:31,234
your physics actually runs
in the background

1075
00:39:31,234 --> 00:39:32,734
using set time-outs.

1076
00:39:32,734 --> 00:39:34,734
but your phy--your drawing--
your paint update loop

1077
00:39:34,734 --> 00:39:36,567
doesn't run at all.
Cromwell: Yeah, actually,

1078
00:39:36,567 --> 00:39:38,567
it's interesting on Android,
because Android supports

1079
00:39:38,567 --> 00:39:40,067
multiple threads,
unlike the browser.

1080
00:39:40,067 --> 00:39:42,067
Um, you actually get
a little bit of a boost,

1081
00:39:42,067 --> 00:39:44,067
because you can run the physics
and stuff in the background,

1082
00:39:44,067 --> 00:39:46,100
and you can run the paint loop
in a different thread,

1083
00:39:46,100 --> 00:39:48,501
which is pretty cool.
man: Thanks.

1084
00:39:48,501 --> 00:39:50,501
man: Is--is the new
Flash back end

1085
00:39:50,501 --> 00:39:52,501
gonna become a part of GWT,
or is it gonna--

1086
00:39:52,501 --> 00:39:54,501
is it gonna just be
part of ForPlay?

1087
00:39:54,501 --> 00:39:56,501
Is it gonna be, like, a--
will it be supported

1088
00:39:56,501 --> 00:39:58,501
for non-game use, I guess,
and those kind of things?

1089
00:39:58,501 --> 00:40:00,501
Cromwell: So, uh, this is not
an official Google project.

1090
00:40:00,501 --> 00:40:02,400
This is kinda like
the personal pet project

1091
00:40:02,400 --> 00:40:05,067
of a bunch of people who have,
like, an itch to scratch.

1092
00:40:05,067 --> 00:40:07,901
But, uh, so it will be
part of ForPlay.

1093
00:40:07,901 --> 00:40:10,400
And, um, going forward,

1094
00:40:10,400 --> 00:40:12,067
um, we will be supporting it,

1095
00:40:12,067 --> 00:40:14,067
'cause we're gonna be using it
for multiple things.

1096
00:40:14,067 --> 00:40:16,067
So you don't need to use it
for games, actually.

1097
00:40:16,067 --> 00:40:17,901
So if you wanted to build

1098
00:40:17,901 --> 00:40:19,567
a traditional
enterprise Flex app,

1099
00:40:19,567 --> 00:40:21,400
but you wanted to use
Java to do it and Eclipse,

1100
00:40:21,400 --> 00:40:23,567
you could actually use
the Flash compiler to do it,

1101
00:40:23,567 --> 00:40:26,067
because we exposed
most of the Flex APIs,

1102
00:40:26,067 --> 00:40:27,901
and it's easy to expose more

1103
00:40:27,901 --> 00:40:29,901
with regular GWT JSNI methods.

1104
00:40:29,901 --> 00:40:31,567
And you could
theoretically build

1105
00:40:31,567 --> 00:40:34,567
a Flex--a Flex ML,
you know, application.

1106
00:40:34,567 --> 00:40:36,901
man: But you don't intend to
fold it back into mainline GWT.

1107
00:40:36,901 --> 00:40:38,901
It's gonna remain
a separate project?

1108
00:40:38,901 --> 00:40:40,734
Rogers: I don't think Google
would support

1109
00:40:40,734 --> 00:40:42,567
something called ForPlay.
Cromwell: Yes.

1110
00:40:42,567 --> 00:40:44,400
[laughter]

1111
00:40:44,400 --> 00:40:46,234
man: I meant more
the Flash back end.

1112
00:40:46,234 --> 00:40:48,067
It's not gonna find its way
back into mainline GWT?

1113
00:40:48,067 --> 00:40:49,901
Cromwell: No, this is actually
one of the first times--

1114
00:40:49,901 --> 00:40:51,734
'cause the compiler
does have some hooks

1115
00:40:51,734 --> 00:40:53,601
for attaching other back ends,

1116
00:40:53,601 --> 00:40:56,400
and this is sort of
the first real ever, like,

1117
00:40:56,400 --> 00:40:58,000
add-on back end
that's been made public.

1118
00:40:58,000 --> 00:40:59,567
And there are other ones
in the pipeline,

1119
00:40:59,567 --> 00:41:01,434
so it's possible,
like, there might be

1120
00:41:01,434 --> 00:41:03,000
a separate web site,
like an incubator,

1121
00:41:03,000 --> 00:41:05,000
where we drop these things
in the future.

1122
00:41:05,000 --> 00:41:07,000
man: Thanks.
man: Hi, I was wondering

1123
00:41:07,000 --> 00:41:09,067
if you could clarify
how ForPlay development

1124
00:41:09,067 --> 00:41:12,067
compares to
or, you know, interacts

1125
00:41:12,067 --> 00:41:14,067
with sort of normal
GWT development?

1126
00:41:14,067 --> 00:41:16,067
So, you know,
would it be possible

1127
00:41:16,067 --> 00:41:17,968
to sort of build
your game Chrome,

1128
00:41:17,968 --> 00:41:19,801
you know, your menus
and your launch screens

1129
00:41:19,801 --> 00:41:21,634
and everything
in sort of normal GWT,

1130
00:41:21,634 --> 00:41:23,634
and then have sort of
the play area be in ForPlay?

1131
00:41:23,634 --> 00:41:25,467
Or is it really
expected to be

1132
00:41:25,467 --> 00:41:28,133
an entirely ForPlay
Canvas-based thing?

1133
00:41:28,133 --> 00:41:29,968
Rogers: Sure,
I can kind of answer this.

1134
00:41:29,968 --> 00:41:31,634
It's kind of twofold.

1135
00:41:31,634 --> 00:41:33,968
One is ForPlay allows you
to call out into the browser,

1136
00:41:33,968 --> 00:41:35,467
if you want to,

1137
00:41:35,467 --> 00:41:37,300
so in this--with this mechanism,

1138
00:41:37,300 --> 00:41:40,801
um, you can definitely write it
in the standard GWT way.

1139
00:41:40,801 --> 00:41:43,300
But the core of ForPlay--
like, writing a game

1140
00:41:43,300 --> 00:41:45,467
to that--
to the ForPlay game layer

1141
00:41:45,467 --> 00:41:47,467
is you're really writing
in pure Java,

1142
00:41:47,467 --> 00:41:49,133
and GWT is kind of a side issue.

1143
00:41:49,133 --> 00:41:51,133
Um, so--yes.
Cromwell: ForPlay development

1144
00:41:51,133 --> 00:41:52,968
is actually not really
GWT development.

1145
00:41:52,968 --> 00:41:54,634
But I--there's a caveat
to that.

1146
00:41:54,634 --> 00:41:56,634
You can actually match it up
with any arbitrary GWT app.

1147
00:41:56,634 --> 00:41:59,634
So, for example, I believe,
and correct me if I'm wrong,

1148
00:41:59,634 --> 00:42:01,701
but "Angry Birds" actually--
like, the--

1149
00:42:01,701 --> 00:42:03,367
some of the buttons...
Rogers: Yeah.

1150
00:42:03,367 --> 00:42:04,868
Cromwell: Surrounding it,

1151
00:42:04,868 --> 00:42:06,701
like switching
between HD and SD versions--

1152
00:42:06,701 --> 00:42:08,534
there are other things
around the actual game

1153
00:42:08,534 --> 00:42:10,534
that are actually done
as you would normally expect

1154
00:42:10,534 --> 00:42:12,200
in a GWT app.
man: Okay.

1155
00:42:12,200 --> 00:42:14,200
And then when you talk
about cross-platform support,

1156
00:42:14,200 --> 00:42:15,868
and--but that
that applies really

1157
00:42:15,868 --> 00:42:19,701
to just the sort of game area
part of the game,

1158
00:42:19,701 --> 00:42:21,534
the ForPlay part of the game
is what--

1159
00:42:21,534 --> 00:42:23,033
Cromwell: Yes, I'm--

1160
00:42:23,033 --> 00:42:24,868
man: And so you redo
your Chrome on each platform.

1161
00:42:24,868 --> 00:42:26,701
Cromwell: That's right.
In theory, somebody could

1162
00:42:26,701 --> 00:42:28,534
create, like, a widget library
to abstract, like,

1163
00:42:28,534 --> 00:42:30,367
a list interface
and a tree interface and so on

1164
00:42:30,367 --> 00:42:32,200
and map those onto, like,
Android widgets

1165
00:42:32,200 --> 00:42:34,067
and onto GWT widgets,
and that would work.

1166
00:42:34,067 --> 00:42:37,033
Um, we kind of hope, actually,
by making it open source,

1167
00:42:37,033 --> 00:42:38,868
people might do
those sort of things,

1168
00:42:38,868 --> 00:42:40,534
sort of build things on top.
man: Okay.

1169
00:42:40,534 --> 00:42:42,367
Cromwell: Um, actually,
one of the other things is

1170
00:42:42,367 --> 00:42:44,200
that there are people
in the audience who are experts

1171
00:42:44,200 --> 00:42:45,868
on, like, asset pipelines
in games.

1172
00:42:45,868 --> 00:42:47,701
One of the things
we actually need is--is, um--

1173
00:42:47,701 --> 00:42:50,367
ForPlay's asset management
is very basic,

1174
00:42:50,367 --> 00:42:53,367
and for importing things
like SVG or Collada models

1175
00:42:53,367 --> 00:42:55,033
and things like that and meshes,

1176
00:42:55,033 --> 00:42:57,033
it would be cool
if people sort of built tools

1177
00:42:57,033 --> 00:42:58,701
to sort of assist in that part,

1178
00:42:58,701 --> 00:43:00,534
tying into the rest
of the R pipeline.

1179
00:43:00,534 --> 00:43:02,267
There you go.
man: Thank you.

1180
00:43:02,267 --> 00:43:03,767
man: Hi, again.

1181
00:43:03,767 --> 00:43:07,434
Uh, we just tried to enter
the Chrome "Angry Birds."

1182
00:43:07,434 --> 00:43:10,434
Cromwell: Uh-huh.
man: And it asked for Flash.

1183
00:43:10,434 --> 00:43:13,434
Is it compiled in Flash?
Cromwell: No, it's not.

1184
00:43:13,434 --> 00:43:16,267
Um, but what it is doing is,
is that, um,

1185
00:43:16,267 --> 00:43:18,767
it's using it for audio,
to play sounds.

1186
00:43:18,767 --> 00:43:21,934
So we originally were using
the built-in HTML5 audio tag

1187
00:43:21,934 --> 00:43:23,601
to play audio.

1188
00:43:23,601 --> 00:43:25,767
But we ran into some hiccups
at the last minute,

1189
00:43:25,767 --> 00:43:27,601
and I believe
those are being fixed

1190
00:43:27,601 --> 00:43:29,267
in newer versions
of the browser.

1191
00:43:29,267 --> 00:43:31,267
But in order to make sure
that the game was smooth

1192
00:43:31,267 --> 00:43:34,267
and had--and basically was
as bug-free as possible,

1193
00:43:34,267 --> 00:43:37,267
we--we used Flash
for the audio for now.

1194
00:43:37,267 --> 00:43:39,100
But--so that's not a--
sort of a knock

1195
00:43:39,100 --> 00:43:40,634
against HTML5 audio.

1196
00:43:40,634 --> 00:43:42,434
It's just that there were
some problems,

1197
00:43:42,434 --> 00:43:45,601
and we wanted to make sure
that the game ran perfectly.

1198
00:43:45,601 --> 00:43:47,267
man: So for multiple platforms,

1199
00:43:47,267 --> 00:43:49,434
how do you handle, like,
in-app purchases

1200
00:43:49,434 --> 00:43:51,100
and, uh, advertising?

1201
00:43:51,100 --> 00:43:53,100
Rogers: So there's callouts
into the browser.

1202
00:43:53,100 --> 00:43:54,934
Like I said, for instance,
in "Angry Birds,"

1203
00:43:54,934 --> 00:43:56,767
what Rovio did was
when you click, I think,

1204
00:43:56,767 --> 00:43:58,434
some of the buttons
in the game,

1205
00:43:58,434 --> 00:44:00,767
that you're basically
calling out into the browser.

1206
00:44:00,767 --> 00:44:02,667
You do the same thing
for the--

1207
00:44:02,667 --> 00:44:05,667
for your in-app payments
or whatever.

1208
00:44:05,667 --> 00:44:07,501
Um, in terms
of architecting it,

1209
00:44:07,501 --> 00:44:10,501
you basically--your--
you have several entry points

1210
00:44:10,501 --> 00:44:12,667
for each platform that I showed,
those small snippets.

1211
00:44:12,667 --> 00:44:15,334
Um, you can basically stick
that kind of code

1212
00:44:15,334 --> 00:44:17,834
in--into the platform-specific
entry point

1213
00:44:17,834 --> 00:44:19,501
and call into it
in that manner.

1214
00:44:19,501 --> 00:44:21,167
Cromwell: But to be
more specific,

1215
00:44:21,167 --> 00:44:23,000
there's no high-level
service-provider API

1216
00:44:23,000 --> 00:44:24,501
in there for that,

1217
00:44:24,501 --> 00:44:26,334
but that would be a nice thing
to add in, like,

1218
00:44:26,334 --> 00:44:27,834
the beta version,

1219
00:44:27,834 --> 00:44:29,834
uh, so that, like,
if you're in an Android app,

1220
00:44:29,834 --> 00:44:31,667
it uses the Android
in that purchase,

1221
00:44:31,667 --> 00:44:33,501
then if you're on Chrome,
it does that.

1222
00:44:33,501 --> 00:44:35,334
So that's a great idea.
And actually, so anybody

1223
00:44:35,334 --> 00:44:37,167
who doesn't want
to contribute code,

1224
00:44:37,167 --> 00:44:39,000
you can actually just go
to the issue tracker

1225
00:44:39,000 --> 00:44:40,834
and put in what you want,
and, you know,

1226
00:44:40,834 --> 00:44:43,000
maybe somebody will pick it up.

1227
00:44:43,000 --> 00:44:44,834
Rogers: I think that's it.
No more questions?

1228
00:44:44,834 --> 00:44:46,834
Cromwell: So we're letting
you guys go home early today.

1229
00:44:46,834 --> 00:44:48,667
You can get out
and play with your--

1230
00:44:48,667 --> 00:44:50,501
play some more
with your tablets.

1231
00:44:50,501 --> 00:44:52,334
Thanks for coming to Google IO.
Rogers: Thanks.

1232
00:44:52,334 --> 00:44:54,167
[applause]

1233
00:44:54,167 --> 00:44:56,434
Cromwell: And, uh, go forth
and make kick-ass games.

