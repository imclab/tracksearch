1
00:00:04,850 --> 00:00:09,870
Hi, my name is Henry Bridge and I am the Product
Manager for Native Client. I am here today

2
00:00:09,870 --> 00:00:14,889
to talk to you about our developer pre-release
of the Native Client SDK. This video will

3
00:00:14,889 --> 00:00:19,020
help you get familiar with the SDK and with
developing web apps that take advantage of

4
00:00:19,020 --> 00:00:23,520
native code.
For those of you who are new to this technology,

5
00:00:23,520 --> 00:00:29,250
Native Client is an open source project that
allows you to run native code in a web browser.

6
00:00:29,250 --> 00:00:33,000
This capability allows you to take the many
useful existing libraries written in languages

7
00:00:33,000 --> 00:00:38,730
like C or C++ and use them in your web app.
For example, say you wanted to run photo filters

8
00:00:38,730 --> 00:00:43,159
on your web gallery application. You could
use existing libraries that allow users to

9
00:00:43,159 --> 00:00:47,979
seamlessly perform smooth image manipulation
on your photos without leaving your website,

10
00:00:47,979 --> 00:00:53,300
and without installing other software.
Web applications that use Native Client consist

11
00:00:53,300 --> 00:00:58,460
of parts that are written in HTML, JavaScript
and CSS, as well as parts that are written

12
00:00:58,460 --> 00:01:04,989
in native code. The HTML, Java Script, and
CSS parts are deployed as text files. For

13
00:01:04,989 --> 00:01:09,890
the native code portions, you will need a
compiler that produces Native Client binaries.

14
00:01:09,890 --> 00:01:14,369
The Native Client SDK comes with a modified
version of GCC that will compile C or C++

15
00:01:14,369 --> 00:01:18,200
code to native code.
Imagine you want to write a video editing

16
00:01:18,200 --> 00:01:23,640
application for the web. You can write your
UI and basic program logic (such as metadata

17
00:01:23,640 --> 00:01:29,810
field editing and timeline controls) in HTML,
JavaScript and CSS. But when it comes to implementing

18
00:01:29,810 --> 00:01:35,149
the code to modify the video data, what is
the right approach? You could implement the

19
00:01:35,149 --> 00:01:40,890
video editing on the server but this approach
would waste bandwidth and also feel slow.

20
00:01:40,890 --> 00:01:44,600
On the other hand, you could try and implement
the video editing code that would run on the

21
00:01:44,600 --> 00:01:51,299
client in JavaScript but this would be difficult
to implement and would also be slow. Native

22
00:01:51,299 --> 00:01:55,780
Client allows you to get the best of both
worlds: download the data once to the client,

23
00:01:55,780 --> 00:02:01,450
and do the editing there. Periodically, the
application can just push a changelog up to

24
00:02:01,450 --> 00:02:05,640
the server for processing -- without impacting
performance.

25
00:02:05,640 --> 00:02:12,640
To get started, download our SDK from code.google.com/p/nativeclient-sdk.
The getting started guide on this site will

26
00:02:14,830 --> 00:02:19,610
walk you through installing the SDK so you
can begin building applications. Once you

27
00:02:19,610 --> 00:02:25,470
have setup your development environment properly,
navigate your browser to the hello world example.

28
00:02:25,470 --> 00:02:29,800
Then click the hello world button, and you
will get a dialog that pops up that is already

29
00:02:29,800 --> 00:02:35,460
made a round trip into native C++ code! Now,
lets see how this works.

30
00:02:35,460 --> 00:02:39,850
You can view source on the web page and see
that the hello world HTML page loads the Native

31
00:02:39,850 --> 00:02:45,830
Client module using an embed tag. On successful
load, a global variable pointing to the Native

32
00:02:45,830 --> 00:02:50,940
Client module is set. An onclick handler is
then set for the hello world button, which

33
00:02:50,940 --> 00:02:55,810
in turn calls the helloworld() function on
the Native Client module.

34
00:02:55,810 --> 00:03:00,310
Following this function call down into native
code, observe that the Invoke() call determines

35
00:03:00,310 --> 00:03:04,730
what method was called via a string compare.
Since the helloworld() function was called,

36
00:03:04,730 --> 00:03:10,680
it then calls InvokeHW(), which copies hello,
world into the result buffer. The result is

37
00:03:10,680 --> 00:03:15,350
then passed back to JavaScript when the function
returns and is displayed as an alert dialog

38
00:03:15,350 --> 00:03:18,960
in JavaScript.
Now try modifying the hello world text that

39
00:03:18,960 --> 00:03:22,650
is passed back.
Recompile the Native Client module by opening

40
00:03:22,650 --> 00:03:29,650
up a terminal cd-ing to the sdk/examples directory,
and running make.

41
00:03:29,650 --> 00:03:33,730
Reload the web page and the message will change
when you click the hello world button.

42
00:03:33,730 --> 00:03:38,300
While this simple hello world example is a
long way from a compelling application, we

43
00:03:38,300 --> 00:03:42,120
hope it is clear how Native Client makes it
possible to weave high-performance native

44
00:03:42,120 --> 00:03:47,580
C and C++ methods into a web application.
To make the best use of the power of running

45
00:03:47,580 --> 00:03:52,850
native code in a web application, Native Client
includes APIs to expose useful functionality

46
00:03:52,850 --> 00:03:56,390
beyond message passing between JavaScript
and native code.

47
00:03:56,390 --> 00:04:01,630
To handle resource management, Native Client
provides a set of low level Linux-like APIs,

48
00:04:01,630 --> 00:04:05,670
such as malloc and mmap that allow you to
handle resource allocation in the sandboxed

49
00:04:05,670 --> 00:04:11,020
system environment. In order to access browser
resources like the network, or communicate

50
00:04:11,020 --> 00:04:17,759
with the DOM, Native Client exposes NPAPI.
Finally, to provide platform independent multimedia

51
00:04:17,759 --> 00:04:22,890
interfaces such as 2D and 3D graphics, and
Audio, Native Client modules can interface

52
00:04:22,890 --> 00:04:29,710
with the NPAPI Pepper interfaces to OpenGL
ES 2.0 and to a stereo audio system.

53
00:04:29,710 --> 00:04:33,970
As an example of the kinds of compelling experiences
you can create with these APIs, here is some

54
00:04:33,970 --> 00:04:38,750
footage of a port we have done of Nexuiz,
an open source modern Quake engine that we

55
00:04:38,750 --> 00:04:45,130
ported to Native Client and to OpenGL ES 2.0.
If you are attending Google IO, come to our

56
00:04:45,130 --> 00:04:49,460
Beyond JavaScript talk for a deep dive on
the SDK, or come meet the team at the Developer

57
00:04:49,460 --> 00:04:56,250
Sandbox. For more resources visit our site
at: code.google.com/p/nativeclient-sdk.

