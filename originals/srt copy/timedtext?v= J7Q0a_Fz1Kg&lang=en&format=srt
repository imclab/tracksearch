1
00:00:03,199 --> 00:00:08,940
Hi! My name is Brad and I am one of the Tech
Leads for Native Client. In this video, I

2
00:00:08,940 --> 00:00:14,049
am going to dive into the technology that
makes Native Client apps possible.

3
00:00:14,049 --> 00:00:19,739
A key concept in Native Client is the sandbox,
an isolation technique that prevents downloaded

4
00:00:19,739 --> 00:00:26,160
code from doing things it’s not supposed
to. The Native Client sandbox prevents application

5
00:00:26,160 --> 00:00:32,860
code from interacting directly with the native
operating system. This is crucial for portability.

6
00:00:32,860 --> 00:00:37,710
If an app invoked the native OS directly,
it couldn’t run on other operating systems.

7
00:00:37,710 --> 00:00:43,180
It’s also essential for security, because
the native operating system provides access

8
00:00:43,180 --> 00:00:47,860
to resources like your files that need to
be protected.

9
00:00:47,860 --> 00:00:53,310
The Native Client sandbox is implemented using
a technique called Software Fault Isolation.

10
00:00:53,310 --> 00:00:58,550
This technique was first introduced in the
early 90’s. It’s based on the use of assembly-language

11
00:00:58,550 --> 00:01:04,850
idioms that are easy to recognize and that,
when used, make it possible to prove certain

12
00:01:04,850 --> 00:01:10,749
things about the program’s behavior. For
example, if you insure that all data addresses

13
00:01:10,749 --> 00:01:16,310
used by a program are greater than a particular
address, then you know that no memory references

14
00:01:16,310 --> 00:01:22,139
can happen below that address. Using software
fault isolation we implement what we call

15
00:01:22,139 --> 00:01:28,920
reliable disassembly. This means that we know
every instruction a program can execute, and

16
00:01:28,920 --> 00:01:33,749
won’t run it unless we can prove that each
instruction is safe.

17
00:01:33,749 --> 00:01:37,880
Defense in depth is another key concept for
Native Client.

18
00:01:37,880 --> 00:01:42,429
Suppose you had a brick of gold. You might
put it in a safe, but you wouldn’t leave

19
00:01:42,429 --> 00:01:47,450
that safe sitting out in your front yard.
Maybe you’d put it inside your house, maybe

20
00:01:47,450 --> 00:01:53,939
even in a locked room, and you would probably
lock your house too. In the same way, Native

21
00:01:53,939 --> 00:02:00,319
Client uses multiple layers of protection
that make it much harder to attack the system.

22
00:02:00,319 --> 00:02:05,729
We also apply best practices such as strict
coding standards and multiple internal and

23
00:02:05,729 --> 00:02:11,459
external security reviews to insure that our
system is really safe.

24
00:02:11,459 --> 00:02:15,819
Openness is another key principle we’ve
applied in this system. We’ve built the

25
00:02:15,819 --> 00:02:22,819
system around established open standards like
HTML5, C, C++, POSIX and ELF, to make it easily

26
00:02:24,590 --> 00:02:30,480
accessible to a large community of developers.
We’ve open-sourced our system, because we’ve

27
00:02:30,480 --> 00:02:35,349
seen that scrutiny and input from the developer
community makes our system better.

28
00:02:35,349 --> 00:02:40,569
I hope you’ve enjoyed this quick overview
of some of the principles behind Native Client

29
00:02:40,569 --> 00:02:44,469
technology. To learn more visit our site at
gonacl.com.

