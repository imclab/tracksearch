1
00:00:00,868 --> 00:00:01,334
Glazkov: So I'm, um,
[coughs]

2
00:00:01,334 --> 00:00:02,534
I'm Dimitri Glazkov.

3
00:00:02,534 --> 00:00:04,300
I've been preparing this
all night.

4
00:00:04,300 --> 00:00:06,000
And I hope this works.

5
00:00:06,000 --> 00:00:08,968
And actually I decided
to do slides

6
00:00:08,968 --> 00:00:11,300
about 30 minutes ago.

7
00:00:11,300 --> 00:00:13,868
Because I didn't think
that all of this

8
00:00:13,868 --> 00:00:16,834
can be explained with
enough love and care

9
00:00:16,834 --> 00:00:20,868
by just using, you know,
shooting from the hip.

10
00:00:20,868 --> 00:00:22,701
So basically there you go.

11
00:00:22,701 --> 00:00:23,901
This is a WebKit.

12
00:00:23,901 --> 00:00:25,901
It's a rendering engine
that we use.

13
00:00:25,901 --> 00:00:27,734
Obviously
who doesn't know that?

14
00:00:27,734 --> 00:00:29,534
You're probably
in the wrong spot.

15
00:00:29,534 --> 00:00:35,434
Um, and it's a fairly, um,
um, complex piece of code.

16
00:00:35,434 --> 00:00:37,567
And basically
it has the structure

17
00:00:37,567 --> 00:00:38,968
is there's a WebCore

18
00:00:38,968 --> 00:00:42,267
which is where the majority
of rendering occurs.

19
00:00:42,267 --> 00:00:46,133
And then there's JavaScriptCore
which we don't use.

20
00:00:46,133 --> 00:00:48,734
And in JavaScriptCore
there is a subproject,

21
00:00:48,734 --> 00:00:51,934
or a subset of classes
that's called wtf.

22
00:00:51,934 --> 00:00:54,334
man: Yes, really.

23
00:00:54,334 --> 00:00:56,501
Glazkov: Yes, that's really
how it's called.

24
00:00:56,501 --> 00:00:59,868
And it's a WebCore-type
foundation.

25
00:00:59,868 --> 00:01:03,100
Or WebKit-type foundation.

26
00:01:03,100 --> 00:01:06,300
And then there's some threading
stuff there

27
00:01:06,300 --> 00:01:10,000
because that was the easiest
place to stick it into.

28
00:01:10,000 --> 00:01:13,667
So you will find some
really interesting nuggets

29
00:01:13,667 --> 00:01:15,534
of information like this

30
00:01:15,534 --> 00:01:18,400
as you start studying the code.

31
00:01:18,400 --> 00:01:19,501
What am I looking at?

32
00:01:19,501 --> 00:01:21,033
Should be looking
at everybody.

33
00:01:21,033 --> 00:01:23,734
And so WebCore is where
most of the magic is.

34
00:01:23,734 --> 00:01:25,868
And then there's WebKit

35
00:01:25,868 --> 00:01:30,033
which is essentially
the glue layer

36
00:01:30,033 --> 00:01:33,567
or the actual port
of WebCore.

37
00:01:33,567 --> 00:01:35,868
And there's one for Mac,
there's one for Qt.

38
00:01:35,868 --> 00:01:39,868
There's one for Chromium
coming soon.

39
00:01:39,868 --> 00:01:41,501
And Darin is working on that.

40
00:01:41,501 --> 00:01:43,133
Where's Darin?
Did he leave?

41
00:01:43,133 --> 00:01:44,267
man: He left.

42
00:01:44,267 --> 00:01:48,734
Glazkov: Now I can bad-mouth
him all I want.

43
00:01:48,734 --> 00:01:51,834
So the directory structure
is also fairly--

44
00:01:51,834 --> 00:01:54,234
if you look at the WebCore
it's fairly straight forward.

45
00:01:54,234 --> 00:01:57,734
Pretty much all the naming
convention

46
00:01:57,734 --> 00:02:02,033
has now been made
pretty much logical.

47
00:02:02,033 --> 00:02:03,367
You can kind of understand
what's going on.

48
00:02:03,367 --> 00:02:04,767
Like bindings for example

49
00:02:04,767 --> 00:02:08,234
is where all of the bindings
to JavaScript engines

50
00:02:08,234 --> 00:02:09,834
or objective c live.

51
00:02:09,834 --> 00:02:11,767
Dom deals with dom.

52
00:02:11,767 --> 00:02:13,834
Css deals with css.

53
00:02:13,834 --> 00:02:15,300
And so on and so forth.

54
00:02:15,300 --> 00:02:18,501
And so what we do

55
00:02:18,501 --> 00:02:22,667
is we--we now have
a formal--

56
00:02:22,667 --> 00:02:24,334
we have a foothold
in WebKit upstream.

57
00:02:24,334 --> 00:02:26,000
And this is our port

58
00:02:26,000 --> 00:02:28,701
which is basically
the chromium port.

59
00:02:28,701 --> 00:02:30,033
You will see a bunch
of directories.

60
00:02:30,033 --> 00:02:32,300
Like there's one
for platform chromium.

61
00:02:32,300 --> 00:02:37,200
There's one for graphics
and skier related things.

62
00:02:37,200 --> 00:02:41,434
There's Google URL
that we implement very nicely.

63
00:02:41,434 --> 00:02:42,868
V8 obviously.

64
00:02:42,868 --> 00:02:44,801
And so this looks
really, really cool

65
00:02:44,801 --> 00:02:47,501
except have you guys seen--

66
00:02:47,501 --> 00:02:51,701
Who hasn't seen <i>The Matrix?</i>

67
00:02:51,701 --> 00:02:53,300
Okay.
You haven't seen <i>The Matrix?</i>

68
00:02:53,300 --> 00:02:56,467
Okay, then this is gonna be
completely irrelevant for you.

69
00:02:56,467 --> 00:03:00,434
Have you guys seen one
of those famous action shots

70
00:03:00,434 --> 00:03:03,501
where Keanu Reeves is, like,
you know, dodging bullets

71
00:03:03,501 --> 00:03:04,734
and he's, like, standing
that way?

72
00:03:04,734 --> 00:03:08,400
And if you were to be
introduced to Keanu

73
00:03:08,400 --> 00:03:09,901
at this particular moment
in time,

74
00:03:09,901 --> 00:03:12,467
you'd have a very uncomfortable
impression of Keanu

75
00:03:12,467 --> 00:03:15,467
because the guy basically
walks like this.

76
00:03:15,467 --> 00:03:19,434
And so this is exactly the
impression that you would get

77
00:03:19,434 --> 00:03:21,200
if you look at our port
right now

78
00:03:21,200 --> 00:03:23,000
because we are in transition

79
00:03:23,000 --> 00:03:25,234
and so there's a bunch
of things that are supposed

80
00:03:25,234 --> 00:03:27,133
to be in the right spot
but they're not.

81
00:03:27,133 --> 00:03:29,868
And so we're still moving.

82
00:03:29,868 --> 00:03:34,467
And so when you go look
at for example v8 bindings,

83
00:03:34,467 --> 00:03:36,133
you'd find that some v8 bindings

84
00:03:36,133 --> 00:03:38,968
live in upstream proper
and some of them live

85
00:03:38,968 --> 00:03:42,267
in source WebKit port
bindings v8.

86
00:03:42,267 --> 00:03:44,300
That's not because
we're so smart.

87
00:03:44,300 --> 00:03:47,667
That's because we are
still working on it.

88
00:03:47,667 --> 00:03:49,834
And so a lot of people
get--

89
00:03:49,834 --> 00:03:52,267
I actually was asked
today at lunch

90
00:03:52,267 --> 00:03:53,601
is like, "Why is some files
are there?

91
00:03:53,601 --> 00:03:54,901
Why couldn't you just
move them there?"

92
00:03:54,901 --> 00:03:56,734
We're working on it right now.

93
00:03:56,734 --> 00:03:58,334
Okay, so this is
a resource constraint.

94
00:03:58,334 --> 00:04:00,567
This is not a matter of us
picking and choosing

95
00:04:00,567 --> 00:04:03,300
what things we want to keep
downstream and upstream.

96
00:04:03,300 --> 00:04:06,367
It's all going
to move upstream one day

97
00:04:06,367 --> 00:04:08,934
sooner--sooner or later.

98
00:04:08,934 --> 00:04:10,467
Hopefully sooner.

99
00:04:10,467 --> 00:04:14,067
And so we also have now
our own WebKit port

100
00:04:14,067 --> 00:04:17,200
which Darin has birthed
and now he escaped

101
00:04:17,200 --> 00:04:19,234
so that he doesn't have
to listen about it.

102
00:04:19,234 --> 00:04:23,267
But it lives downstream
unfortunately

103
00:04:23,267 --> 00:04:25,434
because it's very hard
to kind of jiggle

104
00:04:25,434 --> 00:04:28,501
the wires very quickly
and adjust it

105
00:04:28,501 --> 00:04:30,367
if some breakage occurs.

106
00:04:30,367 --> 00:04:32,567
And so we build it
downstream

107
00:04:32,567 --> 00:04:34,267
and then we're gonna move it
upstream wholesale.

108
00:04:34,267 --> 00:04:36,267
Hopefully.

109
00:04:36,267 --> 00:04:40,801
And so one of the please that
I have to you, WebKit newbies,

110
00:04:40,801 --> 00:04:43,067
whoever you are,

111
00:04:43,067 --> 00:04:48,300
is if you want to learn WebKit,
please help upstreaming.

112
00:04:48,300 --> 00:04:51,033
So any, um--
any, um--

113
00:04:51,033 --> 00:04:53,133
Anybody who has extra cycles

114
00:04:53,133 --> 00:04:56,501
or is very actively interested
in learning WebKit,

115
00:04:56,501 --> 00:04:58,467
the bindings for example,

116
00:04:58,467 --> 00:05:00,167
please help upstreaming.

117
00:05:00,167 --> 00:05:02,267
What it involves is essentially

118
00:05:02,267 --> 00:05:05,734
grabbing a piece of v8 code--
v8 bindings code--

119
00:05:05,734 --> 00:05:09,100
and make it conform
to WebKit code style,

120
00:05:09,100 --> 00:05:10,968
submitting it as a patch
upstream,

121
00:05:10,968 --> 00:05:12,701
getting it landed.

122
00:05:12,701 --> 00:05:16,300
And then you'll feel
really, really good, so...

123
00:05:16,300 --> 00:05:17,501
man: [unintelligible]

124
00:05:17,501 --> 00:05:19,033
Glazkov: Yes, and all
these patches count

125
00:05:19,033 --> 00:05:20,634
to your WebKit commuter access.
Exactly.

126
00:05:20,634 --> 00:05:23,033
So this is all really helpful

127
00:05:23,033 --> 00:05:26,834
it you want to be like
a commuter for example.

128
00:05:26,834 --> 00:05:28,400
And, oh, by the way,

129
00:05:28,400 --> 00:05:29,601
it's not really that much fun

130
00:05:29,601 --> 00:05:31,567
because sometime you have
to go through

131
00:05:31,567 --> 00:05:33,667
three or four rounds
of iterations

132
00:05:33,667 --> 00:05:37,067
based mostly on nitpicking
and style

133
00:05:37,067 --> 00:05:40,067
and style violations.

134
00:05:40,067 --> 00:05:42,467
So it's sometimes very,
very frustrating.

135
00:05:42,467 --> 00:05:44,801
But it teaches you patience,
right?

136
00:05:44,801 --> 00:05:47,701
This is the most exciting thing
that you can learn.

137
00:05:47,701 --> 00:05:51,767
Or if you have, like, a kit,
you're done.

138
00:05:51,767 --> 00:05:53,067
You can do it very easily.

139
00:05:53,067 --> 00:05:56,100
Um, so, um--

140
00:05:56,100 --> 00:05:59,868
We're also in this continuous
effort of trying to unfork

141
00:05:59,868 --> 00:06:03,167
and move ourselves out
of the situation

142
00:06:03,167 --> 00:06:06,200
where we actually are
a fork or bender branch

143
00:06:06,200 --> 00:06:09,033
um, of WebKit.

144
00:06:09,033 --> 00:06:11,234
And this is a very--

145
00:06:11,234 --> 00:06:14,634
very, um, hard work
and we actually track it

146
00:06:14,634 --> 00:06:16,267
right here.

147
00:06:16,267 --> 00:06:18,934
As you can see,
this is our current state.

148
00:06:18,934 --> 00:06:24,167
Just this Monday,
the count was down to 15.

149
00:06:24,167 --> 00:06:27,801
And thanks to a merge
that I did on Monday afternoon,

150
00:06:27,801 --> 00:06:29,000
it's back to 34.

151
00:06:29,000 --> 00:06:30,601
Because unfortunately sometimes

152
00:06:30,601 --> 00:06:34,067
the changes made upstream
necessitate a fork

153
00:06:34,067 --> 00:06:36,567
in our, um, in our port.

154
00:06:36,567 --> 00:06:39,667
And now I have to go and work
to remove that fork

155
00:06:39,667 --> 00:06:41,067
which really sucks.

156
00:06:41,067 --> 00:06:43,467
But unfortunately
that's what it is.

157
00:06:43,467 --> 00:06:48,067
So we have now removed--
not physically,

158
00:06:48,067 --> 00:06:50,400
but we removed commit access

159
00:06:50,400 --> 00:06:52,033
to the third party WebKit

160
00:06:52,033 --> 00:06:53,901
so we try not to commit there
at all.

161
00:06:53,901 --> 00:06:56,267
Unless this is like
a super-duper regression

162
00:06:56,267 --> 00:07:01,400
that blocks us from releasing
a div branch

163
00:07:01,400 --> 00:07:02,701
or div build for example.

164
00:07:02,701 --> 00:07:04,634
And there's a daily merge.

165
00:07:04,634 --> 00:07:08,801
So, um, every day somebody,

166
00:07:08,801 --> 00:07:11,567
some unnamed hero,
takes the changes from upstream

167
00:07:11,567 --> 00:07:16,100
and plops them down
onto our fork

168
00:07:16,100 --> 00:07:17,801
and it's sometimes a really
hard process

169
00:07:17,801 --> 00:07:19,367
and hair-pulling process

170
00:07:19,367 --> 00:07:21,567
of figuring out what just
happened

171
00:07:21,567 --> 00:07:24,901
because 100 layout tests just
started failing for no reason.

172
00:07:24,901 --> 00:07:28,534
And so or you need
to start forking things.

173
00:07:28,534 --> 00:07:31,100
But if you really want
to learn WebKit,

174
00:07:31,100 --> 00:07:33,901
this is, like, the best way.

175
00:07:33,901 --> 00:07:38,701
Because you will daily touch
various parts of code.

176
00:07:38,701 --> 00:07:41,868
And you will have to study
and figure out what's wrong.

177
00:07:41,868 --> 00:07:44,334
So this is how I learned WebKit

178
00:07:44,334 --> 00:07:47,133
and I highly recommend it
to anybody...

179
00:07:47,133 --> 00:07:49,400
um, who wants to be it.

180
00:07:49,400 --> 00:07:51,801
So currently the rotation
is fixed.

181
00:07:51,801 --> 00:07:52,901
But, Ian, aren't you working

182
00:07:52,901 --> 00:07:55,033
to make everybody
a WebKit merger?

183
00:07:55,033 --> 00:07:56,167
This is gonna be so great.

184
00:07:56,167 --> 00:07:57,267
It's just like a sheriff.

185
00:07:57,267 --> 00:07:59,334
Everybody will get to merge.

186
00:07:59,334 --> 00:08:04,400
Hopefully we'll unfork by then,
but maybe not.

187
00:08:04,400 --> 00:08:07,601
So, um, now I'm gonna talk
about Toolset.

188
00:08:07,601 --> 00:08:11,734
What we're gonna do for
if you want to work on, um,

189
00:08:11,734 --> 00:08:14,234
WebKit and that's very simple.

190
00:08:14,234 --> 00:08:15,601
Just use Git and you're done.

191
00:08:15,601 --> 00:08:18,767
Um, well actually
it's not that simple.

192
00:08:18,767 --> 00:08:21,801
But one of the things
you have to learn,

193
00:08:21,801 --> 00:08:24,534
if you're planning to work
on WebKit,

194
00:08:24,534 --> 00:08:26,501
forget your Windows machine,
okay.

195
00:08:26,501 --> 00:08:30,334
Working on WebKit upstream
on Windows

196
00:08:30,334 --> 00:08:33,000
is so hard that most of us
have given up.

197
00:08:33,000 --> 00:08:34,400
Peter: By the way,
I still do this.

198
00:08:34,400 --> 00:08:35,734
And I think it's fine.

199
00:08:35,734 --> 00:08:37,534
So if you want to do this,
you can ask me.

200
00:08:37,534 --> 00:08:39,901
Glazkov: If you're Peter,
you can still use Windows.

201
00:08:39,901 --> 00:08:44,167
But Ojohn can tell you that,
um,

202
00:08:44,167 --> 00:08:47,501
none of us, and I repeat--
even you, Peter,

203
00:08:47,501 --> 00:08:50,234
none of us have been able
to successfully run

204
00:08:50,234 --> 00:08:54,133
WebKit layout tests
from upstream and succeed.

205
00:08:54,133 --> 00:08:57,634
Because that requires pulling
down all of the Mac fonts

206
00:08:57,634 --> 00:08:59,534
onto a Windows box,

207
00:08:59,534 --> 00:09:01,000
configuring your clear type

208
00:09:01,000 --> 00:09:02,234
just the right way,

209
00:09:02,234 --> 00:09:04,934
and all the just weirdness
that comes with it.

210
00:09:04,934 --> 00:09:07,934
So it's really--
it's really painful.

211
00:09:07,934 --> 00:09:10,501
So if you want to work
with WebKit upstream,

212
00:09:10,501 --> 00:09:13,067
this is your great excuse
to get a Mac,

213
00:09:13,067 --> 00:09:15,033
if you want one.

214
00:09:15,033 --> 00:09:17,467
If you don't want when,
then you know,

215
00:09:17,467 --> 00:09:19,000
I can't help you, buddy.

216
00:09:19,000 --> 00:09:22,734
So using Git is really,
really helpful.

217
00:09:22,734 --> 00:09:26,501
I have it set up.
Can you guys see it okay?

218
00:09:26,501 --> 00:09:28,868
So I'll show you just
a couple of things

219
00:09:28,868 --> 00:09:30,367
in terms of Git.

220
00:09:30,367 --> 00:09:32,767
It's very helpful because
it facilitates

221
00:09:32,767 --> 00:09:34,467
a much better workflow.

222
00:09:34,467 --> 00:09:38,033
Just like on any other product
or perhaps more,

223
00:09:38,033 --> 00:09:41,234
in WebKit you will often
be having

224
00:09:41,234 --> 00:09:42,634
several patches in flight

225
00:09:42,634 --> 00:09:44,501
while they're waiting review.

226
00:09:44,501 --> 00:09:47,267
And these patches will have
to be caressed and loved

227
00:09:47,267 --> 00:09:48,801
a couple of times.

228
00:09:48,801 --> 00:09:51,167
And so you have to tweak them.

229
00:09:51,167 --> 00:09:53,901
So having multiple checkouts
in svn repository

230
00:09:53,901 --> 00:09:56,200
is just--is just wrong.

231
00:09:56,200 --> 00:09:58,868
So I highly recommend using--

232
00:09:58,868 --> 00:10:02,167
using like a Git for multiple
branch work flow

233
00:10:02,167 --> 00:10:03,901
where you can have multiple
branches in flight

234
00:10:03,901 --> 00:10:05,200
and then rebase.

235
00:10:05,200 --> 00:10:09,033
So I'll do a quick demo
if it works, right?

236
00:10:12,300 --> 00:10:13,801
Ooh.

237
00:10:13,801 --> 00:10:17,267
So for example I'm--

238
00:10:17,267 --> 00:10:19,601
WebKit comes with some really--

239
00:10:19,601 --> 00:10:21,200
Git comes with some
really cool stuff

240
00:10:21,200 --> 00:10:23,067
like, um, shell completion.

241
00:10:23,067 --> 00:10:24,801
So for example I have it
configured

242
00:10:24,801 --> 00:10:27,300
so it always shows me
the current branch I'm on.

243
00:10:27,300 --> 00:10:29,567
Which is land which this
is the branch I use

244
00:10:29,567 --> 00:10:31,801
to land somebody else's patches.

245
00:10:31,801 --> 00:10:34,934
And so, um,

246
00:10:34,934 --> 00:10:36,167
I can see that there's nothing
going on

247
00:10:36,167 --> 00:10:39,868
on this branch right now.

248
00:10:39,868 --> 00:10:41,367
Whoo.

249
00:10:41,367 --> 00:10:42,501
Back.

250
00:10:42,501 --> 00:10:44,834
It's really fast.

251
00:10:44,834 --> 00:10:47,734
And then I can go
to master branch.

252
00:10:47,734 --> 00:10:51,501
And, uh...

253
00:10:51,501 --> 00:10:52,968
It's usually much faster.

254
00:10:52,968 --> 00:10:54,701
I promise.

255
00:10:54,701 --> 00:10:57,334
Let me plug into power.

256
00:10:57,334 --> 00:10:59,234
Ah, that's okay.

257
00:10:59,234 --> 00:11:01,968
So then I do a Git pull
for example

258
00:11:01,968 --> 00:11:07,234
and pull all of the changes
from the, um,

259
00:11:07,234 --> 00:11:10,334
from my...

260
00:11:10,334 --> 00:11:12,968
from upstream from
the master branch.

261
00:11:12,968 --> 00:11:14,968
Downstream--there it is.

262
00:11:14,968 --> 00:11:20,534
It's happening actually.

263
00:11:20,534 --> 00:11:21,667
All right.

264
00:11:21,667 --> 00:11:23,567
This shows me what changes
have been made.

265
00:11:23,567 --> 00:11:25,200
Really nice.

266
00:11:25,200 --> 00:11:26,467
Everything's pretty.

267
00:11:26,467 --> 00:11:27,701
Uh-huh.

268
00:11:27,701 --> 00:11:31,634
And then I can say Git
rebase master land

269
00:11:31,634 --> 00:11:34,667
for example.

270
00:11:34,667 --> 00:11:37,100
And what this does
is it lifts up

271
00:11:37,100 --> 00:11:38,601
any divs or patches
that I might have

272
00:11:38,601 --> 00:11:42,400
on land branch,
applies the changes

273
00:11:42,400 --> 00:11:43,901
that I just pulled
and then attempts

274
00:11:43,901 --> 00:11:46,767
to land or to apply
the patches that I have

275
00:11:46,767 --> 00:11:49,801
onto this branch back.

276
00:11:49,801 --> 00:11:52,634
And it's a really cool process

277
00:11:52,634 --> 00:11:54,901
of um, um, kind of a, um,

278
00:11:54,901 --> 00:11:58,267
patch-based scm.

279
00:11:58,267 --> 00:12:00,601
So I really recommend it
pretty much for anybody

280
00:12:00,601 --> 00:12:04,400
working on, um, on WebKit.

281
00:12:04,400 --> 00:12:05,667
And like for example,

282
00:12:05,667 --> 00:12:07,367
one of the things you would see

283
00:12:07,367 --> 00:12:10,434
is I have multiple branches
right there

284
00:12:10,434 --> 00:12:13,467
and, uh, pretty much like
I have three inspector changes

285
00:12:13,467 --> 00:12:14,968
going on at the same time.

286
00:12:14,968 --> 00:12:18,133
Because sometimes reviewers
take a while to do it.

287
00:12:18,133 --> 00:12:21,000
To go through the process.

288
00:12:21,000 --> 00:12:24,701
And sometimes I need to modify

289
00:12:24,701 --> 00:12:26,434
and in order to keep sanity,

290
00:12:26,434 --> 00:12:28,400
I have multiple branches.

291
00:12:28,400 --> 00:12:32,234
And so I could work
on any of this

292
00:12:32,234 --> 00:12:34,868
separately and then commit
a rebase.

293
00:12:34,868 --> 00:12:38,834
For more information,
check with Evan.

294
00:12:38,834 --> 00:12:40,767
And he has a--I think
we've taped it, right.

295
00:12:40,767 --> 00:12:43,167
There is a Git talk
that you can go look at.

296
00:12:43,167 --> 00:12:44,767
It's really--it's really great.

297
00:12:44,767 --> 00:12:47,734
One of the things that
is really good

298
00:12:47,734 --> 00:12:51,968
about WebKit is they have
integrated really well

299
00:12:51,968 --> 00:12:53,667
with, uh, with Git.

300
00:12:53,667 --> 00:13:00,567
So their prepare change log
script works with Git,

301
00:13:00,567 --> 00:13:04,934
and their result change
log script work with Git

302
00:13:04,934 --> 00:13:06,834
and so svn applied
works with Git.

303
00:13:06,834 --> 00:13:09,467
So all of these tools
that they have,

304
00:13:09,467 --> 00:13:11,901
all of the toolset
is in place.

305
00:13:11,901 --> 00:13:15,367
And so I highly recommend
using it

306
00:13:15,367 --> 00:13:18,801
because it keeps your sanity

307
00:13:18,801 --> 00:13:22,534
in terms of maintaining
multiple patches in flight.

308
00:13:22,534 --> 00:13:24,901
And shell completion.

309
00:13:24,901 --> 00:13:30,334
So if you're ever applying
a patch,

310
00:13:30,334 --> 00:13:32,067
uh, to WebKit,

311
00:13:32,067 --> 00:13:33,934
I highly recommend using
svn-apply

312
00:13:33,934 --> 00:13:37,200
because it does a lot more
smart things

313
00:13:37,200 --> 00:13:39,100
than, um, than a normal patch.

314
00:13:39,100 --> 00:13:41,067
And it's just wonderful.

315
00:13:41,067 --> 00:13:44,200
Like for example if you're
applying your old patch

316
00:13:44,200 --> 00:13:46,634
with a change log entry in it,

317
00:13:46,634 --> 00:13:49,200
it will automatically put it
on top of the change log

318
00:13:49,200 --> 00:13:51,367
and change the date
to today's date.

319
00:13:51,367 --> 00:13:53,567
So it's beautiful,
it's gorgeous.

320
00:13:53,567 --> 00:13:55,300
And so I highly recommend
using it.

321
00:13:55,300 --> 00:13:59,901
And of course the whole
collection of scripts there

322
00:13:59,901 --> 00:14:01,300
that you might look at.

323
00:14:01,300 --> 00:14:02,634
Highly recommend looking
at them

324
00:14:02,634 --> 00:14:04,300
because I use only three.

325
00:14:04,300 --> 00:14:06,367
But there's more
and you probably could,

326
00:14:06,367 --> 00:14:09,133
you know, benefit from them
in some way.

327
00:14:09,133 --> 00:14:13,634
And trac.webkit.org/browser.

328
00:14:13,634 --> 00:14:15,267
Very helpful tool.

329
00:14:15,267 --> 00:14:18,267
Obviously anybody who used
Trac before

330
00:14:18,267 --> 00:14:20,300
will be familiar with it.

331
00:14:20,300 --> 00:14:22,300
But it allows you to go
look at the code

332
00:14:22,300 --> 00:14:23,667
and browse it online.

333
00:14:23,667 --> 00:14:26,501
It's much better than view,
uh, vc--

334
00:14:26,501 --> 00:14:28,667
whatever that thing we have.

335
00:14:28,667 --> 00:14:31,634
So if there are any fanatics
of uvc,

336
00:14:31,634 --> 00:14:35,634
please, I don't mean it.

337
00:14:35,634 --> 00:14:37,033
Um...

338
00:14:37,033 --> 00:14:38,801
any questions on Git
or anything?

339
00:14:38,801 --> 00:14:41,133
Anything I need to pause on?

340
00:14:41,133 --> 00:14:42,133
No?
Okay.

341
00:14:42,133 --> 00:14:43,501
Yes.

342
00:14:43,501 --> 00:14:47,701
man: [inaudible]

343
00:14:47,701 --> 00:14:49,434
Glazkov: Okay.

344
00:14:49,434 --> 00:14:51,868
Git acts as a really good tool

345
00:14:51,868 --> 00:14:53,434
if you're using--
if you're on a Mac.

346
00:14:53,434 --> 00:14:57,534
I've never used it
but I heard it's good.

347
00:14:57,534 --> 00:15:00,434
Um, actually Jeremy there
who makes suggestions,

348
00:15:00,434 --> 00:15:02,367
he's the one who evangelized
me on Git.

349
00:15:02,367 --> 00:15:06,634
And so I owe him a lot.

350
00:15:06,634 --> 00:15:07,968
WebKit testing.

351
00:15:07,968 --> 00:15:10,367
How do we test whether
WebKit is good or not,

352
00:15:10,367 --> 00:15:12,467
whether a specific
variation is good or not?

353
00:15:12,467 --> 00:15:14,434
Well, the primary test tool,

354
00:15:14,434 --> 00:15:17,734
the vehicle that they have
upstream is layout tests.

355
00:15:17,734 --> 00:15:19,767
And you guys are probably
all familiar

356
00:15:19,767 --> 00:15:21,434
with what layout tests are.

357
00:15:21,434 --> 00:15:24,968
It's several thousand
HTML files,

358
00:15:24,968 --> 00:15:29,367
sometimes SVG,
sometimes, um, XML files

359
00:15:29,367 --> 00:15:32,868
that you load in the browser

360
00:15:32,868 --> 00:15:35,634
and basically look
for a specific behavior.

361
00:15:35,634 --> 00:15:37,501
And all of this has been
automated.

362
00:15:37,501 --> 00:15:40,868
Downstream we have test drill

363
00:15:40,868 --> 00:15:42,901
that allows us to run
the tests.

364
00:15:42,901 --> 00:15:44,801
Upstream it's called
dump render tree.

365
00:15:44,801 --> 00:15:47,100
Highly misnamed,
but you know.

366
00:15:47,100 --> 00:15:49,834
I recommended that they
rename it to test drill.

367
00:15:49,834 --> 00:15:52,601
They have seemed to be resistant
for some reason.

368
00:15:52,601 --> 00:15:56,601
And so--and basically
it's really not a very good

369
00:15:56,601 --> 00:15:59,100
testing methodology
but that's what we have.

370
00:15:59,100 --> 00:16:04,300
Having a unit test
or more extensive methodology

371
00:16:04,300 --> 00:16:05,734
would probably--

372
00:16:05,734 --> 00:16:08,167
at this point I don't think
it's really feasible.

373
00:16:08,167 --> 00:16:10,767
So we're going with layout
tests.

374
00:16:10,767 --> 00:16:12,234
And layout tests are born how?

375
00:16:12,234 --> 00:16:14,467
Anytime you find a regression,

376
00:16:14,467 --> 00:16:16,834
whenever you fix a bug,

377
00:16:16,834 --> 00:16:18,734
you submit a layout test
with it

378
00:16:18,734 --> 00:16:20,801
to make sure that this bug
is now covered.

379
00:16:20,801 --> 00:16:22,534
And so this is how
you obtain coverage.

380
00:16:22,534 --> 00:16:26,634
Instead of forward thinking,
you're kind of reacting.

381
00:16:26,634 --> 00:16:31,267
And...and also there's
a couple of test suites.

382
00:16:31,267 --> 00:16:33,033
W3c suite, 

383
00:16:33,033 --> 00:16:34,701
Hicksy's svg suite.

384
00:16:34,701 --> 00:16:37,000
Batik svg--
a bunch of them.

385
00:16:37,000 --> 00:16:38,367
Css suite.

386
00:16:38,367 --> 00:16:40,234
Um, but, um,

387
00:16:40,234 --> 00:16:42,400
those rarely ever fail because

388
00:16:42,400 --> 00:16:44,734
they're kind of,
you know, simple.

389
00:16:44,734 --> 00:16:47,234
Not that complicated.

390
00:16:47,234 --> 00:16:49,300
Not that big of an edge case.

391
00:16:49,300 --> 00:16:52,067
And the obviously we have
reliability tests.

392
00:16:52,067 --> 00:16:55,934
Chromebot gives us crashes,
which is really great.

393
00:16:55,934 --> 00:17:00,100
And that's something they don't
have downstream,

394
00:17:00,100 --> 00:17:02,868
so if you're ever in builder--

395
00:17:02,868 --> 00:17:07,734
By the way, I'm a sheriff today.
Let's see how we're doing.

396
00:17:07,734 --> 00:17:09,334
Tree's open.

397
00:17:09,334 --> 00:17:11,968
I don't know if that's because
it's actually open.

398
00:17:11,968 --> 00:17:13,767
It's okay.

399
00:17:13,767 --> 00:17:15,067
Or if it's because I'm missing.

400
00:17:15,067 --> 00:17:18,000
Nobody closed the tree
for good reason.

401
00:17:18,000 --> 00:17:19,601
[laughs]

402
00:17:19,601 --> 00:17:22,601
So there are
reliability tests.

403
00:17:22,601 --> 00:17:24,334
Is that it?
No.

404
00:17:24,334 --> 00:17:25,734
Is that it?

405
00:17:25,734 --> 00:17:28,000
That's a really nice bot.

406
00:17:28,000 --> 00:17:29,868
This is your really good
indicator

407
00:17:29,868 --> 00:17:32,300
of something--
ooh, look at that.

408
00:17:32,300 --> 00:17:35,200
So you would see
that something happened.

409
00:17:35,200 --> 00:17:37,467
For example we have
new crashes.

410
00:17:37,467 --> 00:17:41,467
And reliability test
uses Chromebot, right?

411
00:17:41,467 --> 00:17:42,534
Somebody correct me or not.

412
00:17:42,534 --> 00:17:44,634
All right, it's the same
infrastructure.

413
00:17:44,634 --> 00:17:46,801
And it just is a really
convenient way

414
00:17:46,801 --> 00:17:50,334
for you to quickly see
what happened.

415
00:17:50,334 --> 00:17:53,634
And so you can look
at the stack traces.

416
00:17:53,634 --> 00:17:56,467
This is something the Mac
people--

417
00:17:56,467 --> 00:17:58,267
or not Mac people--

418
00:17:58,267 --> 00:18:00,100
what Git upstream does not have.

419
00:18:00,100 --> 00:18:02,601
So we benefit from this because

420
00:18:02,601 --> 00:18:06,534
we can discover things
that they cannot see.

421
00:18:06,534 --> 00:18:07,701
So anyway.

422
00:18:07,701 --> 00:18:10,634
We usually share
those results gladly

423
00:18:10,634 --> 00:18:12,634
because we need to fix them
as well.

424
00:18:12,634 --> 00:18:15,501
And performance tests,

425
00:18:15,501 --> 00:18:17,267
obviously.

426
00:18:17,267 --> 00:18:21,167
Who has not seen
performance tests here?

427
00:18:21,167 --> 00:18:22,901
Do I need to go?

428
00:18:22,901 --> 00:18:24,501
Look, you guys are fine.

429
00:18:24,501 --> 00:18:26,133
Okay.

430
00:18:26,133 --> 00:18:28,567
Let me look.
Oh.

431
00:18:28,567 --> 00:18:30,868
Prf?

432
00:18:30,868 --> 00:18:32,100
Click on prf.

433
00:18:32,100 --> 00:18:33,868
I clicked on prf.

434
00:18:33,868 --> 00:18:35,701
So you can see very quickly

435
00:18:35,701 --> 00:18:38,167
how each commit reflects.

436
00:18:38,167 --> 00:18:40,634
See how great we're doing.

437
00:18:40,634 --> 00:18:42,167
We have just recently
implemented

438
00:18:42,167 --> 00:18:44,667
TCMalloc allocator.

439
00:18:44,667 --> 00:18:50,868
So this brought down
all of our numbers.

440
00:18:50,868 --> 00:18:54,467
And then we have fixed
a major--

441
00:18:54,467 --> 00:18:57,901
well not major,
but a bug in v8.

442
00:18:57,901 --> 00:18:59,634
So this really shows us.

443
00:18:59,634 --> 00:19:01,200
And when it goes
the opposite way,

444
00:19:01,200 --> 00:19:02,267
then you're in trouble.

445
00:19:02,267 --> 00:19:03,400
You have to fix it.

446
00:19:03,400 --> 00:19:05,033
Peter usually comes
and bugs you

447
00:19:05,033 --> 00:19:07,667
because he really watches
those things.

448
00:19:07,667 --> 00:19:09,601
Well, he come and bug me.

449
00:19:09,601 --> 00:19:13,033
Oh.

450
00:19:13,033 --> 00:19:15,701
So this is real useful

451
00:19:15,701 --> 00:19:20,033
because it allows you to see,
um, um, what's going on.

452
00:19:20,033 --> 00:19:22,868
Page cycler--

453
00:19:22,868 --> 00:19:24,634
anybody knows what
page cycler is.

454
00:19:24,634 --> 00:19:27,868
Has this been covered earlier?

455
00:19:27,868 --> 00:19:29,334
Have you guys been talking?

456
00:19:29,334 --> 00:19:31,901
Wow, so this is a huge omission
obviously.

457
00:19:31,901 --> 00:19:34,267
Um...um...

458
00:19:34,267 --> 00:19:36,534
So page cyclers
are really cool things

459
00:19:36,534 --> 00:19:39,467
that essentially it's a bunch
of HTML pages

460
00:19:39,467 --> 00:19:42,000
that we run in succession.

461
00:19:42,000 --> 00:19:46,067
And, um, then track
the time memory,

462
00:19:46,067 --> 00:19:47,901
virtual bites used,
and things like that.

463
00:19:47,901 --> 00:19:50,501
And so it allows us
to quickly measure

464
00:19:50,501 --> 00:19:52,701
if something's changed.

465
00:19:52,701 --> 00:19:56,267
So if there's a regression
then we have to go

466
00:19:56,267 --> 00:19:57,868
and look at specific versions.

467
00:19:57,868 --> 00:19:58,868
Like for example, ooh,

468
00:19:58,868 --> 00:20:00,467
this is a regression
right here.

469
00:20:00,467 --> 00:20:02,000
Let's see what changed it.
Crap!

470
00:20:02,000 --> 00:20:03,968
[laughs]

471
00:20:03,968 --> 00:20:05,033
My name on it.

472
00:20:05,033 --> 00:20:08,167
This is just expectations.

473
00:20:08,167 --> 00:20:09,701
So there you go.

474
00:20:09,701 --> 00:20:12,033
Externalized strings
but not results, blah blah blah.

475
00:20:12,033 --> 00:20:13,334
Non strings.

476
00:20:13,334 --> 00:20:16,033
So something--you have to look--
oh, and me too.

477
00:20:16,033 --> 00:20:18,100
Well anyway,

478
00:20:18,100 --> 00:20:20,234
so any regressions you can
clearly see

479
00:20:20,234 --> 00:20:21,567
what changes caused it.

480
00:20:21,567 --> 00:20:23,400
You can see what kind
of regression that is

481
00:20:23,400 --> 00:20:26,334
by clicking shift.

482
00:20:26,334 --> 00:20:27,968
Shift.

483
00:20:27,968 --> 00:20:32,033
Um, no.

484
00:20:32,033 --> 00:20:33,534
Come on.

485
00:20:33,534 --> 00:20:36,501
All right, so apparently Safari
doesn't do that.

486
00:20:36,501 --> 00:20:38,267
But you usually can shift click

487
00:20:38,267 --> 00:20:40,868
and you can then track down
and see what percentage

488
00:20:40,868 --> 00:20:43,601
of regression that is...

489
00:20:43,601 --> 00:20:45,968
And you can see specific
revisions

490
00:20:45,968 --> 00:20:47,801
that caused the failure.

491
00:20:47,801 --> 00:20:51,634
And then what is
the orange line?

492
00:20:51,634 --> 00:20:53,267
That's the reference build.

493
00:20:53,267 --> 00:20:54,601
What a reference build is

494
00:20:54,601 --> 00:20:55,801
is that at some point in time

495
00:20:55,801 --> 00:20:59,434
we took our build that we had
at the time

496
00:20:59,434 --> 00:21:01,701
and put it in a separate
directory

497
00:21:01,701 --> 00:21:03,467
and now we run it

498
00:21:03,467 --> 00:21:05,567
every time we run
the reliability test

499
00:21:05,567 --> 00:21:09,000
so that we know
that any fluctuation

500
00:21:09,000 --> 00:21:12,367
in the tests are not caused
by some hardware changes

501
00:21:12,367 --> 00:21:14,701
or the machine fell ill.

502
00:21:14,701 --> 00:21:18,000
You can see that if
the ref has not changed

503
00:21:18,000 --> 00:21:20,133
but the, um, blue line
has changed,

504
00:21:20,133 --> 00:21:22,267
that means that it's really
a regression.

505
00:21:22,267 --> 00:21:24,400
Sometimes you would go
in the morning

506
00:21:24,400 --> 00:21:26,434
and you will see all of them
go down

507
00:21:26,434 --> 00:21:31,133
because Nikolai has rebooted
the machine

508
00:21:31,133 --> 00:21:32,367
and suddenly it runs faster.

509
00:21:32,367 --> 00:21:34,067
But if both of them go
at the same distance,

510
00:21:34,067 --> 00:21:36,000
you probably go, "Wow, that's
really not a regression

511
00:21:36,000 --> 00:21:37,267
or anything."

512
00:21:37,267 --> 00:21:39,067
So that's what reference build
is for.

513
00:21:39,067 --> 00:21:40,968
That's a great explanation.

514
00:21:40,968 --> 00:21:42,934
Sorry if I'm fumbling.

515
00:21:42,934 --> 00:21:46,367
But anyway, this is how
you usually look at WebKit

516
00:21:46,367 --> 00:21:49,501
and see what you've done.

517
00:21:49,501 --> 00:21:53,100
If you're merging, this is one
of the greatest things

518
00:21:53,100 --> 00:21:57,000
to watch for because even though
your layout tests

519
00:21:57,000 --> 00:21:58,400
may be passing,

520
00:21:58,400 --> 00:22:01,634
Dave Hyatt upstream may've
introduced some new code

521
00:22:01,634 --> 00:22:04,734
that tremendously affects
painting for example.

522
00:22:04,734 --> 00:22:06,701
And you will see regressions,

523
00:22:06,701 --> 00:22:08,367
especially during HTML

524
00:22:08,367 --> 00:22:10,334
[indistinct]

525
00:22:10,334 --> 00:22:14,501
cycler that affects--that
involves a lot of repainting.

526
00:22:14,501 --> 00:22:18,434
So you can clearly see
that, oh, something happened.

527
00:22:18,434 --> 00:22:19,667
These 50 revisions of WebKit

528
00:22:19,667 --> 00:22:21,868
caused us to regress 30%.

529
00:22:21,868 --> 00:22:23,601
Roll back.

530
00:22:23,601 --> 00:22:25,567
We usually just go
and look and see.

531
00:22:25,567 --> 00:22:27,033
One of the interesting things

532
00:22:27,033 --> 00:22:29,200
is with sheriffing,

533
00:22:29,200 --> 00:22:31,234
the sheriffs typically don't
roll back the merge.

534
00:22:31,234 --> 00:22:35,467
So if a specific individual
changed may be rolled back

535
00:22:35,467 --> 00:22:37,667
but merge is really rolled back.

536
00:22:37,667 --> 00:22:40,968
So it may seem like
a good thing,

537
00:22:40,968 --> 00:22:42,167
but actually it's a bad thing
because

538
00:22:42,167 --> 00:22:44,133
it puts pressure on you
as a merger

539
00:22:44,133 --> 00:22:46,968
to go and fix the regression
rather than--

540
00:22:46,968 --> 00:22:48,901
because nobody wants
your regression,

541
00:22:48,901 --> 00:22:51,167
and yet you must go on.

542
00:22:51,167 --> 00:22:53,968
So it's--there you go.

543
00:22:53,968 --> 00:22:57,434
Uh, here's a simple sample.

544
00:22:57,434 --> 00:22:58,601
Simple sample.

545
00:22:58,601 --> 00:23:02,667
Bug-fix workflow for WebKit.

546
00:23:02,667 --> 00:23:04,501
Suppose you're fixing
a WebKit bug.

547
00:23:04,501 --> 00:23:08,467
This illustrates how inefficient
our system is

548
00:23:08,467 --> 00:23:09,934
and how much we need
to unfork.

549
00:23:09,934 --> 00:23:13,100
So typically the way you do it
is like this.

550
00:23:13,100 --> 00:23:14,868
You get your bug fixed locally.

551
00:23:14,868 --> 00:23:16,801
Reviewed in LGTM.

552
00:23:16,801 --> 00:23:19,734
Then take that patch,
apply it to WebKit tree.

553
00:23:19,734 --> 00:23:22,701
Prepare patch.

554
00:23:22,701 --> 00:23:25,567
Then get it reviewed
on WebKit.

555
00:23:25,567 --> 00:23:27,834
And then submit for review--

556
00:23:27,834 --> 00:23:31,100
then--then commit
if you have a commit access.

557
00:23:31,100 --> 00:23:33,834
Couple things to mention
is that

558
00:23:33,834 --> 00:23:37,100
the etiquette of bugzilla

559
00:23:37,100 --> 00:23:39,667
is that when you attach
a patch,

560
00:23:39,667 --> 00:23:41,467
don't designate
a specific person.

561
00:23:41,467 --> 00:23:43,567
Like, you know,
"Oh, Darin is a reviewer.

562
00:23:43,567 --> 00:23:45,067
I'm gonna ask him to review it."

563
00:23:45,067 --> 00:23:50,534
This is considered like
a faux pas

564
00:23:50,534 --> 00:23:53,567
from the WebKit perspective.

565
00:23:53,567 --> 00:23:55,501
They get angry with us
for some reason.

566
00:23:55,501 --> 00:24:00,901
So instead I suggest highly
to just CC Darin.

567
00:24:00,901 --> 00:24:04,367
And he will know.
Stamped to review.

568
00:24:04,367 --> 00:24:08,067
So anyway, blah.

569
00:24:08,067 --> 00:24:09,701
Are we recording this?
Scratch that.

570
00:24:09,701 --> 00:24:12,334
[laughs]

571
00:24:12,334 --> 00:24:15,234
So, um...

572
00:24:15,234 --> 00:24:17,767
one of the hardest things
by far in WebKit

573
00:24:17,767 --> 00:24:19,868
is code style.

574
00:24:19,868 --> 00:24:21,667
It's different.
It's very different.

575
00:24:21,667 --> 00:24:23,968
Like there is no edit lines.

576
00:24:23,968 --> 00:24:27,567
The braces for methods
go on the new line.

577
00:24:27,567 --> 00:24:32,367
Four characters--four spaces
rather than two spaces.

578
00:24:32,367 --> 00:24:34,601
Lots of stuff like this.

579
00:24:34,601 --> 00:24:35,901
Naming members,
variables.

580
00:24:35,901 --> 00:24:39,200
And believe it or not,
for Googlers,

581
00:24:39,200 --> 00:24:41,100
that was the hardest part.

582
00:24:41,100 --> 00:24:42,467
That always is.

583
00:24:42,467 --> 00:24:44,767
Because most of the time
your review comes back negative

584
00:24:44,767 --> 00:24:47,834
only because of, you know,
the style violations.

585
00:24:47,834 --> 00:24:49,968
So if you've never written
C++ code before,

586
00:24:49,968 --> 00:24:51,200
you're in luck.

587
00:24:51,200 --> 00:24:52,634
You could learn this.

588
00:24:52,634 --> 00:24:54,067
If you've been a Googler
for five years,

589
00:24:54,067 --> 00:24:57,567
you're screwed.

590
00:24:57,567 --> 00:25:01,400
Um, I have five minutes
so I'm gonna rush.

591
00:25:01,400 --> 00:25:03,400
So if you want to talk
to the browser

592
00:25:03,400 --> 00:25:04,834
in your new code
like you're writing

593
00:25:04,834 --> 00:25:06,400
web sockets
or something like this,

594
00:25:06,400 --> 00:25:10,467
you need to use ChromiumBridge

595
00:25:10,467 --> 00:25:13,968
or the new WebKit API
that Darin is cooking currently.

596
00:25:13,968 --> 00:25:16,000
Since it's in progress
you need to talk to him

597
00:25:16,000 --> 00:25:17,434
before doing anything.

598
00:25:17,434 --> 00:25:19,133
Before even considering
design decisions

599
00:25:19,133 --> 00:25:22,968
because he's the right guy
to discuss these things.

600
00:25:22,968 --> 00:25:26,667
Um, now, when you--

601
00:25:26,667 --> 00:25:28,400
if you're considering
making changes to WebKit,

602
00:25:28,400 --> 00:25:31,200
try to put your WebKit hat on

603
00:25:31,200 --> 00:25:33,400
and think about it this way.

604
00:25:33,400 --> 00:25:35,601
This is not
a Chromium-specific change.

605
00:25:35,601 --> 00:25:38,367
This is change that should
benefit WebKit as a whole.

606
00:25:38,367 --> 00:25:39,934
So try to avoid making changes

607
00:25:39,934 --> 00:25:42,167
that are just for benefit
of WebKit.

608
00:25:42,167 --> 00:25:43,667
So if you're writing web sockets

609
00:25:43,667 --> 00:25:46,934
or a new functionality
like html five forms,

610
00:25:46,934 --> 00:25:49,334
think of it as this--

611
00:25:49,334 --> 00:25:52,400
"I'm implementing it
for WebKit, not for Chromium."

612
00:25:52,400 --> 00:25:53,567
Does that make sense?

613
00:25:53,567 --> 00:25:56,234
And obviously be aware
of other ports.

614
00:25:56,234 --> 00:26:00,100
So try not to break Qt
or some other obscure ports

615
00:26:00,100 --> 00:26:03,000
that are on the build bot.

616
00:26:03,000 --> 00:26:04,968
Becoming a committer
is an easy task.

617
00:26:04,968 --> 00:26:06,300
It's just ten patches.

618
00:26:06,300 --> 00:26:07,634
And it's something
you definitely

619
00:26:07,634 --> 00:26:08,934
should consider doing.

620
00:26:08,934 --> 00:26:11,033
It's very easy.

621
00:26:11,033 --> 00:26:13,300
A couple of upstreaming patches,

622
00:26:13,300 --> 00:26:16,634
a couple of bug-fixes,
you're there.

623
00:26:16,634 --> 00:26:18,767
WebKit prides itself
on communication

624
00:26:18,767 --> 00:26:20,901
so stay open,
participate.

625
00:26:20,901 --> 00:26:24,367
You guys in Japan
still might consider

626
00:26:24,367 --> 00:26:26,067
going on WebKit,
you'll be surprised

627
00:26:26,067 --> 00:26:29,033
that you'll find Apple engineers
working at that time

628
00:26:29,033 --> 00:26:31,601
because they're really,
really weird hours.

629
00:26:31,601 --> 00:26:33,501
I mean, it's just unbelievable.

630
00:26:33,501 --> 00:26:36,133
And so any proposals,
any ideas?

631
00:26:36,133 --> 00:26:38,501
Highly recommend to circulate
on webkit-dev

632
00:26:38,501 --> 00:26:41,200
unless it involves
forking code.

633
00:26:41,200 --> 00:26:45,334
In which case I highly recommend
talking to Ian first.

634
00:26:45,334 --> 00:26:48,667
And he will triage it
from there.

635
00:26:48,667 --> 00:26:52,200
And so...

636
00:26:52,200 --> 00:26:53,934
there you go.

637
00:26:53,934 --> 00:26:56,000
Any questions or comments?

638
00:27:00,968 --> 00:27:02,767
Done!

639
00:27:02,767 --> 00:27:04,701
[applause]

