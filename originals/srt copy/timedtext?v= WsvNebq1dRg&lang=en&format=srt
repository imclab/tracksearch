1
00:00:01,133 --> 00:00:03,534
Ben: So, I'm going
to talk today about

2
00:00:03,534 --> 00:00:06,133
the Chrome UI framework
that we use on Windows

3
00:00:06,133 --> 00:00:07,300
called views,

4
00:00:07,300 --> 00:00:10,801
how we build UI there,
how we test it,

5
00:00:10,801 --> 00:00:12,334
and stuff like that.

6
00:00:12,334 --> 00:00:15,901
And some more people's
coming in.

7
00:00:15,901 --> 00:00:19,000
[clears throat]

8
00:00:19,000 --> 00:00:21,934
So anyway, hopefully,
this will sort of give you

9
00:00:21,934 --> 00:00:24,234
a broad idea of how
the framework works.

10
00:00:24,234 --> 00:00:25,601
If you haven't used it before,

11
00:00:25,601 --> 00:00:29,100
if you find yourself having
to do any UI development--

12
00:00:29,100 --> 00:00:31,234
Maybe if you've even
already been using--

13
00:00:31,234 --> 00:00:34,067
done all of the UI stuff,
but don't think that

14
00:00:34,067 --> 00:00:38,801
the UI framework extends
beyond the status bubble.

15
00:00:38,801 --> 00:00:41,167
That was a joke for Glenn.

16
00:00:41,167 --> 00:00:45,033
But anyway, the view system
is basically--

17
00:00:45,033 --> 00:00:48,133
it's a rendering system
and an event handling system

18
00:00:48,133 --> 00:00:52,968
for drawing stuff into Windows
and handling events,

19
00:00:52,968 --> 00:00:54,934
and stuff that happen in them.

20
00:00:54,934 --> 00:00:58,200
So basically,
you have top-level windows,

21
00:00:58,200 --> 00:01:01,634
and within them
you have individual controls.

22
00:01:01,634 --> 00:01:03,767
And these things are--
we call them views.

23
00:01:03,767 --> 00:01:06,934
And there's a base class
for all of them that is view,

24
00:01:06,934 --> 00:01:08,701
in the view's namespace--

25
00:01:08,701 --> 00:01:12,534
in the sky, he can paint
into a canvas,

26
00:01:12,534 --> 00:01:15,400
he can receive events,

27
00:01:15,400 --> 00:01:19,434
and do all kinds of things
in response to those.

28
00:01:19,434 --> 00:01:23,767
So the views toolkit provides
some basic widgets

29
00:01:23,767 --> 00:01:26,601
that allow you
to construct UI.

30
00:01:26,601 --> 00:01:30,067
And all of these widgets
are just sub-classes of view.

31
00:01:30,067 --> 00:01:31,801
And they override things
like Paint and other stuff

32
00:01:31,801 --> 00:01:34,701
to do interesting things.

33
00:01:34,701 --> 00:01:36,367
So the view itself--
all of the rendering

34
00:01:36,367 --> 00:01:39,167
that we do in views is use Skia.

35
00:01:39,167 --> 00:01:43,133
And so when we paint,
we paint into Skia canvases

36
00:01:43,133 --> 00:01:48,601
and use some of the Skia
utilities to make things happen.

37
00:01:48,601 --> 00:01:51,734
And so, if you've done work
on WebKit,

38
00:01:51,734 --> 00:01:55,901
you might find that this
is somewhat similar to the way

39
00:01:55,901 --> 00:01:58,634
rendering works within WebKit,
except much, much simpler,

40
00:01:58,634 --> 00:02:02,467
because we don't have to,
you know, support things like

41
00:02:02,467 --> 00:02:05,000
HTML, CSS,
and all that kind of stuff.

42
00:02:05,000 --> 00:02:07,567
So basically, it's just
a very simple layout

43
00:02:07,567 --> 00:02:09,167
and rendering system.

44
00:02:09,167 --> 00:02:12,100
And so, I'll just tell you
a little bit about how it all

45
00:02:12,100 --> 00:02:14,000
sort of fits together.

46
00:02:14,000 --> 00:02:15,367
Like I said, we have
this view thing

47
00:02:15,367 --> 00:02:19,067
that is like the individual
controls within a window.

48
00:02:19,067 --> 00:02:22,000
The actual window itself
at the top level--

49
00:02:22,000 --> 00:02:24,067
we have something
that we call a widget.

50
00:02:24,067 --> 00:02:28,234
Which is--
on Windows, this is a hWnd.

51
00:02:28,234 --> 00:02:29,434
Because in Windows,

52
00:02:29,434 --> 00:02:30,834
eventually you have
to have an hWnd.

53
00:02:30,834 --> 00:02:33,634
hWnd is what Windows thinks of
as the control.

54
00:02:33,634 --> 00:02:35,067
And it doesn't know
anything else about

55
00:02:35,067 --> 00:02:37,734
what else we might do.

56
00:02:37,734 --> 00:02:42,434
So, we have this class called
Widget Win, on Windows,

57
00:02:42,434 --> 00:02:44,701
which basically is responsible

58
00:02:44,701 --> 00:02:47,868
for translating operating
system messages,

59
00:02:47,868 --> 00:02:49,000
things like WMPaint,

60
00:02:49,000 --> 00:02:51,934
WML button down,
all that sort of thing,

61
00:02:51,934 --> 00:02:55,567
into things that
our view system understands.

62
00:02:55,567 --> 00:02:58,934
And so this guy
has all these message handlers,

63
00:02:58,934 --> 00:03:00,868
and he does that.

64
00:03:00,868 --> 00:03:02,367
And the widget is responsible

65
00:03:02,367 --> 00:03:05,501
for hosting a special kind
of view called a root view.

66
00:03:05,501 --> 00:03:08,267
Maybe if I just come over here
and I'll just draw the structure

67
00:03:08,267 --> 00:03:12,000
on this white board.

68
00:03:39,300 --> 00:03:43,400
Oh, maybe Ian can--

69
00:03:43,400 --> 00:03:47,467
So, Ian's just gonna turn
the camera around.

70
00:03:47,467 --> 00:03:50,868
Okay.

71
00:03:55,934 --> 00:03:57,167
Here we go.

72
00:03:57,167 --> 00:03:59,501
So I've just drawn
some boxes here.

73
00:03:59,501 --> 00:04:01,400
The outermost box is
the Widget Win.

74
00:04:01,400 --> 00:04:02,667
So there would be,
you know,

75
00:04:02,667 --> 00:04:04,000
when you're typically writing
Windows code,

76
00:04:04,000 --> 00:04:05,767
you have your hWnd
and you might have child hWnds

77
00:04:05,767 --> 00:04:06,934
and stuff like that.

78
00:04:06,934 --> 00:04:09,200
Here is the Widget Windows,
the hWnd.

79
00:04:09,200 --> 00:04:11,300
And inside that,
we have a single view,

80
00:04:11,300 --> 00:04:12,534
which is a root view.

81
00:04:12,534 --> 00:04:16,067
And the root view is a sub-class
of view that does some--

82
00:04:16,067 --> 00:04:18,701
basically, it figures out
how to propagate events

83
00:04:18,701 --> 00:04:20,634
and all that sort of thing.

84
00:04:20,634 --> 00:04:21,901
So that sits there.

85
00:04:21,901 --> 00:04:24,234
And then within the root view,

86
00:04:24,234 --> 00:04:26,868
there is basically
the view hierarchy.

87
00:04:26,868 --> 00:04:28,567
And so for the Chrome
browser window,

88
00:04:28,567 --> 00:04:31,033
there is a fairly
deep hierarchy of views,

89
00:04:31,033 --> 00:04:34,033
starting with the frame,
with the window

90
00:04:34,033 --> 00:04:35,834
and all the way down
to individual buttons

91
00:04:35,834 --> 00:04:37,434
and so on the toolbar.

92
00:04:37,434 --> 00:04:40,267
And then dialogue boxes,
you end up with the same thing.

93
00:04:40,267 --> 00:04:41,834
You know, there's the frame
with the dialogue box,

94
00:04:41,834 --> 00:04:44,167
and then you'll end up
with individual buttons

95
00:04:44,167 --> 00:04:47,868
and text fields and whatnot
inside that.

96
00:04:47,868 --> 00:04:52,067
And so one of the most common
things that you will do

97
00:04:52,067 --> 00:04:53,534
if you have to build some UI,

98
00:04:53,534 --> 00:04:55,667
you might have to create
a dialogue box for something.

99
00:04:55,667 --> 00:04:57,000
Maybe you're implementing
a new feature

100
00:04:57,000 --> 00:05:00,467
and you need to configure it
or pop up something.

101
00:05:00,467 --> 00:05:02,400
And so, we have a special kind
of widget

102
00:05:02,400 --> 00:05:06,501
that is just for creating
a top-level window

103
00:05:06,501 --> 00:05:08,601
or dialogue box,
and that's called Window.

104
00:05:08,601 --> 00:05:12,000
And it's basically
a sub-class of widget.

105
00:05:12,000 --> 00:05:16,100
And that provides you
with the ability to create

106
00:05:16,100 --> 00:05:17,534
a top-level window,

107
00:05:17,534 --> 00:05:18,868
and have all of
the right appearance,

108
00:05:18,868 --> 00:05:22,767
the Chrome blue frame
and all sorts of other things

109
00:05:22,767 --> 00:05:24,501
that sort of come
automatically.

110
00:05:24,501 --> 00:05:26,133
And so you do that
in your code.

111
00:05:26,133 --> 00:05:28,801
Basically, you create
one of these windows,

112
00:05:28,801 --> 00:05:30,067
and you provide it
with something called

113
00:05:30,067 --> 00:05:31,501
a window delegate.

114
00:05:31,501 --> 00:05:33,767
And a window delegate
is this object.

115
00:05:33,767 --> 00:05:36,133
It's an interface that you
implement on your object,

116
00:05:36,133 --> 00:05:38,400
then you get notified of things
like the window is closing,

117
00:05:38,400 --> 00:05:40,834
and you also get to configure
the window through

118
00:05:40,834 --> 00:05:43,901
your implementation
of this interface.

119
00:05:43,901 --> 00:05:47,467
Things like whether or not
you can be resized or maximized,

120
00:05:47,467 --> 00:05:50,234
or things like that.

121
00:05:50,234 --> 00:05:53,133
So by doing that,
you basically--

122
00:05:53,133 --> 00:05:54,801
you tell the window
how it should look

123
00:05:54,801 --> 00:05:57,167
when it gets created,
and also,

124
00:05:57,167 --> 00:05:59,834
you can respond to events
that come from the window,

125
00:05:59,834 --> 00:06:01,701
through your window delegate.

126
00:06:01,701 --> 00:06:04,400
And typically,
the way this works is--

127
00:06:04,400 --> 00:06:08,367
when you build a dialogue box,
you'll create a view

128
00:06:08,367 --> 00:06:11,267
that is the contents
of your dialogue box.

129
00:06:11,267 --> 00:06:12,334
And that will actually
be the thing

130
00:06:12,334 --> 00:06:15,033
that sits in here somewhere.

131
00:06:15,033 --> 00:06:18,100
And your view that--
your contents view

132
00:06:18,100 --> 00:06:21,067
is actually your--in most cases
in the Chrome code,

133
00:06:21,067 --> 00:06:23,267
it ends up being
the window delegate.

134
00:06:23,267 --> 00:06:25,667
And that is able to respond
to the, you know,

135
00:06:25,667 --> 00:06:28,100
closing of the things,
and it can go and configure--

136
00:06:28,100 --> 00:06:31,367
it can go and, you know,
do things, you know,

137
00:06:31,367 --> 00:06:32,767
when the window is closed.

138
00:06:32,767 --> 00:06:34,567
Maybe you wanna perform an
action or something like that,

139
00:06:34,567 --> 00:06:37,167
or scrape the state out of
any text boxes that you have,

140
00:06:37,167 --> 00:06:39,567
and things like that.

141
00:06:39,567 --> 00:06:41,667
Specifically for
a dialogue box,

142
00:06:41,667 --> 00:06:44,968
we have some sugar on top of
a window delegate called

143
00:06:44,968 --> 00:06:47,167
dialogue delegate
that supports being able

144
00:06:47,167 --> 00:06:48,434
to create dialogue boxes

145
00:06:48,434 --> 00:06:51,534
that have okay cancel buttons
and such.

146
00:06:51,534 --> 00:06:53,801
And so that makes
that sort of thing a bit easier.

147
00:06:53,801 --> 00:06:55,501
By the way, all this code--

148
00:06:55,501 --> 00:06:56,934
if I didn't mention this before,
I probably should have--

149
00:06:56,934 --> 00:07:01,000
is in the Chrome source
under source/chrome/views.

150
00:07:01,000 --> 00:07:02,834
And there's some sub-directories
under there

151
00:07:02,834 --> 00:07:07,901
that kind of organize this
into related sections.

152
00:07:07,901 --> 00:07:09,634
So some of the stuff
that I was just talking about,

153
00:07:09,634 --> 00:07:13,434
window, window delegate,
etcetera, is in view/window.

154
00:07:13,434 --> 00:07:16,567
And there's a lot of
the other things around there.

155
00:07:16,567 --> 00:07:18,167
And there's a controls directory
as well,

156
00:07:18,167 --> 00:07:22,267
where you can find
the individual controls

157
00:07:22,267 --> 00:07:26,467
that you can use buttons,
labels, etcetera, etcetera.

158
00:07:26,467 --> 00:07:28,801
So I'll just mention
a couple of the controls.

159
00:07:28,801 --> 00:07:30,200
I mean, most of them
will make sense

160
00:07:30,200 --> 00:07:31,934
if you've ever done
any kind of UI programming

161
00:07:31,934 --> 00:07:34,000
with any framework.

162
00:07:34,000 --> 00:07:35,167
You know,
most of them make sense.

163
00:07:35,167 --> 00:07:37,501
We have a couple
of interesting ones.

164
00:07:37,501 --> 00:07:39,267
One is called hWnd View.

165
00:07:39,267 --> 00:07:45,000
Sometimes you need to wrap
a native windows control.

166
00:07:45,000 --> 00:07:47,033
Sometimes you just have
an hWnd.

167
00:07:47,033 --> 00:07:50,033
And you need to put that

168
00:07:50,033 --> 00:07:51,968
into your view hierarchy
somewhere.

169
00:07:51,968 --> 00:07:55,334
And thing is, is that because
an hWnd isn't a Chrome view--

170
00:07:55,334 --> 00:07:56,968
it is an hWnd.

171
00:07:56,968 --> 00:07:59,534
It's not gonna get resized
automatically

172
00:07:59,534 --> 00:08:01,334
per the layout rules

173
00:08:01,334 --> 00:08:04,067
that you specify
in your view hierarchy.

174
00:08:04,067 --> 00:08:08,567
So what we have is a control
called hWnd View

175
00:08:08,567 --> 00:08:10,501
that basically allows you
to take any hWnd

176
00:08:10,501 --> 00:08:12,701
that you might have--
say you have a--

177
00:08:12,701 --> 00:08:14,167
I'll just use one example
of a renderer

178
00:08:14,167 --> 00:08:15,667
or some other control
that you might have,

179
00:08:15,667 --> 00:08:17,234
where you just have
the hWnd of it.

180
00:08:17,234 --> 00:08:20,501
You can create an hWnd view
and attach the hWnd to it.

181
00:08:20,501 --> 00:08:21,667
And from then on,

182
00:08:21,667 --> 00:08:23,801
any time the hWnd view
gets resized,

183
00:08:23,801 --> 00:08:26,601
it'll automatically size
the hWnd with it.

184
00:08:26,601 --> 00:08:29,300
So that means that you can
basically have your hWnd,

185
00:08:29,300 --> 00:08:35,000
your individual native hWnds
take part in the window layout.

186
00:08:35,000 --> 00:08:37,567
And we have some other ones
like hWnd HTML view,

187
00:08:37,567 --> 00:08:40,033
which is a specialization
of hWnd View

188
00:08:40,033 --> 00:08:45,534
that allows you to specifically
embed a web rendering area

189
00:08:45,534 --> 00:08:48,100
within your view hierarchy.

190
00:08:48,100 --> 00:08:49,534
Now I just talked
a little bit about layout,

191
00:08:49,534 --> 00:08:51,501
and that's something
that's kind of interesting.

192
00:08:51,501 --> 00:08:53,968
A lot of the times when
you're building a dialogue box,

193
00:08:53,968 --> 00:08:55,200
you might use one of the--

194
00:08:55,200 --> 00:08:56,968
you might use
the existing layout manager,

195
00:08:56,968 --> 00:08:59,801
like GridLayout,
which allows you to specify--

196
00:08:59,801 --> 00:09:05,033
so you have a nicely lined up
arrangement of controls,

197
00:09:05,033 --> 00:09:06,834
if you're putting something
together like that.

198
00:09:06,834 --> 00:09:09,901
And there's some header files
around that define,

199
00:09:09,901 --> 00:09:11,534
you know, nicely--

200
00:09:11,534 --> 00:09:13,634
the nice aesthetic spacing
between controls

201
00:09:13,634 --> 00:09:15,200
and stuff like that.

202
00:09:15,200 --> 00:09:17,234
Sometimes you might be doing
something more specific,

203
00:09:17,234 --> 00:09:20,067
more custom, things like
the top-level browser window,

204
00:09:20,067 --> 00:09:22,100
for instance,
is not using a grid layout

205
00:09:22,100 --> 00:09:25,567
because everything is very
specific to the individual case.

206
00:09:25,567 --> 00:09:26,868
In this case for
your view method,

207
00:09:26,868 --> 00:09:28,434
you just override layout,

208
00:09:28,434 --> 00:09:31,234
and then you get to specify
each child's bounds

209
00:09:31,234 --> 00:09:33,133
when your layout method
is called.

210
00:09:33,133 --> 00:09:35,801
Layout is called automatically
by the framework

211
00:09:35,801 --> 00:09:39,200
whenever the top-level widget
is resized.

212
00:09:39,200 --> 00:09:42,901
Basically, it goes down through
the hierarchy calling layout.

213
00:09:42,901 --> 00:09:48,133
And then basically
each child view--

214
00:09:48,133 --> 00:09:49,868
each view has a layout called,

215
00:09:49,868 --> 00:09:51,501
and then it goes and sizes
its children.

216
00:09:51,501 --> 00:09:53,667
And when the children's
bounds change,

217
00:09:53,667 --> 00:09:56,601
it calls layout and it
just propagates like that.

218
00:09:56,601 --> 00:09:58,033
So part of that--

219
00:09:58,033 --> 00:09:59,567
there's another method
that you might override

220
00:09:59,567 --> 00:10:02,200
sometimes called
Get Preferred Size.

221
00:10:02,200 --> 00:10:04,634
And the preferred size
of your widget

222
00:10:04,634 --> 00:10:08,033
is basically the size
that you want your view to be

223
00:10:08,033 --> 00:10:09,434
when it's layed out.

224
00:10:09,434 --> 00:10:13,067
So you might say that your view,
wants to be, you know, 20 x 30,

225
00:10:13,067 --> 00:10:16,067
and then when that view's parent
is called,

226
00:10:16,067 --> 00:10:17,567
it might call
Get Preferred Size

227
00:10:17,567 --> 00:10:19,033
and then size that
and position it,

228
00:10:19,033 --> 00:10:21,601
and stuff like that.

229
00:10:21,601 --> 00:10:26,934
So that's something else
that you might find you do.

230
00:10:26,934 --> 00:10:31,601
I just figured I'd talk briefly
about the construction

231
00:10:31,601 --> 00:10:33,234
of the top-level window
as well.

232
00:10:33,234 --> 00:10:36,100
Sometimes you see some of these
things in your call stack.

233
00:10:36,100 --> 00:10:37,767
It might be interesting
to know what they are.

234
00:10:37,767 --> 00:10:38,934
Like I said before,

235
00:10:38,934 --> 00:10:41,634
and I drew my diagram
of it here,

236
00:10:41,634 --> 00:10:46,567
the top-level Widget Win window
is the container,

237
00:10:46,567 --> 00:10:49,834
the native hWnd that contains
the view hierarchy.

238
00:10:49,834 --> 00:10:52,367
Top-level view is a root view.

239
00:10:52,367 --> 00:10:56,667
Then inside that,
in every single case these days,

240
00:10:56,667 --> 00:10:59,100
the only child
of the root view

241
00:10:59,100 --> 00:11:01,534
is something called
a non-client view.

242
00:11:01,534 --> 00:11:04,033
And this kind of maps to
the window's concept

243
00:11:04,033 --> 00:11:06,901
of client and non-client
rendering.

244
00:11:06,901 --> 00:11:09,534
On Windows, when you have
a non-client area,

245
00:11:09,534 --> 00:11:12,000
this is the area that is
the frame of the window,

246
00:11:12,000 --> 00:11:14,367
the title by the sizing border,
stuff like that.

247
00:11:14,367 --> 00:11:16,601
And then inside that,
you have a client area,

248
00:11:16,601 --> 00:11:19,534
which is the contents
of the window.

249
00:11:19,534 --> 00:11:22,701
So it kind of replicated
that here in the view system.

250
00:11:22,701 --> 00:11:25,501
The non-client view contains
the client view,

251
00:11:25,501 --> 00:11:28,100
and it also contains a--
what we call a frame view,

252
00:11:28,100 --> 00:11:29,334
which actually renders

253
00:11:29,334 --> 00:11:34,601
the blue border around
the window.

254
00:11:34,601 --> 00:11:36,033
And so--
and that can do

255
00:11:36,033 --> 00:11:38,667
all of the specific
functionality for that.

256
00:11:38,667 --> 00:11:40,601
And then the client view
is the thing

257
00:11:40,601 --> 00:11:41,968
that actually contains
the contents.

258
00:11:41,968 --> 00:11:43,567
So I should have simplified this
a bit before

259
00:11:43,567 --> 00:11:45,334
when I was talking about
dialogue boxes,

260
00:11:45,334 --> 00:11:47,801
and I said that you would make
a contents view for your--

261
00:11:47,801 --> 00:11:49,801
had the controls
of your dialogue box,

262
00:11:49,801 --> 00:11:51,467
and that would go
into the window.

263
00:11:51,467 --> 00:11:54,067
That actually goes inside
of client view.

264
00:11:54,067 --> 00:11:55,467
You don't actually get to see
any of this.

265
00:11:55,467 --> 00:11:58,467
It's all hidden behind
the call to create Chrome window

266
00:11:58,467 --> 00:12:00,267
that you make.

267
00:12:00,267 --> 00:12:03,067
But the client view is the thing
that basically--

268
00:12:03,067 --> 00:12:04,434
in the case of a dialogue box,

269
00:12:04,434 --> 00:12:07,801
the client view provides
the Okay and Cancel buttons,

270
00:12:07,801 --> 00:12:08,868
and stuff like that.

271
00:12:08,868 --> 00:12:11,367
And you may find that,
you know,

272
00:12:11,367 --> 00:12:13,167
you find yourself in there
sometimes

273
00:12:13,167 --> 00:12:15,634
if you're trying
to figure something out.

274
00:12:15,634 --> 00:12:19,667
So just a general high-level
comment about the way that

275
00:12:19,667 --> 00:12:24,834
the front end is being developed
primarily because--

276
00:12:24,834 --> 00:12:26,267
all the stuff I've talked about
so far

277
00:12:26,267 --> 00:12:29,067
is related to UI that we've been
building on windows.

278
00:12:29,067 --> 00:12:32,367
But we are a cross-platform
project.

279
00:12:32,367 --> 00:12:34,000
And so there is
a lot of logic

280
00:12:34,000 --> 00:12:37,467
that is shared
between platforms.

281
00:12:37,467 --> 00:12:38,667
And you'll find that there are
a lot of objects

282
00:12:38,667 --> 00:12:40,534
within the browser front end

283
00:12:40,534 --> 00:12:44,667
that are actually
cross platforms.

284
00:12:44,667 --> 00:12:47,200
Things like browser,
tab content, stuff like that.

285
00:12:47,200 --> 00:12:49,634
And so we didn't want
to tie them too closely together

286
00:12:49,634 --> 00:12:51,534
with our windows implementation
of the front end,

287
00:12:51,534 --> 00:12:53,934
so we used the sort of
the standard approach

288
00:12:53,934 --> 00:12:58,200
for this in model view
controller layout, where--

289
00:12:58,200 --> 00:13:00,801
we consider some of
the state objects like browser,

290
00:13:00,801 --> 00:13:04,434
tab contents, etcetera,
to be the state of the model

291
00:13:04,434 --> 00:13:06,133
in this case, and then the--

292
00:13:06,133 --> 00:13:09,467
all of the Chrome view stuff,
that's kind of the--

293
00:13:09,467 --> 00:13:12,734
that's sort of the view
controller side of things.

294
00:13:12,734 --> 00:13:14,801
And what this means is that
we can separate out this model

295
00:13:14,801 --> 00:13:17,000
and we can actually use that on
Mac and Linux,

296
00:13:17,000 --> 00:13:18,467
which is what we're doing.

297
00:13:18,467 --> 00:13:21,400
And also because there isn't
this sort of type coupling

298
00:13:21,400 --> 00:13:23,934
of that particular UI state.

299
00:13:23,934 --> 00:13:25,667
And it's also a lot easier
to write unit tests

300
00:13:25,667 --> 00:13:28,467
for the model.

301
00:13:28,467 --> 00:13:30,067
And I'll get to that
in just a moment.

302
00:13:30,067 --> 00:13:32,701
Actually, I'll get to that
right now.

303
00:13:32,701 --> 00:13:35,334
So because the--

304
00:13:35,334 --> 00:13:37,501
like I said,
because it separated it out,

305
00:13:37,501 --> 00:13:39,934
it's been more possible
to write more unit tests.

306
00:13:39,934 --> 00:13:42,868
Sometimes you have a relatively
simple state object,

307
00:13:42,868 --> 00:13:45,334
and you can just write
a regular unit test for it

308
00:13:45,334 --> 00:13:47,801
using the existing
unit test framework

309
00:13:47,801 --> 00:13:49,367
and get that to work.

310
00:13:49,367 --> 00:13:51,734
Sometimes you wanna do something
a little bit more complicated,

311
00:13:51,734 --> 00:13:55,300
and you wanna test functionality
that goes out and loads pages,

312
00:13:55,300 --> 00:13:58,400
you know, off a test server
and stuff like that.

313
00:13:58,400 --> 00:14:01,400
So we have a thing called
in-process browser tests

314
00:14:01,400 --> 00:14:02,934
that basically allow--

315
00:14:02,934 --> 00:14:05,033
that basically spins up
a message loop

316
00:14:05,033 --> 00:14:08,133
and allows you to simulate
running the actual browser,

317
00:14:08,133 --> 00:14:09,300
but in a unit test.

318
00:14:09,300 --> 00:14:10,834
And these are pretty easy
to write.

319
00:14:10,834 --> 00:14:12,200
We're still getting
some of the kinks

320
00:14:12,200 --> 00:14:13,734
worked out of the system,

321
00:14:13,734 --> 00:14:16,400
but they're still pretty easy
to write and run in isolation.

322
00:14:16,400 --> 00:14:20,501
And finally, we have UI tests
which are much higher level,

323
00:14:20,501 --> 00:14:24,234
very deep sort of tests
that basically run

324
00:14:24,234 --> 00:14:26,767
the whole browser
in a separate process.

325
00:14:26,767 --> 00:14:28,868
Basically, to run the browser
as a user would.

326
00:14:28,868 --> 00:14:31,501
And it sends commands to it
through an automation API.

327
00:14:31,501 --> 00:14:33,434
I would recommend if
you're writing new features

328
00:14:33,434 --> 00:14:35,701
to write most stuff
as unit tests

329
00:14:35,701 --> 00:14:37,067
or in-process browser tests

330
00:14:37,067 --> 00:14:39,300
'cause these are the easiest
to debug.

331
00:14:39,300 --> 00:14:40,601
But if you want to get--

332
00:14:40,601 --> 00:14:43,834
if you want something to run
on Chrome Bot

333
00:14:43,834 --> 00:14:45,267
or any of these other things,

334
00:14:45,267 --> 00:14:50,167
you would need to write UI
tests, and automated UI tests.

335
00:14:50,167 --> 00:14:54,033
So that's sort of a brief
summary of the framework.

