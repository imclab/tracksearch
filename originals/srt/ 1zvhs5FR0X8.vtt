WEBVTT

1
00:00:00.000 --> 00:00:08.041

2
00:00:08.041 --> 00:00:10.460
COLT MCANLIS: Better yet, I use
Chrome OS, because I don't

3
00:00:10.460 --> 00:00:11.110
know what defrag is.

4
00:00:11.110 --> 00:00:12.746
NOEL ALLEN: There you are.

5
00:00:12.746 --> 00:00:14.090
COLT MCANLIS: There
is actually.

6
00:00:14.090 --> 00:00:15.340
NOEL ALLEN: Ooh.

7
00:00:15.340 --> 00:00:17.550

8
00:00:17.550 --> 00:00:18.860
COLT MCANLIS: All right.

9
00:00:18.860 --> 00:00:20.490
It looks like we are alive.

10
00:00:20.490 --> 00:00:21.260
Fantastic.

11
00:00:21.260 --> 00:00:21.700
Hello.

12
00:00:21.700 --> 00:00:24.520
Welcome, everyone.

13
00:00:24.520 --> 00:00:24.830
Wow.

14
00:00:24.830 --> 00:00:26.830
We have a post-lunch
coma crowd.

15
00:00:26.830 --> 00:00:27.970
Hello, everyone!

16
00:00:27.970 --> 00:00:28.890
AUDIENCE: Hello!

17
00:00:28.890 --> 00:00:29.700
COLT MCANLIS: Fantastic.

18
00:00:29.700 --> 00:00:30.050
Perfect.

19
00:00:30.050 --> 00:00:31.860
Guys, we're getting recorded on
YouTube, and you're going

20
00:00:31.860 --> 00:00:33.490
to be like, no, let's not
talk to the presenter.

21
00:00:33.490 --> 00:00:35.340
That's horrible.

22
00:00:35.340 --> 00:00:36.960
Your voice will be recorded
and saved for

23
00:00:36.960 --> 00:00:39.230
the annals of time.

24
00:00:39.230 --> 00:00:40.780
Anyhow, hello everyone.

25
00:00:40.780 --> 00:00:43.340
Welcome today to Native
Client Live.

26
00:00:43.340 --> 00:00:44.460
My name is Colt McAnlis.

27
00:00:44.460 --> 00:00:46.910
I'm a developer advocate
at Google

28
00:00:46.910 --> 00:00:48.160
working on Native Client.

29
00:00:48.160 --> 00:00:50.155
NOEL ALLEN: I'm Noel Allen,
the SDK lead.

30
00:00:50.155 --> 00:00:51.140
COLT MCANLIS: SDK lead.

31
00:00:51.140 --> 00:00:53.240
And we have fancy
hats, as well.

32
00:00:53.240 --> 00:00:55.370
We figured these lights
are actually

33
00:00:55.370 --> 00:00:56.220
pretty gnarly up here.

34
00:00:56.220 --> 00:00:56.940
We can't see people.

35
00:00:56.940 --> 00:00:58.130
So we're like, let's
wear our hats.

36
00:00:58.130 --> 00:00:59.235
That'll be funny.

37
00:00:59.235 --> 00:01:01.505
NOEL ALLEN: It actually kind
of works, because it is a

38
00:01:01.505 --> 00:01:02.870
little bright.

39
00:01:02.870 --> 00:01:03.650
COLT MCANLIS: OK.

40
00:01:03.650 --> 00:01:05.900
So what today's talk is about
is, we're actually going to

41
00:01:05.900 --> 00:01:08.980
port an application to Native
Client live in 60 minutes.

42
00:01:08.980 --> 00:01:10.690
Now, just quick show of hands
in here, how many have

43
00:01:10.690 --> 00:01:12.920
actually played with
Native Client?

44
00:01:12.920 --> 00:01:13.370
Wow.

45
00:01:13.370 --> 00:01:15.590
That's actually a surprising
amount of people.

46
00:01:15.590 --> 00:01:17.210
I'm very encouraged
by that, actually.

47
00:01:17.210 --> 00:01:19.930
They'll know what we're
talking about today.

48
00:01:19.930 --> 00:01:23.910
Funny story is we actually
decided to sign off to do this

49
00:01:23.910 --> 00:01:26.030
about three to four
months ago.

50
00:01:26.030 --> 00:01:28.120
And we actually walked into
Noel's office, and I was like,

51
00:01:28.120 --> 00:01:31.020
hey, we're going to give a talk
at Google I/O, and we're

52
00:01:31.020 --> 00:01:32.220
going to port something
to Native

53
00:01:32.220 --> 00:01:33.610
Client live in 60 minutes.

54
00:01:33.610 --> 00:01:35.280
And he was like, uh,
no you're not.

55
00:01:35.280 --> 00:01:36.240
And I said, yes, yes we are.

56
00:01:36.240 --> 00:01:37.570
So we got him to
sign off on it.

57
00:01:37.570 --> 00:01:39.790
I convinced him with alcohol
or something else.

58
00:01:39.790 --> 00:01:41.920
And we started going through
the process.

59
00:01:41.920 --> 00:01:43.870
And the truth was, we failed.

60
00:01:43.870 --> 00:01:44.900
We failed a lot.

61
00:01:44.900 --> 00:01:45.620
Horribly.

62
00:01:45.620 --> 00:01:47.350
Like crash and burn style.

63
00:01:47.350 --> 00:01:48.990
NOEL ALLEN: You failed
before I started.

64
00:01:48.990 --> 00:01:50.310
Let's just get that clear.

65
00:01:50.310 --> 00:01:51.040
COLT MCANLIS: Fair enough,
fair enough.

66
00:01:51.040 --> 00:01:52.420
That is true.

67
00:01:52.420 --> 00:01:54.030
The original port of the
application we're going to

68
00:01:54.030 --> 00:01:57.160
show you today actually took
about 2.5 weeks the very first

69
00:01:57.160 --> 00:01:59.310
time we did it, which was kind
of embarrassing on our side,

70
00:01:59.310 --> 00:02:00.920
because it's a very simple
piece of technology we're

71
00:02:00.920 --> 00:02:02.290
going to look at today.

72
00:02:02.290 --> 00:02:05.060
But the good news is that we
actually learned from that.

73
00:02:05.060 --> 00:02:06.940
We said, where are we.

74
00:02:06.940 --> 00:02:08.100
This isn't good for
our developers.

75
00:02:08.100 --> 00:02:09.440
Let's improve the process.

76
00:02:09.440 --> 00:02:11.690
Let's improve the SDK,
the workflow.

77
00:02:11.690 --> 00:02:14.630
And what we're going to talk
about today is the learn-ins,

78
00:02:14.630 --> 00:02:16.110
the learn-ins of those things.

79
00:02:16.110 --> 00:02:19.880
So how you should view
today's class session

80
00:02:19.880 --> 00:02:20.490
is a cooking show.

81
00:02:20.490 --> 00:02:23.750
How many people watch
late night cooking?

82
00:02:23.750 --> 00:02:24.300
Really?

83
00:02:24.300 --> 00:02:25.390
That's it?

84
00:02:25.390 --> 00:02:28.930
The rest of you are liars, and
you're dirty, filthy liars.

85
00:02:28.930 --> 00:02:30.530
If you do not watch
Iron Chef there is

86
00:02:30.530 --> 00:02:31.380
something wrong with you.

87
00:02:31.380 --> 00:02:32.630
That is an amazing show.

88
00:02:32.630 --> 00:02:36.340

89
00:02:36.340 --> 00:02:36.730
When did--

90
00:02:36.730 --> 00:02:37.945
OK--

91
00:02:37.945 --> 00:02:39.580
NOEL ALLEN: You kept changing
the slides on me.

92
00:02:39.580 --> 00:02:41.770
I figured I'd have
some fun too.

93
00:02:41.770 --> 00:02:43.690
COLT MCANLIS: That's new.

94
00:02:43.690 --> 00:02:44.280
OK.

95
00:02:44.280 --> 00:02:44.950
We're going there.

96
00:02:44.950 --> 00:02:47.090
Today is a cooking show,
and we have Chef

97
00:02:47.090 --> 00:02:50.240
Noel Allen over here.

98
00:02:50.240 --> 00:02:53.320
In these shows, you usually have
some very peppy person

99
00:02:53.320 --> 00:02:55.010
standing up there showing you
how they're going to make a

100
00:02:55.010 --> 00:02:59.640
lamb sorbet, which is normally
like a nine-day endeavor.

101
00:02:59.640 --> 00:03:02.210
And they're going to do it in 30
minutes and show you how to

102
00:03:02.210 --> 00:03:02.710
do it, too.

103
00:03:02.710 --> 00:03:04.380
Well, we're going to do the
same process today.

104
00:03:04.380 --> 00:03:06.080
We're going to take the
knowledge and everything we've

105
00:03:06.080 --> 00:03:08.700
learned in the past couple of
months and dissect it down.

106
00:03:08.700 --> 00:03:11.400
Now, we've had to pre-chop some
onions so that we can get

107
00:03:11.400 --> 00:03:14.120
this in our 60 minute window
here, but we'll be sure to

108
00:03:14.120 --> 00:03:16.360
call that out so you know what
was pre-chopped, what was

109
00:03:16.360 --> 00:03:18.750
canned, and what was actually
fresh tuna fish

110
00:03:18.750 --> 00:03:20.080
for our lamb sorbet.

111
00:03:20.080 --> 00:03:21.655
And that hat is awesome.

112
00:03:21.655 --> 00:03:23.040
Where did you even find that?

113
00:03:23.040 --> 00:03:25.080
NOEL ALLEN: I got
it at the store.

114
00:03:25.080 --> 00:03:26.240
COLT MCANLIS: You have two?

115
00:03:26.240 --> 00:03:27.093
Sweet.

116
00:03:27.093 --> 00:03:30.550
Sorry, guys.

117
00:03:30.550 --> 00:03:31.005
I'm getting fired.

118
00:03:31.005 --> 00:03:32.950
This is going to be awesome.

119
00:03:32.950 --> 00:03:33.430
How does it look?

120
00:03:33.430 --> 00:03:35.130
NOEL ALLEN: Very nice.

121
00:03:35.130 --> 00:03:35.690
Very convincing.

122
00:03:35.690 --> 00:03:38.680
COLT MCANLIS: I feel like
I have a pope hat.

123
00:03:38.680 --> 00:03:40.470
Is this even on right?

124
00:03:40.470 --> 00:03:41.770
NOEL ALLEN: I can't tell.

125
00:03:41.770 --> 00:03:42.630
I don't know what it's supposed
to look like.

126
00:03:42.630 --> 00:03:43.450
COLT MCANLIS: OK, cool.

127
00:03:43.450 --> 00:03:43.950
All right.

128
00:03:43.950 --> 00:03:44.780
We're wearing these now.

129
00:03:44.780 --> 00:03:45.330
Fantastic.

130
00:03:45.330 --> 00:03:46.860
I'm sure the YouTube
guys love this.

131
00:03:46.860 --> 00:03:47.520
OK.

132
00:03:47.520 --> 00:03:49.460
This is a cooking show
with your chefs.

133
00:03:49.460 --> 00:03:51.770
So let's get started and talk
about Native Client a little

134
00:03:51.770 --> 00:03:53.435
bit, sort of set the groundwork
and the ecosystem

135
00:03:53.435 --> 00:03:55.660
of we're talking about today.

136
00:03:55.660 --> 00:03:59.380
Native Client is a technology
that allows you to run C and

137
00:03:59.380 --> 00:04:04.040
C++ code in a web page with the
same safety as JavaScript.

138
00:04:04.040 --> 00:04:07.320
And here's the really cool part,
is that the user is not

139
00:04:07.320 --> 00:04:09.620
required to install a plug-in.

140
00:04:09.620 --> 00:04:12.160
So what we've seen is that with
a lot of technologies out

141
00:04:12.160 --> 00:04:15.310
there, you can actually run C
and C++ code in a web browser,

142
00:04:15.310 --> 00:04:18.529
but the user gets this really
scary pop-up that's like, hey,

143
00:04:18.529 --> 00:04:19.980
you're about to install a
plug-in that's going to

144
00:04:19.980 --> 00:04:22.970
violate every piece of data you
have on your hard drive.

145
00:04:22.970 --> 00:04:25.580
What we've been seeing over time
is that that, of course,

146
00:04:25.580 --> 00:04:27.445
affects user retention rates.

147
00:04:27.445 --> 00:04:28.620
NOEL ALLEN: And installation.

148
00:04:28.620 --> 00:04:29.330
COLT MCANLIS: Say again?

149
00:04:29.330 --> 00:04:29.990
NOEL ALLEN: And installation.

150
00:04:29.990 --> 00:04:30.600
COLT MCANLIS: And installation.

151
00:04:30.600 --> 00:04:31.220
Exactly.

152
00:04:31.220 --> 00:04:34.070
So users get there, and they
go, hey, this is too scary.

153
00:04:34.070 --> 00:04:34.900
And they move on.

154
00:04:34.900 --> 00:04:36.980
And so this means that high
performance applications that

155
00:04:36.980 --> 00:04:40.810
want to run C++ code in a web
page really lose a lot of

156
00:04:40.810 --> 00:04:42.620
their users to this
scary dialogue.

157
00:04:42.620 --> 00:04:45.660
Now, with Native Client, C++
and the fact it can be run

158
00:04:45.660 --> 00:04:48.560
safely in the web browser and
they're not prompted to

159
00:04:48.560 --> 00:04:51.750
install a plug-in, means that
your C++ code can actually

160
00:04:51.750 --> 00:04:55.070
bridge a lot of ecosystems
and a lot of platforms.

161
00:04:55.070 --> 00:04:59.000
So predominantly, C++ code was
in the realm of game consoles,

162
00:04:59.000 --> 00:05:00.330
PC development mobile.

163
00:05:00.330 --> 00:05:02.960
And now you can actually use
your same code base right in

164
00:05:02.960 --> 00:05:05.250
the web, which is fantastic
for a lot of companies and

165
00:05:05.250 --> 00:05:08.470
studios who spend a lot of time
not only training their

166
00:05:08.470 --> 00:05:12.530
engineers in C++ code, but also,
you have legacy code.

167
00:05:12.530 --> 00:05:16.540
You've got 10 years of C++
memory management code, STL

168
00:05:16.540 --> 00:05:18.340
containers sitting around,
and you don't want to

169
00:05:18.340 --> 00:05:20.690
throw all that out.

170
00:05:20.690 --> 00:05:23.190
Now, we had our official Native
Client launch event in

171
00:05:23.190 --> 00:05:24.860
December of last year.

172
00:05:24.860 --> 00:05:27.160
In truth, Native Client was out
for quite a while before

173
00:05:27.160 --> 00:05:29.510
that, but we decided to snazzy
it up and actually have some

174
00:05:29.510 --> 00:05:31.330
hors d'oeuvres and call
it a launch event.

175
00:05:31.330 --> 00:05:33.500
Since then, NaCl has been
doing fantastic.

176
00:05:33.500 --> 00:05:37.580
We've seen already 27 titles,
actual products, ship with

177
00:05:37.580 --> 00:05:39.770
Native Client since
the announcement.

178
00:05:39.770 --> 00:05:42.000
In addition to that, we've
seen that game developers

179
00:05:42.000 --> 00:05:44.750
predominantly love
Native Client.

180
00:05:44.750 --> 00:05:48.880
We see a lot of technology
middleware for games on the

181
00:05:48.880 --> 00:05:49.640
side there.

182
00:05:49.640 --> 00:05:53.500
They're finding that Native
Client provides them this nice

183
00:05:53.500 --> 00:05:56.480
little niche between performance
and reach.

184
00:05:56.480 --> 00:06:00.360
You can run all of your code
extremely fast and reach all

185
00:06:00.360 --> 00:06:05.200
of the 310 million users
that Chrome has active.

186
00:06:05.200 --> 00:06:06.000
That was a new stat today.

187
00:06:06.000 --> 00:06:07.210
Watch the keynote.

188
00:06:07.210 --> 00:06:08.740
So let's talk about what
we're cooking today.

189
00:06:08.740 --> 00:06:09.790
Let's switch this over to you.

190
00:06:09.790 --> 00:06:13.550
So Chef Noel, can you show us
what our lamb sorbet looks

191
00:06:13.550 --> 00:06:13.870
like today?

192
00:06:13.870 --> 00:06:14.380
NOEL ALLEN: Absolutely.

193
00:06:14.380 --> 00:06:21.540
So for today, we have a fabulous
spinning cube.

194
00:06:21.540 --> 00:06:24.170
COLT MCANLIS: That wasn't what
we looked at yesterday.

195
00:06:24.170 --> 00:06:24.435
What--

196
00:06:24.435 --> 00:06:26.480
NOEL ALLEN: Well, we still had
a couple, you know, bugs.

197
00:06:26.480 --> 00:06:26.650
Issues.

198
00:06:26.650 --> 00:06:28.080
COLT MCANLIS: You didn't
fix the bugs?

199
00:06:28.080 --> 00:06:28.750
We were supposed to have--

200
00:06:28.750 --> 00:06:29.610
you were buying the hats.

201
00:06:29.610 --> 00:06:30.390
NOEL ALLEN: I was busy.

202
00:06:30.390 --> 00:06:31.010
I had stuff to do.

203
00:06:31.010 --> 00:06:32.430
I had a new Nexus
to play with.

204
00:06:32.430 --> 00:06:34.770
COLT MCANLIS: Fair enough.

205
00:06:34.770 --> 00:06:35.120
Cool.

206
00:06:35.120 --> 00:06:35.640
You had a new Nexus.

207
00:06:35.640 --> 00:06:35.970
Awesome.

208
00:06:35.970 --> 00:06:36.810
So we're doing a
spinning cube.

209
00:06:36.810 --> 00:06:38.560
So what is this thing actually
doing behind the scenes?

210
00:06:38.560 --> 00:06:39.180
NOEL ALLEN: OK.

211
00:06:39.180 --> 00:06:41.260
So this is an open GL demo.

212
00:06:41.260 --> 00:06:43.900
It's a kind of standard demo
that you do, make sure your

213
00:06:43.900 --> 00:06:46.730
graphics engine is rendering
correctly, hence the arrows

214
00:06:46.730 --> 00:06:48.430
and the lighting and whatnot.

215
00:06:48.430 --> 00:06:51.870
So this is a standard Windows
32 application.

216
00:06:51.870 --> 00:06:53.340
And we're going to port
that to Native Client.

217
00:06:53.340 --> 00:06:54.860
COLT MCANLIS: And so this is
doing just standard rendering.

218
00:06:54.860 --> 00:06:56.550
So we're [? reading ?] in some
shaders, reading some

219
00:06:56.550 --> 00:06:58.170
textures, doing some
a platform calls.

220
00:06:58.170 --> 00:06:58.820
NOEL ALLEN: Exactly.

221
00:06:58.820 --> 00:07:00.060
COLT MCANLIS: This is
our lamb sorbet.

222
00:07:00.060 --> 00:07:01.170
Fantastic.

223
00:07:01.170 --> 00:07:03.050
So with that spinning cube up
and running over there to

224
00:07:03.050 --> 00:07:04.950
distract all of you, I'm going
to point over this way with

225
00:07:04.950 --> 00:07:05.700
sock puppets.

226
00:07:05.700 --> 00:07:07.050
Let's talk about our kitchen.

227
00:07:07.050 --> 00:07:08.880
Let's talk about what
development with Native Client

228
00:07:08.880 --> 00:07:11.010
should actually look like
today for most of you.

229
00:07:11.010 --> 00:07:14.140
So, when porting to Native
Client, you need to approach

230
00:07:14.140 --> 00:07:16.010
it from the concept of
any other ports.

231
00:07:16.010 --> 00:07:18.370
So let's say you're actually
porting an application from

232
00:07:18.370 --> 00:07:20.160
Windows to Linux.

233
00:07:20.160 --> 00:07:22.620
This is going to have a specific
set of processes that

234
00:07:22.620 --> 00:07:24.000
you're going to need
to go through.

235
00:07:24.000 --> 00:07:26.420
First off, you're going to need
to actually change over

236
00:07:26.420 --> 00:07:28.110
from using DirectX to OpenGL.

237
00:07:28.110 --> 00:07:30.360
That's actually a big set of
code, different APIs that

238
00:07:30.360 --> 00:07:32.410
aren't available on the
Linux machines.

239
00:07:32.410 --> 00:07:35.560
Also some APIs are only
available on Windows for the

240
00:07:35.560 --> 00:07:36.280
same process.

241
00:07:36.280 --> 00:07:37.800
So you want to spawn
up a thread.

242
00:07:37.800 --> 00:07:41.230
Well on Windows, you'd use
beginthread or beginthreadex.

243
00:07:41.230 --> 00:07:43.570
On Linux, you would have to use
sort of a more POSIX style

244
00:07:43.570 --> 00:07:45.050
pthread_create.

245
00:07:45.050 --> 00:07:47.590
And for other things, Windows
actually provides a very rich

246
00:07:47.590 --> 00:07:50.950
ecosystem for UI components that
you can use as part of

247
00:07:50.950 --> 00:07:52.850
their platform that may
not exist on other

248
00:07:52.850 --> 00:07:53.600
platforms like Linux.

249
00:07:53.600 --> 00:07:56.170
So instead of being able to
actually use the message box

250
00:07:56.170 --> 00:07:59.040
function directly, you'd have to
get shifted over to printf.

251
00:07:59.040 --> 00:08:00.820
Right?

252
00:08:00.820 --> 00:08:04.020
So viewing your port to Native
Client should be the same way.

253
00:08:04.020 --> 00:08:06.620
You should view it like porting
from anything to

254
00:08:06.620 --> 00:08:07.370
another platform.

255
00:08:07.370 --> 00:08:09.400
But with Native Client, what
you're actually porting to are

256
00:08:09.400 --> 00:08:10.310
these specific functions.

257
00:08:10.310 --> 00:08:13.410
You're actually porting to
an API we call Pepper.

258
00:08:13.410 --> 00:08:17.960
Now, what Pepper is, is it's
actually a plug-in API that

259
00:08:17.960 --> 00:08:21.630
Chrome provides that allows
plug-ins to interact with

260
00:08:21.630 --> 00:08:25.380
lower-level system resources
like FileIO, rendering, audio,

261
00:08:25.380 --> 00:08:27.710
and even the ability to
communicate directly to the

262
00:08:27.710 --> 00:08:28.690
JavaScript page.

263
00:08:28.690 --> 00:08:31.480
And it allows it to do this
inside of the Chrome sandbox,

264
00:08:31.480 --> 00:08:33.630
which means that these
plug-ins are actually

265
00:08:33.630 --> 00:08:37.039
communicating through the same
exact code paths that

266
00:08:37.039 --> 00:08:39.210
JavaScript is communicating
to, to do the same

267
00:08:39.210 --> 00:08:40.390
functionality.

268
00:08:40.390 --> 00:08:42.240
This hat is awesome,
by the way.

269
00:08:42.240 --> 00:08:42.710
I'm not sure--

270
00:08:42.710 --> 00:08:43.950
I need an ear-in.

271
00:08:43.950 --> 00:08:46.470
It's popping over my head.

272
00:08:46.470 --> 00:08:49.100
Anyhow, Native Client should be
viewed as a plug-in that's

273
00:08:49.100 --> 00:08:50.970
provided with Chrome.

274
00:08:50.970 --> 00:08:52.030
It's compiled with Chrome.

275
00:08:52.030 --> 00:08:53.260
It's shipped with Chrome.

276
00:08:53.260 --> 00:08:56.540
And what Native Client allows
you to do is it allows you to

277
00:08:56.540 --> 00:09:00.290
load pre-compiled executable
code that can then target the

278
00:09:00.290 --> 00:09:01.880
Pepper APIs.

279
00:09:01.880 --> 00:09:05.080
It'll load it up, execute the
code, and allow that code to

280
00:09:05.080 --> 00:09:08.340
actually, directly trampoline
over and get access to these

281
00:09:08.340 --> 00:09:10.630
lower-level system resources.

282
00:09:10.630 --> 00:09:12.400
How this works at a developer
level starts with the

283
00:09:12.400 --> 00:09:14.100
original C++ code.

284
00:09:14.100 --> 00:09:17.310
The C++ code is then sent
through our custom GCC

285
00:09:17.310 --> 00:09:19.260
compiler, provided by the SDK.

286
00:09:19.260 --> 00:09:21.880
This spits out a set
of NEXE files, or

287
00:09:21.880 --> 00:09:23.470
Native Client exe files.

288
00:09:23.470 --> 00:09:26.100
These have been munged
and messed

289
00:09:26.100 --> 00:09:27.510
around a bit to ensure--

290
00:09:27.510 --> 00:09:29.870
well, to do the best we
can to ensure safety.

291
00:09:29.870 --> 00:09:33.700
We remove a lot of malicious
codes that may cause security

292
00:09:33.700 --> 00:09:35.940
vulnerabilities and some other
fun stuff that we'll talk

293
00:09:35.940 --> 00:09:37.520
about later.

294
00:09:37.520 --> 00:09:39.170
You take this data that's
actually generated from the

295
00:09:39.170 --> 00:09:42.870
toolchain, and with a simple
HTML embed tag, you can

296
00:09:42.870 --> 00:09:44.810
actually get it running right
in your web page.

297
00:09:44.810 --> 00:09:46.380
So what you're actually seeing
on the screen there is a

298
00:09:46.380 --> 00:09:48.690
screenshot from a game
called From Dust.

299
00:09:48.690 --> 00:09:52.130
From Dust was actually an Xbox
360 title that was ported over

300
00:09:52.130 --> 00:09:54.390
to Native Client that we
unveiled earlier this year.

301
00:09:54.390 --> 00:09:57.000
Now, this is running the same
shaders, the same code.

302
00:09:57.000 --> 00:09:58.910
It's actually doing
quite amazing.

303
00:09:58.910 --> 00:10:00.272
I think I have this backwards.

304
00:10:00.272 --> 00:10:00.694
How about that?

305
00:10:00.694 --> 00:10:01.540
Is that better?

306
00:10:01.540 --> 00:10:03.030
NOEL ALLEN: You're going to
fiddle with this the whole

307
00:10:03.030 --> 00:10:03.325
presentation, aren't you?

308
00:10:03.325 --> 00:10:04.390
COLT MCANLIS: It's
annoying me.

309
00:10:04.390 --> 00:10:06.060
My head's too small and
my ears are too big.

310
00:10:06.060 --> 00:10:07.760
That's the problem.

311
00:10:07.760 --> 00:10:09.370
So let's talk a little
bit about the SDK.

312
00:10:09.370 --> 00:10:12.530
The SDK itself allows for cross
platform development on

313
00:10:12.530 --> 00:10:15.190
platforms for Linux,
Windows and Mac.

314
00:10:15.190 --> 00:10:17.360
And we do this through providing
a simple command

315
00:10:17.360 --> 00:10:18.710
line GCC compiler.

316
00:10:18.710 --> 00:10:20.880
So the compiler itself is just
simple command line.

317
00:10:20.880 --> 00:10:23.130
Everybody in here has probably
used GCC at one time in your

318
00:10:23.130 --> 00:10:24.270
programming life.

319
00:10:24.270 --> 00:10:27.395
We also provide a full set of
working code examples so that

320
00:10:27.395 --> 00:10:29.600
you can actually see how to
properly use Pepper and how to

321
00:10:29.600 --> 00:10:30.950
use Native Client and
best practices

322
00:10:30.950 --> 00:10:32.550
involved with that process.

323
00:10:32.550 --> 00:10:35.530
And then in addition to that, we
also provide debugging and

324
00:10:35.530 --> 00:10:37.110
profiling tools that
are currently an

325
00:10:37.110 --> 00:10:39.380
AlphaRev of our SDK.

326
00:10:39.380 --> 00:10:41.430
Now, this takes a little
bit to understand.

327
00:10:41.430 --> 00:10:44.310
So you need to know that when
we generate these Native

328
00:10:44.310 --> 00:10:46.810
Client executables, the NEXE
files, it's not your

329
00:10:46.810 --> 00:10:48.915
standard x86 code.

330
00:10:48.915 --> 00:10:50.590
We've got a lot of paperwork
that we're not going to talk

331
00:10:50.590 --> 00:10:53.150
about today so much.

332
00:10:53.150 --> 00:10:56.220
It actually isn't an exe that
you can just double click on

333
00:10:56.220 --> 00:10:57.360
your desktop and run.

334
00:10:57.360 --> 00:10:59.740
It's actually a modified
DWARF file.

335
00:10:59.740 --> 00:11:00.130
Right?

336
00:11:00.130 --> 00:11:01.470
NOEL ALLEN: Correct.

337
00:11:01.470 --> 00:11:01.940
DWARF and ELF.

338
00:11:01.940 --> 00:11:02.460
COLT MCANLIS: OK.

339
00:11:02.460 --> 00:11:03.010
Fantastic.

340
00:11:03.010 --> 00:11:05.480
Which means that debugging
systems work a little bit

341
00:11:05.480 --> 00:11:06.130
differently.

342
00:11:06.130 --> 00:11:08.670
You don't have a PDB file
full of symbols and

343
00:11:08.670 --> 00:11:09.400
all these other things.

344
00:11:09.400 --> 00:11:13.040
It requires some massaging.

345
00:11:13.040 --> 00:11:15.820
Now with these things in mind,
let's talk about actually

346
00:11:15.820 --> 00:11:17.970
porting, because we've only
got 47 minutes left.

347
00:11:17.970 --> 00:11:18.850
And my hat is funny.

348
00:11:18.850 --> 00:11:20.070
And I'm running on
reserve power.

349
00:11:20.070 --> 00:11:21.320
This isn't even plugged in.

350
00:11:21.320 --> 00:11:24.330

351
00:11:24.330 --> 00:11:27.000
If it was a perfect demo,
we wouldn't do it.

352
00:11:27.000 --> 00:11:28.730
So here's our plan
of attack today.

353
00:11:28.730 --> 00:11:30.222
First, what we're going to do
is we're actually going to

354
00:11:30.222 --> 00:11:32.120
build as a Pepper
plug-in first.

355
00:11:32.120 --> 00:11:34.890
Pepper's a fantastic API, but
we're going to actually ignore

356
00:11:34.890 --> 00:11:37.950
the Native Client part of the
equation and just migrate over

357
00:11:37.950 --> 00:11:41.580
our platform-specific APIs over
to the Pepper APIs first.

358
00:11:41.580 --> 00:11:44.430
And then as a last step, we'll
actually do the generation of

359
00:11:44.430 --> 00:11:45.840
the Native Client exe.

360
00:11:45.840 --> 00:11:50.170
This allows us to actually use
our plug-in system in an

361
00:11:50.170 --> 00:11:51.970
existing IDE of choice.

362
00:11:51.970 --> 00:11:53.910
So standard plug-in development
is pretty much

363
00:11:53.910 --> 00:11:55.900
exposed in every
IDE out there.

364
00:11:55.900 --> 00:11:56.650
It's a standard loop.

365
00:11:56.650 --> 00:11:58.970
You create a DLL or an SO.

366
00:11:58.970 --> 00:12:00.540
The external application
loads it up.

367
00:12:00.540 --> 00:12:02.170
You can set break points,
see memory, all

368
00:12:02.170 --> 00:12:03.280
this other fun stuff.

369
00:12:03.280 --> 00:12:05.290
Now to facilitate this, and
this is one of the biggest

370
00:12:05.290 --> 00:12:07.490
things that we learned in our
failures that I mentioned

371
00:12:07.490 --> 00:12:09.820
earlier in this project, was
that we really didn't have

372
00:12:09.820 --> 00:12:12.470
good integration into
existing IDEs at the

373
00:12:12.470 --> 00:12:13.680
level we wanted to.

374
00:12:13.680 --> 00:12:15.680
So today we're actually really
excited to announce that we're

375
00:12:15.680 --> 00:12:18.800
actually providing a Visual
Studio 2010 plug-in for Native

376
00:12:18.800 --> 00:12:19.920
Client and Pepper.

377
00:12:19.920 --> 00:12:21.430
And we'll actually
provide this--

378
00:12:21.430 --> 00:12:21.700
Please.

379
00:12:21.700 --> 00:12:22.830
Yes, applause.

380
00:12:22.830 --> 00:12:23.170
Yeah.

381
00:12:23.170 --> 00:12:25.130
That's cool.

382
00:12:25.130 --> 00:12:27.120
Add-ins are awesome.

383
00:12:27.120 --> 00:12:29.250
This will be available
in the Pepper 22 SDK.

384
00:12:29.250 --> 00:12:32.430
So if you guys go to GoNaCl.com,
grab the SDK

385
00:12:32.430 --> 00:12:33.610
chain, you'll actually
get a preview.

386
00:12:33.610 --> 00:12:35.890
Because we actually
have a few Peppers

387
00:12:35.890 --> 00:12:37.330
ahead of stable available.

388
00:12:37.330 --> 00:12:37.630
Right?

389
00:12:37.630 --> 00:12:38.700
Canary builds and
the other stuff.

390
00:12:38.700 --> 00:12:38.850
NOEL ALLEN: Yes.

391
00:12:38.850 --> 00:12:40.910
COLT MCANLIS: So this is
actually available, and you

392
00:12:40.910 --> 00:12:41.800
guys can totally take
a look at it.

393
00:12:41.800 --> 00:12:43.540
So we're really excited about
that, because it really helps

394
00:12:43.540 --> 00:12:44.710
with ease of use.

395
00:12:44.710 --> 00:12:48.770
Now, what chef Noel is going
to do today for us, can you

396
00:12:48.770 --> 00:12:51.220
walk us through some of the
things that the add-in does

397
00:12:51.220 --> 00:12:51.790
inside of Visual Studio?

398
00:12:51.790 --> 00:12:52.630
NOEL ALLEN: Sure.

399
00:12:52.630 --> 00:12:53.390
Absolutely.

400
00:12:53.390 --> 00:12:57.190
So I have already created some
different configurations.

401
00:12:57.190 --> 00:13:00.180
We can see a Native Client
configuration, a Pepper

402
00:13:00.180 --> 00:13:02.340
configuration, and the
original Windows 32

403
00:13:02.340 --> 00:13:03.760
configuration.

404
00:13:03.760 --> 00:13:07.105
So what the add-in is doing is
we can go over here and--

405
00:13:07.105 --> 00:13:13.880

406
00:13:13.880 --> 00:13:15.880
so the add-in drives
the compiler.

407
00:13:15.880 --> 00:13:17.880
Now for the Pepper
configuration, it's actually

408
00:13:17.880 --> 00:13:18.640
pretty straightforward.

409
00:13:18.640 --> 00:13:21.570
All we're actually going to
do is convert from an

410
00:13:21.570 --> 00:13:23.080
executable to a DLL.

411
00:13:23.080 --> 00:13:27.290
So Chrome's going to load this
and run it as a plug-in.

412
00:13:27.290 --> 00:13:28.420
Very little change.

413
00:13:28.420 --> 00:13:31.420
I'm just going to go ahead and
point my Include Directories

414
00:13:31.420 --> 00:13:33.310
to the Pepper SDK.

415
00:13:33.310 --> 00:13:37.690
I'm going to create a macro for
Pepper so that I know in

416
00:13:37.690 --> 00:13:41.260
my code which particular view
of the code I'm looking at.

417
00:13:41.260 --> 00:13:42.450
And that's pretty much it.

418
00:13:42.450 --> 00:13:43.170
I'm ready to go.

419
00:13:43.170 --> 00:13:43.720
COLT MCANLIS: OK.

420
00:13:43.720 --> 00:13:44.270
Fantastic.

421
00:13:44.270 --> 00:13:47.550
So you set up these properties,
so you create the

422
00:13:47.550 --> 00:13:48.880
platform, and then
you compile.

423
00:13:48.880 --> 00:13:49.620
And what happens here?

424
00:13:49.620 --> 00:13:50.180
NOEL ALLEN: Right.

425
00:13:50.180 --> 00:13:52.820
So now I'm going to switch to
the Pepper configuration, and

426
00:13:52.820 --> 00:13:54.180
I'm going to go ahead
and re-launch.

427
00:13:54.180 --> 00:13:57.360
Now, I did actually do one other
thing, which is for the

428
00:13:57.360 --> 00:14:02.850
sake of debugging, I set this
up to launch Chrome for me.

429
00:14:02.850 --> 00:14:03.470
COLT MCANLIS: Oh.

430
00:14:03.470 --> 00:14:04.840
Now, I see some other
flags in there.

431
00:14:04.840 --> 00:14:05.800
Can you walk us through what
exactly is going on?

432
00:14:05.800 --> 00:14:06.200
NOEL ALLEN: Sure.

433
00:14:06.200 --> 00:14:08.260
So there's a couple flags in
here that make things a little

434
00:14:08.260 --> 00:14:09.560
bit easier for you.

435
00:14:09.560 --> 00:14:12.980
So I am setting user data
dir to not pollute

436
00:14:12.980 --> 00:14:15.490
my normal user settings.

437
00:14:15.490 --> 00:14:19.270
I have Incognito to let Chrome
forget what I've done, so we

438
00:14:19.270 --> 00:14:21.720
don't actually get
caching effects.

439
00:14:21.720 --> 00:14:23.240
And then, register
Pepper plug-in.

440
00:14:23.240 --> 00:14:27.860
Here's the interesting one where
I am telling Chrome,

441
00:14:27.860 --> 00:14:32.490
please load this plug-in, and
then I want you to answer any

442
00:14:32.490 --> 00:14:35.790
request to the particular MIME
type I have described here,

443
00:14:35.790 --> 00:14:38.260
which in this case is
application xNaCl.

444
00:14:38.260 --> 00:14:39.010
COLT MCANLIS: Interesting.

445
00:14:39.010 --> 00:14:41.110
So to be very clear about this,
what happens is, any

446
00:14:41.110 --> 00:14:43.240
time Chrome actually encounters
the MIME type

447
00:14:43.240 --> 00:14:45.710
application NaCl, it'll actually
go load the Native

448
00:14:45.710 --> 00:14:48.200
Client exe and pass the
data over to it.

449
00:14:48.200 --> 00:14:51.310
What this command line option
allows us to do is override

450
00:14:51.310 --> 00:14:51.970
that process.

451
00:14:51.970 --> 00:14:55.320
And so instead of actually
finding MIME type NaCl and

452
00:14:55.320 --> 00:14:57.090
running NaCl, it's going to
run our plug-in instead.

453
00:14:57.090 --> 00:14:58.980
NOEL ALLEN: Exactly.

454
00:14:58.980 --> 00:15:01.860
So we can go ahead
and launch that.

455
00:15:01.860 --> 00:15:06.910

456
00:15:06.910 --> 00:15:10.240
And it helps if I start
the web server first.

457
00:15:10.240 --> 00:15:13.200
Always useful.

458
00:15:13.200 --> 00:15:13.920
All right.

459
00:15:13.920 --> 00:15:17.086
Now, it couldn't find
the plug-in.

460
00:15:17.086 --> 00:15:20.060
COLT MCANLIS: So why is it
saying that, though?

461
00:15:20.060 --> 00:15:23.940
NOEL ALLEN: Well, I am missing
the components that let Pepper

462
00:15:23.940 --> 00:15:25.210
talk to the plug-in.

463
00:15:25.210 --> 00:15:26.050
COLT MCANLIS: I see.

464
00:15:26.050 --> 00:15:27.160
So we had our Win32 codes.

465
00:15:27.160 --> 00:15:29.420
So even though we've compiled it
as a DLL, we haven't added

466
00:15:29.420 --> 00:15:31.670
the hooks, the API hooks,
for Pepper for

467
00:15:31.670 --> 00:15:32.340
Chrome to actually load.

468
00:15:32.340 --> 00:15:32.785
NOEL ALLEN: Exactly.

469
00:15:32.785 --> 00:15:33.940
COLT MCANLIS: So where
do we get those, and

470
00:15:33.940 --> 00:15:34.680
how do we get those?

471
00:15:34.680 --> 00:15:34.970
NOEL ALLEN: OK.

472
00:15:34.970 --> 00:15:38.450
Well, the easiest thing to do is
I am just going to sit here

473
00:15:38.450 --> 00:15:41.510
and go over to one of the
examples that we ship, and

474
00:15:41.510 --> 00:15:43.810
just copy and paste it in,
so that I have all

475
00:15:43.810 --> 00:15:44.640
that start-up code.

476
00:15:44.640 --> 00:15:45.590
COLT MCANLIS: I like
your style.

477
00:15:45.590 --> 00:15:46.430
What is that they say?

478
00:15:46.430 --> 00:15:49.182
That good programmers code and
great programmers reuse?

479
00:15:49.182 --> 00:15:50.330
I like it.

480
00:15:50.330 --> 00:15:55.110
NOEL ALLEN: So if we take this
Hello World example, And I'm

481
00:15:55.110 --> 00:16:00.680
going to select that, and paste
it here into the bottom,

482
00:16:00.680 --> 00:16:01.930
and then run again.

483
00:16:01.930 --> 00:16:05.610

484
00:16:05.610 --> 00:16:07.640
So now we can see the Hello
World demo that

485
00:16:07.640 --> 00:16:08.930
ships with the SDK.

486
00:16:08.930 --> 00:16:10.665
COLT MCANLIS: And then that's
running in our existing code?

487
00:16:10.665 --> 00:16:11.440
NOEL ALLEN: Correct.

488
00:16:11.440 --> 00:16:13.320
COLT MCANLIS: So, but where'd
the spinning cube go?

489
00:16:13.320 --> 00:16:14.650
NOEL ALLEN: Well, we haven't
called it yet.

490
00:16:14.650 --> 00:16:16.560
So we haven't actually called
any of the original

491
00:16:16.560 --> 00:16:17.565
code that we had.

492
00:16:17.565 --> 00:16:18.330
COLT MCANLIS: Can you?

493
00:16:18.330 --> 00:16:19.480
NOEL ALLEN: I can do
that real quick.

494
00:16:19.480 --> 00:16:19.690
COLT MCANLIS: OK.

495
00:16:19.690 --> 00:16:20.552
You do that.

496
00:16:20.552 --> 00:16:21.802
Awesome.

497
00:16:21.802 --> 00:16:23.926

498
00:16:23.926 --> 00:16:24.700
NOEL ALLEN: OK.

499
00:16:24.700 --> 00:16:27.830
So if I come up here
and just say--

500
00:16:27.830 --> 00:16:30.500

501
00:16:30.500 --> 00:16:32.050
COLT MCANLIS: Now, really quick
while you're scrolling

502
00:16:32.050 --> 00:16:33.920
up here, what are these
functions we're looking at?

503
00:16:33.920 --> 00:16:34.950
These are Pepper functions,
right?

504
00:16:34.950 --> 00:16:35.920
NOEL ALLEN: So these are
Pepper functions.

505
00:16:35.920 --> 00:16:39.450
So as I said, there's three
functions that we look at.

506
00:16:39.450 --> 00:16:42.560
We have a module initialization,
we have an API

507
00:16:42.560 --> 00:16:44.350
request, and we have a
shut down function.

508
00:16:44.350 --> 00:16:46.930

509
00:16:46.930 --> 00:16:49.740
One of the APIs that gets
requested is an

510
00:16:49.740 --> 00:16:50.740
API for your interface.

511
00:16:50.740 --> 00:16:53.600
So you're going to provide
functions that Chrome can call

512
00:16:53.600 --> 00:16:55.220
into to do things.

513
00:16:55.220 --> 00:16:58.890
And one of those is this Did
Create, which is very similar

514
00:16:58.890 --> 00:17:00.700
to the regular Main function.

515
00:17:00.700 --> 00:17:05.369
So from there I'm actually
going to call into the

516
00:17:05.369 --> 00:17:06.619
original WinMain.

517
00:17:06.619 --> 00:17:10.579

518
00:17:10.579 --> 00:17:13.110
And now we've got our
box, but no alert.

519
00:17:13.110 --> 00:17:13.990
COLT MCANLIS: Interesting.

520
00:17:13.990 --> 00:17:16.380
OK, so what we're seeing here
though is really cool, because

521
00:17:16.380 --> 00:17:19.660
we're actually seeing Win32 code
running side by side as

522
00:17:19.660 --> 00:17:22.150
launched from a plug-in
inside of Chrome.

523
00:17:22.150 --> 00:17:24.310
So now we can call this code,
because we're actually running

524
00:17:24.310 --> 00:17:25.170
on a Windows system.

525
00:17:25.170 --> 00:17:25.890
NOEL ALLEN: Exactly.

526
00:17:25.890 --> 00:17:27.210
COLT MCANLIS: OK.

527
00:17:27.210 --> 00:17:29.000
So the goal here is to actually
get that spinning

528
00:17:29.000 --> 00:17:29.960
cube running in the web page.

529
00:17:29.960 --> 00:17:31.310
So we've got all that
stuff set up.

530
00:17:31.310 --> 00:17:35.810
The next step for us is to
actually port over to Pepper.

531
00:17:35.810 --> 00:17:38.490
Now, when understanding the
Pepper API, it's important to

532
00:17:38.490 --> 00:17:42.030
understand how an application
communicates with a plug-in to

533
00:17:42.030 --> 00:17:43.340
kind of give a little
bit more visibility

534
00:17:43.340 --> 00:17:44.350
into what it's doing.

535
00:17:44.350 --> 00:17:46.290
So let's say we've got our
Chrome, and let's say we've

536
00:17:46.290 --> 00:17:47.180
got our plug-in.

537
00:17:47.180 --> 00:17:49.430
Chrome, of course, will call
init, like it did.

538
00:17:49.430 --> 00:17:51.350
And then the plug-in will
go do some processing.

539
00:17:51.350 --> 00:17:53.880
Now, in order for the plug-in
to get a sort of persistent

540
00:17:53.880 --> 00:17:54.560
heartbeat--

541
00:17:54.560 --> 00:17:55.780
right, because this
is a plug-in.

542
00:17:55.780 --> 00:17:58.250
We can't just allow yourself
to go call code into it,

543
00:17:58.250 --> 00:18:00.290
otherwise you'll never
receive execution

544
00:18:00.290 --> 00:18:01.980
control back into Chrome.

545
00:18:01.980 --> 00:18:04.840
So once the plug-in's done, it
can actually tell Chrome, hey,

546
00:18:04.840 --> 00:18:08.170
can you call me again in
10 minutes, or whenever

547
00:18:08.170 --> 00:18:09.320
you get some time.

548
00:18:09.320 --> 00:18:11.460
And so what'll happen is
the plug-in, and Pepper

549
00:18:11.460 --> 00:18:14.800
specifically, provides APIs
that allow you to push a

550
00:18:14.800 --> 00:18:16.560
callback up into Chrome.

551
00:18:16.560 --> 00:18:19.280
And then Chrome can run off, do
some processing, render a

552
00:18:19.280 --> 00:18:24.910
web page, check your local
listings for cars and salty

553
00:18:24.910 --> 00:18:26.090
pork products.

554
00:18:26.090 --> 00:18:28.310
And then when it gets around
to it, it can actually call

555
00:18:28.310 --> 00:18:30.570
that callback, giving execution

556
00:18:30.570 --> 00:18:31.790
control back your plug-in.

557
00:18:31.790 --> 00:18:33.390
And then of course, your plug-in
does some processing

558
00:18:33.390 --> 00:18:34.440
and the cycle repeats.

559
00:18:34.440 --> 00:18:37.280
And this is as close as you
can get actually having a

560
00:18:37.280 --> 00:18:39.910
while loop inside of Pepper
or inside of a plug-in.

561
00:18:39.910 --> 00:18:44.020
We allow you to get this
processing over time.

562
00:18:44.020 --> 00:18:46.040
Now, let's talk about a couple
road blocks you're going to

563
00:18:46.040 --> 00:18:47.260
run into when working
with Pepper.

564
00:18:47.260 --> 00:18:50.430
First off, all of the APIs for
Pepper are non-blocking.

565
00:18:50.430 --> 00:18:52.460
And you can see why
when looking at it

566
00:18:52.460 --> 00:18:53.970
as a plug-in API.

567
00:18:53.970 --> 00:18:57.660
If one of these APIs were
blocking, what would occur is

568
00:18:57.660 --> 00:19:00.850
that you can effectively stall
out all of Chrome, because

569
00:19:00.850 --> 00:19:03.990
execution control goes into
the plug-in and then they,

570
00:19:03.990 --> 00:19:06.680
Chrome, won't get any more time
slices to give to v8 or

571
00:19:06.680 --> 00:19:07.280
anything else.

572
00:19:07.280 --> 00:19:08.810
And so you get that nice,
little aw snap

573
00:19:08.810 --> 00:19:10.430
little sad face dude.

574
00:19:10.430 --> 00:19:11.540
My heart always breaks
when I see him.

575
00:19:11.540 --> 00:19:13.210
I'm like, aw, he's so sad.

576
00:19:13.210 --> 00:19:15.650
Don't worry, the internet
is still there.

577
00:19:15.650 --> 00:19:18.670
Anyhow, second off is that
Pepper APIs can only be called

578
00:19:18.670 --> 00:19:19.360
from the main thread.

579
00:19:19.360 --> 00:19:22.110
This is another restriction
that we enforce to ensure

580
00:19:22.110 --> 00:19:24.880
stability and security
over time.

581
00:19:24.880 --> 00:19:27.470
And then finally, that there's
really no main loop in Pepper.

582
00:19:27.470 --> 00:19:30.240
As you can see, based upon the
APIs, that you can't actually

583
00:19:30.240 --> 00:19:32.590
just create a while loop
and sit there and spin.

584
00:19:32.590 --> 00:19:34.820
Now, I want to point out that
this is sort of temporary

585
00:19:34.820 --> 00:19:37.550
restrictions as of Pepper 21.

586
00:19:37.550 --> 00:19:40.520
The team is working very, very
hard at removing these

587
00:19:40.520 --> 00:19:42.630
restrictions, including the
ability to call Pepper from

588
00:19:42.630 --> 00:19:44.340
any thread in your environment,
which would be a

589
00:19:44.340 --> 00:19:48.130
huge step forward for those of
you who've done development.

590
00:19:48.130 --> 00:19:49.980
So let's talk about the call
loop a little bit more, and

591
00:19:49.980 --> 00:19:52.060
why exactly we didn't
see the plug-in, but

592
00:19:52.060 --> 00:19:53.180
we did see the cube.

593
00:19:53.180 --> 00:19:55.960
So what exactly happened was
this, Chrome called init and

594
00:19:55.960 --> 00:19:57.950
gave execution control
to the plug-in.

595
00:19:57.950 --> 00:19:59.990
Well, the plug-in at that point
actually called into

596
00:19:59.990 --> 00:20:01.940
Windows and said, hey,
let's go run this.

597
00:20:01.940 --> 00:20:05.620
Now, Windows being Windows code
effectively sucked up all

598
00:20:05.620 --> 00:20:06.690
of the processing time.

599
00:20:06.690 --> 00:20:09.790
And we actually didn't ever give
execution control back

600
00:20:09.790 --> 00:20:10.950
into Chrome.

601
00:20:10.950 --> 00:20:13.090
So WinMain has a little while
loop in there where it

602
00:20:13.090 --> 00:20:15.310
processes events and message
pumps and everything else that

603
00:20:15.310 --> 00:20:16.410
it passes to the window.

604
00:20:16.410 --> 00:20:18.500
And we were never actually
able to give

605
00:20:18.500 --> 00:20:19.470
control back into Chrome.

606
00:20:19.470 --> 00:20:20.900
So we starved it out.

607
00:20:20.900 --> 00:20:24.200
But you guys didn't see the aw
snap sad face, because we

608
00:20:24.200 --> 00:20:26.360
didn't hit the time out
period for the demo.

609
00:20:26.360 --> 00:20:28.360
Our floppy hats kept
us from doing that.

610
00:20:28.360 --> 00:20:31.500
So in order to fix this though,
Chef Noel, Chef

611
00:20:31.500 --> 00:20:35.535
Noelington III, can you show us
how you address this issue?

612
00:20:35.535 --> 00:20:36.150
NOEL ALLEN: OK.

613
00:20:36.150 --> 00:20:38.670
So here are a couple of changes
that I'm making.

614
00:20:38.670 --> 00:20:42.140
So we want to break that main
loop into two separate pieces,

615
00:20:42.140 --> 00:20:45.440
the initialization piece
and the actual loop.

616
00:20:45.440 --> 00:20:49.620
So I am going to ifdef out the
loop and instead put it in a

617
00:20:49.620 --> 00:20:51.410
new function.

618
00:20:51.410 --> 00:20:54.580
And I'm going to have that
function request to get more

619
00:20:54.580 --> 00:20:58.740
execution time by asking Pepper,
please call on the

620
00:20:58.740 --> 00:21:01.350
main thread this function
again at a later time.

621
00:21:01.350 --> 00:21:03.580
COLT MCANLIS: And so this is the
function that effectively

622
00:21:03.580 --> 00:21:05.330
pushes the function pointer
back into Chrome.

623
00:21:05.330 --> 00:21:06.176
NOEL ALLEN: Correct.

624
00:21:06.176 --> 00:21:07.610
COLT MCANLIS: Excellent.

625
00:21:07.610 --> 00:21:09.810
So then, what's this
look like?

626
00:21:09.810 --> 00:21:11.267
NOEL ALLEN: Well, let's
fire that up.

627
00:21:11.267 --> 00:21:14.249

628
00:21:14.249 --> 00:21:16.750
COLT MCANLIS: So we get the pop
up and we get the cube.

629
00:21:16.750 --> 00:21:18.760
So the execution happened
side by side.

630
00:21:18.760 --> 00:21:19.670
Fantastic.

631
00:21:19.670 --> 00:21:22.090
So now that that's handled and
we know that we're actually

632
00:21:22.090 --> 00:21:24.540
not stalling out Chrome and we
have execution control being

633
00:21:24.540 --> 00:21:26.650
handed back to the main
application, let's actually

634
00:21:26.650 --> 00:21:28.180
talk about loading files.

635
00:21:28.180 --> 00:21:31.140
Now, Native Client is an
internet technology, which

636
00:21:31.140 --> 00:21:33.490
means that it's served from a
web server somewhere and the

637
00:21:33.490 --> 00:21:35.820
client is going to make a
request to pull things down.

638
00:21:35.820 --> 00:21:38.275
Now, any time you have
communication between client

639
00:21:38.275 --> 00:21:40.180
and server with a web browser--
we'll talk about

640
00:21:40.180 --> 00:21:43.010
Chrome just to limit our scope
of discussion here--

641
00:21:43.010 --> 00:21:45.420
when a page load request
occurs, Chrome, on your

642
00:21:45.420 --> 00:21:48.740
behalf, will go ahead and fetch
specific files and store

643
00:21:48.740 --> 00:21:49.780
them in Chrome's cache.

644
00:21:49.780 --> 00:21:53.140
Which means it'll grab HTML
files, it'll grab NEXE files

645
00:21:53.140 --> 00:21:55.560
and the Native Client Manifest
file, the NMF file.

646
00:21:55.560 --> 00:21:56.980
Now, this'll be stored
in the cache on your

647
00:21:56.980 --> 00:21:58.850
behalf, which is fantastic.

648
00:21:58.850 --> 00:22:01.500
Because if you have executable
code sitting on a server

649
00:22:01.500 --> 00:22:03.060
somewhere, it's probably
between the

650
00:22:03.060 --> 00:22:05.200
range of 5 to 13 megabytes.

651
00:22:05.200 --> 00:22:07.000
And you don't want the user to
have to keep grabbing that

652
00:22:07.000 --> 00:22:09.270
code and pulling it down every
time they hit refresh.

653
00:22:09.270 --> 00:22:12.610
Now, the bad part about this,
though, is that Chrome won't

654
00:22:12.610 --> 00:22:14.730
go fetch all of those other
files which are usually

655
00:22:14.730 --> 00:22:16.120
required by your application.

656
00:22:16.120 --> 00:22:18.340
You've usually got a bunch
of binary data.

657
00:22:18.340 --> 00:22:21.780
If you're a game developer,
you've got textures, assets,

658
00:22:21.780 --> 00:22:24.870
map data, XML information, all
this other sort of stuff.

659
00:22:24.870 --> 00:22:26.340
Now, to grab that data--

660
00:22:26.340 --> 00:22:28.290
that's specifically what we're
going to focus on today--

661
00:22:28.290 --> 00:22:31.460
Pepper provides an API
called GetURL.

662
00:22:31.460 --> 00:22:36.140
GetURL, again being an internet
technology, says,

663
00:22:36.140 --> 00:22:38.800
hey, here's a URL, go fetch
me the bits of this.

664
00:22:38.800 --> 00:22:40.480
So in JavaScript, this would
be equivalent to

665
00:22:40.480 --> 00:22:42.950
an XHR, XHTTP request.

666
00:22:42.950 --> 00:22:44.740
So everyone in here is
a net developer.

667
00:22:44.740 --> 00:22:46.370
You should grock that.

668
00:22:46.370 --> 00:22:47.240
I see one head nodding.

669
00:22:47.240 --> 00:22:49.250
I like your style.

670
00:22:49.250 --> 00:22:51.250
Can I nod with this and
that actually work?

671
00:22:51.250 --> 00:22:51.980
Maybe.

672
00:22:51.980 --> 00:22:53.110
Everyone on YouTube
just jumped.

673
00:22:53.110 --> 00:22:54.850
Cool.

674
00:22:54.850 --> 00:22:56.920
In addition to that, because
you can actually pull down

675
00:22:56.920 --> 00:22:59.890
this data, again, that's not
cached on your behalf.

676
00:22:59.890 --> 00:23:01.320
So you actually have to have
an answer for that.

677
00:23:01.320 --> 00:23:03.150
Because, again, if the user
reloads your page, you're

678
00:23:03.150 --> 00:23:05.290
going to have to go grab another
40 megs worth of data

679
00:23:05.290 --> 00:23:06.580
every time they do that.

680
00:23:06.580 --> 00:23:08.810
To address this, Pepper actually
provides another API

681
00:23:08.810 --> 00:23:10.210
called the FileStore API.

682
00:23:10.210 --> 00:23:12.300
So you can actually grab your
data and write it to the

683
00:23:12.300 --> 00:23:14.770
Persistent Sandbox file
storage on disk.

684
00:23:14.770 --> 00:23:18.370
This way, when the user closes
Chrome, reloads the page, goes

685
00:23:18.370 --> 00:23:22.150
on vacation for 15 days, that
data will still stay on disk

686
00:23:22.150 --> 00:23:23.900
that you can pick up
and grab later.

687
00:23:23.900 --> 00:23:26.670
So this is a great place
to put save state, user

688
00:23:26.670 --> 00:23:29.230
preferences that you may not
want to sync to the cloud, or

689
00:23:29.230 --> 00:23:33.040
just, again, the 80 megs of
binary data that's needed for

690
00:23:33.040 --> 00:23:34.860
your application.

691
00:23:34.860 --> 00:23:38.100
Now, one thing we talked about
earlier was that the Pepper

692
00:23:38.100 --> 00:23:40.100
APIs are non-blocking.

693
00:23:40.100 --> 00:23:43.980
So for all of you who have used
fread, we can't use that

694
00:23:43.980 --> 00:23:45.950
in Native Client, because that
would actually stall the

695
00:23:45.950 --> 00:23:48.310
system, wouldn't relinquish
control back to Chrome.

696
00:23:48.310 --> 00:23:49.880
So we actually don't allow
you to use that command.

697
00:23:49.880 --> 00:23:51.650
You have to use GetURL.

698
00:23:51.650 --> 00:23:53.840
And any of you who have done
asynchronous file loading know

699
00:23:53.840 --> 00:23:54.990
what this looks like.

700
00:23:54.990 --> 00:23:56.560
Effectively, we have
an init phase.

701
00:23:56.560 --> 00:24:01.260
The init phase will kick off an
open URL command to Chrome

702
00:24:01.260 --> 00:24:03.530
and say, hey, go
load some data.

703
00:24:03.530 --> 00:24:06.490
Then our plug-in will actually
go into a loader loop phase.

704
00:24:06.490 --> 00:24:07.230
What we're going to do is we're

705
00:24:07.230 --> 00:24:08.390
effectively going to spin--

706
00:24:08.390 --> 00:24:10.095
well, we can't exactly spin, but
we're going to go through

707
00:24:10.095 --> 00:24:13.820
a process of allowing Chrome to
do call on main thread and

708
00:24:13.820 --> 00:24:16.080
allowing the plug-in to
relinquish control, gain

709
00:24:16.080 --> 00:24:18.830
control, et cetera, et cetera,
until Chrome actually tells us

710
00:24:18.830 --> 00:24:20.540
the file has actually
been opened.

711
00:24:20.540 --> 00:24:23.270
Chrome will signal to us and
give us a specific call.

712
00:24:23.270 --> 00:24:25.490
Once we've received the file
open command, we then can

713
00:24:25.490 --> 00:24:27.690
issue a read bytes and say, hey,
you've opened the file.

714
00:24:27.690 --> 00:24:29.340
Please give me some data.

715
00:24:29.340 --> 00:24:31.320
And then we can continue this
loop until the data's actually

716
00:24:31.320 --> 00:24:31.980
been fetched.

717
00:24:31.980 --> 00:24:33.740
And this is the standard loader
loop that we're going

718
00:24:33.740 --> 00:24:34.700
to work through here.

719
00:24:34.700 --> 00:24:37.650
Once the data's been fetched or
pre-loaded everything, you

720
00:24:37.650 --> 00:24:39.540
can then move on to your actual
render loop and start

721
00:24:39.540 --> 00:24:41.650
drawing the cube
on the screen.

722
00:24:41.650 --> 00:24:44.870
So you haven't seen that
one yet, have you?

723
00:24:44.870 --> 00:24:46.050
NOEL ALLEN: You know I'm
allergic to fish.

724
00:24:46.050 --> 00:24:47.040
COLT MCANLIS: Really?

725
00:24:47.040 --> 00:24:47.960
That makes it even awesomer.

726
00:24:47.960 --> 00:24:49.050
NOEL ALLEN: I'm going to itch.

727
00:24:49.050 --> 00:24:53.620
COLT MCANLIS: So by the way,
don't Google man hugging fish.

728
00:24:53.620 --> 00:24:56.400
Different sort of results
that you get there.

729
00:24:56.400 --> 00:25:02.680
Anyhow, your royal majesty
Noelington Chefton III, can

730
00:25:02.680 --> 00:25:06.050
you please walk us through what
this FileIO asynchronous

731
00:25:06.050 --> 00:25:07.120
stuff looks like in our demo.

732
00:25:07.120 --> 00:25:09.790
NOEL ALLEN: Sure.

733
00:25:09.790 --> 00:25:16.700
So what we're going to do is
we are going to request for

734
00:25:16.700 --> 00:25:18.960
these assets to get loaded
in the background.

735
00:25:18.960 --> 00:25:25.020
And we're going to do that by
first issuing an Open, as you

736
00:25:25.020 --> 00:25:30.160
described, which is basically
a Get request to the asset.

737
00:25:30.160 --> 00:25:33.690
Once that open completes, it's
going to call us back.

738
00:25:33.690 --> 00:25:35.870
And then in that callback
function, we're going to

739
00:25:35.870 --> 00:25:38.580
record the size of the object
that we're getting, we're

740
00:25:38.580 --> 00:25:41.050
going to allocate memory for
it, and then we're going to

741
00:25:41.050 --> 00:25:42.910
start reading bites.

742
00:25:42.910 --> 00:25:44.490
And again, this happens
as a callback.

743
00:25:44.490 --> 00:25:47.920
So every time we get some bites
back, we're then going

744
00:25:47.920 --> 00:25:52.770
to call this other function,
which is going to store it in

745
00:25:52.770 --> 00:25:55.660
that block of memory
that I allocated.

746
00:25:55.660 --> 00:25:58.340
And eventually, when I get
enough of it, I'm going to go

747
00:25:58.340 --> 00:26:00.300
ahead and give myself a
call back to let me

748
00:26:00.300 --> 00:26:02.410
know that it's there.

749
00:26:02.410 --> 00:26:05.200
And when it's there, I'm simply
going to increment a

750
00:26:05.200 --> 00:26:07.650
global counter that says, hey,
I got another asset.

751
00:26:07.650 --> 00:26:10.400
COLT MCANLIS: Now, to be very
clear, we know that all of you

752
00:26:10.400 --> 00:26:12.630
have very sophisticated code
bases, and asynchronous file

753
00:26:12.630 --> 00:26:15.340
loading is probably part of your
general platform library.

754
00:26:15.340 --> 00:26:18.310
We are not at all advocating
this as best practices for

755
00:26:18.310 --> 00:26:19.390
loading files on the internet.

756
00:26:19.390 --> 00:26:22.150
Please write a good asset
manager with mutexes and

757
00:26:22.150 --> 00:26:23.540
callbacks and everything else.

758
00:26:23.540 --> 00:26:24.410
Don't just use a counter.

759
00:26:24.410 --> 00:26:26.290
That's really just a bad idea.

760
00:26:26.290 --> 00:26:26.420
Sorry.

761
00:26:26.420 --> 00:26:29.160
I had to give the disclaimer,
otherwise it'll show up like,

762
00:26:29.160 --> 00:26:31.380
Google says you should just use
a counter to load all of

763
00:26:31.380 --> 00:26:32.445
your files with Native Client.

764
00:26:32.445 --> 00:26:32.940
NOEL ALLEN: Yes.

765
00:26:32.940 --> 00:26:37.650
Well the ugly counter hack
is, in fact, right here.

766
00:26:37.650 --> 00:26:39.480
We're going to call the
initialization programs.

767
00:26:39.480 --> 00:26:41.600
I've changed this main loop.

768
00:26:41.600 --> 00:26:44.010
So we do the initialization.

769
00:26:44.010 --> 00:26:46.870
And then once we actually
discover three assets, then

770
00:26:46.870 --> 00:26:48.720
we're going to switch
to rendering.

771
00:26:48.720 --> 00:26:52.120
But in either case, we're just
going to go back and ask for

772
00:26:52.120 --> 00:26:53.640
more processing time
every time we go

773
00:26:53.640 --> 00:26:54.830
through the loop as normal.

774
00:26:54.830 --> 00:26:56.470
COLT MCANLIS: So effectively,
if we haven't loaded it yet,

775
00:26:56.470 --> 00:26:58.540
we still submit our call on
main thread so we can get

776
00:26:58.540 --> 00:27:00.770
processing in the future to
determine if it's all loaded?

777
00:27:00.770 --> 00:27:01.100
NOEL ALLEN: Correct.

778
00:27:01.100 --> 00:27:03.030
COLT MCANLIS: And then once the
things are loaded, we go

779
00:27:03.030 --> 00:27:04.670
to our render loop
at that point.

780
00:27:04.670 --> 00:27:04.930
NOEL ALLEN: Exactly.

781
00:27:04.930 --> 00:27:06.830
COLT MCANLIS: And so
this has changed.

782
00:27:06.830 --> 00:27:08.080
Let's see this live.

783
00:27:08.080 --> 00:27:11.936

784
00:27:11.936 --> 00:27:12.740
NOEL ALLEN: OK.

785
00:27:12.740 --> 00:27:14.040
So it looks much the same.

786
00:27:14.040 --> 00:27:18.360
But if we go over here and look
at the web server, you

787
00:27:18.360 --> 00:27:23.045
can see that originally
we were getting--

788
00:27:23.045 --> 00:27:24.290
hold on.

789
00:27:24.290 --> 00:27:25.540
Ran the wrong file.

790
00:27:25.540 --> 00:27:28.206

791
00:27:28.206 --> 00:27:29.190
COLT MCANLIS: Stop it.

792
00:27:29.190 --> 00:27:29.740
Stop it all.

793
00:27:29.740 --> 00:27:30.015
Hit buttons.

794
00:27:30.015 --> 00:27:31.050
NOEL ALLEN: Please stop.

795
00:27:31.050 --> 00:27:33.510
COLT MCANLIS: Click more.

796
00:27:33.510 --> 00:27:34.140
Panic click.

797
00:27:34.140 --> 00:27:35.100
Panic click.

798
00:27:35.100 --> 00:27:36.290
Take evasive action.

799
00:27:36.290 --> 00:27:37.113
Scatter.

800
00:27:37.113 --> 00:27:38.560
NOEL ALLEN: You're not
being helpful.

801
00:27:38.560 --> 00:27:39.290
COLT MCANLIS: I know.

802
00:27:39.290 --> 00:27:40.060
NOEL ALLEN: I want you to know,

803
00:27:40.060 --> 00:27:41.980
you're not being helpful.

804
00:27:41.980 --> 00:27:46.640
So as we can see here, we now
actually see the requests for

805
00:27:46.640 --> 00:27:49.010
those assets coming into
the web server.

806
00:27:49.010 --> 00:27:51.640
So we have successfully moved
over to serving the

807
00:27:51.640 --> 00:27:52.410
data from the web.

808
00:27:52.410 --> 00:27:53.110
COLT MCANLIS: Awesome.

809
00:27:53.110 --> 00:27:55.560
So as a Pepper plug-in, we were
actually able to just use

810
00:27:55.560 --> 00:27:57.210
fread and actually
load the data.

811
00:27:57.210 --> 00:27:59.030
But as part of the Pepper API,
you can see that we're

812
00:27:59.030 --> 00:28:02.270
fetching it right
from the server.

813
00:28:02.270 --> 00:28:04.180
You need to nod with
authority.

814
00:28:04.180 --> 00:28:05.615
NOEL ALLEN: Is my hat
not correctly--

815
00:28:05.615 --> 00:28:07.230
COLT MCANLIS: Well, you have
hair, and so it keeps it from

816
00:28:07.230 --> 00:28:07.785
sliding around.

817
00:28:07.785 --> 00:28:11.480
That my problem, is
the balding thing.

818
00:28:11.480 --> 00:28:13.290
So once we've got a rendering
with our simple example, the

819
00:28:13.290 --> 00:28:16.080
next step is actually to get us
porting from OpenGL, which

820
00:28:16.080 --> 00:28:19.560
is desktop GL, to GLES2, which
is the API that we provide in

821
00:28:19.560 --> 00:28:22.810
Native Client that allows you to
do fancy rendering of cube

822
00:28:22.810 --> 00:28:24.450
with arrow texture.

823
00:28:24.450 --> 00:28:26.020
I really think we should have
done the other demo.

824
00:28:26.020 --> 00:28:27.420
You should have fixed stuff
instead of playing with your

825
00:28:27.420 --> 00:28:28.440
new hardware.

826
00:28:28.440 --> 00:28:30.320
So what we're going to do today
is we're not going to

827
00:28:30.320 --> 00:28:33.470
talk about the actual porting
process of GL to GLES.

828
00:28:33.470 --> 00:28:36.350
There's a lot of documentation
out there on how to actually

829
00:28:36.350 --> 00:28:37.350
do this process.

830
00:28:37.350 --> 00:28:41.090
GLES2.0 is very dominant on
mobile devices right now.

831
00:28:41.090 --> 00:28:42.530
And if you just Google
for-- don't Google

832
00:28:42.530 --> 00:28:43.500
for man hugs fish.

833
00:28:43.500 --> 00:28:46.890
Instead, Google for desktop GL2,
GLES2, you'll find much

834
00:28:46.890 --> 00:28:48.980
more useful information
in that process.

835
00:28:48.980 --> 00:28:50.990
We are going to note a couple
things that are different

836
00:28:50.990 --> 00:28:51.610
between the two.

837
00:28:51.610 --> 00:28:53.150
Just so if you've never
actually dealt with

838
00:28:53.150 --> 00:28:55.770
OpenGLES2.0, you're aware of
some of the things you're

839
00:28:55.770 --> 00:28:57.510
going to run into
moving forward.

840
00:28:57.510 --> 00:28:59.230
First off, they are not
the same thing.

841
00:28:59.230 --> 00:29:02.160
The predominant one is that
GLES2 could be considered a

842
00:29:02.160 --> 00:29:03.480
subset of GL.

843
00:29:03.480 --> 00:29:08.040
The most shocking change there
is that GLES2.0 has no fixed

844
00:29:08.040 --> 00:29:08.960
function of support.

845
00:29:08.960 --> 00:29:12.310
So in order to draw a polygon or
set some state or even get

846
00:29:12.310 --> 00:29:15.080
a texture on screen, you have to
provide a vertex shader and

847
00:29:15.080 --> 00:29:16.070
a pixel shader.

848
00:29:16.070 --> 00:29:17.470
If you've never written a
vertex shader or a pixel

849
00:29:17.470 --> 00:29:18.460
shader, don't worry.

850
00:29:18.460 --> 00:29:19.680
The internet can help you.

851
00:29:19.680 --> 00:29:21.610
Which I find I need on
my business card.

852
00:29:21.610 --> 00:29:21.980
Don't worry.

853
00:29:21.980 --> 00:29:24.250
The internet can help you.

854
00:29:24.250 --> 00:29:26.300
In addition to that, there's
a different shader syntax.

855
00:29:26.300 --> 00:29:28.080
When you actually do write your
shader for the system,

856
00:29:28.080 --> 00:29:31.310
because standard GL does support
shaders, the syntax

857
00:29:31.310 --> 00:29:32.370
itself is different.

858
00:29:32.370 --> 00:29:36.730
So you have to set different
precision values for your

859
00:29:36.730 --> 00:29:39.550
pixel shaders, as well as some
other nuances with how you

860
00:29:39.550 --> 00:29:43.060
handle skinning and constant
register access.

861
00:29:43.060 --> 00:29:45.540
And probably one of the
interesting things is because

862
00:29:45.540 --> 00:29:49.280
GLES2.0 is actually a subset of
GL, some things that you'd

863
00:29:49.280 --> 00:29:52.360
normally have to go to GL and
fetch extensions for you no

864
00:29:52.360 --> 00:29:53.340
longer have to.

865
00:29:53.340 --> 00:29:56.430
So with standard desktop GL, you
would have to go grab an

866
00:29:56.430 --> 00:29:59.610
extension to actually do
multiple render targets or to

867
00:29:59.610 --> 00:30:02.220
do deferred rendering or some
other interesting things.

868
00:30:02.220 --> 00:30:04.710
With GLES2, a lot of that
stuff is just provided

869
00:30:04.710 --> 00:30:07.160
natively, which is fantastic.

870
00:30:07.160 --> 00:30:10.070
There is one API we're going to
talk about today, though.

871
00:30:10.070 --> 00:30:13.060
And this is really the only
thing that's Pepper specific

872
00:30:13.060 --> 00:30:16.100
in the translation
from GL to GLES.

873
00:30:16.100 --> 00:30:18.670
And that is a function
called SwapBuffers.

874
00:30:18.670 --> 00:30:20.900
So what happens is, when you're
doing your render loop

875
00:30:20.900 --> 00:30:23.410
you're going to render some
polygons, you're going to set

876
00:30:23.410 --> 00:30:26.460
some textures, blow up some
aliens, do really cool stuff.

877
00:30:26.460 --> 00:30:27.550
From there, you're actually
going to call

878
00:30:27.550 --> 00:30:28.980
the SwapBuffers API.

879
00:30:28.980 --> 00:30:31.730
Now typically, what SwapBuffers
will do with the

880
00:30:31.730 --> 00:30:35.370
GL API is it'll actually trigger
off a command to the

881
00:30:35.370 --> 00:30:39.820
device driver and to the GPU to
swap the front screen with

882
00:30:39.820 --> 00:30:40.500
the back screen.

883
00:30:40.500 --> 00:30:42.920
So when you actually do your
rendering, all of the commands

884
00:30:42.920 --> 00:30:45.640
are actually compositing to a
buffer that's not currently

885
00:30:45.640 --> 00:30:46.950
displayed to the user.

886
00:30:46.950 --> 00:30:49.410
And the swap screen command
tells it to say, hey, swap it

887
00:30:49.410 --> 00:30:51.650
so the user can see the work
that you've all done.

888
00:30:51.650 --> 00:30:55.300
The SwapBuffers command provided
with Pepper, part of

889
00:30:55.300 --> 00:31:00.150
our header suite, actually
contains a function that

890
00:31:00.150 --> 00:31:02.220
allows you to actually kick
off your callback.

891
00:31:02.220 --> 00:31:04.020
So typically, like we said
before, you're going to need

892
00:31:04.020 --> 00:31:07.160
to use a call on main thread so
that sometime in the future

893
00:31:07.160 --> 00:31:09.650
you'll get called again.

894
00:31:09.650 --> 00:31:12.050
The SwapBuffers API sort of
encapsulates these two

895
00:31:12.050 --> 00:31:13.720
concepts into a single call.

896
00:31:13.720 --> 00:31:16.100
So you can actually kick off
your SwapBuffer call as well

897
00:31:16.100 --> 00:31:18.950
as push your function pointer
back into Chrome.

898
00:31:18.950 --> 00:31:20.840
Now, if you're doing rendering,
you should consider

899
00:31:20.840 --> 00:31:22.450
this the end of your
Pepper frame.

900
00:31:22.450 --> 00:31:24.520
Because if you've called
SwapBuffers it's time to

901
00:31:24.520 --> 00:31:26.420
relinquish control
off to Chrome.

902
00:31:26.420 --> 00:31:28.650
Chrome's going to do some cool
stuff, fix the internet, make

903
00:31:28.650 --> 00:31:31.020
everything amazing, and
do it really fast.

904
00:31:31.020 --> 00:31:33.710
And then eventually it'll come
back and call your function,

905
00:31:33.710 --> 00:31:34.840
because you've passed it off.

906
00:31:34.840 --> 00:31:36.260
And that's your start
of your frame again.

907
00:31:36.260 --> 00:31:38.270
So this is really the
only difference.

908
00:31:38.270 --> 00:31:41.100
Everything else is a standard
GL to GLES port.

909
00:31:41.100 --> 00:31:43.680
This is the one thing you
need to be aware of.

910
00:31:43.680 --> 00:31:47.900
So we're not talking
about GL to GLES.

911
00:31:47.900 --> 00:31:50.270
So this is the chopped onions
part of the talk.

912
00:31:50.270 --> 00:31:51.890
We're not going to walk you
through that change.

913
00:31:51.890 --> 00:31:53.080
We've already got it live.

914
00:31:53.080 --> 00:31:53.965
Can you show us what
that looks like?

915
00:31:53.965 --> 00:31:56.240
NOEL ALLEN: Sure thing.

916
00:31:56.240 --> 00:31:59.600
So here is the change that we
discussed, the SwapBuffer.

917
00:31:59.600 --> 00:32:02.350
And I am going to go
ahead and run this.

918
00:32:02.350 --> 00:32:09.070

919
00:32:09.070 --> 00:32:10.110
COLT MCANLIS: Very cool.

920
00:32:10.110 --> 00:32:11.790
So we're actually running
in the web page.

921
00:32:11.790 --> 00:32:14.360
NOEL ALLEN: We now have our
cube in the web page.

922
00:32:14.360 --> 00:32:15.720
COLT MCANLIS: Very cool.

923
00:32:15.720 --> 00:32:16.170
I like that.

924
00:32:16.170 --> 00:32:17.590
So now, quick question here.

925
00:32:17.590 --> 00:32:21.010
If we actually are creating a
Pepper plug-in, and we can

926
00:32:21.010 --> 00:32:23.840
actually get it to run in the
web page like this and do full

927
00:32:23.840 --> 00:32:26.900
graphics and high precision
timing and everything, why are

928
00:32:26.900 --> 00:32:28.320
we even messing with NaCl?

929
00:32:28.320 --> 00:32:30.150
Why don't we just ship
a Pepper plug-in

930
00:32:30.150 --> 00:32:31.130
and that's our product?

931
00:32:31.130 --> 00:32:33.880
NOEL ALLEN: Well first, Chrome
isn't going to let you just

932
00:32:33.880 --> 00:32:36.570
load some random plug-in.

933
00:32:36.570 --> 00:32:41.070
Native code is kind of an ugly,
unsafe thing, so we want

934
00:32:41.070 --> 00:32:43.350
to make sure that we take
care of it correctly.

935
00:32:43.350 --> 00:32:47.470
So in order to use that C and
C++ code, you're going to want

936
00:32:47.470 --> 00:32:51.320
to ship that as a NEXE so that
you get that extra protection.

937
00:32:51.320 --> 00:32:54.000
COLT MCANLIS: So you're saying
that me downloading an

938
00:32:54.000 --> 00:32:57.820
arbitrary plug-in from Bob's
hugging fish website is not

939
00:32:57.820 --> 00:32:58.740
necessarily a safe
thing to do?

940
00:32:58.740 --> 00:32:59.100
NOEL ALLEN: Yes.

941
00:32:59.100 --> 00:33:01.250
Especially not the websites
you go to.

942
00:33:01.250 --> 00:33:05.780
COLT MCANLIS: Let's edit that
part out of YouTube, please.

943
00:33:05.780 --> 00:33:07.730
So the next step then, since
we actually don't want to

944
00:33:07.730 --> 00:33:09.790
provide just a plug-in to the
masses, because, again,

945
00:33:09.790 --> 00:33:11.510
that'll come back to the point,
the user will get that

946
00:33:11.510 --> 00:33:14.440
really nasty pop-up that says,
hey, Bob's Hugging Fish

947
00:33:14.440 --> 00:33:16.080
Basement would really
like to install some

948
00:33:16.080 --> 00:33:17.070
things on your computer.

949
00:33:17.070 --> 00:33:18.170
Which, never click OK to that.

950
00:33:18.170 --> 00:33:19.950
What we're going to do now is
we're actually going to do the

951
00:33:19.950 --> 00:33:23.030
final step of our process of
creating our lamb sorbet and

952
00:33:23.030 --> 00:33:25.970
actually go and compile our
code with Native Client,

953
00:33:25.970 --> 00:33:28.400
generating the proper NEXE files
that can be distributed

954
00:33:28.400 --> 00:33:29.380
on the internet.

955
00:33:29.380 --> 00:33:32.310
So now, recall this graph here
is that Native Client is a

956
00:33:32.310 --> 00:33:35.770
plug-in that's provided with
Chrome that allows external

957
00:33:35.770 --> 00:33:39.460
compiled code to effectively
call the APIs that allow

958
00:33:39.460 --> 00:33:43.730
secure sandbox execution to
lower-level system resources.

959
00:33:43.730 --> 00:33:49.160
Now, the add-in for Visual
Studio provides some specific

960
00:33:49.160 --> 00:33:50.780
nuances that we should
talk about here.

961
00:33:50.780 --> 00:33:53.700
What the Visual Studio plug-in
does at this point in time,

962
00:33:53.700 --> 00:33:56.100
because debugging and profiling
support is still in

963
00:33:56.100 --> 00:33:58.720
alpha, the add-in actually
doesn't allow you to set break

964
00:33:58.720 --> 00:34:00.820
points and do debugging inside
of Native Client.

965
00:34:00.820 --> 00:34:01.500
Yet.

966
00:34:01.500 --> 00:34:02.440
That's coming soon.

967
00:34:02.440 --> 00:34:03.480
Stay tuned.

968
00:34:03.480 --> 00:34:05.100
Follow me on G+.

969
00:34:05.100 --> 00:34:07.510
What it does now though is
it'll actually scrape the

970
00:34:07.510 --> 00:34:10.270
Visual Studio properties on
your behalf and create the

971
00:34:10.270 --> 00:34:13.730
proper command line that's
required to send off to GCC.

972
00:34:13.730 --> 00:34:17.250
GCC, of course, will then
produce the NEXE from our SDK

973
00:34:17.250 --> 00:34:19.719
and then output any information
for command line

974
00:34:19.719 --> 00:34:22.130
errors or processes back
to Visual Studio.

975
00:34:22.130 --> 00:34:24.699
So the good thing is if you are
a Visual Studio developer,

976
00:34:24.699 --> 00:34:27.060
you've got a lot of legacy code
there, this allows you to

977
00:34:27.060 --> 00:34:29.800
operate and compile with Native
Client in a way that

978
00:34:29.800 --> 00:34:33.210
feels very natural to you, save
for the break points and

979
00:34:33.210 --> 00:34:33.690
the debugging.

980
00:34:33.690 --> 00:34:34.780
But again, that's in alpha.

981
00:34:34.780 --> 00:34:35.830
We're working very
hard on that.

982
00:34:35.830 --> 00:34:36.130
Right, Noel?

983
00:34:36.130 --> 00:34:36.889
NOEL ALLEN: Exactly.

984
00:34:36.889 --> 00:34:38.670
COLT MCANLIS: Noel's actually
the guy heading that up.

985
00:34:38.670 --> 00:34:38.900
Right?

986
00:34:38.900 --> 00:34:39.230
NOEL ALLEN: Yes.

987
00:34:39.230 --> 00:34:40.964
COLT MCANLIS: Your hat is
heading that up, actually.

988
00:34:40.964 --> 00:34:42.719
NOEL ALLEN: My hat
is in charge.

989
00:34:42.719 --> 00:34:44.444
COLT MCANLIS: Your hat is
in charge of debugging.

990
00:34:44.444 --> 00:34:45.300
It's still floppy.

991
00:34:45.300 --> 00:34:46.550
I don't know what to do.

992
00:34:46.550 --> 00:34:49.870

993
00:34:49.870 --> 00:34:51.600
Anyhow, this is actually my
favorite picture in the deck,

994
00:34:51.600 --> 00:34:51.969
by the way.

995
00:34:51.969 --> 00:34:54.100
NOEL ALLEN: Thanks.

996
00:34:54.100 --> 00:34:55.590
COLT MCANLIS: It's
the salt head.

997
00:34:55.590 --> 00:34:57.520
We did a rehearsal of this a
couple weeks ago, and someone

998
00:34:57.520 --> 00:34:58.900
said, you should probably
Photoshop some

999
00:34:58.900 --> 00:34:59.880
salt shakers in there.

1000
00:34:59.880 --> 00:35:02.880
And I was like, well,
here's a salt head.

1001
00:35:02.880 --> 00:35:06.100
So part of our add-in allows
the Pepper configuration as

1002
00:35:06.100 --> 00:35:07.290
well as the NaCl
configuration.

1003
00:35:07.290 --> 00:35:10.540
So can you show us the NaCl
config and what it does?

1004
00:35:10.540 --> 00:35:12.750
NOEL ALLEN: Absolutely.

1005
00:35:12.750 --> 00:35:13.040
OK.

1006
00:35:13.040 --> 00:35:16.960
So again from the add-in that
you'll get in Pepper 22, you

1007
00:35:16.960 --> 00:35:21.280
can go ahead and set up for a
Native Client configuration.

1008
00:35:21.280 --> 00:35:24.810
And as Colt said, this is
going to drive that GCC

1009
00:35:24.810 --> 00:35:26.740
toolchain for you.

1010
00:35:26.740 --> 00:35:29.060
And then we have the
standard settings.

1011
00:35:29.060 --> 00:35:32.250
Again, I'm going to use Chrome
as the application that I'm

1012
00:35:32.250 --> 00:35:34.200
actually going to run.

1013
00:35:34.200 --> 00:35:37.740
And I am going to set some
additional flags.

1014
00:35:37.740 --> 00:35:39.690
I'm going to set my include
directories.

1015
00:35:39.690 --> 00:35:42.490
I'm going to set my
library paths.

1016
00:35:42.490 --> 00:35:47.090
All the standard things
that you would set

1017
00:35:47.090 --> 00:35:50.520
for using an SDK.

1018
00:35:50.520 --> 00:35:52.995
And we can take a
look at that.

1019
00:35:52.995 --> 00:35:56.360
COLT MCANLIS: So now, once you
create the configuration is

1020
00:35:56.360 --> 00:35:56.890
there anything else?

1021
00:35:56.890 --> 00:35:58.280
Or can we actually
just run live?

1022
00:35:58.280 --> 00:35:59.675
Will it do a lot of automation
for you?

1023
00:35:59.675 --> 00:36:01.680
NOEL ALLEN: Well, what'll end
up happening is if we try to

1024
00:36:01.680 --> 00:36:05.190
run it right now, we still have
that Windows window and

1025
00:36:05.190 --> 00:36:06.870
some other stuff that
we need to clean up.

1026
00:36:06.870 --> 00:36:09.260
So we'd actually get a lot of
compile errors or link errors

1027
00:36:09.260 --> 00:36:10.170
or whatnot.

1028
00:36:10.170 --> 00:36:13.505
So we still have to get rid of
those platform specific things

1029
00:36:13.505 --> 00:36:14.615
to Windows.

1030
00:36:14.615 --> 00:36:15.710
COLT MCANLIS: OK.

1031
00:36:15.710 --> 00:36:16.440
Let's take a look at that.

1032
00:36:16.440 --> 00:36:17.788
Or at least, can you point
them out or make

1033
00:36:17.788 --> 00:36:17.904
[? the right ?]

1034
00:36:17.904 --> 00:36:18.020
change, or--

1035
00:36:18.020 --> 00:36:18.660
NOEL ALLEN: Sure.

1036
00:36:18.660 --> 00:36:21.240
So let me show you the changes
that we had to do here.

1037
00:36:21.240 --> 00:36:25.080
So we need to obviously no
longer include the Windows

1038
00:36:25.080 --> 00:36:27.350
header, because that's
not going to work,

1039
00:36:27.350 --> 00:36:30.080
or the Windows libraries.

1040
00:36:30.080 --> 00:36:33.500
We need to stop calling main,
because that had a lot of

1041
00:36:33.500 --> 00:36:34.190
Windows code in it.

1042
00:36:34.190 --> 00:36:35.670
So instead, we just call the

1043
00:36:35.670 --> 00:36:37.770
initialization function directly.

1044
00:36:37.770 --> 00:36:43.550
And we need to no longer use
those old GL calls and things

1045
00:36:43.550 --> 00:36:47.810
that were pointing to screen
resolution and things like

1046
00:36:47.810 --> 00:36:49.240
that that were described
in Windows, so

1047
00:36:49.240 --> 00:36:50.930
basically the WGL calls.

1048
00:36:50.930 --> 00:36:52.235
COLT MCANLIS: Got it.

1049
00:36:52.235 --> 00:36:55.290
NOEL ALLEN: So once those have
all been ifdeffed out, then

1050
00:36:55.290 --> 00:36:57.095
we're actually ready to
make that change.

1051
00:36:57.095 --> 00:36:57.410
COLT MCANLIS: Cool.

1052
00:36:57.410 --> 00:37:00.440
So we've converted all of our
stuff over to Pepper.

1053
00:37:00.440 --> 00:37:02.040
So we're using those
API calls.

1054
00:37:02.040 --> 00:37:05.230
We've also removed any platform
specific code from

1055
00:37:05.230 --> 00:37:06.670
our application at this point.

1056
00:37:06.670 --> 00:37:07.490
That's the good thing.

1057
00:37:07.490 --> 00:37:09.210
And so now we can
actually run--?

1058
00:37:09.210 --> 00:37:09.760
NOEL ALLEN: OK.

1059
00:37:09.760 --> 00:37:11.690
So this is the Pepper version.

1060
00:37:11.690 --> 00:37:16.660
And now I'm going to switch to
the Native Client version.

1061
00:37:16.660 --> 00:37:20.080
Rebuild, and you can see in
the output window the

1062
00:37:20.080 --> 00:37:22.910
toolchain running.

1063
00:37:22.910 --> 00:37:25.660
And now we have the cube
actually running as a Native

1064
00:37:25.660 --> 00:37:26.290
Client module.

1065
00:37:26.290 --> 00:37:27.330
COLT MCANLIS: Fantastic.

1066
00:37:27.330 --> 00:37:28.850
Perfect.

1067
00:37:28.850 --> 00:37:30.740
That's cool.

1068
00:37:30.740 --> 00:37:34.110
NOEL ALLEN: And you can
see the load is

1069
00:37:34.110 --> 00:37:35.350
right here of the NEXE.

1070
00:37:35.350 --> 00:37:36.290
COLT MCANLIS: Excellent.

1071
00:37:36.290 --> 00:37:36.770
Excellent.

1072
00:37:36.770 --> 00:37:39.120
So now with the Visual
Studio plug-in--

1073
00:37:39.120 --> 00:37:41.080
because we want to empower
developers to do great

1074
00:37:41.080 --> 00:37:43.630
things-- you can actually swap
back and run the original

1075
00:37:43.630 --> 00:37:44.870
Win32 as well still.

1076
00:37:44.870 --> 00:37:45.150
Right?

1077
00:37:45.150 --> 00:37:46.250
NOEL ALLEN: Exactly.

1078
00:37:46.250 --> 00:37:48.360
So the Windows 32 version
is still available.

1079
00:37:48.360 --> 00:37:49.760
So I will switch back to that.

1080
00:37:49.760 --> 00:37:53.560

1081
00:37:53.560 --> 00:37:56.390
And here we are.

1082
00:37:56.390 --> 00:37:57.640
COLT MCANLIS: Really?

1083
00:37:57.640 --> 00:38:02.630

1084
00:38:02.630 --> 00:38:04.760
You honestly went to my G+
stream and pulled down a

1085
00:38:04.760 --> 00:38:06.870
picture of me eating barbecue
in Austin, Texas?

1086
00:38:06.870 --> 00:38:07.690
NOEL ALLEN: You put
it up there.

1087
00:38:07.690 --> 00:38:08.935
Anybody can get access to it.

1088
00:38:08.935 --> 00:38:12.330
What do you want?

1089
00:38:12.330 --> 00:38:14.270
COLT MCANLIS: There's
a great--

1090
00:38:14.270 --> 00:38:16.100
you didn't do this yesterday.

1091
00:38:16.100 --> 00:38:16.750
OK.

1092
00:38:16.750 --> 00:38:17.170
Awesome.

1093
00:38:17.170 --> 00:38:19.390
That's a great barbecue place
in Austin, Texas.

1094
00:38:19.390 --> 00:38:20.750
I highly recommend
you going to it.

1095
00:38:20.750 --> 00:38:23.290

1096
00:38:23.290 --> 00:38:25.970
Stop going to my G+ page.

1097
00:38:25.970 --> 00:38:27.785
I'm going to put you in
a separate Circle.

1098
00:38:27.785 --> 00:38:30.100
You don't get any access
to photos.

1099
00:38:30.100 --> 00:38:30.590
I lost myself.

1100
00:38:30.590 --> 00:38:32.260
What are we talking about?

1101
00:38:32.260 --> 00:38:32.970
OK.

1102
00:38:32.970 --> 00:38:33.410
Win32.

1103
00:38:33.410 --> 00:38:35.830
So this is the original
Win32 application.

1104
00:38:35.830 --> 00:38:37.100
Fantastic.

1105
00:38:37.100 --> 00:38:37.810
OK.

1106
00:38:37.810 --> 00:38:39.940
It's mesmerizing.

1107
00:38:39.940 --> 00:38:41.030
NOEL ALLEN: Actually,
I find it a

1108
00:38:41.030 --> 00:38:43.332
little disturbing, myself.

1109
00:38:43.332 --> 00:38:45.260
COLT MCANLIS: I'm very
disturbed right now.

1110
00:38:45.260 --> 00:38:46.200
So, fantastic.

1111
00:38:46.200 --> 00:38:47.100
So we've done the port.

1112
00:38:47.100 --> 00:38:49.130
We actually have, according to
that timer back there, we've

1113
00:38:49.130 --> 00:38:50.280
got 20 minutes left.

1114
00:38:50.280 --> 00:38:52.270
So even with me blathering on
about all this other stuff

1115
00:38:52.270 --> 00:38:54.730
about Native Client, we've been
able to chop some onions,

1116
00:38:54.730 --> 00:38:55.760
dice some things up.

1117
00:38:55.760 --> 00:38:58.810
The power of the Visual Studio
add-in actually propelled us

1118
00:38:58.810 --> 00:39:00.670
to do a lot of these things--

1119
00:39:00.670 --> 00:39:01.770
do it in a faster manner.

1120
00:39:01.770 --> 00:39:05.170
A lot of the heavy lifting
was done by the add-in.

1121
00:39:05.170 --> 00:39:07.780
Pepper was really the hard place
that we had to do some

1122
00:39:07.780 --> 00:39:08.810
API conversions.

1123
00:39:08.810 --> 00:39:12.020
Now, what we didn't talk about
today was anything under the

1124
00:39:12.020 --> 00:39:13.260
hood of Native Client.

1125
00:39:13.260 --> 00:39:16.430
Today's talk has been
specifically focusing on the

1126
00:39:16.430 --> 00:39:17.980
developer side of things.

1127
00:39:17.980 --> 00:39:20.920
Now, if you're interested in
what Native Client is doing

1128
00:39:20.920 --> 00:39:23.880
under the hood, to make sure
that you can run native code

1129
00:39:23.880 --> 00:39:26.430
in a browser with the same
security and safety as

1130
00:39:26.430 --> 00:39:29.930
JavaScript, I highly recommend
you check out Nick Bray's talk

1131
00:39:29.930 --> 00:39:31.880
on Life of Native Client
Instruction.

1132
00:39:31.880 --> 00:39:33.340
It's happening today, in fact.

1133
00:39:33.340 --> 00:39:36.690
He is actually going to pull
back the mask of running x86

1134
00:39:36.690 --> 00:39:39.970
code in the web and talk about
all the bad things it can do

1135
00:39:39.970 --> 00:39:41.910
and how Native Client addresses
those issues.

1136
00:39:41.910 --> 00:39:44.650
So I highly recommend checking
out his talk.

1137
00:39:44.650 --> 00:39:45.690
So what did we learn today?

1138
00:39:45.690 --> 00:39:47.730
Let's talk about this,
the leftovers.

1139
00:39:47.730 --> 00:39:50.450
So develop as a Pepper
plug-in first.

1140
00:39:50.450 --> 00:39:53.160
This is going to allow you
to use your existing IDE.

1141
00:39:53.160 --> 00:39:55.280
It's going to allow you to
develop as a plug-in, which a

1142
00:39:55.280 --> 00:39:58.670
lot of developers are
familiar with.

1143
00:39:58.670 --> 00:40:00.690
And it's going to allow you to
use the debugger properly.

1144
00:40:00.690 --> 00:40:02.840
Now, again you can use debugging
and profiling with

1145
00:40:02.840 --> 00:40:04.830
Native Client, but they're
very alpha right now.

1146
00:40:04.830 --> 00:40:08.050
So if you're used to using
Visual Studio all the time,

1147
00:40:08.050 --> 00:40:09.570
you're probably going to have
a lot of teeth gnashing in

1148
00:40:09.570 --> 00:40:10.210
that process.

1149
00:40:10.210 --> 00:40:12.560
Instead, use your IDE, get
everything ported over to

1150
00:40:12.560 --> 00:40:16.020
Pepper, make your big
code changes there.

1151
00:40:16.020 --> 00:40:18.630
Never underestimate the power
of a good platform wrapper.

1152
00:40:18.630 --> 00:40:18.860
Right?

1153
00:40:18.860 --> 00:40:21.560
Because all the platform code
that effectively you're using

1154
00:40:21.560 --> 00:40:24.200
for Pepper, you should properly
abstract out.

1155
00:40:24.200 --> 00:40:25.805
So when you're about to jump in
the code and be like, I'm

1156
00:40:25.805 --> 00:40:28.300
going to do Native Client,
stop, hammer

1157
00:40:28.300 --> 00:40:29.410
time, think about it.

1158
00:40:29.410 --> 00:40:32.680
And then write a good wrapper
so you can actually maintain

1159
00:40:32.680 --> 00:40:34.610
your backward compatibility to
the other [? SKUs ?] that

1160
00:40:34.610 --> 00:40:35.840
you're targeting.

1161
00:40:35.840 --> 00:40:37.160
We ported FileIO.

1162
00:40:37.160 --> 00:40:39.140
We ported GL to GLES.

1163
00:40:39.140 --> 00:40:41.760
And then we remove all of our
platform specific stuff from

1164
00:40:41.760 --> 00:40:44.910
NaCl, and we did it with really
cool looking hats.

1165
00:40:44.910 --> 00:40:47.020
I'm still amazed you
found these.

1166
00:40:47.020 --> 00:40:49.450
And with that, we're
done with the port.

1167
00:40:49.450 --> 00:40:50.130
I'm Colt McAnlis.

1168
00:40:50.130 --> 00:40:50.935
NOEL ALLEN: I'm Noel Allen.

1169
00:40:50.935 --> 00:40:52.800
COLT MCANLIS: That's porting
in 60 minutes.

1170
00:40:52.800 --> 00:40:55.080
And we'll open the floor for
some questions right now.

1171
00:40:55.080 --> 00:40:58.816

1172
00:40:58.816 --> 00:41:01.690
You did good.

1173
00:41:01.690 --> 00:41:02.740
I don't know if I
should curtsy.

1174
00:41:02.740 --> 00:41:04.200
NOEL ALLEN: I don't
do that funny bow.

1175
00:41:04.200 --> 00:41:05.100
I'd probably just
fall right over.

1176
00:41:05.100 --> 00:41:05.960
COLT MCANLIS: Probably.

1177
00:41:05.960 --> 00:41:06.900
We're a little bit top heavy.

1178
00:41:06.900 --> 00:41:08.010
So there's some microphones
here.

1179
00:41:08.010 --> 00:41:11.630
If you've got some questions,
please feel free to speak up.

1180
00:41:11.630 --> 00:41:12.430
Yes, sir.

1181
00:41:12.430 --> 00:41:13.490
No, the guy behind you.

1182
00:41:13.490 --> 00:41:14.885
No, I'm just messing with you.

1183
00:41:14.885 --> 00:41:15.360
Sorry.

1184
00:41:15.360 --> 00:41:17.566
The hat, it gives me power.

1185
00:41:17.566 --> 00:41:20.320
AUDIENCE: I was wondering if
there are any plans to be able

1186
00:41:20.320 --> 00:41:24.550
to target Pepper to native
binaries so that I could use

1187
00:41:24.550 --> 00:41:28.770
the same APIs for deploying to
NaCl and to deploying to just

1188
00:41:28.770 --> 00:41:31.690
an application running on
there and not have that,

1189
00:41:31.690 --> 00:41:33.695
ifdeffed out Win32 code.

1190
00:41:33.695 --> 00:41:35.730
COLT MCANLIS: That's actually
a great question.

1191
00:41:35.730 --> 00:41:37.510
I'm going to let
you field this.

1192
00:41:37.510 --> 00:41:39.250
NOEL ALLEN: Actually, could
you repeat that again?

1193
00:41:39.250 --> 00:41:41.790
I'm not sure exactly what
you were asking there.

1194
00:41:41.790 --> 00:41:44.530
Can you take a binary that's
already compiled?

1195
00:41:44.530 --> 00:41:45.290
AUDIENCE: So no.

1196
00:41:45.290 --> 00:41:48.780
So the question is you've been
porting the app to use these

1197
00:41:48.780 --> 00:41:52.550
Pepper APIs instead of using
the native Windows APIs.

1198
00:41:52.550 --> 00:41:56.320
Is there any plans to create
kind of a wrapper that is the

1199
00:41:56.320 --> 00:41:59.420
Pepper API but it targets
Windows functions instead of

1200
00:41:59.420 --> 00:42:00.010
the Chrome functions?

1201
00:42:00.010 --> 00:42:01.990
COLT MCANLIS: So we could use
fread, and under the hood it

1202
00:42:01.990 --> 00:42:02.850
would do the right
Pepper thing.

1203
00:42:02.850 --> 00:42:03.170
AUDIENCE: Right.

1204
00:42:03.170 --> 00:42:04.270
NOEL ALLEN: Gotcha.

1205
00:42:04.270 --> 00:42:04.690
Yes.

1206
00:42:04.690 --> 00:42:08.490
So actually, there's some stuff
already out there that

1207
00:42:08.490 --> 00:42:10.150
other people have developed.

1208
00:42:10.150 --> 00:42:13.990
But we are actually putting in
a subset of that into the SDK

1209
00:42:13.990 --> 00:42:15.090
as we speak.

1210
00:42:15.090 --> 00:42:19.970
So you can expect to see things
like pthread wrappers,

1211
00:42:19.970 --> 00:42:24.570
access to fread open, closed,
the standard POSIX-y things,

1212
00:42:24.570 --> 00:42:28.830
except running in Win32 so that
you can take that Native

1213
00:42:28.830 --> 00:42:31.940
Client application and then run
it as a Pepper plug-in so

1214
00:42:31.940 --> 00:42:33.400
that you can do your
development

1215
00:42:33.400 --> 00:42:34.650
a little bit easier.

1216
00:42:34.650 --> 00:42:37.650

1217
00:42:37.650 --> 00:42:39.760
AUDIENCE: So the question I have
is about the transition

1218
00:42:39.760 --> 00:42:42.340
from the no sandbox
to the sandbox.

1219
00:42:42.340 --> 00:42:45.330
So basically, obviously, since
you are using Windows calls,

1220
00:42:45.330 --> 00:42:49.730
you used the no sandbox call
initially when you just made

1221
00:42:49.730 --> 00:42:53.370
it a Pepper plug-in.

1222
00:42:53.370 --> 00:42:54.950
So where does the transition
happen?

1223
00:42:54.950 --> 00:42:59.030
So when you actually make it a
NEXE and when you download it,

1224
00:42:59.030 --> 00:43:01.610
is it that the MIME type is
handled by the Native Client?

1225
00:43:01.610 --> 00:43:04.190

1226
00:43:04.190 --> 00:43:06.780
Where does the transition
to the sandbox happen?

1227
00:43:06.780 --> 00:43:08.770
When you ran it finally,
did you also

1228
00:43:08.770 --> 00:43:09.610
run it with no sandbox?

1229
00:43:09.610 --> 00:43:10.600
NOEL ALLEN: OK.

1230
00:43:10.600 --> 00:43:14.820
So what the no sandbox does
is it takes out that

1231
00:43:14.820 --> 00:43:15.850
outer Chrome sandbox.

1232
00:43:15.850 --> 00:43:16.895
AUDIENCE: I know what
no sandbox does.

1233
00:43:16.895 --> 00:43:18.232
NOEL ALLEN: I was just
explaining it

1234
00:43:18.232 --> 00:43:19.060
for everybody else.

1235
00:43:19.060 --> 00:43:20.450
COLT MCANLIS: There's a lot of
other people in the room who

1236
00:43:20.450 --> 00:43:21.235
may not know.

1237
00:43:21.235 --> 00:43:25.410
NOEL ALLEN: But what that outer
sandbox does is it gives

1238
00:43:25.410 --> 00:43:26.880
you that OS protection.

1239
00:43:26.880 --> 00:43:29.750
So it interferes with things
like debugging.

1240
00:43:29.750 --> 00:43:33.160
So I have the no sandbox off to
enable me to debug at every

1241
00:43:33.160 --> 00:43:34.020
single step.

1242
00:43:34.020 --> 00:43:36.130
Now, when you actually deploy
it-- so if I took this

1243
00:43:36.130 --> 00:43:39.734
application, I can switch it
back to Native Client.

1244
00:43:39.734 --> 00:43:42.490
Go over here to Properties,
Debugging.

1245
00:43:42.490 --> 00:43:45.050
And as you can see,
I do not have No

1246
00:43:45.050 --> 00:43:47.720
Sandbox set at this point.

1247
00:43:47.720 --> 00:43:49.780
So I'm actually running it
with the sandbox on.

1248
00:43:49.780 --> 00:43:50.530
AUDIENCE: Right.

1249
00:43:50.530 --> 00:43:52.180
So that was my question.

1250
00:43:52.180 --> 00:43:54.720
So how does this actually
work in the sense that--

1251
00:43:54.720 --> 00:43:57.675
so when the page actually loads,
does it have a MIME

1252
00:43:57.675 --> 00:44:01.140
type that is whatever
application slash xNaCl, and

1253
00:44:01.140 --> 00:44:04.715
that's handled by whatever the
NaCl processor inside Chrome?

1254
00:44:04.715 --> 00:44:05.320
COLT MCANLIS: Yes.

1255
00:44:05.320 --> 00:44:07.390
So remember early on in the
talk, we talked about using

1256
00:44:07.390 --> 00:44:09.840
the embed tag to actually
signify and point to the

1257
00:44:09.840 --> 00:44:10.810
Native Client manifest.

1258
00:44:10.810 --> 00:44:12.510
And we defined the
MIME type there.

1259
00:44:12.510 --> 00:44:15.690
And then, when the page is
parsed by Chrome, it'll say,

1260
00:44:15.690 --> 00:44:17.690
hey, we found this MIME type.

1261
00:44:17.690 --> 00:44:20.240
And it has a table that says,
load this plug-in to handle

1262
00:44:20.240 --> 00:44:21.080
this MIME type.

1263
00:44:21.080 --> 00:44:21.400
NOEL ALLEN: Correct.

1264
00:44:21.400 --> 00:44:26.230
So, the application xNaCl
typically points to the Native

1265
00:44:26.230 --> 00:44:28.610
Client plug-in.

1266
00:44:28.610 --> 00:44:32.140
But we were overwriting that for
the purpose of developing

1267
00:44:32.140 --> 00:44:34.690
as a Pepper plug-in
to make it easier.

1268
00:44:34.690 --> 00:44:36.305
COLT MCANLIS: We were
hacking the planet.

1269
00:44:36.305 --> 00:44:36.925
AUDIENCE: Thanks.

1270
00:44:36.925 --> 00:44:38.175
COLT MCANLIS: No problem.

1271
00:44:38.175 --> 00:44:43.268

1272
00:44:43.268 --> 00:44:46.920
AUDIENCE: I was wondering if
there's plans to get this in

1273
00:44:46.920 --> 00:44:48.190
the mobile version of Chrome.

1274
00:44:48.190 --> 00:44:49.440
And if so, when?

1275
00:44:49.440 --> 00:44:52.742

1276
00:44:52.742 --> 00:44:54.310
NOEL ALLEN: I actually
don't know.

1277
00:44:54.310 --> 00:44:57.952
I'll leave that to you.

1278
00:44:57.952 --> 00:45:00.840
COLT MCANLIS: Next question.

1279
00:45:00.840 --> 00:45:02.310
I've got no answers
for you today.

1280
00:45:02.310 --> 00:45:03.540
I'm sorry.

1281
00:45:03.540 --> 00:45:04.730
AUDIENCE: Then maybe--

1282
00:45:04.730 --> 00:45:07.450
the NEXE format very
specific to x86.

1283
00:45:07.450 --> 00:45:11.560
Or is it something like LLVM
that might be able to be

1284
00:45:11.560 --> 00:45:13.540
compiled for an ARM?

1285
00:45:13.540 --> 00:45:17.620
NOEL ALLEN: So let me rephrase
that question.

1286
00:45:17.620 --> 00:45:22.330
So what you're looking at right
now is specifically an

1287
00:45:22.330 --> 00:45:26.920
x86, 64-bit binary that was
generated by the toolchains.

1288
00:45:26.920 --> 00:45:27.440
OK?

1289
00:45:27.440 --> 00:45:30.830
So if someone had a 32-bit
version of the browser, then

1290
00:45:30.830 --> 00:45:32.700
they would be using the
32-bit version.

1291
00:45:32.700 --> 00:45:36.250
Or if they had an ARM, they'd
be using the ARM version.

1292
00:45:36.250 --> 00:45:40.540
Now, we are working on a
portable version that will, in

1293
00:45:40.540 --> 00:45:43.690
fact, use LLVM to generate
bitcode.

1294
00:45:43.690 --> 00:45:46.240
And then we will do
the translation at

1295
00:45:46.240 --> 00:45:47.870
the browser for you.

1296
00:45:47.870 --> 00:45:50.750
So you can expect that to be
coming around like, say, end

1297
00:45:50.750 --> 00:45:51.640
of the year.

1298
00:45:51.640 --> 00:45:54.358
AUDIENCE: Thank you.

1299
00:45:54.358 --> 00:45:55.810
AUDIENCE: Hi there.

1300
00:45:55.810 --> 00:45:58.340
If I have a pretty sophisticated
Pepper plug-in

1301
00:45:58.340 --> 00:46:00.130
already made--

1302
00:46:00.130 --> 00:46:03.230
Well, I guess my question is do
I have full access to all

1303
00:46:03.230 --> 00:46:06.746
the Pepper APIs inside NaCl,
or is it some subset?

1304
00:46:06.746 --> 00:46:13.510
NOEL ALLEN: It is a subset,
but it's almost all.

1305
00:46:13.510 --> 00:46:18.780
So there's a few private
interfaces that are only

1306
00:46:18.780 --> 00:46:21.580
usable by a few different
plug-ins.

1307
00:46:21.580 --> 00:46:24.220
So unless you were one of those
special cases already,

1308
00:46:24.220 --> 00:46:25.886
you wouldn't have had
access to it.

1309
00:46:25.886 --> 00:46:27.260
AUDIENCE: OK, thanks.

1310
00:46:27.260 --> 00:46:30.122

1311
00:46:30.122 --> 00:46:33.320
AUDIENCE: I noticed you took
out two of the libs.

1312
00:46:33.320 --> 00:46:37.130
If I have an external lib,
I need to recompile

1313
00:46:37.130 --> 00:46:38.510
that lib as a NaCl.

1314
00:46:38.510 --> 00:46:39.210
Is that correct?

1315
00:46:39.210 --> 00:46:40.080
And then statically link it?

1316
00:46:40.080 --> 00:46:41.145
COLT MCANLIS: Yes.

1317
00:46:41.145 --> 00:46:41.760
NOEL ALLEN: Yes.

1318
00:46:41.760 --> 00:46:45.180
So you're asking what
do you have to do

1319
00:46:45.180 --> 00:46:45.920
with the two libraries.

1320
00:46:45.920 --> 00:46:50.520
So the libraries that we see
here, that I took out, is the

1321
00:46:50.520 --> 00:46:53.600
Windows GL libraries.

1322
00:46:53.600 --> 00:46:57.470
Since we're GLES, you're
going to be using GLES.

1323
00:46:57.470 --> 00:47:02.520
Now, as you can see here, what
I'm doing is I am loading the

1324
00:47:02.520 --> 00:47:06.220
PPAPI version of the
GLES2 library.

1325
00:47:06.220 --> 00:47:11.050
So you will get this in the
SDK in the native form for

1326
00:47:11.050 --> 00:47:11.690
your platform.

1327
00:47:11.690 --> 00:47:15.350
So Windows, Mac, Linux.

1328
00:47:15.350 --> 00:47:17.680
And of course, the
GCC toolchain

1329
00:47:17.680 --> 00:47:18.630
ships with it as well.

1330
00:47:18.630 --> 00:47:21.140
So you'll have it on
all the platforms.

1331
00:47:21.140 --> 00:47:23.450
And we do actually ship the
source for this library.

1332
00:47:23.450 --> 00:47:25.266
So you could actually recompile
it yourself, if you

1333
00:47:25.266 --> 00:47:25.710
wanted to as well.

1334
00:47:25.710 --> 00:47:27.880
COLT MCANLIS: And If you have
libraries, you do have to

1335
00:47:27.880 --> 00:47:30.540
recompile them, because
otherwise it may have unsafe

1336
00:47:30.540 --> 00:47:34.660
code or it may use fread or try
to open a window and that

1337
00:47:34.660 --> 00:47:36.670
would, of course, fail
the validation.

1338
00:47:36.670 --> 00:47:38.660
AUDIENCE: I'm sure there's
an example I can follow.

1339
00:47:38.660 --> 00:47:39.810
That sounds great.

1340
00:47:39.810 --> 00:47:45.380
The other question was, now that
Chrome is in Android 4.1,

1341
00:47:45.380 --> 00:47:49.175
is Native Client also runnable
through that Chrome version?

1342
00:47:49.175 --> 00:47:53.200
COLT MCANLIS: I believe the
correct answer is no.

1343
00:47:53.200 --> 00:47:56.170
Because remember Chrome on
Android doesn't have all of

1344
00:47:56.170 --> 00:47:57.910
the big wizbang features
today.

1345
00:47:57.910 --> 00:48:00.470
We want to, of course, as
Chrome, move towards having

1346
00:48:00.470 --> 00:48:02.680
feature parity in as many
places as we do.

1347
00:48:02.680 --> 00:48:03.930
Right now, we actually
don't have Native

1348
00:48:03.930 --> 00:48:04.760
Client running on Chrome.

1349
00:48:04.760 --> 00:48:05.090
NOEL ALLEN: Yes.

1350
00:48:05.090 --> 00:48:06.860
Currently, this is
a desktop only--

1351
00:48:06.860 --> 00:48:07.060
COLT MCANLIS: Yes.

1352
00:48:07.060 --> 00:48:08.310
Currently desktop only.

1353
00:48:08.310 --> 00:48:10.710

1354
00:48:10.710 --> 00:48:11.500
Fantastic.

1355
00:48:11.500 --> 00:48:13.800
Going once, going twice.

1356
00:48:13.800 --> 00:48:14.740
Thank you, guys, for your
attention today.

1357
00:48:14.740 --> 00:48:15.390
We appreciate it.

1358
00:48:15.390 --> 00:48:16.640
Thank you.

1359
00:48:16.640 --> 00:48:20.033

